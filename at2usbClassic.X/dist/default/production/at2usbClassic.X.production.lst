

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon May 06 19:06:15 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    30                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=3
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=3
    76                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,delta=2
   132                           	psect	text104,local,class=CODE,merge=1,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   136                           	dabs	1,0x620,48
   137                           	dabs	1,0x5C1,47
   138                           	dabs	1,0x5A0,33
   139                           	dabs	1,0x52D,67
   140                           	dabs	1,0x20,32,_BDT
   141                           	dabs	1,0x48,8,_CtrlTrfData
   142                           	dabs	1,0x40,8,_SetupPkt
   143                           	dabs	1,0xA0,8,_inputReport
   144                           	dabs	1,0x120,1,_outputReport
   145                           	dabs	1,0x232D,0,_keyboard
   146                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   147                           	dabs	1,0x7E,2
   148     0000                     
   149                           ; Generated 07/09/2023 GMT
   150                           ; 
   151                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   152                           ; All rights reserved.
   153                           ; 
   154                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   155                           ; 
   156                           ; Redistribution and use in source and binary forms, with or without modification, are
   157                           ; permitted provided that the following conditions are met:
   158                           ; 
   159                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   160                           ;        conditions and the following disclaimer.
   161                           ; 
   162                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   163                           ;        of conditions and the following disclaimer in the documentation and/or other
   164                           ;        materials provided with the distribution. Publication is not required when
   165                           ;        this file is used in an embedded application.
   166                           ; 
   167                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   168                           ;        software without specific prior written permission.
   169                           ; 
   170                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   171                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   172                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   173                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   174                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   175                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   176                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   177                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   178                           ; 
   179                           ; 
   180                           ; Code-generator required, PIC16F1459 Definitions
   181                           ; 
   182                           ; SFR Addresses
   183     0000                     	;# 
   184     0001                     	;# 
   185     0002                     	;# 
   186     0003                     	;# 
   187     0004                     	;# 
   188     0005                     	;# 
   189     0006                     	;# 
   190     0007                     	;# 
   191     0008                     	;# 
   192     0009                     	;# 
   193     000A                     	;# 
   194     000B                     	;# 
   195     000C                     	;# 
   196     000D                     	;# 
   197     000E                     	;# 
   198     0011                     	;# 
   199     0012                     	;# 
   200     0015                     	;# 
   201     0016                     	;# 
   202     0016                     	;# 
   203     0017                     	;# 
   204     0018                     	;# 
   205     0019                     	;# 
   206     001A                     	;# 
   207     001B                     	;# 
   208     001C                     	;# 
   209     008C                     	;# 
   210     008D                     	;# 
   211     008E                     	;# 
   212     0091                     	;# 
   213     0092                     	;# 
   214     0095                     	;# 
   215     0096                     	;# 
   216     0097                     	;# 
   217     0098                     	;# 
   218     0099                     	;# 
   219     009A                     	;# 
   220     009B                     	;# 
   221     009B                     	;# 
   222     009C                     	;# 
   223     009D                     	;# 
   224     009E                     	;# 
   225     009F                     	;# 
   226     010C                     	;# 
   227     010D                     	;# 
   228     010E                     	;# 
   229     0111                     	;# 
   230     0112                     	;# 
   231     0113                     	;# 
   232     0114                     	;# 
   233     0115                     	;# 
   234     0116                     	;# 
   235     0117                     	;# 
   236     0118                     	;# 
   237     0119                     	;# 
   238     011D                     	;# 
   239     018C                     	;# 
   240     018D                     	;# 
   241     018E                     	;# 
   242     0191                     	;# 
   243     0191                     	;# 
   244     0192                     	;# 
   245     0193                     	;# 
   246     0193                     	;# 
   247     0194                     	;# 
   248     0195                     	;# 
   249     0196                     	;# 
   250     0197                     	;# 
   251     0199                     	;# 
   252     019A                     	;# 
   253     019B                     	;# 
   254     019B                     	;# 
   255     019C                     	;# 
   256     019D                     	;# 
   257     019E                     	;# 
   258     019F                     	;# 
   259     020C                     	;# 
   260     020D                     	;# 
   261     0211                     	;# 
   262     0211                     	;# 
   263     0212                     	;# 
   264     0212                     	;# 
   265     0213                     	;# 
   266     0213                     	;# 
   267     0214                     	;# 
   268     0214                     	;# 
   269     0215                     	;# 
   270     0215                     	;# 
   271     0215                     	;# 
   272     0216                     	;# 
   273     0216                     	;# 
   274     0217                     	;# 
   275     0217                     	;# 
   276     0391                     	;# 
   277     0392                     	;# 
   278     0393                     	;# 
   279     0394                     	;# 
   280     0395                     	;# 
   281     0396                     	;# 
   282     039A                     	;# 
   283     039B                     	;# 
   284     0611                     	;# 
   285     0612                     	;# 
   286     0613                     	;# 
   287     0613                     	;# 
   288     0614                     	;# 
   289     0615                     	;# 
   290     0616                     	;# 
   291     0616                     	;# 
   292     0691                     	;# 
   293     0692                     	;# 
   294     0693                     	;# 
   295     0694                     	;# 
   296     0695                     	;# 
   297     0E8E                     	;# 
   298     0E8F                     	;# 
   299     0E90                     	;# 
   300     0E91                     	;# 
   301     0E92                     	;# 
   302     0E93                     	;# 
   303     0E94                     	;# 
   304     0E94                     	;# 
   305     0E95                     	;# 
   306     0E96                     	;# 
   307     0E97                     	;# 
   308     0E98                     	;# 
   309     0E99                     	;# 
   310     0E9A                     	;# 
   311     0E9B                     	;# 
   312     0E9C                     	;# 
   313     0E9D                     	;# 
   314     0E9E                     	;# 
   315     0E9F                     	;# 
   316     0FE4                     	;# 
   317     0FE5                     	;# 
   318     0FE6                     	;# 
   319     0FE7                     	;# 
   320     0FE8                     	;# 
   321     0FE9                     	;# 
   322     0FEA                     	;# 
   323     0FEB                     	;# 
   324     0FED                     	;# 
   325     0FEE                     	;# 
   326     0FEF                     	;# 
   327     0000                     	;# 
   328     0001                     	;# 
   329     0002                     	;# 
   330     0003                     	;# 
   331     0004                     	;# 
   332     0005                     	;# 
   333     0006                     	;# 
   334     0007                     	;# 
   335     0008                     	;# 
   336     0009                     	;# 
   337     000A                     	;# 
   338     000B                     	;# 
   339     000C                     	;# 
   340     000D                     	;# 
   341     000E                     	;# 
   342     0011                     	;# 
   343     0012                     	;# 
   344     0015                     	;# 
   345     0016                     	;# 
   346     0016                     	;# 
   347     0017                     	;# 
   348     0018                     	;# 
   349     0019                     	;# 
   350     001A                     	;# 
   351     001B                     	;# 
   352     001C                     	;# 
   353     008C                     	;# 
   354     008D                     	;# 
   355     008E                     	;# 
   356     0091                     	;# 
   357     0092                     	;# 
   358     0095                     	;# 
   359     0096                     	;# 
   360     0097                     	;# 
   361     0098                     	;# 
   362     0099                     	;# 
   363     009A                     	;# 
   364     009B                     	;# 
   365     009B                     	;# 
   366     009C                     	;# 
   367     009D                     	;# 
   368     009E                     	;# 
   369     009F                     	;# 
   370     010C                     	;# 
   371     010D                     	;# 
   372     010E                     	;# 
   373     0111                     	;# 
   374     0112                     	;# 
   375     0113                     	;# 
   376     0114                     	;# 
   377     0115                     	;# 
   378     0116                     	;# 
   379     0117                     	;# 
   380     0118                     	;# 
   381     0119                     	;# 
   382     011D                     	;# 
   383     018C                     	;# 
   384     018D                     	;# 
   385     018E                     	;# 
   386     0191                     	;# 
   387     0191                     	;# 
   388     0192                     	;# 
   389     0193                     	;# 
   390     0193                     	;# 
   391     0194                     	;# 
   392     0195                     	;# 
   393     0196                     	;# 
   394     0197                     	;# 
   395     0199                     	;# 
   396     019A                     	;# 
   397     019B                     	;# 
   398     019B                     	;# 
   399     019C                     	;# 
   400     019D                     	;# 
   401     019E                     	;# 
   402     019F                     	;# 
   403     020C                     	;# 
   404     020D                     	;# 
   405     0211                     	;# 
   406     0211                     	;# 
   407     0212                     	;# 
   408     0212                     	;# 
   409     0213                     	;# 
   410     0213                     	;# 
   411     0214                     	;# 
   412     0214                     	;# 
   413     0215                     	;# 
   414     0215                     	;# 
   415     0215                     	;# 
   416     0216                     	;# 
   417     0216                     	;# 
   418     0217                     	;# 
   419     0217                     	;# 
   420     0391                     	;# 
   421     0392                     	;# 
   422     0393                     	;# 
   423     0394                     	;# 
   424     0395                     	;# 
   425     0396                     	;# 
   426     039A                     	;# 
   427     039B                     	;# 
   428     0611                     	;# 
   429     0612                     	;# 
   430     0613                     	;# 
   431     0613                     	;# 
   432     0614                     	;# 
   433     0615                     	;# 
   434     0616                     	;# 
   435     0616                     	;# 
   436     0691                     	;# 
   437     0692                     	;# 
   438     0693                     	;# 
   439     0694                     	;# 
   440     0695                     	;# 
   441     0E8E                     	;# 
   442     0E8F                     	;# 
   443     0E90                     	;# 
   444     0E91                     	;# 
   445     0E92                     	;# 
   446     0E93                     	;# 
   447     0E94                     	;# 
   448     0E94                     	;# 
   449     0E95                     	;# 
   450     0E96                     	;# 
   451     0E97                     	;# 
   452     0E98                     	;# 
   453     0E99                     	;# 
   454     0E9A                     	;# 
   455     0E9B                     	;# 
   456     0E9C                     	;# 
   457     0E9D                     	;# 
   458     0E9E                     	;# 
   459     0E9F                     	;# 
   460     0FE4                     	;# 
   461     0FE5                     	;# 
   462     0FE6                     	;# 
   463     0FE7                     	;# 
   464     0FE8                     	;# 
   465     0FE9                     	;# 
   466     0FEA                     	;# 
   467     0FEB                     	;# 
   468     0FED                     	;# 
   469     0FEE                     	;# 
   470     0FEF                     	;# 
   471     0000                     	;# 
   472     0001                     	;# 
   473     0002                     	;# 
   474     0003                     	;# 
   475     0004                     	;# 
   476     0005                     	;# 
   477     0006                     	;# 
   478     0007                     	;# 
   479     0008                     	;# 
   480     0009                     	;# 
   481     000A                     	;# 
   482     000B                     	;# 
   483     000C                     	;# 
   484     000D                     	;# 
   485     000E                     	;# 
   486     0011                     	;# 
   487     0012                     	;# 
   488     0015                     	;# 
   489     0016                     	;# 
   490     0016                     	;# 
   491     0017                     	;# 
   492     0018                     	;# 
   493     0019                     	;# 
   494     001A                     	;# 
   495     001B                     	;# 
   496     001C                     	;# 
   497     008C                     	;# 
   498     008D                     	;# 
   499     008E                     	;# 
   500     0091                     	;# 
   501     0092                     	;# 
   502     0095                     	;# 
   503     0096                     	;# 
   504     0097                     	;# 
   505     0098                     	;# 
   506     0099                     	;# 
   507     009A                     	;# 
   508     009B                     	;# 
   509     009B                     	;# 
   510     009C                     	;# 
   511     009D                     	;# 
   512     009E                     	;# 
   513     009F                     	;# 
   514     010C                     	;# 
   515     010D                     	;# 
   516     010E                     	;# 
   517     0111                     	;# 
   518     0112                     	;# 
   519     0113                     	;# 
   520     0114                     	;# 
   521     0115                     	;# 
   522     0116                     	;# 
   523     0117                     	;# 
   524     0118                     	;# 
   525     0119                     	;# 
   526     011D                     	;# 
   527     018C                     	;# 
   528     018D                     	;# 
   529     018E                     	;# 
   530     0191                     	;# 
   531     0191                     	;# 
   532     0192                     	;# 
   533     0193                     	;# 
   534     0193                     	;# 
   535     0194                     	;# 
   536     0195                     	;# 
   537     0196                     	;# 
   538     0197                     	;# 
   539     0199                     	;# 
   540     019A                     	;# 
   541     019B                     	;# 
   542     019B                     	;# 
   543     019C                     	;# 
   544     019D                     	;# 
   545     019E                     	;# 
   546     019F                     	;# 
   547     020C                     	;# 
   548     020D                     	;# 
   549     0211                     	;# 
   550     0211                     	;# 
   551     0212                     	;# 
   552     0212                     	;# 
   553     0213                     	;# 
   554     0213                     	;# 
   555     0214                     	;# 
   556     0214                     	;# 
   557     0215                     	;# 
   558     0215                     	;# 
   559     0215                     	;# 
   560     0216                     	;# 
   561     0216                     	;# 
   562     0217                     	;# 
   563     0217                     	;# 
   564     0391                     	;# 
   565     0392                     	;# 
   566     0393                     	;# 
   567     0394                     	;# 
   568     0395                     	;# 
   569     0396                     	;# 
   570     039A                     	;# 
   571     039B                     	;# 
   572     0611                     	;# 
   573     0612                     	;# 
   574     0613                     	;# 
   575     0613                     	;# 
   576     0614                     	;# 
   577     0615                     	;# 
   578     0616                     	;# 
   579     0616                     	;# 
   580     0691                     	;# 
   581     0692                     	;# 
   582     0693                     	;# 
   583     0694                     	;# 
   584     0695                     	;# 
   585     0E8E                     	;# 
   586     0E8F                     	;# 
   587     0E90                     	;# 
   588     0E91                     	;# 
   589     0E92                     	;# 
   590     0E93                     	;# 
   591     0E94                     	;# 
   592     0E94                     	;# 
   593     0E95                     	;# 
   594     0E96                     	;# 
   595     0E97                     	;# 
   596     0E98                     	;# 
   597     0E99                     	;# 
   598     0E9A                     	;# 
   599     0E9B                     	;# 
   600     0E9C                     	;# 
   601     0E9D                     	;# 
   602     0E9E                     	;# 
   603     0E9F                     	;# 
   604     0FE4                     	;# 
   605     0FE5                     	;# 
   606     0FE6                     	;# 
   607     0FE7                     	;# 
   608     0FE8                     	;# 
   609     0FE9                     	;# 
   610     0FEA                     	;# 
   611     0FEB                     	;# 
   612     0FED                     	;# 
   613     0FEE                     	;# 
   614     0FEF                     	;# 
   615     0000                     	;# 
   616     0001                     	;# 
   617     0002                     	;# 
   618     0003                     	;# 
   619     0004                     	;# 
   620     0005                     	;# 
   621     0006                     	;# 
   622     0007                     	;# 
   623     0008                     	;# 
   624     0009                     	;# 
   625     000A                     	;# 
   626     000B                     	;# 
   627     000C                     	;# 
   628     000D                     	;# 
   629     000E                     	;# 
   630     0011                     	;# 
   631     0012                     	;# 
   632     0015                     	;# 
   633     0016                     	;# 
   634     0016                     	;# 
   635     0017                     	;# 
   636     0018                     	;# 
   637     0019                     	;# 
   638     001A                     	;# 
   639     001B                     	;# 
   640     001C                     	;# 
   641     008C                     	;# 
   642     008D                     	;# 
   643     008E                     	;# 
   644     0091                     	;# 
   645     0092                     	;# 
   646     0095                     	;# 
   647     0096                     	;# 
   648     0097                     	;# 
   649     0098                     	;# 
   650     0099                     	;# 
   651     009A                     	;# 
   652     009B                     	;# 
   653     009B                     	;# 
   654     009C                     	;# 
   655     009D                     	;# 
   656     009E                     	;# 
   657     009F                     	;# 
   658     010C                     	;# 
   659     010D                     	;# 
   660     010E                     	;# 
   661     0111                     	;# 
   662     0112                     	;# 
   663     0113                     	;# 
   664     0114                     	;# 
   665     0115                     	;# 
   666     0116                     	;# 
   667     0117                     	;# 
   668     0118                     	;# 
   669     0119                     	;# 
   670     011D                     	;# 
   671     018C                     	;# 
   672     018D                     	;# 
   673     018E                     	;# 
   674     0191                     	;# 
   675     0191                     	;# 
   676     0192                     	;# 
   677     0193                     	;# 
   678     0193                     	;# 
   679     0194                     	;# 
   680     0195                     	;# 
   681     0196                     	;# 
   682     0197                     	;# 
   683     0199                     	;# 
   684     019A                     	;# 
   685     019B                     	;# 
   686     019B                     	;# 
   687     019C                     	;# 
   688     019D                     	;# 
   689     019E                     	;# 
   690     019F                     	;# 
   691     020C                     	;# 
   692     020D                     	;# 
   693     0211                     	;# 
   694     0211                     	;# 
   695     0212                     	;# 
   696     0212                     	;# 
   697     0213                     	;# 
   698     0213                     	;# 
   699     0214                     	;# 
   700     0214                     	;# 
   701     0215                     	;# 
   702     0215                     	;# 
   703     0215                     	;# 
   704     0216                     	;# 
   705     0216                     	;# 
   706     0217                     	;# 
   707     0217                     	;# 
   708     0391                     	;# 
   709     0392                     	;# 
   710     0393                     	;# 
   711     0394                     	;# 
   712     0395                     	;# 
   713     0396                     	;# 
   714     039A                     	;# 
   715     039B                     	;# 
   716     0611                     	;# 
   717     0612                     	;# 
   718     0613                     	;# 
   719     0613                     	;# 
   720     0614                     	;# 
   721     0615                     	;# 
   722     0616                     	;# 
   723     0616                     	;# 
   724     0691                     	;# 
   725     0692                     	;# 
   726     0693                     	;# 
   727     0694                     	;# 
   728     0695                     	;# 
   729     0E8E                     	;# 
   730     0E8F                     	;# 
   731     0E90                     	;# 
   732     0E91                     	;# 
   733     0E92                     	;# 
   734     0E93                     	;# 
   735     0E94                     	;# 
   736     0E94                     	;# 
   737     0E95                     	;# 
   738     0E96                     	;# 
   739     0E97                     	;# 
   740     0E98                     	;# 
   741     0E99                     	;# 
   742     0E9A                     	;# 
   743     0E9B                     	;# 
   744     0E9C                     	;# 
   745     0E9D                     	;# 
   746     0E9E                     	;# 
   747     0E9F                     	;# 
   748     0FE4                     	;# 
   749     0FE5                     	;# 
   750     0FE6                     	;# 
   751     0FE7                     	;# 
   752     0FE8                     	;# 
   753     0FE9                     	;# 
   754     0FEA                     	;# 
   755     0FEB                     	;# 
   756     0FED                     	;# 
   757     0FEE                     	;# 
   758     0FEF                     	;# 
   759     0000                     	;# 
   760     0001                     	;# 
   761     0002                     	;# 
   762     0003                     	;# 
   763     0004                     	;# 
   764     0005                     	;# 
   765     0006                     	;# 
   766     0007                     	;# 
   767     0008                     	;# 
   768     0009                     	;# 
   769     000A                     	;# 
   770     000B                     	;# 
   771     000C                     	;# 
   772     000D                     	;# 
   773     000E                     	;# 
   774     0011                     	;# 
   775     0012                     	;# 
   776     0015                     	;# 
   777     0016                     	;# 
   778     0016                     	;# 
   779     0017                     	;# 
   780     0018                     	;# 
   781     0019                     	;# 
   782     001A                     	;# 
   783     001B                     	;# 
   784     001C                     	;# 
   785     008C                     	;# 
   786     008D                     	;# 
   787     008E                     	;# 
   788     0091                     	;# 
   789     0092                     	;# 
   790     0095                     	;# 
   791     0096                     	;# 
   792     0097                     	;# 
   793     0098                     	;# 
   794     0099                     	;# 
   795     009A                     	;# 
   796     009B                     	;# 
   797     009B                     	;# 
   798     009C                     	;# 
   799     009D                     	;# 
   800     009E                     	;# 
   801     009F                     	;# 
   802     010C                     	;# 
   803     010D                     	;# 
   804     010E                     	;# 
   805     0111                     	;# 
   806     0112                     	;# 
   807     0113                     	;# 
   808     0114                     	;# 
   809     0115                     	;# 
   810     0116                     	;# 
   811     0117                     	;# 
   812     0118                     	;# 
   813     0119                     	;# 
   814     011D                     	;# 
   815     018C                     	;# 
   816     018D                     	;# 
   817     018E                     	;# 
   818     0191                     	;# 
   819     0191                     	;# 
   820     0192                     	;# 
   821     0193                     	;# 
   822     0193                     	;# 
   823     0194                     	;# 
   824     0195                     	;# 
   825     0196                     	;# 
   826     0197                     	;# 
   827     0199                     	;# 
   828     019A                     	;# 
   829     019B                     	;# 
   830     019B                     	;# 
   831     019C                     	;# 
   832     019D                     	;# 
   833     019E                     	;# 
   834     019F                     	;# 
   835     020C                     	;# 
   836     020D                     	;# 
   837     0211                     	;# 
   838     0211                     	;# 
   839     0212                     	;# 
   840     0212                     	;# 
   841     0213                     	;# 
   842     0213                     	;# 
   843     0214                     	;# 
   844     0214                     	;# 
   845     0215                     	;# 
   846     0215                     	;# 
   847     0215                     	;# 
   848     0216                     	;# 
   849     0216                     	;# 
   850     0217                     	;# 
   851     0217                     	;# 
   852     0391                     	;# 
   853     0392                     	;# 
   854     0393                     	;# 
   855     0394                     	;# 
   856     0395                     	;# 
   857     0396                     	;# 
   858     039A                     	;# 
   859     039B                     	;# 
   860     0611                     	;# 
   861     0612                     	;# 
   862     0613                     	;# 
   863     0613                     	;# 
   864     0614                     	;# 
   865     0615                     	;# 
   866     0616                     	;# 
   867     0616                     	;# 
   868     0691                     	;# 
   869     0692                     	;# 
   870     0693                     	;# 
   871     0694                     	;# 
   872     0695                     	;# 
   873     0E8E                     	;# 
   874     0E8F                     	;# 
   875     0E90                     	;# 
   876     0E91                     	;# 
   877     0E92                     	;# 
   878     0E93                     	;# 
   879     0E94                     	;# 
   880     0E94                     	;# 
   881     0E95                     	;# 
   882     0E96                     	;# 
   883     0E97                     	;# 
   884     0E98                     	;# 
   885     0E99                     	;# 
   886     0E9A                     	;# 
   887     0E9B                     	;# 
   888     0E9C                     	;# 
   889     0E9D                     	;# 
   890     0E9E                     	;# 
   891     0E9F                     	;# 
   892     0FE4                     	;# 
   893     0FE5                     	;# 
   894     0FE6                     	;# 
   895     0FE7                     	;# 
   896     0FE8                     	;# 
   897     0FE9                     	;# 
   898     0FEA                     	;# 
   899     0FEB                     	;# 
   900     0FED                     	;# 
   901     0FEE                     	;# 
   902     0FEF                     	;# 
   903     0000                     	;# 
   904     0001                     	;# 
   905     0002                     	;# 
   906     0003                     	;# 
   907     0004                     	;# 
   908     0005                     	;# 
   909     0006                     	;# 
   910     0007                     	;# 
   911     0008                     	;# 
   912     0009                     	;# 
   913     000A                     	;# 
   914     000B                     	;# 
   915     000C                     	;# 
   916     000D                     	;# 
   917     000E                     	;# 
   918     0011                     	;# 
   919     0012                     	;# 
   920     0015                     	;# 
   921     0016                     	;# 
   922     0016                     	;# 
   923     0017                     	;# 
   924     0018                     	;# 
   925     0019                     	;# 
   926     001A                     	;# 
   927     001B                     	;# 
   928     001C                     	;# 
   929     008C                     	;# 
   930     008D                     	;# 
   931     008E                     	;# 
   932     0091                     	;# 
   933     0092                     	;# 
   934     0095                     	;# 
   935     0096                     	;# 
   936     0097                     	;# 
   937     0098                     	;# 
   938     0099                     	;# 
   939     009A                     	;# 
   940     009B                     	;# 
   941     009B                     	;# 
   942     009C                     	;# 
   943     009D                     	;# 
   944     009E                     	;# 
   945     009F                     	;# 
   946     010C                     	;# 
   947     010D                     	;# 
   948     010E                     	;# 
   949     0111                     	;# 
   950     0112                     	;# 
   951     0113                     	;# 
   952     0114                     	;# 
   953     0115                     	;# 
   954     0116                     	;# 
   955     0117                     	;# 
   956     0118                     	;# 
   957     0119                     	;# 
   958     011D                     	;# 
   959     018C                     	;# 
   960     018D                     	;# 
   961     018E                     	;# 
   962     0191                     	;# 
   963     0191                     	;# 
   964     0192                     	;# 
   965     0193                     	;# 
   966     0193                     	;# 
   967     0194                     	;# 
   968     0195                     	;# 
   969     0196                     	;# 
   970     0197                     	;# 
   971     0199                     	;# 
   972     019A                     	;# 
   973     019B                     	;# 
   974     019B                     	;# 
   975     019C                     	;# 
   976     019D                     	;# 
   977     019E                     	;# 
   978     019F                     	;# 
   979     020C                     	;# 
   980     020D                     	;# 
   981     0211                     	;# 
   982     0211                     	;# 
   983     0212                     	;# 
   984     0212                     	;# 
   985     0213                     	;# 
   986     0213                     	;# 
   987     0214                     	;# 
   988     0214                     	;# 
   989     0215                     	;# 
   990     0215                     	;# 
   991     0215                     	;# 
   992     0216                     	;# 
   993     0216                     	;# 
   994     0217                     	;# 
   995     0217                     	;# 
   996     0391                     	;# 
   997     0392                     	;# 
   998     0393                     	;# 
   999     0394                     	;# 
  1000     0395                     	;# 
  1001     0396                     	;# 
  1002     039A                     	;# 
  1003     039B                     	;# 
  1004     0611                     	;# 
  1005     0612                     	;# 
  1006     0613                     	;# 
  1007     0613                     	;# 
  1008     0614                     	;# 
  1009     0615                     	;# 
  1010     0616                     	;# 
  1011     0616                     	;# 
  1012     0691                     	;# 
  1013     0692                     	;# 
  1014     0693                     	;# 
  1015     0694                     	;# 
  1016     0695                     	;# 
  1017     0E8E                     	;# 
  1018     0E8F                     	;# 
  1019     0E90                     	;# 
  1020     0E91                     	;# 
  1021     0E92                     	;# 
  1022     0E93                     	;# 
  1023     0E94                     	;# 
  1024     0E94                     	;# 
  1025     0E95                     	;# 
  1026     0E96                     	;# 
  1027     0E97                     	;# 
  1028     0E98                     	;# 
  1029     0E99                     	;# 
  1030     0E9A                     	;# 
  1031     0E9B                     	;# 
  1032     0E9C                     	;# 
  1033     0E9D                     	;# 
  1034     0E9E                     	;# 
  1035     0E9F                     	;# 
  1036     0FE4                     	;# 
  1037     0FE5                     	;# 
  1038     0FE6                     	;# 
  1039     0FE7                     	;# 
  1040     0FE8                     	;# 
  1041     0FE9                     	;# 
  1042     0FEA                     	;# 
  1043     0FEB                     	;# 
  1044     0FED                     	;# 
  1045     0FEE                     	;# 
  1046     0FEF                     	;# 
  1047     0000                     	;# 
  1048     0001                     	;# 
  1049     0002                     	;# 
  1050     0003                     	;# 
  1051     0004                     	;# 
  1052     0005                     	;# 
  1053     0006                     	;# 
  1054     0007                     	;# 
  1055     0008                     	;# 
  1056     0009                     	;# 
  1057     000A                     	;# 
  1058     000B                     	;# 
  1059     000C                     	;# 
  1060     000D                     	;# 
  1061     000E                     	;# 
  1062     0011                     	;# 
  1063     0012                     	;# 
  1064     0015                     	;# 
  1065     0016                     	;# 
  1066     0016                     	;# 
  1067     0017                     	;# 
  1068     0018                     	;# 
  1069     0019                     	;# 
  1070     001A                     	;# 
  1071     001B                     	;# 
  1072     001C                     	;# 
  1073     008C                     	;# 
  1074     008D                     	;# 
  1075     008E                     	;# 
  1076     0091                     	;# 
  1077     0092                     	;# 
  1078     0095                     	;# 
  1079     0096                     	;# 
  1080     0097                     	;# 
  1081     0098                     	;# 
  1082     0099                     	;# 
  1083     009A                     	;# 
  1084     009B                     	;# 
  1085     009B                     	;# 
  1086     009C                     	;# 
  1087     009D                     	;# 
  1088     009E                     	;# 
  1089     009F                     	;# 
  1090     010C                     	;# 
  1091     010D                     	;# 
  1092     010E                     	;# 
  1093     0111                     	;# 
  1094     0112                     	;# 
  1095     0113                     	;# 
  1096     0114                     	;# 
  1097     0115                     	;# 
  1098     0116                     	;# 
  1099     0117                     	;# 
  1100     0118                     	;# 
  1101     0119                     	;# 
  1102     011D                     	;# 
  1103     018C                     	;# 
  1104     018D                     	;# 
  1105     018E                     	;# 
  1106     0191                     	;# 
  1107     0191                     	;# 
  1108     0192                     	;# 
  1109     0193                     	;# 
  1110     0193                     	;# 
  1111     0194                     	;# 
  1112     0195                     	;# 
  1113     0196                     	;# 
  1114     0197                     	;# 
  1115     0199                     	;# 
  1116     019A                     	;# 
  1117     019B                     	;# 
  1118     019B                     	;# 
  1119     019C                     	;# 
  1120     019D                     	;# 
  1121     019E                     	;# 
  1122     019F                     	;# 
  1123     020C                     	;# 
  1124     020D                     	;# 
  1125     0211                     	;# 
  1126     0211                     	;# 
  1127     0212                     	;# 
  1128     0212                     	;# 
  1129     0213                     	;# 
  1130     0213                     	;# 
  1131     0214                     	;# 
  1132     0214                     	;# 
  1133     0215                     	;# 
  1134     0215                     	;# 
  1135     0215                     	;# 
  1136     0216                     	;# 
  1137     0216                     	;# 
  1138     0217                     	;# 
  1139     0217                     	;# 
  1140     0391                     	;# 
  1141     0392                     	;# 
  1142     0393                     	;# 
  1143     0394                     	;# 
  1144     0395                     	;# 
  1145     0396                     	;# 
  1146     039A                     	;# 
  1147     039B                     	;# 
  1148     0611                     	;# 
  1149     0612                     	;# 
  1150     0613                     	;# 
  1151     0613                     	;# 
  1152     0614                     	;# 
  1153     0615                     	;# 
  1154     0616                     	;# 
  1155     0616                     	;# 
  1156     0691                     	;# 
  1157     0692                     	;# 
  1158     0693                     	;# 
  1159     0694                     	;# 
  1160     0695                     	;# 
  1161     0E8E                     	;# 
  1162     0E8F                     	;# 
  1163     0E90                     	;# 
  1164     0E91                     	;# 
  1165     0E92                     	;# 
  1166     0E93                     	;# 
  1167     0E94                     	;# 
  1168     0E94                     	;# 
  1169     0E95                     	;# 
  1170     0E96                     	;# 
  1171     0E97                     	;# 
  1172     0E98                     	;# 
  1173     0E99                     	;# 
  1174     0E9A                     	;# 
  1175     0E9B                     	;# 
  1176     0E9C                     	;# 
  1177     0E9D                     	;# 
  1178     0E9E                     	;# 
  1179     0E9F                     	;# 
  1180     0FE4                     	;# 
  1181     0FE5                     	;# 
  1182     0FE6                     	;# 
  1183     0FE7                     	;# 
  1184     0FE8                     	;# 
  1185     0FE9                     	;# 
  1186     0FEA                     	;# 
  1187     0FEB                     	;# 
  1188     0FED                     	;# 
  1189     0FEE                     	;# 
  1190     0FEF                     	;# 
  1191     0000                     	;# 
  1192     0001                     	;# 
  1193     0002                     	;# 
  1194     0003                     	;# 
  1195     0004                     	;# 
  1196     0005                     	;# 
  1197     0006                     	;# 
  1198     0007                     	;# 
  1199     0008                     	;# 
  1200     0009                     	;# 
  1201     000A                     	;# 
  1202     000B                     	;# 
  1203     000C                     	;# 
  1204     000D                     	;# 
  1205     000E                     	;# 
  1206     0011                     	;# 
  1207     0012                     	;# 
  1208     0015                     	;# 
  1209     0016                     	;# 
  1210     0016                     	;# 
  1211     0017                     	;# 
  1212     0018                     	;# 
  1213     0019                     	;# 
  1214     001A                     	;# 
  1215     001B                     	;# 
  1216     001C                     	;# 
  1217     008C                     	;# 
  1218     008D                     	;# 
  1219     008E                     	;# 
  1220     0091                     	;# 
  1221     0092                     	;# 
  1222     0095                     	;# 
  1223     0096                     	;# 
  1224     0097                     	;# 
  1225     0098                     	;# 
  1226     0099                     	;# 
  1227     009A                     	;# 
  1228     009B                     	;# 
  1229     009B                     	;# 
  1230     009C                     	;# 
  1231     009D                     	;# 
  1232     009E                     	;# 
  1233     009F                     	;# 
  1234     010C                     	;# 
  1235     010D                     	;# 
  1236     010E                     	;# 
  1237     0111                     	;# 
  1238     0112                     	;# 
  1239     0113                     	;# 
  1240     0114                     	;# 
  1241     0115                     	;# 
  1242     0116                     	;# 
  1243     0117                     	;# 
  1244     0118                     	;# 
  1245     0119                     	;# 
  1246     011D                     	;# 
  1247     018C                     	;# 
  1248     018D                     	;# 
  1249     018E                     	;# 
  1250     0191                     	;# 
  1251     0191                     	;# 
  1252     0192                     	;# 
  1253     0193                     	;# 
  1254     0193                     	;# 
  1255     0194                     	;# 
  1256     0195                     	;# 
  1257     0196                     	;# 
  1258     0197                     	;# 
  1259     0199                     	;# 
  1260     019A                     	;# 
  1261     019B                     	;# 
  1262     019B                     	;# 
  1263     019C                     	;# 
  1264     019D                     	;# 
  1265     019E                     	;# 
  1266     019F                     	;# 
  1267     020C                     	;# 
  1268     020D                     	;# 
  1269     0211                     	;# 
  1270     0211                     	;# 
  1271     0212                     	;# 
  1272     0212                     	;# 
  1273     0213                     	;# 
  1274     0213                     	;# 
  1275     0214                     	;# 
  1276     0214                     	;# 
  1277     0215                     	;# 
  1278     0215                     	;# 
  1279     0215                     	;# 
  1280     0216                     	;# 
  1281     0216                     	;# 
  1282     0217                     	;# 
  1283     0217                     	;# 
  1284     0391                     	;# 
  1285     0392                     	;# 
  1286     0393                     	;# 
  1287     0394                     	;# 
  1288     0395                     	;# 
  1289     0396                     	;# 
  1290     039A                     	;# 
  1291     039B                     	;# 
  1292     0611                     	;# 
  1293     0612                     	;# 
  1294     0613                     	;# 
  1295     0613                     	;# 
  1296     0614                     	;# 
  1297     0615                     	;# 
  1298     0616                     	;# 
  1299     0616                     	;# 
  1300     0691                     	;# 
  1301     0692                     	;# 
  1302     0693                     	;# 
  1303     0694                     	;# 
  1304     0695                     	;# 
  1305     0E8E                     	;# 
  1306     0E8F                     	;# 
  1307     0E90                     	;# 
  1308     0E91                     	;# 
  1309     0E92                     	;# 
  1310     0E93                     	;# 
  1311     0E94                     	;# 
  1312     0E94                     	;# 
  1313     0E95                     	;# 
  1314     0E96                     	;# 
  1315     0E97                     	;# 
  1316     0E98                     	;# 
  1317     0E99                     	;# 
  1318     0E9A                     	;# 
  1319     0E9B                     	;# 
  1320     0E9C                     	;# 
  1321     0E9D                     	;# 
  1322     0E9E                     	;# 
  1323     0E9F                     	;# 
  1324     0FE4                     	;# 
  1325     0FE5                     	;# 
  1326     0FE6                     	;# 
  1327     0FE7                     	;# 
  1328     0FE8                     	;# 
  1329     0FE9                     	;# 
  1330     0FEA                     	;# 
  1331     0FEB                     	;# 
  1332     0FED                     	;# 
  1333     0FEE                     	;# 
  1334     0FEF                     	;# 
  1335     0000                     	;# 
  1336     0001                     	;# 
  1337     0002                     	;# 
  1338     0003                     	;# 
  1339     0004                     	;# 
  1340     0005                     	;# 
  1341     0006                     	;# 
  1342     0007                     	;# 
  1343     0008                     	;# 
  1344     0009                     	;# 
  1345     000A                     	;# 
  1346     000B                     	;# 
  1347     000C                     	;# 
  1348     000D                     	;# 
  1349     000E                     	;# 
  1350     0011                     	;# 
  1351     0012                     	;# 
  1352     0015                     	;# 
  1353     0016                     	;# 
  1354     0016                     	;# 
  1355     0017                     	;# 
  1356     0018                     	;# 
  1357     0019                     	;# 
  1358     001A                     	;# 
  1359     001B                     	;# 
  1360     001C                     	;# 
  1361     008C                     	;# 
  1362     008D                     	;# 
  1363     008E                     	;# 
  1364     0091                     	;# 
  1365     0092                     	;# 
  1366     0095                     	;# 
  1367     0096                     	;# 
  1368     0097                     	;# 
  1369     0098                     	;# 
  1370     0099                     	;# 
  1371     009A                     	;# 
  1372     009B                     	;# 
  1373     009B                     	;# 
  1374     009C                     	;# 
  1375     009D                     	;# 
  1376     009E                     	;# 
  1377     009F                     	;# 
  1378     010C                     	;# 
  1379     010D                     	;# 
  1380     010E                     	;# 
  1381     0111                     	;# 
  1382     0112                     	;# 
  1383     0113                     	;# 
  1384     0114                     	;# 
  1385     0115                     	;# 
  1386     0116                     	;# 
  1387     0117                     	;# 
  1388     0118                     	;# 
  1389     0119                     	;# 
  1390     011D                     	;# 
  1391     018C                     	;# 
  1392     018D                     	;# 
  1393     018E                     	;# 
  1394     0191                     	;# 
  1395     0191                     	;# 
  1396     0192                     	;# 
  1397     0193                     	;# 
  1398     0193                     	;# 
  1399     0194                     	;# 
  1400     0195                     	;# 
  1401     0196                     	;# 
  1402     0197                     	;# 
  1403     0199                     	;# 
  1404     019A                     	;# 
  1405     019B                     	;# 
  1406     019B                     	;# 
  1407     019C                     	;# 
  1408     019D                     	;# 
  1409     019E                     	;# 
  1410     019F                     	;# 
  1411     020C                     	;# 
  1412     020D                     	;# 
  1413     0211                     	;# 
  1414     0211                     	;# 
  1415     0212                     	;# 
  1416     0212                     	;# 
  1417     0213                     	;# 
  1418     0213                     	;# 
  1419     0214                     	;# 
  1420     0214                     	;# 
  1421     0215                     	;# 
  1422     0215                     	;# 
  1423     0215                     	;# 
  1424     0216                     	;# 
  1425     0216                     	;# 
  1426     0217                     	;# 
  1427     0217                     	;# 
  1428     0391                     	;# 
  1429     0392                     	;# 
  1430     0393                     	;# 
  1431     0394                     	;# 
  1432     0395                     	;# 
  1433     0396                     	;# 
  1434     039A                     	;# 
  1435     039B                     	;# 
  1436     0611                     	;# 
  1437     0612                     	;# 
  1438     0613                     	;# 
  1439     0613                     	;# 
  1440     0614                     	;# 
  1441     0615                     	;# 
  1442     0616                     	;# 
  1443     0616                     	;# 
  1444     0691                     	;# 
  1445     0692                     	;# 
  1446     0693                     	;# 
  1447     0694                     	;# 
  1448     0695                     	;# 
  1449     0E8E                     	;# 
  1450     0E8F                     	;# 
  1451     0E90                     	;# 
  1452     0E91                     	;# 
  1453     0E92                     	;# 
  1454     0E93                     	;# 
  1455     0E94                     	;# 
  1456     0E94                     	;# 
  1457     0E95                     	;# 
  1458     0E96                     	;# 
  1459     0E97                     	;# 
  1460     0E98                     	;# 
  1461     0E99                     	;# 
  1462     0E9A                     	;# 
  1463     0E9B                     	;# 
  1464     0E9C                     	;# 
  1465     0E9D                     	;# 
  1466     0E9E                     	;# 
  1467     0E9F                     	;# 
  1468     0FE4                     	;# 
  1469     0FE5                     	;# 
  1470     0FE6                     	;# 
  1471     0FE7                     	;# 
  1472     0FE8                     	;# 
  1473     0FE9                     	;# 
  1474     0FEA                     	;# 
  1475     0FEB                     	;# 
  1476     0FED                     	;# 
  1477     0FEE                     	;# 
  1478     0FEF                     	;# 
  1479     0000                     	;# 
  1480     0001                     	;# 
  1481     0002                     	;# 
  1482     0003                     	;# 
  1483     0004                     	;# 
  1484     0005                     	;# 
  1485     0006                     	;# 
  1486     0007                     	;# 
  1487     0008                     	;# 
  1488     0009                     	;# 
  1489     000A                     	;# 
  1490     000B                     	;# 
  1491     000C                     	;# 
  1492     000D                     	;# 
  1493     000E                     	;# 
  1494     0011                     	;# 
  1495     0012                     	;# 
  1496     0015                     	;# 
  1497     0016                     	;# 
  1498     0016                     	;# 
  1499     0017                     	;# 
  1500     0018                     	;# 
  1501     0019                     	;# 
  1502     001A                     	;# 
  1503     001B                     	;# 
  1504     001C                     	;# 
  1505     008C                     	;# 
  1506     008D                     	;# 
  1507     008E                     	;# 
  1508     0091                     	;# 
  1509     0092                     	;# 
  1510     0095                     	;# 
  1511     0096                     	;# 
  1512     0097                     	;# 
  1513     0098                     	;# 
  1514     0099                     	;# 
  1515     009A                     	;# 
  1516     009B                     	;# 
  1517     009B                     	;# 
  1518     009C                     	;# 
  1519     009D                     	;# 
  1520     009E                     	;# 
  1521     009F                     	;# 
  1522     010C                     	;# 
  1523     010D                     	;# 
  1524     010E                     	;# 
  1525     0111                     	;# 
  1526     0112                     	;# 
  1527     0113                     	;# 
  1528     0114                     	;# 
  1529     0115                     	;# 
  1530     0116                     	;# 
  1531     0117                     	;# 
  1532     0118                     	;# 
  1533     0119                     	;# 
  1534     011D                     	;# 
  1535     018C                     	;# 
  1536     018D                     	;# 
  1537     018E                     	;# 
  1538     0191                     	;# 
  1539     0191                     	;# 
  1540     0192                     	;# 
  1541     0193                     	;# 
  1542     0193                     	;# 
  1543     0194                     	;# 
  1544     0195                     	;# 
  1545     0196                     	;# 
  1546     0197                     	;# 
  1547     0199                     	;# 
  1548     019A                     	;# 
  1549     019B                     	;# 
  1550     019B                     	;# 
  1551     019C                     	;# 
  1552     019D                     	;# 
  1553     019E                     	;# 
  1554     019F                     	;# 
  1555     020C                     	;# 
  1556     020D                     	;# 
  1557     0211                     	;# 
  1558     0211                     	;# 
  1559     0212                     	;# 
  1560     0212                     	;# 
  1561     0213                     	;# 
  1562     0213                     	;# 
  1563     0214                     	;# 
  1564     0214                     	;# 
  1565     0215                     	;# 
  1566     0215                     	;# 
  1567     0215                     	;# 
  1568     0216                     	;# 
  1569     0216                     	;# 
  1570     0217                     	;# 
  1571     0217                     	;# 
  1572     0391                     	;# 
  1573     0392                     	;# 
  1574     0393                     	;# 
  1575     0394                     	;# 
  1576     0395                     	;# 
  1577     0396                     	;# 
  1578     039A                     	;# 
  1579     039B                     	;# 
  1580     0611                     	;# 
  1581     0612                     	;# 
  1582     0613                     	;# 
  1583     0613                     	;# 
  1584     0614                     	;# 
  1585     0615                     	;# 
  1586     0616                     	;# 
  1587     0616                     	;# 
  1588     0691                     	;# 
  1589     0692                     	;# 
  1590     0693                     	;# 
  1591     0694                     	;# 
  1592     0695                     	;# 
  1593     0E8E                     	;# 
  1594     0E8F                     	;# 
  1595     0E90                     	;# 
  1596     0E91                     	;# 
  1597     0E92                     	;# 
  1598     0E93                     	;# 
  1599     0E94                     	;# 
  1600     0E94                     	;# 
  1601     0E95                     	;# 
  1602     0E96                     	;# 
  1603     0E97                     	;# 
  1604     0E98                     	;# 
  1605     0E99                     	;# 
  1606     0E9A                     	;# 
  1607     0E9B                     	;# 
  1608     0E9C                     	;# 
  1609     0E9D                     	;# 
  1610     0E9E                     	;# 
  1611     0E9F                     	;# 
  1612     0FE4                     	;# 
  1613     0FE5                     	;# 
  1614     0FE6                     	;# 
  1615     0FE7                     	;# 
  1616     0FE8                     	;# 
  1617     0FE9                     	;# 
  1618     0FEA                     	;# 
  1619     0FEB                     	;# 
  1620     0FED                     	;# 
  1621     0FEE                     	;# 
  1622     0FEF                     	;# 
  1623     0000                     	;# 
  1624     0001                     	;# 
  1625     0002                     	;# 
  1626     0003                     	;# 
  1627     0004                     	;# 
  1628     0005                     	;# 
  1629     0006                     	;# 
  1630     0007                     	;# 
  1631     0008                     	;# 
  1632     0009                     	;# 
  1633     000A                     	;# 
  1634     000B                     	;# 
  1635     000C                     	;# 
  1636     000D                     	;# 
  1637     000E                     	;# 
  1638     0011                     	;# 
  1639     0012                     	;# 
  1640     0015                     	;# 
  1641     0016                     	;# 
  1642     0016                     	;# 
  1643     0017                     	;# 
  1644     0018                     	;# 
  1645     0019                     	;# 
  1646     001A                     	;# 
  1647     001B                     	;# 
  1648     001C                     	;# 
  1649     008C                     	;# 
  1650     008D                     	;# 
  1651     008E                     	;# 
  1652     0091                     	;# 
  1653     0092                     	;# 
  1654     0095                     	;# 
  1655     0096                     	;# 
  1656     0097                     	;# 
  1657     0098                     	;# 
  1658     0099                     	;# 
  1659     009A                     	;# 
  1660     009B                     	;# 
  1661     009B                     	;# 
  1662     009C                     	;# 
  1663     009D                     	;# 
  1664     009E                     	;# 
  1665     009F                     	;# 
  1666     010C                     	;# 
  1667     010D                     	;# 
  1668     010E                     	;# 
  1669     0111                     	;# 
  1670     0112                     	;# 
  1671     0113                     	;# 
  1672     0114                     	;# 
  1673     0115                     	;# 
  1674     0116                     	;# 
  1675     0117                     	;# 
  1676     0118                     	;# 
  1677     0119                     	;# 
  1678     011D                     	;# 
  1679     018C                     	;# 
  1680     018D                     	;# 
  1681     018E                     	;# 
  1682     0191                     	;# 
  1683     0191                     	;# 
  1684     0192                     	;# 
  1685     0193                     	;# 
  1686     0193                     	;# 
  1687     0194                     	;# 
  1688     0195                     	;# 
  1689     0196                     	;# 
  1690     0197                     	;# 
  1691     0199                     	;# 
  1692     019A                     	;# 
  1693     019B                     	;# 
  1694     019B                     	;# 
  1695     019C                     	;# 
  1696     019D                     	;# 
  1697     019E                     	;# 
  1698     019F                     	;# 
  1699     020C                     	;# 
  1700     020D                     	;# 
  1701     0211                     	;# 
  1702     0211                     	;# 
  1703     0212                     	;# 
  1704     0212                     	;# 
  1705     0213                     	;# 
  1706     0213                     	;# 
  1707     0214                     	;# 
  1708     0214                     	;# 
  1709     0215                     	;# 
  1710     0215                     	;# 
  1711     0215                     	;# 
  1712     0216                     	;# 
  1713     0216                     	;# 
  1714     0217                     	;# 
  1715     0217                     	;# 
  1716     0391                     	;# 
  1717     0392                     	;# 
  1718     0393                     	;# 
  1719     0394                     	;# 
  1720     0395                     	;# 
  1721     0396                     	;# 
  1722     039A                     	;# 
  1723     039B                     	;# 
  1724     0611                     	;# 
  1725     0612                     	;# 
  1726     0613                     	;# 
  1727     0613                     	;# 
  1728     0614                     	;# 
  1729     0615                     	;# 
  1730     0616                     	;# 
  1731     0616                     	;# 
  1732     0691                     	;# 
  1733     0692                     	;# 
  1734     0693                     	;# 
  1735     0694                     	;# 
  1736     0695                     	;# 
  1737     0E8E                     	;# 
  1738     0E8F                     	;# 
  1739     0E90                     	;# 
  1740     0E91                     	;# 
  1741     0E92                     	;# 
  1742     0E93                     	;# 
  1743     0E94                     	;# 
  1744     0E94                     	;# 
  1745     0E95                     	;# 
  1746     0E96                     	;# 
  1747     0E97                     	;# 
  1748     0E98                     	;# 
  1749     0E99                     	;# 
  1750     0E9A                     	;# 
  1751     0E9B                     	;# 
  1752     0E9C                     	;# 
  1753     0E9D                     	;# 
  1754     0E9E                     	;# 
  1755     0E9F                     	;# 
  1756     0FE4                     	;# 
  1757     0FE5                     	;# 
  1758     0FE6                     	;# 
  1759     0FE7                     	;# 
  1760     0FE8                     	;# 
  1761     0FE9                     	;# 
  1762     0FEA                     	;# 
  1763     0FEB                     	;# 
  1764     0FED                     	;# 
  1765     0FEE                     	;# 
  1766     0FEF                     	;# 
  1767     0000                     	;# 
  1768     0001                     	;# 
  1769     0002                     	;# 
  1770     0003                     	;# 
  1771     0004                     	;# 
  1772     0005                     	;# 
  1773     0006                     	;# 
  1774     0007                     	;# 
  1775     0008                     	;# 
  1776     0009                     	;# 
  1777     000A                     	;# 
  1778     000B                     	;# 
  1779     000C                     	;# 
  1780     000D                     	;# 
  1781     000E                     	;# 
  1782     0011                     	;# 
  1783     0012                     	;# 
  1784     0015                     	;# 
  1785     0016                     	;# 
  1786     0016                     	;# 
  1787     0017                     	;# 
  1788     0018                     	;# 
  1789     0019                     	;# 
  1790     001A                     	;# 
  1791     001B                     	;# 
  1792     001C                     	;# 
  1793     008C                     	;# 
  1794     008D                     	;# 
  1795     008E                     	;# 
  1796     0091                     	;# 
  1797     0092                     	;# 
  1798     0095                     	;# 
  1799     0096                     	;# 
  1800     0097                     	;# 
  1801     0098                     	;# 
  1802     0099                     	;# 
  1803     009A                     	;# 
  1804     009B                     	;# 
  1805     009B                     	;# 
  1806     009C                     	;# 
  1807     009D                     	;# 
  1808     009E                     	;# 
  1809     009F                     	;# 
  1810     010C                     	;# 
  1811     010D                     	;# 
  1812     010E                     	;# 
  1813     0111                     	;# 
  1814     0112                     	;# 
  1815     0113                     	;# 
  1816     0114                     	;# 
  1817     0115                     	;# 
  1818     0116                     	;# 
  1819     0117                     	;# 
  1820     0118                     	;# 
  1821     0119                     	;# 
  1822     011D                     	;# 
  1823     018C                     	;# 
  1824     018D                     	;# 
  1825     018E                     	;# 
  1826     0191                     	;# 
  1827     0191                     	;# 
  1828     0192                     	;# 
  1829     0193                     	;# 
  1830     0193                     	;# 
  1831     0194                     	;# 
  1832     0195                     	;# 
  1833     0196                     	;# 
  1834     0197                     	;# 
  1835     0199                     	;# 
  1836     019A                     	;# 
  1837     019B                     	;# 
  1838     019B                     	;# 
  1839     019C                     	;# 
  1840     019D                     	;# 
  1841     019E                     	;# 
  1842     019F                     	;# 
  1843     020C                     	;# 
  1844     020D                     	;# 
  1845     0211                     	;# 
  1846     0211                     	;# 
  1847     0212                     	;# 
  1848     0212                     	;# 
  1849     0213                     	;# 
  1850     0213                     	;# 
  1851     0214                     	;# 
  1852     0214                     	;# 
  1853     0215                     	;# 
  1854     0215                     	;# 
  1855     0215                     	;# 
  1856     0216                     	;# 
  1857     0216                     	;# 
  1858     0217                     	;# 
  1859     0217                     	;# 
  1860     0391                     	;# 
  1861     0392                     	;# 
  1862     0393                     	;# 
  1863     0394                     	;# 
  1864     0395                     	;# 
  1865     0396                     	;# 
  1866     039A                     	;# 
  1867     039B                     	;# 
  1868     0611                     	;# 
  1869     0612                     	;# 
  1870     0613                     	;# 
  1871     0613                     	;# 
  1872     0614                     	;# 
  1873     0615                     	;# 
  1874     0616                     	;# 
  1875     0616                     	;# 
  1876     0691                     	;# 
  1877     0692                     	;# 
  1878     0693                     	;# 
  1879     0694                     	;# 
  1880     0695                     	;# 
  1881     0E8E                     	;# 
  1882     0E8F                     	;# 
  1883     0E90                     	;# 
  1884     0E91                     	;# 
  1885     0E92                     	;# 
  1886     0E93                     	;# 
  1887     0E94                     	;# 
  1888     0E94                     	;# 
  1889     0E95                     	;# 
  1890     0E96                     	;# 
  1891     0E97                     	;# 
  1892     0E98                     	;# 
  1893     0E99                     	;# 
  1894     0E9A                     	;# 
  1895     0E9B                     	;# 
  1896     0E9C                     	;# 
  1897     0E9D                     	;# 
  1898     0E9E                     	;# 
  1899     0E9F                     	;# 
  1900     0FE4                     	;# 
  1901     0FE5                     	;# 
  1902     0FE6                     	;# 
  1903     0FE7                     	;# 
  1904     0FE8                     	;# 
  1905     0FE9                     	;# 
  1906     0FEA                     	;# 
  1907     0FEB                     	;# 
  1908     0FED                     	;# 
  1909     0FEE                     	;# 
  1910     0FEF                     	;# 
  1911     0000                     	;# 
  1912     0001                     	;# 
  1913     0002                     	;# 
  1914     0003                     	;# 
  1915     0004                     	;# 
  1916     0005                     	;# 
  1917     0006                     	;# 
  1918     0007                     	;# 
  1919     0008                     	;# 
  1920     0009                     	;# 
  1921     000A                     	;# 
  1922     000B                     	;# 
  1923     000C                     	;# 
  1924     000D                     	;# 
  1925     000E                     	;# 
  1926     0011                     	;# 
  1927     0012                     	;# 
  1928     0015                     	;# 
  1929     0016                     	;# 
  1930     0016                     	;# 
  1931     0017                     	;# 
  1932     0018                     	;# 
  1933     0019                     	;# 
  1934     001A                     	;# 
  1935     001B                     	;# 
  1936     001C                     	;# 
  1937     008C                     	;# 
  1938     008D                     	;# 
  1939     008E                     	;# 
  1940     0091                     	;# 
  1941     0092                     	;# 
  1942     0095                     	;# 
  1943     0096                     	;# 
  1944     0097                     	;# 
  1945     0098                     	;# 
  1946     0099                     	;# 
  1947     009A                     	;# 
  1948     009B                     	;# 
  1949     009B                     	;# 
  1950     009C                     	;# 
  1951     009D                     	;# 
  1952     009E                     	;# 
  1953     009F                     	;# 
  1954     010C                     	;# 
  1955     010D                     	;# 
  1956     010E                     	;# 
  1957     0111                     	;# 
  1958     0112                     	;# 
  1959     0113                     	;# 
  1960     0114                     	;# 
  1961     0115                     	;# 
  1962     0116                     	;# 
  1963     0117                     	;# 
  1964     0118                     	;# 
  1965     0119                     	;# 
  1966     011D                     	;# 
  1967     018C                     	;# 
  1968     018D                     	;# 
  1969     018E                     	;# 
  1970     0191                     	;# 
  1971     0191                     	;# 
  1972     0192                     	;# 
  1973     0193                     	;# 
  1974     0193                     	;# 
  1975     0194                     	;# 
  1976     0195                     	;# 
  1977     0196                     	;# 
  1978     0197                     	;# 
  1979     0199                     	;# 
  1980     019A                     	;# 
  1981     019B                     	;# 
  1982     019B                     	;# 
  1983     019C                     	;# 
  1984     019D                     	;# 
  1985     019E                     	;# 
  1986     019F                     	;# 
  1987     020C                     	;# 
  1988     020D                     	;# 
  1989     0211                     	;# 
  1990     0211                     	;# 
  1991     0212                     	;# 
  1992     0212                     	;# 
  1993     0213                     	;# 
  1994     0213                     	;# 
  1995     0214                     	;# 
  1996     0214                     	;# 
  1997     0215                     	;# 
  1998     0215                     	;# 
  1999     0215                     	;# 
  2000     0216                     	;# 
  2001     0216                     	;# 
  2002     0217                     	;# 
  2003     0217                     	;# 
  2004     0391                     	;# 
  2005     0392                     	;# 
  2006     0393                     	;# 
  2007     0394                     	;# 
  2008     0395                     	;# 
  2009     0396                     	;# 
  2010     039A                     	;# 
  2011     039B                     	;# 
  2012     0611                     	;# 
  2013     0612                     	;# 
  2014     0613                     	;# 
  2015     0613                     	;# 
  2016     0614                     	;# 
  2017     0615                     	;# 
  2018     0616                     	;# 
  2019     0616                     	;# 
  2020     0691                     	;# 
  2021     0692                     	;# 
  2022     0693                     	;# 
  2023     0694                     	;# 
  2024     0695                     	;# 
  2025     0E8E                     	;# 
  2026     0E8F                     	;# 
  2027     0E90                     	;# 
  2028     0E91                     	;# 
  2029     0E92                     	;# 
  2030     0E93                     	;# 
  2031     0E94                     	;# 
  2032     0E94                     	;# 
  2033     0E95                     	;# 
  2034     0E96                     	;# 
  2035     0E97                     	;# 
  2036     0E98                     	;# 
  2037     0E99                     	;# 
  2038     0E9A                     	;# 
  2039     0E9B                     	;# 
  2040     0E9C                     	;# 
  2041     0E9D                     	;# 
  2042     0E9E                     	;# 
  2043     0E9F                     	;# 
  2044     0FE4                     	;# 
  2045     0FE5                     	;# 
  2046     0FE6                     	;# 
  2047     0FE7                     	;# 
  2048     0FE8                     	;# 
  2049     0FE9                     	;# 
  2050     0FEA                     	;# 
  2051     0FEB                     	;# 
  2052     0FED                     	;# 
  2053     0FEE                     	;# 
  2054     0FEF                     	;_keyboard
  2055                           
  2056                           	psect	stringtext1
  2057     03D6                     __pstringtext1:
  2058     03D6                     _ps2ExtUsbMap:
  2059     03D6  3400               	retlw	0
  2060     03D7  3400               	retlw	0
  2061     03D8  3400               	retlw	0
  2062     03D9  3400               	retlw	0
  2063     03DA  3400               	retlw	0
  2064     03DB  3400               	retlw	0
  2065     03DC  3400               	retlw	0
  2066     03DD  3400               	retlw	0
  2067     03DE  3400               	retlw	0
  2068     03DF  3400               	retlw	0
  2069     03E0  3400               	retlw	0
  2070     03E1  3400               	retlw	0
  2071     03E2  3400               	retlw	0
  2072     03E3  3400               	retlw	0
  2073     03E4  3400               	retlw	0
  2074     03E5  3400               	retlw	0
  2075     03E6  3400               	retlw	0
  2076     03E7  34E6               	retlw	230
  2077     03E8  3400               	retlw	0
  2078     03E9  3400               	retlw	0
  2079     03EA  34E4               	retlw	228
  2080     03EB  3400               	retlw	0
  2081     03EC  3400               	retlw	0
  2082     03ED  3400               	retlw	0
  2083     03EE  3400               	retlw	0
  2084     03EF  3400               	retlw	0
  2085     03F0  3400               	retlw	0
  2086     03F1  3400               	retlw	0
  2087     03F2  3400               	retlw	0
  2088     03F3  3400               	retlw	0
  2089     03F4  3400               	retlw	0
  2090     03F5  34E3               	retlw	227
  2091     03F6  3400               	retlw	0
  2092     03F7  3400               	retlw	0
  2093     03F8  3400               	retlw	0
  2094     03F9  3400               	retlw	0
  2095     03FA  3400               	retlw	0
  2096     03FB  3400               	retlw	0
  2097     03FC  3400               	retlw	0
  2098     03FD  34E7               	retlw	231
  2099     03FE  3400               	retlw	0
  2100     03FF  3400               	retlw	0
  2101     0400  3400               	retlw	0
  2102     0401  3400               	retlw	0
  2103     0402  3400               	retlw	0
  2104     0403  3400               	retlw	0
  2105     0404  3400               	retlw	0
  2106     0405  3465               	retlw	101
  2107     0406  3400               	retlw	0
  2108     0407  3400               	retlw	0
  2109     0408  3400               	retlw	0
  2110     0409  3400               	retlw	0
  2111     040A  3400               	retlw	0
  2112     040B  3400               	retlw	0
  2113     040C  3400               	retlw	0
  2114     040D  3400               	retlw	0
  2115     040E  3400               	retlw	0
  2116     040F  3400               	retlw	0
  2117     0410  3400               	retlw	0
  2118     0411  3400               	retlw	0
  2119     0412  3400               	retlw	0
  2120     0413  3400               	retlw	0
  2121     0414  3400               	retlw	0
  2122     0415  3400               	retlw	0
  2123     0416  3400               	retlw	0
  2124     0417  3400               	retlw	0
  2125     0418  3400               	retlw	0
  2126     0419  3400               	retlw	0
  2127     041A  3400               	retlw	0
  2128     041B  3400               	retlw	0
  2129     041C  3400               	retlw	0
  2130     041D  3400               	retlw	0
  2131     041E  3400               	retlw	0
  2132     041F  3400               	retlw	0
  2133     0420  3454               	retlw	84
  2134     0421  3400               	retlw	0
  2135     0422  3400               	retlw	0
  2136     0423  3400               	retlw	0
  2137     0424  3400               	retlw	0
  2138     0425  3400               	retlw	0
  2139     0426  3400               	retlw	0
  2140     0427  3400               	retlw	0
  2141     0428  3400               	retlw	0
  2142     0429  3400               	retlw	0
  2143     042A  3400               	retlw	0
  2144     042B  3400               	retlw	0
  2145     042C  3400               	retlw	0
  2146     042D  3400               	retlw	0
  2147     042E  3400               	retlw	0
  2148     042F  3400               	retlw	0
  2149     0430  3458               	retlw	88
  2150     0431  3400               	retlw	0
  2151     0432  3400               	retlw	0
  2152     0433  3400               	retlw	0
  2153     0434  3400               	retlw	0
  2154     0435  3400               	retlw	0
  2155     0436  3400               	retlw	0
  2156     0437  3400               	retlw	0
  2157     0438  3400               	retlw	0
  2158     0439  3400               	retlw	0
  2159     043A  3400               	retlw	0
  2160     043B  3400               	retlw	0
  2161     043C  3400               	retlw	0
  2162     043D  3400               	retlw	0
  2163     043E  3400               	retlw	0
  2164     043F  344D               	retlw	77
  2165     0440  3400               	retlw	0
  2166     0441  3450               	retlw	80
  2167     0442  344A               	retlw	74
  2168     0443  3400               	retlw	0
  2169     0444  3400               	retlw	0
  2170     0445  3400               	retlw	0
  2171     0446  3449               	retlw	73
  2172     0447  344C               	retlw	76
  2173     0448  3451               	retlw	81
  2174     0449  3400               	retlw	0
  2175     044A  344F               	retlw	79
  2176     044B  3452               	retlw	82
  2177     044C  3400               	retlw	0
  2178     044D  3400               	retlw	0
  2179     044E  3400               	retlw	0
  2180     044F  3400               	retlw	0
  2181     0450  344E               	retlw	78
  2182     0451  3400               	retlw	0
  2183     0452  3446               	retlw	70
  2184     0453  344B               	retlw	75
  2185     0454  3400               	retlw	0
  2186     0455  3400               	retlw	0
  2187     0456  3400               	retlw	0
  2188     0457  3400               	retlw	0
  2189     0458  3400               	retlw	0
  2190     0459  3400               	retlw	0
  2191     045A  3400               	retlw	0
  2192     045B  3400               	retlw	0
  2193     045C  3400               	retlw	0
  2194     045D  3400               	retlw	0
  2195     045E  3400               	retlw	0
  2196     045F  3400               	retlw	0
  2197     0460  3400               	retlw	0
  2198     0461  3400               	retlw	0
  2199     0462  3400               	retlw	0
  2200     0463  3400               	retlw	0
  2201     0464  3400               	retlw	0
  2202     0465  3400               	retlw	0
  2203     0466  3400               	retlw	0
  2204     0467  3400               	retlw	0
  2205     0468  3400               	retlw	0
  2206     0469  3400               	retlw	0
  2207     046A  3400               	retlw	0
  2208     046B  3400               	retlw	0
  2209     046C  3400               	retlw	0
  2210     046D  3400               	retlw	0
  2211     046E  3400               	retlw	0
  2212     046F  3400               	retlw	0
  2213     0470  3400               	retlw	0
  2214     0471  3400               	retlw	0
  2215     0472  3400               	retlw	0
  2216     0473  3400               	retlw	0
  2217     0474  3400               	retlw	0
  2218     0475  3400               	retlw	0
  2219     0476  3400               	retlw	0
  2220     0477  3400               	retlw	0
  2221     0478  3400               	retlw	0
  2222     0479  3400               	retlw	0
  2223     047A  3400               	retlw	0
  2224     047B  3400               	retlw	0
  2225     047C  3400               	retlw	0
  2226     047D  3400               	retlw	0
  2227     047E  3400               	retlw	0
  2228     047F  3400               	retlw	0
  2229     0480  3400               	retlw	0
  2230     0481  3400               	retlw	0
  2231     0482  3400               	retlw	0
  2232     0483  3400               	retlw	0
  2233     0484  3400               	retlw	0
  2234     0485  3400               	retlw	0
  2235     0486  3400               	retlw	0
  2236     0487  3400               	retlw	0
  2237     0488  3400               	retlw	0
  2238     0489  3400               	retlw	0
  2239     048A  3400               	retlw	0
  2240     048B  3400               	retlw	0
  2241     048C  3400               	retlw	0
  2242     048D  3400               	retlw	0
  2243     048E  3400               	retlw	0
  2244     048F  3400               	retlw	0
  2245     0490  3400               	retlw	0
  2246     0491  3400               	retlw	0
  2247     0492  3400               	retlw	0
  2248     0493  3400               	retlw	0
  2249     0494  3400               	retlw	0
  2250     0495  3400               	retlw	0
  2251     0496  3400               	retlw	0
  2252     0497  3400               	retlw	0
  2253     0498  3400               	retlw	0
  2254     0499  3400               	retlw	0
  2255     049A  3400               	retlw	0
  2256     049B  3400               	retlw	0
  2257     049C  3400               	retlw	0
  2258     049D  3400               	retlw	0
  2259     049E  3400               	retlw	0
  2260     049F  3400               	retlw	0
  2261     04A0  3400               	retlw	0
  2262     04A1  3400               	retlw	0
  2263     04A2  3400               	retlw	0
  2264     04A3  3400               	retlw	0
  2265     04A4  3400               	retlw	0
  2266     04A5  3400               	retlw	0
  2267     04A6  3400               	retlw	0
  2268     04A7  3400               	retlw	0
  2269     04A8  3400               	retlw	0
  2270     04A9  3400               	retlw	0
  2271     04AA  3400               	retlw	0
  2272     04AB  3400               	retlw	0
  2273     04AC  3400               	retlw	0
  2274     04AD  3400               	retlw	0
  2275     04AE  3400               	retlw	0
  2276     04AF  3400               	retlw	0
  2277     04B0  3400               	retlw	0
  2278     04B1  3400               	retlw	0
  2279     04B2  3400               	retlw	0
  2280     04B3  3400               	retlw	0
  2281     04B4  3400               	retlw	0
  2282     04B5  3400               	retlw	0
  2283     04B6  3400               	retlw	0
  2284     04B7  3400               	retlw	0
  2285     04B8  3400               	retlw	0
  2286     04B9  3400               	retlw	0
  2287     04BA  3400               	retlw	0
  2288     04BB  3400               	retlw	0
  2289     04BC  3400               	retlw	0
  2290     04BD  3400               	retlw	0
  2291     04BE  3400               	retlw	0
  2292     04BF  3400               	retlw	0
  2293     04C0  3400               	retlw	0
  2294     04C1  3400               	retlw	0
  2295     04C2  3400               	retlw	0
  2296     04C3  3400               	retlw	0
  2297     04C4  3400               	retlw	0
  2298     04C5  3400               	retlw	0
  2299     04C6  3400               	retlw	0
  2300     04C7  3400               	retlw	0
  2301     04C8  3400               	retlw	0
  2302     04C9  3400               	retlw	0
  2303     04CA  3400               	retlw	0
  2304     04CB  3400               	retlw	0
  2305     04CC  3400               	retlw	0
  2306     04CD  3400               	retlw	0
  2307     04CE  3400               	retlw	0
  2308     04CF  3400               	retlw	0
  2309     04D0  3400               	retlw	0
  2310     04D1  3400               	retlw	0
  2311     04D2  3400               	retlw	0
  2312     04D3  3400               	retlw	0
  2313     04D4  3400               	retlw	0
  2314     04D5                     __end_of_ps2ExtUsbMap:
  2315                           
  2316                           	psect	stringtext2
  2317     1000                     __pstringtext2:
  2318     1000                     _ps2UsbMap:
  2319     1000  3400               	retlw	0
  2320     1001  3442               	retlw	66
  2321     1002  3400               	retlw	0
  2322     1003  343E               	retlw	62
  2323     1004  343C               	retlw	60
  2324     1005  343A               	retlw	58
  2325     1006  343B               	retlw	59
  2326     1007  3445               	retlw	69
  2327     1008  3400               	retlw	0
  2328     1009  3443               	retlw	67
  2329     100A  3441               	retlw	65
  2330     100B  343F               	retlw	63
  2331     100C  343D               	retlw	61
  2332     100D  342B               	retlw	43
  2333     100E  3435               	retlw	53
  2334     100F  3400               	retlw	0
  2335     1010  3400               	retlw	0
  2336     1011  34E2               	retlw	226
  2337     1012  34E1               	retlw	225
  2338     1013  3400               	retlw	0
  2339     1014  34E0               	retlw	224
  2340     1015  3414               	retlw	20
  2341     1016  341E               	retlw	30
  2342     1017  3400               	retlw	0
  2343     1018  3400               	retlw	0
  2344     1019  3400               	retlw	0
  2345     101A  341D               	retlw	29
  2346     101B  3416               	retlw	22
  2347     101C  3404               	retlw	4
  2348     101D  341A               	retlw	26
  2349     101E  341F               	retlw	31
  2350     101F  3400               	retlw	0
  2351     1020  3400               	retlw	0
  2352     1021  3406               	retlw	6
  2353     1022  341B               	retlw	27
  2354     1023  3407               	retlw	7
  2355     1024  3408               	retlw	8
  2356     1025  3421               	retlw	33
  2357     1026  3420               	retlw	32
  2358     1027  3400               	retlw	0
  2359     1028  3400               	retlw	0
  2360     1029  342C               	retlw	44
  2361     102A  3419               	retlw	25
  2362     102B  3409               	retlw	9
  2363     102C  3417               	retlw	23
  2364     102D  3415               	retlw	21
  2365     102E  3422               	retlw	34
  2366     102F  3400               	retlw	0
  2367     1030  3400               	retlw	0
  2368     1031  3411               	retlw	17
  2369     1032  3405               	retlw	5
  2370     1033  340B               	retlw	11
  2371     1034  340A               	retlw	10
  2372     1035  341C               	retlw	28
  2373     1036  3423               	retlw	35
  2374     1037  3400               	retlw	0
  2375     1038  3400               	retlw	0
  2376     1039  3400               	retlw	0
  2377     103A  3410               	retlw	16
  2378     103B  340D               	retlw	13
  2379     103C  3418               	retlw	24
  2380     103D  3424               	retlw	36
  2381     103E  3425               	retlw	37
  2382     103F  3400               	retlw	0
  2383     1040  3400               	retlw	0
  2384     1041  3436               	retlw	54
  2385     1042  340E               	retlw	14
  2386     1043  340C               	retlw	12
  2387     1044  3412               	retlw	18
  2388     1045  3427               	retlw	39
  2389     1046  3426               	retlw	38
  2390     1047  3400               	retlw	0
  2391     1048  3400               	retlw	0
  2392     1049  3437               	retlw	55
  2393     104A  3438               	retlw	56
  2394     104B  340F               	retlw	15
  2395     104C  3433               	retlw	51
  2396     104D  3413               	retlw	19
  2397     104E  342D               	retlw	45
  2398     104F  3400               	retlw	0
  2399     1050  3400               	retlw	0
  2400     1051  3400               	retlw	0
  2401     1052  3434               	retlw	52
  2402     1053  3400               	retlw	0
  2403     1054  342F               	retlw	47
  2404     1055  342E               	retlw	46
  2405     1056  3400               	retlw	0
  2406     1057  3400               	retlw	0
  2407     1058  3439               	retlw	57
  2408     1059  34E5               	retlw	229
  2409     105A  3428               	retlw	40
  2410     105B  3430               	retlw	48
  2411     105C  3400               	retlw	0
  2412     105D  3431               	retlw	49
  2413     105E  3400               	retlw	0
  2414     105F  3400               	retlw	0
  2415     1060  3400               	retlw	0
  2416     1061  3400               	retlw	0
  2417     1062  3400               	retlw	0
  2418     1063  3400               	retlw	0
  2419     1064  3400               	retlw	0
  2420     1065  3400               	retlw	0
  2421     1066  342A               	retlw	42
  2422     1067  3400               	retlw	0
  2423     1068  3400               	retlw	0
  2424     1069  341E               	retlw	30
  2425     106A  3400               	retlw	0
  2426     106B  3421               	retlw	33
  2427     106C  3424               	retlw	36
  2428     106D  3400               	retlw	0
  2429     106E  3400               	retlw	0
  2430     106F  3400               	retlw	0
  2431     1070  3427               	retlw	39
  2432     1071  3437               	retlw	55
  2433     1072  341F               	retlw	31
  2434     1073  3422               	retlw	34
  2435     1074  3423               	retlw	35
  2436     1075  3425               	retlw	37
  2437     1076  3429               	retlw	41
  2438     1077  3453               	retlw	83
  2439     1078  3444               	retlw	68
  2440     1079  342E               	retlw	46
  2441     107A  3420               	retlw	32
  2442     107B  342D               	retlw	45
  2443     107C  3425               	retlw	37
  2444     107D  3426               	retlw	38
  2445     107E  3400               	retlw	0
  2446     107F  3400               	retlw	0
  2447     1080  3400               	retlw	0
  2448     1081  3400               	retlw	0
  2449     1082  3400               	retlw	0
  2450     1083  3440               	retlw	64
  2451     1084                     __end_of_ps2UsbMap:
  2452                           
  2453                           	psect	stringtext3
  2454     18D3                     __pstringtext3:
  2455     18D3                     _USB_SD_Ptr:
  2456     18D3  34D9               	retlw	low (_sd000| (0+32768))
  2457     18D4  3498               	retlw	high (_sd000| (0+32768))
  2458     18D5  343F               	retlw	low (_sd001| (0+32768))
  2459     18D6  3498               	retlw	high (_sd001| (0+32768))
  2460     18D7  349C               	retlw	low (_sd002| (0+32768))
  2461     18D8  3498               	retlw	high (_sd002| (0+32768))
  2462     18D9                     __end_of_USB_SD_Ptr:
  2463                           
  2464                           	psect	stringtext4
  2465     18DD                     __pstringtext4:
  2466     18DD                     _USB_CD_Ptr:
  2467     18DD  3473               	retlw	low (_configDescriptor1| (0+32768))
  2468     18DE  3498               	retlw	high (_configDescriptor1| (0+32768))
  2469     18DF                     __end_of_USB_CD_Ptr:
  2470                           
  2471                           	psect	stringtext5
  2472     1800                     __pstringtext5:
  2473     1800                     _hid_rpt01:
  2474     1800  3405               	retlw	5
  2475     1801  3401               	retlw	1
  2476     1802  3409               	retlw	9
  2477     1803  3406               	retlw	6
  2478     1804  34A1               	retlw	161
  2479     1805  3401               	retlw	1
  2480     1806  3405               	retlw	5
  2481     1807  3407               	retlw	7
  2482     1808  3419               	retlw	25
  2483     1809  34E0               	retlw	224
  2484     180A  3429               	retlw	41
  2485     180B  34E7               	retlw	231
  2486     180C  3415               	retlw	21
  2487     180D  3400               	retlw	0
  2488     180E  3425               	retlw	37
  2489     180F  3401               	retlw	1
  2490     1810  3475               	retlw	117
  2491     1811  3401               	retlw	1
  2492     1812  3495               	retlw	149
  2493     1813  3408               	retlw	8
  2494     1814  3481               	retlw	129
  2495     1815  3402               	retlw	2
  2496     1816  3495               	retlw	149
  2497     1817  3401               	retlw	1
  2498     1818  3475               	retlw	117
  2499     1819  3408               	retlw	8
  2500     181A  3481               	retlw	129
  2501     181B  3403               	retlw	3
  2502     181C  3495               	retlw	149
  2503     181D  3405               	retlw	5
  2504     181E  3475               	retlw	117
  2505     181F  3401               	retlw	1
  2506     1820  3405               	retlw	5
  2507     1821  3408               	retlw	8
  2508     1822  3419               	retlw	25
  2509     1823  3401               	retlw	1
  2510     1824  3429               	retlw	41
  2511     1825  3405               	retlw	5
  2512     1826  3491               	retlw	145
  2513     1827  3402               	retlw	2
  2514     1828  3495               	retlw	149
  2515     1829  3401               	retlw	1
  2516     182A  3475               	retlw	117
  2517     182B  3403               	retlw	3
  2518     182C  3491               	retlw	145
  2519     182D  3403               	retlw	3
  2520     182E  3495               	retlw	149
  2521     182F  3406               	retlw	6
  2522     1830  3475               	retlw	117
  2523     1831  3408               	retlw	8
  2524     1832  3415               	retlw	21
  2525     1833  3400               	retlw	0
  2526     1834  3425               	retlw	37
  2527     1835  3465               	retlw	101
  2528     1836  3405               	retlw	5
  2529     1837  3407               	retlw	7
  2530     1838  3419               	retlw	25
  2531     1839  3400               	retlw	0
  2532     183A  3429               	retlw	41
  2533     183B  3465               	retlw	101
  2534     183C  3481               	retlw	129
  2535     183D  3400               	retlw	0
  2536     183E  34C0               	retlw	192
  2537     183F                     __end_of_hid_rpt01:
  2538                           
  2539                           	psect	stringtext6
  2540     183F                     __pstringtext6:
  2541     183F                     _sd001:
  2542     183F  3434               	retlw	52
  2543     1840  3403               	retlw	3
  2544     1841  344D               	retlw	77
  2545     1842  3400               	retlw	0
  2546     1843  3469               	retlw	105
  2547     1844  3400               	retlw	0
  2548     1845  3463               	retlw	99
  2549     1846  3400               	retlw	0
  2550     1847  3472               	retlw	114
  2551     1848  3400               	retlw	0
  2552     1849  346F               	retlw	111
  2553     184A  3400               	retlw	0
  2554     184B  3463               	retlw	99
  2555     184C  3400               	retlw	0
  2556     184D  3468               	retlw	104
  2557     184E  3400               	retlw	0
  2558     184F  3469               	retlw	105
  2559     1850  3400               	retlw	0
  2560     1851  3470               	retlw	112
  2561     1852  3400               	retlw	0
  2562     1853  3420               	retlw	32
  2563     1854  3400               	retlw	0
  2564     1855  3454               	retlw	84
  2565     1856  3400               	retlw	0
  2566     1857  3465               	retlw	101
  2567     1858  3400               	retlw	0
  2568     1859  3463               	retlw	99
  2569     185A  3400               	retlw	0
  2570     185B  3468               	retlw	104
  2571     185C  3400               	retlw	0
  2572     185D  346E               	retlw	110
  2573     185E  3400               	retlw	0
  2574     185F  346F               	retlw	111
  2575     1860  3400               	retlw	0
  2576     1861  346C               	retlw	108
  2577     1862  3400               	retlw	0
  2578     1863  346F               	retlw	111
  2579     1864  3400               	retlw	0
  2580     1865  3467               	retlw	103
  2581     1866  3400               	retlw	0
  2582     1867  3479               	retlw	121
  2583     1868  3400               	retlw	0
  2584     1869  3420               	retlw	32
  2585     186A  3400               	retlw	0
  2586     186B  3449               	retlw	73
  2587     186C  3400               	retlw	0
  2588     186D  346E               	retlw	110
  2589     186E  3400               	retlw	0
  2590     186F  3463               	retlw	99
  2591     1870  3400               	retlw	0
  2592     1871  342E               	retlw	46
  2593     1872  3400               	retlw	0
  2594     1873                     __end_of_sd001:
  2595                           
  2596                           	psect	stringtext7
  2597     1873                     __pstringtext7:
  2598     1873                     _configDescriptor1:
  2599     1873  3409               	retlw	9
  2600     1874  3402               	retlw	2
  2601     1875  3429               	retlw	41
  2602     1876  3400               	retlw	0
  2603     1877  3401               	retlw	1
  2604     1878  3401               	retlw	1
  2605     1879  3400               	retlw	0
  2606     187A  34C0               	retlw	192
  2607     187B  3432               	retlw	50
  2608     187C  3409               	retlw	9
  2609     187D  3404               	retlw	4
  2610     187E  3400               	retlw	0
  2611     187F  3400               	retlw	0
  2612     1880  3402               	retlw	2
  2613     1881  3403               	retlw	3
  2614     1882  3401               	retlw	1
  2615     1883  3401               	retlw	1
  2616     1884  3400               	retlw	0
  2617     1885  3409               	retlw	9
  2618     1886  3421               	retlw	33
  2619     1887  3411               	retlw	17
  2620     1888  3401               	retlw	1
  2621     1889  3400               	retlw	0
  2622     188A  3401               	retlw	1
  2623     188B  3422               	retlw	34
  2624     188C  343F               	retlw	63
  2625     188D  3400               	retlw	0
  2626     188E  3407               	retlw	7
  2627     188F  3405               	retlw	5
  2628     1890  3481               	retlw	129
  2629     1891  3403               	retlw	3
  2630     1892  3408               	retlw	8
  2631     1893  3400               	retlw	0
  2632     1894  3401               	retlw	1
  2633     1895  3407               	retlw	7
  2634     1896  3405               	retlw	5
  2635     1897  3401               	retlw	1
  2636     1898  3403               	retlw	3
  2637     1899  3408               	retlw	8
  2638     189A  3400               	retlw	0
  2639     189B  3401               	retlw	1
  2640     189C                     __end_of_configDescriptor1:
  2641                           
  2642                           	psect	stringtext8
  2643     189C                     __pstringtext8:
  2644     189C                     _sd002:
  2645     189C  341C               	retlw	28
  2646     189D  3403               	retlw	3
  2647     189E  344B               	retlw	75
  2648     189F  3400               	retlw	0
  2649     18A0  3465               	retlw	101
  2650     18A1  3400               	retlw	0
  2651     18A2  3479               	retlw	121
  2652     18A3  3400               	retlw	0
  2653     18A4  3462               	retlw	98
  2654     18A5  3400               	retlw	0
  2655     18A6  346F               	retlw	111
  2656     18A7  3400               	retlw	0
  2657     18A8  3461               	retlw	97
  2658     18A9  3400               	retlw	0
  2659     18AA  3472               	retlw	114
  2660     18AB  3400               	retlw	0
  2661     18AC  3464               	retlw	100
  2662     18AD  3400               	retlw	0
  2663     18AE  3420               	retlw	32
  2664     18AF  3400               	retlw	0
  2665     18B0  3444               	retlw	68
  2666     18B1  3400               	retlw	0
  2667     18B2  3465               	retlw	101
  2668     18B3  3400               	retlw	0
  2669     18B4  346D               	retlw	109
  2670     18B5  3400               	retlw	0
  2671     18B6  346F               	retlw	111
  2672     18B7  3400               	retlw	0
  2673     18B8                     __end_of_sd002:
  2674                           
  2675                           	psect	stringtext9
  2676     18B8                     __pstringtext9:
  2677     18B8                     _device_dsc:
  2678     18B8  3412               	retlw	18
  2679     18B9  3401               	retlw	1
  2680     18BA  3400               	retlw	0
  2681     18BB  3402               	retlw	2
  2682     18BC  3400               	retlw	0
  2683     18BD  3400               	retlw	0
  2684     18BE  3400               	retlw	0
  2685     18BF  3408               	retlw	8
  2686     18C0  34D8               	retlw	216
  2687     18C1  3404               	retlw	4
  2688     18C2  3455               	retlw	85
  2689     18C3  3400               	retlw	0
  2690     18C4  3401               	retlw	1
  2691     18C5  3400               	retlw	0
  2692     18C6  3401               	retlw	1
  2693     18C7  3402               	retlw	2
  2694     18C8  3400               	retlw	0
  2695     18C9  3401               	retlw	1
  2696     18CA                     __end_of_device_dsc:
  2697                           
  2698                           	psect	stringtext10
  2699     18D9                     __pstringtext10:
  2700     18D9                     _sd000:
  2701     18D9  3404               	retlw	4
  2702     18DA  3403               	retlw	3
  2703     18DB  3409               	retlw	9
  2704     18DC  3404               	retlw	4
  2705     18DD                     __end_of_sd000:
  2706                           
  2707                           	psect	nvBANK3
  2708     01E5                     __pnvBANK3:
  2709     01E5                     _IOCAF5_InterruptHandler:
  2710     01E5                     	ds	2
  2711     01E7                     _IOCAF4_InterruptHandler:
  2712     01E7                     	ds	2
  2713     000C                     _PORTAbits	set	12
  2714     001C                     _T2CONbits	set	28
  2715     001C                     _T2CON	set	28
  2716     001A                     _TMR2	set	26
  2717     001B                     _PR2	set	27
  2718     0011                     _PIR1bits	set	17
  2719     0012                     _PIR2bits	set	18
  2720     000B                     _INTCONbits	set	11
  2721     0091                     _PIE1bits	set	145
  2722     0092                     _PIE2bits	set	146
  2723     0097                     _WDTCON	set	151
  2724     0098                     _OSCTUNE	set	152
  2725     0099                     _OSCCON	set	153
  2726     0095                     _OPTION_REGbits	set	149
  2727     008E                     _TRISC	set	142
  2728     008D                     _TRISB	set	141
  2729     008C                     _TRISA	set	140
  2730     04D6                     _PLLRDY	set	1238
  2731     0116                     _BORCON	set	278
  2732     011D                     _APFCON	set	285
  2733     010E                     _LATC	set	270
  2734     010D                     _LATB	set	269
  2735     010C                     _LATA	set	268
  2736     0199                     _RCREG	set	409
  2737     019D                     _RCSTAbits	set	413
  2738     019A                     _TXREG	set	410
  2739     019C                     _SPBRGH	set	412
  2740     019B                     _SPBRGL	set	411
  2741     019E                     _TXSTA	set	414
  2742     019D                     _RCSTA	set	413
  2743     019F                     _BAUDCON	set	415
  2744     018C                     _ANSELA	set	396
  2745     018D                     _ANSELB	set	397
  2746     018E                     _ANSELC	set	398
  2747     020C                     _WPUA	set	524
  2748     020D                     _WPUB	set	525
  2749     039B                     _ACTCON	set	923
  2750     0391                     _IOCAPbits	set	913
  2751     0392                     _IOCANbits	set	914
  2752     0393                     _IOCAFbits	set	915
  2753     0E98                     _UEP0bits	set	3736
  2754     0E8E                     _UCON	set	3726
  2755     0E8F                     _USTAT	set	3727
  2756     0E92                     _UIEbits	set	3730
  2757     0E90                     _UIRbits	set	3728
  2758     0E96                     _UADDR	set	3734
  2759     0E8E                     _UCONbits	set	3726
  2760     0E92                     _UIE	set	3730
  2761     0E97                     _UEIE	set	3735
  2762     0E91                     _UCFG	set	3729
  2763     0E90                     _UIR	set	3728
  2764     0E93                     _UEIR	set	3731
  2765     0E99                     _UEP1	set	3737
  2766     0E98                     _UEP0	set	3736
  2767                           
  2768                           	psect	stringtext11
  2769     18CA                     __pstringtext11:
  2770     18CA                     STR_1:
  2771     18CA  3425               	retlw	37	;'%'
  2772     18CB  3463               	retlw	99	;'c'
  2773     18CC  3425               	retlw	37	;'%'
  2774     18CD  3430               	retlw	48	;'0'
  2775     18CE  3432               	retlw	50	;'2'
  2776     18CF  3458               	retlw	88	;'X'
  2777     18D0  340D               	retlw	13
  2778     18D1  340A               	retlw	10
  2779     18D2  3400               	retlw	0
  2780                           
  2781                           	psect	stringtext12
  2782     0000                     __pstringtext12:
  2783                           
  2784                           	psect	cinit
  2785     003F                     start_initialization:	
  2786                           ; #config settings
  2787                           
  2788     003F                     __initialization:	;BIGRAM
  2789                           
  2790                           ; Clear objects allocated to BIGRAM
  2791     003F  302D               	movlw	low (0+9005)
  2792     0040  0084               	movwf	4
  2793     0041  3023               	movlw	high (0+9005)
  2794     0042  0085               	movwf	5
  2795     0043  30C3               	movlw	195
  2796     0044  00FE               	movwf	btemp
  2797     0045  3000               	movlw	0
  2798     0046  00FF               	movwf	btemp+1
  2799     0047  319C  2472  3180   	fcall	clear_ram0
  2800                           
  2801                           ; Clear objects allocated to BANK0
  2802     004A  3061               	movlw	low __pbssBANK0
  2803     004B  0084               	movwf	4
  2804     004C  3000               	movlw	high __pbssBANK0
  2805     004D  0085               	movwf	5
  2806     004E  300F               	movlw	15
  2807     004F  00FE               	movwf	btemp
  2808     0050  3000               	movlw	0
  2809     0051  00FF               	movwf	btemp+1
  2810     0052  319C  2472  3180   	fcall	clear_ram0
  2811                           
  2812                           ; Clear objects allocated to BANK1
  2813     0055  0021               	movlb	1	; select bank1
  2814     0056  01EB               	clrf	__pbssBANK1& (0+127)
  2815     0057  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  2816     0058  01ED               	clrf	(__pbssBANK1+2)& (0+127)
  2817     0059  01EE               	clrf	(__pbssBANK1+3)& (0+127)
  2818     005A  01EF               	clrf	(__pbssBANK1+4)& (0+127)
  2819                           
  2820                           ; Clear objects allocated to BANK2
  2821     005B  3021               	movlw	low __pbssBANK2
  2822     005C  0084               	movwf	4
  2823     005D  3001               	movlw	high __pbssBANK2
  2824     005E  0085               	movwf	5
  2825     005F  302B               	movlw	43
  2826     0060  00FE               	movwf	btemp
  2827     0061  3000               	movlw	0
  2828     0062  00FF               	movwf	btemp+1
  2829     0063  319C  2472  3180   	fcall	clear_ram0
  2830                           
  2831                           ; Clear objects allocated to BANK3
  2832     0066  30A0               	movlw	low __pbssBANK3
  2833     0067  0084               	movwf	4
  2834     0068  3001               	movlw	high __pbssBANK3
  2835     0069  0085               	movwf	5
  2836     006A  3045               	movlw	69
  2837     006B  00FE               	movwf	btemp
  2838     006C  3000               	movlw	0
  2839     006D  00FF               	movwf	btemp+1
  2840     006E  319C  2472  3180   	fcall	clear_ram0
  2841                           
  2842                           ; Clear objects allocated to BANK4
  2843     0071  3020               	movlw	low __pbssBANK4
  2844     0072  0084               	movwf	4
  2845     0073  3002               	movlw	high __pbssBANK4
  2846     0074  0085               	movwf	5
  2847     0075  3032               	movlw	50
  2848     0076  00FE               	movwf	btemp
  2849     0077  3000               	movlw	0
  2850     0078  00FF               	movwf	btemp+1
  2851     0079  319C  2472         	fcall	clear_ram0
  2852     007B                     end_of_initialization:	
  2853                           ;End of C runtime variable initialization code
  2854                           
  2855     007B                     __end_of__initialization:
  2856     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2857     007C  0020               	movlb	0
  2858     007D  318B  2BA9         	ljmp	_main	;jump to C main() function
  2859                           
  2860                           	psect	bssBANK0
  2861     0061                     __pbssBANK0:
  2862     0061                     _pBDTEntryIn:
  2863     0061                     	ds	4
  2864     0065                     _SOFCounter:
  2865     0065                     	ds	2
  2866     0067                     _pBDTEntryEP0OutNext:
  2867     0067                     	ds	2
  2868     0069                     _controlTransferState:
  2869     0069                     	ds	1
  2870     006A                     _pBDTEntryEP0OutCurrent:
  2871     006A                     	ds	1
  2872     006B                     _USBDeviceState:
  2873     006B                     	ds	1
  2874     006C                     _eusartRxHead:
  2875     006C                     	ds	1
  2876     006D                     _eusartTxBufferRemaining:
  2877     006D                     	ds	1
  2878     006E                     _USTATcopy:
  2879     006E                     	ds	1
  2880     006F                     _USBActiveConfiguration:
  2881     006F                     	ds	1
  2882                           
  2883                           	psect	bssBANK1
  2884     00EB                     __pbssBANK1:
  2885     00EB                     _inPipes:
  2886     00EB                     	ds	5
  2887                           
  2888                           	psect	bssBANK2
  2889     0121                     __pbssBANK2:
  2890     0121                     _outPipes:
  2891     0121                     	ds	7
  2892     0128                     _pBDTEntryOut:
  2893     0128                     	ds	4
  2894     012C                     _width:
  2895     012C                     	ds	2
  2896     012E                     _LocalSOFCount:
  2897     012E                     	ds	2
  2898     0130                     _ep_data_out:
  2899     0130                     	ds	2
  2900     0132                     _ep_data_in:
  2901     0132                     	ds	2
  2902     0134                     _flags:
  2903     0134                     	ds	1
  2904     0135                     _keyboardIsExtend:
  2905     0135                     	ds	1
  2906     0136                     _keyboardData:
  2907     0136                     	ds	1
  2908     0137                     _keyboardScanCodeValid:
  2909     0137                     	ds	1
  2910     0138                     _keyboardOnesCount:
  2911     0138                     	ds	1
  2912     0139                     _keyboardIndexData:
  2913     0139                     	ds	1
  2914     013A                     _keyboardState:
  2915     013A                     	ds	1
  2916     013B                     _USBTicksSinceSuspendEnd:
  2917     013B                     	ds	1
  2918     013C                     _USBDeferOUTDataStagePackets:
  2919     013C                     	ds	1
  2920     013D                     _USBDeferINDataStagePackets:
  2921     013D                     	ds	1
  2922     013E                     _USBStatusStageEnabledFlag2:
  2923     013E                     	ds	1
  2924     013F                     _USBStatusStageEnabledFlag1:
  2925     013F                     	ds	1
  2926     0140                     _USBDeferStatusStagePacket:
  2927     0140                     	ds	1
  2928     0141                     _USBStatusStageTimeoutCounter:
  2929     0141                     	ds	1
  2930     0142                     _BothEP0OutUOWNsSet:
  2931     0142                     	ds	1
  2932     0143                     _endpoint_number:
  2933     0143                     	ds	1
  2934     0144                     _USBBusIsSuspended:
  2935     0144                     	ds	1
  2936     0145                     _RemoteWakeup:
  2937     0145                     	ds	1
  2938     0146                     _pDst:
  2939     0146                     	ds	1
  2940     0147                     _shortPacketStatus:
  2941     0147                     	ds	1
  2942     0148                     _eusartTxTail:
  2943     0148                     	ds	1
  2944     0149                     _eusartTxHead:
  2945     0149                     	ds	1
  2946     014A                     _idle_rate:
  2947     014A                     	ds	1
  2948     014B                     _USBAlternateInterface:
  2949     014B                     	ds	1
  2950                           
  2951                           	psect	bssBANK3
  2952     01A0                     __pbssBANK3:
  2953     01A0                     _eusartRxStatusBuffer:
  2954     01A0                     	ds	8
  2955     01A8                     _eusartRxBuffer:
  2956     01A8                     	ds	8
  2957     01B0                     _eusartTxBuffer:
  2958     01B0                     	ds	8
  2959     01B8                     _timeMs:
  2960     01B8                     	ds	4
  2961     01BC                     _prevTimeMs:
  2962     01BC                     	ds	4
  2963     01C0                     _USB1msTickCount:
  2964     01C0                     	ds	4
  2965     01C4                     main@F3438:
  2966     01C4                     	ds	3
  2967     01C7                     _nout:
  2968     01C7                     	ds	2
  2969     01C9                     _prec:
  2970     01C9                     	ds	2
  2971     01CB                     _errno:
  2972     01CB                     	ds	2
  2973     01CD                     _OldSOFCount:
  2974     01CD                     	ds	2
  2975     01CF                     _keyboardIdleRate:
  2976     01CF                     	ds	2
  2977     01D1                     _EUSART_ErrorHandler:
  2978     01D1                     	ds	2
  2979     01D3                     _EUSART_OverrunErrorHandler:
  2980     01D3                     	ds	2
  2981     01D5                     _EUSART_FramingErrorHandler:
  2982     01D5                     	ds	2
  2983     01D7                     _TMR2_InterruptHandler:
  2984     01D7                     	ds	2
  2985     01D9                     _EUSART_RxDefaultInterruptHandler:
  2986     01D9                     	ds	2
  2987     01DB                     _EUSART_TxDefaultInterruptHandler:
  2988     01DB                     	ds	2
  2989     01DD                     _keyboardIsBreak:
  2990     01DD                     	ds	1
  2991     01DE                     _eusartRxLastError:
  2992     01DE                     	ds	1
  2993     01DF                     _eusartRxCount:
  2994     01DF                     	ds	1
  2995     01E0                     _eusartRxTail:
  2996     01E0                     	ds	1
  2997     01E1                     _keyboardScanCode:
  2998     01E1                     	ds	3
  2999     01E4                     _active_protocol:
  3000     01E4                     	ds	1
  3001                           
  3002                           	psect	bssBANK4
  3003     0220                     __pbssBANK4:
  3004     0220                     main@F3442:
  3005     0220                     	ds	10
  3006     022A                     _oldInputReport:
  3007     022A                     	ds	8
  3008     0232                     _dbuf:
  3009     0232                     	ds	32
  3010                           
  3011                           	psect	clrtext
  3012     1C72                     clear_ram0:	
  3013                           ;	Called with FSR0 containing the base address, and
  3014                           ;	btemp/btemp+1 has the size to clear
  3015                           
  3016     1C72  0064               	clrwdt	;clear the watchdog before getting into this loop
  3017     1C73                     clrloop0:
  3018     1C73  0180               	clrf	0	;clear RAM location pointed to by FSR
  3019     1C74  3101               	addfsr 0,1
  3020     1C75  3001               	movlw	1
  3021     1C76  02FE               	subwf	126,f
  3022     1C77  3000               	movlw	0
  3023     1C78  3BFF               	subwfb	127,f
  3024     1C79  087F               	movf	127,w
  3025     1C7A  047E               	iorwf	126,w
  3026     1C7B  1903               	btfsc	3,2
  3027     1C7C  3400               	retlw	0	;all done for this memory range, return
  3028     1C7D  2C73               	goto	clrloop0	;have we reached the end yet?
  3029                           
  3030                           	psect	cstackBANK2
  3031     014C                     __pcstackBANK2:
  3032     014C                     _snprintf$3536:
  3033                           
  3034                           ; 2 bytes @ 0x0
  3035     014C                     	ds	2
  3036     014E                     snprintf@s:
  3037                           
  3038                           ; 1 bytes @ 0x2
  3039     014E                     	ds	1
  3040     014F                     snprintf@ap:
  3041                           
  3042                           ; 1 bytes @ 0x3
  3043     014F                     	ds	1
  3044     0150                     snprintf@cnt:
  3045                           
  3046                           ; 2 bytes @ 0x4
  3047     0150                     	ds	2
  3048     0152                     snprintf@f:
  3049                           
  3050                           ; 11 bytes @ 0x6
  3051     0152                     	ds	11
  3052     015D                     main@scanCodeStr:
  3053                           
  3054                           ; 10 bytes @ 0x11
  3055     015D                     	ds	10
  3056     0167                     _main$2651:
  3057                           
  3058                           ; 2 bytes @ 0x1B
  3059     0167                     	ds	2
  3060     0169                     main@scanCodeValid:
  3061                           
  3062                           ; 1 bytes @ 0x1D
  3063     0169                     	ds	1
  3064     016A                     main@strLen:
  3065                           
  3066                           ; 1 bytes @ 0x1E
  3067     016A                     	ds	1
  3068     016B                     main@i:
  3069                           
  3070                           ; 1 bytes @ 0x1F
  3071     016B                     	ds	1
  3072     016C                     main@hndlScanCode:
  3073                           
  3074                           ; 1 bytes @ 0x20
  3075     016C                     	ds	1
  3076     016D                     main@scanCode:
  3077                           
  3078                           ; 3 bytes @ 0x21
  3079     016D                     	ds	3
  3080                           
  3081                           	psect	cstackBANK1
  3082     00A8                     __pcstackBANK1:
  3083     00A8                     ?_IOCAF4_SetInterruptHandler:
  3084     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087     00A8                     ??_OSCILLATOR_Initialize:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090     00A8                     ??_WDT_Initialize:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093     00A8                     ??_USBDeviceInit:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096     00A8                     ??_USBDeviceAttach:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099     00A8                     ?_TMR2_SetInterruptHandler:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114     00A8                     ?_EUSART_SetErrorHandler:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117     00A8                     ?_GenericQueue_Init:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123     00A8                     ??_APP_KeyboardProcessOutputReport:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126     00A8                     ??_putch:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129     00A8                     ??_TMR2_StartTimer:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132     00A8                     ??_EUSART_is_tx_ready:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135     00A8                     ??_EUSART_Write:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138     00A8                     ?___bmul:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141     00A8                     ?_memset:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144     00A8                     ?_USBTransferOnePacket:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147     00A8                     ?_GenericQueue_IsEmpty:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150     00A8                     ?_fputc:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153     00A8                     ?_strlen:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156     00A8                     ?_GenericQueue_IsFull:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159     00A8                     ?___awmod:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162     00A8                     USBTransferOnePacket@dir:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168     00A8                     ___bmul@multiplicand:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3175                           ; 2 bytes @ 0x0
  3176                           
  3177     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3178                           ; 2 bytes @ 0x0
  3179                           
  3180     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195     00A8                     GenericQueue_Init@q:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198     00A8                     GenericQueue_IsEmpty@q:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201     00A8                     GenericQueue_IsFull@q:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204     00A8                     ___awmod@divisor:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207     00A8                     memset@dest:	
  3208                           ; 2 bytes @ 0x0
  3209                           
  3210     00A8                     fputc@c:	
  3211                           ; 2 bytes @ 0x0
  3212                           
  3213                           
  3214                           ; 2 bytes @ 0x0
  3215     00A8                     	ds	1
  3216     00A9                     ??___bmul:
  3217     00A9                     EUSART_Write@txData:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220     00A9                     USBTransferOnePacket@data:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223                           
  3224                           ; 2 bytes @ 0x1
  3225     00A9                     	ds	1
  3226     00AA                     ??_IOCAF4_SetInterruptHandler:
  3227     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230     00AA                     ??_TMR2_Initialize:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233     00AA                     ??_EUSART_Initialize:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236     00AA                     ??_TMR2_SetInterruptHandler:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251     00AA                     ??_EUSART_SetErrorHandler:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254     00AA                     ??_SysTime_Init:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257     00AA                     ??_GenericQueue_IsEmpty:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260     00AA                     ??_strlen:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263     00AA                     ??_PIN_MANAGER_Initialize:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266     00AA                     ??_GenericQueue_IsFull:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269     00AA                     ___bmul@product:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272     00AA                     fputc@fp:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275     00AA                     GenericQueue_Init@element_size:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278     00AA                     ___awmod@dividend:	
  3279                           ; 2 bytes @ 0x2
  3280                           
  3281     00AA                     memset@c:	
  3282                           ; 2 bytes @ 0x2
  3283                           
  3284                           
  3285                           ; 2 bytes @ 0x2
  3286     00AA                     	ds	1
  3287     00AB                     ??_fputc:
  3288     00AB                     USBTransferOnePacket@len:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291     00AB                     ___bmul@multiplier:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294     00AB                     strlen@a:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297                           
  3298                           ; 1 bytes @ 0x3
  3299     00AB                     	ds	1
  3300     00AC                     ??_USBTransferOnePacket:
  3301     00AC                     ??_PS2Keyboard_Init:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304     00AC                     ??_GenericQueue_Init:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307     00AC                     ??___awmod:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310     00AC                     strlen@s:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313     00AC                     USBDeviceInit@p:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316     00AC                     memset@n:	
  3317                           ; 2 bytes @ 0x4
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x4
  3321     00AC                     	ds	1
  3322     00AD                     ___awmod@counter:
  3323                           
  3324                           ; 1 bytes @ 0x5
  3325     00AD                     	ds	1
  3326     00AE                     ??_memset:
  3327     00AE                     USBDeviceInit@i_1369:	
  3328                           ; 1 bytes @ 0x6
  3329                           
  3330     00AE                     ___awmod@sign:	
  3331                           ; 1 bytes @ 0x6
  3332                           
  3333     00AE                     memset@p:	
  3334                           ; 1 bytes @ 0x6
  3335                           
  3336                           
  3337                           ; 2 bytes @ 0x6
  3338     00AE                     	ds	1
  3339     00AF                     ?___wmul:
  3340     00AF                     USBDeviceInit@i:	
  3341                           ; 2 bytes @ 0x7
  3342                           
  3343     00AF                     ___wmul@multiplier:	
  3344                           ; 1 bytes @ 0x7
  3345                           
  3346                           
  3347                           ; 2 bytes @ 0x7
  3348     00AF                     	ds	1
  3349     00B0                     ??_SYSTEM_Initialize:
  3350     00B0                     ?_fputs:	
  3351                           ; 1 bytes @ 0x8
  3352                           
  3353     00B0                     ?_ctoa:	
  3354                           ; 2 bytes @ 0x8
  3355                           
  3356     00B0                     USBTransferOnePacket@ep:	
  3357                           ; 2 bytes @ 0x8
  3358                           
  3359     00B0                     ctoa@c:	
  3360                           ; 1 bytes @ 0x8
  3361                           
  3362     00B0                     fputs@fp:	
  3363                           ; 1 bytes @ 0x8
  3364                           
  3365                           
  3366                           ; 1 bytes @ 0x8
  3367     00B0                     	ds	1
  3368     00B1                     ??_fputs:
  3369     00B1                     USBTransferOnePacket@handle:	
  3370                           ; 1 bytes @ 0x9
  3371                           
  3372     00B1                     ___wmul@multiplicand:	
  3373                           ; 2 bytes @ 0x9
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x9
  3377     00B1                     	ds	1
  3378     00B2                     ??_ctoa:
  3379                           
  3380                           ; 1 bytes @ 0xA
  3381     00B2                     	ds	1
  3382     00B3                     ??___wmul:
  3383     00B3                     fputs@c:	
  3384                           ; 1 bytes @ 0xB
  3385                           
  3386     00B3                     ___wmul@product:	
  3387                           ; 1 bytes @ 0xB
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0xB
  3391     00B3                     	ds	1
  3392     00B4                     ctoa@l:
  3393     00B4                     fputs@i:	
  3394                           ; 2 bytes @ 0xC
  3395                           
  3396                           
  3397                           ; 2 bytes @ 0xC
  3398     00B4                     	ds	1
  3399     00B5                     ?_memcpy:
  3400     00B5                     ?_memcmp:	
  3401                           ; 2 bytes @ 0xD
  3402                           
  3403     00B5                     ?_read_prec_or_width:	
  3404                           ; 2 bytes @ 0xD
  3405                           
  3406     00B5                     read_prec_or_width@ap:	
  3407                           ; 2 bytes @ 0xD
  3408                           
  3409     00B5                     memcmp@vl:	
  3410                           ; 1 bytes @ 0xD
  3411                           
  3412     00B5                     memcpy@d1:	
  3413                           ; 2 bytes @ 0xD
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0xD
  3417     00B5                     	ds	1
  3418     00B6                     fputs@s:
  3419     00B6                     ctoa@w:	
  3420                           ; 1 bytes @ 0xE
  3421                           
  3422                           
  3423                           ; 2 bytes @ 0xE
  3424     00B6                     	ds	1
  3425     00B7                     ??_read_prec_or_width:
  3426     00B7                     ?_pad:	
  3427                           ; 1 bytes @ 0xF
  3428                           
  3429     00B7                     memcmp@vr:	
  3430                           ; 2 bytes @ 0xF
  3431                           
  3432     00B7                     pad@buf:	
  3433                           ; 1 bytes @ 0xF
  3434                           
  3435     00B7                     memcpy@s1:	
  3436                           ; 1 bytes @ 0xF
  3437                           
  3438                           
  3439                           ; 2 bytes @ 0xF
  3440     00B7                     	ds	1
  3441     00B8                     ctoa@fp:
  3442     00B8                     memcmp@n:	
  3443                           ; 1 bytes @ 0x10
  3444                           
  3445     00B8                     pad@p:	
  3446                           ; 2 bytes @ 0x10
  3447                           
  3448                           
  3449                           ; 2 bytes @ 0x10
  3450     00B8                     	ds	1
  3451     00B9                     memcpy@n:
  3452                           
  3453                           ; 2 bytes @ 0x11
  3454     00B9                     	ds	1
  3455     00BA                     ??_memcmp:
  3456     00BA                     ??_pad:	
  3457                           ; 1 bytes @ 0x12
  3458                           
  3459     00BA                     read_prec_or_width@c:	
  3460                           ; 1 bytes @ 0x12
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x12
  3464     00BA                     	ds	1
  3465     00BB                     ??_memcpy:
  3466     00BB                     memcmp@l:	
  3467                           ; 1 bytes @ 0x13
  3468                           
  3469     00BB                     memcpy@d:	
  3470                           ; 2 bytes @ 0x13
  3471                           
  3472     00BB                     pad@i:	
  3473                           ; 2 bytes @ 0x13
  3474                           
  3475     00BB                     read_prec_or_width@n:	
  3476                           ; 2 bytes @ 0x13
  3477                           
  3478                           
  3479                           ; 2 bytes @ 0x13
  3480     00BB                     	ds	2
  3481     00BD                     memcmp@r:
  3482     00BD                     pad@fp:	
  3483                           ; 1 bytes @ 0x15
  3484                           
  3485     00BD                     read_prec_or_width@fmt:	
  3486                           ; 1 bytes @ 0x15
  3487                           
  3488     00BD                     memcpy@s:	
  3489                           ; 1 bytes @ 0x15
  3490                           
  3491                           
  3492                           ; 2 bytes @ 0x15
  3493     00BD                     	ds	1
  3494     00BE                     ?_GenericQueue_Contains:
  3495     00BE                     ?_xtoa:	
  3496                           ; 1 bytes @ 0x16
  3497                           
  3498     00BE                     GenericQueue_Contains@q:	
  3499                           ; 2 bytes @ 0x16
  3500                           
  3501     00BE                     xtoa@d:	
  3502                           ; 2 bytes @ 0x16
  3503                           
  3504                           
  3505                           ; 2 bytes @ 0x16
  3506     00BE                     	ds	1
  3507     00BF                     memcpy@tmp:
  3508                           
  3509                           ; 1 bytes @ 0x17
  3510     00BF                     	ds	1
  3511     00C0                     ?_GenericQueue_Remove:
  3512     00C0                     ?_GenericQueue_Enqueue:	
  3513                           ; 1 bytes @ 0x18
  3514                           
  3515     00C0                     ?_GenericQueue_CopyToArray:	
  3516                           ; 1 bytes @ 0x18
  3517                           
  3518     00C0                     ?_GenericQueue_Dequeue:	
  3519                           ; 1 bytes @ 0x18
  3520                           
  3521     00C0                     ??_xtoa:	
  3522                           ; 1 bytes @ 0x18
  3523                           
  3524     00C0                     GenericQueue_Contains@item:	
  3525                           ; 1 bytes @ 0x18
  3526                           
  3527     00C0                     GenericQueue_Enqueue@q:	
  3528                           ; 1 bytes @ 0x18
  3529                           
  3530     00C0                     GenericQueue_Dequeue@q:	
  3531                           ; 2 bytes @ 0x18
  3532                           
  3533     00C0                     GenericQueue_Remove@q:	
  3534                           ; 2 bytes @ 0x18
  3535                           
  3536     00C0                     GenericQueue_CopyToArray@q:	
  3537                           ; 2 bytes @ 0x18
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x18
  3541     00C0                     	ds	1
  3542     00C1                     ??_GenericQueue_Contains:
  3543     00C1                     xtoa@fp:	
  3544                           ; 1 bytes @ 0x19
  3545                           
  3546                           
  3547                           ; 1 bytes @ 0x19
  3548     00C1                     	ds	1
  3549     00C2                     GenericQueue_Dequeue@item:
  3550     00C2                     GenericQueue_Remove@item:	
  3551                           ; 1 bytes @ 0x1A
  3552                           
  3553     00C2                     GenericQueue_CopyToArray@array:	
  3554                           ; 1 bytes @ 0x1A
  3555                           
  3556     00C2                     xtoa@p:	
  3557                           ; 1 bytes @ 0x1A
  3558                           
  3559     00C2                     GenericQueue_Enqueue@item:	
  3560                           ; 1 bytes @ 0x1A
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x1A
  3564     00C2                     	ds	1
  3565     00C3                     ??_GenericQueue_Remove:
  3566     00C3                     ??_GenericQueue_CopyToArray:	
  3567                           ; 1 bytes @ 0x1B
  3568                           
  3569     00C3                     ??_GenericQueue_Dequeue:	
  3570                           ; 1 bytes @ 0x1B
  3571                           
  3572     00C3                     xtoa@w:	
  3573                           ; 1 bytes @ 0x1B
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x1B
  3577     00C3                     	ds	1
  3578     00C4                     ??_GenericQueue_Enqueue:
  3579                           
  3580                           ; 1 bytes @ 0x1C
  3581     00C4                     	ds	1
  3582     00C5                     GenericQueue_Contains@i:
  3583     00C5                     xtoa@c:	
  3584                           ; 1 bytes @ 0x1D
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0x1D
  3588     00C5                     	ds	1
  3589     00C6                     xtoa@i:
  3590                           
  3591                           ; 2 bytes @ 0x1E
  3592     00C6                     	ds	1
  3593     00C7                     ??_PS2Keyboard_GetScanCode:
  3594     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3595                           ; 1 bytes @ 0x1F
  3596                           
  3597     00C7                     GenericQueue_Remove@i:	
  3598                           ; 1 bytes @ 0x1F
  3599                           
  3600     00C7                     GenericQueue_CopyToArray@index:	
  3601                           ; 1 bytes @ 0x1F
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x1F
  3605     00C7                     	ds	1
  3606     00C8                     ?_vfpfcnvrt:
  3607     00C8                     PS2Keyboard_GetScanCode@ret:	
  3608                           ; 2 bytes @ 0x20
  3609                           
  3610     00C8                     GenericQueue_Remove@j:	
  3611                           ; 1 bytes @ 0x20
  3612                           
  3613     00C8                     GenericQueue_CopyToArray@count:	
  3614                           ; 1 bytes @ 0x20
  3615                           
  3616     00C8                     vfpfcnvrt@fmt:	
  3617                           ; 1 bytes @ 0x20
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x20
  3621     00C8                     	ds	1
  3622     00C9                     ??_APP_KeyboardTasks:
  3623     00C9                     vfpfcnvrt@ap:	
  3624                           ; 1 bytes @ 0x21
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x21
  3628     00C9                     	ds	1
  3629     00CA                     ??_vfpfcnvrt:
  3630                           
  3631                           ; 1 bytes @ 0x22
  3632     00CA                     	ds	1
  3633     00CB                     APP_KeyboardTasks@usbHidCode:
  3634                           
  3635                           ; 1 bytes @ 0x23
  3636     00CB                     	ds	1
  3637     00CC                     APP_KeyboardTasks@usbHidCode_2877:
  3638                           
  3639                           ; 1 bytes @ 0x24
  3640     00CC                     	ds	1
  3641     00CD                     APP_KeyboardTasks@needToSendNewReportPacket:
  3642                           
  3643                           ; 1 bytes @ 0x25
  3644     00CD                     	ds	1
  3645     00CE                     APP_KeyboardTasks@usbHidCode_2876:
  3646     00CE                     vfpfcnvrt@convarg:	
  3647                           ; 1 bytes @ 0x26
  3648                           
  3649                           
  3650                           ; 4 bytes @ 0x26
  3651     00CE                     	ds	1
  3652     00CF                     APP_KeyboardTasks@usbHidCode_2878:
  3653                           
  3654                           ; 1 bytes @ 0x27
  3655     00CF                     	ds	1
  3656     00D0                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3657                           
  3658                           ; 2 bytes @ 0x28
  3659     00D0                     	ds	2
  3660     00D2                     APP_KeyboardTasks@i:
  3661     00D2                     vfpfcnvrt@c:	
  3662                           ; 1 bytes @ 0x2A
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x2A
  3666     00D2                     	ds	1
  3667     00D3                     APP_KeyboardTasks@scanCode:
  3668     00D3                     vfpfcnvrt@done:	
  3669                           ; 1 bytes @ 0x2B
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x2B
  3673     00D3                     	ds	1
  3674     00D4                     vfpfcnvrt@cp:
  3675                           
  3676                           ; 2 bytes @ 0x2C
  3677     00D4                     	ds	2
  3678     00D6                     vfpfcnvrt@fp:
  3679                           
  3680                           ; 1 bytes @ 0x2E
  3681     00D6                     	ds	1
  3682     00D7                     ?_vfprintf:
  3683     00D7                     vfprintf@fmt:	
  3684                           ; 2 bytes @ 0x2F
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0x2F
  3688     00D7                     	ds	2
  3689     00D9                     vfprintf@ap:
  3690                           
  3691                           ; 1 bytes @ 0x31
  3692     00D9                     	ds	1
  3693     00DA                     ??_vfprintf:
  3694                           
  3695                           ; 1 bytes @ 0x32
  3696     00DA                     	ds	1
  3697     00DB                     vfprintf@fp:
  3698                           
  3699                           ; 1 bytes @ 0x33
  3700     00DB                     	ds	1
  3701     00DC                     vfprintf@cfmt:
  3702                           
  3703                           ; 2 bytes @ 0x34
  3704     00DC                     	ds	2
  3705     00DE                     ?_snprintf:
  3706     00DE                     snprintf@n:	
  3707                           ; 2 bytes @ 0x36
  3708                           
  3709                           
  3710                           ; 2 bytes @ 0x36
  3711     00DE                     	ds	2
  3712     00E0                     snprintf@fmt:
  3713                           
  3714                           ; 2 bytes @ 0x38
  3715     00E0                     	ds	6
  3716     00E6                     ??_snprintf:
  3717                           
  3718                           ; 1 bytes @ 0x3E
  3719     00E6                     	ds	3
  3720     00E9                     ??_main:
  3721                           
  3722                           ; 1 bytes @ 0x41
  3723     00E9                     	ds	2
  3724                           
  3725                           	psect	cstackCOMMON
  3726     0070                     __pcstackCOMMON:
  3727     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3728     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737     0070                     ?_IOCAF4_ISR:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740     0070                     ?_IOCAF5_ISR:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743     0070                     ?_OSCILLATOR_Initialize:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746     0070                     ?_WDT_Initialize:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749     0070                     ?_TMR2_Initialize:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752     0070                     ?_EUSART_Initialize:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755     0070                     ?_USBDeviceInit:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758     0070                     ?_USBDeviceAttach:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761     0070                     ?_USBDeviceTasks:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764     0070                     ?_TMR2_ISR:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767     0070                     ??_TMR2_ISR:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770     0070                     ?_TMR2_DefaultInterruptHandler:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773     0070                     ??_TMR2_DefaultInterruptHandler:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776     0070                     ?_EUSART_Receive_ISR:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779     0070                     ?_EUSART_Transmit_ISR:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782     0070                     ??_EUSART_Transmit_ISR:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797     0070                     ?_EUSART_DefaultErrorHandler:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800     0070                     ?_EUSART_RxDataHandler:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803     0070                     ??_EUSART_RxDataHandler:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806     0070                     ?_USBWakeFromSuspend:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809     0070                     ?_USBSuspend:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812     0070                     ?_USBIncrement1msInternalTimers:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815     0070                     ??_USBIncrement1msInternalTimers:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818     0070                     ?_USBCtrlEPAllowStatusStage:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821     0070                     ??_USBCtrlEPAllowStatusStage:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824     0070                     ?_USBStallHandler:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827     0070                     ??_USBStallHandler:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830     0070                     ?_USBCtrlEPService:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833     0070                     ?_USBConfigureEndpoint:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836     0070                     ?_USBCtrlTrfTxService:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839     0070                     ??_USBCtrlTrfTxService:	
  3840                           ; 1 bytes @ 0x0
  3841                           
  3842     0070                     ?_USBCtrlTrfSetupHandler:	
  3843                           ; 1 bytes @ 0x0
  3844                           
  3845     0070                     ?_USBCtrlTrfOutHandler:	
  3846                           ; 1 bytes @ 0x0
  3847                           
  3848     0070                     ?_USBCtrlTrfInHandler:	
  3849                           ; 1 bytes @ 0x0
  3850                           
  3851     0070                     ?_USBCheckStdRequest:	
  3852                           ; 1 bytes @ 0x0
  3853                           
  3854     0070                     ?_USBStdFeatureReqHandler:	
  3855                           ; 1 bytes @ 0x0
  3856                           
  3857     0070                     ?_USBHIDCBSetReportHandler:	
  3858                           ; 1 bytes @ 0x0
  3859                           
  3860     0070                     ??_USBHIDCBSetReportHandler:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866     0070                     ?_APP_KeyboardInit:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869     0070                     ?_SysTime_Init:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872     0070                     ?_PS2Keyboard_Init:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875     0070                     ?_PS2Keyboard_GetScanCode:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878     0070                     ?_APP_KeyboardTasks:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884     0070                     ?_APP_KeyboardProcessOutputReport:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890     0070                     ?_PS2Keyboard_DataInterrupt:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893     0070                     ?_SysTimeInterrupt:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896     0070                     ??_SysTimeInterrupt:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899     0070                     ?_putch:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902     0070                     ?_PIN_MANAGER_Initialize:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905     0070                     ?_PIN_MANAGER_IOC:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908     0070                     ?_SYSTEM_Initialize:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911     0070                     ?_INTERRUPT_InterruptManager:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914     0070                     ?_TMR2_StartTimer:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917     0070                     ?_EUSART_is_tx_ready:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920     0070                     ?_EUSART_Write:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923     0070                     ?_USBCtrlEPAllowDataStage:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926     0070                     ?_USBCtrlEPServiceComplete:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929     0070                     ?_USBCtrlTrfRxService:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932     0070                     ?_USBStdSetCfgHandler:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935     0070                     ?_USBStdGetDscHandler:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938     0070                     ??_USBStdGetDscHandler:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941     0070                     ?_USBStdGetStatusHandler:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944     0070                     ??_USBStdGetStatusHandler:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947     0070                     ?_USBCheckHIDRequest:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950     0070                     ?_USBHIDCBSetReportComplete:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953     0070                     ??_USBHIDCBSetReportComplete:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956     0070                     ?i1_USBDeviceInit:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959     0070                     ??i1_USBDeviceInit:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965     0070                     ??i1_APP_KeyboardProcessOutputReport:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968     0070                     ?i1_GenericQueue_Init:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971     0070                     ?_main:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974     0070                     ?i1_USBTransferOnePacket:	
  3975                           ; 2 bytes @ 0x0
  3976                           
  3977     0070                     ?i1_GenericQueue_IsFull:	
  3978                           ; 2 bytes @ 0x0
  3979                           
  3980     0070                     ?i1___wmul:	
  3981                           ; 2 bytes @ 0x0
  3982                           
  3983     0070                     ?i1___awmod:	
  3984                           ; 2 bytes @ 0x0
  3985                           
  3986     0070                     ?i1_memset:	
  3987                           ; 2 bytes @ 0x0
  3988                           
  3989     0070                     ?_SysTime_GetCurrentTimeMs:	
  3990                           ; 2 bytes @ 0x0
  3991                           
  3992     0070                     USBConfigureEndpoint@direction:	
  3993                           ; 4 bytes @ 0x0
  3994                           
  3995     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3996                           ; 1 bytes @ 0x0
  3997                           
  3998     0070                     putch@c:	
  3999                           ; 1 bytes @ 0x0
  4000                           
  4001     0070                     i1USBTransferOnePacket@dir:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004     0070                     USBStdGetStatusHandler@p:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007     0070                     i1GenericQueue_Init@q:	
  4008                           ; 2 bytes @ 0x0
  4009                           
  4010     0070                     i1GenericQueue_IsFull@q:	
  4011                           ; 2 bytes @ 0x0
  4012                           
  4013     0070                     i1___wmul@multiplier:	
  4014                           ; 2 bytes @ 0x0
  4015                           
  4016     0070                     i1___awmod@divisor:	
  4017                           ; 2 bytes @ 0x0
  4018                           
  4019     0070                     i1memset@dest:	
  4020                           ; 2 bytes @ 0x0
  4021                           
  4022                           
  4023                           ; 2 bytes @ 0x0
  4024     0070                     	ds	1
  4025     0071                     ??_EUSART_Receive_ISR:
  4026     0071                     ??_EUSART_DefaultErrorHandler:	
  4027                           ; 1 bytes @ 0x1
  4028                           
  4029     0071                     ??_USBConfigureEndpoint:	
  4030                           ; 1 bytes @ 0x1
  4031                           
  4032     0071                     ??_USBHIDCBSetIdleRateHandler:	
  4033                           ; 1 bytes @ 0x1
  4034                           
  4035     0071                     i1USBTransferOnePacket@data:	
  4036                           ; 1 bytes @ 0x1
  4037                           
  4038                           
  4039                           ; 2 bytes @ 0x1
  4040     0071                     	ds	1
  4041     0072                     ??i1_GenericQueue_IsFull:
  4042     0072                     USBCtrlTrfTxService@byteToSend:	
  4043                           ; 1 bytes @ 0x2
  4044                           
  4045     0072                     i1GenericQueue_Init@element_size:	
  4046                           ; 1 bytes @ 0x2
  4047                           
  4048     0072                     i1___wmul@multiplicand:	
  4049                           ; 2 bytes @ 0x2
  4050                           
  4051     0072                     i1___awmod@dividend:	
  4052                           ; 2 bytes @ 0x2
  4053                           
  4054     0072                     i1memset@c:	
  4055                           ; 2 bytes @ 0x2
  4056                           
  4057                           
  4058                           ; 2 bytes @ 0x2
  4059     0072                     	ds	1
  4060     0073                     ??_USBCtrlTrfInHandler:
  4061     0073                     ??_USBCtrlEPAllowDataStage:	
  4062                           ; 1 bytes @ 0x3
  4063                           
  4064     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  4065                           ; 1 bytes @ 0x3
  4066                           
  4067     0073                     i1USBTransferOnePacket@len:	
  4068                           ; 1 bytes @ 0x3
  4069                           
  4070                           
  4071                           ; 1 bytes @ 0x3
  4072     0073                     	ds	1
  4073     0074                     ??_IOCAF5_ISR:
  4074     0074                     ??_PS2Keyboard_DataInterrupt:	
  4075                           ; 1 bytes @ 0x4
  4076                           
  4077     0074                     ??_SysTime_GetCurrentTimeMs:	
  4078                           ; 1 bytes @ 0x4
  4079                           
  4080     0074                     ??_USBCtrlTrfRxService:	
  4081                           ; 1 bytes @ 0x4
  4082                           
  4083     0074                     ??_USBCheckHIDRequest:	
  4084                           ; 1 bytes @ 0x4
  4085                           
  4086     0074                     ??i1_USBTransferOnePacket:	
  4087                           ; 1 bytes @ 0x4
  4088                           
  4089     0074                     ??i1_GenericQueue_Init:	
  4090                           ; 1 bytes @ 0x4
  4091                           
  4092     0074                     ??i1___wmul:	
  4093                           ; 1 bytes @ 0x4
  4094                           
  4095     0074                     ??i1___awmod:	
  4096                           ; 1 bytes @ 0x4
  4097                           
  4098     0074                     i1USBDeviceInit@p:	
  4099                           ; 1 bytes @ 0x4
  4100                           
  4101     0074                     i1___wmul@product:	
  4102                           ; 2 bytes @ 0x4
  4103                           
  4104     0074                     i1memset@n:	
  4105                           ; 2 bytes @ 0x4
  4106                           
  4107                           
  4108                           ; 2 bytes @ 0x4
  4109     0074                     	ds	1
  4110     0075                     USBConfigureEndpoint@EPNum:
  4111     0075                     i1___awmod@counter:	
  4112                           ; 1 bytes @ 0x5
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x5
  4116     0075                     	ds	1
  4117     0076                     ??i1_memset:
  4118     0076                     ?i1_memcpy:	
  4119                           ; 1 bytes @ 0x6
  4120                           
  4121     0076                     USBConfigureEndpoint@handle:	
  4122                           ; 2 bytes @ 0x6
  4123                           
  4124     0076                     i1USBDeviceInit@i_1369:	
  4125                           ; 1 bytes @ 0x6
  4126                           
  4127     0076                     i1___awmod@sign:	
  4128                           ; 1 bytes @ 0x6
  4129                           
  4130     0076                     i1memcpy@d1:	
  4131                           ; 1 bytes @ 0x6
  4132                           
  4133     0076                     i1memset@p:	
  4134                           ; 2 bytes @ 0x6
  4135                           
  4136                           
  4137                           ; 2 bytes @ 0x6
  4138     0076                     	ds	1
  4139     0077                     ?_USBEnableEndpoint:
  4140     0077                     ??_USBCtrlEPServiceComplete:	
  4141                           ; 1 bytes @ 0x7
  4142                           
  4143     0077                     USBEnableEndpoint@options:	
  4144                           ; 1 bytes @ 0x7
  4145                           
  4146     0077                     USBCtrlTrfInHandler@lastDTS:	
  4147                           ; 1 bytes @ 0x7
  4148                           
  4149     0077                     i1USBDeviceInit@i:	
  4150                           ; 1 bytes @ 0x7
  4151                           
  4152                           
  4153                           ; 1 bytes @ 0x7
  4154     0077                     	ds	1
  4155     0078                     ??_USBEnableEndpoint:
  4156     0078                     USBCtrlTrfRxService@i:	
  4157                           ; 1 bytes @ 0x8
  4158                           
  4159     0078                     i1USBTransferOnePacket@ep:	
  4160                           ; 1 bytes @ 0x8
  4161                           
  4162     0078                     i1memcpy@s1:	
  4163                           ; 1 bytes @ 0x8
  4164                           
  4165                           
  4166                           ; 2 bytes @ 0x8
  4167     0078                     	ds	1
  4168     0079                     USBCtrlTrfRxService@byteToRead:
  4169     0079                     i1USBTransferOnePacket@handle:	
  4170                           ; 1 bytes @ 0x9
  4171                           
  4172                           
  4173                           ; 2 bytes @ 0x9
  4174     0079                     	ds	1
  4175     007A                     ??_USBCtrlTrfOutHandler:
  4176     007A                     USBEnableEndpoint@p:	
  4177                           ; 1 bytes @ 0xA
  4178                           
  4179     007A                     i1memcpy@n:	
  4180                           ; 2 bytes @ 0xA
  4181                           
  4182                           
  4183                           ; 2 bytes @ 0xA
  4184     007A                     	ds	2
  4185     007C                     ??_IOCAF4_ISR:
  4186     007C                     ??_PIN_MANAGER_IOC:	
  4187                           ; 1 bytes @ 0xC
  4188                           
  4189     007C                     ??i1_memcpy:	
  4190                           ; 1 bytes @ 0xC
  4191                           
  4192     007C                     USBEnableEndpoint@ep:	
  4193                           ; 1 bytes @ 0xC
  4194                           
  4195                           
  4196                           ; 1 bytes @ 0xC
  4197     007C                     	ds	1
  4198     007D                     ??_USBWakeFromSuspend:
  4199     007D                     ??_USBSuspend:	
  4200                           ; 1 bytes @ 0xD
  4201                           
  4202     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4203                           ; 1 bytes @ 0xD
  4204                           
  4205     007D                     ??_APP_KeyboardInit:	
  4206                           ; 1 bytes @ 0xD
  4207                           
  4208     007D                     ??_USBStdSetCfgHandler:	
  4209                           ; 1 bytes @ 0xD
  4210                           
  4211                           
  4212                           ; 1 bytes @ 0xD
  4213     007D                     	ds	1
  4214     007E                     ??_USBCheckStdRequest:
  4215     007E                     ??_INTERRUPT_InterruptManager:	
  4216                           ; 1 bytes @ 0xE
  4217                           
  4218                           
  4219                           	psect	cstackBANK0
  4220     0050                     __pcstackBANK0:	
  4221                           ; 1 bytes @ 0xE
  4222                           
  4223     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4224     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227     0050                     i1memcpy@d:	
  4228                           ; 2 bytes @ 0x0
  4229                           
  4230                           
  4231                           ; 2 bytes @ 0x0
  4232     0050                     	ds	2
  4233     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4234     0052                     i1memcpy@s:	
  4235                           ; 2 bytes @ 0x2
  4236                           
  4237                           
  4238                           ; 2 bytes @ 0x2
  4239     0052                     	ds	2
  4240     0054                     i1memcpy@tmp:
  4241     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4242                           ; 1 bytes @ 0x4
  4243                           
  4244                           
  4245                           ; 2 bytes @ 0x4
  4246     0054                     	ds	1
  4247     0055                     ?i1_GenericQueue_Enqueue:
  4248     0055                     i1GenericQueue_Enqueue@q:	
  4249                           ; 1 bytes @ 0x5
  4250                           
  4251                           
  4252                           ; 2 bytes @ 0x5
  4253     0055                     	ds	1
  4254     0056                     ??_USBStdFeatureReqHandler:
  4255     0056                     USBStdSetCfgHandler@p:	
  4256                           ; 1 bytes @ 0x6
  4257                           
  4258                           
  4259                           ; 2 bytes @ 0x6
  4260     0056                     	ds	1
  4261     0057                     i1GenericQueue_Enqueue@item:
  4262                           
  4263                           ; 2 bytes @ 0x7
  4264     0057                     	ds	1
  4265     0058                     USBStdSetCfgHandler@i_2097:
  4266     0058                     USBStdFeatureReqHandler@pUEP:	
  4267                           ; 1 bytes @ 0x8
  4268                           
  4269                           
  4270                           ; 2 bytes @ 0x8
  4271     0058                     	ds	1
  4272     0059                     ??i1_GenericQueue_Enqueue:
  4273     0059                     USBStdSetCfgHandler@i:	
  4274                           ; 1 bytes @ 0x9
  4275                           
  4276                           
  4277                           ; 1 bytes @ 0x9
  4278     0059                     	ds	1
  4279     005A                     USBStdFeatureReqHandler@current_ep_data:
  4280                           
  4281                           ; 1 bytes @ 0xA
  4282     005A                     	ds	1
  4283     005B                     USBStdFeatureReqHandler@p:
  4284                           
  4285                           ; 2 bytes @ 0xB
  4286     005B                     	ds	1
  4287     005C                     ??_PS2Keyboard_ClockInterrupt:
  4288                           
  4289                           ; 1 bytes @ 0xC
  4290     005C                     	ds	1
  4291     005D                     ??_USBCtrlTrfSetupHandler:
  4292                           
  4293                           ; 1 bytes @ 0xD
  4294     005D                     	ds	1
  4295     005E                     ??_USBCtrlEPService:
  4296                           
  4297                           ; 1 bytes @ 0xE
  4298     005E                     	ds	1
  4299     005F                     ??_USBDeviceTasks:
  4300                           
  4301                           ; 1 bytes @ 0xF
  4302     005F                     	ds	1
  4303     0060                     USBDeviceTasks@i:
  4304                           
  4305                           ; 1 bytes @ 0x10
  4306     0060                     	ds	1
  4307                           
  4308                           	psect	maintext
  4309     0BA9                     __pmaintext:	
  4310 ;;
  4311 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4312 ;;
  4313 ;; *************** function _main *****************
  4314 ;; Defined at:
  4315 ;;		line 12 in file "main.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  scanCodeStr    10   17[BANK2 ] unsigned char [10]
  4320 ;;  scanCode        3   33[BANK2 ] struct PS2ScanCode
  4321 ;;  hndlScanCode    1   32[BANK2 ] PTR struct PS2ScanCode
  4322 ;;		 -> main@scanCode(3), NULL(0), 
  4323 ;;  i               1   31[BANK2 ] unsigned char 
  4324 ;;  strLen          1   30[BANK2 ] unsigned char 
  4325 ;;  scanCodeVali    1   29[BANK2 ] _Bool 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  2  840[None  ] int 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : B1F/0
  4332 ;;		On exit  : 2/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Locals:         0       0       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Totals:         0       0       2      19       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;Total ram usage:       21 bytes
  4340 ;; Hardware stack levels required when called: 18
  4341 ;; This function calls:
  4342 ;;		_APP_KeyboardTasks
  4343 ;;		_EUSART_Write
  4344 ;;		_EUSART_is_tx_ready
  4345 ;;		_PS2Keyboard_GetScanCode
  4346 ;;		_PS2Keyboard_Init
  4347 ;;		_SYSTEM_Initialize
  4348 ;;		_SysTime_Init
  4349 ;;		_snprintf
  4350 ;; This function is called by:
  4351 ;;		Startup code after reset
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355     0BA9                     _main:	
  4356                           ;psect for function _main
  4357                           
  4358                           
  4359                           ;main.c: 13:     SYSTEM_Initialize();
  4360                           
  4361                           ;incstack = 0
  4362 ;; hardware stack exceeded
  4363                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4364     0BA9  319D  252D  318B   	fcall	_SYSTEM_Initialize
  4365                           
  4366                           ;main.c: 14:     SysTime_Init();
  4367     0BAC  319C  245B  318B   	fcall	_SysTime_Init
  4368                           
  4369                           ;main.c: 15:     PS2Keyboard_Init();
  4370     0BAF  319E  261E  318B   	fcall	_PS2Keyboard_Init
  4371                           
  4372                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4373     0BB2  178B               	bsf	11,7	;volatile
  4374                           
  4375                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4376     0BB3  170B               	bsf	11,6	;volatile
  4377                           
  4378                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4379     0BB4  0844               	movf	main@F3438^(0+384),w
  4380     0BB5  0022               	movlb	2	; select bank2
  4381     0BB6  00ED               	movwf	main@scanCode^(0+256)
  4382     0BB7  0023               	movlb	3	; select bank3
  4383     0BB8  0845               	movf	(main@F3438+1)^(0+384),w
  4384     0BB9  0022               	movlb	2	; select bank2
  4385     0BBA  00EE               	movwf	(main@scanCode+1)^(0+256)
  4386     0BBB  0023               	movlb	3	; select bank3
  4387     0BBC  0846               	movf	(main@F3438+2)^(0+384),w
  4388     0BBD  0022               	movlb	2	; select bank2
  4389     0BBE  00EF               	movwf	(main@scanCode+2)^(0+256)
  4390                           
  4391                           ;main.c: 34:     char scanCodeStr[10] = "";
  4392     0BBF  305D               	movlw	low main@scanCodeStr
  4393     0BC0  0086               	movwf	6
  4394     0BC1  3001               	movlw	high main@scanCodeStr
  4395     0BC2  0087               	movwf	7
  4396     0BC3  300A               	movlw	10
  4397     0BC4  0021               	movlb	1	; select bank1
  4398     0BC5  00E9               	movwf	??_main^(0+128)
  4399     0BC6  3000               	movlw	0
  4400     0BC7                     u6820:
  4401     0BC7  001E               	movwi fsr1++
  4402     0BC8  0BE9               	decfsz	??_main^(0+128),f
  4403     0BC9  2BC7               	goto	u6820
  4404     0BCA                     l6738:
  4405                           
  4406                           ;main.c: 38:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4407     0BCA  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4408     0BCB  319E  2639  318B   	fcall	_PS2Keyboard_GetScanCode
  4409     0BCE  0022               	movlb	2	; select bank2
  4410     0BCF  00E9               	movwf	main@scanCodeValid^(0+256)
  4411                           
  4412                           ;main.c: 39:         if(scanCodeValid) {
  4413     0BD0  0869               	movf	main@scanCodeValid^(0+256),w
  4414     0BD1  1903               	btfsc	3,2
  4415     0BD2  2BD6               	goto	l6744
  4416                           
  4417                           ;main.c: 40:             hndlScanCode = &scanCode;
  4418     0BD3  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4419     0BD4  00EC               	movwf	main@hndlScanCode^(0+256)
  4420                           
  4421                           ;main.c: 41:         } else {
  4422     0BD5  2BD7               	goto	l6746
  4423     0BD6                     l6744:
  4424                           
  4425                           ;main.c: 42:             hndlScanCode = ((void*)0);
  4426     0BD6  01EC               	clrf	main@hndlScanCode^(0+256)
  4427     0BD7                     l6746:
  4428                           
  4429                           ;main.c: 44:         if(hndlScanCode != ((void*)0)) {
  4430     0BD7  086C               	movf	main@hndlScanCode^(0+256),w
  4431     0BD8  1903               	btfsc	3,2
  4432     0BD9  2C28               	goto	l6766
  4433                           
  4434                           ;main.c: 45:             strLen = snprintf(scanCodeStr, sizeof(scanCodeStr), "%c%02X\r\n
      +                          ", hndlScanCode->isBreak ? 'b' : ' ', hndlScanCode->value);
  4435     0BDA  086C               	movf	main@hndlScanCode^(0+256),w
  4436     0BDB  3E02               	addlw	2
  4437     0BDC  0086               	movwf	6
  4438     0BDD  3001               	movlw	1	; select bank2/3
  4439     0BDE  0087               	movwf	7
  4440     0BDF  0801               	movf	1,w
  4441     0BE0  1D03               	btfss	3,2
  4442     0BE1  2BE4               	goto	l6752
  4443     0BE2  3020               	movlw	32
  4444     0BE3  2BE5               	goto	L1
  4445     0BE4                     l6752:
  4446     0BE4  3062               	movlw	98
  4447     0BE5                     L1:
  4448     0BE5  00E7               	movwf	_main$2651^(0+256)
  4449     0BE6  3000               	movlw	0
  4450     0BE7  00E8               	movwf	(_main$2651^(0+256)+1)
  4451     0BE8  300A               	movlw	10
  4452     0BE9  0021               	movlb	1	; select bank1
  4453     0BEA  00DE               	movwf	snprintf@n^(0+128)
  4454     0BEB  3000               	movlw	0
  4455     0BEC  00DF               	movwf	(snprintf@n^(0+128)+1)
  4456     0BED  30CA               	movlw	low (STR_1| (0+32768))
  4457     0BEE  00E0               	movwf	snprintf@fmt^(0+128)
  4458     0BEF  3098               	movlw	high (STR_1| (0+32768))
  4459     0BF0  00E1               	movwf	(snprintf@fmt^(0+128)+1)
  4460     0BF1  0022               	movlb	2	; select bank2
  4461     0BF2  0868               	movf	(_main$2651+1)^(0+256),w
  4462     0BF3  0021               	movlb	1	; select bank1
  4463     0BF4  00E3               	movwf	((?_snprintf+1)^(0+128)+4)
  4464     0BF5  0022               	movlb	2	; select bank2
  4465     0BF6  0867               	movf	_main$2651^(0+256),w
  4466     0BF7  0021               	movlb	1	; select bank1
  4467     0BF8  00E2               	movwf	(?_snprintf^(0+128)+4)
  4468     0BF9  0022               	movlb	2	; select bank2
  4469     0BFA  086C               	movf	main@hndlScanCode^(0+256),w
  4470     0BFB  0086               	movwf	6
  4471     0BFC  3001               	movlw	1	; select bank2/3
  4472     0BFD  0087               	movwf	7
  4473     0BFE  0801               	movf	1,w
  4474     0BFF  0021               	movlb	1	; select bank1
  4475     0C00  00E9               	movwf	??_main^(0+128)
  4476     0C01  01EA               	clrf	(??_main^(0+128)+1)
  4477     0C02  0869               	movf	??_main^(0+128),w
  4478     0C03  00E4               	movwf	(?_snprintf^(0+128)+6)
  4479     0C04  086A               	movf	(??_main+1)^(0+128),w
  4480     0C05  00E5               	movwf	((?_snprintf+1)^(0+128)+6)
  4481     0C06  305D               	movlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4482     0C07  318C  242D  318B   	fcall	_snprintf
  4483     0C0A  085E               	movf	?_snprintf^(0+128),w
  4484     0C0B  0022               	movlb	2	; select bank2
  4485     0C0C  00EA               	movwf	main@strLen^(0+256)
  4486                           
  4487                           ;main.c: 46:             for(i = 0; i < strLen; i++) {
  4488     0C0D  01EB               	clrf	main@i^(0+256)
  4489     0C0E                     l6764:
  4490     0C0E  086A               	movf	main@strLen^(0+256),w
  4491     0C0F  026B               	subwf	main@i^(0+256),w
  4492     0C10  1803               	btfsc	3,0
  4493     0C11  2C28               	goto	l6766
  4494     0C12                     l6758:
  4495     0C12  319B  23F5  318B   	fcall	_EUSART_is_tx_ready
  4496     0C15  3A00               	xorlw	0
  4497     0C16  1903               	skipnz
  4498     0C17  2C12               	goto	l6758
  4499                           
  4500                           ;main.c: 48:                 EUSART_Write((uint8_t)scanCodeStr[i]);
  4501     0C18  0022               	movlb	2	; select bank2
  4502     0C19  086B               	movf	main@i^(0+256),w
  4503     0C1A  3E5D               	addlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4504     0C1B  0086               	movwf	6
  4505     0C1C  3001               	movlw	1	; select bank2/3
  4506     0C1D  0087               	movwf	7
  4507     0C1E  0801               	movf	1,w
  4508     0C1F  319F  2781  318B   	fcall	_EUSART_Write
  4509                           
  4510                           ;main.c: 49:             }
  4511     0C22  3001               	movlw	1
  4512     0C23  00E9               	movwf	??_main^(0+128)
  4513     0C24  0869               	movf	??_main^(0+128),w
  4514     0C25  0022               	movlb	2	; select bank2
  4515     0C26  07EB               	addwf	main@i^(0+256),f
  4516     0C27  2C0E               	goto	l6764
  4517     0C28                     l6766:
  4518                           
  4519                           ;main.c: 51:         APP_KeyboardTasks(hndlScanCode);
  4520     0C28  086C               	movf	main@hndlScanCode^(0+256),w
  4521     0C29  3180  207F  318B   	fcall	_APP_KeyboardTasks
  4522     0C2C  2BCA               	goto	l6738
  4523     0C2D                     __end_of_main:
  4524                           
  4525                           	psect	text1
  4526     0C2D                     __ptext1:	
  4527 ;; *************** function _snprintf *****************
  4528 ;; Defined at:
  4529 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_snprintf.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  s               1    wreg     PTR unsigned char 
  4532 ;;		 -> main@scanCodeStr(10), 
  4533 ;;  n               2   54[BANK1 ] unsigned int 
  4534 ;;  fmt             2   56[BANK1 ] PTR const unsigned char 
  4535 ;;		 -> STR_1(9), 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  s               1    2[BANK2 ] PTR unsigned char 
  4538 ;;		 -> main@scanCodeStr(10), 
  4539 ;;  f              11    6[BANK2 ] struct _IO_FILE
  4540 ;;  cnt             2    4[BANK2 ] int 
  4541 ;;  ap              1    3[BANK2 ] PTR void [1]
  4542 ;;		 -> ?_snprintf(2), 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2   54[BANK1 ] int 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 1F/1
  4549 ;;		On exit  : 1F/1
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4552 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Totals:         0       0      11      17       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;Total ram usage:       28 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 17
  4559 ;; This function calls:
  4560 ;;		_vfprintf
  4561 ;; This function is called by:
  4562 ;;		_main
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566     0C2D                     _snprintf:	
  4567                           ;psect for function _snprintf
  4568                           
  4569                           
  4570                           ;incstack = 0
  4571 ;; hardware stack exceeded
  4572                           ; Regs used in _snprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4573                           ;snprintf@s stored from wreg
  4574     0C2D  0022               	movlb	2	; select bank2
  4575     0C2E  00CE               	movwf	snprintf@s^(0+256)
  4576     0C2F  3080               	movlw	128
  4577     0C30  0021               	movlb	1	; select bank1
  4578     0C31  025F               	subwf	(snprintf@n+1)^(0+128),w
  4579     0C32  3000               	movlw	0
  4580     0C33  1903               	skipnz
  4581     0C34  025E               	subwf	snprintf@n^(0+128),w
  4582     0C35  1C03               	skipc
  4583     0C36  2C42               	goto	l5908
  4584     0C37  304B               	movlw	75
  4585     0C38  0023               	movlb	3	; select bank3
  4586     0C39  00CB               	movwf	_errno^(0+384)
  4587     0C3A  3000               	movlw	0
  4588     0C3B  00CC               	movwf	(_errno^(0+384)+1)
  4589     0C3C  30FF               	movlw	255
  4590     0C3D  0021               	movlb	1	; select bank1
  4591     0C3E  00DE               	movwf	?_snprintf^(0+128)
  4592     0C3F  30FF               	movlw	255
  4593     0C40  00DF               	movwf	(?_snprintf^(0+128)+1)
  4594     0C41  0008               	return
  4595     0C42                     l5908:
  4596     0C42  30E2               	movlw	(low ((?_snprintf| 0+4)))& (0+255)
  4597     0C43  0022               	movlb	2	; select bank2
  4598     0C44  00CF               	movwf	snprintf@ap^(0+256)
  4599     0C45  084E               	movf	snprintf@s^(0+256),w
  4600     0C46  00D2               	movwf	snprintf@f^(0+256)
  4601     0C47  3000               	movlw	0
  4602     0C48  0021               	movlb	1	; select bank1
  4603     0C49  025F               	subwf	(snprintf@n+1)^(0+128),w
  4604     0C4A  3002               	movlw	2
  4605     0C4B  1903               	skipnz
  4606     0C4C  025E               	subwf	snprintf@n^(0+128),w
  4607     0C4D  1C03               	skipc
  4608     0C4E  2C5B               	goto	l5914
  4609     0C4F  085E               	movf	snprintf@n^(0+128),w
  4610     0C50  3EFF               	addlw	255
  4611     0C51  0022               	movlb	2	; select bank2
  4612     0C52  00DB               	movwf	(snprintf@f^(0+256)+9)
  4613     0C53  30FF               	movlw	255
  4614     0C54  0021               	movlb	1	; select bank1
  4615     0C55  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4616     0C56  0022               	movlb	2	; select bank2
  4617     0C57  00DC               	movwf	((snprintf@f+1)^(0+256)+9)
  4618     0C58  01D4               	clrf	(snprintf@f^(0+256)+2)
  4619     0C59  01D5               	clrf	((snprintf@f+1)^(0+256)+2)
  4620     0C5A  2C64               	goto	l5916
  4621     0C5B                     l5914:
  4622     0C5B  3001               	movlw	1
  4623     0C5C  0022               	movlb	2	; select bank2
  4624     0C5D  00DB               	movwf	(snprintf@f^(0+256)+9)
  4625     0C5E  3000               	movlw	0
  4626     0C5F  00DC               	movwf	(snprintf@f^(0+256)+10)
  4627     0C60  3001               	movlw	1
  4628     0C61  00D4               	movwf	(snprintf@f^(0+256)+2)
  4629     0C62  3000               	movlw	0
  4630     0C63  00D5               	movwf	(snprintf@f^(0+256)+3)
  4631     0C64                     l5916:
  4632     0C64  0021               	movlb	1	; select bank1
  4633     0C65  0861               	movf	(snprintf@fmt+1)^(0+128),w
  4634     0C66  00D8               	movwf	(vfprintf@fmt+1)^(0+128)
  4635     0C67  0860               	movf	snprintf@fmt^(0+128),w
  4636     0C68  00D7               	movwf	vfprintf@fmt^(0+128)
  4637     0C69  304F               	movlw	(low (snprintf@ap| (0+256)))& (0+255)
  4638     0C6A  00D9               	movwf	vfprintf@ap^(0+128)
  4639     0C6B  3052               	movlw	(low (snprintf@f| (0+256)))& (0+255)
  4640     0C6C  319F  27A7  318C   	fcall	_vfprintf
  4641     0C6F  0858               	movf	(?_vfprintf+1)^(0+128),w
  4642     0C70  0022               	movlb	2	; select bank2
  4643     0C71  00D1               	movwf	(snprintf@cnt+1)^(0+256)
  4644     0C72  0021               	movlb	1	; select bank1
  4645     0C73  0857               	movf	?_vfprintf^(0+128),w
  4646     0C74  0022               	movlb	2	; select bank2
  4647     0C75  00D0               	movwf	snprintf@cnt^(0+256)
  4648     0C76  0021               	movlb	1	; select bank1
  4649     0C77  085E               	movf	snprintf@n^(0+128),w
  4650     0C78  045F               	iorwf	(snprintf@n+1)^(0+128),w
  4651     0C79  1903               	btfsc	3,2
  4652     0C7A  2CAD               	goto	l5930
  4653     0C7B  0022               	movlb	2	; select bank2
  4654     0C7C  1BD1               	btfsc	(snprintf@cnt+1)^(0+256),7
  4655     0C7D  2CAD               	goto	l5930
  4656     0C7E  0021               	movlb	1	; select bank1
  4657     0C7F  085E               	movf	snprintf@n^(0+128),w
  4658     0C80  3EFF               	addlw	255
  4659     0C81  00E6               	movwf	??_snprintf^(0+128)
  4660     0C82  30FF               	movlw	255
  4661     0C83  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4662     0C84  00E7               	movwf	(??_snprintf+1)^(0+128)
  4663     0C85  0022               	movlb	2	; select bank2
  4664     0C86  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4665     0C87  3A80               	xorlw	128
  4666     0C88  0021               	movlb	1	; select bank1
  4667     0C89  00E8               	movwf	(??_snprintf+2)^(0+128)
  4668     0C8A  0867               	movf	(??_snprintf+1)^(0+128),w
  4669     0C8B  3A80               	xorlw	128
  4670     0C8C  0268               	subwf	(??_snprintf+2)^(0+128),w
  4671     0C8D  1D03               	skipz
  4672     0C8E  2C92               	goto	u5395
  4673     0C8F  0866               	movf	??_snprintf^(0+128),w
  4674     0C90  0022               	movlb	2	; select bank2
  4675     0C91  0250               	subwf	snprintf@cnt^(0+256),w
  4676     0C92                     u5395:
  4677     0C92  1C03               	skipc
  4678     0C93  2C9F               	goto	l5926
  4679     0C94  0021               	movlb	1	; select bank1
  4680     0C95  085E               	movf	snprintf@n^(0+128),w
  4681     0C96  3EFF               	addlw	255
  4682     0C97  0022               	movlb	2	; select bank2
  4683     0C98  00CC               	movwf	_snprintf$3536^(0+256)
  4684     0C99  30FF               	movlw	255
  4685     0C9A  0021               	movlb	1	; select bank1
  4686     0C9B  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4687     0C9C  0022               	movlb	2	; select bank2
  4688     0C9D  00CD               	movwf	(_snprintf$3536+1)^(0+256)
  4689     0C9E  2CA4               	goto	l5928
  4690     0C9F                     l5926:
  4691     0C9F  0022               	movlb	2	; select bank2
  4692     0CA0  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4693     0CA1  00CD               	movwf	(_snprintf$3536+1)^(0+256)
  4694     0CA2  0850               	movf	snprintf@cnt^(0+256),w
  4695     0CA3  00CC               	movwf	_snprintf$3536^(0+256)
  4696     0CA4                     l5928:
  4697     0CA4  084C               	movf	_snprintf$3536^(0+256),w
  4698     0CA5  074E               	addwf	snprintf@s^(0+256),w
  4699     0CA6  0021               	movlb	1	; select bank1
  4700     0CA7  00E6               	movwf	??_snprintf^(0+128)
  4701     0CA8  0866               	movf	??_snprintf^(0+128),w
  4702     0CA9  0086               	movwf	6
  4703     0CAA  3001               	movlw	1	; select bank2/3
  4704     0CAB  0087               	movwf	7
  4705     0CAC  0181               	clrf	1
  4706     0CAD                     l5930:
  4707     0CAD  0022               	movlb	2	; select bank2
  4708     0CAE  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4709     0CAF  0021               	movlb	1	; select bank1
  4710     0CB0  00DF               	movwf	(?_snprintf+1)^(0+128)
  4711     0CB1  0022               	movlb	2	; select bank2
  4712     0CB2  0850               	movf	snprintf@cnt^(0+256),w
  4713     0CB3  0021               	movlb	1	; select bank1
  4714     0CB4  00DE               	movwf	?_snprintf^(0+128)
  4715     0CB5  0008               	return
  4716     0CB6                     __end_of_snprintf:
  4717                           
  4718                           	psect	text2
  4719     1FA7                     __ptext2:	
  4720 ;; *************** function _vfprintf *****************
  4721 ;; Defined at:
  4722 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  fp              1    wreg     PTR struct _IO_FILE
  4725 ;;		 -> snprintf@f(11), 
  4726 ;;  fmt             2   47[BANK1 ] PTR const unsigned char 
  4727 ;;		 -> STR_1(9), 
  4728 ;;  ap              1   49[BANK1 ] PTR PTR void 
  4729 ;;		 -> snprintf@ap(1), 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  fp              1   51[BANK1 ] PTR struct _IO_FILE
  4732 ;;		 -> snprintf@f(11), 
  4733 ;;  cfmt            2   52[BANK1 ] PTR unsigned char 
  4734 ;;		 -> STR_1(9), 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  2   47[BANK1 ] int 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 1F/1
  4741 ;;		On exit  : 1F/1
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:        7 bytes
  4749 ;; Hardware stack levels used: 1
  4750 ;; Hardware stack levels required when called: 16
  4751 ;; This function calls:
  4752 ;;		_vfpfcnvrt
  4753 ;; This function is called by:
  4754 ;;		_snprintf
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758     1FA7                     _vfprintf:	
  4759                           ;psect for function _vfprintf
  4760                           
  4761                           
  4762                           ;incstack = 0
  4763 ;; hardware stack exceeded
  4764                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4765                           ;vfprintf@fp stored from wreg
  4766     1FA7  00DB               	movwf	vfprintf@fp^(0+128)
  4767                           
  4768                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4769     1FA8  0858               	movf	(vfprintf@fmt+1)^(0+128),w
  4770     1FA9  00DD               	movwf	(vfprintf@cfmt+1)^(0+128)
  4771     1FAA  0857               	movf	vfprintf@fmt^(0+128),w
  4772     1FAB  00DC               	movwf	vfprintf@cfmt^(0+128)
  4773                           
  4774                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  4775     1FAC  0023               	movlb	3	; select bank3
  4776     1FAD  01C7               	clrf	_nout^(0+384)
  4777     1FAE  01C8               	clrf	(_nout+1)^(0+384)
  4778     1FAF                     l5610:	
  4779                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4780                           
  4781                           
  4782                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4783     1FAF  0021               	movlb	1	; select bank1
  4784     1FB0  085C               	movf	vfprintf@cfmt^(0+128),w
  4785     1FB1  0084               	movwf	4
  4786     1FB2  085D               	movf	(vfprintf@cfmt+1)^(0+128),w
  4787     1FB3  0085               	movwf	5
  4788     1FB4  0012               	moviw fsr0++
  4789     1FB5  1903               	btfsc	3,2
  4790     1FB6  2FC7               	goto	l5612
  4791                           
  4792                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  4793     1FB7  30DC               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4794     1FB8  00C8               	movwf	vfpfcnvrt@fmt^(0+128)
  4795     1FB9  0859               	movf	vfprintf@ap^(0+128),w
  4796     1FBA  00C9               	movwf	vfpfcnvrt@ap^(0+128)
  4797     1FBB  085B               	movf	vfprintf@fp^(0+128),w
  4798     1FBC  3184  24D5  319F   	fcall	_vfpfcnvrt
  4799     1FBF  0848               	movf	?_vfpfcnvrt^(0+128),w
  4800     1FC0  0023               	movlb	3	; select bank3
  4801     1FC1  07C7               	addwf	_nout^(0+384),f
  4802     1FC2  0021               	movlb	1	; select bank1
  4803     1FC3  0849               	movf	(?_vfpfcnvrt+1)^(0+128),w
  4804     1FC4  0023               	movlb	3	; select bank3
  4805     1FC5  3DC8               	addwfc	(_nout+1)^(0+384),f
  4806     1FC6  2FAF               	goto	l5610
  4807     1FC7                     l5612:
  4808                           
  4809                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  4810     1FC7  0023               	movlb	3	; select bank3
  4811     1FC8  0848               	movf	(_nout+1)^(0+384),w
  4812     1FC9  0021               	movlb	1	; select bank1
  4813     1FCA  00D8               	movwf	(?_vfprintf+1)^(0+128)
  4814     1FCB  0023               	movlb	3	; select bank3
  4815     1FCC  0847               	movf	_nout^(0+384),w
  4816     1FCD  0021               	movlb	1	; select bank1
  4817     1FCE  00D7               	movwf	?_vfprintf^(0+128)
  4818     1FCF  0008               	return
  4819     1FD0                     __end_of_vfprintf:
  4820                           
  4821                           	psect	text3
  4822     04D5                     __ptext3:	
  4823 ;; *************** function _vfpfcnvrt *****************
  4824 ;; Defined at:
  4825 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  fp              1    wreg     PTR struct _IO_FILE
  4828 ;;		 -> snprintf@f(11), 
  4829 ;;  fmt             1   32[BANK1 ] PTR PTR unsigned char 
  4830 ;;		 -> vfprintf@cfmt(2), 
  4831 ;;  ap              1   33[BANK1 ] PTR PTR void 
  4832 ;;		 -> snprintf@ap(1), 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  fp              1   46[BANK1 ] PTR struct _IO_FILE
  4835 ;;		 -> snprintf@f(11), 
  4836 ;;  convarg         4   38[BANK1 ] struct .
  4837 ;;  cp              2   44[BANK1 ] PTR unsigned char 
  4838 ;;		 -> STR_1(9), 
  4839 ;;  done            1   43[BANK1 ] _Bool 
  4840 ;;  c               1   42[BANK1 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  2   32[BANK1 ] int 
  4843 ;; Registers used:
  4844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 1F/1
  4847 ;;		On exit  : 1F/1
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4850 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;Total ram usage:       15 bytes
  4855 ;; Hardware stack levels used: 1
  4856 ;; Hardware stack levels required when called: 15
  4857 ;; This function calls:
  4858 ;;		_ctoa
  4859 ;;		_fputc
  4860 ;;		_read_prec_or_width
  4861 ;;		_xtoa
  4862 ;; This function is called by:
  4863 ;;		_vfprintf
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867     04D5                     _vfpfcnvrt:	
  4868                           ;psect for function _vfpfcnvrt
  4869                           
  4870                           
  4871                           ;incstack = 0
  4872 ;; hardware stack exceeded
  4873                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4874                           ;vfpfcnvrt@fp stored from wreg
  4875     04D5  00D6               	movwf	vfpfcnvrt@fp^(0+128)
  4876                           
  4877                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4878     04D6  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4879     04D7  0086               	movwf	6
  4880     04D8  0187               	clrf	7
  4881     04D9  3F40               	moviw [0]fsr1
  4882     04DA  00CA               	movwf	??_vfpfcnvrt^(0+128)
  4883     04DB  3F41               	moviw [1]fsr1
  4884     04DC  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4885     04DD  084A               	movf	??_vfpfcnvrt^(0+128),w
  4886     04DE  0084               	movwf	4
  4887     04DF  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4888     04E0  0085               	movwf	5
  4889     04E1  0012               	moviw fsr0++
  4890     04E2  3A25               	xorlw	37
  4891     04E3  1D03               	btfss	3,2
  4892     04E4  2DAB               	goto	l5202
  4893                           
  4894                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4895     04E5  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4896     04E6  0086               	movwf	6
  4897     04E7  0187               	clrf	7
  4898     04E8  3001               	movlw	1
  4899     04E9  0781               	addwf	1,f
  4900     04EA  3141               	addfsr 1,1
  4901     04EB  1803               	skipnc
  4902     04EC  0A81               	incf	1,f
  4903                           
  4904                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4905     04ED  0022               	movlb	2	; select bank2
  4906     04EE  01AC               	clrf	_width^(0+256)
  4907     04EF  01AD               	clrf	(_width+1)^(0+256)
  4908     04F0  1003               	clrc
  4909     04F1  3000               	movlw	0
  4910     04F2  1803               	btfsc	3,0
  4911     04F3  3001               	movlw	1
  4912     04F4  00B4               	movwf	_flags^(0+256)
  4913                           
  4914                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4915     04F5  30FF               	movlw	255
  4916     04F6  0023               	movlb	3	; select bank3
  4917     04F7  00C9               	movwf	_prec^(0+384)
  4918     04F8  30FF               	movlw	255
  4919     04F9  00CA               	movwf	(_prec^(0+384)+1)
  4920                           
  4921                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4922     04FA  0021               	movlb	1	; select bank1
  4923     04FB  01D3               	clrf	vfpfcnvrt@done^(0+128)
  4924                           
  4925                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4926     04FC  2D0B               	goto	l5160
  4927     04FD                     l1801:	
  4928                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  4929                           
  4930                           
  4931                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4932     04FD  0022               	movlb	2	; select bank2
  4933     04FE  14B4               	bsf	_flags^(0+256),1
  4934                           
  4935                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4936     04FF  0021               	movlb	1	; select bank1
  4937     0500  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4938     0501  0086               	movwf	6
  4939     0502  0187               	clrf	7
  4940     0503  3001               	movlw	1
  4941     0504  0781               	addwf	1,f
  4942     0505  3141               	addfsr 1,1
  4943     0506  1803               	skipnc
  4944     0507  0A81               	incf	1,f
  4945                           
  4946                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4947     0508  2D0B               	goto	l5160
  4948     0509                     l1803:	
  4949                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  4950                           
  4951                           
  4952                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4953     0509  01D3               	clrf	vfpfcnvrt@done^(0+128)
  4954     050A  0AD3               	incf	vfpfcnvrt@done^(0+128),f
  4955     050B                     l5160:	
  4956                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4957                           
  4958                           
  4959                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4960     050B  0853               	movf	vfpfcnvrt@done^(0+128),w
  4961     050C  1D03               	btfss	3,2
  4962     050D  2D1F               	goto	l5162
  4963     050E  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4964     050F  0086               	movwf	6
  4965     0510  0187               	clrf	7
  4966     0511  3F40               	moviw [0]fsr1
  4967     0512  00CA               	movwf	??_vfpfcnvrt^(0+128)
  4968     0513  3F41               	moviw [1]fsr1
  4969     0514  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4970     0515  084A               	movf	??_vfpfcnvrt^(0+128),w
  4971     0516  0084               	movwf	4
  4972     0517  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4973     0518  0085               	movwf	5
  4974     0519  0800               	movf	0,w	;code access
  4975                           
  4976                           ; Switch size 1, requested type "simple"
  4977                           ; Number of cases is 1, Range of values is 48 to 48
  4978                           ; switch strategies available:
  4979                           ; Name         Instructions Cycles
  4980                           ; simple_byte            4     3 (average)
  4981                           ; direct_byte           11     9 (fixed)
  4982                           ; jumptable            263     9 (fixed)
  4983                           ;	Chosen strategy is simple_byte
  4984     051A  3A30               	xorlw	48	; case 48
  4985     051B  1903               	skipnz
  4986     051C  2CFD               	goto	l1801
  4987     051D  2D09               	goto	l1803
  4988     051E  2D0B               	goto	l5160
  4989     051F                     l5162:
  4990                           
  4991                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4992     051F  0849               	movf	vfpfcnvrt@ap^(0+128),w
  4993     0520  00B5               	movwf	read_prec_or_width@ap^(0+128)
  4994     0521  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4995     0522  3194  240C  3184   	fcall	_read_prec_or_width
  4996     0525  0836               	movf	(?_read_prec_or_width+1)^(0+128),w
  4997     0526  0022               	movlb	2	; select bank2
  4998     0527  00AD               	movwf	(_width+1)^(0+256)
  4999     0528  0021               	movlb	1	; select bank1
  5000     0529  0835               	movf	?_read_prec_or_width^(0+128),w
  5001     052A  0022               	movlb	2	; select bank2
  5002     052B  00AC               	movwf	_width^(0+256)
  5003                           
  5004                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  5005     052C  1FAD               	btfss	(_width+1)^(0+256),7
  5006     052D  2D34               	goto	l5170
  5007                           
  5008                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  5009     052E  1434               	bsf	_flags^(0+256),0
  5010                           
  5011                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  5012     052F  09AC               	comf	_width^(0+256),f
  5013     0530  09AD               	comf	(_width+1)^(0+256),f
  5014     0531  0AAC               	incf	_width^(0+256),f
  5015     0532  1903               	skipnz
  5016     0533  0AAD               	incf	(_width+1)^(0+256),f
  5017     0534                     l5170:
  5018                           
  5019                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1273:         if 
      +                          ((*fmt)[0] == 'c') {
  5020     0534  0021               	movlb	1	; select bank1
  5021     0535  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5022     0536  0086               	movwf	6
  5023     0537  0187               	clrf	7
  5024     0538  3F40               	moviw [0]fsr1
  5025     0539  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5026     053A  3F41               	moviw [1]fsr1
  5027     053B  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5028     053C  084A               	movf	??_vfpfcnvrt^(0+128),w
  5029     053D  0084               	movwf	4
  5030     053E  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5031     053F  0085               	movwf	5
  5032     0540  0012               	moviw fsr0++
  5033     0541  3A63               	xorlw	99
  5034     0542  1D03               	btfss	3,2
  5035     0543  2D61               	goto	l5180
  5036                           
  5037                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1274:            
      +                           ++*fmt;
  5038     0544  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5039     0545  0086               	movwf	6
  5040     0546  0187               	clrf	7
  5041     0547  3001               	movlw	1
  5042     0548  0781               	addwf	1,f
  5043     0549  3141               	addfsr 1,1
  5044     054A  1803               	skipnc
  5045     054B  0A81               	incf	1,f
  5046                           
  5047                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1275:            
      +                           c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5048     054C  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5049     054D  0086               	movwf	6
  5050     054E  3001               	movlw	1	; select bank2/3
  5051     054F  0087               	movwf	7
  5052     0550  0801               	movf	1,w
  5053     0551  0084               	movwf	4
  5054     0552  0185               	clrf	5
  5055     0553  3002               	movlw	2
  5056     0554  0781               	addwf	1,f
  5057     0555  0800               	movf	0,w
  5058     0556  00D2               	movwf	vfpfcnvrt@c^(0+128)
  5059                           
  5060                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1284:            
      +                           return (int) ctoa(fp, c);
  5061     0557  0852               	movf	vfpfcnvrt@c^(0+128),w
  5062     0558  00B0               	movwf	ctoa@c^(0+128)
  5063     0559  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5064     055A  3194  2467         	fcall	_ctoa
  5065     055C  0831               	movf	(?_ctoa+1)^(0+128),w
  5066     055D  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5067     055E  0830               	movf	?_ctoa^(0+128),w
  5068     055F  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5069     0560  0008               	return
  5070     0561                     l5180:
  5071                           
  5072                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1439:   if (0
  5073     0561  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5074     0562  0086               	movwf	6
  5075     0563  0187               	clrf	7
  5076     0564  3F40               	moviw [0]fsr1
  5077     0565  00D4               	movwf	vfpfcnvrt@cp^(0+128)
  5078     0566  3F41               	moviw [1]fsr1
  5079     0567  00D5               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  5080     0568  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5081     0569  0084               	movwf	4
  5082     056A  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5083     056B  0085               	movwf	5
  5084     056C  0012               	moviw fsr0++
  5085     056D  3A58               	xorlw	88
  5086     056E  1D03               	btfss	3,2
  5087     056F  2DA0               	goto	l5196
  5088                           
  5089                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  5090     0570  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5091     0571  0086               	movwf	6
  5092     0572  3001               	movlw	1	; select bank2/3
  5093     0573  0087               	movwf	7
  5094     0574  0801               	movf	1,w
  5095     0575  0084               	movwf	4
  5096     0576  0185               	clrf	5
  5097     0577  3002               	movlw	2
  5098     0578  0781               	addwf	1,f
  5099     0579  3F00               	moviw [0]fsr0
  5100     057A  00CE               	movwf	vfpfcnvrt@convarg^(0+128)
  5101     057B  3F01               	moviw [1]fsr0
  5102     057C  00CF               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  5103                           
  5104                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  5105     057D  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5106     057E  3E01               	addlw	1
  5107     057F  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5108     0580  3000               	movlw	0
  5109     0581  3D55               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  5110     0582  00CB               	movwf	(??_vfpfcnvrt+1)^(0+128)
  5111     0583  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5112     0584  0086               	movwf	6
  5113     0585  0187               	clrf	7
  5114     0586  084A               	movf	??_vfpfcnvrt^(0+128),w
  5115     0587  3FC0               	movwi [0]fsr1
  5116     0588  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5117     0589  3FC1               	movwi [1]fsr1
  5118                           
  5119                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  5120     058A  2D97               	goto	l5194
  5121     058B                     l5188:
  5122                           
  5123                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (int) xtoa(fp,convarg.uint);
  5124     058B  084F               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  5125     058C  00BF               	movwf	(xtoa@d+1)^(0+128)
  5126     058D  084E               	movf	vfpfcnvrt@convarg^(0+128),w
  5127     058E  00BE               	movwf	xtoa@d^(0+128)
  5128     058F  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5129     0590  3197  2795         	fcall	_xtoa
  5130     0592  083F               	movf	(?_xtoa+1)^(0+128),w
  5131     0593  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5132     0594  083E               	movf	?_xtoa^(0+128),w
  5133     0595  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5134     0596  0008               	return
  5135     0597                     l5194:
  5136     0597  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5137     0598  0084               	movwf	4
  5138     0599  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5139     059A  0085               	movwf	5
  5140     059B  0800               	movf	0,w	;code access
  5141                           
  5142                           ; Switch size 1, requested type "simple"
  5143                           ; Number of cases is 1, Range of values is 88 to 88
  5144                           ; switch strategies available:
  5145                           ; Name         Instructions Cycles
  5146                           ; simple_byte            4     3 (average)
  5147                           ; direct_byte           11     9 (fixed)
  5148                           ; jumptable            263     9 (fixed)
  5149                           ;	Chosen strategy is simple_byte
  5150     059C  3A58               	xorlw	88	; case 88
  5151     059D  1903               	skipnz
  5152     059E  2D8B               	goto	l5188
  5153     059F  2DA0               	goto	l5196
  5154     05A0                     l5196:
  5155                           
  5156                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  5157     05A0  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5158     05A1  0086               	movwf	6
  5159     05A2  0187               	clrf	7
  5160     05A3  3001               	movlw	1
  5161     05A4  0781               	addwf	1,f
  5162     05A5  3141               	addfsr 1,1
  5163     05A6  1803               	skipnc
  5164     05A7  0A81               	incf	1,f
  5165                           
  5166                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  5167     05A8  01C8               	clrf	?_vfpfcnvrt^(0+128)
  5168     05A9  01C9               	clrf	(?_vfpfcnvrt+1)^(0+128)
  5169     05AA  0008               	return
  5170     05AB                     l5202:
  5171                           
  5172                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  5173     05AB  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5174     05AC  0086               	movwf	6
  5175     05AD  0187               	clrf	7
  5176     05AE  3F40               	moviw [0]fsr1
  5177     05AF  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5178     05B0  3F41               	moviw [1]fsr1
  5179     05B1  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5180     05B2  084A               	movf	??_vfpfcnvrt^(0+128),w
  5181     05B3  0084               	movwf	4
  5182     05B4  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5183     05B5  0085               	movwf	5
  5184     05B6  0800               	movf	0,w	;code access
  5185     05B7  00CC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  5186     05B8  01CD               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  5187     05B9  084C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  5188     05BA  00A8               	movwf	fputc@c^(0+128)
  5189     05BB  084D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  5190     05BC  00A9               	movwf	(fputc@c+1)^(0+128)
  5191     05BD  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5192     05BE  00AA               	movwf	fputc@fp^(0+128)
  5193     05BF  3188  2005         	fcall	_fputc
  5194                           
  5195                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  5196     05C1  0021               	movlb	1	; select bank1
  5197     05C2  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5198     05C3  0086               	movwf	6
  5199     05C4  0187               	clrf	7
  5200     05C5  3001               	movlw	1
  5201     05C6  0781               	addwf	1,f
  5202     05C7  3141               	addfsr 1,1
  5203     05C8  1803               	skipnc
  5204     05C9  0A81               	incf	1,f
  5205                           
  5206                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  5207     05CA  3001               	movlw	1
  5208     05CB  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5209     05CC  3000               	movlw	0
  5210     05CD  00C9               	movwf	(?_vfpfcnvrt^(0+128)+1)
  5211     05CE  0008               	return
  5212     05CF                     __end_of_vfpfcnvrt:
  5213                           
  5214                           	psect	text4
  5215     1795                     __ptext4:	
  5216 ;; *************** function _xtoa *****************
  5217 ;; Defined at:
  5218 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  fp              1    wreg     PTR struct _IO_FILE
  5221 ;;		 -> snprintf@f(11), 
  5222 ;;  d               2   22[BANK1 ] unsigned int 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  fp              1   25[BANK1 ] PTR struct _IO_FILE
  5225 ;;		 -> snprintf@f(11), 
  5226 ;;  i               2   30[BANK1 ] int 
  5227 ;;  w               2   27[BANK1 ] int 
  5228 ;;  c               1   29[BANK1 ] unsigned char 
  5229 ;;  p               1   26[BANK1 ] _Bool 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2   22[BANK1 ] int 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 1F/1
  5236 ;;		On exit  : 1F/1
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:       10 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 14
  5246 ;; This function calls:
  5247 ;;		_pad
  5248 ;; This function is called by:
  5249 ;;		_vfpfcnvrt
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253     1795                     _xtoa:	
  5254                           ;psect for function _xtoa
  5255                           
  5256                           
  5257                           ;incstack = 0
  5258 ;; hardware stack exceeded
  5259                           ; Regs used in _xtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5260                           ;xtoa@fp stored from wreg
  5261     1795  00C1               	movwf	xtoa@fp^(0+128)
  5262                           
  5263                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1055: static int 
      +                          xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\commo
      +                          n\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 1059:  char c;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1
      +                          063:     int i, w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           1067:  _Bool p = 1;
  5264     1796  01C2               	clrf	xtoa@p^(0+128)
  5265     1797  0AC2               	incf	xtoa@p^(0+128),f
  5266                           
  5267                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  5268     1798  0022               	movlb	2	; select bank2
  5269     1799  082D               	movf	(_width+1)^(0+256),w
  5270     179A  0021               	movlb	1	; select bank1
  5271     179B  00C4               	movwf	(xtoa@w+1)^(0+128)
  5272     179C  0022               	movlb	2	; select bank2
  5273     179D  082C               	movf	_width^(0+256),w
  5274     179E  0021               	movlb	1	; select bank1
  5275     179F  00C3               	movwf	xtoa@w^(0+128)
  5276                           
  5277                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  5278     17A0  301F               	movlw	31
  5279     17A1  00C6               	movwf	xtoa@i^(0+128)
  5280     17A2  3000               	movlw	0
  5281     17A3  00C7               	movwf	(xtoa@i^(0+128)+1)
  5282                           
  5283                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  5284     17A4  0024               	movlb	4	; select bank4
  5285     17A5  01D1               	clrf	(_dbuf^(0+512)+31)
  5286                           
  5287                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5288     17A6  2FCE               	goto	l4842
  5289     17A7                     l4824:
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1107:         --i;
  5292     17A7  30FF               	movlw	255
  5293     17A8  0021               	movlb	1	; select bank1
  5294     17A9  07C6               	addwf	xtoa@i^(0+128),f
  5295     17AA  30FF               	movlw	255
  5296     17AB  3DC7               	addwfc	(xtoa@i+1)^(0+128),f
  5297                           
  5298                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  5299     17AC  083E               	movf	xtoa@d^(0+128),w
  5300     17AD  390F               	andlw	15
  5301     17AE  00C5               	movwf	xtoa@c^(0+128)
  5302                           
  5303                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  5304     17AF  300A               	movlw	10
  5305     17B0  0245               	subwf	xtoa@c^(0+128),w
  5306     17B1  1803               	skipnc
  5307     17B2  2FB5               	goto	l4832
  5308                           
  5309                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  5310     17B3  3030               	movlw	48
  5311     17B4  2FB6               	goto	L2
  5312     17B5                     l4832:	
  5313                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1111:   }
  5314                           
  5315                           
  5316                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  5317     17B5  3037               	movlw	55
  5318     17B6                     L2:
  5319     17B6  00C0               	movwf	??_xtoa^(0+128)
  5320     17B7  0840               	movf	??_xtoa^(0+128),w
  5321     17B8  07C5               	addwf	xtoa@c^(0+128),f
  5322                           
  5323                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  5324     17B9  0846               	movf	xtoa@i^(0+128),w
  5325     17BA  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5326     17BB  0086               	movwf	6
  5327     17BC  3002               	movlw	2	; select bank4/5
  5328     17BD  0087               	movwf	7
  5329     17BE  0845               	movf	xtoa@c^(0+128),w
  5330     17BF  0081               	movwf	1
  5331                           
  5332                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  5333     17C0  01C2               	clrf	xtoa@p^(0+128)
  5334                           
  5335                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  5336     17C1  30FF               	movlw	255
  5337     17C2  07C3               	addwf	xtoa@w^(0+128),f
  5338     17C3  30FF               	movlw	255
  5339     17C4  3DC4               	addwfc	(xtoa@w+1)^(0+128),f
  5340                           
  5341                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  5342     17C5  0E3E               	swapf	xtoa@d^(0+128),w
  5343     17C6  390F               	andlw	15
  5344     17C7  00BE               	movwf	xtoa@d^(0+128)
  5345     17C8  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5346     17C9  39F0               	andlw	240
  5347     17CA  04BE               	iorwf	xtoa@d^(0+128),f
  5348     17CB  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5349     17CC  390F               	andlw	15
  5350     17CD  00BF               	movwf	(xtoa@d^(0+128)+1)
  5351     17CE                     l4842:
  5352                           
  5353                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5354     17CE  0021               	movlb	1	; select bank1
  5355     17CF  0847               	movf	(xtoa@i+1)^(0+128),w
  5356     17D0  3A80               	xorlw	128
  5357     17D1  00C0               	movwf	??_xtoa^(0+128)
  5358     17D2  3080               	movlw	128
  5359     17D3  0240               	subwf	??_xtoa^(0+128),w
  5360     17D4  1D03               	skipz
  5361     17D5  2FD8               	goto	u4065
  5362     17D6  3002               	movlw	2
  5363     17D7  0246               	subwf	xtoa@i^(0+128),w
  5364     17D8                     u4065:
  5365     17D8  1C03               	skipc
  5366     17D9  2FF0               	goto	l4852
  5367     17DA  0021               	movlb	1	; select bank1
  5368     17DB  083E               	movf	xtoa@d^(0+128),w
  5369     17DC  043F               	iorwf	(xtoa@d+1)^(0+128),w
  5370     17DD  1D03               	btfss	3,2
  5371     17DE  2FA7               	goto	l4824
  5372     17DF  0842               	movf	xtoa@p^(0+128),w
  5373     17E0  1D03               	btfss	3,2
  5374     17E1  2FA7               	goto	l4824
  5375     17E2  0844               	movf	(xtoa@w+1)^(0+128),w
  5376     17E3  3A80               	xorlw	128
  5377     17E4  00C0               	movwf	??_xtoa^(0+128)
  5378     17E5  3080               	movlw	128
  5379     17E6  0240               	subwf	??_xtoa^(0+128),w
  5380     17E7  1D03               	skipz
  5381     17E8  2FEB               	goto	u4095
  5382     17E9  3001               	movlw	1
  5383     17EA  0243               	subwf	xtoa@w^(0+128),w
  5384     17EB                     u4095:
  5385     17EB  1C03               	skipc
  5386     17EC  2FF0               	goto	l4852
  5387     17ED  0022               	movlb	2	; select bank2
  5388     17EE  18B4               	btfsc	_flags^(0+256),1
  5389     17EF  2FA7               	goto	l4824
  5390     17F0                     l4852:
  5391                           
  5392                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (int) pad(fp, &dbuf[i], w);
  5393     17F0  0021               	movlb	1	; select bank1
  5394     17F1  0846               	movf	xtoa@i^(0+128),w
  5395     17F2  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5396     17F3  00B7               	movwf	pad@buf^(0+128)
  5397     17F4  0844               	movf	(xtoa@w+1)^(0+128),w
  5398     17F5  00B9               	movwf	(pad@p+1)^(0+128)
  5399     17F6  0843               	movf	xtoa@w^(0+128),w
  5400     17F7  00B8               	movwf	pad@p^(0+128)
  5401     17F8  0841               	movf	xtoa@fp^(0+128),w
  5402     17F9  3192  2210         	fcall	_pad
  5403     17FB  0838               	movf	(?_pad+1)^(0+128),w
  5404     17FC  00BF               	movwf	(?_xtoa+1)^(0+128)
  5405     17FD  0837               	movf	?_pad^(0+128),w
  5406     17FE  00BE               	movwf	?_xtoa^(0+128)
  5407     17FF  0008               	return
  5408     1800                     __end_of_xtoa:
  5409                           
  5410                           	psect	text5
  5411     1210                     __ptext5:	
  5412 ;; *************** function _pad *****************
  5413 ;; Defined at:
  5414 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  fp              1    wreg     PTR struct _IO_FILE
  5417 ;;		 -> snprintf@f(11), 
  5418 ;;  buf             1   15[BANK1 ] PTR unsigned char 
  5419 ;;		 -> dbuf(32), 
  5420 ;;  p               2   16[BANK1 ] int 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  fp              1   21[BANK1 ] PTR struct _IO_FILE
  5423 ;;		 -> snprintf@f(11), 
  5424 ;;  i               2   19[BANK1 ] int 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  2   15[BANK1 ] int 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 1F/1
  5431 ;;		On exit  : 1F/1
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        7 bytes
  5439 ;; Hardware stack levels used: 1
  5440 ;; Hardware stack levels required when called: 13
  5441 ;; This function calls:
  5442 ;;		_fputc
  5443 ;;		_fputs
  5444 ;;		_strlen
  5445 ;; This function is called by:
  5446 ;;		_xtoa
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450     1210                     _pad:	
  5451                           ;psect for function _pad
  5452                           
  5453                           
  5454                           ;incstack = 0
  5455 ;; hardware stack exceeded
  5456                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5457                           ;pad@fp stored from wreg
  5458     1210  00BD               	movwf	pad@fp^(0+128)
  5459                           
  5460                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 193: static int p
      +                          ad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 195:     int i;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 
      +                          199:     if (flags & (1 << 0)) {
  5461     1211  0022               	movlb	2	; select bank2
  5462     1212  1C34               	btfss	_flags^(0+256),0
  5463     1213  2A1B               	goto	l4564
  5464                           
  5465                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  5466     1214  0021               	movlb	1	; select bank1
  5467     1215  083D               	movf	pad@fp^(0+128),w
  5468     1216  00B0               	movwf	fputs@fp^(0+128)
  5469     1217  0837               	movf	pad@buf^(0+128),w
  5470     1218  319E  26F2  3192   	fcall	_fputs
  5471     121B                     l4564:
  5472                           
  5473                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  5474     121B  0021               	movlb	1	; select bank1
  5475     121C  1FB9               	btfss	(pad@p+1)^(0+128),7
  5476     121D  2A20               	goto	l1753
  5477                           
  5478                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  5479     121E  01B8               	clrf	pad@p^(0+128)
  5480     121F  01B9               	clrf	(pad@p+1)^(0+128)
  5481     1220                     l1753:	
  5482                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 207:  }
  5483                           
  5484                           
  5485                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  5486     1220  01BB               	clrf	pad@i^(0+128)
  5487     1221  01BC               	clrf	(pad@i+1)^(0+128)
  5488     1222                     l4572:	
  5489                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5490                           
  5491                           
  5492                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5493     1222  083C               	movf	(pad@i+1)^(0+128),w
  5494     1223  3A80               	xorlw	128
  5495     1224  00BA               	movwf	??_pad^(0+128)
  5496     1225  0839               	movf	(pad@p+1)^(0+128),w
  5497     1226  3A80               	xorlw	128
  5498     1227  023A               	subwf	??_pad^(0+128),w
  5499     1228  1D03               	skipz
  5500     1229  2A2C               	goto	u3685
  5501     122A  0838               	movf	pad@p^(0+128),w
  5502     122B  023B               	subwf	pad@i^(0+128),w
  5503     122C                     u3685:
  5504     122C  1803               	btfsc	3,0
  5505     122D  2A3E               	goto	l1756
  5506                           
  5507                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  5508     122E  3020               	movlw	32
  5509     122F  0021               	movlb	1	; select bank1
  5510     1230  00A8               	movwf	fputc@c^(0+128)
  5511     1231  3000               	movlw	0
  5512     1232  00A9               	movwf	(fputc@c^(0+128)+1)
  5513     1233  083D               	movf	pad@fp^(0+128),w
  5514     1234  00AA               	movwf	fputc@fp^(0+128)
  5515     1235  3188  2005  3192   	fcall	_fputc
  5516                           
  5517                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 211:         ++i;
  5518     1238  3001               	movlw	1
  5519     1239  0021               	movlb	1	; select bank1
  5520     123A  07BB               	addwf	pad@i^(0+128),f
  5521     123B  3000               	movlw	0
  5522     123C  3DBC               	addwfc	(pad@i+1)^(0+128),f
  5523     123D  2A22               	goto	l4572
  5524     123E                     l1756:
  5525                           
  5526                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  5527     123E  0022               	movlb	2	; select bank2
  5528     123F  1834               	btfsc	_flags^(0+256),0
  5529     1240  2A48               	goto	l4576
  5530                           
  5531                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  5532     1241  0021               	movlb	1	; select bank1
  5533     1242  083D               	movf	pad@fp^(0+128),w
  5534     1243  00B0               	movwf	fputs@fp^(0+128)
  5535     1244  0837               	movf	pad@buf^(0+128),w
  5536     1245  319E  26F2  3192   	fcall	_fputs
  5537     1248                     l4576:
  5538                           
  5539                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 224:     return (
      +                          int)(strlen(buf) + (size_t)p);
  5540     1248  0021               	movlb	1	; select bank1
  5541     1249  0837               	movf	pad@buf^(0+128),w
  5542     124A  319D  2542         	fcall	_strlen
  5543     124C  0838               	movf	pad@p^(0+128),w
  5544     124D  0728               	addwf	?_strlen^(0+128),w
  5545     124E  00B7               	movwf	?_pad^(0+128)
  5546     124F  0839               	movf	(pad@p+1)^(0+128),w
  5547     1250  3D29               	addwfc	(?_strlen+1)^(0+128),w
  5548     1251  00B8               	movwf	(?_pad+1)^(0+128)
  5549     1252  0008               	return
  5550     1253                     __end_of_pad:
  5551                           
  5552                           	psect	text6
  5553     1D42                     __ptext6:	
  5554 ;; *************** function _strlen *****************
  5555 ;; Defined at:
  5556 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  s               1    wreg     PTR const unsigned char 
  5559 ;;		 -> dbuf(32), 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  s               1    4[BANK1 ] PTR const unsigned char 
  5562 ;;		 -> dbuf(32), 
  5563 ;;  a               1    3[BANK1 ] PTR const unsigned char 
  5564 ;;		 -> dbuf(32), 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  2    0[BANK1 ] unsigned int 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 1F/1
  5571 ;;		On exit  : 1F/1
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        5 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 10
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_pad
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588     1D42                     _strlen:	
  5589                           ;psect for function _strlen
  5590                           
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5594                           ;strlen@s stored from wreg
  5595     1D42  00AC               	movwf	strlen@s^(0+128)
  5596     1D43  082C               	movf	strlen@s^(0+128),w
  5597     1D44  00AB               	movwf	strlen@a^(0+128)
  5598     1D45                     l4264:
  5599     1D45  082C               	movf	strlen@s^(0+128),w
  5600     1D46  0086               	movwf	6
  5601     1D47  3002               	movlw	2	; select bank4/5
  5602     1D48  0087               	movwf	7
  5603     1D49  0801               	movf	1,w
  5604     1D4A  1903               	btfsc	3,2
  5605     1D4B  2D51               	goto	l4266
  5606     1D4C  3001               	movlw	1
  5607     1D4D  00AA               	movwf	??_strlen^(0+128)
  5608     1D4E  082A               	movf	??_strlen^(0+128),w
  5609     1D4F  07AC               	addwf	strlen@s^(0+128),f
  5610     1D50  2D45               	goto	l4264
  5611     1D51                     l4266:
  5612     1D51  082B               	movf	strlen@a^(0+128),w
  5613     1D52  022C               	subwf	strlen@s^(0+128),w
  5614     1D53  00A8               	movwf	?_strlen^(0+128)
  5615     1D54  01A9               	clrf	(?_strlen+1)^(0+128)
  5616     1D55  1BA8               	btfsc	?_strlen^(0+128),7
  5617     1D56  03A9               	decf	(?_strlen+1)^(0+128),f
  5618     1D57  0008               	return
  5619     1D58                     __end_of_strlen:
  5620                           
  5621                           	psect	text7
  5622     1EF2                     __ptext7:	
  5623 ;; *************** function _fputs *****************
  5624 ;; Defined at:
  5625 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputs.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  s               1    wreg     PTR const unsigned char 
  5628 ;;		 -> dbuf(32), 
  5629 ;;  fp              1    8[BANK1 ] PTR struct _IO_FILE
  5630 ;;		 -> snprintf@f(11), 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  s               1   14[BANK1 ] PTR const unsigned char 
  5633 ;;		 -> dbuf(32), 
  5634 ;;  i               2   12[BANK1 ] int 
  5635 ;;  c               1   11[BANK1 ] unsigned char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2    8[BANK1 ] int 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 1F/1
  5642 ;;		On exit  : 1F/1
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5645 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;Total ram usage:        7 bytes
  5650 ;; Hardware stack levels used: 1
  5651 ;; Hardware stack levels required when called: 12
  5652 ;; This function calls:
  5653 ;;		_fputc
  5654 ;; This function is called by:
  5655 ;;		_pad
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659     1EF2                     _fputs:	
  5660                           ;psect for function _fputs
  5661                           
  5662                           
  5663                           ;incstack = 0
  5664 ;; hardware stack exceeded
  5665                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5666                           ;fputs@s stored from wreg
  5667     1EF2  00B6               	movwf	fputs@s^(0+128)
  5668     1EF3  01B4               	clrf	fputs@i^(0+128)
  5669     1EF4  01B5               	clrf	(fputs@i+1)^(0+128)
  5670     1EF5                     l4258:
  5671     1EF5  0834               	movf	fputs@i^(0+128),w
  5672     1EF6  0736               	addwf	fputs@s^(0+128),w
  5673     1EF7  00B1               	movwf	??_fputs^(0+128)
  5674     1EF8  0831               	movf	??_fputs^(0+128),w
  5675     1EF9  0086               	movwf	6
  5676     1EFA  3002               	movlw	2	; select bank4/5
  5677     1EFB  0087               	movwf	7
  5678     1EFC  0801               	movf	1,w
  5679     1EFD  00B3               	movwf	fputs@c^(0+128)
  5680     1EFE  0833               	movf	fputs@c^(0+128),w
  5681     1EFF  1903               	btfsc	3,2
  5682     1F00  0008               	return
  5683     1F01  0833               	movf	fputs@c^(0+128),w
  5684     1F02  00B1               	movwf	??_fputs^(0+128)
  5685     1F03  01B2               	clrf	(??_fputs^(0+128)+1)
  5686     1F04  0831               	movf	??_fputs^(0+128),w
  5687     1F05  00A8               	movwf	fputc@c^(0+128)
  5688     1F06  0832               	movf	(??_fputs+1)^(0+128),w
  5689     1F07  00A9               	movwf	(fputc@c+1)^(0+128)
  5690     1F08  0830               	movf	fputs@fp^(0+128),w
  5691     1F09  00AA               	movwf	fputc@fp^(0+128)
  5692     1F0A  3188  2005  319E   	fcall	_fputc
  5693     1F0D  3001               	movlw	1
  5694     1F0E  0021               	movlb	1	; select bank1
  5695     1F0F  07B4               	addwf	fputs@i^(0+128),f
  5696     1F10  3000               	movlw	0
  5697     1F11  3DB5               	addwfc	(fputs@i+1)^(0+128),f
  5698     1F12  2EF5               	goto	l4258
  5699     1F13                     __end_of_fputs:
  5700                           
  5701                           	psect	text8
  5702     140C                     __ptext8:	
  5703 ;; *************** function _read_prec_or_width *****************
  5704 ;; Defined at:
  5705 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  fmt             1    wreg     PTR PTR const unsigned c
  5708 ;;		 -> vfprintf@cfmt(2), 
  5709 ;;  ap              1   13[BANK1 ] PTR PTR void [1]
  5710 ;;		 -> snprintf@ap(1), 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  fmt             1   21[BANK1 ] PTR PTR const unsigned c
  5713 ;;		 -> vfprintf@cfmt(2), 
  5714 ;;  c               1   18[BANK1 ] unsigned char 
  5715 ;;  n               2   19[BANK1 ] int 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  2   13[BANK1 ] int 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 1F/1
  5722 ;;		On exit  : 1F/1
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5725 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;Total ram usage:        9 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; Hardware stack levels required when called: 11
  5732 ;; This function calls:
  5733 ;;		___wmul
  5734 ;; This function is called by:
  5735 ;;		_vfpfcnvrt
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739     140C                     _read_prec_or_width:	
  5740                           ;psect for function _read_prec_or_width
  5741                           
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5745                           ;read_prec_or_width@fmt stored from wreg
  5746     140C  00BD               	movwf	read_prec_or_width@fmt^(0+128)
  5747                           
  5748                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  5749     140D  01BB               	clrf	read_prec_or_width@n^(0+128)
  5750     140E  01BC               	clrf	(read_prec_or_width@n+1)^(0+128)
  5751                           
  5752                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  5753     140F  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5754     1410  0086               	movwf	6
  5755     1411  0187               	clrf	7
  5756     1412  3F40               	moviw [0]fsr1
  5757     1413  00B7               	movwf	??_read_prec_or_width^(0+128)
  5758     1414  3F41               	moviw [1]fsr1
  5759     1415  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5760     1416  0837               	movf	??_read_prec_or_width^(0+128),w
  5761     1417  0084               	movwf	4
  5762     1418  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5763     1419  0085               	movwf	5
  5764     141A  0012               	moviw fsr0++
  5765     141B  3A2A               	xorlw	42
  5766     141C  1D03               	btfss	3,2
  5767     141D  2C50               	goto	l4868
  5768                           
  5769                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  5770     141E  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5771     141F  0086               	movwf	6
  5772     1420  0187               	clrf	7
  5773     1421  3001               	movlw	1
  5774     1422  0781               	addwf	1,f
  5775     1423  3141               	addfsr 1,1
  5776     1424  1803               	skipnc
  5777     1425  0A81               	incf	1,f
  5778                           
  5779                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  5780     1426  0835               	movf	read_prec_or_width@ap^(0+128),w
  5781     1427  0086               	movwf	6
  5782     1428  3001               	movlw	1	; select bank2/3
  5783     1429  0087               	movwf	7
  5784     142A  0801               	movf	1,w
  5785     142B  0084               	movwf	4
  5786     142C  0185               	clrf	5
  5787     142D  3002               	movlw	2
  5788     142E  0781               	addwf	1,f
  5789     142F  3F00               	moviw [0]fsr0
  5790     1430  00BB               	movwf	read_prec_or_width@n^(0+128)
  5791     1431  3F01               	moviw [1]fsr0
  5792     1432  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5793                           
  5794                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  5795     1433  2C62               	goto	l4870
  5796     1434                     l4864:
  5797                           
  5798                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  5799     1434  083A               	movf	read_prec_or_width@c^(0+128),w
  5800     1435  00B7               	movwf	??_read_prec_or_width^(0+128)
  5801     1436  01B8               	clrf	(??_read_prec_or_width^(0+128)+1)
  5802     1437  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5803     1438  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  5804     1439  083B               	movf	read_prec_or_width@n^(0+128),w
  5805     143A  00AF               	movwf	___wmul@multiplier^(0+128)
  5806     143B  300A               	movlw	10
  5807     143C  00B1               	movwf	___wmul@multiplicand^(0+128)
  5808     143D  3000               	movlw	0
  5809     143E  00B2               	movwf	(___wmul@multiplicand^(0+128)+1)
  5810     143F  319E  2603  3194   	fcall	___wmul
  5811     1442  0837               	movf	??_read_prec_or_width^(0+128),w
  5812     1443  072F               	addwf	?___wmul^(0+128),w
  5813     1444  00BB               	movwf	read_prec_or_width@n^(0+128)
  5814     1445  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5815     1446  3D30               	addwfc	(?___wmul+1)^(0+128),w
  5816     1447  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5817                           
  5818                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  5819     1448  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5820     1449  0086               	movwf	6
  5821     144A  0187               	clrf	7
  5822     144B  3001               	movlw	1
  5823     144C  0781               	addwf	1,f
  5824     144D  3141               	addfsr 1,1
  5825     144E  1803               	skipnc
  5826     144F  0A81               	incf	1,f
  5827     1450                     l4868:
  5828                           
  5829                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  5830     1450  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5831     1451  0086               	movwf	6
  5832     1452  0187               	clrf	7
  5833     1453  3F40               	moviw [0]fsr1
  5834     1454  00B7               	movwf	??_read_prec_or_width^(0+128)
  5835     1455  3F41               	moviw [1]fsr1
  5836     1456  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5837     1457  0837               	movf	??_read_prec_or_width^(0+128),w
  5838     1458  0084               	movwf	4
  5839     1459  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5840     145A  0085               	movwf	5
  5841     145B  0800               	movf	0,w	;code access
  5842     145C  3ED0               	addlw	208
  5843     145D  00BA               	movwf	read_prec_or_width@c^(0+128)
  5844     145E  300A               	movlw	10
  5845     145F  023A               	subwf	read_prec_or_width@c^(0+128),w
  5846     1460  1C03               	skipc
  5847     1461  2C34               	goto	l4864
  5848     1462                     l4870:
  5849                           
  5850                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  5851     1462  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5852     1463  00B6               	movwf	(?_read_prec_or_width+1)^(0+128)
  5853     1464  083B               	movf	read_prec_or_width@n^(0+128),w
  5854     1465  00B5               	movwf	?_read_prec_or_width^(0+128)
  5855     1466  0008               	return
  5856     1467                     __end_of_read_prec_or_width:
  5857                           
  5858                           	psect	text9
  5859     1467                     __ptext9:	
  5860 ;; *************** function _ctoa *****************
  5861 ;; Defined at:
  5862 ;;		line 476 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  fp              1    wreg     PTR struct _IO_FILE
  5865 ;;		 -> snprintf@f(11), 
  5866 ;;  c               1    8[BANK1 ] unsigned char 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  fp              1   16[BANK1 ] PTR struct _IO_FILE
  5869 ;;		 -> snprintf@f(11), 
  5870 ;;  w               2   14[BANK1 ] int 
  5871 ;;  l               2   12[BANK1 ] int 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  2    8[BANK1 ] int 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 1F/1
  5878 ;;		On exit  : 1F/1
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5881 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;Total ram usage:        9 bytes
  5886 ;; Hardware stack levels used: 1
  5887 ;; Hardware stack levels required when called: 12
  5888 ;; This function calls:
  5889 ;;		_fputc
  5890 ;; This function is called by:
  5891 ;;		_vfpfcnvrt
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895     1467                     _ctoa:	
  5896                           ;psect for function _ctoa
  5897                           
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _ctoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5901                           ;ctoa@fp stored from wreg
  5902     1467  00B8               	movwf	ctoa@fp^(0+128)
  5903                           
  5904                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 476: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt
      +                          .c: 477: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 478:   
      +                            int l,w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 481:   
      +                            w = width ? width - 1 : width;
  5905     1468  0022               	movlb	2	; select bank2
  5906     1469  082C               	movf	_width^(0+256),w
  5907     146A  042D               	iorwf	(_width+1)^(0+256),w
  5908     146B  1D03               	btfss	3,2
  5909     146C  2C75               	goto	l4794
  5910     146D  082D               	movf	(_width+1)^(0+256),w
  5911     146E  0021               	movlb	1	; select bank1
  5912     146F  00B7               	movwf	(ctoa@w+1)^(0+128)
  5913     1470  0022               	movlb	2	; select bank2
  5914     1471  082C               	movf	_width^(0+256),w
  5915     1472  0021               	movlb	1	; select bank1
  5916     1473  00B6               	movwf	ctoa@w^(0+128)
  5917     1474  2C7E               	goto	l4796
  5918     1475                     l4794:
  5919     1475  082C               	movf	_width^(0+256),w
  5920     1476  3EFF               	addlw	255
  5921     1477  0021               	movlb	1	; select bank1
  5922     1478  00B6               	movwf	ctoa@w^(0+128)
  5923     1479  30FF               	movlw	255
  5924     147A  0022               	movlb	2	; select bank2
  5925     147B  3D2D               	addwfc	(_width+1)^(0+256),w
  5926     147C  0021               	movlb	1	; select bank1
  5927     147D  00B7               	movwf	(ctoa@w+1)^(0+128)
  5928     147E                     l4796:
  5929                           
  5930                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 485:     if (flag
      +                          s & (1 << 0)) {
  5931     147E  0022               	movlb	2	; select bank2
  5932     147F  1C34               	btfss	_flags^(0+256),0
  5933     1480  2C8E               	goto	l4800
  5934                           
  5935                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 486:         fput
      +                          c(c, fp);
  5936     1481  0021               	movlb	1	; select bank1
  5937     1482  0830               	movf	ctoa@c^(0+128),w
  5938     1483  00B2               	movwf	??_ctoa^(0+128)
  5939     1484  01B3               	clrf	(??_ctoa^(0+128)+1)
  5940     1485  0832               	movf	??_ctoa^(0+128),w
  5941     1486  00A8               	movwf	fputc@c^(0+128)
  5942     1487  0833               	movf	(??_ctoa+1)^(0+128),w
  5943     1488  00A9               	movwf	(fputc@c+1)^(0+128)
  5944     1489  0838               	movf	ctoa@fp^(0+128),w
  5945     148A  00AA               	movwf	fputc@fp^(0+128)
  5946     148B  3188  2005  3194   	fcall	_fputc
  5947     148E                     l4800:
  5948                           
  5949                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 491:     w = (w <
      +                           0) ? 0 : w;
  5950     148E  0021               	movlb	1	; select bank1
  5951     148F  1FB7               	btfss	(ctoa@w+1)^(0+128),7
  5952     1490  2C93               	goto	l1769
  5953     1491  01B6               	clrf	ctoa@w^(0+128)
  5954     1492  01B7               	clrf	(ctoa@w+1)^(0+128)
  5955     1493                     l1769:
  5956                           
  5957                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 492:     l = 0;
  5958     1493  01B4               	clrf	ctoa@l^(0+128)
  5959     1494  01B5               	clrf	(ctoa@l+1)^(0+128)
  5960     1495                     l4810:	
  5961                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  5962                           
  5963                           
  5964                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  5965     1495  0835               	movf	(ctoa@l+1)^(0+128),w
  5966     1496  3A80               	xorlw	128
  5967     1497  00B2               	movwf	??_ctoa^(0+128)
  5968     1498  0837               	movf	(ctoa@w+1)^(0+128),w
  5969     1499  3A80               	xorlw	128
  5970     149A  0232               	subwf	??_ctoa^(0+128),w
  5971     149B  1D03               	skipz
  5972     149C  2C9F               	goto	u4035
  5973     149D  0836               	movf	ctoa@w^(0+128),w
  5974     149E  0234               	subwf	ctoa@l^(0+128),w
  5975     149F                     u4035:
  5976     149F  1803               	btfsc	3,0
  5977     14A0  2CB1               	goto	l1772
  5978                           
  5979                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 494:         fput
      +                          c(' ', fp);
  5980     14A1  3020               	movlw	32
  5981     14A2  0021               	movlb	1	; select bank1
  5982     14A3  00A8               	movwf	fputc@c^(0+128)
  5983     14A4  3000               	movlw	0
  5984     14A5  00A9               	movwf	(fputc@c^(0+128)+1)
  5985     14A6  0838               	movf	ctoa@fp^(0+128),w
  5986     14A7  00AA               	movwf	fputc@fp^(0+128)
  5987     14A8  3188  2005  3194   	fcall	_fputc
  5988                           
  5989                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 495:         ++l;
  5990     14AB  3001               	movlw	1
  5991     14AC  0021               	movlb	1	; select bank1
  5992     14AD  07B4               	addwf	ctoa@l^(0+128),f
  5993     14AE  3000               	movlw	0
  5994     14AF  3DB5               	addwfc	(ctoa@l+1)^(0+128),f
  5995     14B0  2C95               	goto	l4810
  5996     14B1                     l1772:
  5997                           
  5998                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 499:     if (!(fl
      +                          ags & (1 << 0))) {
  5999     14B1  0022               	movlb	2	; select bank2
  6000     14B2  1834               	btfsc	_flags^(0+256),0
  6001     14B3  2CC0               	goto	l4814
  6002                           
  6003                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 501:         fput
      +                          c(c, fp);
  6004     14B4  0021               	movlb	1	; select bank1
  6005     14B5  0830               	movf	ctoa@c^(0+128),w
  6006     14B6  00B2               	movwf	??_ctoa^(0+128)
  6007     14B7  01B3               	clrf	(??_ctoa^(0+128)+1)
  6008     14B8  0832               	movf	??_ctoa^(0+128),w
  6009     14B9  00A8               	movwf	fputc@c^(0+128)
  6010     14BA  0833               	movf	(??_ctoa+1)^(0+128),w
  6011     14BB  00A9               	movwf	(fputc@c+1)^(0+128)
  6012     14BC  0838               	movf	ctoa@fp^(0+128),w
  6013     14BD  00AA               	movwf	fputc@fp^(0+128)
  6014     14BE  3188  2005         	fcall	_fputc
  6015     14C0                     l4814:
  6016                           
  6017                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 507:     return l
      +                          +1;
  6018     14C0  0021               	movlb	1	; select bank1
  6019     14C1  0834               	movf	ctoa@l^(0+128),w
  6020     14C2  3E01               	addlw	1
  6021     14C3  00B0               	movwf	?_ctoa^(0+128)
  6022     14C4  3000               	movlw	0
  6023     14C5  3D35               	addwfc	(ctoa@l+1)^(0+128),w
  6024     14C6  00B1               	movwf	(?_ctoa+1)^(0+128)
  6025     14C7  0008               	return
  6026     14C8                     __end_of_ctoa:
  6027                           
  6028                           	psect	text10
  6029     0805                     __ptext10:	
  6030 ;; *************** function _fputc *****************
  6031 ;; Defined at:
  6032 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  c               2    0[BANK1 ] int 
  6035 ;;  fp              1    2[BANK1 ] PTR struct _IO_FILE
  6036 ;;		 -> snprintf@f(11), 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  2    0[BANK1 ] int 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 1F/1
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6048 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;Total ram usage:        8 bytes
  6053 ;; Hardware stack levels used: 1
  6054 ;; Hardware stack levels required when called: 11
  6055 ;; This function calls:
  6056 ;;		_putch
  6057 ;; This function is called by:
  6058 ;;		_pad
  6059 ;;		_ctoa
  6060 ;;		_vfpfcnvrt
  6061 ;;		_fputs
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065     0805                     _fputc:	
  6066                           ;psect for function _fputc
  6067                           
  6068                           
  6069                           ;incstack = 0
  6070 ;; hardware stack exceeded
  6071                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6072     0805  082A               	movf	fputc@fp^(0+128),w
  6073     0806  1D03               	btfss	3,2
  6074     0807  082A               	movf	fputc@fp^(0+128),w
  6075     0808  1D03               	btfss	3,2
  6076     0809  280E               	goto	l4174
  6077     080A  0828               	movf	fputc@c^(0+128),w
  6078     080B  3188  2001         	fcall	_putch
  6079     080D  0008               	return
  6080     080E                     l4174:
  6081     080E  082A               	movf	fputc@fp^(0+128),w
  6082     080F  3E09               	addlw	9
  6083     0810  0086               	movwf	6
  6084     0811  3001               	movlw	1	; select bank2/3
  6085     0812  0087               	movwf	7
  6086     0813  0016               	moviw fsr1++
  6087     0814  0401               	iorwf	1,w
  6088     0815  1903               	btfsc	3,2
  6089     0816  2835               	goto	l4178
  6090     0817  082A               	movf	fputc@fp^(0+128),w
  6091     0818  3E09               	addlw	9
  6092     0819  0086               	movwf	6
  6093     081A  3001               	movlw	1	; select bank2/3
  6094     081B  0087               	movwf	7
  6095     081C  3F40               	moviw [0]fsr1
  6096     081D  00AB               	movwf	??_fputc^(0+128)
  6097     081E  3F41               	moviw [1]fsr1
  6098     081F  00AC               	movwf	(??_fputc^(0+128)+1)
  6099     0820  082A               	movf	fputc@fp^(0+128),w
  6100     0821  3E02               	addlw	2
  6101     0822  0086               	movwf	6
  6102     0823  3001               	movlw	1	; select bank2/3
  6103     0824  0087               	movwf	7
  6104     0825  3F40               	moviw [0]fsr1
  6105     0826  00AD               	movwf	(??_fputc+2)^(0+128)
  6106     0827  3F41               	moviw [1]fsr1
  6107     0828  00AE               	movwf	((??_fputc+2)^(0+128)+1)
  6108     0829  082E               	movf	(??_fputc+3)^(0+128),w
  6109     082A  3A80               	xorlw	128
  6110     082B  00AF               	movwf	(??_fputc+4)^(0+128)
  6111     082C  082C               	movf	(??_fputc+1)^(0+128),w
  6112     082D  3A80               	xorlw	128
  6113     082E  022F               	subwf	(??_fputc+4)^(0+128),w
  6114     082F  1D03               	skipz
  6115     0830  2833               	goto	u3155
  6116     0831  082B               	movf	??_fputc^(0+128),w
  6117     0832  022D               	subwf	(??_fputc+2)^(0+128),w
  6118     0833                     u3155:
  6119     0833  1803               	skipnc
  6120     0834  0008               	return
  6121     0835                     l4178:
  6122     0835  0021               	movlb	1	; select bank1
  6123     0836  082A               	movf	fputc@fp^(0+128),w
  6124     0837  0086               	movwf	6
  6125     0838  3001               	movlw	1	; select bank2/3
  6126     0839  0087               	movwf	7
  6127     083A  082A               	movf	fputc@fp^(0+128),w
  6128     083B  3E02               	addlw	2
  6129     083C  0084               	movwf	4
  6130     083D  3001               	movlw	1	; select bank2/3
  6131     083E  0085               	movwf	5
  6132     083F  0800               	movf	0,w
  6133     0840  0701               	addwf	1,w
  6134     0841  00AB               	movwf	??_fputc^(0+128)
  6135     0842  082B               	movf	??_fputc^(0+128),w
  6136     0843  0086               	movwf	6
  6137     0844  3001               	movlw	1	; select bank2/3
  6138     0845  0087               	movwf	7
  6139     0846  0828               	movf	fputc@c^(0+128),w
  6140     0847  0081               	movwf	1
  6141     0848  082A               	movf	fputc@fp^(0+128),w
  6142     0849  3E02               	addlw	2
  6143     084A  0086               	movwf	6
  6144     084B  3001               	movlw	1	; select bank2/3
  6145     084C  0087               	movwf	7
  6146     084D  3001               	movlw	1
  6147     084E  0781               	addwf	1,f
  6148     084F  3141               	addfsr 1,1
  6149     0850  1803               	skipnc
  6150     0851  0A81               	incf	1,f
  6151     0852  0008               	return
  6152     0853                     __end_of_fputc:
  6153                           
  6154                           	psect	text11
  6155     0801                     __ptext11:	
  6156 ;; *************** function _putch *****************
  6157 ;; Defined at:
  6158 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  c               1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  c               1    0[COMMON] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      void 
  6165 ;; Registers used:
  6166 ;;		wreg
  6167 ;; Tracked objects:
  6168 ;;		On entry : 1F/1
  6169 ;;		On exit  : 1F/1
  6170 ;;		Unchanged: 1F/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        0 bytes
  6177 ;; Hardware stack levels used: 1
  6178 ;; Hardware stack levels required when called: 10
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_fputc
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186     0801                     _putch:	
  6187                           ;psect for function _putch
  6188                           
  6189                           
  6190                           ;incstack = 0
  6191 ;; hardware stack exceeded
  6192                           ; Regs used in _putch: [wreg]
  6193     0801  0008               	return
  6194     0802                     __end_of_putch:
  6195                           
  6196                           	psect	text12
  6197     1C5B                     __ptext12:	
  6198 ;; *************** function _SysTime_Init *****************
  6199 ;; Defined at:
  6200 ;;		line 12 in file "systime.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;		None
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, status,2, status,0, pclath, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 1F/0
  6211 ;;		On exit  : 1F/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;Total ram usage:        0 bytes
  6219 ;; Hardware stack levels used: 1
  6220 ;; Hardware stack levels required when called: 11
  6221 ;; This function calls:
  6222 ;;		_TMR2_SetInterruptHandler
  6223 ;;		_TMR2_StartTimer
  6224 ;; This function is called by:
  6225 ;;		_main
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229     1C5B                     _SysTime_Init:	
  6230                           ;psect for function _SysTime_Init
  6231                           
  6232                           
  6233                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  6237     1C5B  303D               	movlw	low _SysTimeInterrupt
  6238     1C5C  0021               	movlb	1	; select bank1
  6239     1C5D  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6240     1C5E  301C               	movlw	high _SysTimeInterrupt
  6241     1C5F  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6242     1C60  319C  2435  319C   	fcall	_TMR2_SetInterruptHandler
  6243                           
  6244                           ;systime.c: 15:     TMR2_StartTimer();
  6245     1C63  3188  2002         	fcall	_TMR2_StartTimer
  6246     1C65  0008               	return
  6247     1C66                     __end_of_SysTime_Init:
  6248                           
  6249                           	psect	text13
  6250     0802                     __ptext13:	
  6251 ;; *************** function _TMR2_StartTimer *****************
  6252 ;; Defined at:
  6253 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		None
  6262 ;; Tracked objects:
  6263 ;;		On entry : 1F/3
  6264 ;;		On exit  : 1F/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used: 1
  6273 ;; Hardware stack levels required when called: 10
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_SysTime_Init
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281     0802                     _TMR2_StartTimer:	
  6282                           ;psect for function _TMR2_StartTimer
  6283                           
  6284                           
  6285                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _TMR2_StartTimer: []
  6289     0802  0020               	movlb	0	; select bank0
  6290     0803  151C               	bsf	28,2	;volatile
  6291     0804  0008               	return
  6292     0805                     __end_of_TMR2_StartTimer:
  6293                           
  6294                           	psect	text14
  6295     1D2D                     __ptext14:	
  6296 ;; *************** function _SYSTEM_Initialize *****************
  6297 ;; Defined at:
  6298 ;;		line 49 in file "mcc_generated_files/mcc.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      void 
  6305 ;; Registers used:
  6306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : B1F/0
  6309 ;;		On exit  : 1F/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;Total ram usage:        0 bytes
  6317 ;; Hardware stack levels used: 1
  6318 ;; Hardware stack levels required when called: 12
  6319 ;; This function calls:
  6320 ;;		_EUSART_Initialize
  6321 ;;		_OSCILLATOR_Initialize
  6322 ;;		_PIN_MANAGER_Initialize
  6323 ;;		_TMR2_Initialize
  6324 ;;		_USBDeviceAttach
  6325 ;;		_USBDeviceInit
  6326 ;;		_WDT_Initialize
  6327 ;; This function is called by:
  6328 ;;		_main
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332     1D2D                     _SYSTEM_Initialize:	
  6333                           ;psect for function _SYSTEM_Initialize
  6334                           
  6335                           
  6336                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  6337                           
  6338                           ;incstack = 0
  6339                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6340     1D2D  319F  27D0  319D   	fcall	_PIN_MANAGER_Initialize
  6341                           
  6342                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  6343     1D30  319C  24B2  319D   	fcall	_OSCILLATOR_Initialize
  6344                           
  6345                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  6346     1D33  319B  23EB  319D   	fcall	_WDT_Initialize
  6347                           
  6348                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  6349     1D36  319C  24E1  319D   	fcall	_TMR2_Initialize
  6350                           
  6351                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  6352     1D39  3191  21CF  319D   	fcall	_EUSART_Initialize
  6353                           
  6354                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  6355     1D3C  318D  25E7  319D   	fcall	_USBDeviceInit
  6356                           
  6357                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  6358     1D3F  319D  25CF         	fcall	_USBDeviceAttach
  6359     1D41  0008               	return
  6360     1D42                     __end_of_SYSTEM_Initialize:
  6361                           
  6362                           	psect	text15
  6363     1BEB                     __ptext15:	
  6364 ;; *************** function _WDT_Initialize *****************
  6365 ;; Defined at:
  6366 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg
  6375 ;; Tracked objects:
  6376 ;;		On entry : 1F/1
  6377 ;;		On exit  : 1F/1
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used: 1
  6386 ;; Hardware stack levels required when called: 10
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_SYSTEM_Initialize
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394     1BEB                     _WDT_Initialize:	
  6395                           ;psect for function _WDT_Initialize
  6396                           
  6397                           
  6398                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _WDT_Initialize: [wreg]
  6402     1BEB  3016               	movlw	22
  6403     1BEC  0097               	movwf	23	;volatile
  6404     1BED  0008               	return
  6405     1BEE                     __end_of_WDT_Initialize:
  6406                           
  6407                           	psect	text16
  6408     0DE7                     __ptext16:	
  6409 ;; *************** function _USBDeviceInit *****************
  6410 ;; Defined at:
  6411 ;;		line 281 in file "usb/usb_device.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  p               2    4[BANK1 ] PTR unsigned char 
  6416 ;;		 -> UEP1(1), 
  6417 ;;  i               1    6[BANK1 ] unsigned char 
  6418 ;;  i               1    7[BANK1 ] unsigned char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6423 ;; Tracked objects:
  6424 ;;		On entry : 1F/1
  6425 ;;		On exit  : 1F/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;Total ram usage:        8 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 10
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_SYSTEM_Initialize
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442     0DE7                     _USBDeviceInit:	
  6443                           ;psect for function _USBDeviceInit
  6444                           
  6445                           
  6446                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  6450     0DE7  1112               	bcf	18,2	;volatile
  6451                           
  6452                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  6453     0DE8  003D               	movlb	29	; select bank29
  6454     0DE9  0193               	clrf	19	;volatile
  6455                           
  6456                           ;usb/usb_device.c: 295:     {UIR = 0;};
  6457     0DEA  0190               	clrf	16	;volatile
  6458                           
  6459                           ;usb/usb_device.c: 298:     UEP0 = 0;
  6460     0DEB  0198               	clrf	24	;volatile
  6461                           
  6462                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  6463     0DEC  300E               	movlw	14
  6464     0DED  0021               	movlb	1	; select bank1
  6465     0DEE  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  6466     0DEF  3099               	movlw	153
  6467     0DF0  00AC               	movwf	USBDeviceInit@p^(0+128)
  6468     0DF1  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  6469     0DF2                     l5318:
  6470     0DF2  082C               	movf	USBDeviceInit@p^(0+128),w
  6471     0DF3  0086               	movwf	6
  6472     0DF4  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  6473     0DF5  0087               	movwf	7
  6474     0DF6  0181               	clrf	1
  6475     0DF7  3001               	movlw	1
  6476     0DF8  07AC               	addwf	USBDeviceInit@p^(0+128),f
  6477     0DF9  3000               	movlw	0
  6478     0DFA  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  6479     0DFB  3001               	movlw	1
  6480     0DFC  00A8               	movwf	??_USBDeviceInit^(0+128)
  6481     0DFD  0828               	movf	??_USBDeviceInit^(0+128),w
  6482     0DFE  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  6483     0DFF  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  6484     0E00  1903               	btfsc	3,2
  6485     0E01  2DF2               	goto	l5318
  6486                           
  6487                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  6488     0E02  3016               	movlw	22
  6489     0E03  003D               	movlb	29	; select bank29
  6490     0E04  0091               	movwf	17	;volatile
  6491     0E05  309F               	movlw	159
  6492     0E06  0097               	movwf	23	;volatile
  6493     0E07  307B               	movlw	123
  6494     0E08  0092               	movwf	18	;volatile
  6495                           
  6496                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  6497     0E09  0021               	movlb	1	; select bank1
  6498     0E0A  01AF               	clrf	USBDeviceInit@i^(0+128)
  6499     0E0B                     l5334:
  6500                           
  6501                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  6502     0E0B  082F               	movf	USBDeviceInit@i^(0+128),w
  6503     0E0C  00A8               	movwf	??_USBDeviceInit^(0+128)
  6504     0E0D  3001               	movlw	1
  6505     0E0E                     u4615:
  6506     0E0E  35A8               	lslf	??_USBDeviceInit^(0+128),f
  6507     0E0F  3EFF               	addlw	-1
  6508     0E10  1D03               	skipz
  6509     0E11  2E0E               	goto	u4615
  6510     0E12  3528               	lslf	??_USBDeviceInit^(0+128),w
  6511     0E13  3E20               	addlw	32
  6512     0E14  0086               	movwf	6
  6513     0E15  0187               	clrf	7
  6514     0E16  3000               	movlw	0
  6515     0E17  3FC0               	movwi [0]fsr1
  6516     0E18  3000               	movlw	0
  6517     0E19  3FC1               	movwi [1]fsr1
  6518     0E1A  3FC2               	movwi [2]fsr1
  6519     0E1B  3FC3               	movwi [3]fsr1
  6520                           
  6521                           ;usb/usb_device.c: 314:     }
  6522     0E1C  3001               	movlw	1
  6523     0E1D  00A8               	movwf	??_USBDeviceInit^(0+128)
  6524     0E1E  0828               	movf	??_USBDeviceInit^(0+128),w
  6525     0E1F  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6526     0E20  3008               	movlw	8
  6527     0E21  022F               	subwf	USBDeviceInit@i^(0+128),w
  6528     0E22  1C03               	skipc
  6529     0E23  2E0B               	goto	l5334
  6530                           
  6531                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  6532     0E24  003D               	movlb	29	; select bank29
  6533     0E25  170E               	bsf	14,6	;volatile
  6534                           
  6535                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  6536     0E26  0196               	clrf	22	;volatile
  6537                           
  6538                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  6539     0E27  120E               	bcf	14,4	;volatile
  6540                           
  6541                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  6542     0E28  130E               	bcf	14,6	;volatile
  6543     0E29                     l5346:
  6544                           
  6545                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  6546     0E29  30F7               	movlw	247
  6547     0E2A  0021               	movlb	1	; select bank1
  6548     0E2B  00A8               	movwf	??_USBDeviceInit^(0+128)
  6549     0E2C  0828               	movf	??_USBDeviceInit^(0+128),w
  6550     0E2D  003D               	movlb	29	; select bank29
  6551     0E2E  0590               	andwf	16,f	;volatile
  6552                           
  6553                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  6554     0E2F  0021               	movlb	1	; select bank1
  6555     0E30  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
  6556                           
  6557                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  6558     0E31  0022               	movlb	2	; select bank2
  6559     0E32  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  6560                           
  6561                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  6562     0E33  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  6563     0E34  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  6564                           
  6565                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  6566     0E35  003D               	movlb	29	; select bank29
  6567     0E36  1990               	btfsc	16,3	;volatile
  6568     0E37  2E29               	goto	l5346
  6569                           
  6570                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  6571     0E38  3001               	movlw	1
  6572     0E39  0022               	movlb	2	; select bank2
  6573     0E3A  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6574                           
  6575                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  6576     0E3B  3001               	movlw	1
  6577     0E3C  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6578                           
  6579                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  6580     0E3D  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6581                           
  6582                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  6583     0E3E  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6584                           
  6585                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  6586     0E3F  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  6587                           
  6588                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  6589     0E40  0021               	movlb	1	; select bank1
  6590     0E41  01AF               	clrf	USBDeviceInit@i^(0+128)
  6591     0E42                     l5368:
  6592                           
  6593                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  6594     0E42  352F               	lslf	USBDeviceInit@i^(0+128),w
  6595     0E43  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6596     0E44  0086               	movwf	6
  6597     0E45  0187               	clrf	7
  6598     0E46  3000               	movlw	0
  6599     0E47  3FC0               	movwi [0]fsr1
  6600     0E48  3FC1               	movwi [1]fsr1
  6601                           
  6602                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  6603     0E49  352F               	lslf	USBDeviceInit@i^(0+128),w
  6604     0E4A  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6605     0E4B  0086               	movwf	6
  6606     0E4C  3001               	movlw	1	; select bank2/3
  6607     0E4D  0087               	movwf	7
  6608     0E4E  3000               	movlw	0
  6609     0E4F  3FC0               	movwi [0]fsr1
  6610     0E50  3FC1               	movwi [1]fsr1
  6611                           
  6612                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  6613     0E51  082F               	movf	USBDeviceInit@i^(0+128),w
  6614     0E52  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  6615     0E53  0086               	movwf	6
  6616     0E54  3001               	movlw	1	; select bank2/3
  6617     0E55  0087               	movwf	7
  6618     0E56  0181               	clrf	1
  6619                           
  6620                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  6621     0E57  082F               	movf	USBDeviceInit@i^(0+128),w
  6622     0E58  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  6623     0E59  0086               	movwf	6
  6624     0E5A  3001               	movlw	1	; select bank2/3
  6625     0E5B  0087               	movwf	7
  6626     0E5C  0181               	clrf	1
  6627                           
  6628                           ;usb/usb_device.c: 355:     }
  6629     0E5D  3001               	movlw	1
  6630     0E5E  00A8               	movwf	??_USBDeviceInit^(0+128)
  6631     0E5F  0828               	movf	??_USBDeviceInit^(0+128),w
  6632     0E60  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6633     0E61  3002               	movlw	2
  6634     0E62  022F               	subwf	USBDeviceInit@i^(0+128),w
  6635     0E63  1C03               	skipc
  6636     0E64  2E42               	goto	l5368
  6637                           
  6638                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6639     0E65  3028               	movlw	40
  6640     0E66  0020               	movlb	0	; select bank0
  6641     0E67  00E1               	movwf	_pBDTEntryIn
  6642     0E68  3000               	movlw	0
  6643     0E69  00E2               	movwf	_pBDTEntryIn+1
  6644                           
  6645                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  6646     0E6A  3016               	movlw	22
  6647     0E6B  003D               	movlb	29	; select bank29
  6648     0E6C  0098               	movwf	24	;volatile
  6649                           
  6650                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  6651     0E6D  3040               	movlw	64
  6652     0E6E  0021               	movlb	1	; select bank1
  6653     0E6F  00A8               	movwf	??_USBDeviceInit^(0+128)
  6654     0E70  3000               	movlw	0
  6655     0E71  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  6656     0E72  30FF               	movlw	255
  6657     0E73  0528               	andwf	??_USBDeviceInit^(0+128),w
  6658     0E74  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  6659     0E75  307F               	movlw	127
  6660     0E76  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  6661     0E77  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  6662     0E78  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  6663     0E79  0020               	movlb	0	; select bank0
  6664     0E7A  00A2               	movwf	34	;volatile
  6665     0E7B  0021               	movlb	1	; select bank1
  6666     0E7C  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  6667     0E7D  0020               	movlb	0	; select bank0
  6668     0E7E  00A3               	movwf	35	;volatile
  6669                           
  6670                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  6671     0E7F  3008               	movlw	8
  6672     0E80  00A1               	movwf	33	;volatile
  6673                           
  6674                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  6675     0E81  3004               	movlw	4
  6676     0E82  00A0               	movwf	32	;volatile
  6677                           
  6678                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  6679     0E83  17A0               	bsf	32,7	;volatile
  6680                           
  6681                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  6682     0E84  01EF               	clrf	_USBActiveConfiguration	;volatile
  6683                           
  6684                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  6685     0E85  3000               	movlw	0
  6686     0E86  0023               	movlb	3	; select bank3
  6687     0E87  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  6688     0E88  3000               	movlw	0
  6689     0E89  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  6690     0E8A  3000               	movlw	0
  6691     0E8B  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  6692     0E8C  3000               	movlw	0
  6693     0E8D  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  6694                           
  6695                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  6696     0E8E  0022               	movlb	2	; select bank2
  6697     0E8F  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  6698                           
  6699                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  6700     0E90  0020               	movlb	0	; select bank0
  6701     0E91  01EB               	clrf	_USBDeviceState	;volatile
  6702     0E92  0008               	return
  6703     0E93                     __end_of_USBDeviceInit:
  6704                           
  6705                           	psect	text17
  6706     1DCF                     __ptext17:	
  6707 ;; *************** function _USBDeviceAttach *****************
  6708 ;; Defined at:
  6709 ;;		line 1356 in file "usb/usb_device.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 1F/0
  6720 ;;		On exit  : 1F/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used: 1
  6729 ;; Hardware stack levels required when called: 10
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_SYSTEM_Initialize
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737     1DCF                     _USBDeviceAttach:	
  6738                           ;psect for function _USBDeviceAttach
  6739                           
  6740                           
  6741                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  6745     1DCF  086B               	movf	_USBDeviceState,w
  6746     1DD0  1D03               	btfss	3,2
  6747     1DD1  0008               	return
  6748                           
  6749                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  6750     1DD2  003D               	movlb	29	; select bank29
  6751     1DD3  018E               	clrf	14	;volatile
  6752                           
  6753                           ;usb/usb_device.c: 1367:             UIE = 0;
  6754     1DD4  0192               	clrf	18	;volatile
  6755                           
  6756                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  6757     1DD5  3016               	movlw	22
  6758     1DD6  0091               	movwf	17	;volatile
  6759     1DD7  309F               	movlw	159
  6760     1DD8  0097               	movwf	23	;volatile
  6761     1DD9  307B               	movlw	123
  6762     1DDA  0092               	movwf	18	;volatile
  6763                           
  6764                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  6765     1DDB  0021               	movlb	1	; select bank1
  6766     1DDC  1512               	bsf	18,2	;volatile
  6767     1DDD  170B               	bsf	11,6	;volatile
  6768     1DDE  178B               	bsf	11,7	;volatile
  6769     1DDF                     l541:	
  6770                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6771                           
  6772     1DDF  003D               	movlb	29	; select bank29
  6773     1DE0  198E               	btfsc	14,3	;volatile
  6774     1DE1  2DE4               	goto	l5410
  6775     1DE2  158E               	bsf	14,3	;volatile
  6776     1DE3  2DDF               	goto	l541
  6777     1DE4                     l5410:
  6778                           
  6779                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  6780     1DE4  3001               	movlw	1
  6781     1DE5  0020               	movlb	0	; select bank0
  6782     1DE6  00EB               	movwf	_USBDeviceState	;volatile
  6783     1DE7  0008               	return
  6784     1DE8                     __end_of_USBDeviceAttach:
  6785                           
  6786                           	psect	text18
  6787     1CE1                     __ptext18:	
  6788 ;; *************** function _TMR2_Initialize *****************
  6789 ;; Defined at:
  6790 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;		None
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, pclath, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 1F/1
  6801 ;;		On exit  : 1F/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;Total ram usage:        0 bytes
  6809 ;; Hardware stack levels used: 1
  6810 ;; Hardware stack levels required when called: 11
  6811 ;; This function calls:
  6812 ;;		_TMR2_SetInterruptHandler
  6813 ;; This function is called by:
  6814 ;;		_SYSTEM_Initialize
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818     1CE1                     _TMR2_Initialize:	
  6819                           ;psect for function _TMR2_Initialize
  6820                           
  6821                           
  6822                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6826     1CE1  305D               	movlw	93
  6827     1CE2  0020               	movlb	0	; select bank0
  6828     1CE3  009B               	movwf	27	;volatile
  6829                           
  6830                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  6831     1CE4  019A               	clrf	26	;volatile
  6832                           
  6833                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  6834     1CE5  1091               	bcf	17,1	;volatile
  6835                           
  6836                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  6837     1CE6  0021               	movlb	1	; select bank1
  6838     1CE7  1491               	bsf	17,1	;volatile
  6839                           
  6840                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  6841     1CE8  3000               	movlw	low _TMR2_DefaultInterruptHandler
  6842     1CE9  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6843     1CEA  3008               	movlw	high _TMR2_DefaultInterruptHandler
  6844     1CEB  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6845     1CEC  319C  2435         	fcall	_TMR2_SetInterruptHandler
  6846                           
  6847                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  6848     1CEE  300F               	movlw	15
  6849     1CEF  0020               	movlb	0	; select bank0
  6850     1CF0  009C               	movwf	28	;volatile
  6851     1CF1  0008               	return
  6852     1CF2                     __end_of_TMR2_Initialize:
  6853                           
  6854                           	psect	text19
  6855     1C35                     __ptext19:	
  6856 ;; *************** function _TMR2_SetInterruptHandler *****************
  6857 ;; Defined at:
  6858 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  6861 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg
  6868 ;; Tracked objects:
  6869 ;;		On entry : 1F/1
  6870 ;;		On exit  : 1F/3
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        2 bytes
  6878 ;; Hardware stack levels used: 1
  6879 ;; Hardware stack levels required when called: 10
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_TMR2_Initialize
  6884 ;;		_SysTime_Init
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888     1C35                     _TMR2_SetInterruptHandler:	
  6889                           ;psect for function _TMR2_SetInterruptHandler
  6890                           
  6891                           
  6892                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6896     1C35  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6897     1C36  0023               	movlb	3	; select bank3
  6898     1C37  00D8               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
  6899     1C38  0021               	movlb	1	; select bank1
  6900     1C39  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  6901     1C3A  0023               	movlb	3	; select bank3
  6902     1C3B  00D7               	movwf	_TMR2_InterruptHandler^(0+384)
  6903     1C3C  0008               	return
  6904     1C3D                     __end_of_TMR2_SetInterruptHandler:
  6905                           
  6906                           	psect	text20
  6907     1FD0                     __ptext20:	
  6908 ;; *************** function _PIN_MANAGER_Initialize *****************
  6909 ;; Defined at:
  6910 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : B1F/0
  6921 ;;		On exit  : 1F/3
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used: 1
  6930 ;; Hardware stack levels required when called: 11
  6931 ;; This function calls:
  6932 ;;		_IOCAF4_SetInterruptHandler
  6933 ;;		_IOCAF5_SetInterruptHandler
  6934 ;; This function is called by:
  6935 ;;		_SYSTEM_Initialize
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939     1FD0                     _PIN_MANAGER_Initialize:	
  6940                           ;psect for function _PIN_MANAGER_Initialize
  6941                           
  6942                           
  6943                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  6944                           
  6945                           ;incstack = 0
  6946                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6947     1FD0  0022               	movlb	2	; select bank2
  6948     1FD1  018C               	clrf	12	;volatile
  6949                           
  6950                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  6951     1FD2  018D               	clrf	13	;volatile
  6952                           
  6953                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  6954     1FD3  018E               	clrf	14	;volatile
  6955                           
  6956                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  6957     1FD4  3030               	movlw	48
  6958     1FD5  0021               	movlb	1	; select bank1
  6959     1FD6  008C               	movwf	12	;volatile
  6960                           
  6961                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  6962     1FD7  3070               	movlw	112
  6963     1FD8  008D               	movwf	13	;volatile
  6964                           
  6965                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  6966     1FD9  30FF               	movlw	255
  6967     1FDA  008E               	movwf	14	;volatile
  6968                           
  6969                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  6970     1FDB  30CF               	movlw	207
  6971     1FDC  0023               	movlb	3	; select bank3
  6972     1FDD  008E               	movwf	14	;volatile
  6973                           
  6974                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  6975     1FDE  018D               	clrf	13	;volatile
  6976                           
  6977                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  6978     1FDF  018C               	clrf	12	;volatile
  6979                           
  6980                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  6981     1FE0  0024               	movlb	4	; select bank4
  6982     1FE1  018D               	clrf	13	;volatile
  6983                           
  6984                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  6985     1FE2  3030               	movlw	48
  6986     1FE3  008C               	movwf	12	;volatile
  6987                           
  6988                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  6989     1FE4  0021               	movlb	1	; select bank1
  6990     1FE5  1395               	bcf	21,7	;volatile
  6991                           
  6992                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  6993     1FE6  0022               	movlb	2	; select bank2
  6994     1FE7  019D               	clrf	29	;volatile
  6995                           
  6996                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  6997     1FE8  0027               	movlb	7	; select bank7
  6998     1FE9  1213               	bcf	19,4	;volatile
  6999                           
  7000                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  7001     1FEA  1293               	bcf	19,5	;volatile
  7002                           
  7003                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  7004     1FEB  1612               	bsf	18,4	;volatile
  7005                           
  7006                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  7007     1FEC  1692               	bsf	18,5	;volatile
  7008                           
  7009                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  7010     1FED  1211               	bcf	17,4	;volatile
  7011                           
  7012                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  7013     1FEE  1291               	bcf	17,5	;volatile
  7014                           
  7015                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  7016     1FEF  3084               	movlw	low _IOCAF4_DefaultInterruptHandler
  7017     1FF0  0021               	movlb	1	; select bank1
  7018     1FF1  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7019     1FF2  3010               	movlw	high _IOCAF4_DefaultInterruptHandler
  7020     1FF3  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7021     1FF4  319B  23FD  319F   	fcall	_IOCAF4_SetInterruptHandler
  7022                           
  7023                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  7024     1FF7  3085               	movlw	low _IOCAF5_DefaultInterruptHandler
  7025     1FF8  0021               	movlb	1	; select bank1
  7026     1FF9  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7027     1FFA  3010               	movlw	high _IOCAF5_DefaultInterruptHandler
  7028     1FFB  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7029     1FFC  319C  2405         	fcall	_IOCAF5_SetInterruptHandler
  7030                           
  7031                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  7032     1FFE  158B               	bsf	11,3	;volatile
  7033     1FFF  0008               	return
  7034     2000                     __end_of_PIN_MANAGER_Initialize:
  7035                           
  7036                           	psect	text21
  7037     1CB2                     __ptext21:	
  7038 ;; *************** function _OSCILLATOR_Initialize *****************
  7039 ;; Defined at:
  7040 ;;		line 60 in file "mcc_generated_files/mcc.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, status,2
  7049 ;; Tracked objects:
  7050 ;;		On entry : 1F/3
  7051 ;;		On exit  : 1F/1
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:        0 bytes
  7059 ;; Hardware stack levels used: 1
  7060 ;; Hardware stack levels required when called: 10
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_SYSTEM_Initialize
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068     1CB2                     _OSCILLATOR_Initialize:	
  7069                           ;psect for function _OSCILLATOR_Initialize
  7070                           
  7071                           
  7072                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  7073                           
  7074                           ;incstack = 0
  7075                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7076     1CB2  30FC               	movlw	252
  7077     1CB3  0021               	movlb	1	; select bank1
  7078     1CB4  0099               	movwf	25	;volatile
  7079                           
  7080                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  7081     1CB5  0198               	clrf	24	;volatile
  7082                           
  7083                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  7084     1CB6  3090               	movlw	144
  7085     1CB7  0027               	movlb	7	; select bank7
  7086     1CB8  009B               	movwf	27	;volatile
  7087                           
  7088                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  7089     1CB9  0022               	movlb	2	; select bank2
  7090     1CBA  0196               	clrf	22	;volatile
  7091     1CBB                     l110:	
  7092                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  7093                           
  7094                           
  7095                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  7096     1CBB  0021               	movlb	1	; select bank1
  7097     1CBC  1B1A               	btfsc	26,6	;volatile
  7098     1CBD  0008               	return
  7099     1CBE  2CBB               	goto	l110
  7100     1CBF                     __end_of_OSCILLATOR_Initialize:
  7101                           
  7102                           	psect	text22
  7103     11CF                     __ptext22:	
  7104 ;; *************** function _EUSART_Initialize *****************
  7105 ;; Defined at:
  7106 ;;		line 88 in file "mcc_generated_files/eusart.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;		None
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 1F/0
  7117 ;;		On exit  : 1F/1
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;Total ram usage:        0 bytes
  7125 ;; Hardware stack levels used: 1
  7126 ;; Hardware stack levels required when called: 11
  7127 ;; This function calls:
  7128 ;;		_EUSART_SetErrorHandler
  7129 ;;		_EUSART_SetFramingErrorHandler
  7130 ;;		_EUSART_SetOverrunErrorHandler
  7131 ;;		_EUSART_SetRxInterruptHandler
  7132 ;;		_EUSART_SetTxInterruptHandler
  7133 ;; This function is called by:
  7134 ;;		_SYSTEM_Initialize
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138     11CF                     _EUSART_Initialize:	
  7139                           ;psect for function _EUSART_Initialize
  7140                           
  7141                           
  7142                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7146     11CF  0021               	movlb	1	; select bank1
  7147     11D0  1291               	bcf	17,5	;volatile
  7148                           
  7149                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7150     11D1  30DF               	movlw	low _EUSART_Receive_ISR
  7151     11D2  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  7152     11D3  3010               	movlw	high _EUSART_Receive_ISR
  7153     11D4  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  7154     11D5  319C  2425  3191   	fcall	_EUSART_SetRxInterruptHandler
  7155                           
  7156                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  7157     11D8  0021               	movlb	1	; select bank1
  7158     11D9  1211               	bcf	17,4	;volatile
  7159                           
  7160                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  7161     11DA  3072               	movlw	low _EUSART_Transmit_ISR
  7162     11DB  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  7163     11DC  301E               	movlw	high _EUSART_Transmit_ISR
  7164     11DD  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  7165     11DE  319C  242D  3191   	fcall	_EUSART_SetTxInterruptHandler
  7166                           
  7167                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  7168     11E1  3008               	movlw	8
  7169     11E2  009F               	movwf	31	;volatile
  7170                           
  7171                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  7172     11E3  3090               	movlw	144
  7173     11E4  009D               	movwf	29	;volatile
  7174                           
  7175                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  7176     11E5  3024               	movlw	36
  7177     11E6  009E               	movwf	30	;volatile
  7178                           
  7179                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  7180     11E7  30E1               	movlw	225
  7181     11E8  009B               	movwf	27	;volatile
  7182                           
  7183                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  7184     11E9  3004               	movlw	4
  7185     11EA  009C               	movwf	28	;volatile
  7186                           
  7187                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7188     11EB  30E1               	movlw	low _EUSART_DefaultFramingErrorHandler
  7189     11EC  0021               	movlb	1	; select bank1
  7190     11ED  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  7191     11EE  301B               	movlw	high _EUSART_DefaultFramingErrorHandler
  7192     11EF  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  7193     11F0  319C  2415  3191   	fcall	_EUSART_SetFramingErrorHandler
  7194                           
  7195                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7196     11F3  30E5               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7197     11F4  0021               	movlb	1	; select bank1
  7198     11F5  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  7199     11F6  301B               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7200     11F7  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  7201     11F8  319C  241D  3191   	fcall	_EUSART_SetOverrunErrorHandler
  7202                           
  7203                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7204     11FB  30E2               	movlw	low _EUSART_DefaultErrorHandler
  7205     11FC  0021               	movlb	1	; select bank1
  7206     11FD  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  7207     11FE  301B               	movlw	high _EUSART_DefaultErrorHandler
  7208     11FF  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  7209     1200  319C  240D         	fcall	_EUSART_SetErrorHandler
  7210                           
  7211                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  7212     1202  01DE               	clrf	_eusartRxLastError^(0+384)	;volatile
  7213                           
  7214                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  7215     1203  0022               	movlb	2	; select bank2
  7216     1204  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  7217                           
  7218                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  7219     1205  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
  7220                           
  7221                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7222     1206  3008               	movlw	8
  7223     1207  0020               	movlb	0	; select bank0
  7224     1208  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  7225                           
  7226                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  7227     1209  01EC               	clrf	_eusartRxHead	;volatile
  7228                           
  7229                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  7230     120A  0023               	movlb	3	; select bank3
  7231     120B  01E0               	clrf	_eusartRxTail^(0+384)	;volatile
  7232                           
  7233                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  7234     120C  01DF               	clrf	_eusartRxCount^(0+384)	;volatile
  7235                           
  7236                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  7237     120D  0021               	movlb	1	; select bank1
  7238     120E  1691               	bsf	17,5	;volatile
  7239     120F  0008               	return
  7240     1210                     __end_of_EUSART_Initialize:
  7241                           
  7242                           	psect	text23
  7243     1C2D                     __ptext23:	
  7244 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7245 ;; Defined at:
  7246 ;;		line 276 in file "mcc_generated_files/eusart.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7249 ;;		 -> EUSART_Transmit_ISR(1), 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg
  7256 ;; Tracked objects:
  7257 ;;		On entry : 1F/1
  7258 ;;		On exit  : 1F/3
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7261 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;Total ram usage:        2 bytes
  7266 ;; Hardware stack levels used: 1
  7267 ;; Hardware stack levels required when called: 10
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_EUSART_Initialize
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275     1C2D                     _EUSART_SetTxInterruptHandler:	
  7276                           ;psect for function _EUSART_SetTxInterruptHandler
  7277                           
  7278                           
  7279                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7283     1C2D  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  7284     1C2E  0023               	movlb	3	; select bank3
  7285     1C2F  00DC               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384)
  7286     1C30  0021               	movlb	1	; select bank1
  7287     1C31  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  7288     1C32  0023               	movlb	3	; select bank3
  7289     1C33  00DB               	movwf	_EUSART_TxDefaultInterruptHandler^(0+384)
  7290     1C34  0008               	return
  7291     1C35                     __end_of_EUSART_SetTxInterruptHandler:
  7292                           
  7293                           	psect	text24
  7294     1C25                     __ptext24:	
  7295 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7296 ;; Defined at:
  7297 ;;		line 280 in file "mcc_generated_files/eusart.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7300 ;;		 -> EUSART_Receive_ISR(1), 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      void 
  7305 ;; Registers used:
  7306 ;;		wreg
  7307 ;; Tracked objects:
  7308 ;;		On entry : 1F/1
  7309 ;;		On exit  : 1F/3
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        2 bytes
  7317 ;; Hardware stack levels used: 1
  7318 ;; Hardware stack levels required when called: 10
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_EUSART_Initialize
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326     1C25                     _EUSART_SetRxInterruptHandler:	
  7327                           ;psect for function _EUSART_SetRxInterruptHandler
  7328                           
  7329                           
  7330                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7334     1C25  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  7335     1C26  0023               	movlb	3	; select bank3
  7336     1C27  00DA               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384)
  7337     1C28  0021               	movlb	1	; select bank1
  7338     1C29  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  7339     1C2A  0023               	movlb	3	; select bank3
  7340     1C2B  00D9               	movwf	_EUSART_RxDefaultInterruptHandler^(0+384)
  7341     1C2C  0008               	return
  7342     1C2D                     __end_of_EUSART_SetRxInterruptHandler:
  7343                           
  7344                           	psect	text25
  7345     1C1D                     __ptext25:	
  7346 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7347 ;; Defined at:
  7348 ;;		line 268 in file "mcc_generated_files/eusart.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7351 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg
  7358 ;; Tracked objects:
  7359 ;;		On entry : 1F/1
  7360 ;;		On exit  : 1F/3
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7363 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used: 1
  7369 ;; Hardware stack levels required when called: 10
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_EUSART_Initialize
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377     1C1D                     _EUSART_SetOverrunErrorHandler:	
  7378                           ;psect for function _EUSART_SetOverrunErrorHandler
  7379                           
  7380                           
  7381                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  7382                           
  7383                           ;incstack = 0
  7384                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7385     1C1D  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  7386     1C1E  0023               	movlb	3	; select bank3
  7387     1C1F  00D4               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  7388     1C20  0021               	movlb	1	; select bank1
  7389     1C21  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  7390     1C22  0023               	movlb	3	; select bank3
  7391     1C23  00D3               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  7392     1C24  0008               	return
  7393     1C25                     __end_of_EUSART_SetOverrunErrorHandler:
  7394                           
  7395                           	psect	text26
  7396     1C15                     __ptext26:	
  7397 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7398 ;; Defined at:
  7399 ;;		line 264 in file "mcc_generated_files/eusart.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7402 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg
  7409 ;; Tracked objects:
  7410 ;;		On entry : 1F/1
  7411 ;;		On exit  : 1F/3
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7414 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;Total ram usage:        2 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; Hardware stack levels required when called: 10
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_EUSART_Initialize
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428     1C15                     _EUSART_SetFramingErrorHandler:	
  7429                           ;psect for function _EUSART_SetFramingErrorHandler
  7430                           
  7431                           
  7432                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  7433                           
  7434                           ;incstack = 0
  7435                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7436     1C15  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  7437     1C16  0023               	movlb	3	; select bank3
  7438     1C17  00D6               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  7439     1C18  0021               	movlb	1	; select bank1
  7440     1C19  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  7441     1C1A  0023               	movlb	3	; select bank3
  7442     1C1B  00D5               	movwf	_EUSART_FramingErrorHandler^(0+384)
  7443     1C1C  0008               	return
  7444     1C1D                     __end_of_EUSART_SetFramingErrorHandler:
  7445                           
  7446                           	psect	text27
  7447     1C0D                     __ptext27:	
  7448 ;; *************** function _EUSART_SetErrorHandler *****************
  7449 ;; Defined at:
  7450 ;;		line 272 in file "mcc_generated_files/eusart.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7453 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg
  7460 ;; Tracked objects:
  7461 ;;		On entry : 1F/1
  7462 ;;		On exit  : 1F/3
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7465 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 10
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_EUSART_Initialize
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479     1C0D                     _EUSART_SetErrorHandler:	
  7480                           ;psect for function _EUSART_SetErrorHandler
  7481                           
  7482                           
  7483                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7487     1C0D  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  7488     1C0E  0023               	movlb	3	; select bank3
  7489     1C0F  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  7490     1C10  0021               	movlb	1	; select bank1
  7491     1C11  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  7492     1C12  0023               	movlb	3	; select bank3
  7493     1C13  00D1               	movwf	_EUSART_ErrorHandler^(0+384)
  7494     1C14  0008               	return
  7495     1C15                     __end_of_EUSART_SetErrorHandler:
  7496                           
  7497                           	psect	text28
  7498     1E1E                     __ptext28:	
  7499 ;; *************** function _PS2Keyboard_Init *****************
  7500 ;; Defined at:
  7501 ;;		line 38 in file "ps2_keyboard.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      void 
  7508 ;; Registers used:
  7509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 1F/0
  7512 ;;		On exit  : 1F/3
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used: 1
  7521 ;; Hardware stack levels required when called: 11
  7522 ;; This function calls:
  7523 ;;		_GenericQueue_Init
  7524 ;;		_IOCAF4_SetInterruptHandler
  7525 ;;		_IOCAF5_SetInterruptHandler
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531     1E1E                     _PS2Keyboard_Init:	
  7532                           ;psect for function _PS2Keyboard_Init
  7533                           
  7534                           
  7535                           ;ps2_keyboard.c: 39:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7539     1E1E  3091               	movlw	145
  7540     1E1F  0021               	movlb	1	; select bank1
  7541     1E20  00A8               	movwf	GenericQueue_Init@q^(0+128)
  7542     1E21  3023               	movlw	35
  7543     1E22  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  7544     1E23  3003               	movlw	3
  7545     1E24  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  7546     1E25  3000               	movlw	0
  7547     1E26  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  7548     1E27  319E  26D2  319E   	fcall	_GenericQueue_Init
  7549                           
  7550                           ;ps2_keyboard.c: 40:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  7551     1E2A  3046               	movlw	low _PS2Keyboard_ClockInterrupt
  7552     1E2B  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7553     1E2C  300F               	movlw	high _PS2Keyboard_ClockInterrupt
  7554     1E2D  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7555     1E2E  319B  23FD  319E   	fcall	_IOCAF4_SetInterruptHandler
  7556                           
  7557                           ;ps2_keyboard.c: 41:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  7558     1E31  30BF               	movlw	low _PS2Keyboard_DataInterrupt
  7559     1E32  0021               	movlb	1	; select bank1
  7560     1E33  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7561     1E34  301C               	movlw	high _PS2Keyboard_DataInterrupt
  7562     1E35  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7563     1E36  319C  2405         	fcall	_IOCAF5_SetInterruptHandler
  7564     1E38  0008               	return
  7565     1E39                     __end_of_PS2Keyboard_Init:
  7566                           
  7567                           	psect	text29
  7568     1C05                     __ptext29:	
  7569 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  7570 ;; Defined at:
  7571 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7574 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg
  7581 ;; Tracked objects:
  7582 ;;		On entry : 1F/1
  7583 ;;		On exit  : 1F/3
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7586 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;Total ram usage:        2 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 10
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_PIN_MANAGER_Initialize
  7597 ;;		_PS2Keyboard_Init
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601     1C05                     _IOCAF5_SetInterruptHandler:	
  7602                           ;psect for function _IOCAF5_SetInterruptHandler
  7603                           
  7604                           
  7605                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  7609     1C05  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7610     1C06  0023               	movlb	3	; select bank3
  7611     1C07  00E6               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  7612     1C08  0021               	movlb	1	; select bank1
  7613     1C09  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  7614     1C0A  0023               	movlb	3	; select bank3
  7615     1C0B  00E5               	movwf	_IOCAF5_InterruptHandler^(0+384)
  7616     1C0C  0008               	return
  7617     1C0D                     __end_of_IOCAF5_SetInterruptHandler:
  7618                           
  7619                           	psect	text30
  7620     1BFD                     __ptext30:	
  7621 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  7622 ;; Defined at:
  7623 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7626 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg
  7633 ;; Tracked objects:
  7634 ;;		On entry : 1F/1
  7635 ;;		On exit  : 1F/3
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        2 bytes
  7643 ;; Hardware stack levels used: 1
  7644 ;; Hardware stack levels required when called: 10
  7645 ;; This function calls:
  7646 ;;		Nothing
  7647 ;; This function is called by:
  7648 ;;		_PIN_MANAGER_Initialize
  7649 ;;		_PS2Keyboard_Init
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653     1BFD                     _IOCAF4_SetInterruptHandler:	
  7654                           ;psect for function _IOCAF4_SetInterruptHandler
  7655                           
  7656                           
  7657                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  7661     1BFD  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7662     1BFE  0023               	movlb	3	; select bank3
  7663     1BFF  00E8               	movwf	(_IOCAF4_InterruptHandler+1)^(0+384)
  7664     1C00  0021               	movlb	1	; select bank1
  7665     1C01  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  7666     1C02  0023               	movlb	3	; select bank3
  7667     1C03  00E7               	movwf	_IOCAF4_InterruptHandler^(0+384)
  7668     1C04  0008               	return
  7669     1C05                     __end_of_IOCAF4_SetInterruptHandler:
  7670                           
  7671                           	psect	text31
  7672     1ED2                     __ptext31:	
  7673 ;; *************** function _GenericQueue_Init *****************
  7674 ;; Defined at:
  7675 ;;		line 4 in file "generic_queue.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  q               2    0[BANK1 ] PTR struct .
  7678 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  7679 ;;  element_size    2    2[BANK1 ] unsigned int 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 1F/1
  7688 ;;		On exit  : 1F/1
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        4 bytes
  7696 ;; Hardware stack levels used: 1
  7697 ;; Hardware stack levels required when called: 10
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_PS2Keyboard_Init
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705     1ED2                     _GenericQueue_Init:	
  7706                           ;psect for function _GenericQueue_Init
  7707                           
  7708                           
  7709                           ;generic_queue.c: 5:     q->element_size = element_size;
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  7713     1ED2  0828               	movf	GenericQueue_Init@q^(0+128),w
  7714     1ED3  3E5A               	addlw	90
  7715     1ED4  0086               	movwf	6
  7716     1ED5  3000               	movlw	0
  7717     1ED6  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7718     1ED7  0087               	movwf	7
  7719     1ED8  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  7720     1ED9  3FC0               	movwi [0]fsr1
  7721     1EDA  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  7722     1EDB  3FC1               	movwi [1]fsr1
  7723                           
  7724                           ;generic_queue.c: 6:     q->front = 0;
  7725     1EDC  0828               	movf	GenericQueue_Init@q^(0+128),w
  7726     1EDD  3E5C               	addlw	92
  7727     1EDE  0086               	movwf	6
  7728     1EDF  3000               	movlw	0
  7729     1EE0  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7730     1EE1  0087               	movwf	7
  7731     1EE2  0181               	clrf	1
  7732                           
  7733                           ;generic_queue.c: 7:     q->rear = 0;
  7734     1EE3  0828               	movf	GenericQueue_Init@q^(0+128),w
  7735     1EE4  3E5D               	addlw	93
  7736     1EE5  0086               	movwf	6
  7737     1EE6  3000               	movlw	0
  7738     1EE7  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7739     1EE8  0087               	movwf	7
  7740     1EE9  0181               	clrf	1
  7741                           
  7742                           ;generic_queue.c: 8:     q->size = 0;
  7743     1EEA  0828               	movf	GenericQueue_Init@q^(0+128),w
  7744     1EEB  3E5E               	addlw	94
  7745     1EEC  0086               	movwf	6
  7746     1EED  3000               	movlw	0
  7747     1EEE  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7748     1EEF  0087               	movwf	7
  7749     1EF0  0181               	clrf	1
  7750     1EF1  0008               	return
  7751     1EF2                     __end_of_GenericQueue_Init:
  7752                           
  7753                           	psect	text32
  7754     1E39                     __ptext32:	
  7755 ;; *************** function _PS2Keyboard_GetScanCode *****************
  7756 ;; Defined at:
  7757 ;;		line 44 in file "ps2_keyboard.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  7760 ;;		 -> main@scanCode(3), 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  7763 ;;		 -> main@scanCode(3), 
  7764 ;;  ret             1   32[BANK1 ] _Bool 
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      _Bool 
  7767 ;; Registers used:
  7768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 2/1
  7771 ;;		On exit  : 1F/1
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;Total ram usage:        2 bytes
  7779 ;; Hardware stack levels used: 1
  7780 ;; Hardware stack levels required when called: 12
  7781 ;; This function calls:
  7782 ;;		_GenericQueue_Dequeue
  7783 ;;		_GenericQueue_IsEmpty
  7784 ;; This function is called by:
  7785 ;;		_main
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789     1E39                     _PS2Keyboard_GetScanCode:	
  7790                           ;psect for function _PS2Keyboard_GetScanCode
  7791                           
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7795                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  7796     1E39  0021               	movlb	1	; select bank1
  7797     1E3A  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  7798                           
  7799                           ;ps2_keyboard.c: 47:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  7800     1E3B  3091               	movlw	145
  7801     1E3C  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7802     1E3D  3023               	movlw	35
  7803     1E3E  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  7804     1E3F  319C  24F2  319E   	fcall	_GenericQueue_IsEmpty
  7805     1E42  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7806     1E43  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7807     1E44  1D03               	btfss	3,2
  7808     1E45  2E52               	goto	l5896
  7809                           
  7810                           ;ps2_keyboard.c: 48:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  7811     1E46  3091               	movlw	145
  7812     1E47  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  7813     1E48  3023               	movlw	35
  7814     1E49  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  7815     1E4A  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  7816     1E4B  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  7817     1E4C  3187  2796  319E   	fcall	_GenericQueue_Dequeue
  7818                           
  7819                           ;ps2_keyboard.c: 49:         ret = 1;
  7820     1E4F  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7821     1E50  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  7822                           
  7823                           ;ps2_keyboard.c: 50:     } else {
  7824     1E51  2E53               	goto	l5898
  7825     1E52                     l5896:
  7826                           
  7827                           ;ps2_keyboard.c: 51:         ret = 0;
  7828     1E52  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7829     1E53                     l5898:
  7830                           
  7831                           ;ps2_keyboard.c: 54:     return ret;
  7832     1E53  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  7833     1E54  0008               	return
  7834     1E55                     __end_of_PS2Keyboard_GetScanCode:
  7835                           
  7836                           	psect	text33
  7837     0796                     __ptext33:	
  7838 ;; *************** function _GenericQueue_Dequeue *****************
  7839 ;; Defined at:
  7840 ;;		line 27 in file "generic_queue.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  q               2   24[BANK1 ] PTR struct .
  7843 ;;		 -> keyboardScanCodeQueue(95), 
  7844 ;;  item            1   26[BANK1 ] PTR void 
  7845 ;;		 -> main@scanCode(3), 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 1F/1
  7854 ;;		On exit  : 1F/1
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:        7 bytes
  7862 ;; Hardware stack levels used: 1
  7863 ;; Hardware stack levels required when called: 11
  7864 ;; This function calls:
  7865 ;;		_GenericQueue_IsEmpty
  7866 ;;		___awmod
  7867 ;;		___wmul
  7868 ;;		_memcpy
  7869 ;; This function is called by:
  7870 ;;		_PS2Keyboard_GetScanCode
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874     0796                     _GenericQueue_Dequeue:	
  7875                           ;psect for function _GenericQueue_Dequeue
  7876                           
  7877                           
  7878                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7882     0796  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  7883     0797  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  7884     0798  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7885     0799  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7886     079A  319C  24F2  3187   	fcall	_GenericQueue_IsEmpty
  7887     079D  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7888     079E  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7889     079F  1D03               	btfss	3,2
  7890     07A0  0008               	return
  7891                           
  7892                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  7893     07A1  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  7894     07A2  00B5               	movwf	memcpy@d1^(0+128)
  7895     07A3  3001               	movlw	1
  7896     07A4  00B6               	movwf	(memcpy@d1+1)^(0+128)
  7897     07A5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7898     07A6  3E5C               	addlw	92
  7899     07A7  0086               	movwf	6
  7900     07A8  3000               	movlw	0
  7901     07A9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7902     07AA  0087               	movwf	7
  7903     07AB  0801               	movf	1,w
  7904     07AC  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  7905     07AD  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  7906     07AE  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  7907     07AF  00AF               	movwf	___wmul@multiplier^(0+128)
  7908     07B0  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  7909     07B1  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7910     07B2  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7911     07B3  3E5A               	addlw	90
  7912     07B4  0086               	movwf	6
  7913     07B5  3000               	movlw	0
  7914     07B6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7915     07B7  0087               	movwf	7
  7916     07B8  3F40               	moviw [0]fsr1
  7917     07B9  00B1               	movwf	___wmul@multiplicand^(0+128)
  7918     07BA  3F41               	moviw [1]fsr1
  7919     07BB  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7920     07BC  319E  2603  3187   	fcall	___wmul
  7921     07BF  082F               	movf	?___wmul^(0+128),w
  7922     07C0  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  7923     07C1  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  7924     07C2  0830               	movf	(?___wmul+1)^(0+128),w
  7925     07C3  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7926     07C4  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  7927     07C5  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  7928     07C6  00B7               	movwf	memcpy@s1^(0+128)
  7929     07C7  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  7930     07C8  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7931     07C9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7932     07CA  3E5A               	addlw	90
  7933     07CB  0086               	movwf	6
  7934     07CC  3000               	movlw	0
  7935     07CD  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7936     07CE  0087               	movwf	7
  7937     07CF  3F40               	moviw [0]fsr1
  7938     07D0  00B9               	movwf	memcpy@n^(0+128)
  7939     07D1  3F41               	moviw [1]fsr1
  7940     07D2  00BA               	movwf	(memcpy@n+1)^(0+128)
  7941     07D3  319F  275B  3187   	fcall	_memcpy
  7942                           
  7943                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  7944     07D6  300F               	movlw	15
  7945     07D7  00A8               	movwf	___awmod@divisor^(0+128)
  7946     07D8  3000               	movlw	0
  7947     07D9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7948     07DA  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7949     07DB  3E5C               	addlw	92
  7950     07DC  0086               	movwf	6
  7951     07DD  3000               	movlw	0
  7952     07DE  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7953     07DF  0087               	movwf	7
  7954     07E0  0801               	movf	1,w
  7955     07E1  3E01               	addlw	1
  7956     07E2  00AA               	movwf	___awmod@dividend^(0+128)
  7957     07E3  3000               	movlw	0
  7958     07E4  1803               	skipnc
  7959     07E5  3001               	movlw	1
  7960     07E6  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7961     07E7  3192  2298         	fcall	___awmod
  7962     07E9  0828               	movf	?___awmod^(0+128),w
  7963     07EA  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  7964     07EB  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7965     07EC  3E5C               	addlw	92
  7966     07ED  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  7967     07EE  3000               	movlw	0
  7968     07EF  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7969     07F0  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  7970     07F1  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  7971     07F2  0086               	movwf	6
  7972     07F3  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  7973     07F4  0087               	movwf	7
  7974     07F5  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  7975     07F6  0081               	movwf	1
  7976                           
  7977                           ;generic_queue.c: 31:         q->size--;
  7978     07F7  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7979     07F8  3E5E               	addlw	94
  7980     07F9  0086               	movwf	6
  7981     07FA  3000               	movlw	0
  7982     07FB  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7983     07FC  0087               	movwf	7
  7984     07FD  3001               	movlw	1
  7985     07FE  0281               	subwf	1,f
  7986     07FF  0008               	return
  7987     0800                     __end_of_GenericQueue_Dequeue:
  7988                           
  7989                           	psect	text34
  7990     1BF5                     __ptext34:	
  7991 ;; *************** function _EUSART_is_tx_ready *****************
  7992 ;; Defined at:
  7993 ;;		line 132 in file "mcc_generated_files/eusart.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;                  1    wreg      _Bool 
  8000 ;; Registers used:
  8001 ;;		wreg, status,2, status,0
  8002 ;; Tracked objects:
  8003 ;;		On entry : 1D/2
  8004 ;;		On exit  : 1F/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used: 1
  8013 ;; Hardware stack levels required when called: 10
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021     1BF5                     _EUSART_is_tx_ready:	
  8022                           ;psect for function _EUSART_is_tx_ready
  8023                           
  8024                           
  8025                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  8029     1BF5  0020               	movlb	0	; select bank0
  8030     1BF6  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  8031     1BF7  1903               	btfsc	3,2
  8032     1BF8  2BFB               	goto	u5240
  8033     1BF9  3001               	movlw	1
  8034     1BFA  0008               	return
  8035     1BFB                     u5240:
  8036     1BFB  3000               	movlw	0
  8037     1BFC  0008               	return
  8038     1BFD                     __end_of_EUSART_is_tx_ready:
  8039                           
  8040                           	psect	text35
  8041     1F81                     __ptext35:	
  8042 ;; *************** function _EUSART_Write *****************
  8043 ;; Defined at:
  8044 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  txData          1    wreg     unsigned char 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  txData          1    1[BANK1 ] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 1F/2
  8055 ;;		On exit  : 1F/1
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;Total ram usage:        2 bytes
  8063 ;; Hardware stack levels used: 1
  8064 ;; Hardware stack levels required when called: 10
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_main
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072     1F81                     _EUSART_Write:	
  8073                           ;psect for function _EUSART_Write
  8074                           
  8075                           
  8076                           ;incstack = 0
  8077                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8078                           ;EUSART_Write@txData stored from wreg
  8079     1F81  0021               	movlb	1	; select bank1
  8080     1F82  00A9               	movwf	EUSART_Write@txData^(0+128)
  8081     1F83                     l5830:	
  8082                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  8083                           
  8084                           
  8085                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  8086     1F83  0020               	movlb	0	; select bank0
  8087     1F84  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  8088     1F85  1903               	btfsc	3,2
  8089     1F86  2F83               	goto	l5830
  8090                           
  8091                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  8092     1F87  0021               	movlb	1	; select bank1
  8093     1F88  1A11               	btfsc	17,4	;volatile
  8094     1F89  2F8E               	goto	l299
  8095                           
  8096                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  8097     1F8A  0829               	movf	EUSART_Write@txData^(0+128),w
  8098     1F8B  0023               	movlb	3	; select bank3
  8099     1F8C  009A               	movwf	26	;volatile
  8100                           
  8101                           ;mcc_generated_files/eusart.c: 182:     }
  8102     1F8D  2FA4               	goto	l5844
  8103     1F8E                     l299:	
  8104                           ;mcc_generated_files/eusart.c: 183:     else
  8105                           
  8106                           
  8107                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  8108     1F8E  1211               	bcf	17,4	;volatile
  8109                           
  8110                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  8111     1F8F  0022               	movlb	2	; select bank2
  8112     1F90  0849               	movf	_eusartTxHead^(0+256),w
  8113     1F91  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8114     1F92  0086               	movwf	6
  8115     1F93  3001               	movlw	1	; select bank3/4
  8116     1F94  0087               	movwf	7
  8117     1F95  0021               	movlb	1	; select bank1
  8118     1F96  0829               	movf	EUSART_Write@txData^(0+128),w
  8119     1F97  0081               	movwf	1
  8120     1F98  3001               	movlw	1
  8121     1F99  00A8               	movwf	??_EUSART_Write^(0+128)
  8122     1F9A  0828               	movf	??_EUSART_Write^(0+128),w
  8123     1F9B  0022               	movlb	2	; select bank2
  8124     1F9C  07C9               	addwf	_eusartTxHead^(0+256),f	;volatile
  8125                           
  8126                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8127     1F9D  3008               	movlw	8
  8128     1F9E  0249               	subwf	_eusartTxHead^(0+256),w
  8129     1F9F  1803               	btfsc	3,0
  8130                           
  8131                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  8132     1FA0  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  8133                           
  8134                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  8135     1FA1  3001               	movlw	1
  8136     1FA2  0020               	movlb	0	; select bank0
  8137     1FA3  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  8138     1FA4                     l5844:
  8139                           
  8140                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  8141     1FA4  0021               	movlb	1	; select bank1
  8142     1FA5  1611               	bsf	17,4	;volatile
  8143     1FA6  0008               	return
  8144     1FA7                     __end_of_EUSART_Write:
  8145                           
  8146                           	psect	text36
  8147     007F                     __ptext36:	
  8148 ;; *************** function _APP_KeyboardTasks *****************
  8149 ;; Defined at:
  8150 ;;		line 319 in file "app_device_keyboard.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8153 ;;		 -> main@scanCode(3), NULL(0), 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  8156 ;;		 -> main@scanCode(3), NULL(0), 
  8157 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  8158 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  8159 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  8160 ;;  usbHidCode      1   35[BANK1 ] unsigned char 
  8161 ;;  TimeDeltaMil    2   40[BANK1 ] int 
  8162 ;;  i               1   42[BANK1 ] unsigned char 
  8163 ;;  needToSendNe    1   37[BANK1 ] _Bool 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 1F/2
  8170 ;;		On exit  : 2/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:       11 bytes
  8178 ;; Hardware stack levels used: 1
  8179 ;; Hardware stack levels required when called: 12
  8180 ;; This function calls:
  8181 ;;		_APP_KeyboardProcessOutputReport
  8182 ;;		_GenericQueue_Contains
  8183 ;;		_GenericQueue_CopyToArray
  8184 ;;		_GenericQueue_Enqueue
  8185 ;;		_GenericQueue_Remove
  8186 ;;		_PS2USB_ScanCodeToUSBHID
  8187 ;;		_USBTransferOnePacket
  8188 ;;		_memset
  8189 ;; This function is called by:
  8190 ;;		_main
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194     007F                     _APP_KeyboardTasks:	
  8195                           ;psect for function _APP_KeyboardTasks
  8196                           
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8200                           ;APP_KeyboardTasks@scanCode stored from wreg
  8201     007F  0021               	movlb	1	; select bank1
  8202     0080  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  8203                           
  8204                           ;app_device_keyboard.c: 320:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 321:     unsigned char i;;app_device_keyboard.c: 322:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 325:     if (scanCode != ((void*)0) && scanCode->value != 0x
      +                          00) {
  8205     0081  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8206     0082  1903               	btfsc	3,2
  8207     0083  299D               	goto	l6626
  8208     0084  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8209     0085  0086               	movwf	6
  8210     0086  3001               	movlw	1	; select bank2/3
  8211     0087  0087               	movwf	7
  8212     0088  0801               	movf	1,w
  8213     0089  1903               	btfsc	3,2
  8214     008A  299D               	goto	l6626
  8215                           
  8216                           ;app_device_keyboard.c: 326:         if (scanCode->isExtend) {
  8217     008B  0A53               	incf	APP_KeyboardTasks@scanCode^(0+128),w
  8218     008C  0086               	movwf	6
  8219     008D  3001               	movlw	1	; select bank2/3
  8220     008E  0087               	movwf	7
  8221     008F  0801               	movf	1,w
  8222     0090  1903               	btfsc	3,2
  8223     0091  28FA               	goto	l6586
  8224                           
  8225                           ;app_device_keyboard.c: 327:             if (scanCode->isBreak) {
  8226     0092  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8227     0093  3E02               	addlw	2
  8228     0094  0086               	movwf	6
  8229     0095  3001               	movlw	1	; select bank2/3
  8230     0096  0087               	movwf	7
  8231     0097  0801               	movf	1,w
  8232     0098  1903               	btfsc	3,2
  8233     0099  28C5               	goto	l6574
  8234                           
  8235                           ;app_device_keyboard.c: 328:                 if (scanCode->value == 0X14) {
  8236     009A  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8237     009B  0086               	movwf	6
  8238     009C  3001               	movlw	1	; select bank2/3
  8239     009D  0087               	movwf	7
  8240     009E  3014               	movlw	20
  8241     009F  0601               	xorwf	1,w
  8242     00A0  1D03               	btfss	3,2
  8243     00A1  28A8               	goto	l6568
  8244                           
  8245                           ;app_device_keyboard.c: 329:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  8246     00A2  3090               	movlw	144
  8247     00A3  0086               	movwf	6
  8248     00A4  3023               	movlw	35
  8249     00A5  0087               	movwf	7
  8250     00A6  1201               	bcf	1,4
  8251                           
  8252                           ;app_device_keyboard.c: 330:                 } else if (scanCode->value == 0x11) {
  8253     00A7  299D               	goto	l6626
  8254     00A8                     l6568:
  8255     00A8  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8256     00A9  0086               	movwf	6
  8257     00AA  3001               	movlw	1	; select bank2/3
  8258     00AB  0087               	movwf	7
  8259     00AC  3011               	movlw	17
  8260     00AD  0601               	xorwf	1,w
  8261     00AE  1D03               	btfss	3,2
  8262     00AF  28B6               	goto	l6572
  8263                           
  8264                           ;app_device_keyboard.c: 331:                     keyboard.modifiers.bits.rightAlt = 0;
  8265     00B0  3090               	movlw	144
  8266     00B1  0086               	movwf	6
  8267     00B2  3023               	movlw	35
  8268     00B3  0087               	movwf	7
  8269     00B4  1301               	bcf	1,6
  8270                           
  8271                           ;app_device_keyboard.c: 332:                 } else {
  8272     00B5  299D               	goto	l6626
  8273     00B6                     l6572:
  8274                           
  8275                           ;app_device_keyboard.c: 333:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8276     00B6  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8277     00B7  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8278     00BA  00CB               	movwf	APP_KeyboardTasks@usbHidCode^(0+128)
  8279                           
  8280                           ;app_device_keyboard.c: 334:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  8281     00BB  3031               	movlw	49
  8282     00BC  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  8283     00BD  3023               	movlw	35
  8284     00BE  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  8285     00BF  30CB               	movlw	(low (APP_KeyboardTasks@usbHidCode| 0))& (0+255)
  8286     00C0  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  8287     00C1  3185  25CF  3180   	fcall	_GenericQueue_Remove
  8288                           
  8289                           ;app_device_keyboard.c: 336:             } else {
  8290     00C4  299D               	goto	l6626
  8291     00C5                     l6574:
  8292                           
  8293                           ;app_device_keyboard.c: 337:                 if (scanCode->value == 0X14) {
  8294     00C5  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8295     00C6  0086               	movwf	6
  8296     00C7  3001               	movlw	1	; select bank2/3
  8297     00C8  0087               	movwf	7
  8298     00C9  3014               	movlw	20
  8299     00CA  0601               	xorwf	1,w
  8300     00CB  1D03               	btfss	3,2
  8301     00CC  28D3               	goto	l6578
  8302                           
  8303                           ;app_device_keyboard.c: 338:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  8304     00CD  3090               	movlw	144
  8305     00CE  0086               	movwf	6
  8306     00CF  3023               	movlw	35
  8307     00D0  0087               	movwf	7
  8308     00D1  1601               	bsf	1,4
  8309                           
  8310                           ;app_device_keyboard.c: 339:                 } else if (scanCode->value == 0x11) {
  8311     00D2  299D               	goto	l6626
  8312     00D3                     l6578:
  8313     00D3  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8314     00D4  0086               	movwf	6
  8315     00D5  3001               	movlw	1	; select bank2/3
  8316     00D6  0087               	movwf	7
  8317     00D7  3011               	movlw	17
  8318     00D8  0601               	xorwf	1,w
  8319     00D9  1D03               	btfss	3,2
  8320     00DA  28E1               	goto	l6582
  8321                           
  8322                           ;app_device_keyboard.c: 340:                     keyboard.modifiers.bits.rightAlt = 1;
  8323     00DB  3090               	movlw	144
  8324     00DC  0086               	movwf	6
  8325     00DD  3023               	movlw	35
  8326     00DE  0087               	movwf	7
  8327     00DF  1701               	bsf	1,6
  8328                           
  8329                           ;app_device_keyboard.c: 341:                 } else {
  8330     00E0  299D               	goto	l6626
  8331     00E1                     l6582:
  8332                           
  8333                           ;app_device_keyboard.c: 342:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8334     00E1  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8335     00E2  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8336     00E5  00CE               	movwf	APP_KeyboardTasks@usbHidCode_2876^(0+128)
  8337                           
  8338                           ;app_device_keyboard.c: 343:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  8339     00E6  3031               	movlw	49
  8340     00E7  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8341     00E8  3023               	movlw	35
  8342     00E9  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8343     00EA  30CE               	movlw	(low (APP_KeyboardTasks@usbHidCode_2876| 0))& (0+255)
  8344     00EB  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8345     00EC  3194  24C8  3180   	fcall	_GenericQueue_Contains
  8346     00EF  3A00               	xorlw	0
  8347     00F0  1D03               	skipz
  8348     00F1  299D               	goto	l6626
  8349                           
  8350                           ;app_device_keyboard.c: 344:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  8351     00F2  3031               	movlw	49
  8352     00F3  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8353     00F4  3023               	movlw	35
  8354     00F5  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8355     00F6  30CE               	movlw	low APP_KeyboardTasks@usbHidCode_2876
  8356     00F7  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8357     00F8  3000               	movlw	high APP_KeyboardTasks@usbHidCode_2876
  8358     00F9  2999               	goto	L3
  8359     00FA                     l6586:
  8360                           
  8361                           ;app_device_keyboard.c: 349:             if (scanCode->isBreak) {
  8362     00FA  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8363     00FB  3E02               	addlw	2
  8364     00FC  0086               	movwf	6
  8365     00FD  3001               	movlw	1	; select bank2/3
  8366     00FE  0087               	movwf	7
  8367     00FF  0801               	movf	1,w
  8368     0100  1903               	btfsc	3,2
  8369     0101  2949               	goto	l6606
  8370                           
  8371                           ;app_device_keyboard.c: 351:                 if (scanCode->value == 0x12) {
  8372     0102  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8373     0103  0086               	movwf	6
  8374     0104  3001               	movlw	1	; select bank2/3
  8375     0105  0087               	movwf	7
  8376     0106  3012               	movlw	18
  8377     0107  0601               	xorwf	1,w
  8378     0108  1D03               	btfss	3,2
  8379     0109  2910               	goto	l6592
  8380                           
  8381                           ;app_device_keyboard.c: 352:                     keyboard.modifiers.bits.leftShift = 0;
  8382     010A  3090               	movlw	144
  8383     010B  0086               	movwf	6
  8384     010C  3023               	movlw	35
  8385     010D  0087               	movwf	7
  8386     010E  1081               	bcf	1,1
  8387                           
  8388                           ;app_device_keyboard.c: 353:                 } else if (scanCode->value == 0X14) {
  8389     010F  299D               	goto	l6626
  8390     0110                     l6592:
  8391     0110  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8392     0111  0086               	movwf	6
  8393     0112  3001               	movlw	1	; select bank2/3
  8394     0113  0087               	movwf	7
  8395     0114  3014               	movlw	20
  8396     0115  0601               	xorwf	1,w
  8397     0116  1D03               	btfss	3,2
  8398     0117  291E               	goto	l6596
  8399                           
  8400                           ;app_device_keyboard.c: 354:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  8401     0118  3090               	movlw	144
  8402     0119  0086               	movwf	6
  8403     011A  3023               	movlw	35
  8404     011B  0087               	movwf	7
  8405     011C  1001               	bcf	1,0
  8406                           
  8407                           ;app_device_keyboard.c: 355:                 } else if (scanCode->value == 0x11) {
  8408     011D  299D               	goto	l6626
  8409     011E                     l6596:
  8410     011E  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8411     011F  0086               	movwf	6
  8412     0120  3001               	movlw	1	; select bank2/3
  8413     0121  0087               	movwf	7
  8414     0122  3011               	movlw	17
  8415     0123  0601               	xorwf	1,w
  8416     0124  1D03               	btfss	3,2
  8417     0125  292C               	goto	l6600
  8418                           
  8419                           ;app_device_keyboard.c: 356:                     keyboard.modifiers.bits.leftAlt = 0;
  8420     0126  3090               	movlw	144
  8421     0127  0086               	movwf	6
  8422     0128  3023               	movlw	35
  8423     0129  0087               	movwf	7
  8424     012A  1101               	bcf	1,2
  8425                           
  8426                           ;app_device_keyboard.c: 357:                 } else if (scanCode->value == 0x59) {
  8427     012B  299D               	goto	l6626
  8428     012C                     l6600:
  8429     012C  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8430     012D  0086               	movwf	6
  8431     012E  3001               	movlw	1	; select bank2/3
  8432     012F  0087               	movwf	7
  8433     0130  3059               	movlw	89
  8434     0131  0601               	xorwf	1,w
  8435     0132  1D03               	btfss	3,2
  8436     0133  293A               	goto	l6604
  8437                           
  8438                           ;app_device_keyboard.c: 358:                     keyboard.modifiers.bits.rightShift = 0;
  8439     0134  3090               	movlw	144
  8440     0135  0086               	movwf	6
  8441     0136  3023               	movlw	35
  8442     0137  0087               	movwf	7
  8443     0138  1281               	bcf	1,5
  8444                           
  8445                           ;app_device_keyboard.c: 359:                 } else {
  8446     0139  299D               	goto	l6626
  8447     013A                     l6604:
  8448                           
  8449                           ;app_device_keyboard.c: 360:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8450     013A  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8451     013B  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8452     013E  00CC               	movwf	APP_KeyboardTasks@usbHidCode_2877^(0+128)
  8453                           
  8454                           ;app_device_keyboard.c: 361:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  8455     013F  3031               	movlw	49
  8456     0140  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  8457     0141  3023               	movlw	35
  8458     0142  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  8459     0143  30CC               	movlw	(low (APP_KeyboardTasks@usbHidCode_2877| 0))& (0+255)
  8460     0144  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  8461     0145  3185  25CF  3180   	fcall	_GenericQueue_Remove
  8462     0148  299D               	goto	l6626
  8463     0149                     l6606:
  8464                           
  8465                           ;app_device_keyboard.c: 365:                 if (scanCode->value == 0x12) {
  8466     0149  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8467     014A  0086               	movwf	6
  8468     014B  3001               	movlw	1	; select bank2/3
  8469     014C  0087               	movwf	7
  8470     014D  3012               	movlw	18
  8471     014E  0601               	xorwf	1,w
  8472     014F  1D03               	btfss	3,2
  8473     0150  2957               	goto	l6610
  8474                           
  8475                           ;app_device_keyboard.c: 366:                     keyboard.modifiers.bits.leftShift = 1;
  8476     0151  3090               	movlw	144
  8477     0152  0086               	movwf	6
  8478     0153  3023               	movlw	35
  8479     0154  0087               	movwf	7
  8480     0155  1481               	bsf	1,1
  8481                           
  8482                           ;app_device_keyboard.c: 367:                 } else if (scanCode->value == 0X14) {
  8483     0156  299D               	goto	l6626
  8484     0157                     l6610:
  8485     0157  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8486     0158  0086               	movwf	6
  8487     0159  3001               	movlw	1	; select bank2/3
  8488     015A  0087               	movwf	7
  8489     015B  3014               	movlw	20
  8490     015C  0601               	xorwf	1,w
  8491     015D  1D03               	btfss	3,2
  8492     015E  2965               	goto	l6614
  8493                           
  8494                           ;app_device_keyboard.c: 368:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  8495     015F  3090               	movlw	144
  8496     0160  0086               	movwf	6
  8497     0161  3023               	movlw	35
  8498     0162  0087               	movwf	7
  8499     0163  1401               	bsf	1,0
  8500                           
  8501                           ;app_device_keyboard.c: 369:                 } else if (scanCode->value == 0x11) {
  8502     0164  299D               	goto	l6626
  8503     0165                     l6614:
  8504     0165  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8505     0166  0086               	movwf	6
  8506     0167  3001               	movlw	1	; select bank2/3
  8507     0168  0087               	movwf	7
  8508     0169  3011               	movlw	17
  8509     016A  0601               	xorwf	1,w
  8510     016B  1D03               	btfss	3,2
  8511     016C  2973               	goto	l6618
  8512                           
  8513                           ;app_device_keyboard.c: 370:                     keyboard.modifiers.bits.leftAlt = 1;
  8514     016D  3090               	movlw	144
  8515     016E  0086               	movwf	6
  8516     016F  3023               	movlw	35
  8517     0170  0087               	movwf	7
  8518     0171  1501               	bsf	1,2
  8519                           
  8520                           ;app_device_keyboard.c: 371:                 } else if (scanCode->value == 0x59) {
  8521     0172  299D               	goto	l6626
  8522     0173                     l6618:
  8523     0173  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8524     0174  0086               	movwf	6
  8525     0175  3001               	movlw	1	; select bank2/3
  8526     0176  0087               	movwf	7
  8527     0177  3059               	movlw	89
  8528     0178  0601               	xorwf	1,w
  8529     0179  1D03               	btfss	3,2
  8530     017A  2981               	goto	l6622
  8531                           
  8532                           ;app_device_keyboard.c: 372:                     keyboard.modifiers.bits.rightShift = 1;
  8533     017B  3090               	movlw	144
  8534     017C  0086               	movwf	6
  8535     017D  3023               	movlw	35
  8536     017E  0087               	movwf	7
  8537     017F  1681               	bsf	1,5
  8538                           
  8539                           ;app_device_keyboard.c: 373:                 } else {
  8540     0180  299D               	goto	l6626
  8541     0181                     l6622:
  8542                           
  8543                           ;app_device_keyboard.c: 374:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8544     0181  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8545     0182  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8546     0185  00CF               	movwf	APP_KeyboardTasks@usbHidCode_2878^(0+128)
  8547                           
  8548                           ;app_device_keyboard.c: 375:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  8549     0186  3031               	movlw	49
  8550     0187  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8551     0188  3023               	movlw	35
  8552     0189  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8553     018A  30CF               	movlw	(low (APP_KeyboardTasks@usbHidCode_2878| 0))& (0+255)
  8554     018B  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8555     018C  3194  24C8  3180   	fcall	_GenericQueue_Contains
  8556     018F  3A00               	xorlw	0
  8557     0190  1D03               	skipz
  8558     0191  299D               	goto	l6626
  8559                           
  8560                           ;app_device_keyboard.c: 376:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  8561     0192  3031               	movlw	49
  8562     0193  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8563     0194  3023               	movlw	35
  8564     0195  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8565     0196  30CF               	movlw	low APP_KeyboardTasks@usbHidCode_2878
  8566     0197  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8567     0198  3000               	movlw	high APP_KeyboardTasks@usbHidCode_2878
  8568     0199                     L3:
  8569     0199  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  8570     019A  3196  26C2  3180   	fcall	_GenericQueue_Enqueue
  8571     019D                     l6626:
  8572                           
  8573                           ;app_device_keyboard.c: 386:     if (USBDeviceState < CONFIGURED_STATE) {
  8574     019D  3020               	movlw	32
  8575     019E  0020               	movlb	0	; select bank0
  8576     019F  026B               	subwf	_USBDeviceState,w
  8577     01A0  1C03               	btfss	3,0
  8578     01A1  0008               	return
  8579                           
  8580                           ;app_device_keyboard.c: 394:     if (UCONbits.SUSPND == 1) {
  8581                           
  8582                           ;app_device_keyboard.c: 388:     }
  8583     01A2  003D               	movlb	29	; select bank29
  8584     01A3  188E               	btfsc	14,1	;volatile
  8585     01A4  0008               	return
  8586     01A5                     l952:	
  8587                           ;app_device_keyboard.c: 410:     }
  8588                           
  8589                           
  8590                           ;app_device_keyboard.c: 408:     while (LocalSOFCount != SOFCounter) {
  8591     01A5  0020               	movlb	0	; select bank0
  8592     01A6  0866               	movf	_SOFCounter+1,w	;volatile
  8593     01A7  0022               	movlb	2	; select bank2
  8594     01A8  062F               	xorwf	(_LocalSOFCount+1)^(0+256),w
  8595     01A9  1D03               	skipz
  8596     01AA  29AF               	goto	u6585
  8597     01AB  0020               	movlb	0	; select bank0
  8598     01AC  0865               	movf	_SOFCounter,w	;volatile
  8599     01AD  0022               	movlb	2	; select bank2
  8600     01AE  062E               	xorwf	_LocalSOFCount^(0+256),w
  8601     01AF                     u6585:
  8602     01AF  1903               	btfsc	3,2
  8603     01B0  29BA               	goto	l6634
  8604                           
  8605                           ;app_device_keyboard.c: 409:         LocalSOFCount = SOFCounter;
  8606     01B1  0020               	movlb	0	; select bank0
  8607     01B2  0866               	movf	_SOFCounter+1,w	;volatile
  8608     01B3  0022               	movlb	2	; select bank2
  8609     01B4  00AF               	movwf	(_LocalSOFCount+1)^(0+256)
  8610     01B5  0020               	movlb	0	; select bank0
  8611     01B6  0865               	movf	_SOFCounter,w	;volatile
  8612     01B7  0022               	movlb	2	; select bank2
  8613     01B8  00AE               	movwf	_LocalSOFCount^(0+256)
  8614     01B9  29A5               	goto	l952
  8615     01BA                     l6634:
  8616                           
  8617                           ;app_device_keyboard.c: 414:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  8618     01BA  0023               	movlb	3	; select bank3
  8619     01BB  084D               	movf	_OldSOFCount^(0+384),w
  8620     01BC  0022               	movlb	2	; select bank2
  8621     01BD  022E               	subwf	_LocalSOFCount^(0+256),w
  8622     01BE  0021               	movlb	1	; select bank1
  8623     01BF  00D0               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8624     01C0  0023               	movlb	3	; select bank3
  8625     01C1  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8626     01C2  0022               	movlb	2	; select bank2
  8627     01C3  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8628     01C4  0021               	movlb	1	; select bank1
  8629     01C5  00D1               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8630                           
  8631                           ;app_device_keyboard.c: 416:     if (TimeDeltaMilliseconds < 0) {
  8632     01C6  1FD1               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  8633     01C7  29DA               	goto	l6640
  8634                           
  8635                           ;app_device_keyboard.c: 417:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  8636     01C8  0023               	movlb	3	; select bank3
  8637     01C9  084D               	movf	_OldSOFCount^(0+384),w
  8638     01CA  0022               	movlb	2	; select bank2
  8639     01CB  022E               	subwf	_LocalSOFCount^(0+256),w
  8640     01CC  0021               	movlb	1	; select bank1
  8641     01CD  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8642     01CE  0023               	movlb	3	; select bank3
  8643     01CF  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8644     01D0  0022               	movlb	2	; select bank2
  8645     01D1  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8646     01D2  0021               	movlb	1	; select bank1
  8647     01D3  00CA               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  8648     01D4  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8649     01D5  3EFF               	addlw	255
  8650     01D6  00D0               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8651     01D7  307F               	movlw	127
  8652     01D8  3D4A               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  8653     01D9  00D1               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8654     01DA                     l6640:
  8655                           
  8656                           ;app_device_keyboard.c: 424:     if (TimeDeltaMilliseconds > 5000) {
  8657     01DA  0851               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8658     01DB  3A80               	xorlw	128
  8659     01DC  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8660     01DD  3093               	movlw	147
  8661     01DE  0249               	subwf	??_APP_KeyboardTasks^(0+128),w
  8662     01DF  1D03               	skipz
  8663     01E0  29E3               	goto	u6605
  8664     01E1  3089               	movlw	137
  8665     01E2  0250               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8666     01E3                     u6605:
  8667     01E3  1C03               	skipc
  8668     01E4  29EF               	goto	l6644
  8669                           
  8670                           ;app_device_keyboard.c: 425:         OldSOFCount = LocalSOFCount - 5000;
  8671     01E5  0022               	movlb	2	; select bank2
  8672     01E6  082E               	movf	_LocalSOFCount^(0+256),w
  8673     01E7  3E78               	addlw	120
  8674     01E8  0023               	movlb	3	; select bank3
  8675     01E9  00CD               	movwf	_OldSOFCount^(0+384)
  8676     01EA  30EC               	movlw	236
  8677     01EB  0022               	movlb	2	; select bank2
  8678     01EC  3D2F               	addwfc	(_LocalSOFCount+1)^(0+256),w
  8679     01ED  0023               	movlb	3	; select bank3
  8680     01EE  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8681     01EF                     l6644:
  8682                           
  8683                           ;app_device_keyboard.c: 431:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  8684     01EF  302D               	movlw	45
  8685     01F0  0086               	movwf	6
  8686     01F1  3023               	movlw	35
  8687     01F2  0087               	movwf	7
  8688     01F3  0016               	moviw fsr1++
  8689     01F4  0401               	iorwf	1,w
  8690     01F5  1903               	btfsc	3,2
  8691     01F6  2A06               	goto	l6648
  8692     01F7  302D               	movlw	45
  8693     01F8  0086               	movwf	6
  8694     01F9  3023               	movlw	35
  8695     01FA  0087               	movwf	7
  8696     01FB  3F40               	moviw [0]fsr1
  8697     01FC  0021               	movlb	1	; select bank1
  8698     01FD  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8699     01FE  3F41               	moviw [1]fsr1
  8700     01FF  00CA               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8701     0200  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8702     0201  0086               	movwf	6
  8703     0202  084A               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8704     0203  0087               	movwf	7
  8705     0204  1B81               	btfsc	1,7
  8706     0205  2A85               	goto	l6682
  8707     0206                     l6648:
  8708                           
  8709                           ;app_device_keyboard.c: 433:         memset(&inputReport, 0, sizeof (inputReport));
  8710     0206  30A0               	movlw	160
  8711     0207  0021               	movlb	1	; select bank1
  8712     0208  00A8               	movwf	memset@dest^(0+128)
  8713     0209  3000               	movlw	0
  8714     020A  00A9               	movwf	(memset@dest+1)^(0+128)
  8715     020B  3000               	movlw	0
  8716     020C  00AA               	movwf	memset@c^(0+128)
  8717     020D  00AB               	movwf	(memset@c+1)^(0+128)
  8718     020E  3008               	movlw	8
  8719     020F  00AC               	movwf	memset@n^(0+128)
  8720     0210  3000               	movlw	0
  8721     0211  00AD               	movwf	(memset@n^(0+128)+1)
  8722     0212  319D  25B7  3180   	fcall	_memset
  8723                           
  8724                           ;app_device_keyboard.c: 435:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  8725     0215  3031               	movlw	49
  8726     0216  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  8727     0217  3023               	movlw	35
  8728     0218  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  8729     0219  30A2               	movlw	162
  8730     021A  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  8731     021B  3195  252A  3180   	fcall	_GenericQueue_CopyToArray
  8732                           
  8733                           ;app_device_keyboard.c: 436:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  8734     021E  3090               	movlw	144
  8735     021F  0086               	movwf	6
  8736     0220  3023               	movlw	35
  8737     0221  0087               	movwf	7
  8738     0222  0801               	movf	1,w
  8739     0223  00A0               	movwf	32
  8740                           
  8741                           ;app_device_keyboard.c: 439:         needToSendNewReportPacket = 0;
  8742     0224  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8743                           
  8744                           ;app_device_keyboard.c: 440:         for (i = 0; i < sizeof (inputReport); i++) {
  8745     0225  01D2               	clrf	APP_KeyboardTasks@i^(0+128)
  8746                           
  8747                           ;app_device_keyboard.c: 443:                 break;
  8748     0226  2A2B               	goto	l6656
  8749     0227                     l6664:
  8750                           
  8751                           ;app_device_keyboard.c: 445:         }
  8752     0227  3001               	movlw	1
  8753     0228  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8754     0229  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8755     022A  07D2               	addwf	APP_KeyboardTasks@i^(0+128),f
  8756     022B                     l6656:
  8757     022B  3008               	movlw	8
  8758     022C  0252               	subwf	APP_KeyboardTasks@i^(0+128),w
  8759     022D  1803               	btfsc	3,0
  8760     022E  2A3E               	goto	l6668
  8761                           
  8762                           ;app_device_keyboard.c: 441:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  8763     022F  0852               	movf	APP_KeyboardTasks@i^(0+128),w
  8764     0230  3EA0               	addlw	160
  8765     0231  0086               	movwf	6
  8766     0232  0187               	clrf	7
  8767     0233  0852               	movf	APP_KeyboardTasks@i^(0+128),w
  8768     0234  3E2A               	addlw	(low (_oldInputReport| (0+512)))& (0+255)
  8769     0235  0084               	movwf	4
  8770     0236  3002               	movlw	2	; select bank4/5
  8771     0237  0085               	movwf	5
  8772     0238  0800               	movf	0,w
  8773     0239  0601               	xorwf	1,w
  8774     023A  1903               	skipnz
  8775     023B  2A27               	goto	l6664
  8776                           
  8777                           ;app_device_keyboard.c: 442:                 needToSendNewReportPacket = 1;
  8778     023C  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8779     023D  0ACD               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8780     023E                     l6668:
  8781                           
  8782                           ;app_device_keyboard.c: 450:         if (keyboardIdleRate != 0) {
  8783     023E  0023               	movlb	3	; select bank3
  8784     023F  084F               	movf	_keyboardIdleRate^(0+384),w
  8785     0240  0450               	iorwf	(_keyboardIdleRate+1)^(0+384),w
  8786     0241  1903               	btfsc	3,2
  8787     0242  2A57               	goto	l6674
  8788                           
  8789                           ;app_device_keyboard.c: 452:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  8790     0243  0021               	movlb	1	; select bank1
  8791     0244  0851               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8792     0245  3A80               	xorlw	128
  8793     0246  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8794     0247  0023               	movlb	3	; select bank3
  8795     0248  0850               	movf	(_keyboardIdleRate+1)^(0+384),w
  8796     0249  3A80               	xorlw	128
  8797     024A  0021               	movlb	1	; select bank1
  8798     024B  0249               	subwf	??_APP_KeyboardTasks^(0+128),w
  8799     024C  1D03               	skipz
  8800     024D  2A52               	goto	u6665
  8801     024E  0023               	movlb	3	; select bank3
  8802     024F  084F               	movf	_keyboardIdleRate^(0+384),w
  8803     0250  0021               	movlb	1	; select bank1
  8804     0251  0250               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8805     0252                     u6665:
  8806     0252  1C03               	skipc
  8807     0253  2A57               	goto	l6674
  8808                           
  8809                           ;app_device_keyboard.c: 453:                 needToSendNewReportPacket = 1;
  8810     0254  0021               	movlb	1	; select bank1
  8811     0255  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8812     0256  0ACD               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8813     0257                     l6674:
  8814                           
  8815                           ;app_device_keyboard.c: 459:         if (needToSendNewReportPacket == 1) {
  8816     0257  0021               	movlb	1	; select bank1
  8817     0258  034D               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  8818     0259  1D03               	btfss	3,2
  8819     025A  2A85               	goto	l6682
  8820                           
  8821                           ;app_device_keyboard.c: 463:             oldInputReport = inputReport;
  8822     025B  30A0               	movlw	160
  8823     025C  0086               	movwf	6
  8824     025D  3000               	movlw	0
  8825     025E  0087               	movwf	7
  8826     025F  302A               	movlw	low _oldInputReport
  8827     0260  0084               	movwf	4
  8828     0261  3002               	movlw	high _oldInputReport
  8829     0262  0085               	movwf	5
  8830     0263  3008               	movlw	8
  8831     0264  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8832     0265                     u6680:
  8833     0265  0016               	moviw fsr1++
  8834     0266  001A               	movwi fsr0++
  8835     0267  0BC9               	decfsz	??_APP_KeyboardTasks^(0+128),f
  8836     0268  2A65               	goto	u6680
  8837                           
  8838                           ;app_device_keyboard.c: 466:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  8839     0269  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8840     026A  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  8841     026B  30A0               	movlw	160
  8842     026C  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8843     026D  3000               	movlw	0
  8844     026E  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8845     026F  3008               	movlw	8
  8846     0270  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  8847     0271  3001               	movlw	1
  8848     0272  318B  2329  3180   	fcall	_USBTransferOnePacket
  8849     0275  302D               	movlw	45
  8850     0276  0086               	movwf	6
  8851     0277  3023               	movlw	35
  8852     0278  0087               	movwf	7
  8853     0279  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8854     027A  3FC0               	movwi [0]fsr1
  8855     027B  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8856     027C  3FC1               	movwi [1]fsr1
  8857                           
  8858                           ;app_device_keyboard.c: 467:             OldSOFCount = LocalSOFCount;
  8859     027D  0022               	movlb	2	; select bank2
  8860     027E  082F               	movf	(_LocalSOFCount+1)^(0+256),w
  8861     027F  0023               	movlb	3	; select bank3
  8862     0280  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8863     0281  0022               	movlb	2	; select bank2
  8864     0282  082E               	movf	_LocalSOFCount^(0+256),w
  8865     0283  0023               	movlb	3	; select bank3
  8866     0284  00CD               	movwf	_OldSOFCount^(0+384)
  8867     0285                     l6682:
  8868                           
  8869                           ;app_device_keyboard.c: 479:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  8870     0285  302D               	movlw	45
  8871     0286  0086               	movwf	6
  8872     0287  3023               	movlw	35
  8873     0288  0087               	movwf	7
  8874     0289  3142               	addfsr 1,2
  8875     028A  0016               	moviw fsr1++
  8876     028B  0401               	iorwf	1,w
  8877     028C  1903               	btfsc	3,2
  8878     028D  2A9E               	goto	l6686
  8879     028E  302D               	movlw	45
  8880     028F  0086               	movwf	6
  8881     0290  3023               	movlw	35
  8882     0291  0087               	movwf	7
  8883     0292  3142               	addfsr 1,2
  8884     0293  3F40               	moviw [0]fsr1
  8885     0294  0021               	movlb	1	; select bank1
  8886     0295  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8887     0296  3F41               	moviw [1]fsr1
  8888     0297  00CA               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8889     0298  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8890     0299  0086               	movwf	6
  8891     029A  084A               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8892     029B  0087               	movwf	7
  8893     029C  1B81               	btfsc	1,7
  8894     029D  0008               	return
  8895     029E                     l6686:
  8896                           
  8897                           ;app_device_keyboard.c: 480:         APP_KeyboardProcessOutputReport();
  8898     029E  319B  23E8  3180   	fcall	_APP_KeyboardProcessOutputReport
  8899                           
  8900                           ;app_device_keyboard.c: 482:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  8901     02A1  0021               	movlb	1	; select bank1
  8902     02A2  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8903     02A3  3020               	movlw	32
  8904     02A4  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8905     02A5  3001               	movlw	1
  8906     02A6  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8907     02A7  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  8908     02A8  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  8909     02A9  3001               	movlw	1
  8910     02AA  318B  2329         	fcall	_USBTransferOnePacket
  8911     02AC  302D               	movlw	45
  8912     02AD  0086               	movwf	6
  8913     02AE  3023               	movlw	35
  8914     02AF  0087               	movwf	7
  8915     02B0  3142               	addfsr 1,2
  8916     02B1  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8917     02B2  3FC0               	movwi [0]fsr1
  8918     02B3  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8919     02B4  3FC1               	movwi [1]fsr1
  8920     02B5  0008               	return
  8921     02B6                     __end_of_APP_KeyboardTasks:
  8922                           
  8923                           	psect	text37
  8924     1DB7                     __ptext37:	
  8925 ;; *************** function _memset *****************
  8926 ;; Defined at:
  8927 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  dest            2    0[BANK1 ] PTR void 
  8930 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8931 ;;  c               2    2[BANK1 ] int 
  8932 ;;  n               2    4[BANK1 ] unsigned int 
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  p               2    6[BANK1 ] PTR unsigned char 
  8935 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;                  2    0[BANK1 ] PTR void 
  8938 ;; Registers used:
  8939 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8940 ;; Tracked objects:
  8941 ;;		On entry : 1F/1
  8942 ;;		On exit  : 1F/1
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8945 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;Total ram usage:        8 bytes
  8950 ;; Hardware stack levels used: 1
  8951 ;; Hardware stack levels required when called: 10
  8952 ;; This function calls:
  8953 ;;		Nothing
  8954 ;; This function is called by:
  8955 ;;		_APP_KeyboardTasks
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959     1DB7                     _memset:	
  8960                           ;psect for function _memset
  8961                           
  8962                           
  8963                           ;incstack = 0
  8964                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8965     1DB7  0829               	movf	(memset@dest+1)^(0+128),w
  8966     1DB8  00AF               	movwf	(memset@p+1)^(0+128)
  8967     1DB9  0828               	movf	memset@dest^(0+128),w
  8968     1DBA  00AE               	movwf	memset@p^(0+128)
  8969     1DBB                     l6432:
  8970     1DBB  3001               	movlw	1
  8971     1DBC  02AC               	subwf	memset@n^(0+128),f
  8972     1DBD  3000               	movlw	0
  8973     1DBE  3BAD               	subwfb	(memset@n+1)^(0+128),f
  8974     1DBF  0A2C               	incf	memset@n^(0+128),w
  8975     1DC0  1903               	btfsc	3,2
  8976     1DC1  0A2D               	incf	(memset@n+1)^(0+128),w
  8977     1DC2  1903               	btfsc	3,2
  8978     1DC3  0008               	return
  8979     1DC4  082E               	movf	memset@p^(0+128),w
  8980     1DC5  0086               	movwf	6
  8981     1DC6  082F               	movf	(memset@p+1)^(0+128),w
  8982     1DC7  0087               	movwf	7
  8983     1DC8  082A               	movf	memset@c^(0+128),w
  8984     1DC9  0081               	movwf	1
  8985     1DCA  3001               	movlw	1
  8986     1DCB  07AE               	addwf	memset@p^(0+128),f
  8987     1DCC  3000               	movlw	0
  8988     1DCD  3DAF               	addwfc	(memset@p+1)^(0+128),f
  8989     1DCE  2DBB               	goto	l6432
  8990     1DCF                     __end_of_memset:
  8991                           
  8992                           	psect	text38
  8993     0B29                     __ptext38:	
  8994 ;; *************** function _USBTransferOnePacket *****************
  8995 ;; Defined at:
  8996 ;;		line 999 in file "usb/usb_device.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;  ep              1    wreg     unsigned char 
  8999 ;;  dir             1    0[BANK1 ] unsigned char 
  9000 ;;  data            2    1[BANK1 ] PTR unsigned char 
  9001 ;;		 -> inputReport(8), outputReport(1), 
  9002 ;;  len             1    3[BANK1 ] unsigned char 
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;  ep              1    8[BANK1 ] unsigned char 
  9005 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  9006 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  2    0[BANK1 ] PTR void 
  9009 ;; Registers used:
  9010 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9011 ;; Tracked objects:
  9012 ;;		On entry : 1F/1
  9013 ;;		On exit  : 1F/1
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9016 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;Total ram usage:       11 bytes
  9021 ;; Hardware stack levels used: 1
  9022 ;; Hardware stack levels required when called: 10
  9023 ;; This function calls:
  9024 ;;		Nothing
  9025 ;; This function is called by:
  9026 ;;		_APP_KeyboardTasks
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030     0B29                     _USBTransferOnePacket:	
  9031                           ;psect for function _USBTransferOnePacket
  9032                           
  9033                           
  9034                           ;incstack = 0
  9035                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  9036                           ;USBTransferOnePacket@ep stored from wreg
  9037     0B29  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  9038                           
  9039                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  9040     0B2A  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  9041     0B2B  1903               	btfsc	3,2
  9042     0B2C  2B35               	goto	l5490
  9043                           
  9044                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  9045     0B2D  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9046     0B2E  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9047     0B2F  0086               	movwf	6
  9048     0B30  0187               	clrf	7
  9049     0B31  3F40               	moviw [0]fsr1
  9050     0B32  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  9051     0B33  3F41               	moviw [1]fsr1
  9052     0B34  2B3D               	goto	L4
  9053     0B35                     l5490:	
  9054                           ;usb/usb_device.c: 1008:     }
  9055                           
  9056                           
  9057                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  9058     0B35  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9059     0B36  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9060     0B37  0086               	movwf	6
  9061     0B38  3001               	movlw	1	; select bank2/3
  9062     0B39  0087               	movwf	7
  9063     0B3A  3F40               	moviw [0]fsr1
  9064     0B3B  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  9065     0B3C  3F41               	moviw [1]fsr1
  9066     0B3D                     L4:
  9067     0B3D  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  9068                           
  9069                           ;usb/usb_device.c: 1017:     if(handle == 0)
  9070     0B3E  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9071     0B3F  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  9072     0B40  1D03               	btfss	3,2
  9073     0B41  2B45               	goto	l5498
  9074                           
  9075                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  9076     0B42  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  9077     0B43  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  9078     0B44  0008               	return
  9079     0B45                     l5498:
  9080                           
  9081                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  9082     0B45  30FF               	movlw	255
  9083     0B46  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  9084     0B47  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9085     0B48  307F               	movlw	127
  9086     0B49  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  9087     0B4A  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  9088     0B4B  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9089     0B4C  0086               	movwf	6
  9090     0B4D  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9091     0B4E  0087               	movwf	7
  9092     0B4F  3142               	addfsr 1,2
  9093     0B50  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9094     0B51  3FC0               	movwi [0]fsr1
  9095     0B52  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  9096     0B53  3FC1               	movwi [1]fsr1
  9097                           
  9098                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  9099     0B54  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9100     0B55  3E01               	addlw	1
  9101     0B56  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9102     0B57  3000               	movlw	0
  9103     0B58  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  9104     0B59  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  9105     0B5A  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9106     0B5B  0086               	movwf	6
  9107     0B5C  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  9108     0B5D  0087               	movwf	7
  9109     0B5E  082B               	movf	USBTransferOnePacket@len^(0+128),w
  9110     0B5F  0081               	movwf	1
  9111                           
  9112                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  9113     0B60  3040               	movlw	64
  9114     0B61  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9115     0B62  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9116     0B63  0086               	movwf	6
  9117     0B64  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9118     0B65  0087               	movwf	7
  9119     0B66  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9120     0B67  0581               	andwf	1,f
  9121                           
  9122                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  9123     0B68  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9124     0B69  0086               	movwf	6
  9125     0B6A  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9126     0B6B  0087               	movwf	7
  9127     0B6C  1581               	bsf	1,3
  9128                           
  9129                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  9130     0B6D  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9131     0B6E  0086               	movwf	6
  9132     0B6F  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9133     0B70  0087               	movwf	7
  9134     0B71  1781               	bsf	1,7
  9135                           
  9136                           ;usb/usb_device.c: 1040:     if(dir != 0)
  9137     0B72  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  9138     0B73  1903               	btfsc	3,2
  9139     0B74  2B8C               	goto	l5508
  9140                           
  9141                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  9142     0B75  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9143     0B76  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9144     0B77  0086               	movwf	6
  9145     0B78  0187               	clrf	7
  9146     0B79  3F40               	moviw [0]fsr1
  9147     0B7A  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9148     0B7B  3F41               	moviw [1]fsr1
  9149     0B7C  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  9150     0B7D  3004               	movlw	4
  9151     0B7E  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  9152     0B7F  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  9153     0B80  3000               	movlw	0
  9154     0B81  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  9155     0B82  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  9156     0B83  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9157     0B84  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9158     0B85  0086               	movwf	6
  9159     0B86  0187               	clrf	7
  9160     0B87  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  9161     0B88  3FC0               	movwi [0]fsr1
  9162     0B89  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  9163     0B8A  3FC1               	movwi [1]fsr1
  9164                           
  9165                           ;usb/usb_device.c: 1044:     }
  9166     0B8B  2BA4               	goto	l5510
  9167     0B8C                     l5508:
  9168                           
  9169                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  9170     0B8C  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9171     0B8D  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9172     0B8E  0086               	movwf	6
  9173     0B8F  3001               	movlw	1	; select bank2/3
  9174     0B90  0087               	movwf	7
  9175     0B91  3F40               	moviw [0]fsr1
  9176     0B92  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9177     0B93  3F41               	moviw [1]fsr1
  9178     0B94  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  9179     0B95  3004               	movlw	4
  9180     0B96  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  9181     0B97  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  9182     0B98  3000               	movlw	0
  9183     0B99  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  9184     0B9A  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  9185     0B9B  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9186     0B9C  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9187     0B9D  0086               	movwf	6
  9188     0B9E  3001               	movlw	1	; select bank2/3
  9189     0B9F  0087               	movwf	7
  9190     0BA0  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  9191     0BA1  3FC0               	movwi [0]fsr1
  9192     0BA2  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  9193     0BA3  3FC1               	movwi [1]fsr1
  9194     0BA4                     l5510:
  9195                           
  9196                           ;usb/usb_device.c: 1050:     return (void*)handle;
  9197     0BA4  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9198     0BA5  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  9199     0BA6  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9200     0BA7  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  9201     0BA8  0008               	return
  9202     0BA9                     __end_of_USBTransferOnePacket:
  9203                           
  9204                           	psect	text39
  9205     1086                     __ptext39:	
  9206 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  9207 ;; Defined at:
  9208 ;;		line 396 in file "ps2usb.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  9211 ;;		 -> main@scanCode(3), NULL(0), 
  9212 ;; Auto vars:     Size  Location     Type
  9213 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  9214 ;;		 -> main@scanCode(3), NULL(0), 
  9215 ;; Return value:  Size  Location     Type
  9216 ;;                  1    wreg      unsigned char 
  9217 ;; Registers used:
  9218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9219 ;; Tracked objects:
  9220 ;;		On entry : 1F/1
  9221 ;;		On exit  : 1F/1
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;Total ram usage:        1 bytes
  9229 ;; Hardware stack levels used: 1
  9230 ;; Hardware stack levels required when called: 10
  9231 ;; This function calls:
  9232 ;;		Nothing
  9233 ;; This function is called by:
  9234 ;;		_APP_KeyboardTasks
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238     1086                     _PS2USB_ScanCodeToUSBHID:	
  9239                           ;psect for function _PS2USB_ScanCodeToUSBHID
  9240                           
  9241                           
  9242                           ;incstack = 0
  9243                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  9244                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  9245     1086  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  9246                           
  9247                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  9248     1087  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9249     1088  0086               	movwf	6
  9250     1089  3001               	movlw	1	; select bank2/3
  9251     108A  0087               	movwf	7
  9252     108B  0801               	movf	1,w
  9253     108C  1903               	btfsc	3,2
  9254     108D  289B               	goto	l5532
  9255                           
  9256                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  9257     108E  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9258     108F  0086               	movwf	6
  9259     1090  3001               	movlw	1	; select bank2/3
  9260     1091  0087               	movwf	7
  9261     1092  0801               	movf	1,w
  9262     1093  3ED6               	addlw	low (_ps2ExtUsbMap| (0+32768))
  9263     1094  0084               	movwf	4
  9264     1095  3083               	movlw	high (_ps2ExtUsbMap| (0+32768))
  9265     1096  1803               	skipnc
  9266     1097  3E01               	addlw	1
  9267     1098  0085               	movwf	5
  9268     1099  0800               	movf	0,w	;code access
  9269     109A  0008               	return
  9270     109B                     l5532:
  9271                           
  9272                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  9273     109B  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9274     109C  0086               	movwf	6
  9275     109D  3001               	movlw	1	; select bank2/3
  9276     109E  0087               	movwf	7
  9277     109F  0801               	movf	1,w
  9278     10A0  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  9279     10A1  0084               	movwf	4
  9280     10A2  3090               	movlw	high (_ps2UsbMap| (0+32768))
  9281     10A3  1803               	skipnc
  9282     10A4  3E01               	addlw	1
  9283     10A5  0085               	movwf	5
  9284     10A6  0800               	movf	0,w	;code access
  9285     10A7  0008               	return
  9286     10A8                     __end_of_PS2USB_ScanCodeToUSBHID:
  9287                           
  9288                           	psect	text40
  9289     05CF                     __ptext40:	
  9290 ;; *************** function _GenericQueue_Remove *****************
  9291 ;; Defined at:
  9292 ;;		line 35 in file "generic_queue.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  q               2   24[BANK1 ] PTR struct .
  9295 ;;		 -> keyboard(100), 
  9296 ;;  item            1   26[BANK1 ] PTR const void 
  9297 ;;		 -> APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode(1), 
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  j               1   32[BANK1 ] unsigned char 
  9300 ;;  i               1   31[BANK1 ] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      void 
  9303 ;; Registers used:
  9304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 1F/1
  9307 ;;		On exit  : 1F/1
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        9 bytes
  9315 ;; Hardware stack levels used: 1
  9316 ;; Hardware stack levels required when called: 11
  9317 ;; This function calls:
  9318 ;;		_GenericQueue_IsEmpty
  9319 ;;		___awmod
  9320 ;;		___wmul
  9321 ;;		_memcmp
  9322 ;;		_memcpy
  9323 ;; This function is called by:
  9324 ;;		_APP_KeyboardTasks
  9325 ;; This function uses a non-reentrant model
  9326 ;;
  9327                           
  9328     05CF                     _GenericQueue_Remove:	
  9329                           ;psect for function _GenericQueue_Remove
  9330                           
  9331                           
  9332                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9336     05CF  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  9337     05D0  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  9338     05D1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9339     05D2  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  9340     05D3  319C  24F2  3185   	fcall	_GenericQueue_IsEmpty
  9341     05D6  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  9342     05D7  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  9343     05D8  1D03               	btfss	3,2
  9344     05D9  0008               	return
  9345                           
  9346                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  9347     05DA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9348     05DB  3E5C               	addlw	92
  9349     05DC  0086               	movwf	6
  9350     05DD  3000               	movlw	0
  9351     05DE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9352     05DF  0087               	movwf	7
  9353     05E0  0801               	movf	1,w
  9354     05E1                     L5:
  9355     05E1  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  9356     05E2  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9357     05E3  3E5D               	addlw	93
  9358     05E4  0086               	movwf	6
  9359     05E5  3000               	movlw	0
  9360     05E6  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9361     05E7  0087               	movwf	7
  9362     05E8  0801               	movf	1,w
  9363     05E9  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  9364     05EA  1903               	btfsc	3,2
  9365     05EB  0008               	return
  9366                           
  9367                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  9368     05EC  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9369     05ED  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9370     05EE  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9371     05EF  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9372     05F0  00AF               	movwf	___wmul@multiplier^(0+128)
  9373     05F1  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9374     05F2  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9375     05F3  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9376     05F4  3E5A               	addlw	90
  9377     05F5  0086               	movwf	6
  9378     05F6  3000               	movlw	0
  9379     05F7  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9380     05F8  0087               	movwf	7
  9381     05F9  3F40               	moviw [0]fsr1
  9382     05FA  00B1               	movwf	___wmul@multiplicand^(0+128)
  9383     05FB  3F41               	moviw [1]fsr1
  9384     05FC  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9385     05FD  319E  2603  3185   	fcall	___wmul
  9386     0600  082F               	movf	?___wmul^(0+128),w
  9387     0601  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9388     0602  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9389     0603  0830               	movf	(?___wmul+1)^(0+128),w
  9390     0604  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9391     0605  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  9392     0606  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9393     0607  00B5               	movwf	memcmp@vl^(0+128)
  9394     0608  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  9395     0609  00B6               	movwf	(memcmp@vl+1)^(0+128)
  9396     060A  0842               	movf	GenericQueue_Remove@item^(0+128),w
  9397     060B  00B7               	movwf	memcmp@vr^(0+128)
  9398     060C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9399     060D  3E5A               	addlw	90
  9400     060E  0086               	movwf	6
  9401     060F  3000               	movlw	0
  9402     0610  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9403     0611  0087               	movwf	7
  9404     0612  3F40               	moviw [0]fsr1
  9405     0613  00B8               	movwf	memcmp@n^(0+128)
  9406     0614  3F41               	moviw [1]fsr1
  9407     0615  00B9               	movwf	(memcmp@n+1)^(0+128)
  9408     0616  3190  20A8  3185   	fcall	_memcmp
  9409     0619  0835               	movf	?_memcmp^(0+128),w
  9410     061A  0436               	iorwf	(?_memcmp+1)^(0+128),w
  9411     061B  1D03               	btfss	3,2
  9412     061C  2EB3               	goto	l5554
  9413                           
  9414                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  9415     061D  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9416     061E                     L6:
  9417     061E  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  9418     061F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9419     0620  3E5D               	addlw	93
  9420     0621  0086               	movwf	6
  9421     0622  3000               	movlw	0
  9422     0623  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9423     0624  0087               	movwf	7
  9424     0625  0801               	movf	1,w
  9425     0626  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  9426     0627  1903               	btfsc	3,2
  9427     0628  2E89               	goto	l5550
  9428                           
  9429                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  9430     0629  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9431     062A  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9432     062B  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9433     062C  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9434     062D  00AF               	movwf	___wmul@multiplier^(0+128)
  9435     062E  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9436     062F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9437     0630  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9438     0631  3E5A               	addlw	90
  9439     0632  0086               	movwf	6
  9440     0633  3000               	movlw	0
  9441     0634  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9442     0635  0087               	movwf	7
  9443     0636  3F40               	moviw [0]fsr1
  9444     0637  00B1               	movwf	___wmul@multiplicand^(0+128)
  9445     0638  3F41               	moviw [1]fsr1
  9446     0639  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9447     063A  319E  2603  3185   	fcall	___wmul
  9448     063D  082F               	movf	?___wmul^(0+128),w
  9449     063E  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9450     063F  00B5               	movwf	memcpy@d1^(0+128)
  9451     0640  0830               	movf	(?___wmul+1)^(0+128),w
  9452     0641  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9453     0642  00B6               	movwf	(memcpy@d1+1)^(0+128)
  9454     0643  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9455     0644  3E01               	addlw	1
  9456     0645  00AA               	movwf	___awmod@dividend^(0+128)
  9457     0646  3000               	movlw	0
  9458     0647  1803               	skipnc
  9459     0648  3001               	movlw	1
  9460     0649  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9461     064A  300F               	movlw	15
  9462     064B  00A8               	movwf	___awmod@divisor^(0+128)
  9463     064C  3000               	movlw	0
  9464     064D  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9465     064E  3192  2298  3185   	fcall	___awmod
  9466     0651  0829               	movf	(?___awmod+1)^(0+128),w
  9467     0652  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9468     0653  0828               	movf	?___awmod^(0+128),w
  9469     0654  00AF               	movwf	___wmul@multiplier^(0+128)
  9470     0655  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9471     0656  3E5A               	addlw	90
  9472     0657  0086               	movwf	6
  9473     0658  3000               	movlw	0
  9474     0659  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9475     065A  0087               	movwf	7
  9476     065B  3F40               	moviw [0]fsr1
  9477     065C  00B1               	movwf	___wmul@multiplicand^(0+128)
  9478     065D  3F41               	moviw [1]fsr1
  9479     065E  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9480     065F  319E  2603  3185   	fcall	___wmul
  9481     0662  082F               	movf	?___wmul^(0+128),w
  9482     0663  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9483     0664  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9484     0665  0830               	movf	(?___wmul+1)^(0+128),w
  9485     0666  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9486     0667  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  9487     0668  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9488     0669  00B7               	movwf	memcpy@s1^(0+128)
  9489     066A  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  9490     066B  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9491     066C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9492     066D  3E5A               	addlw	90
  9493     066E  0086               	movwf	6
  9494     066F  3000               	movlw	0
  9495     0670  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9496     0671  0087               	movwf	7
  9497     0672  3F40               	moviw [0]fsr1
  9498     0673  00B9               	movwf	memcpy@n^(0+128)
  9499     0674  3F41               	moviw [1]fsr1
  9500     0675  00BA               	movwf	(memcpy@n+1)^(0+128)
  9501     0676  319F  275B  3185   	fcall	_memcpy
  9502                           
  9503                           ;generic_queue.c: 43:                 }
  9504     0679  300F               	movlw	15
  9505     067A  00A8               	movwf	___awmod@divisor^(0+128)
  9506     067B  3000               	movlw	0
  9507     067C  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9508     067D  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9509     067E  3E01               	addlw	1
  9510     067F  00AA               	movwf	___awmod@dividend^(0+128)
  9511     0680  3000               	movlw	0
  9512     0681  1803               	skipnc
  9513     0682  3001               	movlw	1
  9514     0683  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9515     0684  3192  2298  3185   	fcall	___awmod
  9516     0687  0828               	movf	?___awmod^(0+128),w
  9517     0688  2E1E               	goto	L6
  9518     0689                     l5550:
  9519                           
  9520                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  9521     0689  300F               	movlw	15
  9522     068A  00A8               	movwf	___awmod@divisor^(0+128)
  9523     068B  3000               	movlw	0
  9524     068C  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9525     068D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9526     068E  3E5D               	addlw	93
  9527     068F  0086               	movwf	6
  9528     0690  3000               	movlw	0
  9529     0691  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9530     0692  0087               	movwf	7
  9531     0693  0801               	movf	1,w
  9532     0694  3E0E               	addlw	14
  9533     0695  00AA               	movwf	___awmod@dividend^(0+128)
  9534     0696  3000               	movlw	0
  9535     0697  1803               	skipnc
  9536     0698  3001               	movlw	1
  9537     0699  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9538     069A  3192  2298         	fcall	___awmod
  9539     069C  0828               	movf	?___awmod^(0+128),w
  9540     069D  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9541     069E  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9542     069F  3E5D               	addlw	93
  9543     06A0  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  9544     06A1  3000               	movlw	0
  9545     06A2  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9546     06A3  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9547     06A4  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9548     06A5  0086               	movwf	6
  9549     06A6  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9550     06A7  0087               	movwf	7
  9551     06A8  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9552     06A9  0081               	movwf	1
  9553                           
  9554                           ;generic_queue.c: 45:                 q->size--;
  9555     06AA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9556     06AB  3E5E               	addlw	94
  9557     06AC  0086               	movwf	6
  9558     06AD  3000               	movlw	0
  9559     06AE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9560     06AF  0087               	movwf	7
  9561     06B0  3001               	movlw	1
  9562     06B1  0281               	subwf	1,f
  9563                           
  9564                           ;generic_queue.c: 46:                 break;
  9565     06B2  0008               	return
  9566     06B3                     l5554:
  9567                           
  9568                           ;generic_queue.c: 48:         }
  9569     06B3  300F               	movlw	15
  9570     06B4  00A8               	movwf	___awmod@divisor^(0+128)
  9571     06B5  3000               	movlw	0
  9572     06B6  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9573     06B7  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9574     06B8  3E01               	addlw	1
  9575     06B9  00AA               	movwf	___awmod@dividend^(0+128)
  9576     06BA  3000               	movlw	0
  9577     06BB  1803               	skipnc
  9578     06BC  3001               	movlw	1
  9579     06BD  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9580     06BE  3192  2298  3185   	fcall	___awmod
  9581     06C1  0828               	movf	?___awmod^(0+128),w
  9582     06C2  2DE1               	goto	L5
  9583     06C3                     __end_of_GenericQueue_Remove:
  9584                           
  9585                           	psect	text41
  9586     16C2                     __ptext41:	
  9587 ;; *************** function _GenericQueue_Enqueue *****************
  9588 ;; Defined at:
  9589 ;;		line 19 in file "generic_queue.c"
  9590 ;; Parameters:    Size  Location     Type
  9591 ;;  q               2   24[BANK1 ] PTR struct .
  9592 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  9593 ;;  item            2   26[BANK1 ] PTR const void 
  9594 ;;		 -> keyboardScanCode(3), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;		None
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 1F/1
  9603 ;;		On exit  : 1F/1
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        7 bytes
  9611 ;; Hardware stack levels used: 1
  9612 ;; Hardware stack levels required when called: 11
  9613 ;; This function calls:
  9614 ;;		_GenericQueue_IsFull
  9615 ;;		___awmod
  9616 ;;		___wmul
  9617 ;;		_memcpy
  9618 ;; This function is called by:
  9619 ;;		_APP_KeyboardTasks
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623     16C2                     _GenericQueue_Enqueue:	
  9624                           ;psect for function _GenericQueue_Enqueue
  9625                           
  9626                           
  9627                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  9628                           
  9629                           ;incstack = 0
  9630                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9631     16C2  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  9632     16C3  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  9633     16C4  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9634     16C5  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  9635     16C6  319D  2519  3196   	fcall	_GenericQueue_IsFull
  9636     16C9  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  9637     16CA  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  9638     16CB  1D03               	btfss	3,2
  9639     16CC  0008               	return
  9640                           
  9641                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  9642     16CD  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9643     16CE  3E5D               	addlw	93
  9644     16CF  0086               	movwf	6
  9645     16D0  3000               	movlw	0
  9646     16D1  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9647     16D2  0087               	movwf	7
  9648     16D3  0801               	movf	1,w
  9649     16D4  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9650     16D5  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  9651     16D6  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9652     16D7  00AF               	movwf	___wmul@multiplier^(0+128)
  9653     16D8  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  9654     16D9  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9655     16DA  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9656     16DB  3E5A               	addlw	90
  9657     16DC  0086               	movwf	6
  9658     16DD  3000               	movlw	0
  9659     16DE  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9660     16DF  0087               	movwf	7
  9661     16E0  3F40               	moviw [0]fsr1
  9662     16E1  00B1               	movwf	___wmul@multiplicand^(0+128)
  9663     16E2  3F41               	moviw [1]fsr1
  9664     16E3  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9665     16E4  319E  2603  3196   	fcall	___wmul
  9666     16E7  082F               	movf	?___wmul^(0+128),w
  9667     16E8  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  9668     16E9  00B5               	movwf	memcpy@d1^(0+128)
  9669     16EA  0830               	movf	(?___wmul+1)^(0+128),w
  9670     16EB  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9671     16EC  00B6               	movwf	(memcpy@d1+1)^(0+128)
  9672     16ED  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  9673     16EE  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9674     16EF  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  9675     16F0  00B7               	movwf	memcpy@s1^(0+128)
  9676     16F1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9677     16F2  3E5A               	addlw	90
  9678     16F3  0086               	movwf	6
  9679     16F4  3000               	movlw	0
  9680     16F5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9681     16F6  0087               	movwf	7
  9682     16F7  3F40               	moviw [0]fsr1
  9683     16F8  00B9               	movwf	memcpy@n^(0+128)
  9684     16F9  3F41               	moviw [1]fsr1
  9685     16FA  00BA               	movwf	(memcpy@n+1)^(0+128)
  9686     16FB  319F  275B  3196   	fcall	_memcpy
  9687                           
  9688                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  9689     16FE  300F               	movlw	15
  9690     16FF  00A8               	movwf	___awmod@divisor^(0+128)
  9691     1700  3000               	movlw	0
  9692     1701  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9693     1702  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9694     1703  3E5D               	addlw	93
  9695     1704  0086               	movwf	6
  9696     1705  3000               	movlw	0
  9697     1706  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9698     1707  0087               	movwf	7
  9699     1708  0801               	movf	1,w
  9700     1709  3E01               	addlw	1
  9701     170A  00AA               	movwf	___awmod@dividend^(0+128)
  9702     170B  3000               	movlw	0
  9703     170C  1803               	skipnc
  9704     170D  3001               	movlw	1
  9705     170E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9706     170F  3192  2298         	fcall	___awmod
  9707     1711  0828               	movf	?___awmod^(0+128),w
  9708     1712  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9709     1713  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9710     1714  3E5D               	addlw	93
  9711     1715  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  9712     1716  3000               	movlw	0
  9713     1717  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9714     1718  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  9715     1719  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  9716     171A  0086               	movwf	6
  9717     171B  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  9718     171C  0087               	movwf	7
  9719     171D  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9720     171E  0081               	movwf	1
  9721                           
  9722                           ;generic_queue.c: 23:         q->size++;
  9723     171F  3001               	movlw	1
  9724     1720  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9725     1721  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9726     1722  3E5E               	addlw	94
  9727     1723  0086               	movwf	6
  9728     1724  3000               	movlw	0
  9729     1725  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9730     1726  0087               	movwf	7
  9731     1727  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9732     1728  0781               	addwf	1,f
  9733     1729  0008               	return
  9734     172A                     __end_of_GenericQueue_Enqueue:
  9735                           
  9736                           	psect	text42
  9737     1D19                     __ptext42:	
  9738 ;; *************** function _GenericQueue_IsFull *****************
  9739 ;; Defined at:
  9740 ;;		line 15 in file "generic_queue.c"
  9741 ;; Parameters:    Size  Location     Type
  9742 ;;  q               2    0[BANK1 ] PTR struct .
  9743 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;		None
  9746 ;; Return value:  Size  Location     Type
  9747 ;;                  2    0[BANK1 ] int 
  9748 ;; Registers used:
  9749 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9750 ;; Tracked objects:
  9751 ;;		On entry : 1F/1
  9752 ;;		On exit  : 1F/1
  9753 ;;		Unchanged: 0/0
  9754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9755 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;Total ram usage:        4 bytes
  9760 ;; Hardware stack levels used: 1
  9761 ;; Hardware stack levels required when called: 10
  9762 ;; This function calls:
  9763 ;;		Nothing
  9764 ;; This function is called by:
  9765 ;;		_GenericQueue_Enqueue
  9766 ;; This function uses a non-reentrant model
  9767 ;;
  9768                           
  9769     1D19                     _GenericQueue_IsFull:	
  9770                           ;psect for function _GenericQueue_IsFull
  9771                           
  9772                           
  9773                           ;generic_queue.c: 16:     return (q->size == 15);
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  9777     1D19  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  9778     1D1A  3E5E               	addlw	94
  9779     1D1B  0086               	movwf	6
  9780     1D1C  3000               	movlw	0
  9781     1D1D  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  9782     1D1E  0087               	movwf	7
  9783     1D1F  300F               	movlw	15
  9784     1D20  0601               	xorwf	1,w
  9785     1D21  1D03               	btfss	3,2
  9786     1D22  2D25               	goto	u4360
  9787     1D23  3001               	movlw	1
  9788     1D24  2D26               	goto	u4370
  9789     1D25                     u4360:
  9790     1D25  3000               	movlw	0
  9791     1D26                     u4370:
  9792     1D26  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  9793     1D27  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  9794     1D28  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  9795     1D29  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  9796     1D2A  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  9797     1D2B  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  9798     1D2C  0008               	return
  9799     1D2D                     __end_of_GenericQueue_IsFull:
  9800                           
  9801                           	psect	text43
  9802     152A                     __ptext43:	
  9803 ;; *************** function _GenericQueue_CopyToArray *****************
  9804 ;; Defined at:
  9805 ;;		line 63 in file "generic_queue.c"
  9806 ;; Parameters:    Size  Location     Type
  9807 ;;  q               2   24[BANK1 ] PTR struct .
  9808 ;;		 -> keyboard(100), 
  9809 ;;  array           1   26[BANK1 ] PTR void 
  9810 ;;		 -> inputReport(8), 
  9811 ;; Auto vars:     Size  Location     Type
  9812 ;;  count           1   32[BANK1 ] unsigned char 
  9813 ;;  index           1   31[BANK1 ] unsigned char 
  9814 ;; Return value:  Size  Location     Type
  9815 ;;                  1    wreg      void 
  9816 ;; Registers used:
  9817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9818 ;; Tracked objects:
  9819 ;;		On entry : 1F/1
  9820 ;;		On exit  : 1F/1
  9821 ;;		Unchanged: 0/0
  9822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9823 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9824 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9825 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;Total ram usage:        9 bytes
  9828 ;; Hardware stack levels used: 1
  9829 ;; Hardware stack levels required when called: 11
  9830 ;; This function calls:
  9831 ;;		___awmod
  9832 ;;		___bmul
  9833 ;;		___wmul
  9834 ;;		_memcpy
  9835 ;; This function is called by:
  9836 ;;		_APP_KeyboardTasks
  9837 ;; This function uses a non-reentrant model
  9838 ;;
  9839                           
  9840     152A                     _GenericQueue_CopyToArray:	
  9841                           ;psect for function _GenericQueue_CopyToArray
  9842                           
  9843                           
  9844                           ;generic_queue.c: 64:     uint8_t index = q->front;
  9845                           
  9846                           ;incstack = 0
  9847                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9848     152A  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9849     152B  3E5C               	addlw	92
  9850     152C  0086               	movwf	6
  9851     152D  3000               	movlw	0
  9852     152E  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9853     152F  0087               	movwf	7
  9854     1530  0801               	movf	1,w
  9855     1531  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  9856                           
  9857                           ;generic_queue.c: 65:     uint8_t count = 0;
  9858     1532  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  9859     1533                     l1163:	
  9860                           ;generic_queue.c: 72:     }
  9861                           
  9862                           ;generic_queue.c: 66:     while (count < q->size) {
  9863                           
  9864                           
  9865                           ;generic_queue.c: 66:     while (count < q->size) {
  9866     1533  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9867     1534  3E5E               	addlw	94
  9868     1535  0086               	movwf	6
  9869     1536  3000               	movlw	0
  9870     1537  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9871     1538  0087               	movwf	7
  9872     1539  0801               	movf	1,w
  9873     153A  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  9874     153B  1803               	btfsc	3,0
  9875     153C  0008               	return
  9876                           
  9877                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  9878     153D  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  9879     153E  00A8               	movwf	___bmul@multiplicand^(0+128)
  9880     153F  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9881     1540  3E5A               	addlw	90
  9882     1541  0086               	movwf	6
  9883     1542  3000               	movlw	0
  9884     1543  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9885     1544  0087               	movwf	7
  9886     1545  0801               	movf	1,w
  9887     1546  319C  24D0  3195   	fcall	___bmul
  9888     1549  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  9889     154A  00B5               	movwf	memcpy@d1^(0+128)
  9890     154B  01B6               	clrf	(memcpy@d1+1)^(0+128)
  9891     154C  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  9892     154D  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  9893     154E  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  9894     154F  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  9895     1550  00AF               	movwf	___wmul@multiplier^(0+128)
  9896     1551  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  9897     1552  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9898     1553  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9899     1554  3E5A               	addlw	90
  9900     1555  0086               	movwf	6
  9901     1556  3000               	movlw	0
  9902     1557  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9903     1558  0087               	movwf	7
  9904     1559  3F40               	moviw [0]fsr1
  9905     155A  00B1               	movwf	___wmul@multiplicand^(0+128)
  9906     155B  3F41               	moviw [1]fsr1
  9907     155C  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9908     155D  319E  2603  3195   	fcall	___wmul
  9909     1560  082F               	movf	?___wmul^(0+128),w
  9910     1561  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  9911     1562  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  9912     1563  0830               	movf	(?___wmul+1)^(0+128),w
  9913     1564  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9914     1565  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  9915     1566  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  9916     1567  00B7               	movwf	memcpy@s1^(0+128)
  9917     1568  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  9918     1569  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9919     156A  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9920     156B  3E5A               	addlw	90
  9921     156C  0086               	movwf	6
  9922     156D  3000               	movlw	0
  9923     156E  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9924     156F  0087               	movwf	7
  9925     1570  3F40               	moviw [0]fsr1
  9926     1571  00B9               	movwf	memcpy@n^(0+128)
  9927     1572  3F41               	moviw [1]fsr1
  9928     1573  00BA               	movwf	(memcpy@n+1)^(0+128)
  9929     1574  319F  275B  3195   	fcall	_memcpy
  9930                           
  9931                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  9932     1577  300F               	movlw	15
  9933     1578  00A8               	movwf	___awmod@divisor^(0+128)
  9934     1579  3000               	movlw	0
  9935     157A  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9936     157B  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  9937     157C  3E01               	addlw	1
  9938     157D  00AA               	movwf	___awmod@dividend^(0+128)
  9939     157E  3000               	movlw	0
  9940     157F  1803               	skipnc
  9941     1580  3001               	movlw	1
  9942     1581  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9943     1582  3192  2298  3195   	fcall	___awmod
  9944     1585  0828               	movf	?___awmod^(0+128),w
  9945     1586  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  9946                           
  9947                           ;generic_queue.c: 71:         count++;
  9948     1587  3001               	movlw	1
  9949     1588  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  9950     1589  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  9951     158A  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  9952     158B  2D33               	goto	l1163
  9953     158C                     __end_of_GenericQueue_CopyToArray:
  9954                           
  9955                           	psect	text44
  9956     1F5B                     __ptext44:	
  9957 ;; *************** function _memcpy *****************
  9958 ;; Defined at:
  9959 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;  d1              2   13[BANK1 ] PTR void 
  9962 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  9963 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
  9964 ;;  s1              2   15[BANK1 ] PTR const void 
  9965 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  9966 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), keyboard(100), CtrlTrfData(8), 
  9967 ;;		 -> SetupPkt(8), 
  9968 ;;  n               2   17[BANK1 ] unsigned int 
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  9971 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  9972 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), keyboard(100), CtrlTrfData(8), 
  9973 ;;		 -> SetupPkt(8), 
  9974 ;;  d               2   19[BANK1 ] PTR unsigned char 
  9975 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  9976 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
  9977 ;;  tmp             1   23[BANK1 ] unsigned char 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  2   13[BANK1 ] PTR void 
  9980 ;; Registers used:
  9981 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9982 ;; Tracked objects:
  9983 ;;		On entry : 1F/1
  9984 ;;		On exit  : 1F/1
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:       11 bytes
  9992 ;; Hardware stack levels used: 1
  9993 ;; Hardware stack levels required when called: 10
  9994 ;; This function calls:
  9995 ;;		Nothing
  9996 ;; This function is called by:
  9997 ;;		_GenericQueue_Enqueue
  9998 ;;		_GenericQueue_Dequeue
  9999 ;;		_GenericQueue_Remove
 10000 ;;		_GenericQueue_CopyToArray
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004     1F5B                     _memcpy:	
 10005                           ;psect for function _memcpy
 10006                           
 10007                           
 10008                           ;incstack = 0
 10009                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 10010     1F5B  0838               	movf	(memcpy@s1+1)^(0+128),w
 10011     1F5C  00BE               	movwf	(memcpy@s+1)^(0+128)
 10012     1F5D  0837               	movf	memcpy@s1^(0+128),w
 10013     1F5E  00BD               	movwf	memcpy@s^(0+128)
 10014     1F5F  0836               	movf	(memcpy@d1+1)^(0+128),w
 10015     1F60  00BC               	movwf	(memcpy@d+1)^(0+128)
 10016     1F61  0835               	movf	memcpy@d1^(0+128),w
 10017     1F62  00BB               	movwf	memcpy@d^(0+128)
 10018     1F63                     l4914:
 10019     1F63  3001               	movlw	1
 10020     1F64  02B9               	subwf	memcpy@n^(0+128),f
 10021     1F65  3000               	movlw	0
 10022     1F66  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
 10023     1F67  0A39               	incf	memcpy@n^(0+128),w
 10024     1F68  1903               	btfsc	3,2
 10025     1F69  0A3A               	incf	(memcpy@n+1)^(0+128),w
 10026     1F6A  1903               	btfsc	3,2
 10027     1F6B  0008               	return
 10028     1F6C  083D               	movf	memcpy@s^(0+128),w
 10029     1F6D  0086               	movwf	6
 10030     1F6E  083E               	movf	(memcpy@s+1)^(0+128),w
 10031     1F6F  0087               	movwf	7
 10032     1F70  0801               	movf	1,w
 10033     1F71  00BF               	movwf	memcpy@tmp^(0+128)
 10034     1F72  3001               	movlw	1
 10035     1F73  07BD               	addwf	memcpy@s^(0+128),f
 10036     1F74  3000               	movlw	0
 10037     1F75  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
 10038     1F76  083B               	movf	memcpy@d^(0+128),w
 10039     1F77  0086               	movwf	6
 10040     1F78  083C               	movf	(memcpy@d+1)^(0+128),w
 10041     1F79  0087               	movwf	7
 10042     1F7A  083F               	movf	memcpy@tmp^(0+128),w
 10043     1F7B  0081               	movwf	1
 10044     1F7C  3001               	movlw	1
 10045     1F7D  07BB               	addwf	memcpy@d^(0+128),f
 10046     1F7E  3000               	movlw	0
 10047     1F7F  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
 10048     1F80  2F63               	goto	l4914
 10049     1F81                     __end_of_memcpy:
 10050                           
 10051                           	psect	text45
 10052     1CD0                     __ptext45:	
 10053 ;; *************** function ___bmul *****************
 10054 ;; Defined at:
 10055 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
 10056 ;; Parameters:    Size  Location     Type
 10057 ;;  multiplier      1    wreg     unsigned char 
 10058 ;;  multiplicand    1    0[BANK1 ] unsigned char 
 10059 ;; Auto vars:     Size  Location     Type
 10060 ;;  multiplier      1    3[BANK1 ] unsigned char 
 10061 ;;  product         1    2[BANK1 ] unsigned char 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      unsigned char 
 10064 ;; Registers used:
 10065 ;;		wreg, status,2, status,0
 10066 ;; Tracked objects:
 10067 ;;		On entry : 1F/1
 10068 ;;		On exit  : 1F/1
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10071 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;Total ram usage:        4 bytes
 10076 ;; Hardware stack levels used: 1
 10077 ;; Hardware stack levels required when called: 10
 10078 ;; This function calls:
 10079 ;;		Nothing
 10080 ;; This function is called by:
 10081 ;;		_GenericQueue_CopyToArray
 10082 ;; This function uses a non-reentrant model
 10083 ;;
 10084                           
 10085     1CD0                     ___bmul:	
 10086                           ;psect for function ___bmul
 10087                           
 10088                           
 10089                           ;incstack = 0
 10090                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10091                           ;___bmul@multiplier stored from wreg
 10092     1CD0  00AB               	movwf	___bmul@multiplier^(0+128)
 10093     1CD1  01AA               	clrf	___bmul@product^(0+128)
 10094     1CD2                     l5094:
 10095     1CD2  1C2B               	btfss	___bmul@multiplier^(0+128),0
 10096     1CD3  2CD8               	goto	l5098
 10097     1CD4  0828               	movf	___bmul@multiplicand^(0+128),w
 10098     1CD5  00A9               	movwf	??___bmul^(0+128)
 10099     1CD6  0829               	movf	??___bmul^(0+128),w
 10100     1CD7  07AA               	addwf	___bmul@product^(0+128),f
 10101     1CD8                     l5098:
 10102     1CD8  1003               	clrc
 10103     1CD9  0DA8               	rlf	___bmul@multiplicand^(0+128),f
 10104     1CDA  1003               	clrc
 10105     1CDB  0CAB               	rrf	___bmul@multiplier^(0+128),f
 10106     1CDC  082B               	movf	___bmul@multiplier^(0+128),w
 10107     1CDD  1D03               	btfss	3,2
 10108     1CDE  2CD2               	goto	l5094
 10109     1CDF  082A               	movf	___bmul@product^(0+128),w
 10110     1CE0  0008               	return
 10111     1CE1                     __end_of___bmul:
 10112                           
 10113                           	psect	text46
 10114     14C8                     __ptext46:	
 10115 ;; *************** function _GenericQueue_Contains *****************
 10116 ;; Defined at:
 10117 ;;		line 52 in file "generic_queue.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  q               2   22[BANK1 ] PTR struct .
 10120 ;;		 -> keyboard(100), 
 10121 ;;  item            1   24[BANK1 ] PTR const void 
 10122 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;  i               1   29[BANK1 ] unsigned char 
 10125 ;; Return value:  Size  Location     Type
 10126 ;;                  1    wreg      _Bool 
 10127 ;; Registers used:
 10128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 1F/1
 10131 ;;		On exit  : 1F/1
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10134 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;Total ram usage:        8 bytes
 10139 ;; Hardware stack levels used: 1
 10140 ;; Hardware stack levels required when called: 11
 10141 ;; This function calls:
 10142 ;;		_GenericQueue_IsEmpty
 10143 ;;		___awmod
 10144 ;;		___wmul
 10145 ;;		_memcmp
 10146 ;; This function is called by:
 10147 ;;		_APP_KeyboardTasks
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151     14C8                     _GenericQueue_Contains:	
 10152                           ;psect for function _GenericQueue_Contains
 10153                           
 10154                           
 10155                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
 10156                           
 10157                           ;incstack = 0
 10158                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10159     14C8  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
 10160     14C9  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
 10161     14CA  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10162     14CB  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
 10163     14CC  319C  24F2  3194   	fcall	_GenericQueue_IsEmpty
 10164     14CF  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
 10165     14D0  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
 10166     14D1  1D03               	btfss	3,2
 10167     14D2  2D28               	goto	l5572
 10168                           
 10169                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
 10170     14D3  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10171     14D4  3E5C               	addlw	92
 10172     14D5  0086               	movwf	6
 10173     14D6  3000               	movlw	0
 10174     14D7  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10175     14D8  0087               	movwf	7
 10176     14D9  0801               	movf	1,w
 10177     14DA                     L7:
 10178     14DA  00C5               	movwf	GenericQueue_Contains@i^(0+128)
 10179     14DB  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10180     14DC  3E5D               	addlw	93
 10181     14DD  0086               	movwf	6
 10182     14DE  3000               	movlw	0
 10183     14DF  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10184     14E0  0087               	movwf	7
 10185     14E1  0801               	movf	1,w
 10186     14E2  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
 10187     14E3  1903               	btfsc	3,2
 10188     14E4  2D28               	goto	l5572
 10189                           
 10190                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
 10191     14E5  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10192     14E6  00C1               	movwf	??_GenericQueue_Contains^(0+128)
 10193     14E7  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
 10194     14E8  0841               	movf	??_GenericQueue_Contains^(0+128),w
 10195     14E9  00AF               	movwf	___wmul@multiplier^(0+128)
 10196     14EA  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
 10197     14EB  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
 10198     14EC  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10199     14ED  3E5A               	addlw	90
 10200     14EE  0086               	movwf	6
 10201     14EF  3000               	movlw	0
 10202     14F0  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10203     14F1  0087               	movwf	7
 10204     14F2  3F40               	moviw [0]fsr1
 10205     14F3  00B1               	movwf	___wmul@multiplicand^(0+128)
 10206     14F4  3F41               	moviw [1]fsr1
 10207     14F5  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
 10208     14F6  319E  2603  3194   	fcall	___wmul
 10209     14F9  082F               	movf	?___wmul^(0+128),w
 10210     14FA  073E               	addwf	GenericQueue_Contains@q^(0+128),w
 10211     14FB  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
 10212     14FC  0830               	movf	(?___wmul+1)^(0+128),w
 10213     14FD  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10214     14FE  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
 10215     14FF  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
 10216     1500  00B5               	movwf	memcmp@vl^(0+128)
 10217     1501  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
 10218     1502  00B6               	movwf	(memcmp@vl+1)^(0+128)
 10219     1503  0840               	movf	GenericQueue_Contains@item^(0+128),w
 10220     1504  00B7               	movwf	memcmp@vr^(0+128)
 10221     1505  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10222     1506  3E5A               	addlw	90
 10223     1507  0086               	movwf	6
 10224     1508  3000               	movlw	0
 10225     1509  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10226     150A  0087               	movwf	7
 10227     150B  3F40               	moviw [0]fsr1
 10228     150C  00B8               	movwf	memcmp@n^(0+128)
 10229     150D  3F41               	moviw [1]fsr1
 10230     150E  00B9               	movwf	(memcmp@n+1)^(0+128)
 10231     150F  3190  20A8  3194   	fcall	_memcmp
 10232     1512  0835               	movf	?_memcmp^(0+128),w
 10233     1513  0436               	iorwf	(?_memcmp+1)^(0+128),w
 10234     1514  1D03               	btfss	3,2
 10235     1515  2D18               	goto	l5568
 10236                           
 10237                           ;generic_queue.c: 56:                 return 1;
 10238     1516  3001               	movlw	1
 10239     1517  0008               	return
 10240     1518                     l5568:
 10241                           
 10242                           ;generic_queue.c: 58:         }
 10243     1518  300F               	movlw	15
 10244     1519  00A8               	movwf	___awmod@divisor^(0+128)
 10245     151A  3000               	movlw	0
 10246     151B  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10247     151C  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10248     151D  3E01               	addlw	1
 10249     151E  00AA               	movwf	___awmod@dividend^(0+128)
 10250     151F  3000               	movlw	0
 10251     1520  1803               	skipnc
 10252     1521  3001               	movlw	1
 10253     1522  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10254     1523  3192  2298  3194   	fcall	___awmod
 10255     1526  0828               	movf	?___awmod^(0+128),w
 10256     1527  2CDA               	goto	L7
 10257     1528                     l5572:
 10258                           
 10259                           ;generic_queue.c: 60:     return 0;
 10260     1528  3000               	movlw	0
 10261     1529  0008               	return
 10262     152A                     __end_of_GenericQueue_Contains:
 10263                           
 10264                           	psect	text47
 10265     10A8                     __ptext47:	
 10266 ;; *************** function _memcmp *****************
 10267 ;; Defined at:
 10268 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
 10269 ;; Parameters:    Size  Location     Type
 10270 ;;  vl              2   13[BANK1 ] PTR const void 
 10271 ;;		 -> keyboard$buffer(90), keyboard(100), 
 10272 ;;  vr              1   15[BANK1 ] PTR const void 
 10273 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode_2876(1)
      +, APP_KeyboardTasks@usbHidCode(1), 
 10274 ;;  n               2   16[BANK1 ] unsigned int 
 10275 ;; Auto vars:     Size  Location     Type
 10276 ;;  l               2   19[BANK1 ] PTR const unsigned char 
 10277 ;;		 -> keyboard$buffer(90), keyboard(100), 
 10278 ;;  r               1   21[BANK1 ] PTR const unsigned char 
 10279 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode_2876(1)
      +, APP_KeyboardTasks@usbHidCode(1), 
 10280 ;; Return value:  Size  Location     Type
 10281 ;;                  2   13[BANK1 ] int 
 10282 ;; Registers used:
 10283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10284 ;; Tracked objects:
 10285 ;;		On entry : 1F/1
 10286 ;;		On exit  : 1F/1
 10287 ;;		Unchanged: 0/0
 10288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10289 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;Total ram usage:        9 bytes
 10294 ;; Hardware stack levels used: 1
 10295 ;; Hardware stack levels required when called: 10
 10296 ;; This function calls:
 10297 ;;		Nothing
 10298 ;; This function is called by:
 10299 ;;		_GenericQueue_Remove
 10300 ;;		_GenericQueue_Contains
 10301 ;; This function uses a non-reentrant model
 10302 ;;
 10303                           
 10304     10A8                     _memcmp:	
 10305                           ;psect for function _memcmp
 10306                           
 10307                           
 10308                           ;incstack = 0
 10309                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
 10310     10A8  0836               	movf	(memcmp@vl+1)^(0+128),w
 10311     10A9  00BC               	movwf	(memcmp@l+1)^(0+128)
 10312     10AA  0835               	movf	memcmp@vl^(0+128),w
 10313     10AB  00BB               	movwf	memcmp@l^(0+128)
 10314     10AC  0837               	movf	memcmp@vr^(0+128),w
 10315     10AD  00BD               	movwf	memcmp@r^(0+128)
 10316     10AE  28C6               	goto	l5080
 10317     10AF                     l5082:
 10318     10AF  083D               	movf	memcmp@r^(0+128),w
 10319     10B0  0086               	movwf	6
 10320     10B1  0187               	clrf	7
 10321     10B2  083B               	movf	memcmp@l^(0+128),w
 10322     10B3  0084               	movwf	4
 10323     10B4  083C               	movf	(memcmp@l+1)^(0+128),w
 10324     10B5  0085               	movwf	5
 10325     10B6  0800               	movf	0,w
 10326     10B7  0601               	xorwf	1,w
 10327     10B8  1D03               	btfss	3,2
 10328     10B9  28CA               	goto	l5084
 10329     10BA  3001               	movlw	1
 10330     10BB  02B8               	subwf	memcmp@n^(0+128),f
 10331     10BC  3000               	movlw	0
 10332     10BD  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
 10333     10BE  3001               	movlw	1
 10334     10BF  07BB               	addwf	memcmp@l^(0+128),f
 10335     10C0  3000               	movlw	0
 10336     10C1  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
 10337     10C2  3001               	movlw	1
 10338     10C3  00BA               	movwf	??_memcmp^(0+128)
 10339     10C4  083A               	movf	??_memcmp^(0+128),w
 10340     10C5  07BD               	addwf	memcmp@r^(0+128),f
 10341     10C6                     l5080:
 10342     10C6  0838               	movf	memcmp@n^(0+128),w
 10343     10C7  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10344     10C8  1D03               	btfss	3,2
 10345     10C9  28AF               	goto	l5082
 10346     10CA                     l5084:
 10347     10CA  0838               	movf	memcmp@n^(0+128),w
 10348     10CB  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10349     10CC  1D03               	btfss	3,2
 10350     10CD  28D1               	goto	l5088
 10351     10CE  01B5               	clrf	?_memcmp^(0+128)
 10352     10CF  01B6               	clrf	(?_memcmp+1)^(0+128)
 10353     10D0  0008               	return
 10354     10D1                     l5088:
 10355     10D1  083B               	movf	memcmp@l^(0+128),w
 10356     10D2  0086               	movwf	6
 10357     10D3  083C               	movf	(memcmp@l+1)^(0+128),w
 10358     10D4  0087               	movwf	7
 10359     10D5  083D               	movf	memcmp@r^(0+128),w
 10360     10D6  0084               	movwf	4
 10361     10D7  0185               	clrf	5
 10362     10D8  0800               	movf	0,w
 10363     10D9  0201               	subwf	1,w
 10364     10DA  00B5               	movwf	?_memcmp^(0+128)
 10365     10DB  01B6               	clrf	(?_memcmp^(0+128)+1)
 10366     10DC  1C03               	skipc
 10367     10DD  03B6               	decf	(?_memcmp+1)^(0+128),f
 10368     10DE  0008               	return
 10369     10DF                     __end_of_memcmp:
 10370                           
 10371                           	psect	text48
 10372     1E03                     __ptext48:	
 10373 ;; *************** function ___wmul *****************
 10374 ;; Defined at:
 10375 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;  multiplier      2    7[BANK1 ] unsigned int 
 10378 ;;  multiplicand    2    9[BANK1 ] unsigned int 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;  product         2   11[BANK1 ] unsigned int 
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  2    7[BANK1 ] unsigned int 
 10383 ;; Registers used:
 10384 ;;		wreg, status,2, status,0
 10385 ;; Tracked objects:
 10386 ;;		On entry : 1F/1
 10387 ;;		On exit  : 1F/1
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        6 bytes
 10395 ;; Hardware stack levels used: 1
 10396 ;; Hardware stack levels required when called: 10
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_GenericQueue_Enqueue
 10401 ;;		_GenericQueue_Dequeue
 10402 ;;		_GenericQueue_Remove
 10403 ;;		_GenericQueue_Contains
 10404 ;;		_GenericQueue_CopyToArray
 10405 ;;		_read_prec_or_width
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409     1E03                     ___wmul:	
 10410                           ;psect for function ___wmul
 10411                           
 10412                           
 10413                           ;incstack = 0
 10414                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10415     1E03  01B3               	clrf	___wmul@product^(0+128)
 10416     1E04  01B4               	clrf	(___wmul@product+1)^(0+128)
 10417     1E05                     l4548:
 10418     1E05  1C2F               	btfss	___wmul@multiplier^(0+128),0
 10419     1E06  2E0B               	goto	l1234
 10420     1E07  0831               	movf	___wmul@multiplicand^(0+128),w
 10421     1E08  07B3               	addwf	___wmul@product^(0+128),f
 10422     1E09  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
 10423     1E0A  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
 10424     1E0B                     l1234:
 10425     1E0B  3001               	movlw	1
 10426     1E0C                     u3635:
 10427     1E0C  35B1               	lslf	___wmul@multiplicand^(0+128),f
 10428     1E0D  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
 10429     1E0E  0B89               	decfsz	9,f
 10430     1E0F  2E0C               	goto	u3635
 10431     1E10  3001               	movlw	1
 10432     1E11                     u3645:
 10433     1E11  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
 10434     1E12  0CAF               	rrf	___wmul@multiplier^(0+128),f
 10435     1E13  0B89               	decfsz	9,f
 10436     1E14  2E11               	goto	u3645
 10437     1E15  082F               	movf	___wmul@multiplier^(0+128),w
 10438     1E16  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
 10439     1E17  1D03               	btfss	3,2
 10440     1E18  2E05               	goto	l4548
 10441     1E19  0834               	movf	(___wmul@product+1)^(0+128),w
 10442     1E1A  00B0               	movwf	(?___wmul+1)^(0+128)
 10443     1E1B  0833               	movf	___wmul@product^(0+128),w
 10444     1E1C  00AF               	movwf	?___wmul^(0+128)
 10445     1E1D  0008               	return
 10446     1E1E                     __end_of___wmul:
 10447                           
 10448                           	psect	text49
 10449     1298                     __ptext49:	
 10450 ;; *************** function ___awmod *****************
 10451 ;; Defined at:
 10452 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;  divisor         2    0[BANK1 ] int 
 10455 ;;  dividend        2    2[BANK1 ] int 
 10456 ;; Auto vars:     Size  Location     Type
 10457 ;;  sign            1    6[BANK1 ] unsigned char 
 10458 ;;  counter         1    5[BANK1 ] unsigned char 
 10459 ;; Return value:  Size  Location     Type
 10460 ;;                  2    0[BANK1 ] int 
 10461 ;; Registers used:
 10462 ;;		wreg, status,2, status,0
 10463 ;; Tracked objects:
 10464 ;;		On entry : 1F/1
 10465 ;;		On exit  : 1F/1
 10466 ;;		Unchanged: 0/0
 10467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10468 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;Total ram usage:        7 bytes
 10473 ;; Hardware stack levels used: 1
 10474 ;; Hardware stack levels required when called: 10
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_GenericQueue_Enqueue
 10479 ;;		_GenericQueue_Dequeue
 10480 ;;		_GenericQueue_Remove
 10481 ;;		_GenericQueue_Contains
 10482 ;;		_GenericQueue_CopyToArray
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486     1298                     ___awmod:	
 10487                           ;psect for function ___awmod
 10488                           
 10489                           
 10490                           ;incstack = 0
 10491                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10492     1298  01AE               	clrf	___awmod@sign^(0+128)
 10493     1299  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
 10494     129A  2AA2               	goto	l5114
 10495     129B  09AA               	comf	___awmod@dividend^(0+128),f
 10496     129C  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10497     129D  0AAA               	incf	___awmod@dividend^(0+128),f
 10498     129E  1903               	skipnz
 10499     129F  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10500     12A0  01AE               	clrf	___awmod@sign^(0+128)
 10501     12A1  0AAE               	incf	___awmod@sign^(0+128),f
 10502     12A2                     l5114:
 10503     12A2  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
 10504     12A3  2AA9               	goto	l5118
 10505     12A4  09A8               	comf	___awmod@divisor^(0+128),f
 10506     12A5  09A9               	comf	(___awmod@divisor+1)^(0+128),f
 10507     12A6  0AA8               	incf	___awmod@divisor^(0+128),f
 10508     12A7  1903               	skipnz
 10509     12A8  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
 10510     12A9                     l5118:
 10511     12A9  0828               	movf	___awmod@divisor^(0+128),w
 10512     12AA  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
 10513     12AB  1903               	btfsc	3,2
 10514     12AC  2AD0               	goto	l5136
 10515     12AD  01AD               	clrf	___awmod@counter^(0+128)
 10516     12AE  0AAD               	incf	___awmod@counter^(0+128),f
 10517     12AF                     l5126:
 10518     12AF  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
 10519     12B0  2ABB               	goto	l5128
 10520     12B1  3001               	movlw	1
 10521     12B2                     u4465:
 10522     12B2  35A8               	lslf	___awmod@divisor^(0+128),f
 10523     12B3  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
 10524     12B4  0B89               	decfsz	9,f
 10525     12B5  2AB2               	goto	u4465
 10526     12B6  3001               	movlw	1
 10527     12B7  00AC               	movwf	??___awmod^(0+128)
 10528     12B8  082C               	movf	??___awmod^(0+128),w
 10529     12B9  07AD               	addwf	___awmod@counter^(0+128),f
 10530     12BA  2AAF               	goto	l5126
 10531     12BB                     l5128:
 10532     12BB  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10533     12BC  022B               	subwf	(___awmod@dividend+1)^(0+128),w
 10534     12BD  1D03               	skipz
 10535     12BE  2AC1               	goto	u4485
 10536     12BF  0828               	movf	___awmod@divisor^(0+128),w
 10537     12C0  022A               	subwf	___awmod@dividend^(0+128),w
 10538     12C1                     u4485:
 10539     12C1  1C03               	skipc
 10540     12C2  2AC7               	goto	l5132
 10541     12C3  0828               	movf	___awmod@divisor^(0+128),w
 10542     12C4  02AA               	subwf	___awmod@dividend^(0+128),f
 10543     12C5  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10544     12C6  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
 10545     12C7                     l5132:
 10546     12C7  3001               	movlw	1
 10547     12C8                     u4495:
 10548     12C8  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
 10549     12C9  0CA8               	rrf	___awmod@divisor^(0+128),f
 10550     12CA  0B89               	decfsz	9,f
 10551     12CB  2AC8               	goto	u4495
 10552     12CC  3001               	movlw	1
 10553     12CD  02AD               	subwf	___awmod@counter^(0+128),f
 10554     12CE  1D03               	btfss	3,2
 10555     12CF  2ABB               	goto	l5128
 10556     12D0                     l5136:
 10557     12D0  082E               	movf	___awmod@sign^(0+128),w
 10558     12D1  1903               	btfsc	3,2
 10559     12D2  2AD8               	goto	l5140
 10560     12D3  09AA               	comf	___awmod@dividend^(0+128),f
 10561     12D4  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10562     12D5  0AAA               	incf	___awmod@dividend^(0+128),f
 10563     12D6  1903               	skipnz
 10564     12D7  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10565     12D8                     l5140:
 10566     12D8  082B               	movf	(___awmod@dividend+1)^(0+128),w
 10567     12D9  00A9               	movwf	(?___awmod+1)^(0+128)
 10568     12DA  082A               	movf	___awmod@dividend^(0+128),w
 10569     12DB  00A8               	movwf	?___awmod^(0+128)
 10570     12DC  0008               	return
 10571     12DD                     __end_of___awmod:
 10572                           
 10573                           	psect	text50
 10574     1CF2                     __ptext50:	
 10575 ;; *************** function _GenericQueue_IsEmpty *****************
 10576 ;; Defined at:
 10577 ;;		line 11 in file "generic_queue.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;  q               2    0[BANK1 ] PTR struct .
 10580 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 10581 ;; Auto vars:     Size  Location     Type
 10582 ;;		None
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  2    0[BANK1 ] int 
 10585 ;; Registers used:
 10586 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10587 ;; Tracked objects:
 10588 ;;		On entry : 1F/1
 10589 ;;		On exit  : 1F/1
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10592 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;Total ram usage:        4 bytes
 10597 ;; Hardware stack levels used: 1
 10598 ;; Hardware stack levels required when called: 10
 10599 ;; This function calls:
 10600 ;;		Nothing
 10601 ;; This function is called by:
 10602 ;;		_PS2Keyboard_GetScanCode
 10603 ;;		_GenericQueue_Dequeue
 10604 ;;		_GenericQueue_Remove
 10605 ;;		_GenericQueue_Contains
 10606 ;; This function uses a non-reentrant model
 10607 ;;
 10608                           
 10609     1CF2                     _GenericQueue_IsEmpty:	
 10610                           ;psect for function _GenericQueue_IsEmpty
 10611                           
 10612                           
 10613                           ;generic_queue.c: 12:     return (q->size == 0);
 10614                           
 10615                           ;incstack = 0
 10616                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
 10617     1CF2  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
 10618     1CF3  3E5E               	addlw	94
 10619     1CF4  0086               	movwf	6
 10620     1CF5  3000               	movlw	0
 10621     1CF6  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
 10622     1CF7  0087               	movwf	7
 10623     1CF8  0801               	movf	1,w
 10624     1CF9  1D03               	btfss	3,2
 10625     1CFA  2CFD               	goto	u4250
 10626     1CFB  3001               	movlw	1
 10627     1CFC  2CFE               	goto	u4260
 10628     1CFD                     u4250:
 10629     1CFD  3000               	movlw	0
 10630     1CFE                     u4260:
 10631     1CFE  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
 10632     1CFF  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
 10633     1D00  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
 10634     1D01  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
 10635     1D02  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
 10636     1D03  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
 10637     1D04  0008               	return
 10638     1D05                     __end_of_GenericQueue_IsEmpty:
 10639                           
 10640                           	psect	text51
 10641     1BE8                     __ptext51:	
 10642 ;; *************** function _APP_KeyboardProcessOutputReport *****************
 10643 ;; Defined at:
 10644 ;;		line 488 in file "app_device_keyboard.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg
 10653 ;; Tracked objects:
 10654 ;;		On entry : 1D/1
 10655 ;;		On exit  : 1F/2
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used: 1
 10664 ;; Hardware stack levels required when called: 10
 10665 ;; This function calls:
 10666 ;;		Nothing
 10667 ;; This function is called by:
 10668 ;;		_APP_KeyboardTasks
 10669 ;; This function uses a non-reentrant model
 10670 ;;
 10671                           
 10672     1BE8                     _APP_KeyboardProcessOutputReport:	
 10673                           ;psect for function _APP_KeyboardProcessOutputReport
 10674                           
 10675                           
 10676                           ;app_device_keyboard.c: 489:     if (outputReport.leds.capsLock) {
 10677                           
 10678                           ;incstack = 0
 10679                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg]
 10680     1BE8  0022               	movlb	2	; select bank2
 10681     1BE9  0820               	movf	32,w	;volatile
 10682     1BEA  0008               	return
 10683     1BEB                     __end_of_APP_KeyboardProcessOutputReport:
 10684                           
 10685                           	psect	intentry
 10686     0004                     __pintentry:	
 10687 ;; *************** function _INTERRUPT_InterruptManager *****************
 10688 ;; Defined at:
 10689 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10690 ;; Parameters:    Size  Location     Type
 10691 ;;		None
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;		None
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  1    wreg      void 
 10696 ;; Registers used:
 10697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10698 ;; Tracked objects:
 10699 ;;		On entry : 0/0
 10700 ;;		On exit  : 0/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;Total ram usage:        0 bytes
 10708 ;; Hardware stack levels used: 1
 10709 ;; Hardware stack levels required when called: 9
 10710 ;; This function calls:
 10711 ;;		NULL
 10712 ;;		_EUSART_Receive_ISR
 10713 ;;		_EUSART_Transmit_ISR
 10714 ;;		_PIN_MANAGER_IOC
 10715 ;;		_TMR2_ISR
 10716 ;;		_USBDeviceTasks
 10717 ;; This function is called by:
 10718 ;;		Interrupt level 1
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722     0004                     _INTERRUPT_InterruptManager:
 10723                           
 10724                           ;incstack = 0
 10725 ;; hardware stack exceeded
 10726     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10727                           
 10728                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10729     0005  3180               	pagesel	$
 10730                           
 10731                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 10732     0006  198B               	btfsc	11,3	;volatile
 10733     0007  1C0B               	btfss	11,0	;volatile
 10734     0008  280D               	goto	i1l141
 10735                           
 10736                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 10737     0009  319C  2450  3180   	fcall	_PIN_MANAGER_IOC
 10738                           
 10739                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10740     000C  283B               	goto	i1l153
 10741     000D                     i1l141:	
 10742                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10743                           
 10744     000D  1F0B               	btfss	11,6	;volatile
 10745     000E  283B               	goto	i1l153
 10746                           
 10747                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
 10748     000F  0021               	movlb	1	; select bank1
 10749     0010  1D12               	btfss	18,2	;volatile
 10750     0011  2819               	goto	i1l144
 10751     0012  0020               	movlb	0	; select bank0
 10752     0013  1D12               	btfss	18,2	;volatile
 10753     0014  2819               	goto	i1l144
 10754                           
 10755                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
 10756     0015  3186  26C3  3180   	fcall	_USBDeviceTasks
 10757                           
 10758                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10759     0018  283B               	goto	i1l153
 10760     0019                     i1l144:	
 10761                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
 10762                           
 10763     0019  0021               	movlb	1	; select bank1
 10764     001A  1E11               	btfss	17,4	;volatile
 10765     001B  2826               	goto	i1l146
 10766     001C  0020               	movlb	0	; select bank0
 10767     001D  1E11               	btfss	17,4	;volatile
 10768     001E  2826               	goto	i1l146
 10769                           
 10770                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
 10771     001F  0023               	movlb	3	; select bank3
 10772     0020  085C               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384),w
 10773     0021  008A               	movwf	10
 10774     0022  085B               	movf	_EUSART_TxDefaultInterruptHandler^(0+384),w
 10775     0023  000A               	callw
 10776     0024  3180               	pagesel	$
 10777                           
 10778                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 10779     0025  283B               	goto	i1l153
 10780     0026                     i1l146:	
 10781                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 10782                           
 10783     0026  0021               	movlb	1	; select bank1
 10784     0027  1E91               	btfss	17,5	;volatile
 10785     0028  2833               	goto	i1l148
 10786     0029  0020               	movlb	0	; select bank0
 10787     002A  1E91               	btfss	17,5	;volatile
 10788     002B  2833               	goto	i1l148
 10789                           
 10790                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
 10791     002C  0023               	movlb	3	; select bank3
 10792     002D  085A               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384),w
 10793     002E  008A               	movwf	10
 10794     002F  0859               	movf	_EUSART_RxDefaultInterruptHandler^(0+384),w
 10795     0030  000A               	callw
 10796     0031  3180               	pagesel	$
 10797                           
 10798                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 10799     0032  283B               	goto	i1l153
 10800     0033                     i1l148:	
 10801                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 10802                           
 10803     0033  0021               	movlb	1	; select bank1
 10804     0034  1C91               	btfss	17,1	;volatile
 10805     0035  283B               	goto	i1l153
 10806     0036  0020               	movlb	0	; select bank0
 10807     0037  1C91               	btfss	17,1	;volatile
 10808     0038  283B               	goto	i1l153
 10809                           
 10810                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
 10811     0039  319C  2466         	fcall	_TMR2_ISR
 10812     003B                     i1l153:	
 10813                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 10814                           
 10815     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10816     003C  0009               	retfie
 10817     003D                     __end_of_INTERRUPT_InterruptManager:
 10818                           
 10819                           	psect	text53
 10820     06C3                     __ptext53:	
 10821 ;; *************** function _USBDeviceTasks *****************
 10822 ;; Defined at:
 10823 ;;		line 481 in file "usb/usb_device.c"
 10824 ;; Parameters:    Size  Location     Type
 10825 ;;		None
 10826 ;; Auto vars:     Size  Location     Type
 10827 ;;  i               1   16[BANK0 ] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  1    wreg      void 
 10830 ;; Registers used:
 10831 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10832 ;; Tracked objects:
 10833 ;;		On entry : 1F/0
 10834 ;;		On exit  : 1F/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;Total ram usage:        2 bytes
 10842 ;; Hardware stack levels used: 1
 10843 ;; Hardware stack levels required when called: 8
 10844 ;; This function calls:
 10845 ;;		_USBCtrlEPAllowStatusStage
 10846 ;;		_USBCtrlEPService
 10847 ;;		_USBIncrement1msInternalTimers
 10848 ;;		_USBStallHandler
 10849 ;;		_USBSuspend
 10850 ;;		_USBWakeFromSuspend
 10851 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10852 ;;		i1_USBDeviceInit
 10853 ;; This function is called by:
 10854 ;;		_INTERRUPT_InterruptManager
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858     06C3                     _USBDeviceTasks:	
 10859                           ;psect for function _USBDeviceTasks
 10860                           
 10861                           
 10862                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
 10863                           
 10864                           ;incstack = 0
 10865 ;; hardware stack exceeded
 10866                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10867     06C3  036B               	decf	_USBDeviceState,w
 10868     06C4  1D03               	btfss	3,2
 10869     06C5  2ECF               	goto	i1l6460
 10870                           
 10871                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
 10872     06C6  003D               	movlb	29	; select bank29
 10873     06C7  1A8E               	btfsc	14,5	;volatile
 10874     06C8  2ECF               	goto	i1l6460
 10875                           
 10876                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
 10877     06C9  0190               	clrf	16	;volatile
 10878                           
 10879                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
 10880     06CA  1412               	bsf	18,0	;volatile
 10881                           
 10882                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
 10883     06CB  1612               	bsf	18,4	;volatile
 10884                           
 10885                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
 10886     06CC  3002               	movlw	2
 10887     06CD  0020               	movlb	0	; select bank0
 10888     06CE  00EB               	movwf	_USBDeviceState	;volatile
 10889     06CF                     i1l6460:
 10890                           
 10891                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
 10892     06CF  003D               	movlb	29	; select bank29
 10893     06D0  1910               	btfsc	16,2	;volatile
 10894     06D1  1D12               	btfss	18,2	;volatile
 10895     06D2  2EDC               	goto	i1l6468
 10896                           
 10897                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
 10898     06D3  30FB               	movlw	251
 10899     06D4  0020               	movlb	0	; select bank0
 10900     06D5  00DF               	movwf	??_USBDeviceTasks
 10901     06D6  085F               	movf	??_USBDeviceTasks,w
 10902     06D7  003D               	movlb	29	; select bank29
 10903     06D8  0590               	andwf	16,f	;volatile
 10904                           
 10905                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
 10906     06D9  319E  2655  3186   	fcall	_USBWakeFromSuspend
 10907     06DC                     i1l6468:
 10908                           
 10909                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
 10910     06DC  003D               	movlb	29	; select bank29
 10911     06DD  1C8E               	btfss	14,1	;volatile
 10912     06DE  2EE2               	goto	i1l492
 10913                           
 10914                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
 10915     06DF  0020               	movlb	0	; select bank0
 10916     06E0  1112               	bcf	18,2	;volatile
 10917                           
 10918                           ;usb/usb_device.c: 654:         return;
 10919     06E1  0008               	return
 10920     06E2                     i1l492:	
 10921                           ;usb/usb_device.c: 655:     }
 10922                           
 10923                           
 10924                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
 10925     06E2  1810               	btfsc	16,0	;volatile
 10926     06E3  1C12               	btfss	18,0	;volatile
 10927     06E4  2EF2               	goto	i1l6482
 10928                           
 10929                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
 10930     06E5  318D  2544  3186   	fcall	i1_USBDeviceInit
 10931                           
 10932                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
 10933     06E8  0021               	movlb	1	; select bank1
 10934     06E9  1512               	bsf	18,2	;volatile
 10935                           
 10936                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
 10937     06EA  3004               	movlw	4
 10938     06EB  0020               	movlb	0	; select bank0
 10939     06EC  00EB               	movwf	_USBDeviceState	;volatile
 10940                           
 10941                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
 10942     06ED  30FE               	movlw	254
 10943     06EE  00DF               	movwf	??_USBDeviceTasks
 10944     06EF  085F               	movf	??_USBDeviceTasks,w
 10945     06F0  003D               	movlb	29	; select bank29
 10946     06F1  0590               	andwf	16,f	;volatile
 10947     06F2                     i1l6482:
 10948                           
 10949                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
 10950     06F2  1A10               	btfsc	16,4	;volatile
 10951     06F3  1E12               	btfss	18,4	;volatile
 10952     06F4  2EF8               	goto	i1l6488
 10953                           
 10954                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
 10955     06F5  319D  259F  3186   	fcall	_USBSuspend
 10956     06F8                     i1l6488:
 10957                           
 10958                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
 10959     06F8  003D               	movlb	29	; select bank29
 10960     06F9  1F10               	btfss	16,6	;volatile
 10961     06FA  2F20               	goto	i1l6504
 10962                           
 10963                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
 10964     06FB  1F12               	btfss	18,6	;volatile
 10965     06FC  2F0C               	goto	i1l6494
 10966                           
 10967                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
 10968     06FD  3073               	movlw	115
 10969     06FE  0020               	movlb	0	; select bank0
 10970     06FF  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10971     0700  3000               	movlw	0
 10972     0701  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10973     0702  3000               	movlw	0
 10974     0703  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10975     0704  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10976     0705  3001               	movlw	1
 10977     0706  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10978     0707  3000               	movlw	0
 10979     0708  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10980     0709  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10981     070C                     i1l6494:
 10982                           
 10983                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
 10984     070C  30BF               	movlw	191
 10985     070D  0020               	movlb	0	; select bank0
 10986     070E  00DF               	movwf	??_USBDeviceTasks
 10987     070F  085F               	movf	??_USBDeviceTasks,w
 10988     0710  003D               	movlb	29	; select bank29
 10989     0711  0590               	andwf	16,f	;volatile
 10990                           
 10991                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
 10992     0712  319D  2558  3186   	fcall	_USBIncrement1msInternalTimers
 10993                           
 10994                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
 10995     0715  0841               	movf	_USBStatusStageTimeoutCounter^(0+256),w
 10996     0716  1903               	btfsc	3,2
 10997     0717  2F1A               	goto	i1l498
 10998                           
 10999                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
 11000     0718  3001               	movlw	1
 11001     0719  02C1               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
 11002     071A                     i1l498:	
 11003                           ;usb/usb_device.c: 742:             }
 11004                           
 11005                           
 11006                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
 11007     071A  0841               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
 11008     071B  1D03               	btfss	3,2
 11009     071C  2F20               	goto	i1l6504
 11010                           
 11011                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
 11012     071D  3188  2053  3186   	fcall	_USBCtrlEPAllowStatusStage
 11013     0720                     i1l6504:
 11014                           
 11015                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
 11016     0720  003D               	movlb	29	; select bank29
 11017     0721  1A90               	btfsc	16,5	;volatile
 11018     0722  1E92               	btfss	18,5	;volatile
 11019     0723  2F27               	goto	i1l6510
 11020                           
 11021                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
 11022     0724  319F  2713  3186   	fcall	_USBStallHandler
 11023     0727                     i1l6510:
 11024                           
 11025                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
 11026     0727  1890               	btfsc	16,1	;volatile
 11027     0728  1C92               	btfss	18,1	;volatile
 11028     0729  2F3B               	goto	i1l6518
 11029                           
 11030                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
 11031     072A  30FF               	movlw	255
 11032     072B  0020               	movlb	0	; select bank0
 11033     072C  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11034     072D  307F               	movlw	127
 11035     072E  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11036     072F  3000               	movlw	0
 11037     0730  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11038     0731  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11039     0732  3001               	movlw	1
 11040     0733  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11041     0734  3000               	movlw	0
 11042     0735  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11043     0736  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11044                           
 11045                           ;usb/usb_device.c: 763:         {UEIR = 0;};
 11046     0739  003D               	movlb	29	; select bank29
 11047     073A  0193               	clrf	19	;volatile
 11048     073B                     i1l6518:
 11049                           
 11050                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
 11051     073B  3004               	movlw	4
 11052     073C  0020               	movlb	0	; select bank0
 11053     073D  026B               	subwf	_USBDeviceState,w
 11054     073E  1803               	skipnc
 11055     073F  2F42               	goto	i1l502
 11056                           
 11057                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
 11058     0740  1112               	bcf	18,2	;volatile
 11059                           
 11060                           ;usb/usb_device.c: 781:         return;
 11061     0741  0008               	return
 11062     0742                     i1l502:	
 11063                           ;usb/usb_device.c: 782:     }
 11064                           
 11065                           
 11066                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
 11067     0742  003D               	movlb	29	; select bank29
 11068     0743  1D92               	btfss	18,3	;volatile
 11069     0744  2F93               	goto	i1l503
 11070                           
 11071                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
 11072     0745  0020               	movlb	0	; select bank0
 11073     0746  01E0               	clrf	USBDeviceTasks@i
 11074     0747  2F90               	goto	i1l504
 11075     0748                     i1l6528:
 11076                           
 11077                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
 11078     0748  080F               	movf	15,w	;volatile
 11079     0749  0020               	movlb	0	; select bank0
 11080     074A  00EE               	movwf	_USTATcopy	;volatile
 11081                           
 11082                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
 11083     074B  0C6E               	rrf	_USTATcopy,w	;volatile
 11084     074C  00DF               	movwf	??_USBDeviceTasks
 11085     074D  0CDF               	rrf	??_USBDeviceTasks,f
 11086     074E  0C5F               	rrf	??_USBDeviceTasks,w
 11087     074F  390F               	andlw	15
 11088     0750  0022               	movlb	2	; select bank2
 11089     0751  00C3               	movwf	_endpoint_number^(0+256)	;volatile
 11090                           
 11091                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
 11092     0752  30F7               	movlw	247
 11093     0753  0020               	movlb	0	; select bank0
 11094     0754  00DF               	movwf	??_USBDeviceTasks
 11095     0755  085F               	movf	??_USBDeviceTasks,w
 11096     0756  003D               	movlb	29	; select bank29
 11097     0757  0590               	andwf	16,f	;volatile
 11098                           
 11099                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
 11100     0758  0020               	movlb	0	; select bank0
 11101     0759  196E               	btfsc	_USTATcopy,2	;volatile
 11102     075A  2F5F               	goto	i1l6538
 11103                           
 11104                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
 11105     075B  0022               	movlb	2	; select bank2
 11106     075C  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11107     075D  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11108     075E  2F62               	goto	L8
 11109     075F                     i1l6538:	
 11110                           ;usb/usb_device.c: 805:                 }
 11111                           
 11112                           
 11113                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
 11114     075F  0022               	movlb	2	; select bank2
 11115     0760  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11116     0761  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11117     0762                     L8:
 11118     0762  0086               	movwf	6
 11119     0763  3001               	movlw	1	; select bank2/3
 11120     0764  0087               	movwf	7
 11121     0765  0801               	movf	1,w
 11122     0766  3901               	andlw	1
 11123     0767  0020               	movlb	0	; select bank0
 11124     0768  00DF               	movwf	??_USBDeviceTasks
 11125     0769  3001               	movlw	1
 11126     076A  06DF               	xorwf	??_USBDeviceTasks,f
 11127     076B  0801               	movf	1,w
 11128     076C  065F               	xorwf	??_USBDeviceTasks,w
 11129     076D  39FE               	andlw	-2
 11130     076E  065F               	xorwf	??_USBDeviceTasks,w
 11131     076F  0081               	movwf	1
 11132                           
 11133                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
 11134     0770  0022               	movlb	2	; select bank2
 11135     0771  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11136     0772  1D03               	btfss	3,2
 11137     0773  2F78               	goto	i1l6544
 11138                           
 11139                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
 11140     0774  3192  22DD  3186   	fcall	_USBCtrlEPService
 11141                           
 11142                           ;usb/usb_device.c: 817:                 }
 11143     0777  2F87               	goto	i1l6546
 11144     0778                     i1l6544:
 11145                           
 11146                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
 11147     0778  3072               	movlw	114
 11148     0779  0020               	movlb	0	; select bank0
 11149     077A  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11150     077B  3000               	movlw	0
 11151     077C  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11152     077D  306E               	movlw	low _USTATcopy
 11153     077E  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11154     077F  3000               	movlw	high _USTATcopy
 11155     0780  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11156     0781  3000               	movlw	0
 11157     0782  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11158     0783  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11159     0784  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11160     0787                     i1l6546:
 11161                           
 11162                           ;usb/usb_device.c: 827:         }
 11163     0787  3001               	movlw	1
 11164     0788  0020               	movlb	0	; select bank0
 11165     0789  00DF               	movwf	??_USBDeviceTasks
 11166     078A  085F               	movf	??_USBDeviceTasks,w
 11167     078B  07E0               	addwf	USBDeviceTasks@i,f
 11168     078C  3004               	movlw	4
 11169     078D  0260               	subwf	USBDeviceTasks@i,w
 11170     078E  1803               	btfsc	3,0
 11171     078F  2F93               	goto	i1l503
 11172     0790                     i1l504:
 11173                           
 11174                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
 11175     0790  003D               	movlb	29	; select bank29
 11176     0791  1990               	btfsc	16,3	;volatile
 11177     0792  2F48               	goto	i1l6528
 11178     0793                     i1l503:	
 11179                           ;usb/usb_device.c: 828:     }
 11180                           
 11181                           
 11182                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
 11183     0793  0020               	movlb	0	; select bank0
 11184     0794  1112               	bcf	18,2	;volatile
 11185     0795  0008               	return
 11186     0796                     __end_of_USBDeviceTasks:
 11187                           
 11188                           	psect	text54
 11189     0D44                     __ptext54:	
 11190 ;; *************** function i1_USBDeviceInit *****************
 11191 ;; Defined at:
 11192 ;;		line 281 in file "usb/usb_device.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;		None
 11195 ;; Auto vars:     Size  Location     Type
 11196 ;;  p               2    4[COMMON] PTR unsigned char 
 11197 ;;		 -> UEP1(1), 
 11198 ;;  i               1    7[COMMON] unsigned char 
 11199 ;;  i               1    6[COMMON] unsigned char 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      void 
 11202 ;; Registers used:
 11203 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11204 ;; Tracked objects:
 11205 ;;		On entry : 1F/1D
 11206 ;;		On exit  : 1F/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        8 bytes
 11214 ;; Hardware stack levels used: 1
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_USBDeviceTasks
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222     0D44                     i1_USBDeviceInit:	
 11223                           ;psect for function i1_USBDeviceInit
 11224                           
 11225                           
 11226                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
 11227                           
 11228                           ;incstack = 0
 11229                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 11230     0D44  0021               	movlb	1	; select bank1
 11231     0D45  1112               	bcf	18,2	;volatile
 11232                           
 11233                           ;usb/usb_device.c: 292:     {UEIR = 0;};
 11234     0D46  003D               	movlb	29	; select bank29
 11235     0D47  0193               	clrf	19	;volatile
 11236                           
 11237                           ;usb/usb_device.c: 295:     {UIR = 0;};
 11238     0D48  0190               	clrf	16	;volatile
 11239                           
 11240                           ;usb/usb_device.c: 298:     UEP0 = 0;
 11241     0D49  0198               	clrf	24	;volatile
 11242                           
 11243                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
 11244     0D4A  300E               	movlw	14
 11245     0D4B  00F5               	movwf	i1USBDeviceInit@p+1
 11246     0D4C  3099               	movlw	153
 11247     0D4D  00F4               	movwf	i1USBDeviceInit@p
 11248     0D4E  01F6               	clrf	i1USBDeviceInit@i_1369
 11249     0D4F                     i1l5626:
 11250     0D4F  0874               	movf	i1USBDeviceInit@p,w
 11251     0D50  0086               	movwf	6
 11252     0D51  0875               	movf	i1USBDeviceInit@p+1,w
 11253     0D52  0087               	movwf	7
 11254     0D53  0181               	clrf	1
 11255     0D54  3001               	movlw	1
 11256     0D55  07F4               	addwf	i1USBDeviceInit@p,f
 11257     0D56  3000               	movlw	0
 11258     0D57  3DF5               	addwfc	i1USBDeviceInit@p+1,f
 11259     0D58  3001               	movlw	1
 11260     0D59  00F0               	movwf	??i1_USBDeviceInit
 11261     0D5A  0870               	movf	??i1_USBDeviceInit,w
 11262     0D5B  07F6               	addwf	i1USBDeviceInit@i_1369,f
 11263     0D5C  0876               	movf	i1USBDeviceInit@i_1369,w
 11264     0D5D  1903               	btfsc	3,2
 11265     0D5E  2D4F               	goto	i1l5626
 11266                           
 11267                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
 11268     0D5F  3016               	movlw	22
 11269     0D60  0091               	movwf	17	;volatile
 11270     0D61  309F               	movlw	159
 11271     0D62  0097               	movwf	23	;volatile
 11272     0D63  307B               	movlw	123
 11273     0D64  0092               	movwf	18	;volatile
 11274                           
 11275                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 11276     0D65  01F7               	clrf	i1USBDeviceInit@i
 11277     0D66                     i1l5642:
 11278                           
 11279                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 11280     0D66  0877               	movf	i1USBDeviceInit@i,w
 11281     0D67  00F0               	movwf	??i1_USBDeviceInit
 11282     0D68  3001               	movlw	1
 11283     0D69                     u494_25:
 11284     0D69  35F0               	lslf	??i1_USBDeviceInit,f
 11285     0D6A  3EFF               	addlw	-1
 11286     0D6B  1D03               	skipz
 11287     0D6C  2D69               	goto	u494_25
 11288     0D6D  3570               	lslf	??i1_USBDeviceInit,w
 11289     0D6E  3E20               	addlw	32
 11290     0D6F  0086               	movwf	6
 11291     0D70  0187               	clrf	7
 11292     0D71  3000               	movlw	0
 11293     0D72  3FC0               	movwi [0]fsr1
 11294     0D73  3000               	movlw	0
 11295     0D74  3FC1               	movwi [1]fsr1
 11296     0D75  3FC2               	movwi [2]fsr1
 11297     0D76  3FC3               	movwi [3]fsr1
 11298                           
 11299                           ;usb/usb_device.c: 314:     }
 11300     0D77  3001               	movlw	1
 11301     0D78  00F0               	movwf	??i1_USBDeviceInit
 11302     0D79  0870               	movf	??i1_USBDeviceInit,w
 11303     0D7A  07F7               	addwf	i1USBDeviceInit@i,f
 11304     0D7B  3008               	movlw	8
 11305     0D7C  0277               	subwf	i1USBDeviceInit@i,w
 11306     0D7D  1C03               	skipc
 11307     0D7E  2D66               	goto	i1l5642
 11308                           
 11309                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 11310     0D7F  170E               	bsf	14,6	;volatile
 11311                           
 11312                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 11313     0D80  0196               	clrf	22	;volatile
 11314                           
 11315                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 11316     0D81  120E               	bcf	14,4	;volatile
 11317                           
 11318                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 11319     0D82  130E               	bcf	14,6	;volatile
 11320     0D83                     i1l5654:
 11321                           
 11322                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 11323     0D83  30F7               	movlw	247
 11324     0D84  00F0               	movwf	??i1_USBDeviceInit
 11325     0D85  0870               	movf	??i1_USBDeviceInit,w
 11326     0D86  0590               	andwf	16,f	;volatile
 11327                           
 11328                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 11329     0D87  0021               	movlb	1	; select bank1
 11330     0D88  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 11331                           
 11332                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 11333     0D89  0022               	movlb	2	; select bank2
 11334     0D8A  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 11335                           
 11336                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 11337     0D8B  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 11338     0D8C  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 11339                           
 11340                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 11341     0D8D  003D               	movlb	29	; select bank29
 11342     0D8E  1990               	btfsc	16,3	;volatile
 11343     0D8F  2D83               	goto	i1l5654
 11344                           
 11345                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 11346     0D90  3001               	movlw	1
 11347     0D91  0022               	movlb	2	; select bank2
 11348     0D92  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11349                           
 11350                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 11351     0D93  3001               	movlw	1
 11352     0D94  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11353                           
 11354                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 11355     0D95  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11356                           
 11357                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 11358     0D96  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11359                           
 11360                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 11361     0D97  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11362                           
 11363                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 11364     0D98  01F7               	clrf	i1USBDeviceInit@i
 11365     0D99                     i1l5676:
 11366                           
 11367                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 11368     0D99  3577               	lslf	i1USBDeviceInit@i,w
 11369     0D9A  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11370     0D9B  0086               	movwf	6
 11371     0D9C  0187               	clrf	7
 11372     0D9D  3000               	movlw	0
 11373     0D9E  3FC0               	movwi [0]fsr1
 11374     0D9F  3FC1               	movwi [1]fsr1
 11375                           
 11376                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 11377     0DA0  3577               	lslf	i1USBDeviceInit@i,w
 11378     0DA1  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11379     0DA2  0086               	movwf	6
 11380     0DA3  3001               	movlw	1	; select bank2/3
 11381     0DA4  0087               	movwf	7
 11382     0DA5  3000               	movlw	0
 11383     0DA6  3FC0               	movwi [0]fsr1
 11384     0DA7  3FC1               	movwi [1]fsr1
 11385                           
 11386                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 11387     0DA8  0877               	movf	i1USBDeviceInit@i,w
 11388     0DA9  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11389     0DAA  0086               	movwf	6
 11390     0DAB  3001               	movlw	1	; select bank2/3
 11391     0DAC  0087               	movwf	7
 11392     0DAD  0181               	clrf	1
 11393                           
 11394                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 11395     0DAE  0877               	movf	i1USBDeviceInit@i,w
 11396     0DAF  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11397     0DB0  0086               	movwf	6
 11398     0DB1  3001               	movlw	1	; select bank2/3
 11399     0DB2  0087               	movwf	7
 11400     0DB3  0181               	clrf	1
 11401                           
 11402                           ;usb/usb_device.c: 355:     }
 11403     0DB4  3001               	movlw	1
 11404     0DB5  00F0               	movwf	??i1_USBDeviceInit
 11405     0DB6  0870               	movf	??i1_USBDeviceInit,w
 11406     0DB7  07F7               	addwf	i1USBDeviceInit@i,f
 11407     0DB8  3002               	movlw	2
 11408     0DB9  0277               	subwf	i1USBDeviceInit@i,w
 11409     0DBA  1C03               	skipc
 11410     0DBB  2D99               	goto	i1l5676
 11411                           
 11412                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11413     0DBC  3028               	movlw	40
 11414     0DBD  0020               	movlb	0	; select bank0
 11415     0DBE  00E1               	movwf	_pBDTEntryIn
 11416     0DBF  3000               	movlw	0
 11417     0DC0  00E2               	movwf	_pBDTEntryIn+1
 11418                           
 11419                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 11420     0DC1  3016               	movlw	22
 11421     0DC2  003D               	movlb	29	; select bank29
 11422     0DC3  0098               	movwf	24	;volatile
 11423                           
 11424                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 11425     0DC4  3040               	movlw	64
 11426     0DC5  00F0               	movwf	??i1_USBDeviceInit
 11427     0DC6  3000               	movlw	0
 11428     0DC7  00F1               	movwf	??i1_USBDeviceInit+1
 11429     0DC8  30FF               	movlw	255
 11430     0DC9  0570               	andwf	??i1_USBDeviceInit,w
 11431     0DCA  00F2               	movwf	??i1_USBDeviceInit+2
 11432     0DCB  307F               	movlw	127
 11433     0DCC  0571               	andwf	??i1_USBDeviceInit+1,w
 11434     0DCD  00F3               	movwf	??i1_USBDeviceInit+3
 11435     0DCE  0872               	movf	??i1_USBDeviceInit+2,w
 11436     0DCF  0020               	movlb	0	; select bank0
 11437     0DD0  00A2               	movwf	34	;volatile
 11438     0DD1  0873               	movf	??i1_USBDeviceInit+3,w
 11439     0DD2  00A3               	movwf	35	;volatile
 11440                           
 11441                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 11442     0DD3  3008               	movlw	8
 11443     0DD4  00A1               	movwf	33	;volatile
 11444                           
 11445                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 11446     0DD5  3004               	movlw	4
 11447     0DD6  00A0               	movwf	32	;volatile
 11448                           
 11449                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 11450     0DD7  17A0               	bsf	32,7	;volatile
 11451                           
 11452                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 11453     0DD8  01EF               	clrf	_USBActiveConfiguration	;volatile
 11454                           
 11455                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 11456     0DD9  3000               	movlw	0
 11457     0DDA  0023               	movlb	3	; select bank3
 11458     0DDB  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 11459     0DDC  3000               	movlw	0
 11460     0DDD  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 11461     0DDE  3000               	movlw	0
 11462     0DDF  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 11463     0DE0  3000               	movlw	0
 11464     0DE1  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 11465                           
 11466                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 11467     0DE2  0022               	movlb	2	; select bank2
 11468     0DE3  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11469                           
 11470                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 11471     0DE4  0020               	movlb	0	; select bank0
 11472     0DE5  01EB               	clrf	_USBDeviceState	;volatile
 11473     0DE6  0008               	return
 11474     0DE7                     __end_ofi1_USBDeviceInit:
 11475                           
 11476                           	psect	text55
 11477     1E55                     __ptext55:	
 11478 ;; *************** function _USBWakeFromSuspend *****************
 11479 ;; Defined at:
 11480 ;;		line 2310 in file "usb/usb_device.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 1F/1D
 11491 ;;		On exit  : 1F/2
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;Total ram usage:        1 bytes
 11499 ;; Hardware stack levels used: 1
 11500 ;; Hardware stack levels required when called: 4
 11501 ;; This function calls:
 11502 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11503 ;; This function is called by:
 11504 ;;		_USBDeviceTasks
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508     1E55                     _USBWakeFromSuspend:	
 11509                           ;psect for function _USBWakeFromSuspend
 11510                           
 11511                           
 11512                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 11513                           
 11514                           ;incstack = 0
 11515                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11516     1E55  0022               	movlb	2	; select bank2
 11517     1E56  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11518                           
 11519                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 11520     1E57  3074               	movlw	116
 11521     1E58  0020               	movlb	0	; select bank0
 11522     1E59  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11523     1E5A  3000               	movlw	0
 11524     1E5B  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11525     1E5C  3000               	movlw	0
 11526     1E5D  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11527     1E5E  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11528     1E5F  3000               	movlw	0
 11529     1E60  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11530     1E61  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11531     1E62  3191  2153  319E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11532                           
 11533                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 11534     1E65  003D               	movlb	29	; select bank29
 11535     1E66  108E               	bcf	14,1	;volatile
 11536                           
 11537                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 11538     1E67  1112               	bcf	18,2	;volatile
 11539     1E68                     i1l5428:	
 11540                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11541                           
 11542                           
 11543                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11544     1E68  1D10               	btfss	16,2	;volatile
 11545     1E69  2E6F               	goto	i1l5430
 11546                           
 11547                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 11548     1E6A  30FB               	movlw	251
 11549     1E6B  00FD               	movwf	??_USBWakeFromSuspend
 11550     1E6C  087D               	movf	??_USBWakeFromSuspend,w
 11551     1E6D  0590               	andwf	16,f	;volatile
 11552     1E6E  2E68               	goto	i1l5428
 11553     1E6F                     i1l5430:
 11554                           
 11555                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 11556     1E6F  0022               	movlb	2	; select bank2
 11557     1E70  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11558     1E71  0008               	return
 11559     1E72                     __end_of_USBWakeFromSuspend:
 11560                           
 11561                           	psect	text56
 11562     1D9F                     __ptext56:	
 11563 ;; *************** function _USBSuspend *****************
 11564 ;; Defined at:
 11565 ;;		line 2252 in file "usb/usb_device.c"
 11566 ;; Parameters:    Size  Location     Type
 11567 ;;		None
 11568 ;; Auto vars:     Size  Location     Type
 11569 ;;		None
 11570 ;; Return value:  Size  Location     Type
 11571 ;;                  1    wreg      void 
 11572 ;; Registers used:
 11573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11574 ;; Tracked objects:
 11575 ;;		On entry : 1F/1D
 11576 ;;		On exit  : 0/0
 11577 ;;		Unchanged: 0/0
 11578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;Total ram usage:        1 bytes
 11584 ;; Hardware stack levels used: 1
 11585 ;; Hardware stack levels required when called: 4
 11586 ;; This function calls:
 11587 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11588 ;; This function is called by:
 11589 ;;		_USBDeviceTasks
 11590 ;; This function uses a non-reentrant model
 11591 ;;
 11592                           
 11593     1D9F                     _USBSuspend:	
 11594                           ;psect for function _USBSuspend
 11595                           
 11596                           
 11597                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 11598                           
 11599                           ;incstack = 0
 11600                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11601     1D9F  1512               	bsf	18,2	;volatile
 11602                           
 11603                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 11604     1DA0  30EF               	movlw	239
 11605     1DA1  00FD               	movwf	??_USBSuspend
 11606     1DA2  087D               	movf	??_USBSuspend,w
 11607     1DA3  0590               	andwf	16,f	;volatile
 11608                           
 11609                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 11610     1DA4  148E               	bsf	14,1	;volatile
 11611                           
 11612                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 11613     1DA5  3001               	movlw	1
 11614     1DA6  0022               	movlb	2	; select bank2
 11615     1DA7  00C4               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 11616                           
 11617                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 11618     1DA8  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11619                           
 11620                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 11621     1DA9  3075               	movlw	117
 11622     1DAA  0020               	movlb	0	; select bank0
 11623     1DAB  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11624     1DAC  3000               	movlw	0
 11625     1DAD  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11626     1DAE  3000               	movlw	0
 11627     1DAF  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11628     1DB0  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11629     1DB1  3000               	movlw	0
 11630     1DB2  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11631     1DB3  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11632     1DB4  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11633     1DB6  0008               	return
 11634     1DB7                     __end_of_USBSuspend:
 11635                           
 11636                           	psect	text57
 11637     1F13                     __ptext57:	
 11638 ;; *************** function _USBStallHandler *****************
 11639 ;; Defined at:
 11640 ;;		line 2209 in file "usb/usb_device.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;		None
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  1    wreg      void 
 11647 ;; Registers used:
 11648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11649 ;; Tracked objects:
 11650 ;;		On entry : 1F/1D
 11651 ;;		On exit  : 1F/1D
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;Total ram usage:        1 bytes
 11659 ;; Hardware stack levels used: 1
 11660 ;; This function calls:
 11661 ;;		Nothing
 11662 ;; This function is called by:
 11663 ;;		_USBDeviceTasks
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667     1F13                     _USBStallHandler:	
 11668                           ;psect for function _USBStallHandler
 11669                           
 11670                           
 11671                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 11672                           
 11673                           ;incstack = 0
 11674                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 11675     1F13  1C18               	btfss	24,0	;volatile
 11676     1F14  2F30               	goto	i1l5462
 11677                           
 11678                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 11679     1F15  0020               	movlb	0	; select bank0
 11680     1F16  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11681     1F17  0086               	movwf	6
 11682     1F18  0187               	clrf	7
 11683     1F19  3080               	movlw	128
 11684     1F1A  0601               	xorwf	1,w
 11685     1F1B  1D03               	btfss	3,2
 11686     1F1C  2F2E               	goto	i1l5460
 11687     1F1D  0861               	movf	_pBDTEntryIn,w
 11688     1F1E  0086               	movwf	6
 11689     1F1F  0862               	movf	_pBDTEntryIn+1,w
 11690     1F20  0087               	movwf	7
 11691     1F21  3084               	movlw	132
 11692     1F22  0601               	xorwf	1,w
 11693     1F23  1D03               	btfss	3,2
 11694     1F24  2F2E               	goto	i1l5460
 11695                           
 11696                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 11697     1F25  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11698     1F26  0086               	movwf	6
 11699     1F27  0187               	clrf	7
 11700     1F28  300C               	movlw	12
 11701     1F29  0081               	movwf	1
 11702                           
 11703                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 11704     1F2A  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11705     1F2B  0086               	movwf	6
 11706     1F2C  0187               	clrf	7
 11707     1F2D  1781               	bsf	1,7
 11708     1F2E                     i1l5460:
 11709                           
 11710                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 11711     1F2E  003D               	movlb	29	; select bank29
 11712     1F2F  1018               	bcf	24,0	;volatile
 11713     1F30                     i1l5462:
 11714                           
 11715                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 11716     1F30  30DF               	movlw	223
 11717     1F31  00F0               	movwf	??_USBStallHandler
 11718     1F32  0870               	movf	??_USBStallHandler,w
 11719     1F33  0590               	andwf	16,f	;volatile
 11720     1F34  0008               	return
 11721     1F35                     __end_of_USBStallHandler:
 11722                           
 11723                           	psect	text58
 11724     1D58                     __ptext58:	
 11725 ;; *************** function _USBIncrement1msInternalTimers *****************
 11726 ;; Defined at:
 11727 ;;		line 2998 in file "usb/usb_device.c"
 11728 ;; Parameters:    Size  Location     Type
 11729 ;;		None
 11730 ;; Auto vars:     Size  Location     Type
 11731 ;;		None
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, status,2, status,0
 11736 ;; Tracked objects:
 11737 ;;		On entry : 1F/1D
 11738 ;;		On exit  : 1F/2
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;Total ram usage:        1 bytes
 11746 ;; Hardware stack levels used: 1
 11747 ;; This function calls:
 11748 ;;		Nothing
 11749 ;; This function is called by:
 11750 ;;		_USBDeviceTasks
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754     1D58                     _USBIncrement1msInternalTimers:	
 11755                           ;psect for function _USBIncrement1msInternalTimers
 11756                           
 11757                           
 11758                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 11759                           
 11760                           ;incstack = 0
 11761                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 11762     1D58  3001               	movlw	1
 11763     1D59  0023               	movlb	3	; select bank3
 11764     1D5A  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 11765     1D5B  3000               	movlw	0
 11766     1D5C  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 11767     1D5D  3000               	movlw	0
 11768     1D5E  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 11769     1D5F  3000               	movlw	0
 11770     1D60  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 11771                           
 11772                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 11773     1D61  0022               	movlb	2	; select bank2
 11774     1D62  0844               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 11775     1D63  1D03               	btfss	3,2
 11776     1D64  0008               	return
 11777                           
 11778                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 11779     1D65  3001               	movlw	1
 11780     1D66  00F0               	movwf	??_USBIncrement1msInternalTimers
 11781     1D67  0870               	movf	??_USBIncrement1msInternalTimers,w
 11782     1D68  07BB               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 11783                           
 11784                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 11785     1D69  083B               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 11786     1D6A  1D03               	btfss	3,2
 11787     1D6B  0008               	return
 11788                           
 11789                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 11790     1D6C  30FF               	movlw	255
 11791     1D6D  00BB               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11792     1D6E  0008               	return
 11793     1D6F                     __end_of_USBIncrement1msInternalTimers:
 11794                           
 11795                           	psect	text59
 11796     12DD                     __ptext59:	
 11797 ;; *************** function _USBCtrlEPService *****************
 11798 ;; Defined at:
 11799 ;;		line 2379 in file "usb/usb_device.c"
 11800 ;; Parameters:    Size  Location     Type
 11801 ;;		None
 11802 ;; Auto vars:     Size  Location     Type
 11803 ;;		None
 11804 ;; Return value:  Size  Location     Type
 11805 ;;                  1    wreg      void 
 11806 ;; Registers used:
 11807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11808 ;; Tracked objects:
 11809 ;;		On entry : 1F/2
 11810 ;;		On exit  : 1D/0
 11811 ;;		Unchanged: 0/0
 11812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;Total ram usage:        1 bytes
 11818 ;; Hardware stack levels used: 1
 11819 ;; Hardware stack levels required when called: 7
 11820 ;; This function calls:
 11821 ;;		_USBCtrlTrfInHandler
 11822 ;;		_USBCtrlTrfOutHandler
 11823 ;;		_USBCtrlTrfSetupHandler
 11824 ;;		i1_memcpy
 11825 ;; This function is called by:
 11826 ;;		_USBDeviceTasks
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830     12DD                     _USBCtrlEPService:	
 11831                           ;psect for function _USBCtrlEPService
 11832                           
 11833                           
 11834                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 11835                           
 11836                           ;incstack = 0
 11837 ;; hardware stack exceeded
 11838                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11839     12DD  302D               	movlw	45
 11840     12DE  00C1               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 11841                           
 11842                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 11843     12DF  0020               	movlb	0	; select bank0
 11844     12E0  086E               	movf	_USTATcopy,w	;volatile
 11845     12E1  39FD               	andlw	253
 11846     12E2  1D03               	btfss	3,2
 11847     12E3  2B1A               	goto	i1l6422
 11848                           
 11849                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 11850     12E4  366E               	lsrf	_USTATcopy,w	;volatile
 11851     12E5  393F               	andlw	63
 11852     12E6  00DE               	movwf	??_USBCtrlEPService
 11853     12E7  3001               	movlw	1
 11854     12E8                     u607_25:
 11855     12E8  35DE               	lslf	??_USBCtrlEPService,f
 11856     12E9  3EFF               	addlw	-1
 11857     12EA  1D03               	skipz
 11858     12EB  2AE8               	goto	u607_25
 11859     12EC  355E               	lslf	??_USBCtrlEPService,w
 11860     12ED  3E20               	addlw	32
 11861     12EE  00EA               	movwf	_pBDTEntryEP0OutCurrent
 11862                           
 11863                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11864     12EF  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11865     12F0  00E7               	movwf	_pBDTEntryEP0OutNext
 11866     12F1  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11867                           
 11868                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 11869     12F2  3004               	movlw	4
 11870     12F3  0667               	xorwf	_pBDTEntryEP0OutNext,w
 11871     12F4  00E7               	movwf	_pBDTEntryEP0OutNext
 11872     12F5  3000               	movlw	0
 11873     12F6  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 11874     12F7  00E8               	movwf	_pBDTEntryEP0OutNext+1
 11875                           
 11876                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 11877     12F8  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11878     12F9  0086               	movwf	6
 11879     12FA  0187               	clrf	7
 11880     12FB  0C01               	rrf	1,w
 11881     12FC  0C89               	rrf	9,f
 11882     12FD  390F               	andlw	15
 11883     12FE  3A0D               	xorlw	13
 11884     12FF  1D03               	skipz
 11885     1300  2B17               	goto	i1l6420
 11886                           
 11887                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 11888     1301  3040               	movlw	64
 11889     1302  00F6               	movwf	i1memcpy@d1
 11890     1303  3000               	movlw	0
 11891     1304  00F7               	movwf	i1memcpy@d1+1
 11892     1305  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11893     1306  3E02               	addlw	2
 11894     1307  0086               	movwf	6
 11895     1308  0187               	clrf	7
 11896     1309  3F40               	moviw [0]fsr1
 11897     130A  00F8               	movwf	i1memcpy@s1
 11898     130B  3F41               	moviw [1]fsr1
 11899     130C  00F9               	movwf	i1memcpy@s1+1
 11900     130D  3008               	movlw	8
 11901     130E  00FA               	movwf	i1memcpy@n
 11902     130F  3000               	movlw	0
 11903     1310  00FB               	movwf	i1memcpy@n+1
 11904     1311  319F  2735  3192   	fcall	i1_memcpy
 11905                           
 11906                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 11907     1314  3193  2324         	fcall	_USBCtrlTrfSetupHandler
 11908                           
 11909                           ;usb/usb_device.c: 2416:         }
 11910     1316  0008               	return
 11911     1317                     i1l6420:
 11912                           
 11913                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 11914     1317  3191  2119         	fcall	_USBCtrlTrfOutHandler
 11915     1319  0008               	return
 11916     131A                     i1l6422:
 11917     131A  30FD               	movlw	253
 11918     131B  056E               	andwf	_USTATcopy,w	;volatile
 11919     131C  00DE               	movwf	??_USBCtrlEPService
 11920     131D  3004               	movlw	4
 11921     131E  065E               	xorwf	??_USBCtrlEPService,w
 11922     131F  1D03               	btfss	3,2
 11923     1320  0008               	return
 11924                           
 11925                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 11926     1321  3189  21B0         	fcall	_USBCtrlTrfInHandler
 11927     1323  0008               	return
 11928     1324                     __end_of_USBCtrlEPService:
 11929                           
 11930                           	psect	text60
 11931     1324                     __ptext60:	
 11932 ;; *************** function _USBCtrlTrfSetupHandler *****************
 11933 ;; Defined at:
 11934 ;;		line 2472 in file "usb/usb_device.c"
 11935 ;; Parameters:    Size  Location     Type
 11936 ;;		None
 11937 ;; Auto vars:     Size  Location     Type
 11938 ;;		None
 11939 ;; Return value:  Size  Location     Type
 11940 ;;                  1    wreg      void 
 11941 ;; Registers used:
 11942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11943 ;; Tracked objects:
 11944 ;;		On entry : 1F/0
 11945 ;;		On exit  : 1D/0
 11946 ;;		Unchanged: 0/0
 11947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;Total ram usage:        1 bytes
 11953 ;; Hardware stack levels used: 1
 11954 ;; Hardware stack levels required when called: 6
 11955 ;; This function calls:
 11956 ;;		_USBCheckStdRequest
 11957 ;;		_USBCtrlEPServiceComplete
 11958 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11959 ;; This function is called by:
 11960 ;;		_USBCtrlEPService
 11961 ;; This function uses a non-reentrant model
 11962 ;;
 11963                           
 11964     1324                     _USBCtrlTrfSetupHandler:	
 11965                           ;psect for function _USBCtrlTrfSetupHandler
 11966                           
 11967                           
 11968                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 11969                           
 11970                           ;incstack = 0
 11971 ;; hardware stack exceeded
 11972                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11973     1324  0022               	movlb	2	; select bank2
 11974     1325  01C7               	clrf	_shortPacketStatus^(0+256)	;volatile
 11975                           
 11976                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 11977     1326  01C0               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 11978                           
 11979                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 11980     1327  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11981                           
 11982                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 11983     1328  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11984                           
 11985                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 11986     1329  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 11987                           
 11988                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 11989     132A  0020               	movlb	0	; select bank0
 11990     132B  01E9               	clrf	_controlTransferState	;volatile
 11991                           
 11992                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 11993     132C  307F               	movlw	127
 11994     132D  00DD               	movwf	??_USBCtrlTrfSetupHandler
 11995     132E  0861               	movf	_pBDTEntryIn,w
 11996     132F  0086               	movwf	6
 11997     1330  0862               	movf	_pBDTEntryIn+1,w
 11998     1331  0087               	movwf	7
 11999     1332  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12000     1333  0581               	andwf	1,f
 12001                           
 12002                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12003     1334  3004               	movlw	4
 12004     1335  0661               	xorwf	_pBDTEntryIn,w
 12005     1336  00E1               	movwf	_pBDTEntryIn
 12006     1337  3000               	movlw	0
 12007     1338  0662               	xorwf	_pBDTEntryIn+1,w
 12008     1339  00E2               	movwf	_pBDTEntryIn+1
 12009                           
 12010                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 12011     133A  307F               	movlw	127
 12012     133B  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12013     133C  0861               	movf	_pBDTEntryIn,w
 12014     133D  0086               	movwf	6
 12015     133E  0862               	movf	_pBDTEntryIn+1,w
 12016     133F  0087               	movwf	7
 12017     1340  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12018     1341  0581               	andwf	1,f
 12019                           
 12020                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12021     1342  3004               	movlw	4
 12022     1343  0661               	xorwf	_pBDTEntryIn,w
 12023     1344  00E1               	movwf	_pBDTEntryIn
 12024     1345  3000               	movlw	0
 12025     1346  0662               	xorwf	_pBDTEntryIn+1,w
 12026     1347  00E2               	movwf	_pBDTEntryIn+1
 12027                           
 12028                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 12029     1348  307F               	movlw	127
 12030     1349  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12031     134A  0867               	movf	_pBDTEntryEP0OutNext,w
 12032     134B  0086               	movwf	6
 12033     134C  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12034     134D  0087               	movwf	7
 12035     134E  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12036     134F  0581               	andwf	1,f
 12037                           
 12038                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 12039     1350  0021               	movlb	1	; select bank1
 12040     1351  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 12041                           
 12042                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 12043     1352  01EE               	clrf	(_inPipes^(0+128)+3)	;volatile
 12044     1353  01EF               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 12045                           
 12046                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 12047     1354  0022               	movlb	2	; select bank2
 12048     1355  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 12049                           
 12050                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 12051     1356  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 12052     1357  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 12053                           
 12054                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 12055     1358  3197  272A  3193   	fcall	_USBCheckStdRequest
 12056                           
 12057                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 12058     135B  3003               	movlw	3
 12059     135C  0020               	movlb	0	; select bank0
 12060     135D  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12061     135E  3000               	movlw	0
 12062     135F  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12063     1360  3000               	movlw	0
 12064     1361  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12065     1362  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12066     1363  3000               	movlw	0
 12067     1364  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12068     1365  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12069     1366  3191  2153  3193   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12070                           
 12071                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 12072     1369  318C  24B6         	fcall	_USBCtrlEPServiceComplete
 12073     136B  0008               	return
 12074     136C                     __end_of_USBCtrlTrfSetupHandler:
 12075                           
 12076                           	psect	text61
 12077     0CB6                     __ptext61:	
 12078 ;; *************** function _USBCtrlEPServiceComplete *****************
 12079 ;; Defined at:
 12080 ;;		line 1620 in file "usb/usb_device.c"
 12081 ;; Parameters:    Size  Location     Type
 12082 ;;		None
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;		None
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/2
 12091 ;;		On exit  : 1D/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;Total ram usage:        4 bytes
 12099 ;; Hardware stack levels used: 1
 12100 ;; Hardware stack levels required when called: 2
 12101 ;; This function calls:
 12102 ;;		_USBCtrlEPAllowDataStage
 12103 ;;		_USBCtrlEPAllowStatusStage
 12104 ;; This function is called by:
 12105 ;;		_USBCtrlTrfSetupHandler
 12106 ;; This function uses a non-reentrant model
 12107 ;;
 12108                           
 12109     0CB6                     _USBCtrlEPServiceComplete:	
 12110                           ;psect for function _USBCtrlEPServiceComplete
 12111                           
 12112                           
 12113                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 12114                           
 12115                           ;incstack = 0
 12116                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12117     0CB6  003D               	movlb	29	; select bank29
 12118     0CB7  120E               	bcf	14,4	;volatile
 12119                           
 12120                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 12121     0CB8  0021               	movlb	1	; select bank1
 12122     0CB9  1BED               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 12123     0CBA  2D02               	goto	i1l566
 12124                           
 12125                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 12126     0CBB  0022               	movlb	2	; select bank2
 12127     0CBC  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 12128     0CBD  2CCB               	goto	i1l4660
 12129                           
 12130                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 12131     0CBE  3002               	movlw	2
 12132     0CBF  0020               	movlb	0	; select bank0
 12133     0CC0  00E9               	movwf	_controlTransferState	;volatile
 12134                           
 12135                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 12136     0CC1  0022               	movlb	2	; select bank2
 12137     0CC2  083C               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 12138     0CC3  1D03               	btfss	3,2
 12139     0CC4  2CC7               	goto	i1l4656
 12140                           
 12141                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 12142     0CC5  3195  25F3         	fcall	_USBCtrlEPAllowDataStage
 12143     0CC7                     i1l4656:
 12144                           
 12145                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 12146     0CC7  0022               	movlb	2	; select bank2
 12147     0CC8  01BE               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12148                           
 12149                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 12150     0CC9  01BF               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12151                           
 12152                           ;usb/usb_device.c: 1656:         }
 12153     0CCA  0008               	return
 12154     0CCB                     i1l4660:
 12155                           
 12156                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 12157     0CCB  0020               	movlb	0	; select bank0
 12158     0CCC  0867               	movf	_pBDTEntryEP0OutNext,w
 12159     0CCD  3E01               	addlw	1
 12160     0CCE  00F7               	movwf	??_USBCtrlEPServiceComplete
 12161     0CCF  3000               	movlw	0
 12162     0CD0  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12163     0CD1  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12164     0CD2  0877               	movf	??_USBCtrlEPServiceComplete,w
 12165     0CD3  0086               	movwf	6
 12166     0CD4  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12167     0CD5  0087               	movwf	7
 12168     0CD6  3008               	movlw	8
 12169     0CD7  0081               	movwf	1
 12170                           
 12171                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 12172     0CD8  3040               	movlw	64
 12173     0CD9  00F7               	movwf	??_USBCtrlEPServiceComplete
 12174     0CDA  3000               	movlw	0
 12175     0CDB  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12176     0CDC  30FF               	movlw	255
 12177     0CDD  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12178     0CDE  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12179     0CDF  307F               	movlw	127
 12180     0CE0  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12181     0CE1  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12182     0CE2  0867               	movf	_pBDTEntryEP0OutNext,w
 12183     0CE3  0086               	movwf	6
 12184     0CE4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12185     0CE5  0087               	movwf	7
 12186     0CE6  3142               	addfsr 1,2
 12187     0CE7  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12188     0CE8  3FC0               	movwi [0]fsr1
 12189     0CE9  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12190     0CEA  3FC1               	movwi [1]fsr1
 12191                           
 12192                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 12193     0CEB  0867               	movf	_pBDTEntryEP0OutNext,w
 12194     0CEC  0086               	movwf	6
 12195     0CED  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12196     0CEE  0087               	movwf	7
 12197     0CEF  300C               	movlw	12
 12198     0CF0  0081               	movwf	1
 12199                           
 12200                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12201     0CF1  0867               	movf	_pBDTEntryEP0OutNext,w
 12202     0CF2  0086               	movwf	6
 12203     0CF3  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12204     0CF4  0087               	movwf	7
 12205     0CF5  1781               	bsf	1,7
 12206                           
 12207                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 12208     0CF6  0861               	movf	_pBDTEntryIn,w
 12209     0CF7  0086               	movwf	6
 12210     0CF8  0862               	movf	_pBDTEntryIn+1,w
 12211     0CF9  0087               	movwf	7
 12212     0CFA  3004               	movlw	4
 12213     0CFB  0081               	movwf	1
 12214                           
 12215                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 12216     0CFC  0861               	movf	_pBDTEntryIn,w
 12217     0CFD  0086               	movwf	6
 12218     0CFE  0862               	movf	_pBDTEntryIn+1,w
 12219     0CFF  0087               	movwf	7
 12220     0D00  1781               	bsf	1,7
 12221     0D01  0008               	return
 12222     0D02                     i1l566:	
 12223                           ;usb/usb_device.c: 1671:     else
 12224                           
 12225                           
 12226                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 12227     0D02  0020               	movlb	0	; select bank0
 12228     0D03  1FC0               	btfss	64,7	;volatile
 12229     0D04  2D17               	goto	i1l4686
 12230                           
 12231                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 12232     0D05  3001               	movlw	1
 12233     0D06  00E9               	movwf	_controlTransferState	;volatile
 12234                           
 12235                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 12236     0D07  0022               	movlb	2	; select bank2
 12237     0D08  083D               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 12238     0D09  1D03               	btfss	3,2
 12239     0D0A  2D0E               	goto	i1l4678
 12240                           
 12241                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 12242     0D0B  3195  25F3  318C   	fcall	_USBCtrlEPAllowDataStage
 12243     0D0E                     i1l4678:
 12244                           
 12245                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 12246     0D0E  0022               	movlb	2	; select bank2
 12247     0D0F  01BE               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12248                           
 12249                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 12250     0D10  01BF               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12251                           
 12252                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 12253     0D11  0840               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 12254     0D12  1D03               	btfss	3,2
 12255     0D13  0008               	return
 12256                           
 12257                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 12258     0D14  3188  2053         	fcall	_USBCtrlEPAllowStatusStage
 12259     0D16  0008               	return
 12260     0D17                     i1l4686:
 12261                           
 12262                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 12263     0D17  3002               	movlw	2
 12264     0D18  00E9               	movwf	_controlTransferState	;volatile
 12265                           
 12266                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 12267     0D19  0867               	movf	_pBDTEntryEP0OutNext,w
 12268     0D1A  3E01               	addlw	1
 12269     0D1B  00F7               	movwf	??_USBCtrlEPServiceComplete
 12270     0D1C  3000               	movlw	0
 12271     0D1D  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12272     0D1E  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12273     0D1F  0877               	movf	??_USBCtrlEPServiceComplete,w
 12274     0D20  0086               	movwf	6
 12275     0D21  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12276     0D22  0087               	movwf	7
 12277     0D23  3008               	movlw	8
 12278     0D24  0081               	movwf	1
 12279                           
 12280                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 12281     0D25  3040               	movlw	64
 12282     0D26  00F7               	movwf	??_USBCtrlEPServiceComplete
 12283     0D27  3000               	movlw	0
 12284     0D28  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12285     0D29  30FF               	movlw	255
 12286     0D2A  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12287     0D2B  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12288     0D2C  307F               	movlw	127
 12289     0D2D  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12290     0D2E  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12291     0D2F  0867               	movf	_pBDTEntryEP0OutNext,w
 12292     0D30  0086               	movwf	6
 12293     0D31  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12294     0D32  0087               	movwf	7
 12295     0D33  3142               	addfsr 1,2
 12296     0D34  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12297     0D35  3FC0               	movwi [0]fsr1
 12298     0D36  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12299     0D37  3FC1               	movwi [1]fsr1
 12300                           
 12301                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 12302     0D38  0867               	movf	_pBDTEntryEP0OutNext,w
 12303     0D39  0086               	movwf	6
 12304     0D3A  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12305     0D3B  0087               	movwf	7
 12306     0D3C  3004               	movlw	4
 12307     0D3D  0081               	movwf	1
 12308                           
 12309                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12310     0D3E  0867               	movf	_pBDTEntryEP0OutNext,w
 12311     0D3F  0086               	movwf	6
 12312     0D40  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12313     0D41  0087               	movwf	7
 12314     0D42  1781               	bsf	1,7
 12315     0D43  2D0E               	goto	i1l4678
 12316     0D44                     __end_of_USBCtrlEPServiceComplete:	
 12317                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 12318                           
 12319                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 12320                           
 12321                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 12322                           
 12323                           
 12324                           	psect	text62
 12325     15F3                     __ptext62:	
 12326 ;; *************** function _USBCtrlEPAllowDataStage *****************
 12327 ;; Defined at:
 12328 ;;		line 1492 in file "usb/usb_device.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;		None
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 1F/2
 12339 ;;		On exit  : 1F/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        4 bytes
 12347 ;; Hardware stack levels used: 1
 12348 ;; Hardware stack levels required when called: 1
 12349 ;; This function calls:
 12350 ;;		_USBCtrlTrfTxService
 12351 ;; This function is called by:
 12352 ;;		_USBCtrlEPServiceComplete
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356     15F3                     _USBCtrlEPAllowDataStage:	
 12357                           ;psect for function _USBCtrlEPAllowDataStage
 12358                           
 12359                           
 12360                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 12361                           
 12362                           ;incstack = 0
 12363                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12364     15F3  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 12365                           
 12366                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 12367     15F4  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 12368                           
 12369                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 12370     15F5  3002               	movlw	2
 12371     15F6  0020               	movlb	0	; select bank0
 12372     15F7  0669               	xorwf	_controlTransferState,w	;volatile
 12373     15F8  1D03               	btfss	3,2
 12374     15F9  2E25               	goto	i1l4330
 12375                           
 12376                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 12377     15FA  0867               	movf	_pBDTEntryEP0OutNext,w
 12378     15FB  3E01               	addlw	1
 12379     15FC  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12380     15FD  3000               	movlw	0
 12381     15FE  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12382     15FF  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12383     1600  0873               	movf	??_USBCtrlEPAllowDataStage,w
 12384     1601  0086               	movwf	6
 12385     1602  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 12386     1603  0087               	movwf	7
 12387     1604  3008               	movlw	8
 12388     1605  0081               	movwf	1
 12389                           
 12390                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 12391     1606  3048               	movlw	72
 12392     1607  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12393     1608  3000               	movlw	0
 12394     1609  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12395     160A  30FF               	movlw	255
 12396     160B  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12397     160C  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12398     160D  307F               	movlw	127
 12399     160E  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12400     160F  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12401     1610  0867               	movf	_pBDTEntryEP0OutNext,w
 12402     1611  0086               	movwf	6
 12403     1612  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12404     1613  0087               	movwf	7
 12405     1614  3142               	addfsr 1,2
 12406     1615  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12407     1616  3FC0               	movwi [0]fsr1
 12408     1617  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12409     1618  3FC1               	movwi [1]fsr1
 12410                           
 12411                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 12412     1619  0867               	movf	_pBDTEntryEP0OutNext,w
 12413     161A  0086               	movwf	6
 12414     161B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12415     161C  0087               	movwf	7
 12416     161D  3048               	movlw	72
 12417     161E  0081               	movwf	1
 12418                           
 12419                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12420     161F  0867               	movf	_pBDTEntryEP0OutNext,w
 12421     1620  0086               	movwf	6
 12422     1621  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12423     1622  0087               	movwf	7
 12424     1623  1781               	bsf	1,7
 12425                           
 12426                           ;usb/usb_device.c: 1504:     }
 12427     1624  0008               	return
 12428     1625                     i1l4330:
 12429                           
 12430                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 12431     1625  0021               	movlb	1	; select bank1
 12432     1626  086F               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 12433     1627  0020               	movlb	0	; select bank0
 12434     1628  0247               	subwf	71,w	;volatile
 12435     1629  1D03               	skipz
 12436     162A  2E2F               	goto	u331_25
 12437     162B  0021               	movlb	1	; select bank1
 12438     162C  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 12439     162D  0020               	movlb	0	; select bank0
 12440     162E  0246               	subwf	70,w	;volatile
 12441     162F                     u331_25:
 12442     162F  1803               	skipnc
 12443     1630  2E38               	goto	i1l4334
 12444                           
 12445                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 12446     1631  0847               	movf	71,w	;volatile
 12447     1632  0021               	movlb	1	; select bank1
 12448     1633  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12449     1634  0020               	movlb	0	; select bank0
 12450     1635  0846               	movf	70,w	;volatile
 12451     1636  0021               	movlb	1	; select bank1
 12452     1637  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12453     1638                     i1l4334:
 12454                           
 12455                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 12456     1638  3195  258C         	fcall	_USBCtrlTrfTxService
 12457                           
 12458                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 12459     163A  3048               	movlw	72
 12460     163B  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12461     163C  3000               	movlw	0
 12462     163D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12463     163E  30FF               	movlw	255
 12464     163F  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12465     1640  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12466     1641  307F               	movlw	127
 12467     1642  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12468     1643  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12469     1644  0020               	movlb	0	; select bank0
 12470     1645  0861               	movf	_pBDTEntryIn,w
 12471     1646  0086               	movwf	6
 12472     1647  0862               	movf	_pBDTEntryIn+1,w
 12473     1648  0087               	movwf	7
 12474     1649  3142               	addfsr 1,2
 12475     164A  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12476     164B  3FC0               	movwi [0]fsr1
 12477     164C  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12478     164D  3FC1               	movwi [1]fsr1
 12479                           
 12480                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 12481     164E  0861               	movf	_pBDTEntryIn,w
 12482     164F  0086               	movwf	6
 12483     1650  0862               	movf	_pBDTEntryIn+1,w
 12484     1651  0087               	movwf	7
 12485     1652  3048               	movlw	72
 12486     1653  0081               	movwf	1
 12487                           
 12488                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 12489     1654  0861               	movf	_pBDTEntryIn,w
 12490     1655  0086               	movwf	6
 12491     1656  0862               	movf	_pBDTEntryIn+1,w
 12492     1657  0087               	movwf	7
 12493     1658  1781               	bsf	1,7
 12494     1659  0008               	return
 12495     165A                     __end_of_USBCtrlEPAllowDataStage:
 12496                           
 12497                           	psect	text63
 12498     172A                     __ptext63:	
 12499 ;; *************** function _USBCheckStdRequest *****************
 12500 ;; Defined at:
 12501 ;;		line 2693 in file "usb/usb_device.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;		None
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;		None
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  1    wreg      void 
 12508 ;; Registers used:
 12509 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12510 ;; Tracked objects:
 12511 ;;		On entry : 1F/2
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;Total ram usage:        0 bytes
 12520 ;; Hardware stack levels used: 1
 12521 ;; Hardware stack levels required when called: 5
 12522 ;; This function calls:
 12523 ;;		_USBStdFeatureReqHandler
 12524 ;;		_USBStdGetDscHandler
 12525 ;;		_USBStdGetStatusHandler
 12526 ;;		_USBStdSetCfgHandler
 12527 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12528 ;; This function is called by:
 12529 ;;		_USBCtrlTrfSetupHandler
 12530 ;; This function uses a non-reentrant model
 12531 ;;
 12532                           
 12533     172A                     _USBCheckStdRequest:	
 12534                           ;psect for function _USBCheckStdRequest
 12535                           
 12536                           
 12537                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 12538                           
 12539                           ;incstack = 0
 12540 ;; hardware stack exceeded
 12541                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12542     172A  0020               	movlb	0	; select bank0
 12543     172B  0E40               	swapf	64,w	;volatile
 12544     172C  0C89               	rrf	9,f
 12545     172D  3903               	andlw	3
 12546     172E  3A00               	xorlw	0
 12547     172F  1D03               	btfss	3,2
 12548     1730  0008               	return
 12549     1731  2F71               	goto	i1l6302
 12550     1732                     i1l694:	
 12551                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 12552                           
 12553                           
 12554                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 12555     1732  0021               	movlb	1	; select bank1
 12556     1733  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12557                           
 12558                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 12559     1734  3008               	movlw	8
 12560     1735  0020               	movlb	0	; select bank0
 12561     1736  00EB               	movwf	_USBDeviceState	;volatile
 12562                           
 12563                           ;usb/usb_device.c: 2703:             break;
 12564     1737  0008               	return
 12565     1738                     i1l6272:
 12566                           
 12567                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 12568     1738  3189  2137         	fcall	_USBStdGetDscHandler
 12569                           
 12570                           ;usb/usb_device.c: 2706:             break;
 12571     173A  0008               	return
 12572     173B                     i1l6274:
 12573                           
 12574                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 12575     173B  3188  20C5         	fcall	_USBStdSetCfgHandler
 12576                           
 12577                           ;usb/usb_device.c: 2709:             break;
 12578     173D  0008               	return
 12579     173E                     i1l6276:
 12580                           
 12581                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 12582     173E  306F               	movlw	low _USBActiveConfiguration
 12583     173F  0021               	movlb	1	; select bank1
 12584     1740  00EB               	movwf	_inPipes^(0+128)	;volatile
 12585     1741  3000               	movlw	high _USBActiveConfiguration
 12586     1742  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 12587                           
 12588                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 12589     1743  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 12590                           
 12591                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 12592     1744  3001               	movlw	1
 12593     1745  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12594                           
 12595                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 12596     1746  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12597                           
 12598                           ;usb/usb_device.c: 2715:             break;
 12599     1747  0008               	return
 12600     1748                     i1l6284:
 12601                           
 12602                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 12603     1748  3193  23B7         	fcall	_USBStdGetStatusHandler
 12604                           
 12605                           ;usb/usb_device.c: 2718:             break;
 12606     174A  0008               	return
 12607     174B                     i1l6286:
 12608                           
 12609                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 12610     174B  3182  22B6         	fcall	_USBStdFeatureReqHandler
 12611                           
 12612                           ;usb/usb_device.c: 2722:             break;
 12613     174D  0008               	return
 12614     174E                     i1l6288:
 12615                           
 12616                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 12617     174E  0844               	movf	68,w	;volatile
 12618     174F  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 12619     1750  0021               	movlb	1	; select bank1
 12620     1751  00EB               	movwf	_inPipes^(0+128)	;volatile
 12621     1752  3001               	movlw	1
 12622     1753  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 12623                           
 12624                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 12625     1754  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 12626                           
 12627                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 12628     1755  3001               	movlw	1
 12629     1756  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12630                           
 12631                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 12632     1757  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12633                           
 12634                           ;usb/usb_device.c: 2728:             break;
 12635     1758  0008               	return
 12636     1759                     i1l703:	
 12637                           ;usb/usb_device.c: 2729:         case 11:
 12638                           
 12639                           
 12640                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 12641     1759  0021               	movlb	1	; select bank1
 12642     175A  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12643                           
 12644                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 12645     175B  0020               	movlb	0	; select bank0
 12646     175C  0844               	movf	68,w	;volatile
 12647     175D  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 12648     175E  0086               	movwf	6
 12649     175F  3001               	movlw	1	; select bank2/3
 12650     1760  0087               	movwf	7
 12651     1761  0842               	movf	66,w	;volatile
 12652     1762  0081               	movwf	1
 12653                           
 12654                           ;usb/usb_device.c: 2732:             break;
 12655     1763  0008               	return
 12656     1764                     i1l6298:
 12657                           
 12658                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 12659     1764  3002               	movlw	2
 12660     1765  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12661     1766  3000               	movlw	0
 12662     1767  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12663     1768  3000               	movlw	0
 12664     1769  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12665     176A  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12666     176B  3000               	movlw	0
 12667     176C  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12668     176D  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12669     176E  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12670                           
 12671                           ;usb/usb_device.c: 2735:             break;
 12672     1770  0008               	return
 12673     1771                     i1l6302:
 12674     1771  0841               	movf	65,w	;volatile
 12675                           
 12676                           ; Switch size 1, requested type "simple"
 12677                           ; Number of cases is 11, Range of values is 0 to 12
 12678                           ; switch strategies available:
 12679                           ; Name         Instructions Cycles
 12680                           ; direct_byte           32     6 (fixed)
 12681                           ; simple_byte           34    18 (average)
 12682                           ; jumptable            260     6 (fixed)
 12683                           ;	Chosen strategy is simple_byte
 12684     1772  3A00               	xorlw	0	; case 0
 12685     1773  1903               	skipnz
 12686     1774  2F48               	goto	i1l6284
 12687     1775  3A01               	xorlw	1	; case 1
 12688     1776  1903               	skipnz
 12689     1777  2F4B               	goto	i1l6286
 12690     1778  3A02               	xorlw	2	; case 3
 12691     1779  1903               	skipnz
 12692     177A  2F4B               	goto	i1l6286
 12693     177B  3A06               	xorlw	6	; case 5
 12694     177C  1903               	skipnz
 12695     177D  2F32               	goto	i1l694
 12696     177E  3A03               	xorlw	3	; case 6
 12697     177F  1903               	skipnz
 12698     1780  2F38               	goto	i1l6272
 12699     1781  3A01               	xorlw	1	; case 7
 12700     1782  1903               	skipnz
 12701     1783  2F64               	goto	i1l6298
 12702     1784  3A0F               	xorlw	15	; case 8
 12703     1785  1903               	skipnz
 12704     1786  2F3E               	goto	i1l6276
 12705     1787  3A01               	xorlw	1	; case 9
 12706     1788  1903               	skipnz
 12707     1789  2F3B               	goto	i1l6274
 12708     178A  3A03               	xorlw	3	; case 10
 12709     178B  1903               	skipnz
 12710     178C  2F4E               	goto	i1l6288
 12711     178D  3A01               	xorlw	1	; case 11
 12712     178E  1903               	skipnz
 12713     178F  2F59               	goto	i1l703
 12714     1790  3A07               	xorlw	7	; case 12
 12715     1791  1903               	skipnz
 12716     1792  2F94               	goto	i1l692
 12717     1793  2F94               	goto	i1l692
 12718     1794                     i1l692:
 12719     1794  0008               	return
 12720     1795                     __end_of_USBCheckStdRequest:
 12721                           
 12722                           	psect	text64
 12723     08C5                     __ptext64:	
 12724 ;; *************** function _USBStdSetCfgHandler *****************
 12725 ;; Defined at:
 12726 ;;		line 1972 in file "usb/usb_device.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;		None
 12729 ;; Auto vars:     Size  Location     Type
 12730 ;;  p               2    6[BANK0 ] PTR unsigned char 
 12731 ;;		 -> UEP1(1), 
 12732 ;;  i               1    8[BANK0 ] unsigned char 
 12733 ;;  i               1    9[BANK0 ] unsigned char 
 12734 ;; Return value:  Size  Location     Type
 12735 ;;                  1    wreg      void 
 12736 ;; Registers used:
 12737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 1D/0
 12740 ;;		On exit  : 1F/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;Total ram usage:        5 bytes
 12748 ;; Hardware stack levels used: 1
 12749 ;; Hardware stack levels required when called: 4
 12750 ;; This function calls:
 12751 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12752 ;;		i1_memset
 12753 ;; This function is called by:
 12754 ;;		_USBCheckStdRequest
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758     08C5                     _USBStdSetCfgHandler:	
 12759                           ;psect for function _USBStdSetCfgHandler
 12760                           
 12761                           
 12762                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 12763                           
 12764                           ;incstack = 0
 12765 ;; hardware stack exceeded
 12766                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12767     08C5  0021               	movlb	1	; select bank1
 12768     08C6  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12769                           
 12770                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 12771     08C7  300E               	movlw	14
 12772     08C8  0020               	movlb	0	; select bank0
 12773     08C9  00D7               	movwf	USBStdSetCfgHandler@p+1
 12774     08CA  3099               	movlw	153
 12775     08CB  00D6               	movwf	USBStdSetCfgHandler@p
 12776     08CC  01D8               	clrf	USBStdSetCfgHandler@i_2097
 12777     08CD                     i1l6222:
 12778     08CD  0856               	movf	USBStdSetCfgHandler@p,w
 12779     08CE  0086               	movwf	6
 12780     08CF  0857               	movf	USBStdSetCfgHandler@p+1,w
 12781     08D0  0087               	movwf	7
 12782     08D1  0181               	clrf	1
 12783     08D2  3001               	movlw	1
 12784     08D3  07D6               	addwf	USBStdSetCfgHandler@p,f
 12785     08D4  3000               	movlw	0
 12786     08D5  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 12787     08D6  3001               	movlw	1
 12788     08D7  00FD               	movwf	??_USBStdSetCfgHandler
 12789     08D8  087D               	movf	??_USBStdSetCfgHandler,w
 12790     08D9  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 12791     08DA  0858               	movf	USBStdSetCfgHandler@i_2097,w
 12792     08DB  1903               	btfsc	3,2
 12793     08DC  28CD               	goto	i1l6222
 12794                           
 12795                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 12796     08DD  3020               	movlw	32
 12797     08DE  00F0               	movwf	i1memset@dest
 12798     08DF  3000               	movlw	0
 12799     08E0  00F1               	movwf	i1memset@dest+1
 12800     08E1  3000               	movlw	0
 12801     08E2  00F2               	movwf	i1memset@c
 12802     08E3  00F3               	movwf	i1memset@c+1
 12803     08E4  3020               	movlw	32
 12804     08E5  00F4               	movwf	i1memset@n
 12805     08E6  3000               	movlw	0
 12806     08E7  00F5               	movwf	i1memset@n+1
 12807     08E8  319D  2587  3188   	fcall	i1_memset
 12808                           
 12809                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 12810     08EB  003D               	movlb	29	; select bank29
 12811     08EC  170E               	bsf	14,6	;volatile
 12812                           
 12813                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 12814     08ED  0020               	movlb	0	; select bank0
 12815     08EE  01D9               	clrf	USBStdSetCfgHandler@i
 12816     08EF                     i1l6240:
 12817                           
 12818                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 12819     08EF  0859               	movf	USBStdSetCfgHandler@i,w
 12820     08F0  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12821     08F1  0086               	movwf	6
 12822     08F2  3001               	movlw	1	; select bank2/3
 12823     08F3  0087               	movwf	7
 12824     08F4  0181               	clrf	1
 12825                           
 12826                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 12827     08F5  0859               	movf	USBStdSetCfgHandler@i,w
 12828     08F6  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12829     08F7  0086               	movwf	6
 12830     08F8  3001               	movlw	1	; select bank2/3
 12831     08F9  0087               	movwf	7
 12832     08FA  0181               	clrf	1
 12833                           
 12834                           ;usb/usb_device.c: 1995:  }
 12835     08FB  3001               	movlw	1
 12836     08FC  00FD               	movwf	??_USBStdSetCfgHandler
 12837     08FD  087D               	movf	??_USBStdSetCfgHandler,w
 12838     08FE  07D9               	addwf	USBStdSetCfgHandler@i,f
 12839     08FF  3002               	movlw	2
 12840     0900  0259               	subwf	USBStdSetCfgHandler@i,w
 12841     0901  1C03               	skipc
 12842     0902  28EF               	goto	i1l6240
 12843                           
 12844                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 12845     0903  304B               	movlw	low _USBAlternateInterface
 12846     0904  00F0               	movwf	i1memset@dest
 12847     0905  3001               	movlw	high _USBAlternateInterface
 12848     0906  00F1               	movwf	i1memset@dest+1
 12849     0907  3000               	movlw	0
 12850     0908  00F2               	movwf	i1memset@c
 12851     0909  00F3               	movwf	i1memset@c+1
 12852     090A  3001               	movlw	1
 12853     090B  00F4               	movwf	i1memset@n
 12854     090C  3000               	movlw	0
 12855     090D  00F5               	movwf	i1memset@n+1
 12856     090E  319D  2587  3188   	fcall	i1_memset
 12857                           
 12858                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 12859     0911  003D               	movlb	29	; select bank29
 12860     0912  130E               	bcf	14,6	;volatile
 12861                           
 12862                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 12863     0913  3028               	movlw	40
 12864     0914  0020               	movlb	0	; select bank0
 12865     0915  00E1               	movwf	_pBDTEntryIn
 12866     0916  3000               	movlw	0
 12867     0917  00E2               	movwf	_pBDTEntryIn+1
 12868                           
 12869                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 12870     0918  3020               	movlw	32
 12871     0919  00EA               	movwf	_pBDTEntryEP0OutCurrent
 12872                           
 12873                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 12874     091A  086A               	movf	_pBDTEntryEP0OutCurrent,w
 12875     091B  00E7               	movwf	_pBDTEntryEP0OutNext
 12876     091C  01E8               	clrf	_pBDTEntryEP0OutNext+1
 12877                           
 12878                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 12879     091D  0842               	movf	66,w	;volatile
 12880     091E  00EF               	movwf	_USBActiveConfiguration	;volatile
 12881                           
 12882                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 12883     091F  086F               	movf	_USBActiveConfiguration,w	;volatile
 12884     0920  1D03               	btfss	3,2
 12885     0921  2925               	goto	i1l6262
 12886                           
 12887                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 12888     0922  3010               	movlw	16
 12889     0923  00EB               	movwf	_USBDeviceState	;volatile
 12890                           
 12891                           ;usb/usb_device.c: 2017:     }
 12892     0924  0008               	return
 12893     0925                     i1l6262:
 12894                           
 12895                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 12896     0925  3001               	movlw	1
 12897     0926  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12898     0927  3000               	movlw	0
 12899     0928  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12900     0929  306F               	movlw	low _USBActiveConfiguration
 12901     092A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12902     092B  3000               	movlw	high _USBActiveConfiguration
 12903     092C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12904     092D  3001               	movlw	1
 12905     092E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12906     092F  3000               	movlw	0
 12907     0930  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12908     0931  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12909                           
 12910                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 12911     0933  3020               	movlw	32
 12912     0934  0020               	movlb	0	; select bank0
 12913     0935  00EB               	movwf	_USBDeviceState	;volatile
 12914     0936  0008               	return
 12915     0937                     __end_of_USBStdSetCfgHandler:
 12916                           
 12917                           	psect	text65
 12918     1D87                     __ptext65:	
 12919 ;; *************** function i1_memset *****************
 12920 ;; Defined at:
 12921 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;  dest            2    0[COMMON] PTR void 
 12924 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 12925 ;;  c               2    2[COMMON] int 
 12926 ;;  n               2    4[COMMON] unsigned int 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  p               2    6[COMMON] PTR unsigned char 
 12929 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  2    0[COMMON] PTR void 
 12932 ;; Registers used:
 12933 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12934 ;; Tracked objects:
 12935 ;;		On entry : 1F/0
 12936 ;;		On exit  : 1F/0
 12937 ;;		Unchanged: 1F/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        8 bytes
 12944 ;; Hardware stack levels used: 1
 12945 ;; This function calls:
 12946 ;;		Nothing
 12947 ;; This function is called by:
 12948 ;;		_USBStdSetCfgHandler
 12949 ;; This function uses a non-reentrant model
 12950 ;;
 12951                           
 12952     1D87                     i1_memset:	
 12953                           ;psect for function i1_memset
 12954                           
 12955                           
 12956                           ;incstack = 0
 12957                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 12958     1D87  0871               	movf	i1memset@dest+1,w
 12959     1D88  00F7               	movwf	i1memset@p+1
 12960     1D89  0870               	movf	i1memset@dest,w
 12961     1D8A  00F6               	movwf	i1memset@p
 12962     1D8B                     i1l6212:
 12963     1D8B  3001               	movlw	1
 12964     1D8C  02F4               	subwf	i1memset@n,f
 12965     1D8D  3000               	movlw	0
 12966     1D8E  3BF5               	subwfb	i1memset@n+1,f
 12967     1D8F  0A74               	incf	i1memset@n,w
 12968     1D90  1903               	btfsc	3,2
 12969     1D91  0A75               	incf	i1memset@n+1,w
 12970     1D92  1903               	btfsc	3,2
 12971     1D93  0008               	return
 12972     1D94  0876               	movf	i1memset@p,w
 12973     1D95  0086               	movwf	6
 12974     1D96  0877               	movf	i1memset@p+1,w
 12975     1D97  0087               	movwf	7
 12976     1D98  0872               	movf	i1memset@c,w
 12977     1D99  0081               	movwf	1
 12978     1D9A  3001               	movlw	1
 12979     1D9B  07F6               	addwf	i1memset@p,f
 12980     1D9C  3000               	movlw	0
 12981     1D9D  3DF7               	addwfc	i1memset@p+1,f
 12982     1D9E  2D8B               	goto	i1l6212
 12983     1D9F                     __end_ofi1_memset:
 12984                           
 12985                           	psect	text66
 12986     13B7                     __ptext66:	
 12987 ;; *************** function _USBStdGetStatusHandler *****************
 12988 ;; Defined at:
 12989 ;;		line 2133 in file "usb/usb_device.c"
 12990 ;; Parameters:    Size  Location     Type
 12991 ;;		None
 12992 ;; Auto vars:     Size  Location     Type
 12993 ;;  p               2    0[COMMON] PTR struct __BDT
 12994 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12995 ;; Return value:  Size  Location     Type
 12996 ;;                  1    wreg      void 
 12997 ;; Registers used:
 12998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 12999 ;; Tracked objects:
 13000 ;;		On entry : 1D/0
 13001 ;;		On exit  : 1F/1
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;Total ram usage:        2 bytes
 13009 ;; Hardware stack levels used: 1
 13010 ;; This function calls:
 13011 ;;		Nothing
 13012 ;; This function is called by:
 13013 ;;		_USBCheckStdRequest
 13014 ;; This function uses a non-reentrant model
 13015 ;;
 13016                           
 13017     13B7                     _USBStdGetStatusHandler:	
 13018                           ;psect for function _USBStdGetStatusHandler
 13019                           
 13020                           
 13021                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 13022                           
 13023                           ;incstack = 0
 13024                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 13025     13B7  0020               	movlb	0	; select bank0
 13026     13B8  01C8               	clrf	72	;volatile
 13027                           
 13028                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 13029     13B9  01C9               	clrf	73	;volatile
 13030                           
 13031                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 13032     13BA  2BF5               	goto	i1l4450
 13033     13BB                     i1l631:	
 13034                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 13035                           
 13036                           
 13037                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 13038     13BB  0021               	movlb	1	; select bank1
 13039     13BC  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13040                           
 13041                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 13042                           
 13043                           ;usb/usb_device.c: 2146:             if(0 == 1)
 13044     13BD  0022               	movlb	2	; select bank2
 13045     13BE  0345               	decf	_RemoteWakeup^(0+256),w	;volatile
 13046     13BF  1D03               	btfss	3,2
 13047     13C0  2C01               	goto	i1l634
 13048                           
 13049                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 13050     13C1  0020               	movlb	0	; select bank0
 13051     13C2  14C8               	bsf	72,1	;volatile
 13052     13C3  2C01               	goto	i1l634
 13053     13C4                     i1l635:	
 13054                           ;usb/usb_device.c: 2156:         case (0x01):
 13055                           
 13056                           
 13057                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 13058     13C4  0021               	movlb	1	; select bank1
 13059     13C5  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13060                           
 13061                           ;usb/usb_device.c: 2158:             break;
 13062     13C6  2C01               	goto	i1l634
 13063     13C7                     i1l636:	
 13064                           ;usb/usb_device.c: 2159:         case (0x02):
 13065                           
 13066                           
 13067                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 13068     13C7  0021               	movlb	1	; select bank1
 13069     13C8  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13070                           
 13071                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 13072     13C9  0020               	movlb	0	; select bank0
 13073     13CA  0844               	movf	68,w	;volatile
 13074     13CB  390F               	andlw	15
 13075     13CC  3A00               	xorlw	0
 13076     13CD  1903               	skipnz
 13077     13CE  2C01               	goto	i1l634
 13078                           
 13079                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 13080     13CF  1BC4               	btfsc	68,7	;volatile
 13081     13D0  2BDC               	goto	i1l4440
 13082                           
 13083                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 13084     13D1  0844               	movf	68,w	;volatile
 13085     13D2  390F               	andlw	15
 13086     13D3  0709               	addwf	9,w
 13087     13D4  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13088     13D5  0086               	movwf	6
 13089     13D6  3001               	movlw	1	; select bank2/3
 13090     13D7  0087               	movwf	7
 13091     13D8  3F40               	moviw [0]fsr1
 13092     13D9  00F0               	movwf	USBStdGetStatusHandler@p
 13093     13DA  3F41               	moviw [1]fsr1
 13094     13DB  2BE5               	goto	L9
 13095     13DC                     i1l4440:	
 13096                           ;usb/usb_device.c: 2171:                 }
 13097                           
 13098                           
 13099                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 13100     13DC  0844               	movf	68,w	;volatile
 13101     13DD  390F               	andlw	15
 13102     13DE  0709               	addwf	9,w
 13103     13DF  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13104     13E0  0086               	movwf	6
 13105     13E1  0187               	clrf	7
 13106     13E2  3F40               	moviw [0]fsr1
 13107     13E3  00F0               	movwf	USBStdGetStatusHandler@p
 13108     13E4  3F41               	moviw [1]fsr1
 13109     13E5                     L9:
 13110     13E5  00F1               	movwf	USBStdGetStatusHandler@p+1
 13111                           
 13112                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 13113     13E6  0870               	movf	USBStdGetStatusHandler@p,w
 13114     13E7  0086               	movwf	6
 13115     13E8  0871               	movf	USBStdGetStatusHandler@p+1,w
 13116     13E9  0087               	movwf	7
 13117     13EA  1F81               	btfss	1,7
 13118     13EB  2C01               	goto	i1l634
 13119     13EC  0870               	movf	USBStdGetStatusHandler@p,w
 13120     13ED  0086               	movwf	6
 13121     13EE  0871               	movf	USBStdGetStatusHandler@p+1,w
 13122     13EF  0087               	movwf	7
 13123     13F0  1D01               	btfss	1,2
 13124     13F1  2C01               	goto	i1l634
 13125                           
 13126                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 13127     13F2  3001               	movlw	1
 13128     13F3  00C8               	movwf	72	;volatile
 13129     13F4  2C01               	goto	i1l634
 13130     13F5                     i1l4450:
 13131     13F5  0840               	movf	64,w	;volatile
 13132     13F6  391F               	andlw	31
 13133                           
 13134                           ; Switch size 1, requested type "simple"
 13135                           ; Number of cases is 3, Range of values is 0 to 2
 13136                           ; switch strategies available:
 13137                           ; Name         Instructions Cycles
 13138                           ; simple_byte           10     6 (average)
 13139                           ; direct_byte           12     6 (fixed)
 13140                           ; jumptable            260     6 (fixed)
 13141                           ;	Chosen strategy is simple_byte
 13142     13F7  3A00               	xorlw	0	; case 0
 13143     13F8  1903               	skipnz
 13144     13F9  2BBB               	goto	i1l631
 13145     13FA  3A01               	xorlw	1	; case 1
 13146     13FB  1903               	skipnz
 13147     13FC  2BC4               	goto	i1l635
 13148     13FD  3A03               	xorlw	3	; case 2
 13149     13FE  1903               	skipnz
 13150     13FF  2BC7               	goto	i1l636
 13151     1400  2C01               	goto	i1l634
 13152     1401                     i1l634:
 13153                           
 13154                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 13155     1401  0021               	movlb	1	; select bank1
 13156     1402  1FED               	btfss	(_inPipes^(0+128)+2),7	;volatile
 13157     1403  0008               	return
 13158                           
 13159                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 13160     1404  3048               	movlw	72
 13161     1405  00EB               	movwf	_inPipes^(0+128)	;volatile
 13162     1406  3000               	movlw	0
 13163     1407  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13164                           
 13165                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13166     1408  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 13167                           
 13168                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 13169     1409  3002               	movlw	2
 13170     140A  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13171     140B  0008               	return
 13172     140C                     __end_of_USBStdGetStatusHandler:
 13173                           
 13174                           	psect	text67
 13175     0937                     __ptext67:	
 13176 ;; *************** function _USBStdGetDscHandler *****************
 13177 ;; Defined at:
 13178 ;;		line 2047 in file "usb/usb_device.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;		None
 13181 ;; Auto vars:     Size  Location     Type
 13182 ;;		None
 13183 ;; Return value:  Size  Location     Type
 13184 ;;                  1    wreg      void 
 13185 ;; Registers used:
 13186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 13187 ;; Tracked objects:
 13188 ;;		On entry : 1D/0
 13189 ;;		On exit  : 1E/0
 13190 ;;		Unchanged: 0/0
 13191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;Total ram usage:        3 bytes
 13197 ;; Hardware stack levels used: 1
 13198 ;; This function calls:
 13199 ;;		Nothing
 13200 ;; This function is called by:
 13201 ;;		_USBCheckStdRequest
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205     0937                     _USBStdGetDscHandler:	
 13206                           ;psect for function _USBStdGetDscHandler
 13207                           
 13208                           
 13209                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 13210                           
 13211                           ;incstack = 0
 13212                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 13213     0937  3080               	movlw	128
 13214     0938  0020               	movlb	0	; select bank0
 13215     0939  0640               	xorwf	64,w	;volatile
 13216     093A  1D03               	btfss	3,2
 13217     093B  0008               	return
 13218                           
 13219                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 13220     093C  30C0               	movlw	192
 13221     093D  0021               	movlb	1	; select bank1
 13222     093E  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 13223                           
 13224                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 13225     093F  29A3               	goto	i1l4424
 13226     0940                     i1l4398:
 13227                           
 13228                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 13229     0940  30B8               	movlw	low (_device_dsc| (0+32768))
 13230     0941  0021               	movlb	1	; select bank1
 13231     0942  00EB               	movwf	_inPipes^(0+128)	;volatile
 13232     0943  3098               	movlw	high (_device_dsc| (0+32768))
 13233     0944  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 13234                           
 13235                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 13236     0945  3000               	movlw	0
 13237     0946  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13238     0947  3012               	movlw	18
 13239     0948  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13240                           
 13241                           ;usb/usb_device.c: 2062:                 break;
 13242     0949  0008               	return
 13243     094A                     i1l4402:
 13244                           
 13245                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 13246     094A  0842               	movf	66,w	;volatile
 13247     094B  1D03               	btfss	3,2
 13248     094C  2979               	goto	i1l4410
 13249                           
 13250                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 13251     094D  0842               	movf	66,w	;volatile
 13252     094E  00F0               	movwf	??_USBStdGetDscHandler
 13253     094F  01F1               	clrf	??_USBStdGetDscHandler+1
 13254     0950  35F0               	lslf	??_USBStdGetDscHandler,f
 13255     0951  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13256     0952  30DD               	movlw	low _USB_CD_Ptr
 13257     0953  0770               	addwf	??_USBStdGetDscHandler,w
 13258     0954  0084               	movwf	4
 13259     0955  3018               	movlw	high _USB_CD_Ptr
 13260     0956  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13261     0957  3880               	iorlw	128
 13262     0958  0085               	movwf	5
 13263     0959  3F00               	moviw [0]fsr0
 13264     095A  0021               	movlb	1	; select bank1
 13265     095B  00EB               	movwf	_inPipes^(0+128)	;volatile
 13266     095C  3F01               	moviw [1]fsr0
 13267     095D  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13268                           
 13269                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 13270     095E  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13271     095F  00F1               	movwf	??_USBStdGetDscHandler+1
 13272     0960  086B               	movf	_inPipes^(0+128),w	;volatile
 13273     0961  00F0               	movwf	??_USBStdGetDscHandler
 13274     0962  3002               	movlw	2
 13275     0963  0770               	addwf	??_USBStdGetDscHandler,w
 13276     0964  0084               	movwf	4
 13277     0965  0871               	movf	??_USBStdGetDscHandler+1,w
 13278     0966  1803               	skipnc
 13279     0967  0A71               	incf	??_USBStdGetDscHandler+1,w
 13280     0968  0085               	movwf	5
 13281     0969  0800               	movf	0,w	;code access
 13282     096A  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13283                           
 13284                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 13285     096B  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13286     096C  00F1               	movwf	??_USBStdGetDscHandler+1
 13287     096D  086B               	movf	_inPipes^(0+128),w	;volatile
 13288     096E  00F0               	movwf	??_USBStdGetDscHandler
 13289     096F  3003               	movlw	3
 13290     0970  0770               	addwf	??_USBStdGetDscHandler,w
 13291     0971  0084               	movwf	4
 13292     0972  0871               	movf	??_USBStdGetDscHandler+1,w
 13293     0973  1803               	skipnc
 13294     0974  0A71               	incf	??_USBStdGetDscHandler+1,w
 13295     0975  0085               	movwf	5
 13296     0976  0800               	movf	0,w	;code access
 13297     0977  00EF               	movwf	(_inPipes^(0+128)+4)	;volatile
 13298                           
 13299                           ;usb/usb_device.c: 2080:                 }
 13300     0978  0008               	return
 13301     0979                     i1l4410:
 13302                           
 13303                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 13304     0979  0021               	movlb	1	; select bank1
 13305     097A  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13306     097B  0008               	return
 13307     097C                     i1l4412:
 13308                           
 13309                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 13310     097C  3003               	movlw	3
 13311     097D  0242               	subwf	66,w	;volatile
 13312     097E  1803               	skipnc
 13313     097F  299D               	goto	i1l4418
 13314                           
 13315                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 13316     0980  0842               	movf	66,w	;volatile
 13317     0981  00F0               	movwf	??_USBStdGetDscHandler
 13318     0982  01F1               	clrf	??_USBStdGetDscHandler+1
 13319     0983  35F0               	lslf	??_USBStdGetDscHandler,f
 13320     0984  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13321     0985  30D3               	movlw	low _USB_SD_Ptr
 13322     0986  0770               	addwf	??_USBStdGetDscHandler,w
 13323     0987  0084               	movwf	4
 13324     0988  3018               	movlw	high _USB_SD_Ptr
 13325     0989  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13326     098A  3880               	iorlw	128
 13327     098B  0085               	movwf	5
 13328     098C  3F00               	moviw [0]fsr0
 13329     098D  0021               	movlb	1	; select bank1
 13330     098E  00EB               	movwf	_inPipes^(0+128)	;volatile
 13331     098F  3F01               	moviw [1]fsr0
 13332     0990  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13333                           
 13334                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 13335     0991  086B               	movf	_inPipes^(0+128),w	;volatile
 13336     0992  0084               	movwf	4
 13337     0993  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13338     0994  0085               	movwf	5
 13339     0995  0800               	movf	0,w	;code access
 13340     0996  00F0               	movwf	??_USBStdGetDscHandler
 13341     0997  01F1               	clrf	??_USBStdGetDscHandler+1
 13342     0998  0870               	movf	??_USBStdGetDscHandler,w
 13343     0999  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13344     099A  0871               	movf	??_USBStdGetDscHandler+1,w
 13345     099B  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13346                           
 13347                           ;usb/usb_device.c: 2096:                 }
 13348     099C  0008               	return
 13349     099D                     i1l4418:
 13350                           
 13351                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 13352     099D  0021               	movlb	1	; select bank1
 13353     099E  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13354     099F  0008               	return
 13355     09A0                     i1l4420:
 13356                           
 13357                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 13358     09A0  0021               	movlb	1	; select bank1
 13359     09A1  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13360                           
 13361                           ;usb/usb_device.c: 2113:                 break;
 13362     09A2  0008               	return
 13363     09A3                     i1l4424:
 13364     09A3  0020               	movlb	0	; select bank0
 13365     09A4  0843               	movf	67,w	;volatile
 13366                           
 13367                           ; Switch size 1, requested type "simple"
 13368                           ; Number of cases is 3, Range of values is 1 to 3
 13369                           ; switch strategies available:
 13370                           ; Name         Instructions Cycles
 13371                           ; simple_byte           10     6 (average)
 13372                           ; direct_byte           15     9 (fixed)
 13373                           ; jumptable            263     9 (fixed)
 13374                           ;	Chosen strategy is simple_byte
 13375     09A5  3A01               	xorlw	1	; case 1
 13376     09A6  1903               	skipnz
 13377     09A7  2940               	goto	i1l4398
 13378     09A8  3A03               	xorlw	3	; case 2
 13379     09A9  1903               	skipnz
 13380     09AA  294A               	goto	i1l4402
 13381     09AB  3A01               	xorlw	1	; case 3
 13382     09AC  1903               	skipnz
 13383     09AD  297C               	goto	i1l4412
 13384     09AE  29A0               	goto	i1l4420
 13385     09AF  0008               	return
 13386     09B0                     __end_of_USBStdGetDscHandler:
 13387                           
 13388                           	psect	text68
 13389     02B6                     __ptext68:	
 13390 ;; *************** function _USBStdFeatureReqHandler *****************
 13391 ;; Defined at:
 13392 ;;		line 2761 in file "usb/usb_device.c"
 13393 ;; Parameters:    Size  Location     Type
 13394 ;;		None
 13395 ;; Auto vars:     Size  Location     Type
 13396 ;;  p               2   11[BANK0 ] PTR struct __BDT
 13397 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13398 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 13399 ;;		 -> UEP0(1), 
 13400 ;;  current_ep_d    1   10[BANK0 ] struct .
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  1    wreg      void 
 13403 ;; Registers used:
 13404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13405 ;; Tracked objects:
 13406 ;;		On entry : 1D/0
 13407 ;;		On exit  : 1F/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;Total ram usage:        7 bytes
 13415 ;; Hardware stack levels used: 1
 13416 ;; Hardware stack levels required when called: 4
 13417 ;; This function calls:
 13418 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13419 ;; This function is called by:
 13420 ;;		_USBCheckStdRequest
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424     02B6                     _USBStdFeatureReqHandler:	
 13425                           ;psect for function _USBStdFeatureReqHandler
 13426                           
 13427                           
 13428                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 13429                           
 13430                           ;incstack = 0
 13431 ;; hardware stack exceeded
 13432                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13433     02B6  0020               	movlb	0	; select bank0
 13434     02B7  0342               	decf	66,w	;volatile
 13435     02B8  1D03               	btfss	3,2
 13436     02B9  2ACC               	goto	i1l4470
 13437     02BA  0840               	movf	64,w	;volatile
 13438     02BB  391F               	andlw	31
 13439     02BC  3A00               	xorlw	0
 13440     02BD  1D03               	skipz
 13441     02BE  2ACC               	goto	i1l4470
 13442                           
 13443                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 13444     02BF  0021               	movlb	1	; select bank1
 13445     02C0  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13446                           
 13447                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 13448     02C1  3003               	movlw	3
 13449     02C2  0020               	movlb	0	; select bank0
 13450     02C3  0641               	xorwf	65,w	;volatile
 13451     02C4  1D03               	btfss	3,2
 13452     02C5  2ACA               	goto	i1l4468
 13453                           
 13454                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 13455     02C6  3001               	movlw	1
 13456     02C7  0022               	movlb	2	; select bank2
 13457     02C8  00C5               	movwf	_RemoteWakeup^(0+256)	;volatile
 13458     02C9  2ACC               	goto	i1l4470
 13459     02CA                     i1l4468:
 13460                           
 13461                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 13462     02CA  0022               	movlb	2	; select bank2
 13463     02CB  01C5               	clrf	_RemoteWakeup^(0+256)	;volatile
 13464     02CC                     i1l4470:
 13465                           
 13466                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 13467     02CC  0020               	movlb	0	; select bank0
 13468     02CD  0842               	movf	66,w	;volatile
 13469     02CE  1D03               	btfss	3,2
 13470     02CF  0008               	return
 13471     02D0  0840               	movf	64,w	;volatile
 13472     02D1  391F               	andlw	31
 13473     02D2  3A02               	xorlw	2
 13474     02D3  1D03               	skipz
 13475     02D4  0008               	return
 13476     02D5  0844               	movf	68,w	;volatile
 13477     02D6  390F               	andlw	15
 13478     02D7  3A00               	xorlw	0
 13479     02D8  1903               	skipnz
 13480     02D9  0008               	return
 13481     02DA  0844               	movf	68,w	;volatile
 13482     02DB  390F               	andlw	15
 13483     02DC  00D6               	movwf	??_USBStdFeatureReqHandler
 13484     02DD  3002               	movlw	2
 13485     02DE  0256               	subwf	??_USBStdFeatureReqHandler,w
 13486     02DF  1803               	skipnc
 13487     02E0  0008               	return
 13488     02E1  3020               	movlw	32
 13489     02E2  066B               	xorwf	_USBDeviceState,w
 13490     02E3  1D03               	btfss	3,2
 13491     02E4  0008               	return
 13492                           
 13493                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 13494     02E5  0021               	movlb	1	; select bank1
 13495     02E6  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13496                           
 13497                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 13498     02E7  0020               	movlb	0	; select bank0
 13499     02E8  1BC4               	btfsc	68,7	;volatile
 13500     02E9  2AF9               	goto	i1l4484
 13501                           
 13502                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 13503     02EA  0844               	movf	68,w	;volatile
 13504     02EB  390F               	andlw	15
 13505     02EC  0709               	addwf	9,w
 13506     02ED  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13507     02EE  0086               	movwf	6
 13508     02EF  3001               	movlw	1	; select bank2/3
 13509     02F0  0087               	movwf	7
 13510     02F1  3F40               	moviw [0]fsr1
 13511     02F2  00DB               	movwf	USBStdFeatureReqHandler@p
 13512     02F3  3F41               	moviw [1]fsr1
 13513     02F4  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13514                           
 13515                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 13516     02F5  0844               	movf	68,w	;volatile
 13517     02F6  390F               	andlw	15
 13518     02F7  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13519     02F8  2B06               	goto	L10
 13520     02F9                     i1l4484:	
 13521                           ;usb/usb_device.c: 2797:         }
 13522                           
 13523                           
 13524                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 13525     02F9  0844               	movf	68,w	;volatile
 13526     02FA  390F               	andlw	15
 13527     02FB  0709               	addwf	9,w
 13528     02FC  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13529     02FD  0086               	movwf	6
 13530     02FE  0187               	clrf	7
 13531     02FF  3F40               	moviw [0]fsr1
 13532     0300  00DB               	movwf	USBStdFeatureReqHandler@p
 13533     0301  3F41               	moviw [1]fsr1
 13534     0302  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13535                           
 13536                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 13537     0303  0844               	movf	68,w	;volatile
 13538     0304  390F               	andlw	15
 13539     0305  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13540     0306                     L10:
 13541     0306  0086               	movwf	6
 13542     0307  3001               	movlw	1	; select bank2/3
 13543     0308  0087               	movwf	7
 13544     0309  0801               	movf	1,w
 13545     030A  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 13546                           
 13547                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 13548     030B  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 13549     030C  2B17               	goto	i1l4490
 13550                           
 13551                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 13552     030D  30FB               	movlw	251
 13553     030E  00D6               	movwf	??_USBStdFeatureReqHandler
 13554     030F  30FF               	movlw	255
 13555     0310  00D7               	movwf	??_USBStdFeatureReqHandler+1
 13556     0311  085B               	movf	USBStdFeatureReqHandler@p,w
 13557     0312  0556               	andwf	??_USBStdFeatureReqHandler,w
 13558     0313  00DB               	movwf	USBStdFeatureReqHandler@p
 13559     0314  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13560     0315  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 13561     0316  2B1C               	goto	L11
 13562     0317                     i1l4490:	
 13563                           ;usb/usb_device.c: 2811:             }
 13564                           
 13565                           
 13566                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 13567     0317  3004               	movlw	4
 13568     0318  045B               	iorwf	USBStdFeatureReqHandler@p,w
 13569     0319  00DB               	movwf	USBStdFeatureReqHandler@p
 13570     031A  3000               	movlw	0
 13571     031B  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 13572     031C                     L11:
 13573     031C  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13574                           
 13575                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 13576     031D  1BC4               	btfsc	68,7	;volatile
 13577     031E  2B2B               	goto	i1l4496
 13578                           
 13579                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 13580     031F  0844               	movf	68,w	;volatile
 13581     0320  390F               	andlw	15
 13582     0321  0709               	addwf	9,w
 13583     0322  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13584     0323  0086               	movwf	6
 13585     0324  3001               	movlw	1	; select bank2/3
 13586     0325  0087               	movwf	7
 13587     0326  085B               	movf	USBStdFeatureReqHandler@p,w
 13588     0327  3FC0               	movwi [0]fsr1
 13589     0328  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13590     0329  3FC1               	movwi [1]fsr1
 13591                           
 13592                           ;usb/usb_device.c: 2823:         }
 13593     032A  2B35               	goto	i1l4498
 13594     032B                     i1l4496:
 13595                           
 13596                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 13597     032B  0844               	movf	68,w	;volatile
 13598     032C  390F               	andlw	15
 13599     032D  0709               	addwf	9,w
 13600     032E  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13601     032F  0086               	movwf	6
 13602     0330  0187               	clrf	7
 13603     0331  085B               	movf	USBStdFeatureReqHandler@p,w
 13604     0332  3FC0               	movwi [0]fsr1
 13605     0333  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13606     0334  3FC1               	movwi [1]fsr1
 13607     0335                     i1l4498:
 13608                           
 13609                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 13610     0335  3003               	movlw	3
 13611     0336  0641               	xorwf	65,w	;volatile
 13612     0337  1D03               	btfss	3,2
 13613     0338  2B57               	goto	i1l4512
 13614                           
 13615                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 13616     0339  085B               	movf	USBStdFeatureReqHandler@p,w
 13617     033A  0086               	movwf	6
 13618     033B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13619     033C  0087               	movwf	7
 13620     033D  1F81               	btfss	1,7
 13621     033E  2B4C               	goto	i1l4508
 13622                           
 13623                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 13624     033F  1BC4               	btfsc	68,7	;volatile
 13625     0340  2B45               	goto	i1l4506
 13626                           
 13627                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 13628     0341  0844               	movf	68,w	;volatile
 13629     0342  390F               	andlw	15
 13630     0343  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13631     0344  2B48               	goto	L12
 13632     0345                     i1l4506:	
 13633                           ;usb/usb_device.c: 2839:                 }
 13634                           
 13635                           
 13636                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 13637     0345  0844               	movf	68,w	;volatile
 13638     0346  390F               	andlw	15
 13639     0347  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13640     0348                     L12:
 13641     0348  0086               	movwf	6
 13642     0349  3001               	movlw	1	; select bank2/3
 13643     034A  0087               	movwf	7
 13644     034B  1481               	bsf	1,1
 13645     034C                     i1l4508:
 13646                           
 13647                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 13648     034C  085B               	movf	USBStdFeatureReqHandler@p,w
 13649     034D  0086               	movwf	6
 13650     034E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13651     034F  0087               	movwf	7
 13652     0350  1501               	bsf	1,2
 13653                           
 13654                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 13655     0351  085B               	movf	USBStdFeatureReqHandler@p,w
 13656     0352  0086               	movwf	6
 13657     0353  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13658     0354  0087               	movwf	7
 13659     0355  1781               	bsf	1,7
 13660                           
 13661                           ;usb/usb_device.c: 2849:         }
 13662     0356  0008               	return
 13663     0357                     i1l4512:
 13664                           
 13665                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 13666     0357  3004               	movlw	4
 13667     0358  065B               	xorwf	USBStdFeatureReqHandler@p,w
 13668     0359  00DB               	movwf	USBStdFeatureReqHandler@p
 13669     035A  3000               	movlw	0
 13670     035B  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 13671     035C  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13672                           
 13673                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 13674     035D  085B               	movf	USBStdFeatureReqHandler@p,w
 13675     035E  0086               	movwf	6
 13676     035F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13677     0360  0087               	movwf	7
 13678     0361  1F81               	btfss	1,7
 13679     0362  2B80               	goto	i1l4522
 13680                           
 13681                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 13682     0363  307F               	movlw	127
 13683     0364  00D6               	movwf	??_USBStdFeatureReqHandler
 13684     0365  085B               	movf	USBStdFeatureReqHandler@p,w
 13685     0366  0086               	movwf	6
 13686     0367  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13687     0368  0087               	movwf	7
 13688     0369  0856               	movf	??_USBStdFeatureReqHandler,w
 13689     036A  0581               	andwf	1,f
 13690                           
 13691                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 13692     036B  085B               	movf	USBStdFeatureReqHandler@p,w
 13693     036C  0086               	movwf	6
 13694     036D  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13695     036E  0087               	movwf	7
 13696     036F  1701               	bsf	1,6
 13697                           
 13698                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 13699     0370  3005               	movlw	5
 13700     0371  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13701     0372  3000               	movlw	0
 13702     0373  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13703     0374  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13704     0375  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13705     0376  085B               	movf	USBStdFeatureReqHandler@p,w
 13706     0377  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13707     0378  3002               	movlw	2
 13708     0379  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13709     037A  3000               	movlw	0
 13710     037B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13711     037C  3191  2153  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13712                           
 13713                           ;usb/usb_device.c: 2864:                 }
 13714     037F  2B85               	goto	i1l4524
 13715     0380                     i1l4522:
 13716                           
 13717                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 13718     0380  085B               	movf	USBStdFeatureReqHandler@p,w
 13719     0381  0086               	movwf	6
 13720     0382  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13721     0383  0087               	movwf	7
 13722     0384  1701               	bsf	1,6
 13723     0385                     i1l4524:
 13724                           
 13725                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 13726     0385  3004               	movlw	4
 13727     0386  0020               	movlb	0	; select bank0
 13728     0387  065B               	xorwf	USBStdFeatureReqHandler@p,w
 13729     0388  00DB               	movwf	USBStdFeatureReqHandler@p
 13730     0389  3000               	movlw	0
 13731     038A  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 13732     038B  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13733                           
 13734                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 13735     038C  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 13736     038D  2B94               	goto	i1l728
 13737     038E  085B               	movf	USBStdFeatureReqHandler@p,w
 13738     038F  0086               	movwf	6
 13739     0390  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13740     0391  0087               	movwf	7
 13741     0392  1F81               	btfss	1,7
 13742     0393  2BB9               	goto	i1l4536
 13743     0394                     i1l728:
 13744                           
 13745                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 13746     0394  1BC4               	btfsc	68,7	;volatile
 13747     0395  2B9A               	goto	i1l4532
 13748                           
 13749                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 13750     0396  0844               	movf	68,w	;volatile
 13751     0397  390F               	andlw	15
 13752     0398  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13753     0399  2B9D               	goto	L13
 13754     039A                     i1l4532:	
 13755                           ;usb/usb_device.c: 2884:                     }
 13756                           
 13757                           
 13758                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 13759     039A  0844               	movf	68,w	;volatile
 13760     039B  390F               	andlw	15
 13761     039C  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13762     039D                     L13:
 13763     039D  0086               	movwf	6
 13764     039E  3001               	movlw	1	; select bank2/3
 13765     039F  0087               	movwf	7
 13766     03A0  1081               	bcf	1,1
 13767                           
 13768                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 13769                           
 13770                           ;usb/usb_device.c: 2888:                     }
 13771     03A1  303B               	movlw	59
 13772     03A2  00D6               	movwf	??_USBStdFeatureReqHandler
 13773     03A3  085B               	movf	USBStdFeatureReqHandler@p,w
 13774     03A4  0086               	movwf	6
 13775     03A5  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13776     03A6  0087               	movwf	7
 13777     03A7  0856               	movf	??_USBStdFeatureReqHandler,w
 13778     03A8  0581               	andwf	1,f
 13779                           
 13780                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 13781     03A9  3005               	movlw	5
 13782     03AA  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13783     03AB  3000               	movlw	0
 13784     03AC  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13785     03AD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13786     03AE  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13787     03AF  085B               	movf	USBStdFeatureReqHandler@p,w
 13788     03B0  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13789     03B1  3002               	movlw	2
 13790     03B2  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13791     03B3  3000               	movlw	0
 13792     03B4  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13793     03B5  3191  2153  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13794                           
 13795                           ;usb/usb_device.c: 2894:                 }
 13796     03B8  2BC1               	goto	i1l4538
 13797     03B9                     i1l4536:
 13798                           
 13799                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 13800     03B9  303B               	movlw	59
 13801     03BA  00D6               	movwf	??_USBStdFeatureReqHandler
 13802     03BB  085B               	movf	USBStdFeatureReqHandler@p,w
 13803     03BC  0086               	movwf	6
 13804     03BD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13805     03BE  0087               	movwf	7
 13806     03BF  0856               	movf	??_USBStdFeatureReqHandler,w
 13807     03C0  0581               	andwf	1,f
 13808     03C1                     i1l4538:
 13809                           
 13810                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 13811     03C1  0020               	movlb	0	; select bank0
 13812     03C2  0844               	movf	68,w	;volatile
 13813     03C3  390F               	andlw	15
 13814     03C4  3E98               	addlw	152
 13815     03C5  00D6               	movwf	??_USBStdFeatureReqHandler
 13816     03C6  01D7               	clrf	??_USBStdFeatureReqHandler+1
 13817     03C7  300E               	movlw	14
 13818     03C8  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 13819     03C9  0856               	movf	??_USBStdFeatureReqHandler,w
 13820     03CA  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 13821     03CB  0857               	movf	??_USBStdFeatureReqHandler+1,w
 13822     03CC  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 13823                           
 13824                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 13825     03CD  30FE               	movlw	254
 13826     03CE  00D6               	movwf	??_USBStdFeatureReqHandler
 13827     03CF  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 13828     03D0  0086               	movwf	6
 13829     03D1  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 13830     03D2  0087               	movwf	7
 13831     03D3  0856               	movf	??_USBStdFeatureReqHandler,w
 13832     03D4  0581               	andwf	1,f
 13833     03D5  0008               	return
 13834     03D6                     __end_of_USBStdFeatureReqHandler:
 13835                           
 13836                           	psect	text69
 13837     1153                     __ptext69:	
 13838 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 13839 ;; Defined at:
 13840 ;;		line 66 in file "usb/usb_events.c"
 13841 ;; Parameters:    Size  Location     Type
 13842 ;;  event           2    0[BANK0 ] enum E238
 13843 ;;  pdata           2    2[BANK0 ] PTR void 
 13844 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 13845 ;;		 -> BDT(32), 
 13846 ;;  size            2    4[BANK0 ] unsigned short 
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;		None
 13849 ;; Return value:  Size  Location     Type
 13850 ;;                  1    wreg      _Bool 
 13851 ;; Registers used:
 13852 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13853 ;; Tracked objects:
 13854 ;;		On entry : 1F/0
 13855 ;;		On exit  : 0/0
 13856 ;;		Unchanged: 0/0
 13857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13858 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;Total ram usage:        6 bytes
 13863 ;; Hardware stack levels used: 1
 13864 ;; Hardware stack levels required when called: 3
 13865 ;; This function calls:
 13866 ;;		_APP_KeyboardInit
 13867 ;;		_USBCheckHIDRequest
 13868 ;; This function is called by:
 13869 ;;		_USBDeviceTasks
 13870 ;;		_USBStdSetCfgHandler
 13871 ;;		_USBSuspend
 13872 ;;		_USBWakeFromSuspend
 13873 ;;		_USBCtrlTrfSetupHandler
 13874 ;;		_USBCheckStdRequest
 13875 ;;		_USBStdFeatureReqHandler
 13876 ;; This function uses a non-reentrant model
 13877 ;;
 13878                           
 13879     1153                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 13880                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 13881                           
 13882                           
 13883                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 13884                           
 13885                           ;incstack = 0
 13886                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13887     1153  2968               	goto	i1l4198
 13888     1154                     i1l4186:
 13889                           
 13890                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 13891     1154  0A65               	incf	_SOFCounter,w	;volatile
 13892     1155  307F               	movlw	127
 13893     1156  1903               	skipnz
 13894     1157  0666               	xorwf	_SOFCounter+1,w	;volatile
 13895     1158  1903               	btfsc	3,2
 13896     1159  295F               	goto	i1l4190
 13897                           
 13898                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 13899     115A  3001               	movlw	1
 13900     115B  07E5               	addwf	_SOFCounter,f	;volatile
 13901     115C  3000               	movlw	0
 13902     115D  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 13903                           
 13904                           ;usb/usb_events.c: 80:             }
 13905     115E  0008               	return
 13906     115F                     i1l4190:
 13907                           
 13908                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 13909     115F  01E5               	clrf	_SOFCounter	;volatile
 13910     1160  01E6               	clrf	_SOFCounter+1	;volatile
 13911     1161  0008               	return
 13912     1162                     i1l4192:
 13913                           
 13914                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 13915     1162  3193  236C         	fcall	_APP_KeyboardInit
 13916                           
 13917                           ;usb/usb_events.c: 115:             break;
 13918     1164  0008               	return
 13919     1165                     i1l4194:
 13920                           
 13921                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 13922     1165  318A  222B         	fcall	_USBCheckHIDRequest
 13923                           
 13924                           ;usb/usb_events.c: 124:             break;
 13925     1167  0008               	return
 13926     1168                     i1l4198:
 13927                           
 13928                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 13929                           ; Switch size 1, requested type "simple"
 13930                           ; Number of cases is 2, Range of values is 0 to 127
 13931                           ; switch strategies available:
 13932                           ; Name         Instructions Cycles
 13933                           ; simple_byte            7     4 (average)
 13934                           ; direct_byte          262     6 (fixed)
 13935                           ; jumptable            260     6 (fixed)
 13936                           ;	Chosen strategy is simple_byte
 13937     1168  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 13938     1169  3A00               	xorlw	0	; case 0
 13939     116A  1903               	skipnz
 13940     116B  2970               	goto	i1l6828
 13941     116C  3A7F               	xorlw	127	; case 127
 13942     116D  1903               	skipnz
 13943     116E  298A               	goto	i1l6830
 13944     116F  298F               	goto	i1l818
 13945     1170                     i1l6828:
 13946                           
 13947                           ; Switch size 1, requested type "simple"
 13948                           ; Number of cases is 8, Range of values is 1 to 117
 13949                           ; switch strategies available:
 13950                           ; Name         Instructions Cycles
 13951                           ; simple_byte           25    13 (average)
 13952                           ; direct_byte          243     9 (fixed)
 13953                           ; jumptable            263     9 (fixed)
 13954                           ;	Chosen strategy is simple_byte
 13955     1170  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 13956     1171  3A01               	xorlw	1	; case 1
 13957     1172  1903               	skipnz
 13958     1173  2962               	goto	i1l4192
 13959     1174  3A03               	xorlw	3	; case 2
 13960     1175  1903               	skipnz
 13961     1176  298F               	goto	i1l818
 13962     1177  3A01               	xorlw	1	; case 3
 13963     1178  1903               	skipnz
 13964     1179  2965               	goto	i1l4194
 13965     117A  3A06               	xorlw	6	; case 5
 13966     117B  1903               	skipnz
 13967     117C  298F               	goto	i1l818
 13968     117D  3A77               	xorlw	119	; case 114
 13969     117E  1903               	skipnz
 13970     117F  298F               	goto	i1l818
 13971     1180  3A01               	xorlw	1	; case 115
 13972     1181  1903               	skipnz
 13973     1182  2954               	goto	i1l4186
 13974     1183  3A07               	xorlw	7	; case 116
 13975     1184  1903               	skipnz
 13976     1185  298F               	goto	i1l818
 13977     1186  3A01               	xorlw	1	; case 117
 13978     1187  1903               	skipnz
 13979     1188  298F               	goto	i1l818
 13980     1189  298F               	goto	i1l818
 13981     118A                     i1l6830:
 13982                           
 13983                           ; Switch size 1, requested type "simple"
 13984                           ; Number of cases is 1, Range of values is 255 to 255
 13985                           ; switch strategies available:
 13986                           ; Name         Instructions Cycles
 13987                           ; simple_byte            4     3 (average)
 13988                           ; direct_byte            7     5 (fixed)
 13989                           ; jumptable            263     9 (fixed)
 13990                           ;	Chosen strategy is simple_byte
 13991     118A  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 13992     118B  3AFF               	xorlw	255	; case 255
 13993     118C  1903               	skipnz
 13994     118D  298F               	goto	i1l818
 13995     118E  298F               	goto	i1l818
 13996     118F                     i1l818:
 13997     118F  0008               	return
 13998     1190                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 13999                           
 14000                           	psect	text70
 14001     0A2B                     __ptext70:	
 14002 ;; *************** function _USBCheckHIDRequest *****************
 14003 ;; Defined at:
 14004 ;;		line 161 in file "usb/usb_device_hid.c"
 14005 ;; Parameters:    Size  Location     Type
 14006 ;;		None
 14007 ;; Auto vars:     Size  Location     Type
 14008 ;;		None
 14009 ;; Return value:  Size  Location     Type
 14010 ;;                  1    wreg      void 
 14011 ;; Registers used:
 14012 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14013 ;; Tracked objects:
 14014 ;;		On entry : 1F/0
 14015 ;;		On exit  : 1C/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;Total ram usage:        0 bytes
 14023 ;; Hardware stack levels used: 1
 14024 ;; Hardware stack levels required when called: 1
 14025 ;; This function calls:
 14026 ;;		_USBHIDCBSetIdleRateHandler
 14027 ;;		_USBHIDCBSetReportHandler
 14028 ;; This function is called by:
 14029 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14030 ;; This function uses a non-reentrant model
 14031 ;;
 14032                           
 14033     0A2B                     _USBCheckHIDRequest:	
 14034                           ;psect for function _USBCheckHIDRequest
 14035                           
 14036                           
 14037                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 14038                           
 14039                           ;incstack = 0
 14040                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14041     0A2B  0840               	movf	64,w	;volatile
 14042     0A2C  391F               	andlw	31
 14043     0A2D  3A01               	xorlw	1
 14044     0A2E  1D03               	btfss	3,2
 14045     0A2F  0008               	return
 14046                           
 14047                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 14048     0A30  0844               	movf	68,w	;volatile
 14049     0A31  1D03               	btfss	3,2
 14050     0A32  0008               	return
 14051                           
 14052                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 14053     0A33  3006               	movlw	6
 14054     0A34  0641               	xorwf	65,w	;volatile
 14055     0A35  1903               	btfsc	3,2
 14056     0A36  2A50               	goto	i1l4126
 14057     0A37  2A5B               	goto	i1l4128
 14058     0A38                     i1l4114:
 14059                           
 14060                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 14061     0A38  036F               	decf	_USBActiveConfiguration,w	;volatile
 14062     0A39  1D03               	btfss	3,2
 14063     0A3A  2A5B               	goto	i1l4128
 14064                           
 14065                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14066     0A3B  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 14067     0A3C  0021               	movlb	1	; select bank1
 14068     0A3D  00EB               	movwf	_inPipes^(0+128)	;volatile
 14069     0A3E  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 14070     0A3F  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14071     0A40  3000               	movlw	0
 14072     0A41  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14073     0A42  3009               	movlw	9
 14074     0A43  2A4C               	goto	L15
 14075     0A44                     i1l4120:
 14076                           
 14077                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14078     0A44  3000               	movlw	low (_hid_rpt01| (0+32768))
 14079     0A45  0021               	movlb	1	; select bank1
 14080     0A46  00EB               	movwf	_inPipes^(0+128)	;volatile
 14081     0A47  3098               	movlw	high (_hid_rpt01| (0+32768))
 14082     0A48  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14083     0A49  3000               	movlw	0
 14084     0A4A  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14085     0A4B  303F               	movlw	63
 14086     0A4C                     L15:
 14087     0A4C  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14088     0A4D  30C0               	movlw	192
 14089     0A4E  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14090                           
 14091                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 14092     0A4F  2A5B               	goto	i1l4128
 14093     0A50                     i1l4126:
 14094     0A50  0843               	movf	67,w	;volatile
 14095                           
 14096                           ; Switch size 1, requested type "simple"
 14097                           ; Number of cases is 3, Range of values is 33 to 35
 14098                           ; switch strategies available:
 14099                           ; Name         Instructions Cycles
 14100                           ; simple_byte           10     6 (average)
 14101                           ; direct_byte           15     9 (fixed)
 14102                           ; jumptable            263     9 (fixed)
 14103                           ;	Chosen strategy is simple_byte
 14104     0A51  3A21               	xorlw	33	; case 33
 14105     0A52  1903               	skipnz
 14106     0A53  2A38               	goto	i1l4114
 14107     0A54  3A03               	xorlw	3	; case 34
 14108     0A55  1903               	skipnz
 14109     0A56  2A44               	goto	i1l4120
 14110     0A57  3A01               	xorlw	1	; case 35
 14111     0A58  1903               	skipnz
 14112     0A59  2A5B               	goto	i1l4128
 14113     0A5A  2A5B               	goto	i1l4128
 14114     0A5B                     i1l4128:
 14115                           
 14116                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 14117     0A5B  0020               	movlb	0	; select bank0
 14118     0A5C  0E40               	swapf	64,w	;volatile
 14119     0A5D  0C89               	rrf	9,f
 14120     0A5E  3903               	andlw	3
 14121     0A5F  3A01               	xorlw	1
 14122     0A60  1D03               	btfss	3,2
 14123     0A61  0008               	return
 14124     0A62  2A94               	goto	i1l4154
 14125     0A63                     i1l4132:
 14126                           
 14127                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 14128     0A63  319C  24A5         	fcall	_USBHIDCBSetReportHandler
 14129                           
 14130                           ;usb/usb_device_hid.c: 225:             break;
 14131     0A65  0008               	return
 14132     0A66                     i1l4134:
 14133                           
 14134                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 14135     0A66  304A               	movlw	low _idle_rate
 14136     0A67  0021               	movlb	1	; select bank1
 14137     0A68  00EB               	movwf	_inPipes^(0+128)	;volatile
 14138     0A69  3001               	movlw	high _idle_rate
 14139     0A6A  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14140     0A6B  3000               	movlw	0
 14141     0A6C  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14142     0A6D  3001               	movlw	1
 14143     0A6E  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14144     0A6F  30C1               	movlw	193
 14145     0A70  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14146                           
 14147                           ;usb/usb_device_hid.c: 231:             break;
 14148     0A71  0008               	return
 14149     0A72                     i1l4140:
 14150                           
 14151                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 14152     0A72  3080               	movlw	128
 14153     0A73  0021               	movlb	1	; select bank1
 14154     0A74  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14155                           
 14156                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 14157     0A75  0020               	movlb	0	; select bank0
 14158     0A76  0843               	movf	67,w	;volatile
 14159     0A77  0022               	movlb	2	; select bank2
 14160     0A78  00CA               	movwf	_idle_rate^(0+256)
 14161                           
 14162                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 14163     0A79  084A               	movf	_idle_rate^(0+256),w
 14164     0A7A  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 14165     0A7B  0020               	movlb	0	; select bank0
 14166     0A7C  0842               	movf	66,w	;volatile
 14167     0A7D  319C  2498         	fcall	_USBHIDCBSetIdleRateHandler
 14168                           
 14169                           ;usb/usb_device_hid.c: 236:             break;
 14170     0A7F  0008               	return
 14171     0A80                     i1l4144:
 14172                           
 14173                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 14174     0A80  30E4               	movlw	low _active_protocol
 14175     0A81  0021               	movlb	1	; select bank1
 14176     0A82  00EB               	movwf	_inPipes^(0+128)	;volatile
 14177     0A83  3001               	movlw	high _active_protocol
 14178     0A84  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14179     0A85  3000               	movlw	0
 14180     0A86  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14181     0A87  3001               	movlw	1
 14182     0A88  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14183     0A89  3081               	movlw	129
 14184     0A8A  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14185                           
 14186                           ;usb/usb_device_hid.c: 242:             break;
 14187     0A8B  0008               	return
 14188     0A8C                     i1l4150:
 14189                           
 14190                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 14191     0A8C  3080               	movlw	128
 14192     0A8D  0021               	movlb	1	; select bank1
 14193     0A8E  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14194                           
 14195                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 14196     0A8F  0020               	movlb	0	; select bank0
 14197     0A90  0842               	movf	66,w	;volatile
 14198     0A91  0023               	movlb	3	; select bank3
 14199     0A92  00E4               	movwf	_active_protocol^(0+384)
 14200                           
 14201                           ;usb/usb_device_hid.c: 246:             break;
 14202     0A93  0008               	return
 14203     0A94                     i1l4154:
 14204     0A94  0841               	movf	65,w	;volatile
 14205                           
 14206                           ; Switch size 1, requested type "simple"
 14207                           ; Number of cases is 6, Range of values is 1 to 11
 14208                           ; switch strategies available:
 14209                           ; Name         Instructions Cycles
 14210                           ; simple_byte           19    10 (average)
 14211                           ; direct_byte           31     9 (fixed)
 14212                           ; jumptable            263     9 (fixed)
 14213                           ;	Chosen strategy is simple_byte
 14214     0A95  3A01               	xorlw	1	; case 1
 14215     0A96  1903               	skipnz
 14216     0A97  2AA8               	goto	i1l764
 14217     0A98  3A03               	xorlw	3	; case 2
 14218     0A99  1903               	skipnz
 14219     0A9A  2A66               	goto	i1l4134
 14220     0A9B  3A01               	xorlw	1	; case 3
 14221     0A9C  1903               	skipnz
 14222     0A9D  2A80               	goto	i1l4144
 14223     0A9E  3A0A               	xorlw	10	; case 9
 14224     0A9F  1903               	skipnz
 14225     0AA0  2A63               	goto	i1l4132
 14226     0AA1  3A03               	xorlw	3	; case 10
 14227     0AA2  1903               	skipnz
 14228     0AA3  2A72               	goto	i1l4140
 14229     0AA4  3A01               	xorlw	1	; case 11
 14230     0AA5  1903               	skipnz
 14231     0AA6  2A8C               	goto	i1l4150
 14232     0AA7  2AA8               	goto	i1l764
 14233     0AA8                     i1l764:
 14234     0AA8  0008               	return
 14235     0AA9                     __end_of_USBCheckHIDRequest:
 14236                           
 14237                           	psect	text71
 14238     1CA5                     __ptext71:	
 14239 ;; *************** function _USBHIDCBSetReportHandler *****************
 14240 ;; Defined at:
 14241 ;;		line 505 in file "app_device_keyboard.c"
 14242 ;; Parameters:    Size  Location     Type
 14243 ;;		None
 14244 ;; Auto vars:     Size  Location     Type
 14245 ;;		None
 14246 ;; Return value:  Size  Location     Type
 14247 ;;                  1    wreg      void 
 14248 ;; Registers used:
 14249 ;;		wreg
 14250 ;; Tracked objects:
 14251 ;;		On entry : 1F/0
 14252 ;;		On exit  : 1F/2
 14253 ;;		Unchanged: 0/0
 14254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;Total ram usage:        0 bytes
 14260 ;; Hardware stack levels used: 1
 14261 ;; This function calls:
 14262 ;;		Nothing
 14263 ;; This function is called by:
 14264 ;;		_USBCheckHIDRequest
 14265 ;; This function uses a non-reentrant model
 14266 ;;
 14267                           
 14268     1CA5                     _USBHIDCBSetReportHandler:	
 14269                           ;psect for function _USBHIDCBSetReportHandler
 14270                           
 14271                           
 14272                           ;app_device_keyboard.c: 509:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 14273                           
 14274                           ;incstack = 0
 14275                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 14276     1CA5  3048               	movlw	72
 14277     1CA6  0022               	movlb	2	; select bank2
 14278     1CA7  00A1               	movwf	_outPipes^(0+256)	;volatile
 14279     1CA8  3000               	movlw	0
 14280     1CA9  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 14281     1CAA  3008               	movlw	8
 14282     1CAB  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 14283     1CAC  301B               	movlw	high _USBHIDCBSetReportComplete
 14284     1CAD  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 14285     1CAE  30EE               	movlw	low _USBHIDCBSetReportComplete
 14286     1CAF  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 14287     1CB0  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 14288     1CB1  0008               	return
 14289     1CB2                     __end_of_USBHIDCBSetReportHandler:
 14290                           
 14291                           	psect	text72
 14292     1C98                     __ptext72:	
 14293 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 14294 ;; Defined at:
 14295 ;;		line 516 in file "app_device_keyboard.c"
 14296 ;; Parameters:    Size  Location     Type
 14297 ;;  reportID        1    wreg     unsigned char 
 14298 ;;  newIdleRate     1    0[COMMON] unsigned char 
 14299 ;; Auto vars:     Size  Location     Type
 14300 ;;  reportID        1    3[COMMON] unsigned char 
 14301 ;; Return value:  Size  Location     Type
 14302 ;;                  1    wreg      void 
 14303 ;; Registers used:
 14304 ;;		wreg, status,2, status,0
 14305 ;; Tracked objects:
 14306 ;;		On entry : 1F/0
 14307 ;;		On exit  : 1C/0
 14308 ;;		Unchanged: 0/0
 14309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14310 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;Total ram usage:        4 bytes
 14315 ;; Hardware stack levels used: 1
 14316 ;; This function calls:
 14317 ;;		Nothing
 14318 ;; This function is called by:
 14319 ;;		_USBCheckHIDRequest
 14320 ;; This function uses a non-reentrant model
 14321 ;;
 14322                           
 14323     1C98                     _USBHIDCBSetIdleRateHandler:	
 14324                           ;psect for function _USBHIDCBSetIdleRateHandler
 14325                           
 14326                           
 14327                           ;incstack = 0
 14328                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 14329                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 14330     1C98  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 14331                           
 14332                           ;app_device_keyboard.c: 520:     if (reportID == 0) {
 14333     1C99  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 14334     1C9A  1D03               	btfss	3,2
 14335     1C9B  0008               	return
 14336                           
 14337                           ;app_device_keyboard.c: 521:         keyboardIdleRate = newIdleRate;
 14338     1C9C  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 14339     1C9D  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 14340     1C9E  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 14341     1C9F  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 14342     1CA0  0023               	movlb	3	; select bank3
 14343     1CA1  00CF               	movwf	_keyboardIdleRate^(0+384)
 14344     1CA2  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 14345     1CA3  00D0               	movwf	(_keyboardIdleRate+1)^(0+384)
 14346     1CA4  0008               	return
 14347     1CA5                     __end_of_USBHIDCBSetIdleRateHandler:
 14348                           
 14349                           	psect	text73
 14350     136C                     __ptext73:	
 14351 ;; *************** function _APP_KeyboardInit *****************
 14352 ;; Defined at:
 14353 ;;		line 295 in file "app_device_keyboard.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;		None
 14356 ;; Auto vars:     Size  Location     Type
 14357 ;;		None
 14358 ;; Return value:  Size  Location     Type
 14359 ;;                  1    wreg      void 
 14360 ;; Registers used:
 14361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14362 ;; Tracked objects:
 14363 ;;		On entry : 1F/0
 14364 ;;		On exit  : 0/0
 14365 ;;		Unchanged: 0/0
 14366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;Total ram usage:        0 bytes
 14372 ;; Hardware stack levels used: 1
 14373 ;; Hardware stack levels required when called: 2
 14374 ;; This function calls:
 14375 ;;		_USBEnableEndpoint
 14376 ;;		i1_GenericQueue_Init
 14377 ;;		i1_USBTransferOnePacket
 14378 ;; This function is called by:
 14379 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14380 ;; This function uses a non-reentrant model
 14381 ;;
 14382                           
 14383     136C                     _APP_KeyboardInit:	
 14384                           ;psect for function _APP_KeyboardInit
 14385                           
 14386                           
 14387                           ;app_device_keyboard.c: 296:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 14388                           
 14389                           ;incstack = 0
 14390                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14391     136C  3031               	movlw	49
 14392     136D  00F0               	movwf	i1GenericQueue_Init@q
 14393     136E  3023               	movlw	35
 14394     136F  00F1               	movwf	i1GenericQueue_Init@q+1
 14395     1370  3001               	movlw	1
 14396     1371  00F2               	movwf	i1GenericQueue_Init@element_size
 14397     1372  3000               	movlw	0
 14398     1373  00F3               	movwf	i1GenericQueue_Init@element_size+1
 14399     1374  319E  26B2  3193   	fcall	i1_GenericQueue_Init
 14400                           
 14401                           ;app_device_keyboard.c: 297:     keyboard.modifiers.value = 0;
 14402     1377  3090               	movlw	144
 14403     1378  0086               	movwf	6
 14404     1379  3023               	movlw	35
 14405     137A  0087               	movwf	7
 14406     137B  0181               	clrf	1
 14407                           
 14408                           ;app_device_keyboard.c: 300:     keyboard.lastINTransmission = 0;
 14409     137C  302D               	movlw	45
 14410     137D  0086               	movwf	6
 14411     137E  3023               	movlw	35
 14412     137F  0087               	movwf	7
 14413     1380  3000               	movlw	0
 14414     1381  3FC0               	movwi [0]fsr1
 14415     1382  3FC1               	movwi [1]fsr1
 14416                           
 14417                           ;app_device_keyboard.c: 303:     keyboardIdleRate = 250;
 14418     1383  30FA               	movlw	250
 14419     1384  0023               	movlb	3	; select bank3
 14420     1385  00CF               	movwf	_keyboardIdleRate^(0+384)
 14421     1386  3000               	movlw	0
 14422     1387  00D0               	movwf	(_keyboardIdleRate^(0+384)+1)
 14423     1388                     i1l910:	
 14424                           ;app_device_keyboard.c: 310:     }
 14425                           
 14426                           ;app_device_keyboard.c: 308:     while (OldSOFCount != SOFCounter) {
 14427                           
 14428                           
 14429                           ;app_device_keyboard.c: 308:     while (OldSOFCount != SOFCounter) {
 14430     1388  0020               	movlb	0	; select bank0
 14431     1389  0866               	movf	_SOFCounter+1,w	;volatile
 14432     138A  0023               	movlb	3	; select bank3
 14433     138B  064E               	xorwf	(_OldSOFCount+1)^(0+384),w
 14434     138C  1D03               	skipz
 14435     138D  2B92               	goto	u311_25
 14436     138E  0020               	movlb	0	; select bank0
 14437     138F  0865               	movf	_SOFCounter,w	;volatile
 14438     1390  0023               	movlb	3	; select bank3
 14439     1391  064D               	xorwf	_OldSOFCount^(0+384),w
 14440     1392                     u311_25:
 14441     1392  1903               	btfsc	3,2
 14442     1393  2B9D               	goto	i1l4166
 14443                           
 14444                           ;app_device_keyboard.c: 309:         OldSOFCount = SOFCounter;
 14445     1394  0020               	movlb	0	; select bank0
 14446     1395  0866               	movf	_SOFCounter+1,w	;volatile
 14447     1396  0023               	movlb	3	; select bank3
 14448     1397  00CE               	movwf	(_OldSOFCount+1)^(0+384)
 14449     1398  0020               	movlb	0	; select bank0
 14450     1399  0865               	movf	_SOFCounter,w	;volatile
 14451     139A  0023               	movlb	3	; select bank3
 14452     139B  00CD               	movwf	_OldSOFCount^(0+384)
 14453     139C  2B88               	goto	i1l910
 14454     139D                     i1l4166:
 14455                           
 14456                           ;app_device_keyboard.c: 313:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 14457     139D  301E               	movlw	30
 14458     139E  00F7               	movwf	USBEnableEndpoint@options
 14459     139F  3001               	movlw	1
 14460     13A0  319E  2692  3193   	fcall	_USBEnableEndpoint
 14461                           
 14462                           ;app_device_keyboard.c: 316:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 14463     13A3  01F0               	clrf	i1USBTransferOnePacket@dir
 14464     13A4  3020               	movlw	32
 14465     13A5  00F1               	movwf	i1USBTransferOnePacket@data
 14466     13A6  3001               	movlw	1
 14467     13A7  00F2               	movwf	i1USBTransferOnePacket@data+1
 14468     13A8  01F3               	clrf	i1USBTransferOnePacket@len
 14469     13A9  0AF3               	incf	i1USBTransferOnePacket@len,f
 14470     13AA  3001               	movlw	1
 14471     13AB  318A  22A9         	fcall	i1_USBTransferOnePacket
 14472     13AD  302D               	movlw	45
 14473     13AE  0086               	movwf	6
 14474     13AF  3023               	movlw	35
 14475     13B0  0087               	movwf	7
 14476     13B1  3142               	addfsr 1,2
 14477     13B2  0870               	movf	?i1_USBTransferOnePacket,w
 14478     13B3  3FC0               	movwi [0]fsr1
 14479     13B4  0871               	movf	?i1_USBTransferOnePacket+1,w
 14480     13B5  3FC1               	movwi [1]fsr1
 14481     13B6  0008               	return
 14482     13B7                     __end_of_APP_KeyboardInit:
 14483                           
 14484                           	psect	text74
 14485     0AA9                     __ptext74:	
 14486 ;; *************** function i1_USBTransferOnePacket *****************
 14487 ;; Defined at:
 14488 ;;		line 999 in file "usb/usb_device.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  ep              1    wreg     unsigned char 
 14491 ;;  dir             1    0[COMMON] unsigned char 
 14492 ;;  data            2    1[COMMON] PTR unsigned char 
 14493 ;;		 -> inputReport(8), outputReport(1), 
 14494 ;;  len             1    3[COMMON] unsigned char 
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  ep              1    8[COMMON] unsigned char 
 14497 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 14498 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 14499 ;; Return value:  Size  Location     Type
 14500 ;;                  2    0[COMMON] PTR void 
 14501 ;; Registers used:
 14502 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14503 ;; Tracked objects:
 14504 ;;		On entry : 0/3
 14505 ;;		On exit  : 0/0
 14506 ;;		Unchanged: 0/0
 14507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14508 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;Total ram usage:       11 bytes
 14513 ;; Hardware stack levels used: 1
 14514 ;; This function calls:
 14515 ;;		Nothing
 14516 ;; This function is called by:
 14517 ;;		_APP_KeyboardInit
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521     0AA9                     i1_USBTransferOnePacket:	
 14522                           ;psect for function i1_USBTransferOnePacket
 14523                           
 14524                           
 14525                           ;incstack = 0
 14526                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 14527                           ;i1USBTransferOnePacket@ep stored from wreg
 14528     0AA9  00F8               	movwf	i1USBTransferOnePacket@ep
 14529                           
 14530                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 14531     0AAA  0870               	movf	i1USBTransferOnePacket@dir,w
 14532     0AAB  1903               	btfsc	3,2
 14533     0AAC  2AB5               	goto	i1l4076
 14534                           
 14535                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 14536     0AAD  3578               	lslf	i1USBTransferOnePacket@ep,w
 14537     0AAE  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14538     0AAF  0086               	movwf	6
 14539     0AB0  0187               	clrf	7
 14540     0AB1  3F40               	moviw [0]fsr1
 14541     0AB2  00F9               	movwf	i1USBTransferOnePacket@handle
 14542     0AB3  3F41               	moviw [1]fsr1
 14543     0AB4  2ABD               	goto	L16
 14544     0AB5                     i1l4076:	
 14545                           ;usb/usb_device.c: 1008:     }
 14546                           
 14547                           
 14548                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 14549     0AB5  3578               	lslf	i1USBTransferOnePacket@ep,w
 14550     0AB6  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14551     0AB7  0086               	movwf	6
 14552     0AB8  3001               	movlw	1	; select bank2/3
 14553     0AB9  0087               	movwf	7
 14554     0ABA  3F40               	moviw [0]fsr1
 14555     0ABB  00F9               	movwf	i1USBTransferOnePacket@handle
 14556     0ABC  3F41               	moviw [1]fsr1
 14557     0ABD                     L16:
 14558     0ABD  00FA               	movwf	i1USBTransferOnePacket@handle+1
 14559                           
 14560                           ;usb/usb_device.c: 1017:     if(handle == 0)
 14561     0ABE  0879               	movf	i1USBTransferOnePacket@handle,w
 14562     0ABF  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 14563     0AC0  1D03               	btfss	3,2
 14564     0AC1  2AC5               	goto	i1l4084
 14565                           
 14566                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 14567     0AC2  01F0               	clrf	?i1_USBTransferOnePacket
 14568     0AC3  01F1               	clrf	?i1_USBTransferOnePacket+1
 14569     0AC4  0008               	return
 14570     0AC5                     i1l4084:
 14571                           
 14572                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 14573     0AC5  30FF               	movlw	255
 14574     0AC6  0571               	andwf	i1USBTransferOnePacket@data,w
 14575     0AC7  00F4               	movwf	??i1_USBTransferOnePacket
 14576     0AC8  307F               	movlw	127
 14577     0AC9  0572               	andwf	i1USBTransferOnePacket@data+1,w
 14578     0ACA  00F5               	movwf	??i1_USBTransferOnePacket+1
 14579     0ACB  0879               	movf	i1USBTransferOnePacket@handle,w
 14580     0ACC  0086               	movwf	6
 14581     0ACD  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14582     0ACE  0087               	movwf	7
 14583     0ACF  3142               	addfsr 1,2
 14584     0AD0  0874               	movf	??i1_USBTransferOnePacket,w
 14585     0AD1  3FC0               	movwi [0]fsr1
 14586     0AD2  0875               	movf	??i1_USBTransferOnePacket+1,w
 14587     0AD3  3FC1               	movwi [1]fsr1
 14588                           
 14589                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 14590     0AD4  0879               	movf	i1USBTransferOnePacket@handle,w
 14591     0AD5  3E01               	addlw	1
 14592     0AD6  00F4               	movwf	??i1_USBTransferOnePacket
 14593     0AD7  3000               	movlw	0
 14594     0AD8  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 14595     0AD9  00F5               	movwf	??i1_USBTransferOnePacket+1
 14596     0ADA  0874               	movf	??i1_USBTransferOnePacket,w
 14597     0ADB  0086               	movwf	6
 14598     0ADC  0875               	movf	??i1_USBTransferOnePacket+1,w
 14599     0ADD  0087               	movwf	7
 14600     0ADE  0873               	movf	i1USBTransferOnePacket@len,w
 14601     0ADF  0081               	movwf	1
 14602                           
 14603                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 14604     0AE0  3040               	movlw	64
 14605     0AE1  00F4               	movwf	??i1_USBTransferOnePacket
 14606     0AE2  0879               	movf	i1USBTransferOnePacket@handle,w
 14607     0AE3  0086               	movwf	6
 14608     0AE4  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14609     0AE5  0087               	movwf	7
 14610     0AE6  0874               	movf	??i1_USBTransferOnePacket,w
 14611     0AE7  0581               	andwf	1,f
 14612                           
 14613                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 14614     0AE8  0879               	movf	i1USBTransferOnePacket@handle,w
 14615     0AE9  0086               	movwf	6
 14616     0AEA  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14617     0AEB  0087               	movwf	7
 14618     0AEC  1581               	bsf	1,3
 14619                           
 14620                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 14621     0AED  0879               	movf	i1USBTransferOnePacket@handle,w
 14622     0AEE  0086               	movwf	6
 14623     0AEF  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14624     0AF0  0087               	movwf	7
 14625     0AF1  1781               	bsf	1,7
 14626                           
 14627                           ;usb/usb_device.c: 1040:     if(dir != 0)
 14628     0AF2  0870               	movf	i1USBTransferOnePacket@dir,w
 14629     0AF3  1903               	btfsc	3,2
 14630     0AF4  2B0C               	goto	i1l4094
 14631                           
 14632                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 14633     0AF5  3578               	lslf	i1USBTransferOnePacket@ep,w
 14634     0AF6  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14635     0AF7  0086               	movwf	6
 14636     0AF8  0187               	clrf	7
 14637     0AF9  3F40               	moviw [0]fsr1
 14638     0AFA  00F4               	movwf	??i1_USBTransferOnePacket
 14639     0AFB  3F41               	moviw [1]fsr1
 14640     0AFC  00F5               	movwf	??i1_USBTransferOnePacket+1
 14641     0AFD  3004               	movlw	4
 14642     0AFE  0674               	xorwf	??i1_USBTransferOnePacket,w
 14643     0AFF  00F6               	movwf	??i1_USBTransferOnePacket+2
 14644     0B00  3000               	movlw	0
 14645     0B01  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 14646     0B02  00F7               	movwf	??i1_USBTransferOnePacket+3
 14647     0B03  3578               	lslf	i1USBTransferOnePacket@ep,w
 14648     0B04  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14649     0B05  0086               	movwf	6
 14650     0B06  0187               	clrf	7
 14651     0B07  0876               	movf	??i1_USBTransferOnePacket+2,w
 14652     0B08  3FC0               	movwi [0]fsr1
 14653     0B09  0877               	movf	??i1_USBTransferOnePacket+3,w
 14654     0B0A  3FC1               	movwi [1]fsr1
 14655                           
 14656                           ;usb/usb_device.c: 1044:     }
 14657     0B0B  2B24               	goto	i1l4096
 14658     0B0C                     i1l4094:
 14659                           
 14660                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 14661     0B0C  3578               	lslf	i1USBTransferOnePacket@ep,w
 14662     0B0D  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14663     0B0E  0086               	movwf	6
 14664     0B0F  3001               	movlw	1	; select bank2/3
 14665     0B10  0087               	movwf	7
 14666     0B11  3F40               	moviw [0]fsr1
 14667     0B12  00F4               	movwf	??i1_USBTransferOnePacket
 14668     0B13  3F41               	moviw [1]fsr1
 14669     0B14  00F5               	movwf	??i1_USBTransferOnePacket+1
 14670     0B15  3004               	movlw	4
 14671     0B16  0674               	xorwf	??i1_USBTransferOnePacket,w
 14672     0B17  00F6               	movwf	??i1_USBTransferOnePacket+2
 14673     0B18  3000               	movlw	0
 14674     0B19  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 14675     0B1A  00F7               	movwf	??i1_USBTransferOnePacket+3
 14676     0B1B  3578               	lslf	i1USBTransferOnePacket@ep,w
 14677     0B1C  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14678     0B1D  0086               	movwf	6
 14679     0B1E  3001               	movlw	1	; select bank2/3
 14680     0B1F  0087               	movwf	7
 14681     0B20  0876               	movf	??i1_USBTransferOnePacket+2,w
 14682     0B21  3FC0               	movwi [0]fsr1
 14683     0B22  0877               	movf	??i1_USBTransferOnePacket+3,w
 14684     0B23  3FC1               	movwi [1]fsr1
 14685     0B24                     i1l4096:
 14686                           
 14687                           ;usb/usb_device.c: 1050:     return (void*)handle;
 14688     0B24  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14689     0B25  00F1               	movwf	?i1_USBTransferOnePacket+1
 14690     0B26  0879               	movf	i1USBTransferOnePacket@handle,w
 14691     0B27  00F0               	movwf	?i1_USBTransferOnePacket
 14692     0B28  0008               	return
 14693     0B29                     __end_ofi1_USBTransferOnePacket:
 14694                           
 14695                           	psect	text75
 14696     1EB2                     __ptext75:	
 14697 ;; *************** function i1_GenericQueue_Init *****************
 14698 ;; Defined at:
 14699 ;;		line 4 in file "generic_queue.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;  q               2    0[COMMON] PTR struct .
 14702 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 14703 ;;  element_size    2    2[COMMON] unsigned int 
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;		None
 14706 ;; Return value:  Size  Location     Type
 14707 ;;                  1    wreg      void 
 14708 ;; Registers used:
 14709 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14710 ;; Tracked objects:
 14711 ;;		On entry : 1F/0
 14712 ;;		On exit  : 1F/0
 14713 ;;		Unchanged: 1F/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14715 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;Total ram usage:        4 bytes
 14720 ;; Hardware stack levels used: 1
 14721 ;; This function calls:
 14722 ;;		Nothing
 14723 ;; This function is called by:
 14724 ;;		_APP_KeyboardInit
 14725 ;; This function uses a non-reentrant model
 14726 ;;
 14727                           
 14728     1EB2                     i1_GenericQueue_Init:	
 14729                           ;psect for function i1_GenericQueue_Init
 14730                           
 14731                           
 14732                           ;generic_queue.c: 5:     q->element_size = element_size;
 14733                           
 14734                           ;incstack = 0
 14735                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 14736     1EB2  0870               	movf	i1GenericQueue_Init@q,w
 14737     1EB3  3E5A               	addlw	90
 14738     1EB4  0086               	movwf	6
 14739     1EB5  3000               	movlw	0
 14740     1EB6  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14741     1EB7  0087               	movwf	7
 14742     1EB8  0872               	movf	i1GenericQueue_Init@element_size,w
 14743     1EB9  3FC0               	movwi [0]fsr1
 14744     1EBA  0873               	movf	i1GenericQueue_Init@element_size+1,w
 14745     1EBB  3FC1               	movwi [1]fsr1
 14746                           
 14747                           ;generic_queue.c: 6:     q->front = 0;
 14748     1EBC  0870               	movf	i1GenericQueue_Init@q,w
 14749     1EBD  3E5C               	addlw	92
 14750     1EBE  0086               	movwf	6
 14751     1EBF  3000               	movlw	0
 14752     1EC0  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14753     1EC1  0087               	movwf	7
 14754     1EC2  0181               	clrf	1
 14755                           
 14756                           ;generic_queue.c: 7:     q->rear = 0;
 14757     1EC3  0870               	movf	i1GenericQueue_Init@q,w
 14758     1EC4  3E5D               	addlw	93
 14759     1EC5  0086               	movwf	6
 14760     1EC6  3000               	movlw	0
 14761     1EC7  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14762     1EC8  0087               	movwf	7
 14763     1EC9  0181               	clrf	1
 14764                           
 14765                           ;generic_queue.c: 8:     q->size = 0;
 14766     1ECA  0870               	movf	i1GenericQueue_Init@q,w
 14767     1ECB  3E5E               	addlw	94
 14768     1ECC  0086               	movwf	6
 14769     1ECD  3000               	movlw	0
 14770     1ECE  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14771     1ECF  0087               	movwf	7
 14772     1ED0  0181               	clrf	1
 14773     1ED1  0008               	return
 14774     1ED2                     __end_ofi1_GenericQueue_Init:
 14775                           
 14776                           	psect	text76
 14777     1E92                     __ptext76:	
 14778 ;; *************** function _USBEnableEndpoint *****************
 14779 ;; Defined at:
 14780 ;;		line 882 in file "usb/usb_device.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  ep              1    wreg     unsigned char 
 14783 ;;  options         1    7[COMMON] unsigned char 
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;  ep              1   12[COMMON] unsigned char 
 14786 ;;  p               2   10[COMMON] PTR unsigned char 
 14787 ;;		 -> UEP0(1), 
 14788 ;; Return value:  Size  Location     Type
 14789 ;;                  1    wreg      void 
 14790 ;; Registers used:
 14791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 1F/3
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14797 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14798 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14799 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;Total ram usage:        6 bytes
 14802 ;; Hardware stack levels used: 1
 14803 ;; Hardware stack levels required when called: 1
 14804 ;; This function calls:
 14805 ;;		_USBConfigureEndpoint
 14806 ;; This function is called by:
 14807 ;;		_APP_KeyboardInit
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811     1E92                     _USBEnableEndpoint:	
 14812                           ;psect for function _USBEnableEndpoint
 14813                           
 14814                           
 14815                           ;incstack = 0
 14816                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14817                           ;USBEnableEndpoint@ep stored from wreg
 14818     1E92  00FC               	movwf	USBEnableEndpoint@ep
 14819                           
 14820                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 14821     1E93  1D77               	btfss	USBEnableEndpoint@options,2
 14822     1E94  2E9A               	goto	i1l4052
 14823                           
 14824                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 14825     1E95  01F0               	clrf	USBConfigureEndpoint@direction
 14826     1E96  087C               	movf	USBEnableEndpoint@ep,w
 14827     1E97  3191  2190  319E   	fcall	_USBConfigureEndpoint
 14828     1E9A                     i1l4052:
 14829                           
 14830                           ;usb/usb_device.c: 892:     if(options & 0x02)
 14831     1E9A  1CF7               	btfss	USBEnableEndpoint@options,1
 14832     1E9B  2EA1               	goto	i1l4056
 14833                           
 14834                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 14835     1E9C  01F0               	clrf	USBConfigureEndpoint@direction
 14836     1E9D  0AF0               	incf	USBConfigureEndpoint@direction,f
 14837     1E9E  087C               	movf	USBEnableEndpoint@ep,w
 14838     1E9F  3191  2190         	fcall	_USBConfigureEndpoint
 14839     1EA1                     i1l4056:
 14840                           
 14841                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 14842     1EA1  087C               	movf	USBEnableEndpoint@ep,w
 14843     1EA2  3E98               	addlw	152
 14844     1EA3  00F8               	movwf	??_USBEnableEndpoint
 14845     1EA4  01F9               	clrf	??_USBEnableEndpoint+1
 14846     1EA5  300E               	movlw	14
 14847     1EA6  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 14848     1EA7  0878               	movf	??_USBEnableEndpoint,w
 14849     1EA8  00FA               	movwf	USBEnableEndpoint@p
 14850     1EA9  0879               	movf	??_USBEnableEndpoint+1,w
 14851     1EAA  00FB               	movwf	USBEnableEndpoint@p+1
 14852                           
 14853                           ;usb/usb_device.c: 905:     *p = options;
 14854     1EAB  087A               	movf	USBEnableEndpoint@p,w
 14855     1EAC  0086               	movwf	6
 14856     1EAD  087B               	movf	USBEnableEndpoint@p+1,w
 14857     1EAE  0087               	movwf	7
 14858     1EAF  0877               	movf	USBEnableEndpoint@options,w
 14859     1EB0  0081               	movwf	1
 14860     1EB1  0008               	return
 14861     1EB2                     __end_of_USBEnableEndpoint:
 14862                           
 14863                           	psect	text77
 14864     1190                     __ptext77:	
 14865 ;; *************** function _USBConfigureEndpoint *****************
 14866 ;; Defined at:
 14867 ;;		line 1547 in file "usb/usb_device.c"
 14868 ;; Parameters:    Size  Location     Type
 14869 ;;  EPNum           1    wreg     unsigned char 
 14870 ;;  direction       1    0[COMMON] unsigned char 
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;  EPNum           1    5[COMMON] unsigned char 
 14873 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 14874 ;;		 -> BDT(32), 
 14875 ;; Return value:  Size  Location     Type
 14876 ;;                  1    wreg      void 
 14877 ;; Registers used:
 14878 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14879 ;; Tracked objects:
 14880 ;;		On entry : 0/3
 14881 ;;		On exit  : 0/0
 14882 ;;		Unchanged: 0/0
 14883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14884 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;Total ram usage:        7 bytes
 14889 ;; Hardware stack levels used: 1
 14890 ;; This function calls:
 14891 ;;		Nothing
 14892 ;; This function is called by:
 14893 ;;		_USBEnableEndpoint
 14894 ;; This function uses a non-reentrant model
 14895 ;;
 14896                           
 14897     1190                     _USBConfigureEndpoint:	
 14898                           ;psect for function _USBConfigureEndpoint
 14899                           
 14900                           
 14901                           ;incstack = 0
 14902                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 14903                           ;USBConfigureEndpoint@EPNum stored from wreg
 14904     1190  00F5               	movwf	USBConfigureEndpoint@EPNum
 14905                           
 14906                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 14907     1191  3020               	movlw	32
 14908     1192  00F6               	movwf	USBConfigureEndpoint@handle
 14909                           
 14910                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 14911     1193  0870               	movf	USBConfigureEndpoint@direction,w
 14912     1194  00F1               	movwf	??_USBConfigureEndpoint
 14913     1195  3001               	movlw	1
 14914     1196                     u296_25:
 14915     1196  35F1               	lslf	??_USBConfigureEndpoint,f
 14916     1197  0B89               	decfsz	9,f
 14917     1198  2996               	goto	u296_25
 14918     1199  0875               	movf	USBConfigureEndpoint@EPNum,w
 14919     119A  00F2               	movwf	??_USBConfigureEndpoint+1
 14920     119B  3001               	movlw	1
 14921     119C                     u297_25:
 14922     119C  35F2               	lslf	??_USBConfigureEndpoint+1,f
 14923     119D  3EFF               	addlw	-1
 14924     119E  1D03               	skipz
 14925     119F  299C               	goto	u297_25
 14926     11A0  3572               	lslf	??_USBConfigureEndpoint+1,w
 14927     11A1  0771               	addwf	??_USBConfigureEndpoint,w
 14928     11A2  00F3               	movwf	??_USBConfigureEndpoint+2
 14929     11A3  3001               	movlw	1
 14930     11A4                     u298_25:
 14931     11A4  35F3               	lslf	??_USBConfigureEndpoint+2,f
 14932     11A5  3EFF               	addlw	-1
 14933     11A6  1D03               	skipz
 14934     11A7  29A4               	goto	u298_25
 14935     11A8  3573               	lslf	??_USBConfigureEndpoint+2,w
 14936     11A9  00F4               	movwf	??_USBConfigureEndpoint+3
 14937     11AA  0874               	movf	??_USBConfigureEndpoint+3,w
 14938     11AB  07F6               	addwf	USBConfigureEndpoint@handle,f
 14939                           
 14940                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 14941     11AC  0876               	movf	USBConfigureEndpoint@handle,w
 14942     11AD  0086               	movwf	6
 14943     11AE  0187               	clrf	7
 14944     11AF  1381               	bcf	1,7
 14945                           
 14946                           ;usb/usb_device.c: 1561:     if(direction == 0)
 14947     11B0  0870               	movf	USBConfigureEndpoint@direction,w
 14948     11B1  1D03               	btfss	3,2
 14949     11B2  29BD               	goto	i1l4042
 14950                           
 14951                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 14952     11B3  3575               	lslf	USBConfigureEndpoint@EPNum,w
 14953     11B4  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14954     11B5  0086               	movwf	6
 14955     11B6  3001               	movlw	1	; select bank2/3
 14956     11B7  0087               	movwf	7
 14957     11B8  0876               	movf	USBConfigureEndpoint@handle,w
 14958     11B9  3FC0               	movwi [0]fsr1
 14959     11BA  3000               	movlw	0
 14960     11BB  3FC1               	movwi [1]fsr1
 14961                           
 14962                           ;usb/usb_device.c: 1564:     }
 14963     11BC  29C5               	goto	i1l4044
 14964     11BD                     i1l4042:
 14965                           
 14966                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 14967     11BD  3575               	lslf	USBConfigureEndpoint@EPNum,w
 14968     11BE  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14969     11BF  0086               	movwf	6
 14970     11C0  0187               	clrf	7
 14971     11C1  0876               	movf	USBConfigureEndpoint@handle,w
 14972     11C2  3FC0               	movwi [0]fsr1
 14973     11C3  3000               	movlw	0
 14974     11C4  3FC1               	movwi [1]fsr1
 14975     11C5                     i1l4044:
 14976                           
 14977                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 14978     11C5  0876               	movf	USBConfigureEndpoint@handle,w
 14979     11C6  0086               	movwf	6
 14980     11C7  0187               	clrf	7
 14981     11C8  1301               	bcf	1,6
 14982                           
 14983                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 14984     11C9  0876               	movf	USBConfigureEndpoint@handle,w
 14985     11CA  3E04               	addlw	4
 14986     11CB  0086               	movwf	6
 14987     11CC  0187               	clrf	7
 14988     11CD  1701               	bsf	1,6
 14989     11CE  0008               	return
 14990     11CF                     __end_of_USBConfigureEndpoint:
 14991                           
 14992                           	psect	text78
 14993     1119                     __ptext78:	
 14994 ;; *************** function _USBCtrlTrfOutHandler *****************
 14995 ;; Defined at:
 14996 ;;		line 2545 in file "usb/usb_device.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;		None
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;		None
 15001 ;; Return value:  Size  Location     Type
 15002 ;;                  1    wreg      void 
 15003 ;; Registers used:
 15004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15005 ;; Tracked objects:
 15006 ;;		On entry : 1F/0
 15007 ;;		On exit  : 1D/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;Total ram usage:        4 bytes
 15015 ;; Hardware stack levels used: 1
 15016 ;; Hardware stack levels required when called: 3
 15017 ;; This function calls:
 15018 ;;		_USBCtrlTrfRxService
 15019 ;; This function is called by:
 15020 ;;		_USBCtrlEPService
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024     1119                     _USBCtrlTrfOutHandler:	
 15025                           ;psect for function _USBCtrlTrfOutHandler
 15026                           
 15027                           
 15028                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 15029                           
 15030                           ;incstack = 0
 15031                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15032     1119  3002               	movlw	2
 15033     111A  0669               	xorwf	_controlTransferState,w	;volatile
 15034     111B  1D03               	btfss	3,2
 15035     111C  2920               	goto	i1l4946
 15036                           
 15037                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 15038     111D  318E  2693         	fcall	_USBCtrlTrfRxService
 15039                           
 15040                           ;usb/usb_device.c: 2550:     }
 15041     111F  0008               	return
 15042     1120                     i1l4946:
 15043                           
 15044                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 15045     1120  01E9               	clrf	_controlTransferState	;volatile
 15046                           
 15047                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 15048     1121  0022               	movlb	2	; select bank2
 15049     1122  0842               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 15050     1123  1D03               	btfss	3,2
 15051     1124  2951               	goto	i1l4958
 15052                           
 15053                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 15054     1125  0020               	movlb	0	; select bank0
 15055     1126  0867               	movf	_pBDTEntryEP0OutNext,w
 15056     1127  3E01               	addlw	1
 15057     1128  00FA               	movwf	??_USBCtrlTrfOutHandler
 15058     1129  3000               	movlw	0
 15059     112A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15060     112B  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15061     112C  087A               	movf	??_USBCtrlTrfOutHandler,w
 15062     112D  0086               	movwf	6
 15063     112E  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 15064     112F  0087               	movwf	7
 15065     1130  3008               	movlw	8
 15066     1131  0081               	movwf	1
 15067                           
 15068                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 15069     1132  3040               	movlw	64
 15070     1133  00FA               	movwf	??_USBCtrlTrfOutHandler
 15071     1134  3000               	movlw	0
 15072     1135  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15073     1136  30FF               	movlw	255
 15074     1137  057A               	andwf	??_USBCtrlTrfOutHandler,w
 15075     1138  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 15076     1139  307F               	movlw	127
 15077     113A  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 15078     113B  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 15079     113C  0867               	movf	_pBDTEntryEP0OutNext,w
 15080     113D  0086               	movwf	6
 15081     113E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15082     113F  0087               	movwf	7
 15083     1140  3142               	addfsr 1,2
 15084     1141  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 15085     1142  3FC0               	movwi [0]fsr1
 15086     1143  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 15087     1144  3FC1               	movwi [1]fsr1
 15088                           
 15089                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 15090     1145  0867               	movf	_pBDTEntryEP0OutNext,w
 15091     1146  0086               	movwf	6
 15092     1147  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15093     1148  0087               	movwf	7
 15094     1149  300C               	movlw	12
 15095     114A  0081               	movwf	1
 15096                           
 15097                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15098     114B  0867               	movf	_pBDTEntryEP0OutNext,w
 15099     114C  0086               	movwf	6
 15100     114D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15101     114E  0087               	movwf	7
 15102     114F  1781               	bsf	1,7
 15103                           
 15104                           ;usb/usb_device.c: 2568:         }
 15105     1150  0008               	return
 15106     1151                     i1l4958:
 15107                           
 15108                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 15109     1151  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15110     1152  0008               	return
 15111     1153                     __end_of_USBCtrlTrfOutHandler:
 15112                           
 15113                           	psect	text79
 15114     0E93                     __ptext79:	
 15115 ;; *************** function _USBCtrlTrfRxService *****************
 15116 ;; Defined at:
 15117 ;;		line 1856 in file "usb/usb_device.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;		None
 15120 ;; Auto vars:     Size  Location     Type
 15121 ;;  byteToRead      1    9[COMMON] unsigned char 
 15122 ;;  i               1    8[COMMON] unsigned char 
 15123 ;; Return value:  Size  Location     Type
 15124 ;;                  1    wreg      void 
 15125 ;; Registers used:
 15126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15127 ;; Tracked objects:
 15128 ;;		On entry : 1F/0
 15129 ;;		On exit  : 1D/0
 15130 ;;		Unchanged: 0/0
 15131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;Total ram usage:        6 bytes
 15137 ;; Hardware stack levels used: 1
 15138 ;; Hardware stack levels required when called: 2
 15139 ;; This function calls:
 15140 ;;		_USBCtrlEPAllowStatusStage
 15141 ;;		_USBHIDCBSetReportComplete
 15142 ;; This function is called by:
 15143 ;;		_USBCtrlTrfOutHandler
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147     0E93                     _USBCtrlTrfRxService:	
 15148                           ;psect for function _USBCtrlTrfRxService
 15149                           
 15150                           
 15151                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 15152                           
 15153                           ;incstack = 0
 15154                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15155     0E93  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15156     0E94  0086               	movwf	6
 15157     0E95  0187               	clrf	7
 15158     0E96  3F41               	moviw [1]fsr1
 15159     0E97  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15160                           
 15161                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 15162     0E98  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15163     0E99  00F4               	movwf	??_USBCtrlTrfRxService
 15164     0E9A  01F5               	clrf	??_USBCtrlTrfRxService+1
 15165     0E9B  0875               	movf	??_USBCtrlTrfRxService+1,w
 15166     0E9C  0022               	movlb	2	; select bank2
 15167     0E9D  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15168     0E9E  1D03               	skipz
 15169     0E9F  2EA2               	goto	u393_25
 15170     0EA0  0874               	movf	??_USBCtrlTrfRxService,w
 15171     0EA1  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 15172     0EA2                     u393_25:
 15173     0EA2  1803               	skipnc
 15174     0EA3  2EA6               	goto	i1l594
 15175                           
 15176                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 15177     0EA4  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15178     0EA5  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15179     0EA6                     i1l594:	
 15180                           ;usb/usb_device.c: 1872:     }
 15181                           
 15182                           
 15183                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 15184     0EA6  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15185     0EA7  00F4               	movwf	??_USBCtrlTrfRxService
 15186     0EA8  01F5               	clrf	??_USBCtrlTrfRxService+1
 15187     0EA9  0874               	movf	??_USBCtrlTrfRxService,w
 15188     0EAA  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 15189     0EAB  0875               	movf	??_USBCtrlTrfRxService+1,w
 15190     0EAC  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 15191                           
 15192                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 15193     0EAD  01F8               	clrf	USBCtrlTrfRxService@i
 15194     0EAE                     i1l4716:
 15195     0EAE  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15196     0EAF  0278               	subwf	USBCtrlTrfRxService@i,w
 15197     0EB0  1803               	btfsc	3,0
 15198     0EB1  2EC4               	goto	i1l4718
 15199                           
 15200                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 15201     0EB2  0821               	movf	_outPipes^(0+256),w	;volatile
 15202     0EB3  0086               	movwf	6
 15203     0EB4  0187               	clrf	7
 15204     0EB5  0878               	movf	USBCtrlTrfRxService@i,w
 15205     0EB6  3E48               	addlw	72
 15206     0EB7  0084               	movwf	4
 15207     0EB8  0185               	clrf	5
 15208     0EB9  0800               	movf	0,w
 15209     0EBA  0081               	movwf	1
 15210     0EBB  3001               	movlw	1
 15211     0EBC  00F4               	movwf	??_USBCtrlTrfRxService
 15212     0EBD  0874               	movf	??_USBCtrlTrfRxService,w
 15213     0EBE  07A1               	addwf	_outPipes^(0+256),f	;volatile
 15214                           
 15215                           ;usb/usb_device.c: 1881:     }
 15216     0EBF  3001               	movlw	1
 15217     0EC0  00F4               	movwf	??_USBCtrlTrfRxService
 15218     0EC1  0874               	movf	??_USBCtrlTrfRxService,w
 15219     0EC2  07F8               	addwf	USBCtrlTrfRxService@i,f
 15220     0EC3  2EAE               	goto	i1l4716
 15221     0EC4                     i1l4718:
 15222                           
 15223                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 15224     0EC4  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15225     0EC5  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15226     0EC6  1903               	btfsc	3,2
 15227     0EC7  2F05               	goto	i1l4730
 15228                           
 15229                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15230     0EC8  0020               	movlb	0	; select bank0
 15231     0EC9  0867               	movf	_pBDTEntryEP0OutNext,w
 15232     0ECA  3E01               	addlw	1
 15233     0ECB  00F4               	movwf	??_USBCtrlTrfRxService
 15234     0ECC  3000               	movlw	0
 15235     0ECD  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15236     0ECE  00F5               	movwf	??_USBCtrlTrfRxService+1
 15237     0ECF  0874               	movf	??_USBCtrlTrfRxService,w
 15238     0ED0  0086               	movwf	6
 15239     0ED1  0875               	movf	??_USBCtrlTrfRxService+1,w
 15240     0ED2  0087               	movwf	7
 15241     0ED3  3008               	movlw	8
 15242     0ED4  0081               	movwf	1
 15243                           
 15244                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 15245     0ED5  3048               	movlw	72
 15246     0ED6  00F4               	movwf	??_USBCtrlTrfRxService
 15247     0ED7  3000               	movlw	0
 15248     0ED8  00F5               	movwf	??_USBCtrlTrfRxService+1
 15249     0ED9  30FF               	movlw	255
 15250     0EDA  0574               	andwf	??_USBCtrlTrfRxService,w
 15251     0EDB  00F6               	movwf	??_USBCtrlTrfRxService+2
 15252     0EDC  307F               	movlw	127
 15253     0EDD  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15254     0EDE  00F7               	movwf	??_USBCtrlTrfRxService+3
 15255     0EDF  0867               	movf	_pBDTEntryEP0OutNext,w
 15256     0EE0  0086               	movwf	6
 15257     0EE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15258     0EE2  0087               	movwf	7
 15259     0EE3  3142               	addfsr 1,2
 15260     0EE4  0876               	movf	??_USBCtrlTrfRxService+2,w
 15261     0EE5  3FC0               	movwi [0]fsr1
 15262     0EE6  0877               	movf	??_USBCtrlTrfRxService+3,w
 15263     0EE7  3FC1               	movwi [1]fsr1
 15264                           
 15265                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 15266     0EE8  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15267     0EE9  0086               	movwf	6
 15268     0EEA  0187               	clrf	7
 15269     0EEB  1B01               	btfsc	1,6
 15270     0EEC  2EF9               	goto	i1l4728
 15271                           
 15272                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 15273     0EED  0867               	movf	_pBDTEntryEP0OutNext,w
 15274     0EEE  0086               	movwf	6
 15275     0EEF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15276     0EF0  0087               	movwf	7
 15277     0EF1  3048               	movlw	72
 15278     0EF2  0081               	movwf	1
 15279                           
 15280                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15281     0EF3  0867               	movf	_pBDTEntryEP0OutNext,w
 15282     0EF4  0086               	movwf	6
 15283     0EF5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15284     0EF6  0087               	movwf	7
 15285     0EF7  1781               	bsf	1,7
 15286                           
 15287                           ;usb/usb_device.c: 1893:         }
 15288     0EF8  0008               	return
 15289     0EF9                     i1l4728:
 15290                           
 15291                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 15292     0EF9  0867               	movf	_pBDTEntryEP0OutNext,w
 15293     0EFA  0086               	movwf	6
 15294     0EFB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15295     0EFC  0087               	movwf	7
 15296     0EFD  3008               	movlw	8
 15297     0EFE  0081               	movwf	1
 15298                           
 15299                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15300     0EFF  0867               	movf	_pBDTEntryEP0OutNext,w
 15301     0F00  0086               	movwf	6
 15302     0F01  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15303     0F02  0087               	movwf	7
 15304     0F03  1781               	bsf	1,7
 15305     0F04  0008               	return
 15306     0F05                     i1l4730:
 15307                           
 15308                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15309     0F05  0020               	movlb	0	; select bank0
 15310     0F06  0867               	movf	_pBDTEntryEP0OutNext,w
 15311     0F07  3E01               	addlw	1
 15312     0F08  00F4               	movwf	??_USBCtrlTrfRxService
 15313     0F09  3000               	movlw	0
 15314     0F0A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15315     0F0B  00F5               	movwf	??_USBCtrlTrfRxService+1
 15316     0F0C  0874               	movf	??_USBCtrlTrfRxService,w
 15317     0F0D  0086               	movwf	6
 15318     0F0E  0875               	movf	??_USBCtrlTrfRxService+1,w
 15319     0F0F  0087               	movwf	7
 15320     0F10  3008               	movlw	8
 15321     0F11  0081               	movwf	1
 15322                           
 15323                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 15324     0F12  3040               	movlw	64
 15325     0F13  00F4               	movwf	??_USBCtrlTrfRxService
 15326     0F14  3000               	movlw	0
 15327     0F15  00F5               	movwf	??_USBCtrlTrfRxService+1
 15328     0F16  30FF               	movlw	255
 15329     0F17  0574               	andwf	??_USBCtrlTrfRxService,w
 15330     0F18  00F6               	movwf	??_USBCtrlTrfRxService+2
 15331     0F19  307F               	movlw	127
 15332     0F1A  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15333     0F1B  00F7               	movwf	??_USBCtrlTrfRxService+3
 15334     0F1C  0867               	movf	_pBDTEntryEP0OutNext,w
 15335     0F1D  0086               	movwf	6
 15336     0F1E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15337     0F1F  0087               	movwf	7
 15338     0F20  3142               	addfsr 1,2
 15339     0F21  0876               	movf	??_USBCtrlTrfRxService+2,w
 15340     0F22  3FC0               	movwi [0]fsr1
 15341     0F23  0877               	movf	??_USBCtrlTrfRxService+3,w
 15342     0F24  3FC1               	movwi [1]fsr1
 15343                           
 15344                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 15345     0F25  0867               	movf	_pBDTEntryEP0OutNext,w
 15346     0F26  0086               	movwf	6
 15347     0F27  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15348     0F28  0087               	movwf	7
 15349     0F29  3004               	movlw	4
 15350     0F2A  0081               	movwf	1
 15351                           
 15352                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15353     0F2B  0867               	movf	_pBDTEntryEP0OutNext,w
 15354     0F2C  0086               	movwf	6
 15355     0F2D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15356     0F2E  0087               	movwf	7
 15357     0F2F  1781               	bsf	1,7
 15358                           
 15359                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 15360     0F30  0022               	movlb	2	; select bank2
 15361     0F31  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 15362     0F32  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 15363     0F33  1903               	btfsc	3,2
 15364     0F34  2F3F               	goto	i1l4742
 15365                           
 15366                           ;usb/usb_device.c: 1919:         {
 15367     0F35  3005               	movlw	5
 15368     0F36  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 15369     0F37  0086               	movwf	6
 15370     0F38  3001               	movlw	1	; select bank2/3
 15371     0F39  0087               	movwf	7
 15372     0F3A  3F41               	moviw [1]fsr1
 15373     0F3B  008A               	movwf	10
 15374     0F3C  3F40               	moviw [0]fsr1
 15375     0F3D  000A               	callw
 15376     0F3E  318E               	pagesel	$
 15377     0F3F                     i1l4742:
 15378     0F3F  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 15379                           
 15380                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 15381     0F40  0840               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 15382     0F41  1D03               	btfss	3,2
 15383     0F42  0008               	return
 15384                           
 15385                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 15386     0F43  3188  2053         	fcall	_USBCtrlEPAllowStatusStage
 15387     0F45  0008               	return
 15388     0F46                     __end_of_USBCtrlTrfRxService:
 15389                           
 15390                           	psect	text80
 15391     0853                     __ptext80:	
 15392 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 15393 ;; Defined at:
 15394 ;;		line 1420 in file "usb/usb_device.c"
 15395 ;; Parameters:    Size  Location     Type
 15396 ;;		None
 15397 ;; Auto vars:     Size  Location     Type
 15398 ;;		None
 15399 ;; Return value:  Size  Location     Type
 15400 ;;                  1    wreg      void 
 15401 ;; Registers used:
 15402 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15403 ;; Tracked objects:
 15404 ;;		On entry : 0/2
 15405 ;;		On exit  : 1D/0
 15406 ;;		Unchanged: 0/0
 15407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15410 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15411 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;Total ram usage:        4 bytes
 15413 ;; Hardware stack levels used: 1
 15414 ;; This function calls:
 15415 ;;		Nothing
 15416 ;; This function is called by:
 15417 ;;		_USBDeviceTasks
 15418 ;;		_USBCtrlEPServiceComplete
 15419 ;;		_USBCtrlTrfRxService
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423     0853                     _USBCtrlEPAllowStatusStage:	
 15424                           ;psect for function _USBCtrlEPAllowStatusStage
 15425                           
 15426                           
 15427                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 15428                           
 15429                           ;incstack = 0
 15430                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 15431     0853  0022               	movlb	2	; select bank2
 15432     0854  083F               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 15433     0855  1D03               	btfss	3,2
 15434     0856  0008               	return
 15435                           
 15436                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 15437     0857  3001               	movlw	1
 15438     0858  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 15439                           
 15440                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 15441     0859  083E               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 15442     085A  1D03               	btfss	3,2
 15443     085B  0008               	return
 15444                           
 15445                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 15446     085C  3001               	movlw	1
 15447     085D  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 15448                           
 15449                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 15450     085E  3002               	movlw	2
 15451     085F  0020               	movlb	0	; select bank0
 15452     0860  0669               	xorwf	_controlTransferState,w	;volatile
 15453     0861  1D03               	btfss	3,2
 15454     0862  2875               	goto	i1l4298
 15455                           
 15456                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 15457     0863  0861               	movf	_pBDTEntryIn,w
 15458     0864  0086               	movwf	6
 15459     0865  0862               	movf	_pBDTEntryIn+1,w
 15460     0866  0087               	movwf	7
 15461     0867  3141               	addfsr 1,1
 15462     0868  0181               	clrf	1
 15463                           
 15464                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 15465     0869  0861               	movf	_pBDTEntryIn,w
 15466     086A  0086               	movwf	6
 15467     086B  0862               	movf	_pBDTEntryIn+1,w
 15468     086C  0087               	movwf	7
 15469     086D  3048               	movlw	72
 15470     086E  0081               	movwf	1
 15471                           
 15472                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15473     086F  0861               	movf	_pBDTEntryIn,w
 15474     0870  0086               	movwf	6
 15475     0871  0862               	movf	_pBDTEntryIn+1,w
 15476     0872  0087               	movwf	7
 15477     0873  1781               	bsf	1,7
 15478                           
 15479                           ;usb/usb_device.c: 1441:             }
 15480     0874  0008               	return
 15481     0875                     i1l4298:
 15482     0875  0369               	decf	_controlTransferState,w	;volatile
 15483     0876  1D03               	btfss	3,2
 15484     0877  0008               	return
 15485                           
 15486                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 15487     0878  0022               	movlb	2	; select bank2
 15488     0879  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15489                           
 15490                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 15491     087A  0020               	movlb	0	; select bank0
 15492     087B  0A6A               	incf	_pBDTEntryEP0OutCurrent,w
 15493     087C  0086               	movwf	6
 15494     087D  0187               	clrf	7
 15495     087E  3008               	movlw	8
 15496     087F  0081               	movwf	1
 15497                           
 15498                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 15499     0880  3040               	movlw	64
 15500     0881  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15501     0882  3000               	movlw	0
 15502     0883  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15503     0884  30FF               	movlw	255
 15504     0885  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15505     0886  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15506     0887  307F               	movlw	127
 15507     0888  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15508     0889  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15509     088A  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15510     088B  3E02               	addlw	2
 15511     088C  0086               	movwf	6
 15512     088D  0187               	clrf	7
 15513     088E  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15514     088F  3FC0               	movwi [0]fsr1
 15515     0890  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15516     0891  3FC1               	movwi [1]fsr1
 15517                           
 15518                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 15519     0892  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15520     0893  0086               	movwf	6
 15521     0894  0187               	clrf	7
 15522     0895  3004               	movlw	4
 15523     0896  0081               	movwf	1
 15524                           
 15525                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 15526     0897  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15527     0898  0086               	movwf	6
 15528     0899  0187               	clrf	7
 15529     089A  1781               	bsf	1,7
 15530                           
 15531                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 15532     089B  3001               	movlw	1
 15533     089C  0022               	movlb	2	; select bank2
 15534     089D  00C2               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15535                           
 15536                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 15537     089E  0020               	movlb	0	; select bank0
 15538     089F  0867               	movf	_pBDTEntryEP0OutNext,w
 15539     08A0  3E01               	addlw	1
 15540     08A1  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15541     08A2  3000               	movlw	0
 15542     08A3  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15543     08A4  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15544     08A5  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 15545     08A6  0086               	movwf	6
 15546     08A7  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 15547     08A8  0087               	movwf	7
 15548     08A9  3008               	movlw	8
 15549     08AA  0081               	movwf	1
 15550                           
 15551                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 15552     08AB  3040               	movlw	64
 15553     08AC  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15554     08AD  3000               	movlw	0
 15555     08AE  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15556     08AF  30FF               	movlw	255
 15557     08B0  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15558     08B1  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15559     08B2  307F               	movlw	127
 15560     08B3  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15561     08B4  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15562     08B5  0867               	movf	_pBDTEntryEP0OutNext,w
 15563     08B6  0086               	movwf	6
 15564     08B7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15565     08B8  0087               	movwf	7
 15566     08B9  3142               	addfsr 1,2
 15567     08BA  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15568     08BB  3FC0               	movwi [0]fsr1
 15569     08BC  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15570     08BD  3FC1               	movwi [1]fsr1
 15571                           
 15572                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 15573     08BE  0867               	movf	_pBDTEntryEP0OutNext,w
 15574     08BF  0086               	movwf	6
 15575     08C0  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15576     08C1  0087               	movwf	7
 15577     08C2  3080               	movlw	128
 15578     08C3  0081               	movwf	1
 15579     08C4  0008               	return
 15580     08C5                     __end_of_USBCtrlEPAllowStatusStage:	
 15581                           ;usb/usb_device.c: 1461:         }
 15582                           
 15583                           
 15584                           	psect	text81
 15585     09B0                     __ptext81:	
 15586 ;; *************** function _USBCtrlTrfInHandler *****************
 15587 ;; Defined at:
 15588 ;;		line 2599 in file "usb/usb_device.c"
 15589 ;; Parameters:    Size  Location     Type
 15590 ;;		None
 15591 ;; Auto vars:     Size  Location     Type
 15592 ;;  lastDTS         1    7[COMMON] unsigned char 
 15593 ;; Return value:  Size  Location     Type
 15594 ;;                  1    wreg      void 
 15595 ;; Registers used:
 15596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15597 ;; Tracked objects:
 15598 ;;		On entry : 1F/0
 15599 ;;		On exit  : 1F/0
 15600 ;;		Unchanged: 0/0
 15601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;Total ram usage:        5 bytes
 15607 ;; Hardware stack levels used: 1
 15608 ;; Hardware stack levels required when called: 2
 15609 ;; This function calls:
 15610 ;;		_USBCtrlTrfTxService
 15611 ;;		_USBHIDCBSetReportComplete
 15612 ;; This function is called by:
 15613 ;;		_USBCtrlEPService
 15614 ;; This function uses a non-reentrant model
 15615 ;;
 15616                           
 15617     09B0                     _USBCtrlTrfInHandler:	
 15618                           ;psect for function _USBCtrlTrfInHandler
 15619                           
 15620                           
 15621                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 15622                           
 15623                           ;incstack = 0
 15624                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15625     09B0  0861               	movf	_pBDTEntryIn,w
 15626     09B1  0086               	movwf	6
 15627     09B2  0862               	movf	_pBDTEntryIn+1,w
 15628     09B3  0087               	movwf	7
 15629     09B4  3000               	movlw	0
 15630     09B5  1B01               	btfsc	1,6
 15631     09B6  3001               	movlw	1
 15632     09B7  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 15633                           
 15634                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 15635     09B8  3004               	movlw	4
 15636     09B9  0661               	xorwf	_pBDTEntryIn,w
 15637     09BA  00E1               	movwf	_pBDTEntryIn
 15638     09BB  3000               	movlw	0
 15639     09BC  0662               	xorwf	_pBDTEntryIn+1,w
 15640     09BD  00E2               	movwf	_pBDTEntryIn+1
 15641                           
 15642                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 15643     09BE  3008               	movlw	8
 15644     09BF  066B               	xorwf	_USBDeviceState,w
 15645     09C0  1D03               	btfss	3,2
 15646     09C1  29CE               	goto	i1l4974
 15647                           
 15648                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 15649     09C2  0842               	movf	66,w	;volatile
 15650     09C3  397F               	andlw	127
 15651     09C4  003D               	movlb	29	; select bank29
 15652     09C5  0096               	movwf	22	;volatile
 15653                           
 15654                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 15655     09C6  0816               	movf	22,w
 15656     09C7  1903               	btfsc	3,2
 15657     09C8  29CB               	goto	i1l4972
 15658                           
 15659                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 15660     09C9  3010               	movlw	16
 15661     09CA  29CC               	goto	L17
 15662     09CB                     i1l4972:	
 15663                           ;usb/usb_device.c: 2617:         }
 15664                           
 15665                           
 15666                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 15667     09CB  3004               	movlw	4
 15668     09CC                     L17:
 15669     09CC  0020               	movlb	0	; select bank0
 15670     09CD  00EB               	movwf	_USBDeviceState	;volatile
 15671     09CE                     i1l4974:
 15672                           
 15673                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 15674     09CE  0369               	decf	_controlTransferState,w	;volatile
 15675     09CF  1D03               	btfss	3,2
 15676     09D0  2A16               	goto	i1l680
 15677                           
 15678                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 15679     09D1  3048               	movlw	72
 15680     09D2  00F3               	movwf	??_USBCtrlTrfInHandler
 15681     09D3  3000               	movlw	0
 15682     09D4  00F4               	movwf	??_USBCtrlTrfInHandler+1
 15683     09D5  30FF               	movlw	255
 15684     09D6  0573               	andwf	??_USBCtrlTrfInHandler,w
 15685     09D7  00F5               	movwf	??_USBCtrlTrfInHandler+2
 15686     09D8  307F               	movlw	127
 15687     09D9  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 15688     09DA  00F6               	movwf	??_USBCtrlTrfInHandler+3
 15689     09DB  0861               	movf	_pBDTEntryIn,w
 15690     09DC  0086               	movwf	6
 15691     09DD  0862               	movf	_pBDTEntryIn+1,w
 15692     09DE  0087               	movwf	7
 15693     09DF  3142               	addfsr 1,2
 15694     09E0  0875               	movf	??_USBCtrlTrfInHandler+2,w
 15695     09E1  3FC0               	movwi [0]fsr1
 15696     09E2  0876               	movf	??_USBCtrlTrfInHandler+3,w
 15697     09E3  3FC1               	movwi [1]fsr1
 15698                           
 15699                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 15700     09E4  3195  258C  3189   	fcall	_USBCtrlTrfTxService
 15701                           
 15702                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 15703     09E7  3002               	movlw	2
 15704     09E8  0022               	movlb	2	; select bank2
 15705     09E9  0647               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 15706     09EA  1D03               	btfss	3,2
 15707     09EB  29F9               	goto	i1l4984
 15708                           
 15709                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 15710     09EC  0020               	movlb	0	; select bank0
 15711     09ED  0861               	movf	_pBDTEntryIn,w
 15712     09EE  0086               	movwf	6
 15713     09EF  0862               	movf	_pBDTEntryIn+1,w
 15714     09F0  0087               	movwf	7
 15715     09F1  3004               	movlw	4
 15716     09F2  0081               	movwf	1
 15717                           
 15718                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 15719     09F3  0861               	movf	_pBDTEntryIn,w
 15720     09F4  0086               	movwf	6
 15721     09F5  0862               	movf	_pBDTEntryIn+1,w
 15722     09F6  0087               	movwf	7
 15723     09F7  1781               	bsf	1,7
 15724                           
 15725                           ;usb/usb_device.c: 2640:         }
 15726     09F8  0008               	return
 15727     09F9                     i1l4984:
 15728                           
 15729                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 15730     09F9  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 15731     09FA  1D03               	btfss	3,2
 15732     09FB  2A09               	goto	i1l4988
 15733                           
 15734                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 15735     09FC  0020               	movlb	0	; select bank0
 15736     09FD  0861               	movf	_pBDTEntryIn,w
 15737     09FE  0086               	movwf	6
 15738     09FF  0862               	movf	_pBDTEntryIn+1,w
 15739     0A00  0087               	movwf	7
 15740     0A01  3048               	movlw	72
 15741     0A02  0081               	movwf	1
 15742                           
 15743                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15744     0A03  0861               	movf	_pBDTEntryIn,w
 15745     0A04  0086               	movwf	6
 15746     0A05  0862               	movf	_pBDTEntryIn+1,w
 15747     0A06  0087               	movwf	7
 15748     0A07  1781               	bsf	1,7
 15749                           
 15750                           ;usb/usb_device.c: 2647:             }
 15751     0A08  0008               	return
 15752     0A09                     i1l4988:
 15753                           
 15754                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 15755     0A09  0020               	movlb	0	; select bank0
 15756     0A0A  0861               	movf	_pBDTEntryIn,w
 15757     0A0B  0086               	movwf	6
 15758     0A0C  0862               	movf	_pBDTEntryIn+1,w
 15759     0A0D  0087               	movwf	7
 15760     0A0E  3008               	movlw	8
 15761     0A0F  0081               	movwf	1
 15762                           
 15763                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15764     0A10  0861               	movf	_pBDTEntryIn,w
 15765     0A11  0086               	movwf	6
 15766     0A12  0862               	movf	_pBDTEntryIn+1,w
 15767     0A13  0087               	movwf	7
 15768     0A14  1781               	bsf	1,7
 15769     0A15  0008               	return
 15770     0A16                     i1l680:	
 15771                           ;usb/usb_device.c: 2655:  else
 15772                           
 15773                           
 15774                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 15775     0A16  0022               	movlb	2	; select bank2
 15776     0A17  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 15777     0A18  2A28               	goto	i1l4996
 15778                           
 15779                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 15780     0A19  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 15781     0A1A  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 15782     0A1B  1903               	btfsc	3,2
 15783     0A1C  2A27               	goto	i1l4994
 15784                           
 15785                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 15786     0A1D  3005               	movlw	5
 15787     0A1E  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 15788     0A1F  0086               	movwf	6
 15789     0A20  3001               	movlw	1	; select bank2/3
 15790     0A21  0087               	movwf	7
 15791     0A22  3F41               	moviw [1]fsr1
 15792     0A23  008A               	movwf	10
 15793     0A24  3F40               	moviw [0]fsr1
 15794     0A25  000A               	callw
 15795     0A26  3189               	pagesel	$
 15796     0A27                     i1l4994:
 15797                           
 15798                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 15799     0A27  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 15800     0A28                     i1l4996:
 15801                           
 15802                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 15803     0A28  0020               	movlb	0	; select bank0
 15804     0A29  01E9               	clrf	_controlTransferState	;volatile
 15805     0A2A  0008               	return
 15806     0A2B                     __end_of_USBCtrlTrfInHandler:
 15807                           
 15808                           	psect	text82
 15809     1BEE                     __ptext82:	
 15810 ;; *************** function _USBHIDCBSetReportComplete *****************
 15811 ;; Defined at:
 15812 ;;		line 496 in file "app_device_keyboard.c"
 15813 ;; Parameters:    Size  Location     Type
 15814 ;;		None
 15815 ;; Auto vars:     Size  Location     Type
 15816 ;;		None
 15817 ;; Return value:  Size  Location     Type
 15818 ;;                  1    wreg      void 
 15819 ;; Registers used:
 15820 ;;		wreg, status,2, status,0, pclath, cstack
 15821 ;; Tracked objects:
 15822 ;;		On entry : 1F/2
 15823 ;;		On exit  : 1F/2
 15824 ;;		Unchanged: 0/0
 15825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;Total ram usage:        0 bytes
 15831 ;; Hardware stack levels used: 1
 15832 ;; Hardware stack levels required when called: 1
 15833 ;; This function calls:
 15834 ;;		i1_APP_KeyboardProcessOutputReport
 15835 ;; This function is called by:
 15836 ;;		_USBHIDCBSetReportHandler
 15837 ;;		_USBCtrlTrfRxService
 15838 ;;		_USBCtrlTrfInHandler
 15839 ;; This function uses a non-reentrant model
 15840 ;;
 15841                           
 15842     1BEE                     _USBHIDCBSetReportComplete:	
 15843                           ;psect for function _USBHIDCBSetReportComplete
 15844                           
 15845                           
 15846                           ;app_device_keyboard.c: 499:     outputReport.value = CtrlTrfData[0];
 15847                           
 15848                           ;incstack = 0
 15849                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+status,2+status,0+pclath+cstack]
 15850     1BEE  0020               	movlb	0	; select bank0
 15851     1BEF  0848               	movf	72,w	;volatile
 15852     1BF0  0022               	movlb	2	; select bank2
 15853     1BF1  00A0               	movwf	32	;volatile
 15854                           
 15855                           ;app_device_keyboard.c: 502:     APP_KeyboardProcessOutputReport();
 15856     1BF2  3180  2002         	fcall	i1_APP_KeyboardProcessOutputReport
 15857     1BF4  0008               	return
 15858     1BF5                     __end_of_USBHIDCBSetReportComplete:
 15859                           
 15860                           	psect	text83
 15861     0002                     __ptext83:	
 15862 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 15863 ;; Defined at:
 15864 ;;		line 488 in file "app_device_keyboard.c"
 15865 ;; Parameters:    Size  Location     Type
 15866 ;;		None
 15867 ;; Auto vars:     Size  Location     Type
 15868 ;;		None
 15869 ;; Return value:  Size  Location     Type
 15870 ;;                  1    wreg      void 
 15871 ;; Registers used:
 15872 ;;		wreg
 15873 ;; Tracked objects:
 15874 ;;		On entry : 1F/2
 15875 ;;		On exit  : 1F/2
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;Total ram usage:        0 bytes
 15883 ;; Hardware stack levels used: 1
 15884 ;; This function calls:
 15885 ;;		Nothing
 15886 ;; This function is called by:
 15887 ;;		_USBHIDCBSetReportComplete
 15888 ;; This function uses a non-reentrant model
 15889 ;;
 15890                           
 15891     0002                     i1_APP_KeyboardProcessOutputReport:	
 15892                           ;psect for function i1_APP_KeyboardProcessOutputReport
 15893                           
 15894                           
 15895                           ;app_device_keyboard.c: 489:     if (outputReport.leds.capsLock) {
 15896                           
 15897                           ;incstack = 0
 15898                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg]
 15899     0002  0820               	movf	32,w	;volatile
 15900     0003  0008               	return
 15901     0004                     __end_ofi1_APP_KeyboardProcessOutputReport:
 15902                           
 15903                           	psect	text84
 15904     158C                     __ptext84:	
 15905 ;; *************** function _USBCtrlTrfTxService *****************
 15906 ;; Defined at:
 15907 ;;		line 1775 in file "usb/usb_device.c"
 15908 ;; Parameters:    Size  Location     Type
 15909 ;;		None
 15910 ;; Auto vars:     Size  Location     Type
 15911 ;;  byteToSend      1    2[COMMON] unsigned char 
 15912 ;; Return value:  Size  Location     Type
 15913 ;;                  1    wreg      void 
 15914 ;; Registers used:
 15915 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 15916 ;; Tracked objects:
 15917 ;;		On entry : 1E/0
 15918 ;;		On exit  : 1C/0
 15919 ;;		Unchanged: 0/0
 15920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;Total ram usage:        3 bytes
 15926 ;; Hardware stack levels used: 1
 15927 ;; This function calls:
 15928 ;;		Nothing
 15929 ;; This function is called by:
 15930 ;;		_USBCtrlEPAllowDataStage
 15931 ;;		_USBCtrlTrfInHandler
 15932 ;; This function uses a non-reentrant model
 15933 ;;
 15934                           
 15935     158C                     _USBCtrlTrfTxService:	
 15936                           ;psect for function _USBCtrlTrfTxService
 15937                           
 15938                           
 15939                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 15940                           
 15941                           ;incstack = 0
 15942                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 15943     158C  3008               	movlw	8
 15944     158D  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 15945                           
 15946                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 15947     158E  3000               	movlw	0
 15948     158F  0021               	movlb	1	; select bank1
 15949     1590  026F               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 15950     1591  3008               	movlw	8
 15951     1592  1903               	skipnz
 15952     1593  026E               	subwf	(_inPipes^(0+128)+3),w	;volatile
 15953     1594  1803               	skipnc
 15954     1595  2DA3               	goto	i1l579
 15955                           
 15956                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 15957     1596  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 15958     1597  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 15959                           
 15960                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 15961     1598  0022               	movlb	2	; select bank2
 15962     1599  0847               	movf	_shortPacketStatus^(0+256),w	;volatile
 15963     159A  1D03               	btfss	3,2
 15964     159B  2D9E               	goto	i1l4220
 15965                           
 15966                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 15967     159C  3001               	movlw	1
 15968     159D  2DA2               	goto	L18
 15969     159E                     i1l4220:	
 15970                           ;usb/usb_device.c: 1794:         }
 15971                           
 15972     159E  0347               	decf	_shortPacketStatus^(0+256),w	;volatile
 15973     159F  1D03               	btfss	3,2
 15974     15A0  2DA3               	goto	i1l579
 15975                           
 15976                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 15977     15A1  3002               	movlw	2
 15978     15A2                     L18:
 15979     15A2  00C7               	movwf	_shortPacketStatus^(0+256)	;volatile
 15980     15A3                     i1l579:	
 15981                           ;usb/usb_device.c: 1799:     }
 15982                           
 15983                           
 15984                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 15985     15A3  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 15986     15A4  00F0               	movwf	??_USBCtrlTrfTxService
 15987     15A5  01F1               	clrf	??_USBCtrlTrfTxService+1
 15988     15A6  0870               	movf	??_USBCtrlTrfTxService,w
 15989     15A7  0021               	movlb	1	; select bank1
 15990     15A8  02EE               	subwf	(_inPipes^(0+128)+3),f	;volatile
 15991     15A9  0871               	movf	??_USBCtrlTrfTxService+1,w
 15992     15AA  3BEF               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 15993                           
 15994                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 15995     15AB  0020               	movlb	0	; select bank0
 15996     15AC  0861               	movf	_pBDTEntryIn,w
 15997     15AD  3E01               	addlw	1
 15998     15AE  00F0               	movwf	??_USBCtrlTrfTxService
 15999     15AF  3000               	movlw	0
 16000     15B0  3D62               	addwfc	_pBDTEntryIn+1,w
 16001     15B1  00F1               	movwf	??_USBCtrlTrfTxService+1
 16002     15B2  0870               	movf	??_USBCtrlTrfTxService,w
 16003     15B3  0086               	movwf	6
 16004     15B4  0871               	movf	??_USBCtrlTrfTxService+1,w
 16005     15B5  0087               	movwf	7
 16006     15B6  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16007     15B7  0081               	movwf	1
 16008                           
 16009                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 16010     15B8  3048               	movlw	72
 16011     15B9  0022               	movlb	2	; select bank2
 16012     15BA  00C6               	movwf	_pDst^(0+256)
 16013                           
 16014                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 16015     15BB  0021               	movlb	1	; select bank1
 16016     15BC  1C6D               	btfss	(_inPipes^(0+128)+2),0	;volatile
 16017     15BD  2DD5               	goto	i1l4240
 16018     15BE  2DEF               	goto	i1l4250
 16019     15BF                     i1l4232:
 16020                           
 16021                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 16022     15BF  0022               	movlb	2	; select bank2
 16023     15C0  0846               	movf	_pDst^(0+256),w
 16024     15C1  0086               	movwf	6
 16025     15C2  0187               	clrf	7
 16026     15C3  0021               	movlb	1	; select bank1
 16027     15C4  086B               	movf	_inPipes^(0+128),w	;volatile
 16028     15C5  0084               	movwf	4
 16029     15C6  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16030     15C7  0085               	movwf	5
 16031     15C8  0800               	movf	0,w	;code access
 16032     15C9  0081               	movwf	1
 16033     15CA  3001               	movlw	1
 16034     15CB  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16035     15CC  3000               	movlw	0
 16036     15CD  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16037     15CE  3001               	movlw	1
 16038     15CF  00F0               	movwf	??_USBCtrlTrfTxService
 16039     15D0  0870               	movf	??_USBCtrlTrfTxService,w
 16040     15D1  0022               	movlb	2	; select bank2
 16041     15D2  07C6               	addwf	_pDst^(0+256),f
 16042                           
 16043                           ;usb/usb_device.c: 1818:             byteToSend--;
 16044     15D3  3001               	movlw	1
 16045     15D4  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16046     15D5                     i1l4240:
 16047                           
 16048                           ;usb/usb_device.c: 1815:         while(byteToSend)
 16049     15D5  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16050     15D6  1903               	btfsc	3,2
 16051     15D7  0008               	return
 16052     15D8  2DBF               	goto	i1l4232
 16053     15D9                     i1l4242:
 16054                           
 16055                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 16056     15D9  0022               	movlb	2	; select bank2
 16057     15DA  0846               	movf	_pDst^(0+256),w
 16058     15DB  0086               	movwf	6
 16059     15DC  0187               	clrf	7
 16060     15DD  0021               	movlb	1	; select bank1
 16061     15DE  086B               	movf	_inPipes^(0+128),w	;volatile
 16062     15DF  0084               	movwf	4
 16063     15E0  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16064     15E1  0085               	movwf	5
 16065     15E2  0800               	movf	0,w	;code access
 16066     15E3  0081               	movwf	1
 16067     15E4  3001               	movlw	1
 16068     15E5  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16069     15E6  3000               	movlw	0
 16070     15E7  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16071     15E8  3001               	movlw	1
 16072     15E9  00F0               	movwf	??_USBCtrlTrfTxService
 16073     15EA  0870               	movf	??_USBCtrlTrfTxService,w
 16074     15EB  0022               	movlb	2	; select bank2
 16075     15EC  07C6               	addwf	_pDst^(0+256),f
 16076                           
 16077                           ;usb/usb_device.c: 1826:             byteToSend--;
 16078     15ED  3001               	movlw	1
 16079     15EE  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16080     15EF                     i1l4250:
 16081                           
 16082                           ;usb/usb_device.c: 1823:         while(byteToSend)
 16083     15EF  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16084     15F0  1903               	btfsc	3,2
 16085     15F1  0008               	return
 16086     15F2  2DD9               	goto	i1l4242
 16087     15F3                     __end_of_USBCtrlTrfTxService:
 16088                           
 16089                           	psect	text85
 16090     1C66                     __ptext85:	
 16091 ;; *************** function _TMR2_ISR *****************
 16092 ;; Defined at:
 16093 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;		None
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;		None
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  1    wreg      void 
 16100 ;; Registers used:
 16101 ;;		wreg, status,2, status,0, pclath, cstack
 16102 ;; Tracked objects:
 16103 ;;		On entry : 1F/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;Total ram usage:        0 bytes
 16112 ;; Hardware stack levels used: 1
 16113 ;; Hardware stack levels required when called: 1
 16114 ;; This function calls:
 16115 ;;		NULL
 16116 ;;		_SysTimeInterrupt
 16117 ;;		_TMR2_DefaultInterruptHandler
 16118 ;; This function is called by:
 16119 ;;		_INTERRUPT_InterruptManager
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123     1C66                     _TMR2_ISR:	
 16124                           ;psect for function _TMR2_ISR
 16125                           
 16126                           
 16127                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 16131     1C66  1091               	bcf	17,1	;volatile
 16132                           
 16133                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 16134     1C67  0023               	movlb	3	; select bank3
 16135     1C68  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16136     1C69  0458               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 16137     1C6A  1903               	btfsc	3,2
 16138     1C6B  0008               	return
 16139                           
 16140                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 16141     1C6C  0858               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 16142     1C6D  008A               	movwf	10
 16143     1C6E  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16144     1C6F  000A               	callw
 16145     1C70  319C               	pagesel	$
 16146     1C71  0008               	return
 16147     1C72                     __end_of_TMR2_ISR:
 16148                           
 16149                           	psect	text86
 16150     1C3D                     __ptext86:	
 16151 ;; *************** function _SysTimeInterrupt *****************
 16152 ;; Defined at:
 16153 ;;		line 24 in file "systime.c"
 16154 ;; Parameters:    Size  Location     Type
 16155 ;;		None
 16156 ;; Auto vars:     Size  Location     Type
 16157 ;;		None
 16158 ;; Return value:  Size  Location     Type
 16159 ;;                  1    wreg      void 
 16160 ;; Registers used:
 16161 ;;		wreg
 16162 ;; Tracked objects:
 16163 ;;		On entry : 1F/3
 16164 ;;		On exit  : 1F/3
 16165 ;;		Unchanged: 0/0
 16166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;Total ram usage:        0 bytes
 16172 ;; Hardware stack levels used: 1
 16173 ;; This function calls:
 16174 ;;		Nothing
 16175 ;; This function is called by:
 16176 ;;		_SysTime_Init
 16177 ;;		_TMR2_ISR
 16178 ;; This function uses a non-reentrant model
 16179 ;;
 16180                           
 16181     1C3D                     _SysTimeInterrupt:	
 16182                           ;psect for function _SysTimeInterrupt
 16183                           
 16184                           
 16185                           ;systime.c: 26:     ++timeMs;
 16186                           
 16187                           ;incstack = 0
 16188                           ; Regs used in _SysTimeInterrupt: [wreg]
 16189     1C3D  3001               	movlw	1
 16190     1C3E  07B8               	addwf	_timeMs^(0+384),f
 16191     1C3F  3000               	movlw	0
 16192     1C40  3DB9               	addwfc	(_timeMs+1)^(0+384),f
 16193     1C41  3000               	movlw	0
 16194     1C42  3DBA               	addwfc	(_timeMs+2)^(0+384),f
 16195     1C43  3000               	movlw	0
 16196     1C44  3DBB               	addwfc	(_timeMs+3)^(0+384),f
 16197     1C45  0008               	return
 16198     1C46                     __end_of_SysTimeInterrupt:
 16199                           
 16200                           	psect	text87
 16201     0800                     __ptext87:	
 16202 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 16203 ;; Defined at:
 16204 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 16205 ;; Parameters:    Size  Location     Type
 16206 ;;		None
 16207 ;; Auto vars:     Size  Location     Type
 16208 ;;		None
 16209 ;; Return value:  Size  Location     Type
 16210 ;;                  1    wreg      void 
 16211 ;; Registers used:
 16212 ;;		None
 16213 ;; Tracked objects:
 16214 ;;		On entry : 1F/3
 16215 ;;		On exit  : 1F/3
 16216 ;;		Unchanged: 1E/0
 16217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;Total ram usage:        0 bytes
 16223 ;; Hardware stack levels used: 1
 16224 ;; This function calls:
 16225 ;;		Nothing
 16226 ;; This function is called by:
 16227 ;;		_TMR2_Initialize
 16228 ;;		_TMR2_ISR
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232     0800                     _TMR2_DefaultInterruptHandler:	
 16233                           ;psect for function _TMR2_DefaultInterruptHandler
 16234                           
 16235                           
 16236                           ;incstack = 0
 16237                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 16238     0800  0008               	return
 16239     0801                     __end_of_TMR2_DefaultInterruptHandler:
 16240                           
 16241                           	psect	text88
 16242     1C50                     __ptext88:	
 16243 ;; *************** function _PIN_MANAGER_IOC *****************
 16244 ;; Defined at:
 16245 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 16246 ;; Parameters:    Size  Location     Type
 16247 ;;		None
 16248 ;; Auto vars:     Size  Location     Type
 16249 ;;		None
 16250 ;; Return value:  Size  Location     Type
 16251 ;;                  1    wreg      void 
 16252 ;; Registers used:
 16253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16254 ;; Tracked objects:
 16255 ;;		On entry : 0/0
 16256 ;;		On exit  : 1F/7
 16257 ;;		Unchanged: 0/0
 16258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;Total ram usage:        0 bytes
 16264 ;; Hardware stack levels used: 1
 16265 ;; Hardware stack levels required when called: 4
 16266 ;; This function calls:
 16267 ;;		_IOCAF4_ISR
 16268 ;;		_IOCAF5_ISR
 16269 ;; This function is called by:
 16270 ;;		_INTERRUPT_InterruptManager
 16271 ;; This function uses a non-reentrant model
 16272 ;;
 16273                           
 16274     1C50                     _PIN_MANAGER_IOC:	
 16275                           ;psect for function _PIN_MANAGER_IOC
 16276                           
 16277                           
 16278                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 16279                           
 16280                           ;incstack = 0
 16281                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16282     1C50  0027               	movlb	7	; select bank7
 16283     1C51  1E13               	btfss	19,4	;volatile
 16284     1C52  2C56               	goto	i1l6444
 16285                           
 16286                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 16287     1C53  319C  247E  319C   	fcall	_IOCAF4_ISR
 16288     1C56                     i1l6444:
 16289                           
 16290                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 16291     1C56  1E93               	btfss	19,5	;volatile
 16292     1C57  0008               	return
 16293                           
 16294                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 16295     1C58  319C  248B         	fcall	_IOCAF5_ISR
 16296     1C5A  0008               	return
 16297     1C5B                     __end_of_PIN_MANAGER_IOC:
 16298                           
 16299                           	psect	text89
 16300     1C8B                     __ptext89:	
 16301 ;; *************** function _IOCAF5_ISR *****************
 16302 ;; Defined at:
 16303 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;		None
 16306 ;; Auto vars:     Size  Location     Type
 16307 ;;		None
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      void 
 16310 ;; Registers used:
 16311 ;;		wreg, status,2, status,0, pclath, cstack
 16312 ;; Tracked objects:
 16313 ;;		On entry : 1F/7
 16314 ;;		On exit  : 1F/7
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;Total ram usage:        0 bytes
 16322 ;; Hardware stack levels used: 1
 16323 ;; Hardware stack levels required when called: 2
 16324 ;; This function calls:
 16325 ;;		NULL
 16326 ;;		_IOCAF5_DefaultInterruptHandler
 16327 ;;		_PS2Keyboard_DataInterrupt
 16328 ;; This function is called by:
 16329 ;;		_PIN_MANAGER_IOC
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333     1C8B                     _IOCAF5_ISR:	
 16334                           ;psect for function _IOCAF5_ISR
 16335                           
 16336                           
 16337                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 16338                           
 16339                           ;incstack = 0
 16340                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 16341     1C8B  0023               	movlb	3	; select bank3
 16342     1C8C  0865               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16343     1C8D  0466               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16344     1C8E  1903               	btfsc	3,2
 16345     1C8F  2C95               	goto	i1l5254
 16346                           
 16347                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 16348     1C90  0866               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16349     1C91  008A               	movwf	10
 16350     1C92  0865               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16351     1C93  000A               	callw
 16352     1C94  319C               	pagesel	$
 16353     1C95                     i1l5254:
 16354                           
 16355                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 16356     1C95  0027               	movlb	7	; select bank7
 16357     1C96  1293               	bcf	19,5	;volatile
 16358     1C97  0008               	return
 16359     1C98                     __end_of_IOCAF5_ISR:
 16360                           
 16361                           	psect	text90
 16362     1085                     __ptext90:	
 16363 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 16364 ;; Defined at:
 16365 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 16366 ;; Parameters:    Size  Location     Type
 16367 ;;		None
 16368 ;; Auto vars:     Size  Location     Type
 16369 ;;		None
 16370 ;; Return value:  Size  Location     Type
 16371 ;;                  1    wreg      void 
 16372 ;; Registers used:
 16373 ;;		None
 16374 ;; Tracked objects:
 16375 ;;		On entry : 1F/3
 16376 ;;		On exit  : 1F/3
 16377 ;;		Unchanged: 1E/0
 16378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;Total ram usage:        0 bytes
 16384 ;; Hardware stack levels used: 1
 16385 ;; This function calls:
 16386 ;;		Nothing
 16387 ;; This function is called by:
 16388 ;;		_PIN_MANAGER_Initialize
 16389 ;;		_IOCAF5_ISR
 16390 ;; This function uses a non-reentrant model
 16391 ;;
 16392                           
 16393     1085                     _IOCAF5_DefaultInterruptHandler:	
 16394                           ;psect for function _IOCAF5_DefaultInterruptHandler
 16395                           
 16396                           
 16397                           ;incstack = 0
 16398                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 16399     1085  0008               	return
 16400     1086                     __end_of_IOCAF5_DefaultInterruptHandler:
 16401                           
 16402                           	psect	text91
 16403     1CBF                     __ptext91:	
 16404 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 16405 ;; Defined at:
 16406 ;;		line 57 in file "ps2_keyboard.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;		None
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;		None
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, status,2, status,0, pclath, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 1F/3
 16417 ;;		On exit  : 1E/2
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;Total ram usage:        0 bytes
 16425 ;; Hardware stack levels used: 1
 16426 ;; Hardware stack levels required when called: 1
 16427 ;; This function calls:
 16428 ;;		_SysTime_GetCurrentTimeMs
 16429 ;; This function is called by:
 16430 ;;		_PS2Keyboard_Init
 16431 ;;		_IOCAF5_ISR
 16432 ;; This function uses a non-reentrant model
 16433 ;;
 16434                           
 16435     1CBF                     _PS2Keyboard_DataInterrupt:	
 16436                           ;psect for function _PS2Keyboard_DataInterrupt
 16437                           
 16438                           
 16439                           ;ps2_keyboard.c: 58:     if (keyboardState == KeyboardIdle) {
 16440                           
 16441                           ;incstack = 0
 16442                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 16443     1CBF  0022               	movlb	2	; select bank2
 16444     1CC0  083A               	movf	_keyboardState^(0+256),w
 16445     1CC1  1D03               	btfss	3,2
 16446     1CC2  0008               	return
 16447                           
 16448                           ;ps2_keyboard.c: 59:         keyboardState = KeyboardStart;
 16449     1CC3  3001               	movlw	1
 16450     1CC4  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16451                           
 16452                           ;ps2_keyboard.c: 60:         prevTimeMs = SysTime_GetCurrentTimeMs();
 16453     1CC5  319C  2446         	fcall	_SysTime_GetCurrentTimeMs
 16454     1CC7  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 16455     1CC8  00BF               	movwf	(_prevTimeMs+3)^(0+384)	;volatile
 16456     1CC9  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 16457     1CCA  00BE               	movwf	(_prevTimeMs+2)^(0+384)	;volatile
 16458     1CCB  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 16459     1CCC  00BD               	movwf	(_prevTimeMs+1)^(0+384)	;volatile
 16460     1CCD  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 16461     1CCE  00BC               	movwf	_prevTimeMs^(0+384)	;volatile
 16462     1CCF  0008               	return
 16463     1CD0                     __end_of_PS2Keyboard_DataInterrupt:
 16464                           
 16465                           	psect	text92
 16466     1C7E                     __ptext92:	
 16467 ;; *************** function _IOCAF4_ISR *****************
 16468 ;; Defined at:
 16469 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;		None
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;		None
 16474 ;; Return value:  Size  Location     Type
 16475 ;;                  1    wreg      void 
 16476 ;; Registers used:
 16477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16478 ;; Tracked objects:
 16479 ;;		On entry : 1F/7
 16480 ;;		On exit  : 1F/7
 16481 ;;		Unchanged: 0/0
 16482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;Total ram usage:        0 bytes
 16488 ;; Hardware stack levels used: 1
 16489 ;; Hardware stack levels required when called: 3
 16490 ;; This function calls:
 16491 ;;		NULL
 16492 ;;		_IOCAF4_DefaultInterruptHandler
 16493 ;;		_PS2Keyboard_ClockInterrupt
 16494 ;; This function is called by:
 16495 ;;		_PIN_MANAGER_IOC
 16496 ;; This function uses a non-reentrant model
 16497 ;;
 16498                           
 16499     1C7E                     _IOCAF4_ISR:	
 16500                           ;psect for function _IOCAF4_ISR
 16501                           
 16502                           
 16503                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 16504                           
 16505                           ;incstack = 0
 16506                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16507     1C7E  0023               	movlb	3	; select bank3
 16508     1C7F  0867               	movf	_IOCAF4_InterruptHandler^(0+384),w
 16509     1C80  0468               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 16510     1C81  1903               	btfsc	3,2
 16511     1C82  2C88               	goto	i1l6402
 16512                           
 16513                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 16514     1C83  0868               	movf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 16515     1C84  008A               	movwf	10
 16516     1C85  0867               	movf	_IOCAF4_InterruptHandler^(0+384),w
 16517     1C86  000A               	callw
 16518     1C87  319C               	pagesel	$
 16519     1C88                     i1l6402:
 16520                           
 16521                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 16522     1C88  0027               	movlb	7	; select bank7
 16523     1C89  1213               	bcf	19,4	;volatile
 16524     1C8A  0008               	return
 16525     1C8B                     __end_of_IOCAF4_ISR:
 16526                           
 16527                           	psect	text93
 16528     1084                     __ptext93:	
 16529 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 16530 ;; Defined at:
 16531 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;		None
 16534 ;; Auto vars:     Size  Location     Type
 16535 ;;		None
 16536 ;; Return value:  Size  Location     Type
 16537 ;;                  1    wreg      void 
 16538 ;; Registers used:
 16539 ;;		None
 16540 ;; Tracked objects:
 16541 ;;		On entry : 1F/3
 16542 ;;		On exit  : 1F/3
 16543 ;;		Unchanged: 1E/0
 16544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16549 ;;Total ram usage:        0 bytes
 16550 ;; Hardware stack levels used: 1
 16551 ;; This function calls:
 16552 ;;		Nothing
 16553 ;; This function is called by:
 16554 ;;		_PIN_MANAGER_Initialize
 16555 ;;		_IOCAF4_ISR
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559     1084                     _IOCAF4_DefaultInterruptHandler:	
 16560                           ;psect for function _IOCAF4_DefaultInterruptHandler
 16561                           
 16562                           
 16563                           ;incstack = 0
 16564                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 16565     1084  0008               	return
 16566     1085                     __end_of_IOCAF4_DefaultInterruptHandler:
 16567                           
 16568                           	psect	text94
 16569     0F46                     __ptext94:	
 16570 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 16571 ;; Defined at:
 16572 ;;		line 64 in file "ps2_keyboard.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;		None
 16577 ;; Return value:  Size  Location     Type
 16578 ;;                  1    wreg      void 
 16579 ;; Registers used:
 16580 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16581 ;; Tracked objects:
 16582 ;;		On entry : 1F/3
 16583 ;;		On exit  : 1F/3
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;Total ram usage:        4 bytes
 16591 ;; Hardware stack levels used: 1
 16592 ;; Hardware stack levels required when called: 2
 16593 ;; This function calls:
 16594 ;;		_SysTime_GetCurrentTimeMs
 16595 ;;		i1_GenericQueue_Enqueue
 16596 ;; This function is called by:
 16597 ;;		_PS2Keyboard_Init
 16598 ;;		_IOCAF4_ISR
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602     0F46                     _PS2Keyboard_ClockInterrupt:	
 16603                           ;psect for function _PS2Keyboard_ClockInterrupt
 16604                           
 16605                           
 16606                           ;ps2_keyboard.c: 65:     if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 16607                           
 16608                           ;incstack = 0
 16609                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16610     0F46  319C  2446  318F   	fcall	_SysTime_GetCurrentTimeMs
 16611     0F49  083C               	movf	_prevTimeMs^(0+384),w	;volatile
 16612     0F4A  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 16613     0F4B  0020               	movlb	0	; select bank0
 16614     0F4C  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16615     0F4D  0023               	movlb	3	; select bank3
 16616     0F4E  083D               	movf	(_prevTimeMs+1)^(0+384),w	;volatile
 16617     0F4F  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 16618     0F50  0020               	movlb	0	; select bank0
 16619     0F51  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 16620     0F52  0023               	movlb	3	; select bank3
 16621     0F53  083E               	movf	(_prevTimeMs+2)^(0+384),w	;volatile
 16622     0F54  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 16623     0F55  0020               	movlb	0	; select bank0
 16624     0F56  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 16625     0F57  0023               	movlb	3	; select bank3
 16626     0F58  083F               	movf	(_prevTimeMs+3)^(0+384),w	;volatile
 16627     0F59  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 16628     0F5A  0020               	movlb	0	; select bank0
 16629     0F5B  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 16630     0F5C  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 16631     0F5D  1D03               	btfss	3,2
 16632     0F5E  2F69               	goto	i1l6338
 16633     0F5F  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 16634     0F60  1D03               	btfss	3,2
 16635     0F61  2F69               	goto	i1l6338
 16636     0F62  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 16637     0F63  1D03               	btfss	3,2
 16638     0F64  2F69               	goto	i1l6338
 16639     0F65  30FA               	movlw	250
 16640     0F66  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 16641     0F67  1C03               	btfss	3,0
 16642     0F68  2FDD               	goto	i1l6390
 16643     0F69                     i1l6338:
 16644                           
 16645                           ;ps2_keyboard.c: 66:         keyboardState = KeyboardStart;
 16646     0F69  3001               	movlw	1
 16647     0F6A  0022               	movlb	2	; select bank2
 16648     0F6B  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16649     0F6C  2FDD               	goto	i1l6390
 16650     0F6D                     i1l6340:
 16651                           
 16652                           ;ps2_keyboard.c: 70:             keyboardIndexData = 0;
 16653     0F6D  0022               	movlb	2	; select bank2
 16654     0F6E  01B9               	clrf	_keyboardIndexData^(0+256)	;volatile
 16655                           
 16656                           ;ps2_keyboard.c: 71:             keyboardOnesCount = 0;
 16657     0F6F  01B8               	clrf	_keyboardOnesCount^(0+256)	;volatile
 16658                           
 16659                           ;ps2_keyboard.c: 72:             keyboardScanCode.value = 0;
 16660     0F70  0023               	movlb	3	; select bank3
 16661     0F71  01E1               	clrf	_keyboardScanCode^(0+384)
 16662     0F72                     i1l6342:
 16663                           
 16664                           ;ps2_keyboard.c: 73:             keyboardState = KeyboardData;
 16665     0F72  3002               	movlw	2
 16666     0F73  0022               	movlb	2	; select bank2
 16667     0F74  2FAE               	goto	L20
 16668     0F75                     i1l6344:	
 16669                           ;ps2_keyboard.c: 74:             break;
 16670                           
 16671                           
 16672                           ;ps2_keyboard.c: 76:             keyboardData = PORTAbits.RA5;
 16673     0F75  3000               	movlw	0
 16674     0F76  1A8C               	btfsc	12,5	;volatile
 16675     0F77  3001               	movlw	1
 16676     0F78  0022               	movlb	2	; select bank2
 16677     0F79  00B6               	movwf	_keyboardData^(0+256)	;volatile
 16678                           
 16679                           ;ps2_keyboard.c: 77:             keyboardScanCode.value |= keyboardData << keyboardIndex
      +                          Data;
 16680     0F7A  0836               	movf	_keyboardData^(0+256),w	;volatile
 16681     0F7B  0020               	movlb	0	; select bank0
 16682     0F7C  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16683     0F7D  0022               	movlb	2	; select bank2
 16684     0F7E  0A39               	incf	_keyboardIndexData^(0+256),w	;volatile
 16685     0F7F  0020               	movlb	0	; select bank0
 16686     0F80  2F82               	goto	u598_24
 16687     0F81                     u598_25:
 16688     0F81  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 16689     0F82                     u598_24:
 16690     0F82  0B89               	decfsz	9,f
 16691     0F83  2F81               	goto	u598_25
 16692     0F84  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 16693     0F85  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 16694     0F86  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 16695     0F87  0023               	movlb	3	; select bank3
 16696     0F88  04E1               	iorwf	_keyboardScanCode^(0+384),f
 16697                           
 16698                           ;ps2_keyboard.c: 78:             keyboardOnesCount += keyboardData;
 16699     0F89  0022               	movlb	2	; select bank2
 16700     0F8A  0836               	movf	_keyboardData^(0+256),w	;volatile
 16701     0F8B  0020               	movlb	0	; select bank0
 16702     0F8C  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16703     0F8D  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 16704     0F8E  0022               	movlb	2	; select bank2
 16705     0F8F  07B8               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 16706                           
 16707                           ;ps2_keyboard.c: 79:             keyboardIndexData += 1;
 16708     0F90  3001               	movlw	1
 16709     0F91  0020               	movlb	0	; select bank0
 16710     0F92  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16711     0F93  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 16712     0F94  0022               	movlb	2	; select bank2
 16713     0F95  07B9               	addwf	_keyboardIndexData^(0+256),f	;volatile
 16714                           
 16715                           ;ps2_keyboard.c: 80:             if (keyboardIndexData == 8) {
 16716     0F96  3008               	movlw	8
 16717     0F97  0639               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 16718     0F98  1D03               	btfss	3,2
 16719     0F99  2F72               	goto	i1l6342
 16720                           
 16721                           ;ps2_keyboard.c: 81:                 keyboardState = KeyboardParity;
 16722     0F9A  3003               	movlw	3
 16723     0F9B  2FAE               	goto	L20
 16724     0F9C                     i1l6358:	
 16725                           ;ps2_keyboard.c: 82:             } else {
 16726                           
 16727                           
 16728                           ;ps2_keyboard.c: 87:             keyboardData = PORTAbits.RA5;
 16729     0F9C  3000               	movlw	0
 16730     0F9D  1A8C               	btfsc	12,5	;volatile
 16731     0F9E  3001               	movlw	1
 16732     0F9F  0022               	movlb	2	; select bank2
 16733     0FA0  00B6               	movwf	_keyboardData^(0+256)	;volatile
 16734                           
 16735                           ;ps2_keyboard.c: 88:             keyboardOnesCount += keyboardData;
 16736     0FA1  0836               	movf	_keyboardData^(0+256),w	;volatile
 16737     0FA2  0020               	movlb	0	; select bank0
 16738     0FA3  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16739     0FA4  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 16740     0FA5  0022               	movlb	2	; select bank2
 16741     0FA6  07B8               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 16742                           
 16743                           ;ps2_keyboard.c: 89:             keyboardScanCodeValid = keyboardOnesCount & 0x01;
 16744     0FA7  1C38               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 16745     0FA8  2FAB               	goto	u600_20
 16746     0FA9  3001               	movlw	1
 16747     0FAA  2FAC               	goto	u601_20
 16748     0FAB                     u600_20:
 16749     0FAB  3000               	movlw	0
 16750     0FAC                     u601_20:
 16751     0FAC  00B7               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 16752                           
 16753                           ;ps2_keyboard.c: 90:             keyboardState = KeyboardStop;
 16754     0FAD  3004               	movlw	4
 16755     0FAE                     L20:
 16756     0FAE  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16757                           
 16758                           ;ps2_keyboard.c: 91:             break;
 16759     0FAF  2FF5               	goto	i1l6392
 16760     0FB0                     i1l6366:
 16761                           
 16762                           ;ps2_keyboard.c: 93:             if (keyboardScanCode.value == 0xE0) {
 16763     0FB0  30E0               	movlw	224
 16764     0FB1  0023               	movlb	3	; select bank3
 16765     0FB2  0661               	xorwf	_keyboardScanCode^(0+384),w
 16766     0FB3  1D03               	btfss	3,2
 16767     0FB4  2FB9               	goto	i1l6370
 16768                           
 16769                           ;ps2_keyboard.c: 94:                 keyboardIsExtend = 1;
 16770     0FB5  3001               	movlw	1
 16771     0FB6  0022               	movlb	2	; select bank2
 16772     0FB7  00B5               	movwf	_keyboardIsExtend^(0+256)	;volatile
 16773                           
 16774                           ;ps2_keyboard.c: 95:             } else if (keyboardScanCode.value == 0xF0) {
 16775     0FB8  2FDA               	goto	i1l6384
 16776     0FB9                     i1l6370:
 16777     0FB9  30F0               	movlw	240
 16778     0FBA  0661               	xorwf	_keyboardScanCode^(0+384),w
 16779     0FBB  1D03               	btfss	3,2
 16780     0FBC  2FC0               	goto	i1l6374
 16781                           
 16782                           ;ps2_keyboard.c: 96:                 keyboardIsBreak = 1;
 16783     0FBD  3001               	movlw	1
 16784     0FBE  00DD               	movwf	_keyboardIsBreak^(0+384)	;volatile
 16785                           
 16786                           ;ps2_keyboard.c: 97:             } else {
 16787     0FBF  2FDA               	goto	i1l6384
 16788     0FC0                     i1l6374:
 16789                           
 16790                           ;ps2_keyboard.c: 98:                 keyboardScanCode.isBreak = keyboardIsBreak;
 16791     0FC0  085D               	movf	_keyboardIsBreak^(0+384),w	;volatile
 16792     0FC1  00E3               	movwf	(_keyboardScanCode^(0+384)+2)
 16793                           
 16794                           ;ps2_keyboard.c: 99:                 keyboardScanCode.isExtend = keyboardIsExtend;
 16795     0FC2  0022               	movlb	2	; select bank2
 16796     0FC3  0835               	movf	_keyboardIsExtend^(0+256),w	;volatile
 16797     0FC4  0023               	movlb	3	; select bank3
 16798     0FC5  00E2               	movwf	(_keyboardScanCode^(0+384)+1)
 16799                           
 16800                           ;ps2_keyboard.c: 100:                 if (keyboardScanCodeValid) {
 16801     0FC6  0022               	movlb	2	; select bank2
 16802     0FC7  0837               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 16803     0FC8  1903               	btfsc	3,2
 16804     0FC9  2FD6               	goto	i1l6380
 16805                           
 16806                           ;ps2_keyboard.c: 101:                     GenericQueue_Enqueue(&keyboardScanCodeQueue, &
      +                          keyboardScanCode);
 16807     0FCA  3091               	movlw	145
 16808     0FCB  0020               	movlb	0	; select bank0
 16809     0FCC  00D5               	movwf	i1GenericQueue_Enqueue@q
 16810     0FCD  3023               	movlw	35
 16811     0FCE  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 16812     0FCF  30E1               	movlw	low _keyboardScanCode
 16813     0FD0  00D7               	movwf	i1GenericQueue_Enqueue@item
 16814     0FD1  3001               	movlw	high _keyboardScanCode
 16815     0FD2  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 16816     0FD3  3196  265A  318F   	fcall	i1_GenericQueue_Enqueue
 16817     0FD6                     i1l6380:
 16818                           
 16819                           ;ps2_keyboard.c: 103:                 keyboardIsBreak = 0;
 16820     0FD6  0023               	movlb	3	; select bank3
 16821     0FD7  01DD               	clrf	_keyboardIsBreak^(0+384)	;volatile
 16822                           
 16823                           ;ps2_keyboard.c: 104:                 keyboardIsExtend = 0;
 16824     0FD8  0022               	movlb	2	; select bank2
 16825     0FD9  01B5               	clrf	_keyboardIsExtend^(0+256)	;volatile
 16826     0FDA                     i1l6384:
 16827                           
 16828                           ;ps2_keyboard.c: 106:             keyboardState = KeyboardIdle;
 16829     0FDA  0022               	movlb	2	; select bank2
 16830     0FDB  01BA               	clrf	_keyboardState^(0+256)	;volatile
 16831                           
 16832                           ;ps2_keyboard.c: 107:             break;
 16833     0FDC  2FF5               	goto	i1l6392
 16834     0FDD                     i1l6390:
 16835     0FDD  0022               	movlb	2	; select bank2
 16836     0FDE  083A               	movf	_keyboardState^(0+256),w	;volatile
 16837     0FDF  0020               	movlb	0	; select bank0
 16838     0FE0  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 16839     0FE1  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 16840                           
 16841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16842                           ; Switch size 1, requested type "simple"
 16843                           ; Number of cases is 1, Range of values is 0 to 0
 16844                           ; switch strategies available:
 16845                           ; Name         Instructions Cycles
 16846                           ; simple_byte            4     3 (average)
 16847                           ; direct_byte            8     6 (fixed)
 16848                           ; jumptable            260     6 (fixed)
 16849                           ;	Chosen strategy is simple_byte
 16850     0FE2  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 16851     0FE3  3A00               	xorlw	0	; case 0
 16852     0FE4  1903               	skipnz
 16853     0FE5  2FE7               	goto	i1l6832
 16854     0FE6  2FDA               	goto	i1l6384
 16855     0FE7                     i1l6832:
 16856                           
 16857                           ; Switch size 1, requested type "simple"
 16858                           ; Number of cases is 4, Range of values is 1 to 4
 16859                           ; switch strategies available:
 16860                           ; Name         Instructions Cycles
 16861                           ; simple_byte           13     7 (average)
 16862                           ; direct_byte           17     9 (fixed)
 16863                           ; jumptable            263     9 (fixed)
 16864                           ;	Chosen strategy is simple_byte
 16865     0FE7  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 16866     0FE8  3A01               	xorlw	1	; case 1
 16867     0FE9  1903               	skipnz
 16868     0FEA  2F6D               	goto	i1l6340
 16869     0FEB  3A03               	xorlw	3	; case 2
 16870     0FEC  1903               	skipnz
 16871     0FED  2F75               	goto	i1l6344
 16872     0FEE  3A01               	xorlw	1	; case 3
 16873     0FEF  1903               	skipnz
 16874     0FF0  2F9C               	goto	i1l6358
 16875     0FF1  3A07               	xorlw	7	; case 4
 16876     0FF2  1903               	skipnz
 16877     0FF3  2FB0               	goto	i1l6366
 16878     0FF4  2FDA               	goto	i1l6384
 16879     0FF5                     i1l6392:
 16880                           
 16881                           ;ps2_keyboard.c: 112:     prevTimeMs = SysTime_GetCurrentTimeMs();
 16882     0FF5  319C  2446         	fcall	_SysTime_GetCurrentTimeMs
 16883     0FF7  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 16884     0FF8  00BF               	movwf	(_prevTimeMs+3)^(0+384)	;volatile
 16885     0FF9  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 16886     0FFA  00BE               	movwf	(_prevTimeMs+2)^(0+384)	;volatile
 16887     0FFB  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 16888     0FFC  00BD               	movwf	(_prevTimeMs+1)^(0+384)	;volatile
 16889     0FFD  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 16890     0FFE  00BC               	movwf	_prevTimeMs^(0+384)	;volatile
 16891     0FFF  0008               	return
 16892     1000                     __end_of_PS2Keyboard_ClockInterrupt:
 16893                           
 16894                           	psect	text95
 16895     165A                     __ptext95:	
 16896 ;; *************** function i1_GenericQueue_Enqueue *****************
 16897 ;; Defined at:
 16898 ;;		line 19 in file "generic_queue.c"
 16899 ;; Parameters:    Size  Location     Type
 16900 ;;  q               2    5[BANK0 ] PTR struct .
 16901 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 16902 ;;  item            2    7[BANK0 ] PTR const void 
 16903 ;;		 -> keyboardScanCode(3), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
 16904 ;; Auto vars:     Size  Location     Type
 16905 ;;		None
 16906 ;; Return value:  Size  Location     Type
 16907 ;;                  1    wreg      void 
 16908 ;; Registers used:
 16909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16910 ;; Tracked objects:
 16911 ;;		On entry : 1F/0
 16912 ;;		On exit  : 1F/0
 16913 ;;		Unchanged: 0/0
 16914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16915 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;Total ram usage:        7 bytes
 16920 ;; Hardware stack levels used: 1
 16921 ;; Hardware stack levels required when called: 1
 16922 ;; This function calls:
 16923 ;;		i1_GenericQueue_IsFull
 16924 ;;		i1___awmod
 16925 ;;		i1___wmul
 16926 ;;		i1_memcpy
 16927 ;; This function is called by:
 16928 ;;		_PS2Keyboard_ClockInterrupt
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932     165A                     i1_GenericQueue_Enqueue:	
 16933                           ;psect for function i1_GenericQueue_Enqueue
 16934                           
 16935                           
 16936                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16940     165A  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 16941     165B  00F1               	movwf	i1GenericQueue_IsFull@q+1
 16942     165C  0855               	movf	i1GenericQueue_Enqueue@q,w
 16943     165D  00F0               	movwf	i1GenericQueue_IsFull@q
 16944     165E  319D  2505  3196   	fcall	i1_GenericQueue_IsFull
 16945     1661  0870               	movf	?i1_GenericQueue_IsFull,w
 16946     1662  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 16947     1663  1D03               	btfss	3,2
 16948     1664  0008               	return
 16949                           
 16950                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 16951     1665  0855               	movf	i1GenericQueue_Enqueue@q,w
 16952     1666  3E5D               	addlw	93
 16953     1667  0086               	movwf	6
 16954     1668  3000               	movlw	0
 16955     1669  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16956     166A  0087               	movwf	7
 16957     166B  0801               	movf	1,w
 16958     166C  00D9               	movwf	??i1_GenericQueue_Enqueue
 16959     166D  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 16960     166E  0859               	movf	??i1_GenericQueue_Enqueue,w
 16961     166F  00F0               	movwf	i1___wmul@multiplier
 16962     1670  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 16963     1671  00F1               	movwf	i1___wmul@multiplier+1
 16964     1672  0855               	movf	i1GenericQueue_Enqueue@q,w
 16965     1673  3E5A               	addlw	90
 16966     1674  0086               	movwf	6
 16967     1675  3000               	movlw	0
 16968     1676  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16969     1677  0087               	movwf	7
 16970     1678  3F40               	moviw [0]fsr1
 16971     1679  00F2               	movwf	i1___wmul@multiplicand
 16972     167A  3F41               	moviw [1]fsr1
 16973     167B  00F3               	movwf	i1___wmul@multiplicand+1
 16974     167C  319D  25E8  3196   	fcall	i1___wmul
 16975     167F  0870               	movf	?i1___wmul,w
 16976     1680  0755               	addwf	i1GenericQueue_Enqueue@q,w
 16977     1681  00F6               	movwf	i1memcpy@d1
 16978     1682  0871               	movf	?i1___wmul+1,w
 16979     1683  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16980     1684  00F7               	movwf	i1memcpy@d1+1
 16981     1685  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 16982     1686  00F9               	movwf	i1memcpy@s1+1
 16983     1687  0857               	movf	i1GenericQueue_Enqueue@item,w
 16984     1688  00F8               	movwf	i1memcpy@s1
 16985     1689  0855               	movf	i1GenericQueue_Enqueue@q,w
 16986     168A  3E5A               	addlw	90
 16987     168B  0086               	movwf	6
 16988     168C  3000               	movlw	0
 16989     168D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16990     168E  0087               	movwf	7
 16991     168F  3F40               	moviw [0]fsr1
 16992     1690  00FA               	movwf	i1memcpy@n
 16993     1691  3F41               	moviw [1]fsr1
 16994     1692  00FB               	movwf	i1memcpy@n+1
 16995     1693  319F  2735  3196   	fcall	i1_memcpy
 16996                           
 16997                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 16998     1696  300F               	movlw	15
 16999     1697  00F0               	movwf	i1___awmod@divisor
 17000     1698  3000               	movlw	0
 17001     1699  00F1               	movwf	i1___awmod@divisor+1
 17002     169A  0855               	movf	i1GenericQueue_Enqueue@q,w
 17003     169B  3E5D               	addlw	93
 17004     169C  0086               	movwf	6
 17005     169D  3000               	movlw	0
 17006     169E  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17007     169F  0087               	movwf	7
 17008     16A0  0801               	movf	1,w
 17009     16A1  3E01               	addlw	1
 17010     16A2  00F2               	movwf	i1___awmod@dividend
 17011     16A3  3000               	movlw	0
 17012     16A4  1803               	skipnc
 17013     16A5  3001               	movlw	1
 17014     16A6  00F3               	movwf	i1___awmod@dividend+1
 17015     16A7  3192  2253         	fcall	i1___awmod
 17016     16A9  0870               	movf	?i1___awmod,w
 17017     16AA  00D9               	movwf	??i1_GenericQueue_Enqueue
 17018     16AB  0855               	movf	i1GenericQueue_Enqueue@q,w
 17019     16AC  3E5D               	addlw	93
 17020     16AD  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 17021     16AE  3000               	movlw	0
 17022     16AF  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17023     16B0  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 17024     16B1  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 17025     16B2  0086               	movwf	6
 17026     16B3  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 17027     16B4  0087               	movwf	7
 17028     16B5  0859               	movf	??i1_GenericQueue_Enqueue,w
 17029     16B6  0081               	movwf	1
 17030                           
 17031                           ;generic_queue.c: 23:         q->size++;
 17032     16B7  3001               	movlw	1
 17033     16B8  00D9               	movwf	??i1_GenericQueue_Enqueue
 17034     16B9  0855               	movf	i1GenericQueue_Enqueue@q,w
 17035     16BA  3E5E               	addlw	94
 17036     16BB  0086               	movwf	6
 17037     16BC  3000               	movlw	0
 17038     16BD  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17039     16BE  0087               	movwf	7
 17040     16BF  0859               	movf	??i1_GenericQueue_Enqueue,w
 17041     16C0  0781               	addwf	1,f
 17042     16C1  0008               	return
 17043     16C2                     __end_ofi1_GenericQueue_Enqueue:
 17044                           
 17045                           	psect	text96
 17046     1F35                     __ptext96:	
 17047 ;; *************** function i1_memcpy *****************
 17048 ;; Defined at:
 17049 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 17050 ;; Parameters:    Size  Location     Type
 17051 ;;  d1              2    6[COMMON] PTR void 
 17052 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17053 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
 17054 ;;  s1              2    8[COMMON] PTR const void 
 17055 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCo
      +de_2876(1), 
 17056 ;;		 -> keyboard(100), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17057 ;;  n               2   10[COMMON] unsigned int 
 17058 ;; Auto vars:     Size  Location     Type
 17059 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 17060 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCo
      +de_2876(1), 
 17061 ;;		 -> keyboard(100), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17062 ;;  d               2    0[BANK0 ] PTR unsigned char 
 17063 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17064 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
 17065 ;;  tmp             1    4[BANK0 ] unsigned char 
 17066 ;; Return value:  Size  Location     Type
 17067 ;;                  2    6[COMMON] PTR void 
 17068 ;; Registers used:
 17069 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17070 ;; Tracked objects:
 17071 ;;		On entry : 1F/0
 17072 ;;		On exit  : 1F/0
 17073 ;;		Unchanged: 0/0
 17074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17075 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17076 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17078 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;Total ram usage:       11 bytes
 17080 ;; Hardware stack levels used: 1
 17081 ;; This function calls:
 17082 ;;		Nothing
 17083 ;; This function is called by:
 17084 ;;		_USBCtrlEPService
 17085 ;;		i1_GenericQueue_Enqueue
 17086 ;; This function uses a non-reentrant model
 17087 ;;
 17088                           
 17089     1F35                     i1_memcpy:	
 17090                           ;psect for function i1_memcpy
 17091                           
 17092                           
 17093                           ;incstack = 0
 17094                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 17095     1F35  0879               	movf	i1memcpy@s1+1,w
 17096     1F36  00D3               	movwf	i1memcpy@s+1
 17097     1F37  0878               	movf	i1memcpy@s1,w
 17098     1F38  00D2               	movwf	i1memcpy@s
 17099     1F39  0877               	movf	i1memcpy@d1+1,w
 17100     1F3A  00D1               	movwf	i1memcpy@d+1
 17101     1F3B  0876               	movf	i1memcpy@d1,w
 17102     1F3C  00D0               	movwf	i1memcpy@d
 17103     1F3D                     i1l4644:
 17104     1F3D  3001               	movlw	1
 17105     1F3E  02FA               	subwf	i1memcpy@n,f
 17106     1F3F  3000               	movlw	0
 17107     1F40  3BFB               	subwfb	i1memcpy@n+1,f
 17108     1F41  0A7A               	incf	i1memcpy@n,w
 17109     1F42  1903               	btfsc	3,2
 17110     1F43  0A7B               	incf	i1memcpy@n+1,w
 17111     1F44  1903               	btfsc	3,2
 17112     1F45  0008               	return
 17113     1F46  0852               	movf	i1memcpy@s,w
 17114     1F47  0086               	movwf	6
 17115     1F48  0853               	movf	i1memcpy@s+1,w
 17116     1F49  0087               	movwf	7
 17117     1F4A  0801               	movf	1,w
 17118     1F4B  00D4               	movwf	i1memcpy@tmp
 17119     1F4C  3001               	movlw	1
 17120     1F4D  07D2               	addwf	i1memcpy@s,f
 17121     1F4E  3000               	movlw	0
 17122     1F4F  3DD3               	addwfc	i1memcpy@s+1,f
 17123     1F50  0850               	movf	i1memcpy@d,w
 17124     1F51  0086               	movwf	6
 17125     1F52  0851               	movf	i1memcpy@d+1,w
 17126     1F53  0087               	movwf	7
 17127     1F54  0854               	movf	i1memcpy@tmp,w
 17128     1F55  0081               	movwf	1
 17129     1F56  3001               	movlw	1
 17130     1F57  07D0               	addwf	i1memcpy@d,f
 17131     1F58  3000               	movlw	0
 17132     1F59  3DD1               	addwfc	i1memcpy@d+1,f
 17133     1F5A  2F3D               	goto	i1l4644
 17134     1F5B                     __end_ofi1_memcpy:
 17135                           
 17136                           	psect	text97
 17137     1DE8                     __ptext97:	
 17138 ;; *************** function i1___wmul *****************
 17139 ;; Defined at:
 17140 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 17141 ;; Parameters:    Size  Location     Type
 17142 ;;  multiplier      2    0[COMMON] unsigned int 
 17143 ;;  multiplicand    2    2[COMMON] unsigned int 
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  product         2    4[COMMON] unsigned int 
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  2    0[COMMON] unsigned int 
 17148 ;; Registers used:
 17149 ;;		wreg, status,2, status,0
 17150 ;; Tracked objects:
 17151 ;;		On entry : 1F/0
 17152 ;;		On exit  : 1F/0
 17153 ;;		Unchanged: 1F/0
 17154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17155 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;Total ram usage:        6 bytes
 17160 ;; Hardware stack levels used: 1
 17161 ;; This function calls:
 17162 ;;		Nothing
 17163 ;; This function is called by:
 17164 ;;		i1_GenericQueue_Enqueue
 17165 ;; This function uses a non-reentrant model
 17166 ;;
 17167                           
 17168     1DE8                     i1___wmul:	
 17169                           ;psect for function i1___wmul
 17170                           
 17171                           
 17172                           ;incstack = 0
 17173                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 17174     1DE8  01F4               	clrf	i1___wmul@product
 17175     1DE9  01F5               	clrf	i1___wmul@product+1
 17176     1DEA                     i1l4586:
 17177     1DEA  1C70               	btfss	i1___wmul@multiplier,0
 17178     1DEB  2DF0               	goto	i1l1234
 17179     1DEC  0872               	movf	i1___wmul@multiplicand,w
 17180     1DED  07F4               	addwf	i1___wmul@product,f
 17181     1DEE  0873               	movf	i1___wmul@multiplicand+1,w
 17182     1DEF  3DF5               	addwfc	i1___wmul@product+1,f
 17183     1DF0                     i1l1234:
 17184     1DF0  3001               	movlw	1
 17185     1DF1                     u373_25:
 17186     1DF1  35F2               	lslf	i1___wmul@multiplicand,f
 17187     1DF2  0DF3               	rlf	i1___wmul@multiplicand+1,f
 17188     1DF3  0B89               	decfsz	9,f
 17189     1DF4  2DF1               	goto	u373_25
 17190     1DF5  3001               	movlw	1
 17191     1DF6                     u374_25:
 17192     1DF6  36F1               	lsrf	i1___wmul@multiplier+1,f
 17193     1DF7  0CF0               	rrf	i1___wmul@multiplier,f
 17194     1DF8  0B89               	decfsz	9,f
 17195     1DF9  2DF6               	goto	u374_25
 17196     1DFA  0870               	movf	i1___wmul@multiplier,w
 17197     1DFB  0471               	iorwf	i1___wmul@multiplier+1,w
 17198     1DFC  1D03               	btfss	3,2
 17199     1DFD  2DEA               	goto	i1l4586
 17200     1DFE  0875               	movf	i1___wmul@product+1,w
 17201     1DFF  00F1               	movwf	?i1___wmul+1
 17202     1E00  0874               	movf	i1___wmul@product,w
 17203     1E01  00F0               	movwf	?i1___wmul
 17204     1E02  0008               	return
 17205     1E03                     __end_ofi1___wmul:
 17206                           
 17207                           	psect	text98
 17208     1253                     __ptext98:	
 17209 ;; *************** function i1___awmod *****************
 17210 ;; Defined at:
 17211 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 17212 ;; Parameters:    Size  Location     Type
 17213 ;;  divisor         2    0[COMMON] int 
 17214 ;;  dividend        2    2[COMMON] int 
 17215 ;; Auto vars:     Size  Location     Type
 17216 ;;  sign            1    6[COMMON] unsigned char 
 17217 ;;  counter         1    5[COMMON] unsigned char 
 17218 ;; Return value:  Size  Location     Type
 17219 ;;                  2    0[COMMON] int 
 17220 ;; Registers used:
 17221 ;;		wreg, status,2, status,0
 17222 ;; Tracked objects:
 17223 ;;		On entry : 1F/0
 17224 ;;		On exit  : 1F/0
 17225 ;;		Unchanged: 1F/0
 17226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;Total ram usage:        7 bytes
 17232 ;; Hardware stack levels used: 1
 17233 ;; This function calls:
 17234 ;;		Nothing
 17235 ;; This function is called by:
 17236 ;;		i1_GenericQueue_Enqueue
 17237 ;; This function uses a non-reentrant model
 17238 ;;
 17239                           
 17240     1253                     i1___awmod:	
 17241                           ;psect for function i1___awmod
 17242                           
 17243                           
 17244                           ;incstack = 0
 17245                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 17246     1253  01F6               	clrf	i1___awmod@sign
 17247     1254  1FF3               	btfss	i1___awmod@dividend+1,7
 17248     1255  2A5D               	goto	i1l4606
 17249     1256  09F2               	comf	i1___awmod@dividend,f
 17250     1257  09F3               	comf	i1___awmod@dividend+1,f
 17251     1258  0AF2               	incf	i1___awmod@dividend,f
 17252     1259  1903               	skipnz
 17253     125A  0AF3               	incf	i1___awmod@dividend+1,f
 17254     125B  01F6               	clrf	i1___awmod@sign
 17255     125C  0AF6               	incf	i1___awmod@sign,f
 17256     125D                     i1l4606:
 17257     125D  1FF1               	btfss	i1___awmod@divisor+1,7
 17258     125E  2A64               	goto	i1l4610
 17259     125F  09F0               	comf	i1___awmod@divisor,f
 17260     1260  09F1               	comf	i1___awmod@divisor+1,f
 17261     1261  0AF0               	incf	i1___awmod@divisor,f
 17262     1262  1903               	skipnz
 17263     1263  0AF1               	incf	i1___awmod@divisor+1,f
 17264     1264                     i1l4610:
 17265     1264  0870               	movf	i1___awmod@divisor,w
 17266     1265  0471               	iorwf	i1___awmod@divisor+1,w
 17267     1266  1903               	btfsc	3,2
 17268     1267  2A8B               	goto	i1l4628
 17269     1268  01F5               	clrf	i1___awmod@counter
 17270     1269  0AF5               	incf	i1___awmod@counter,f
 17271     126A                     i1l4618:
 17272     126A  1BF1               	btfsc	i1___awmod@divisor+1,7
 17273     126B  2A76               	goto	i1l4620
 17274     126C  3001               	movlw	1
 17275     126D                     u379_25:
 17276     126D  35F0               	lslf	i1___awmod@divisor,f
 17277     126E  0DF1               	rlf	i1___awmod@divisor+1,f
 17278     126F  0B89               	decfsz	9,f
 17279     1270  2A6D               	goto	u379_25
 17280     1271  3001               	movlw	1
 17281     1272  00F4               	movwf	??i1___awmod
 17282     1273  0874               	movf	??i1___awmod,w
 17283     1274  07F5               	addwf	i1___awmod@counter,f
 17284     1275  2A6A               	goto	i1l4618
 17285     1276                     i1l4620:
 17286     1276  0871               	movf	i1___awmod@divisor+1,w
 17287     1277  0273               	subwf	i1___awmod@dividend+1,w
 17288     1278  1D03               	skipz
 17289     1279  2A7C               	goto	u381_25
 17290     127A  0870               	movf	i1___awmod@divisor,w
 17291     127B  0272               	subwf	i1___awmod@dividend,w
 17292     127C                     u381_25:
 17293     127C  1C03               	skipc
 17294     127D  2A82               	goto	i1l4624
 17295     127E  0870               	movf	i1___awmod@divisor,w
 17296     127F  02F2               	subwf	i1___awmod@dividend,f
 17297     1280  0871               	movf	i1___awmod@divisor+1,w
 17298     1281  3BF3               	subwfb	i1___awmod@dividend+1,f
 17299     1282                     i1l4624:
 17300     1282  3001               	movlw	1
 17301     1283                     u382_25:
 17302     1283  36F1               	lsrf	i1___awmod@divisor+1,f
 17303     1284  0CF0               	rrf	i1___awmod@divisor,f
 17304     1285  0B89               	decfsz	9,f
 17305     1286  2A83               	goto	u382_25
 17306     1287  3001               	movlw	1
 17307     1288  02F5               	subwf	i1___awmod@counter,f
 17308     1289  1D03               	btfss	3,2
 17309     128A  2A76               	goto	i1l4620
 17310     128B                     i1l4628:
 17311     128B  0876               	movf	i1___awmod@sign,w
 17312     128C  1903               	btfsc	3,2
 17313     128D  2A93               	goto	i1l4632
 17314     128E  09F2               	comf	i1___awmod@dividend,f
 17315     128F  09F3               	comf	i1___awmod@dividend+1,f
 17316     1290  0AF2               	incf	i1___awmod@dividend,f
 17317     1291  1903               	skipnz
 17318     1292  0AF3               	incf	i1___awmod@dividend+1,f
 17319     1293                     i1l4632:
 17320     1293  0873               	movf	i1___awmod@dividend+1,w
 17321     1294  00F1               	movwf	?i1___awmod+1
 17322     1295  0872               	movf	i1___awmod@dividend,w
 17323     1296  00F0               	movwf	?i1___awmod
 17324     1297  0008               	return
 17325     1298                     __end_ofi1___awmod:
 17326                           
 17327                           	psect	text99
 17328     1D05                     __ptext99:	
 17329 ;; *************** function i1_GenericQueue_IsFull *****************
 17330 ;; Defined at:
 17331 ;;		line 15 in file "generic_queue.c"
 17332 ;; Parameters:    Size  Location     Type
 17333 ;;  q               2    0[COMMON] PTR struct .
 17334 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;		None
 17337 ;; Return value:  Size  Location     Type
 17338 ;;                  2    0[COMMON] int 
 17339 ;; Registers used:
 17340 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17341 ;; Tracked objects:
 17342 ;;		On entry : 1F/0
 17343 ;;		On exit  : 1F/0
 17344 ;;		Unchanged: 1F/0
 17345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17346 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17348 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;Total ram usage:        4 bytes
 17351 ;; Hardware stack levels used: 1
 17352 ;; This function calls:
 17353 ;;		Nothing
 17354 ;; This function is called by:
 17355 ;;		i1_GenericQueue_Enqueue
 17356 ;; This function uses a non-reentrant model
 17357 ;;
 17358                           
 17359     1D05                     i1_GenericQueue_IsFull:	
 17360                           ;psect for function i1_GenericQueue_IsFull
 17361                           
 17362                           
 17363                           ;generic_queue.c: 16:     return (q->size == 15);
 17364                           
 17365                           ;incstack = 0
 17366                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 17367     1D05  0870               	movf	i1GenericQueue_IsFull@q,w
 17368     1D06  3E5E               	addlw	94
 17369     1D07  0086               	movwf	6
 17370     1D08  3000               	movlw	0
 17371     1D09  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 17372     1D0A  0087               	movwf	7
 17373     1D0B  300F               	movlw	15
 17374     1D0C  0601               	xorwf	1,w
 17375     1D0D  1D03               	btfss	3,2
 17376     1D0E  2D11               	goto	u370_20
 17377     1D0F  3001               	movlw	1
 17378     1D10  2D12               	goto	u371_20
 17379     1D11                     u370_20:
 17380     1D11  3000               	movlw	0
 17381     1D12                     u371_20:
 17382     1D12  00F2               	movwf	??i1_GenericQueue_IsFull
 17383     1D13  01F3               	clrf	??i1_GenericQueue_IsFull+1
 17384     1D14  0872               	movf	??i1_GenericQueue_IsFull,w
 17385     1D15  00F0               	movwf	?i1_GenericQueue_IsFull
 17386     1D16  0873               	movf	??i1_GenericQueue_IsFull+1,w
 17387     1D17  00F1               	movwf	?i1_GenericQueue_IsFull+1
 17388     1D18  0008               	return
 17389     1D19                     __end_ofi1_GenericQueue_IsFull:
 17390                           
 17391                           	psect	text100
 17392     1C46                     __ptext100:	
 17393 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 17394 ;; Defined at:
 17395 ;;		line 19 in file "systime.c"
 17396 ;; Parameters:    Size  Location     Type
 17397 ;;		None
 17398 ;; Auto vars:     Size  Location     Type
 17399 ;;		None
 17400 ;; Return value:  Size  Location     Type
 17401 ;;                  4    0[COMMON] unsigned long 
 17402 ;; Registers used:
 17403 ;;		wreg
 17404 ;; Tracked objects:
 17405 ;;		On entry : 1E/2
 17406 ;;		On exit  : 1F/3
 17407 ;;		Unchanged: 0/0
 17408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17412 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;Total ram usage:        4 bytes
 17414 ;; Hardware stack levels used: 1
 17415 ;; This function calls:
 17416 ;;		Nothing
 17417 ;; This function is called by:
 17418 ;;		_PS2Keyboard_DataInterrupt
 17419 ;;		_PS2Keyboard_ClockInterrupt
 17420 ;; This function uses a non-reentrant model
 17421 ;;
 17422                           
 17423     1C46                     _SysTime_GetCurrentTimeMs:	
 17424                           ;psect for function _SysTime_GetCurrentTimeMs
 17425                           
 17426                           
 17427                           ;systime.c: 21:     return timeMs;
 17428                           
 17429                           ;incstack = 0
 17430                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 17431     1C46  0023               	movlb	3	; select bank3
 17432     1C47  083B               	movf	(_timeMs+3)^(0+384),w
 17433     1C48  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 17434     1C49  083A               	movf	(_timeMs+2)^(0+384),w
 17435     1C4A  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 17436     1C4B  0839               	movf	(_timeMs+1)^(0+384),w
 17437     1C4C  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 17438     1C4D  0838               	movf	_timeMs^(0+384),w
 17439     1C4E  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 17440     1C4F  0008               	return
 17441     1C50                     __end_of_SysTime_GetCurrentTimeMs:
 17442                           
 17443                           	psect	text101
 17444     1E72                     __ptext101:	
 17445 ;; *************** function _EUSART_Transmit_ISR *****************
 17446 ;; Defined at:
 17447 ;;		line 197 in file "mcc_generated_files/eusart.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;		None
 17450 ;; Auto vars:     Size  Location     Type
 17451 ;;		None
 17452 ;; Return value:  Size  Location     Type
 17453 ;;                  1    wreg      void 
 17454 ;; Registers used:
 17455 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17456 ;; Tracked objects:
 17457 ;;		On entry : 1F/3
 17458 ;;		On exit  : 1E/0
 17459 ;;		Unchanged: 0/0
 17460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17464 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;Total ram usage:        1 bytes
 17466 ;; Hardware stack levels used: 1
 17467 ;; This function calls:
 17468 ;;		Nothing
 17469 ;; This function is called by:
 17470 ;;		_EUSART_Initialize
 17471 ;;		_INTERRUPT_InterruptManager
 17472 ;; This function uses a non-reentrant model
 17473 ;;
 17474                           
 17475     1E72                     _EUSART_Transmit_ISR:	
 17476                           ;psect for function _EUSART_Transmit_ISR
 17477                           
 17478                           
 17479                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 17480                           
 17481                           ;incstack = 0
 17482                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17483     1E72  3008               	movlw	8
 17484     1E73  0020               	movlb	0	; select bank0
 17485     1E74  026D               	subwf	_eusartTxBufferRemaining,w
 17486     1E75  1803               	skipnc
 17487     1E76  2E8F               	goto	i1l305
 17488                           
 17489                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 17490     1E77  0022               	movlb	2	; select bank2
 17491     1E78  0848               	movf	_eusartTxTail^(0+256),w
 17492     1E79  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 17493     1E7A  0086               	movwf	6
 17494     1E7B  3001               	movlw	1	; select bank3/4
 17495     1E7C  0087               	movwf	7
 17496     1E7D  0801               	movf	1,w
 17497     1E7E  0023               	movlb	3	; select bank3
 17498     1E7F  009A               	movwf	26	;volatile
 17499     1E80  3001               	movlw	1
 17500     1E81  00F0               	movwf	??_EUSART_Transmit_ISR
 17501     1E82  0870               	movf	??_EUSART_Transmit_ISR,w
 17502     1E83  0022               	movlb	2	; select bank2
 17503     1E84  07C8               	addwf	_eusartTxTail^(0+256),f	;volatile
 17504                           
 17505                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 17506     1E85  3008               	movlw	8
 17507     1E86  0248               	subwf	_eusartTxTail^(0+256),w
 17508     1E87  1803               	btfsc	3,0
 17509                           
 17510                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 17511     1E88  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
 17512                           
 17513                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 17514     1E89  3001               	movlw	1
 17515     1E8A  00F0               	movwf	??_EUSART_Transmit_ISR
 17516     1E8B  0870               	movf	??_EUSART_Transmit_ISR,w
 17517     1E8C  0020               	movlb	0	; select bank0
 17518     1E8D  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
 17519                           
 17520                           ;mcc_generated_files/eusart.c: 209:     }
 17521     1E8E  0008               	return
 17522     1E8F                     i1l305:	
 17523                           ;mcc_generated_files/eusart.c: 210:     else
 17524                           
 17525                           
 17526                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 17527     1E8F  0021               	movlb	1	; select bank1
 17528     1E90  1211               	bcf	17,4	;volatile
 17529     1E91  0008               	return
 17530     1E92                     __end_of_EUSART_Transmit_ISR:
 17531                           
 17532                           	psect	text102
 17533     10DF                     __ptext102:	
 17534 ;; *************** function _EUSART_Receive_ISR *****************
 17535 ;; Defined at:
 17536 ;;		line 216 in file "mcc_generated_files/eusart.c"
 17537 ;; Parameters:    Size  Location     Type
 17538 ;;		None
 17539 ;; Auto vars:     Size  Location     Type
 17540 ;;		None
 17541 ;; Return value:  Size  Location     Type
 17542 ;;                  1    wreg      void 
 17543 ;; Registers used:
 17544 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17545 ;; Tracked objects:
 17546 ;;		On entry : 1F/3
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17554 ;;Total ram usage:        0 bytes
 17555 ;; Hardware stack levels used: 1
 17556 ;; Hardware stack levels required when called: 2
 17557 ;; This function calls:
 17558 ;;		NULL
 17559 ;;		_EUSART_DefaultErrorHandler
 17560 ;;		_EUSART_DefaultFramingErrorHandler
 17561 ;;		_EUSART_DefaultOverrunErrorHandler
 17562 ;;		_EUSART_RxDataHandler
 17563 ;; This function is called by:
 17564 ;;		_EUSART_Initialize
 17565 ;;		_INTERRUPT_InterruptManager
 17566 ;; This function uses a non-reentrant model
 17567 ;;
 17568                           
 17569     10DF                     _EUSART_Receive_ISR:	
 17570                           ;psect for function _EUSART_Receive_ISR
 17571                           
 17572                           
 17573                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 17574                           
 17575                           ;incstack = 0
 17576                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17577     10DF  0020               	movlb	0	; select bank0
 17578     10E0  086C               	movf	_eusartRxHead,w	;volatile
 17579     10E1  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17580     10E2  0086               	movwf	6
 17581     10E3  3001               	movlw	1	; select bank3/4
 17582     10E4  0087               	movwf	7
 17583     10E5  0181               	clrf	1
 17584                           
 17585                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 17586     10E6  0023               	movlb	3	; select bank3
 17587     10E7  1D1D               	btfss	29,2	;volatile
 17588     10E8  28F6               	goto	i1l5866
 17589                           
 17590                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17591     10E9  0020               	movlb	0	; select bank0
 17592     10EA  086C               	movf	_eusartRxHead,w	;volatile
 17593     10EB  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17594     10EC  0086               	movwf	6
 17595     10ED  3001               	movlw	1	; select bank3/4
 17596     10EE  0087               	movwf	7
 17597     10EF  1481               	bsf	1,1
 17598                           
 17599                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 17600     10F0  0023               	movlb	3	; select bank3
 17601     10F1  0856               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 17602     10F2  008A               	movwf	10
 17603     10F3  0855               	movf	_EUSART_FramingErrorHandler^(0+384),w
 17604     10F4  000A               	callw
 17605     10F5  3190               	pagesel	$
 17606     10F6                     i1l5866:
 17607                           
 17608                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 17609     10F6  0023               	movlb	3	; select bank3
 17610     10F7  1C9D               	btfss	29,1	;volatile
 17611     10F8  2906               	goto	i1l5872
 17612                           
 17613                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17614     10F9  0020               	movlb	0	; select bank0
 17615     10FA  086C               	movf	_eusartRxHead,w	;volatile
 17616     10FB  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17617     10FC  0086               	movwf	6
 17618     10FD  3001               	movlw	1	; select bank3/4
 17619     10FE  0087               	movwf	7
 17620     10FF  1501               	bsf	1,2
 17621                           
 17622                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 17623     1100  0023               	movlb	3	; select bank3
 17624     1101  0854               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 17625     1102  008A               	movwf	10
 17626     1103  0853               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 17627     1104  000A               	callw
 17628     1105  3190               	pagesel	$
 17629     1106                     i1l5872:
 17630                           
 17631                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 17632     1106  0020               	movlb	0	; select bank0
 17633     1107  086C               	movf	_eusartRxHead,w	;volatile
 17634     1108  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17635     1109  0086               	movwf	6
 17636     110A  3001               	movlw	1	; select bank3/4
 17637     110B  0087               	movwf	7
 17638     110C  0801               	movf	1,w
 17639     110D  1903               	btfsc	3,2
 17640     110E  2916               	goto	i1l5876
 17641                           
 17642                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 17643     110F  0023               	movlb	3	; select bank3
 17644     1110  0852               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 17645     1111  008A               	movwf	10
 17646     1112  0851               	movf	_EUSART_ErrorHandler^(0+384),w
 17647     1113  000A               	callw
 17648     1114  3190               	pagesel	$
 17649                           
 17650                           ;mcc_generated_files/eusart.c: 233:     } else {
 17651     1115  0008               	return
 17652     1116                     i1l5876:
 17653                           
 17654                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 17655     1116  319D  256F         	fcall	_EUSART_RxDataHandler
 17656     1118  0008               	return
 17657     1119                     __end_of_EUSART_Receive_ISR:
 17658                           
 17659                           	psect	text103
 17660     1BE5                     __ptext103:	
 17661 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17662 ;; Defined at:
 17663 ;;		line 252 in file "mcc_generated_files/eusart.c"
 17664 ;; Parameters:    Size  Location     Type
 17665 ;;		None
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;		None
 17668 ;; Return value:  Size  Location     Type
 17669 ;;                  1    wreg      void 
 17670 ;; Registers used:
 17671 ;;		None
 17672 ;; Tracked objects:
 17673 ;;		On entry : 1F/3
 17674 ;;		On exit  : 1F/3
 17675 ;;		Unchanged: 0/0
 17676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;Total ram usage:        0 bytes
 17682 ;; Hardware stack levels used: 1
 17683 ;; This function calls:
 17684 ;;		Nothing
 17685 ;; This function is called by:
 17686 ;;		_EUSART_Initialize
 17687 ;;		_EUSART_Receive_ISR
 17688 ;; This function uses a non-reentrant model
 17689 ;;
 17690                           
 17691     1BE5                     _EUSART_DefaultOverrunErrorHandler:	
 17692                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17693                           
 17694                           
 17695                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 17696                           
 17697                           ;incstack = 0
 17698                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17699     1BE5  121D               	bcf	29,4	;volatile
 17700                           
 17701                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 17702     1BE6  161D               	bsf	29,4	;volatile
 17703     1BE7  0008               	return
 17704     1BE8                     __end_of_EUSART_DefaultOverrunErrorHandler:
 17705                           
 17706                           	psect	text104
 17707     1BE1                     __ptext104:	
 17708 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17709 ;; Defined at:
 17710 ;;		line 250 in file "mcc_generated_files/eusart.c"
 17711 ;; Parameters:    Size  Location     Type
 17712 ;;		None
 17713 ;; Auto vars:     Size  Location     Type
 17714 ;;		None
 17715 ;; Return value:  Size  Location     Type
 17716 ;;                  1    wreg      void 
 17717 ;; Registers used:
 17718 ;;		None
 17719 ;; Tracked objects:
 17720 ;;		On entry : 1F/3
 17721 ;;		On exit  : 1F/3
 17722 ;;		Unchanged: 1E/0
 17723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;Total ram usage:        0 bytes
 17729 ;; Hardware stack levels used: 1
 17730 ;; This function calls:
 17731 ;;		Nothing
 17732 ;; This function is called by:
 17733 ;;		_EUSART_Initialize
 17734 ;;		_EUSART_Receive_ISR
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738     1BE1                     _EUSART_DefaultFramingErrorHandler:	
 17739                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17740                           
 17741                           
 17742                           ;incstack = 0
 17743                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17744     1BE1  0008               	return
 17745     1BE2                     __end_of_EUSART_DefaultFramingErrorHandler:
 17746                           
 17747                           	psect	text105
 17748     1BE2                     __ptext105:	
 17749 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17750 ;; Defined at:
 17751 ;;		line 260 in file "mcc_generated_files/eusart.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;		None
 17754 ;; Auto vars:     Size  Location     Type
 17755 ;;		None
 17756 ;; Return value:  Size  Location     Type
 17757 ;;                  1    wreg      void 
 17758 ;; Registers used:
 17759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17760 ;; Tracked objects:
 17761 ;;		On entry : 1F/3
 17762 ;;		On exit  : 1F/3
 17763 ;;		Unchanged: 0/0
 17764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17769 ;;Total ram usage:        0 bytes
 17770 ;; Hardware stack levels used: 1
 17771 ;; Hardware stack levels required when called: 1
 17772 ;; This function calls:
 17773 ;;		_EUSART_RxDataHandler
 17774 ;; This function is called by:
 17775 ;;		_EUSART_Initialize
 17776 ;;		_EUSART_Receive_ISR
 17777 ;; This function uses a non-reentrant model
 17778 ;;
 17779                           
 17780     1BE2                     _EUSART_DefaultErrorHandler:	
 17781                           ;psect for function _EUSART_DefaultErrorHandler
 17782                           
 17783                           
 17784                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 17785                           
 17786                           ;incstack = 0
 17787                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17788     1BE2  319D  256F         	fcall	_EUSART_RxDataHandler
 17789     1BE4  0008               	return
 17790     1BE5                     __end_of_EUSART_DefaultErrorHandler:
 17791                           
 17792                           	psect	text106
 17793     1D6F                     __ptext106:	
 17794 ;; *************** function _EUSART_RxDataHandler *****************
 17795 ;; Defined at:
 17796 ;;		line 240 in file "mcc_generated_files/eusart.c"
 17797 ;; Parameters:    Size  Location     Type
 17798 ;;		None
 17799 ;; Auto vars:     Size  Location     Type
 17800 ;;		None
 17801 ;; Return value:  Size  Location     Type
 17802 ;;                  1    wreg      void 
 17803 ;; Registers used:
 17804 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17805 ;; Tracked objects:
 17806 ;;		On entry : 1C/0
 17807 ;;		On exit  : 1F/3
 17808 ;;		Unchanged: 0/0
 17809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;Total ram usage:        1 bytes
 17815 ;; Hardware stack levels used: 1
 17816 ;; This function calls:
 17817 ;;		Nothing
 17818 ;; This function is called by:
 17819 ;;		_EUSART_Receive_ISR
 17820 ;;		_EUSART_DefaultErrorHandler
 17821 ;; This function uses a non-reentrant model
 17822 ;;
 17823                           
 17824     1D6F                     _EUSART_RxDataHandler:	
 17825                           ;psect for function _EUSART_RxDataHandler
 17826                           
 17827                           
 17828                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 17829                           
 17830                           ;incstack = 0
 17831                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17832     1D6F  0020               	movlb	0	; select bank0
 17833     1D70  086C               	movf	_eusartRxHead,w
 17834     1D71  3EA8               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17835     1D72  0086               	movwf	6
 17836     1D73  3001               	movlw	1	; select bank3/4
 17837     1D74  0087               	movwf	7
 17838     1D75  0023               	movlb	3	; select bank3
 17839     1D76  0819               	movf	25,w	;volatile
 17840     1D77  0081               	movwf	1
 17841     1D78  3001               	movlw	1
 17842     1D79  00F0               	movwf	??_EUSART_RxDataHandler
 17843     1D7A  0870               	movf	??_EUSART_RxDataHandler,w
 17844     1D7B  0020               	movlb	0	; select bank0
 17845     1D7C  07EC               	addwf	_eusartRxHead,f	;volatile
 17846                           
 17847                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17848     1D7D  3008               	movlw	8
 17849     1D7E  026C               	subwf	_eusartRxHead,w
 17850     1D7F  1803               	btfsc	3,0
 17851                           
 17852                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 17853     1D80  01EC               	clrf	_eusartRxHead	;volatile
 17854                           
 17855                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 17856     1D81  3001               	movlw	1
 17857     1D82  00F0               	movwf	??_EUSART_RxDataHandler
 17858     1D83  0870               	movf	??_EUSART_RxDataHandler,w
 17859     1D84  0023               	movlb	3	; select bank3
 17860     1D85  07DF               	addwf	_eusartRxCount^(0+384),f	;volatile
 17861     1D86  0008               	return
 17862     1D87                     __end_of_EUSART_RxDataHandler:
 17863     007E                     btemp	set	126	;btemp
 17864     007E                     int$flags	set	126
 17865     007E                     wtemp0	set	126
 17866     232D                     
 17867                           	psect	config
 17868                           
 17869                           ;Config register CONFIG1 @ 0x8007
 17870                           ;	Oscillator Selection Bits
 17871                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17872                           ;	Watchdog Timer Enable
 17873                           ;	WDTE = OFF, WDT disabled
 17874                           ;	Power-up Timer Enable
 17875                           ;	PWRTE = OFF, PWRT disabled
 17876                           ;	MCLR Pin Function Select
 17877                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17878                           ;	Flash Program Memory Code Protection
 17879                           ;	CP = OFF, Program memory code protection is disabled
 17880                           ;	Brown-out Reset Enable
 17881                           ;	BOREN = ON, Brown-out Reset enabled
 17882                           ;	Clock Out Enable
 17883                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17884                           ;	Internal/External Switchover Mode
 17885                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 17886                           ;	Fail-Safe Clock Monitor Enable
 17887                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17888     8007                     	org	32775
 17889     8007  3FE4               	dw	16356
 17890                           
 17891                           ;Config register CONFIG2 @ 0x8008
 17892                           ;	Flash Memory Self-Write Protection
 17893                           ;	WRT = OFF, Write protection off
 17894                           ;	CPU System Clock Selection Bit
 17895                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 17896                           ;	USB Low Speed Clock Selection bit
 17897                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 17898                           ;	PLL Multiplier Selection Bit
 17899                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 17900                           ;	PLL Enable Bit
 17901                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 17902                           ;	Stack Overflow/Underflow Reset Enable
 17903                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17904                           ;	Brown-out Reset Voltage Selection
 17905                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17906                           ;	Low-Power Brown Out Reset
 17907                           ;	LPBOR = OFF, Low-Power BOR is disabled
 17908                           ;	Low-Voltage Programming Enable
 17909                           ;	LVP = ON, Low-voltage programming enabled
 17910     8008                     	org	32776
 17911     8008  3FCF               	dw	16335

Data Sizes:
    Strings     9
    Constant    601
    Data        0
    BSS         182
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     67      72
    BANK2            79     36      79
    BANK3            80      0      73
    BANK4            80      0      50
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           13      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), keyboardScanCode(BANK3[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 100
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[100]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 100
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[100]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    S2674$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2674$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S3499$buffer	PTR unsigned char  size(2) Largest target is 0

    S3499$source	PTR const unsigned char  size(2) Largest target is 0

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    snprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_snprintf(BANK1[2]), 

    snprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    snprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@scanCodeStr(BANK2[10]), 

    sp__memcpy	PTR void  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[28]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_snprintf
    _snprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    _ctoa->_fputc
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _APP_KeyboardTasks->_GenericQueue_CopyToArray
    _APP_KeyboardTasks->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _GenericQueue_CopyToArray->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_snprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   69390
                                             65 BANK1      2     2      0
                                             17 BANK2     19    19      0
                  _APP_KeyboardTasks
                       _EUSART_Write
                 _EUSART_is_tx_ready
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
                           _snprintf
 ---------------------------------------------------------------------------------
 (1) _snprintf                                            28    20      8   13505
                                             54 BANK1     11     3      8
                                              0 BANK2     17    17      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3   12825
                                             47 BANK1      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           15    13      2   12477
                                             32 BANK1     15    13      2
                               _ctoa
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                10     8      2    3919
                                             22 BANK1     10     8      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    3498
                                             15 BANK1      7     4      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     126
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1    1641
                                              8 BANK1      7     6      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2    4895
                                             13 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 9     7      2    1622
                                              8 BANK1      9     7      2
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1294
                                              0 BANK1      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0   10141
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    9680
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                   11    11      0   42724
                                             33 BANK1     11    11      0
    _APP_KeyboardProcessOutputReport
              _GenericQueue_Contains
           _GenericQueue_CopyToArray
               _GenericQueue_Enqueue
                _GenericQueue_Remove
            _PS2USB_ScanCodeToUSBHID
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     742
                                              0 BANK1      8     2      6
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Remove                                  9     6      3   10907
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Enqueue                                 7     3      4    9870
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    9506
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Contains                                8     5      3    9197
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (3) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    4590
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2936
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0   31780
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (10) _USBDeviceTasks                                      2     2      0   30592
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (11) i1_USBDeviceInit                                     8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (11) _USBWakeFromSuspend                                  1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBSuspend                                          1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBStallHandler                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBIncrement1msInternalTimers                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPService                                    1     1      0   17997
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfSetupHandler                              1     1      0   17469
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (13) _USBCtrlEPServiceComplete                            4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (13) _USBCheckStdRequest                                  0     0      0   13292
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USBStdSetCfgHandler                                 5     5      0    4605
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (15) i1_memset                                            8     2      6     285
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (14) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (14) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USER_USB_CALLBACK_EVENT_HANDLER                     6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (12) _USBCheckHIDRequest                                  0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetReportHandler                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetIdleRateHandler                          4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _APP_KeyboardInit                                    0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (13) i1_USBTransferOnePacket                             11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Init                                 4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (13) _USBEnableEndpoint                                   6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (14) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfOutHandler                                4     4      0     114
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (13) _USBCtrlTrfRxService                                 6     6      0     114
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfInHandler                                 5     5      0     115
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBHIDCBSetReportComplete                           0     0      0       0
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (15) i1_APP_KeyboardProcessOutputReport                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _SysTimeInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0    1188
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF5_ISR                                          0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2Keyboard_DataInterrupt                           0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (12) _IOCAF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_ISR                                          0     0      0    1188
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2Keyboard_ClockInterrupt                          4     4      0    1188
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Enqueue                              7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) i1_memcpy                                           11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (14) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (14) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (14) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _SysTime_GetCurrentTimeMs                            4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (12) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
     _GenericQueue_Contains
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
         ___awmod (ARG)
       _memcmp
         ___wmul (ARG)
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
         ___awmod (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
     _GenericQueue_Enqueue
       _GenericQueue_IsFull
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_Remove
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcmp
       _memcpy
     _PS2USB_ScanCodeToUSBHID
     _USBTransferOnePacket
     _memset
   _EUSART_Write
   _EUSART_is_tx_ready
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _snprintf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _fputc
             _putch
         _fputc
         _read_prec_or_width
           ___wmul
         _xtoa
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     43      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F     24      4F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      49      11       91.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      32      13       62.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     140      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               D      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon May 06 19:06:15 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1C3D  
                                   _USB_SD_Ptr 18D3                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 1E39                                  _USBDeviceInit 0DE7  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0A2B  
             __end_of_USBHIDCBSetReportHandler 1CB2                               i1___wmul@product 0074  
         USER_USB_CALLBACK_EVENT_HANDLER@event 0050           USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052  
                                          l110 1CBB                    __end_of_USBStdGetDscHandler 09B0  
                                          l541 1DDF                                            l299 1F8E  
                                          _BDT 0020                                            l952 01A5  
                     _GenericQueue_CopyToArray 152A                                            _PR2 001B  
                                          _UIE 0E92                                            _UIR 0E90  
                       ??_EUSART_RxDataHandler 0070                                            _pad 1210  
                                   _USBSuspend 1D9F                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1CE1  
                                          wreg 0009                                 _USBDeviceTasks 06C3  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1D19  
                               _USBDeviceState 006B             __end_of_IOCAF5_SetInterruptHandler 1C0D  
                   _IOCAF5_SetInterruptHandler 1C05                              main@scanCodeValid 0169  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 05CF                       USBEnableEndpoint@options 0077  
                                         l1234 1E0B                                           l1163 1533  
                                         l1801 04FD                                           l1803 0509  
                   USBConfigureEndpoint@handle 0076                                           l1753 1220  
                                         l5114 12A2                                           l5202 05AB  
                                         l5140 12D8                                           l5132 12C7  
                                         l1772 14B1                                           l1756 123E  
                                         l5126 12AF                                           l5118 12A9  
                                         l4174 080E                                           l5128 12BB  
                                         l5136 12D0                                           l5080 10C6  
                                         l4264 1D45                                           l5160 050B  
                                         l1769 1493                                           l5082 10AF  
                                         l5410 1DE4                                           l4178 0835  
                                         l4258 1EF5                                           l4266 1D51  
                                         l5170 0534                                           l5162 051F  
                                         l5084 10CA                                           l5180 0561  
                                         l5094 1CD2                                           l5510 0BA4  
                                         l5334 0E0B                                           l5318 0DF2  
                                         ?_pad 00B7                                           l5088 10D1  
                                         l4800 148E                                           l5098 1CD8  
                                         l5346 0E29                                           l4810 1495  
                                         l5194 0597                                           l5610 1FAF  
                                         l4548 1E05                                           l5532 109B  
                                         l5508 0B8C                                           l4572 1222  
                                         l4564 121B                                           l5188 058B  
                                         l5196 05A0                                           l5612 1FC7  
                                         l5550 0689                                           l4814 14C0  
                                         l6432 1DBB                                           l6600 012C  
                                         l5368 0E42                                           l4576 1248  
                                         l4832 17B5                                           l4824 17A7  
                                         l4914 1F63                                           l5554 06B3  
                                         l5490 0B35                                           l6610 0157  
                                         l4842 17CE                                           l5572 1528  
                                         l6604 013A                                           l4852 17F0  
                                         l6622 0181                                           l6614 0165  
                                         l6606 0149                                           l5830 1F83  
                                         l4870 1462                                           l5568 1518  
                                         l6640 01DA                                           l4864 1434  
                                         l5498 0B45                                           l6634 01BA  
                                         l6618 0173                                           l6626 019D  
                                         l4794 1475                                           l5930 0CAD  
                                         l5914 0C5B                                           l6644 01EF  
                                         l6572 00B6                                           l5844 1FA4  
                                         l4796 147E                                           l4868 1450  
                                         l5916 0C64                                           l5908 0C42  
                                         l6582 00E1                                           l6574 00C5  
                                         l5926 0C9F                                           l6664 0227  
                                         l6656 022B                                           l6648 0206  
                                         l6592 0110                                           l6568 00A8  
                                         l5928 0CA4                                           l6752 0BE4  
                                         l6744 0BD6                                           l6674 0257  
                                         l6682 0285                                           l6578 00D3  
                                         l6586 00FA                                           l6746 0BD7  
                                         l6738 0BCA                                           l6668 023E  
                                         l6596 011E                                           l6764 0C0E  
                                         l6686 029E                                           l6758 0C12  
                                         l6766 0C28                                           l5896 1E52  
                                         l5898 1E53                                           STR_1 18CA  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u3155 0833  
                                         u4035 149F                                           u4065 17D8  
                                         u4250 1CFD                                           u4260 1CFE  
                                         u4095 17EB                                           u4360 1D25  
                                         u5240 1BFB                                           u4370 1D26  
                                         u3635 1E0C                                           u3645 1E11  
                                         u4615 0E0E                                           u4465 12B2  
                                         u4485 12C1                                           u3685 122C  
                                         u4495 12C8                                           u5395 0C92  
                                         u6605 01E3                          ??_USBCtrlTrfTxService 0070  
                                         u6820 0BC7                                           _UCFG 0E91  
                                         u6680 0265                                           u6665 0252  
                                         u6585 01AF                                           _UEP0 0E98  
                                         _UEP1 0E99                                           _UEIE 0E97  
                                         _UEIR 0E93                                           _UCON 0E8E  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 0146                                           _dbuf 0232  
                                         _ctoa 1467                                           _main 0BA9  
                                         _prec 01C9                                           _nout 01C7  
                                         pad@i 00BB                                           pad@p 00B8  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 1DCF                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           _xtoa 1795  
                                         start 003D                                   _SysTime_Init 1C5B  
                         _GenericQueue_Dequeue 0796                           _GenericQueue_IsEmpty 1CF2  
                         ??_USBCheckHIDRequest 0074                           ?_GenericQueue_IsFull 00A8  
                   __end_of_USBCheckStdRequest 1795                         ??_USBCtrlTrfOutHandler 007A  
                            ___bmul@multiplier 00AB                                  _LocalSOFCount 012E  
                         _GenericQueue_Enqueue 16C2                            USBDeviceInit@i_1369 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                     GenericQueue_Dequeue@item 00C2                    APP_KeyboardTasks@usbHidCode 00CB  
                     ??_USBStdGetStatusHandler 0070                                          ??_pad 00BA  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1CBF                __end_of_PS2Keyboard_GetScanCode 1E55  
                                        ?_ctoa 00B0                                          ?_main 0070  
                              __end_of___awmod 12DD                                          ?_xtoa 00BE  
                       __end_of_USBDeviceTasks 0796                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l141 000D  
                                        i1l144 0019                                          i1l305 1E8F  
                                        i1l153 003B                                          i1l146 0026  
                                        i1l148 0033                                          i1l502 0742  
                                        i1l503 0793                                          i1l504 0790  
                                   i1memcpy@d1 0076                                          i1l631 13BB  
                                        i1l703 1759                                          i1l634 1401  
                                        i1l635 13C4                                          i1l636 13C7  
                                        i1l492 06E2                                          i1l910 1388  
                                        i1l566 0D02                                          i1l680 0A16  
                                        i1l728 0394                                          i1l594 0EA6  
                                        i1l818 118F                                          i1l498 071A  
                                        i1l579 15A3                                          i1l764 0AA8  
                                        i1l692 1794                                          i1l694 1732  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                 vfpfcnvrt@fmt 00C8                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 016D                                          _TXSTA 019E  
                                 _outputReport 0120             __end_of_USBHIDCBSetIdleRateHandler 1CA5  
                   _USBHIDCBSetIdleRateHandler 1C98                __end_of_USBCtrlEPAllowDataStage 165A  
                                        _sd000 18D9                                          _sd001 183F  
                                        _sd002 189C                               __end_of_TMR2_ISR 1C72  
               ?_USBIncrement1msInternalTimers 0070                                 i1___awmod@sign 0076  
                      __end_of_PIN_MANAGER_IOC 1C5B                                          _flags 0134  
                      _PS2USB_ScanCodeToUSBHID 1086                                 _WDT_Initialize 1BEB  
                          read_prec_or_width@c 00BA                                          _errno 01CB  
                          read_prec_or_width@n 00BB                                          _fputc 0805  
                                        _fputs 1EF2                                          pad@fp 00BD  
                                        _width 012C                                          ctoa@c 00B0  
                                        _putch 0801                                          ctoa@l 00B4  
                                        ctoa@w 00B6                                          main@i 016B  
                                        pclath 000A                                  _snprintf$3536 014C  
                             __end_ofi1___wmul 1E03                                          status 0003  
                          i1___wmul@multiplier 0070                                          wtemp0 007E  
                                        xtoa@c 00C5                                          xtoa@d 00BE  
                                        xtoa@i 00C6                                          xtoa@p 00C2  
                                        xtoa@w 00C3                               __end_ofi1_memcpy 1F5B  
                              _TMR2_StartTimer 0802                               __end_ofi1_memset 1D9F  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 04D5  
                        _GenericQueue_Contains 14C8                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1CBF                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_ctoa 14C8  
                                 __end_of_main 0C2D                                   __end_of_xtoa 1800  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1CF2  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                                       ??_ctoa 00B2                       _TMR2_SetInterruptHandler 1C35  
                                       ??_main 00E9                  __end_ofi1_GenericQueue_IsFull 1D19  
                                       ??_xtoa 00C0                                ?_USBDeviceTasks 0070  
                GenericQueue_Init@element_size 00AA                                    ?_USBSuspend 0070  
                      _IOCAF4_InterruptHandler 01E7                                i1_USBDeviceInit 0D44  
                     _USBHIDCBSetReportHandler 1CA5                     __end_of_read_prec_or_width 1467  
                       __end_of_WDT_Initialize 1BEE      __end_of_EUSART_DefaultFramingErrorHandler 1BE2  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 1BE1                        __end_of_USBDeviceAttach 1DE8  
                   _EUSART_OverrunErrorHandler 01D3                                         ?_fputc 00A8  
                                       _ACTCON 039B                                         ?_fputs 00B0  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       ?_putch 0070                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                     __end_of_SysTimeInterrupt 1C46                                         i1l1234 1DF0  
                                       i1l4120 0A44                                         i1l4042 11BD  
                                       i1l4114 0A38                                         i1l4220 159E  
                                       i1l4044 11C5                                         i1l4052 1E9A  
                                       i1l4140 0A72                                         i1l4132 0A63  
                                       i1l4150 0A8C                                         i1l4134 0A66  
                                       i1l4126 0A50                                         i1l4232 15BF  
                                       i1l4240 15D5                                         i1l4056 1EA1  
                                       i1l4144 0A80                                         i1l4128 0A5B  
                                       i1l4242 15D9                                         i1l4250 15EF  
                                       i1l4154 0A94                                         i1l4410 0979  
                                       i1l4402 094A                                         i1l4330 1625  
                                       i1l4084 0AC5                                         i1l4076 0AB5  
                                       i1l4420 09A0                                         i1l4412 097C  
                                       i1l4094 0B0C                                         i1l4166 139D  
                                       i1l4190 115F                                         i1l4334 1638  
                                       i1l4096 0B24                                         i1l4192 1162  
                                       i1l4512 0357                                         i1l4424 09A3  
                                       i1l4440 13DC                                         i1l4610 1264  
                                       i1l4194 1165                                         i1l4186 1154  
                                       i1l4522 0380                                         i1l4506 0345  
                                       i1l4418 099D                                         i1l4450 13F5  
                                       i1l4620 1276                                         i1l4532 039A  
                                       i1l4524 0385                                         i1l4508 034C  
                                       i1l6212 1D8B                                         i1l4606 125D  
                                       i1l5254 1C95                                         i1l4198 1168  
                                       i1l4470 02CC                                         i1l6222 08CD  
                                       i1l6302 1771                                         i1l5430 1E6F  
                                       i1l4632 1293                                         i1l4624 1282  
                                       i1l4536 03B9                                         i1l6240 08EF  
                                       i1l4618 126A                                         i1l6402 1C88  
                                       i1l4298 0875                                         i1l4730 0F05  
                                       i1l4538 03C1                                         i1l4490 0317  
                                       i1l4628 128B                                         i1l4644 1F3D  
                                       i1l6340 0F6D                                         i1l4716 0EAE  
                                       i1l4484 02F9                                         i1l4468 02CA  
                                       i1l4660 0CCB                                         i1l6420 1317  
                                       i1l5460 1F2E                                         i1l5428 1E68  
                                       i1l6342 0F72                                         i1l4742 0F3F  
                                       i1l4718 0EC4                                         i1l4398 0940  
                                       i1l6262 0925                                         i1l6422 131A  
                                       i1l5462 1F30                                         i1l6510 0727  
                                       i1l6344 0F75                                         i1l4728 0EF9  
                                       i1l4496 032B                                         i1l6272 1738  
                                       i1l4656 0CC7                                         i1l6504 0720  
                                       i1l4586 1DEA                                         i1l6370 0FB9  
                                       i1l6338 0F69                                         i1l4498 0335  
                                       i1l6274 173B                                         i1l5642 0D66  
                                       i1l5626 0D4F                                         i1l6380 0FD6  
                                       i1l6444 1C56                                         i1l6284 1748  
                                       i1l6276 173E                                         i1l6460 06CF  
                                       i1l6374 0FC0                                         i1l6366 0FB0  
                                       i1l6358 0F9C                                         i1l6390 0FDD  
                                       i1l6286 174B                                         i1l4678 0D0E  
                                       i1l4686 0D17                                         i1l5654 0D83  
                                       i1l6518 073B                                         i1l6384 0FDA  
                                       i1l6392 0FF5                                         i1l6288 174E  
                                       i1l6544 0778                                         i1l6528 0748  
                                       i1l4946 1120                                         i1l6298 1764  
                                       i1l6546 0787                                         i1l6538 075F  
                                       i1l6482 06F2                                         i1l4972 09CB  
                                       i1l5676 0D99                                         i1l6468 06DC  
                                       i1l4974 09CE                                         i1l4958 1151  
                                       i1l6830 118A                                         i1l6494 070C  
                                       i1l5872 1106                                         i1l6832 0FE7  
                                       i1l4984 09F9                                         i1l6488 06F8  
                                       i1l5866 10F6                                         i1l4994 0A27  
                                       i1l5876 1116                                         i1l4996 0A28  
                                       i1l4988 0A09                                         i1l6828 1170  
                                       u311_25 1392                                         u331_25 162F  
             APP_KeyboardTasks@usbHidCode_2876 00CE               APP_KeyboardTasks@usbHidCode_2877 00CC  
             APP_KeyboardTasks@usbHidCode_2878 00CF                     __end_of_EUSART_is_tx_ready 1BFD  
                                       u600_20 0FAB                                         u601_20 0FAC  
                                       u370_20 1D11                                         u371_20 1D12  
                                       u381_25 127C                                         u373_25 1DF1  
                                       u382_25 1283                                         u374_25 1DF6  
                                       u607_25 12E8                                         u296_25 1196  
                                       u393_25 0EA2                                         u297_25 119C  
                                       _OSCCON 0099                                         u298_25 11A4  
                                       u379_25 126D                                         u494_25 0D69  
                                       _PLLRDY 04D6                                  vfpfcnvrt@done 00D3  
                                  i1memcpy@tmp 0054                                         u598_24 0F82  
                                       u598_25 0F81                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                 i1USBTransferOnePacket@handle 0079                              _shortPacketStatus 0147  
                             _APP_KeyboardInit 136C                                USBDeviceTasks@i 0060  
                                 vfprintf@cfmt 00DC                    USBStdFeatureReqHandler@pUEP 0058  
                     USBTransferOnePacket@data 00A9                     USBCtrlTrfInHandler@lastDTS 0077  
                              ??_USBDeviceInit 00A8                                         ___bmul 1CD0  
                              _keyboardIsBreak 01DD                                         ___wmul 1E03  
                                    ??___awmod 00AC                              _USBEnableEndpoint 1E92  
                          _EUSART_Transmit_ISR 1E72                                         _memcmp 10A8  
                                       _memcpy 1F5B                           read_prec_or_width@ap 00B5  
                                       _memset 1DB7                                ___awmod@divisor 00A8  
                                       _timeMs 01B8                                ___awmod@counter 00AD  
                                       pad@buf 00B7                             ?_USBEnableEndpoint 0077  
                                       ctoa@fp 00B8                                         _strlen 1D42  
                            __end_ofi1___awmod 1298                                         fputc@c 00A8  
                                       fputs@c 00B3                                         fputs@i 00B4  
                                       fputs@s 00B6                      ??_PS2USB_ScanCodeToUSBHID 00A8  
                              ?_WDT_Initialize 0070                                    _OldSOFCount 01CD  
                          ??_USBEnableEndpoint 0078                             APP_KeyboardTasks@i 00D2  
                                       putch@c 0070                               __end_of_vfprintf 1FD0  
                      __end_of_TMR2_StartTimer 0805       TMR2_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF5_SetInterruptHandler@InterruptHandler 00A8     IOCAF4_SetInterruptHandler@InterruptHandler 00A8  
                             ?_PIN_MANAGER_IOC 0070                               __end_of_snprintf 0CB6  
                                       xtoa@fp 00C1                                    _CtrlTrfData 0048  
                                 ??_IOCAF4_ISR 007C                                   ??_IOCAF5_ISR 0074  
                         ?_EUSART_Transmit_ISR 0070             USBHIDCBSetIdleRateHandler@reportID 0073  
                         _controlTransferState 0069                              _SYSTEM_Initialize 1D2D  
                      __end_of__initialization 007B                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1C35  
                 _EUSART_SetTxInterruptHandler 1C2D                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 1EB2  
                                __end_of_sd000 18DD                                  __end_of_sd001 1873  
                                __end_of_sd002 18B8                            ??_SYSTEM_Initialize 00B0  
                                    ?_TMR2_ISR 0070                                _active_protocol 01E4  
                                __end_of_fputc 0853                                  __end_of_fputs 1F13  
       __end_of_IOCAF4_DefaultInterruptHandler 1085                 _IOCAF4_DefaultInterruptHandler 1084  
                      __end_ofi1_USBDeviceInit 0DE7                                  __end_of_putch 0802  
                  __end_of_USBCtrlTrfInHandler 0A2B                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                             __end_of_IOCAF4_ISR 1C8B  
                           __end_of_IOCAF5_ISR 1C98                                      ?i1___wmul 0070  
                  __end_ofi1_GenericQueue_Init 1ED2                             ??_PS2Keyboard_Init 00AC  
                               _OPTION_REGbits 0095                                      ?i1_memcpy 0076  
                                    ?i1_memset 0070                           _eusartRxStatusBuffer 01A0  
                  ?_IOCAF5_SetInterruptHandler 00A8                ??_EUSART_SetOverrunErrorHandler 00AA  
                     ??_USBCtrlTrfSetupHandler 005D                        _USBTicksSinceSuspendEnd 013B  
              i1GenericQueue_Init@element_size 0072                                  _keyboardState 013A  
                             ?_USBDeviceAttach 0070                                        ??_fputc 00AB  
                    __end_of_SYSTEM_Initialize 1D42                                        ??_fputs 00B1  
                        ??_EUSART_Transmit_ISR 0070                         _USBStdGetStatusHandler 13B7  
                   i1GenericQueue_Enqueue@item 0057                                        ??_putch 00A8  
               __end_ofi1_GenericQueue_Enqueue 16C2                                     __pbssBANK0 0061  
                                   __pbssBANK1 00EB                                     __pbssBANK2 0121  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                         __end_of_EUSART_Write 1FA7               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0061  
                      _IOCAF5_InterruptHandler 01E5               __end_of_USBCtrlEPServiceComplete 0D44  
                                   __pmaintext 0BA9                           USBCtrlTrfRxService@i 0078  
                                      ?___bmul 00A8                  ?_EUSART_SetTxInterruptHandler 00A8  
             _EUSART_TxDefaultInterruptHandler 01DB                                        ?___wmul 00AF  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                      ?_memcmp 00B5                                        ?_memcpy 00B5  
                                      _BAUDCON 019F                                        ?_memset 00A8  
                                   _device_dsc 18B8                               _USBCtrlEPService 12DD  
                 ??_EUSART_DefaultErrorHandler 0071                                     _ep_data_in 0132  
                                   ??i1___wmul 0074                                        ?_strlen 00A8  
                  __end_of_USBCtrlTrfRxService 0F46                             _USBCheckStdRequest 172A  
                                _eusartRxCount 01DF                              _configDescriptor1 1873  
                                   ??i1_memcpy 007C                                     ??i1_memset 0076  
                                 _ps2ExtUsbMap 03D6         APP_KeyboardTasks@TimeDeltaMilliseconds 00D0  
                  __end_of_USBCtrlTrfTxService 15F3                            _USBStdSetCfgHandler 08C5  
                  ?_USBHIDCBSetIdleRateHandler 0070                               main@hndlScanCode 016C  
                                      _OSCTUNE 0098                       ??_EUSART_SetErrorHandler 00AA  
                          ?_USBCheckStdRequest 0070                               ?_TMR2_StartTimer 0070  
                                      _UIEbits 0E92                                        _UIRbits 0E90  
                        GenericQueue_Dequeue@q 00C0                                   i1memset@dest 0070  
                     ??i1_USBTransferOnePacket 0074                          GenericQueue_IsEmpty@q 00A8  
                            __end_of_ps2UsbMap 1084                ??_USBIncrement1msInternalTimers 0070  
                         ?_USBStdSetCfgHandler 0070                              _APP_KeyboardTasks 007F  
                   ??_TMR2_SetInterruptHandler 00AA                              __end_of_hid_rpt01 183F  
                         ??_USBCheckStdRequest 007E                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 1298                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 005F  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                                    ?_vfprintf 00D7                               _keyboardIdleRate 01CF  
                                    ?_snprintf 00DE                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 0135  
                                      __ptext1 0C2D                                        __ptext2 1FA7  
                                      __ptext3 04D5                                        __ptext4 1795  
                                      __ptext5 1210                                        __ptext6 1D42  
                                      __ptext7 1EF2                                        __ptext8 140C  
                                      __ptext9 1467                                        _inPipes 00EB  
                  _USBDeferOUTDataStagePackets 013C                            ??_APP_KeyboardTasks 00C9  
                        _OSCILLATOR_Initialize 1CB2                                   ??_USBSuspend 007D  
                                    _T2CONbits 001C                          read_prec_or_width@fmt 00BD  
                             _keyboardScanCode 01E1                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 13B7                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                             __end_of_USB_CD_Ptr 18DF  
                                      clrloop0 1C73                       _SysTime_GetCurrentTimeMs 1C46  
                         end_of_initialization 007B                    __end_of_GenericQueue_IsFull 1D2D  
                           __end_of_USB_SD_Ptr 18D9                                        memcmp@l 00BB  
                                      memcmp@n 00B8                                        memcmp@r 00BD  
                            ?_SysTimeInterrupt 0070          __end_of_EUSART_SetOverrunErrorHandler 1C25  
                _EUSART_SetOverrunErrorHandler 1C1D                                        memcpy@d 00BB  
                                      memcpy@n 00B9                                        memcpy@s 00BD  
                          _pBDTEntryEP0OutNext 0067                                        fputc@fp 00AA  
                  __end_of_GenericQueue_Remove 06C3                                        memset@c 00AA  
                                      memset@n 00AC                                        memset@p 00AE  
                                      fputs@fp 00B0                                _USB1msTickCount 01C0  
                      _PS2Keyboard_GetScanCode 1E39                             _read_prec_or_width 140C  
                     ?_USBStdFeatureReqHandler 0070                             ??_SysTimeInterrupt 0070  
                    __end_of_APP_KeyboardTasks 02B6                              _EUSART_Initialize 11CF  
                        ??_USBStdSetCfgHandler 007D                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 1DB7                              __end_of_vfpfcnvrt 05CF  
                      _USBCtrlEPAllowDataStage 15F3                                      _RCSTAbits 019D  
                          ?_read_prec_or_width 00B5                               vfpfcnvrt@convarg 00CE  
                           _EUSART_is_tx_ready 1BF5                                     _prevTimeMs 01BC  
                                   ??_vfprintf 00DA                       _USBCtrlEPServiceComplete 0CB6  
                        i1___wmul@multiplicand 0072                                     ??_snprintf 00E6  
                                      strlen@a 00AB                                        strlen@s 00AC  
                   _USBStatusStageEnabledFlag1 013F                     _USBStatusStageEnabledFlag2 013E  
                          ??_EUSART_Initialize 00AA                               ??_WDT_Initialize 00A8  
               ??_EUSART_SetTxInterruptHandler 00AA                             USBEnableEndpoint@p 007A  
                                    _PORTAbits 000C                            ?_EUSART_is_tx_ready 0070  
                        i1_GenericQueue_IsFull 1D05                             _BothEP0OutUOWNsSet 0142  
                    USBStdSetCfgHandler@i_2097 0058                                      i1___awmod 1253  
                         ??_read_prec_or_width 00B7                   ??_IOCAF4_SetInterruptHandler 00AA  
                    USBConfigureEndpoint@EPNum 0075                              _GenericQueue_Init 1ED2  
                   ?_USBCtrlEPAllowStatusStage 0070                        ??_GenericQueue_Contains 00C1  
          USER_USB_CALLBACK_EVENT_HANDLER@size 0054                                      _USTATcopy 006E  
                           ?_GenericQueue_Init 00A8                      __end_of_EUSART_Initialize 1210  
                     i1USBTransferOnePacket@ep 0078                   __end_of_USBTransferOnePacket 0BA9  
                         ??_EUSART_is_tx_ready 00A8                                     main@strLen 016A  
                          ??_GenericQueue_Init 00AC                          i1USBDeviceInit@i_1369 0076  
                       _USBCtrlTrfSetupHandler 1324           __end_of_TMR2_DefaultInterruptHandler 0801  
                 _TMR2_DefaultInterruptHandler 0800                                 __end_of___bmul 1CE1  
                        __end_of_USBDeviceInit 0E93          __end_of_USBIncrement1msInternalTimers 1D6F  
                _USBIncrement1msInternalTimers 1D58             __end_of_EUSART_DefaultErrorHandler 1BE5  
                   _EUSART_DefaultErrorHandler 1BE2                                      i1memcpy@d 0050  
                                    i1memcpy@n 007A                                    vfpfcnvrt@ap 00C9  
                                    i1memcpy@s 0052                                    vfpfcnvrt@cp 00D4  
                                  vfpfcnvrt@fp 00D6                                 __end_of___wmul 1E1E  
                                    i1memset@c 0072                                      i1memset@n 0074  
                                    i1memset@p 0076                                   _EUSART_Write 1F81  
                               __end_of_memcmp 10DF                                 __end_of_memcpy 1F81  
                       ?_OSCILLATOR_Initialize 0070                                 __end_of_memset 1DCF  
                   ?_USBHIDCBSetReportComplete 0070                              _USBBusIsSuspended 0144  
                               __end_of_strlen 1D58                            start_initialization 003F  
                      ?_USBStdGetStatusHandler 0070                  USBCtrlTrfRxService@byteToRead 0079  
                    __end_of_GenericQueue_Init 1EF2                                    __end_of_pad 1253  
                                   ?i1___awmod 0070                                 _oldInputReport 022A  
 EUSART_SetRxInterruptHandler@interruptHandler 00A8   EUSART_SetTxInterruptHandler@interruptHandler 00A8  
                 __end_of_USBConfigureEndpoint 11CF                __end_of_USBStdFeatureReqHandler 03D6  
                    ??_PS2Keyboard_GetScanCode 00C7              __end_of_USBCtrlEPAllowStatusStage 08C5  
                     __end_of_USBCtrlEPService 1324                                  ?_SysTime_Init 0070  
                    ??_USBCtrlEPAllowDataStage 0073                                 USBDeviceInit@i 00AF  
                               USBDeviceInit@p 00AC                 ?_EUSART_SetOverrunErrorHandler 00A8  
                       _pBDTEntryEP0OutCurrent 006A                                    vfprintf@fmt 00D7  
                      USBTransferOnePacket@dir 00A8                        USBTransferOnePacket@len 00AB  
                   _EUSART_FramingErrorHandler 01D5                                       ??___bmul 00A9  
                                     ??___wmul 00B3                         _EUSART_SetErrorHandler 1C0D  
                          _USBStdGetDscHandler 0937                             i1___awmod@dividend 0072  
                                     ??_memcmp 00BA                                       ??_memcpy 00BB  
                                     ??_memset 00AE                  ?_TMR2_DefaultInterruptHandler 0070  
                     ?_PS2USB_ScanCodeToUSBHID 0070                                     memset@dest 00A8  
              PS2Keyboard_GetScanCode@scanCode 00C7                         i1_USBTransferOnePacket 0AA9  
       __end_of_IOCAF5_DefaultInterruptHandler 1086                 _IOCAF5_DefaultInterruptHandler 1085  
                                     ??_strlen 00AA                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 140C                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232D                    __end_of_EUSART_Transmit_ISR 1E92  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1BF5  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                                  __pcstackBANK2 014C  
                    ?_GenericQueue_CopyToArray 00C0                                    snprintf@cnt 0150  
                                  snprintf@fmt 00E0                           ?_USBStdGetDscHandler 0070  
    __end_ofi1_APP_KeyboardProcessOutputReport 0004        __end_of_APP_KeyboardProcessOutputReport 1BEB  
          ??i1_APP_KeyboardProcessOutputReport 0070             ?i1_APP_KeyboardProcessOutputReport 0070  
             ?_APP_KeyboardProcessOutputReport 0070              ??_APP_KeyboardProcessOutputReport 00A8  
            i1_APP_KeyboardProcessOutputReport 0002                _APP_KeyboardProcessOutputReport 1BE8  
                   __end_of_EUSART_Receive_ISR 1119                                   _keyboardData 0136  
                   __end_of_USBWakeFromSuspend 1E72               _EUSART_RxDefaultInterruptHandler 01D9  
                               ??_SysTime_Init 00AA                                _USBStallHandler 1F13  
                                 _pBDTEntryOut 0128                                      __pnvBANK3 01E5  
                 __end_of_EUSART_RxDataHandler 1D87                                      _main$2651 0167  
                       _PIN_MANAGER_Initialize 1FD0                                      __ptext100 1C46  
                                    __ptext101 1E72                                      __ptext102 10DF  
                                    __ptext103 1BE5                                      __ptext104 1BE1  
                                    __ptext105 1BE2                                      __ptext106 1D6F  
                                     ?___awmod 00A8                                      _ps2UsbMap 1000  
                 ??_PS2Keyboard_ClockInterrupt 005C                             GenericQueue_Init@q 00A8  
                                 _eusartRxHead 006C                                   _eusartTxHead 0149  
                                    _hid_rpt01 1800                                   _eusartRxTail 01E0  
                                 _eusartTxTail 0148                                      _idle_rate 014A  
                 ??_INTERRUPT_InterruptManager 007E                          _keyboardScanCodeValid 0137  
                        _keyboardScanCodeQueue 2391                        _eusartTxBufferRemaining 006D  
                   ??_SysTime_GetCurrentTimeMs 0074                           _USBTransferOnePacket 0B29  
                         GenericQueue_IsFull@q 00A8             __end_of_IOCAF4_SetInterruptHandler 1C05  
                   _IOCAF4_SetInterruptHandler 1BFD                   __end_of_USBCtrlTrfOutHandler 1153  
                            ?_APP_KeyboardInit 0070                                    ??i1___awmod 0074  
                        ??_USBStdGetDscHandler 0070                                    _ep_data_out 0130  
                USBConfigureEndpoint@direction 0070                             ??_APP_KeyboardInit 007D  
                               _eusartRxBuffer 01A8                                 _eusartTxBuffer 01B0  
                         GenericQueue_Remove@i 00C7                           GenericQueue_Remove@j 00C8  
                         GenericQueue_Remove@q 00C0                                 ___wmul@product 00B3  
       EUSART_SetErrorHandler@interruptHandler 00A8                     __end_of_USBCheckHIDRequest 0AA9  
                   ??_USBCtrlEPServiceComplete 0077                                      clear_ram0 1C72  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 01DE                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00AA                                       _PIR2bits 0012  
              __end_of_PS2USB_ScanCodeToUSBHID 10A8                                       _UEP0bits 0E98  
                                    main@F3442 0220                                      main@F3438 01C4  
                   _USBDeferINDataStagePackets 013D      __end_of_EUSART_DefaultOverrunErrorHandler 1BE8  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 1BE5                                       _TMR2_ISR 1C66  
                                     _UCONbits 0E8E                              ??_PIN_MANAGER_IOC 007C  
                         _USBConfigureEndpoint 1190                                      _vfpfcnvrt 04D5  
                      GenericQueue_Remove@item 00C2                      APP_KeyboardTasks@scanCode 00D3  
                            ___wmul@multiplier 00AF                          ?_USBTransferOnePacket 00A8  
                                     i1___wmul 1DE8                                main@scanCodeStr 015D  
                                     i1_memcpy 1F35                                       i1_memset 1D87  
                     ??i1_GenericQueue_Enqueue 0059                                   _RemoteWakeup 0145  
               ??_TMR2_DefaultInterruptHandler 0070                      ?_TMR2_SetInterruptHandler 00A8  
                   ?_PS2Keyboard_DataInterrupt 0070                        __end_of_USBStallHandler 1F35  
                                   vfpfcnvrt@c 00D2                      ?_USBHIDCBSetReportHandler 0070  
                             _PS2Keyboard_Init 1E1E                    ??_USBCtrlEPAllowStatusStage 0070  
                  __end_of_USBStdSetCfgHandler 0937                              ??_TMR2_Initialize 00AA  
                __end_of_GenericQueue_Contains 152A                             __end_of_device_dsc 18CA  
                       GenericQueue_Contains@i 00C5                         GenericQueue_Contains@q 00BE  
                      ?_USBCtrlTrfSetupHandler 0070                        USBStdGetStatusHandler@p 0070  
                                    memcpy@tmp 00BF                                     vfprintf@ap 00D9  
                                   vfprintf@fp 00DB                         USBTransferOnePacket@ep 00B0  
                                     _SetupPkt 0040                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 00A8                            _EUSART_ErrorHandler 01D1  
                        ?_USBConfigureEndpoint 0070                              i1___awmod@counter 0075  
                            ??_USBDeviceAttach 00A8                    ?_EUSART_DefaultErrorHandler 0070  
                                   ?_vfpfcnvrt 00C8                                     snprintf@ap 014F  
                         __end_of_SysTime_Init 1C66                    ??_USBHIDCBSetReportComplete 0070  
                         _EUSART_RxDataHandler 1D6F                                       __ptext10 0805  
                                     __ptext11 0801                                       __ptext20 1FD0  
                                     __ptext12 1C5B                                       __ptext21 1CB2  
                                     __ptext13 0802                                       __ptext30 1BFD  
                                     __ptext22 11CF                                       __ptext14 1D2D  
                                     __ptext31 1ED2                                       __ptext23 1C2D  
                                     __ptext15 1BEB                                       __ptext40 05CF  
                                     __ptext32 1E39                                       __ptext24 1C25  
                                     __ptext16 0DE7                                       __ptext41 16C2  
                                     __ptext33 0796                                       __ptext25 1C1D  
                                     __ptext17 1DCF                                       __ptext50 1CF2  
                                     __ptext42 1D19                                       __ptext34 1BF5  
                                     __ptext26 1C15                                       __ptext18 1CE1  
                                     __ptext51 1BE8                                       __ptext43 152A  
                                     __ptext35 1F81                                       __ptext27 1C0D  
                                     __ptext19 1C35                                       __ptext60 1324  
                                     __ptext44 1F5B                                       __ptext36 007F  
                                     __ptext28 1E1E                                       __ptext61 0CB6  
                                     __ptext53 06C3                                       __ptext45 1CD0  
                                     __ptext37 1DB7                                       __ptext29 1C05  
                                     __ptext70 0A2B                                       __ptext62 15F3  
                                     __ptext54 0D44                                       __ptext46 14C8  
                                     __ptext38 0B29                                       __ptext71 1CA5  
                                     __ptext63 172A                                       __ptext55 1E55  
                                     __ptext47 10A8                                       __ptext39 1086  
                                     __ptext80 0853                                       __ptext72 1C98  
                                     __ptext64 08C5                                       __ptext56 1D9F  
                                     __ptext48 1E03                                       __ptext81 09B0  
                                     __ptext73 136C                                       __ptext65 1D87  
                                     __ptext57 1F13                                       __ptext49 1298  
                                     __ptext90 1085                                       __ptext82 1BEE  
                                     __ptext74 0AA9                                       __ptext66 13B7  
                                     __ptext58 1D58                                       __ptext91 1CBF  
                                     __ptext83 0002                                       __ptext75 1EB2  
                                     __ptext67 0937                                       __ptext59 12DD  
                                     __ptext92 1C7E                                       __ptext84 158C  
                                     __ptext76 1E92                                       __ptext68 02B6  
                                     __ptext93 1084                                       __ptext85 1C66  
                                     __ptext77 1190                                       __ptext69 1153  
                                     __ptext94 0F46                                       __ptext86 1C3D  
                                     __ptext78 1119                                       __ptext95 165A  
                                     __ptext87 0800                                       __ptext79 0E93  
                                     __ptext96 1F35                                       __ptext88 1C50  
                                     __ptext97 1DE8                                       __ptext89 1C8B  
                                     __ptext98 1253                                       __ptext99 1D05  
                 ??_IOCAF5_SetInterruptHandler 00AA              __end_of_PS2Keyboard_DataInterrupt 1CD0  
                            _keyboardIndexData 0139                                     _IOCAF4_ISR 1C7E  
                GenericQueue_CopyToArray@array 00C2                                     _IOCAF5_ISR 1C8B  
                GenericQueue_CopyToArray@count 00C8                  GenericQueue_CopyToArray@index 00C7  
                                     _keyboard 232D                 __end_of_USBCtrlTrfSetupHandler 136C  
                            ?_USBCtrlEPService 0070                             ??_USBCtrlEPService 005E  
                      ?_EUSART_SetErrorHandler 00A8                            _USBCtrlTrfInHandler 09B0  
EUSART_SetOverrunErrorHandler@interruptHandler 00A8                                    _inputReport 00A0  
           __end_of_PS2Keyboard_ClockInterrupt 1000                     _PS2Keyboard_ClockInterrupt 0F46  
                            _keyboardOnesCount 0138                                       _outPipes 0121  
                         _USBCtrlTrfOutHandler 1119                                       int$flags 007E  
                          i1_GenericQueue_Init 1EB2                        ?i1_USBTransferOnePacket 0070  
             __end_of_GenericQueue_CopyToArray 158C                      _USBCtrlEPAllowStatusStage 0853  
                                     _vfprintf 1FA7                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072                                       _snprintf 0C2D  
        __end_of_EUSART_SetFramingErrorHandler 1C1D                  _EUSART_SetFramingErrorHandler 1C15  
                       ??_USBTransferOnePacket 00AC               __end_of_SysTime_GetCurrentTimeMs 1C50  
                 __end_of_GenericQueue_Dequeue 0800                   __end_of_GenericQueue_IsEmpty 1D05  
                    _USBDeferStatusStagePacket 0140                               i1USBDeviceInit@i 0077  
                             i1USBDeviceInit@p 0074                                     _INTCONbits 000B  
                 __end_of_GenericQueue_Enqueue 172A                           ?_USBCtrlTrfInHandler 0070  
                                     memcmp@vl 00B5                                       memcmp@vr 00B7  
                        ?_EUSART_RxDataHandler 0070                                       memcpy@d1 00B5  
                                     memcpy@s1 00B7                  USBCtrlTrfTxService@byteToSend 0072  
                               __pstringtext10 18D9                                 __pstringtext11 18CA  
                               __pstringtext12 0000                   ??_USBHIDCBSetIdleRateHandler 0071  
                             ?_USBStallHandler 0070                           ?i1_GenericQueue_Init 0070  
                     USBStdFeatureReqHandler@p 005B                                      snprintf@f 0152  
                                    snprintf@n 00DE                                      snprintf@s 014E  
                                     intlevel1 0000        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1190  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 1153                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1C15  
                    _USBHIDCBSetReportComplete 1BEE           __end_of_EUSART_SetRxInterruptHandler 1C2D  
                 _EUSART_SetRxInterruptHandler 1C25                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0B29  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 10DF                            _USBCtrlTrfRxService 0E93  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 1E55  
                             _SysTimeInterrupt 1C3D                        _USBStdFeatureReqHandler 02B6  
                                  ??_vfpfcnvrt 00CA                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 158C                                  __pstringtext1 03D6  
                                __pstringtext2 1000                                  __pstringtext3 18D3  
                                __pstringtext4 18DD                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18B8  
                          ?_EUSART_Receive_ISR 0070                            ?_USBWakeFromSuspend 0070  
                        ??_USBCtrlTrfInHandler 0073                          _USBAlternateInterface 014B  
                     ?_PS2Keyboard_GetScanCode 0070                    ?_IOCAF4_SetInterruptHandler 00A8  
        USBHIDCBSetIdleRateHandler@newIdleRate 0070                            USBEnableEndpoint@ep 007C  
                              _endpoint_number 0143                          ??i1_GenericQueue_Init 0074  
                         ?_USBCtrlTrfRxService 0070                                    ?_IOCAF4_ISR 0070  
                                  ?_IOCAF5_ISR 0070                             EUSART_Write@txData 00A9  
               __end_of_PIN_MANAGER_Initialize 2000                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 0065  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 0141                                _PIN_MANAGER_IOC 1C50  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 01D7  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00CD                         i1_GenericQueue_Enqueue 165A  
                                   _USB_CD_Ptr 18DD  
