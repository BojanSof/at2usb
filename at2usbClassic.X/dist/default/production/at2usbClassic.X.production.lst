

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon May 06 18:13:12 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    30                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2,group=3
    73                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2,group=3
    76                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,delta=2
   132                           	psect	text104,local,class=CODE,merge=1,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   136                           	dabs	1,0x620,48
   137                           	dabs	1,0x5C1,47
   138                           	dabs	1,0x5A0,33
   139                           	dabs	1,0x52D,67
   140                           	dabs	1,0x20,32,_BDT
   141                           	dabs	1,0x48,8,_CtrlTrfData
   142                           	dabs	1,0x40,8,_SetupPkt
   143                           	dabs	1,0xA0,8,_inputReport
   144                           	dabs	1,0x120,1,_outputReport
   145                           	dabs	1,0x232D,0,_keyboard
   146                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   147                           	dabs	1,0x7E,2
   148     0000                     
   149                           ; Generated 07/09/2023 GMT
   150                           ; 
   151                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   152                           ; All rights reserved.
   153                           ; 
   154                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   155                           ; 
   156                           ; Redistribution and use in source and binary forms, with or without modification, are
   157                           ; permitted provided that the following conditions are met:
   158                           ; 
   159                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   160                           ;        conditions and the following disclaimer.
   161                           ; 
   162                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   163                           ;        of conditions and the following disclaimer in the documentation and/or other
   164                           ;        materials provided with the distribution. Publication is not required when
   165                           ;        this file is used in an embedded application.
   166                           ; 
   167                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   168                           ;        software without specific prior written permission.
   169                           ; 
   170                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   171                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   172                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   173                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   174                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   175                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   176                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   177                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   178                           ; 
   179                           ; 
   180                           ; Code-generator required, PIC16F1459 Definitions
   181                           ; 
   182                           ; SFR Addresses
   183     0000                     	;# 
   184     0001                     	;# 
   185     0002                     	;# 
   186     0003                     	;# 
   187     0004                     	;# 
   188     0005                     	;# 
   189     0006                     	;# 
   190     0007                     	;# 
   191     0008                     	;# 
   192     0009                     	;# 
   193     000A                     	;# 
   194     000B                     	;# 
   195     000C                     	;# 
   196     000D                     	;# 
   197     000E                     	;# 
   198     0011                     	;# 
   199     0012                     	;# 
   200     0015                     	;# 
   201     0016                     	;# 
   202     0016                     	;# 
   203     0017                     	;# 
   204     0018                     	;# 
   205     0019                     	;# 
   206     001A                     	;# 
   207     001B                     	;# 
   208     001C                     	;# 
   209     008C                     	;# 
   210     008D                     	;# 
   211     008E                     	;# 
   212     0091                     	;# 
   213     0092                     	;# 
   214     0095                     	;# 
   215     0096                     	;# 
   216     0097                     	;# 
   217     0098                     	;# 
   218     0099                     	;# 
   219     009A                     	;# 
   220     009B                     	;# 
   221     009B                     	;# 
   222     009C                     	;# 
   223     009D                     	;# 
   224     009E                     	;# 
   225     009F                     	;# 
   226     010C                     	;# 
   227     010D                     	;# 
   228     010E                     	;# 
   229     0111                     	;# 
   230     0112                     	;# 
   231     0113                     	;# 
   232     0114                     	;# 
   233     0115                     	;# 
   234     0116                     	;# 
   235     0117                     	;# 
   236     0118                     	;# 
   237     0119                     	;# 
   238     011D                     	;# 
   239     018C                     	;# 
   240     018D                     	;# 
   241     018E                     	;# 
   242     0191                     	;# 
   243     0191                     	;# 
   244     0192                     	;# 
   245     0193                     	;# 
   246     0193                     	;# 
   247     0194                     	;# 
   248     0195                     	;# 
   249     0196                     	;# 
   250     0197                     	;# 
   251     0199                     	;# 
   252     019A                     	;# 
   253     019B                     	;# 
   254     019B                     	;# 
   255     019C                     	;# 
   256     019D                     	;# 
   257     019E                     	;# 
   258     019F                     	;# 
   259     020C                     	;# 
   260     020D                     	;# 
   261     0211                     	;# 
   262     0211                     	;# 
   263     0212                     	;# 
   264     0212                     	;# 
   265     0213                     	;# 
   266     0213                     	;# 
   267     0214                     	;# 
   268     0214                     	;# 
   269     0215                     	;# 
   270     0215                     	;# 
   271     0215                     	;# 
   272     0216                     	;# 
   273     0216                     	;# 
   274     0217                     	;# 
   275     0217                     	;# 
   276     0391                     	;# 
   277     0392                     	;# 
   278     0393                     	;# 
   279     0394                     	;# 
   280     0395                     	;# 
   281     0396                     	;# 
   282     039A                     	;# 
   283     039B                     	;# 
   284     0611                     	;# 
   285     0612                     	;# 
   286     0613                     	;# 
   287     0613                     	;# 
   288     0614                     	;# 
   289     0615                     	;# 
   290     0616                     	;# 
   291     0616                     	;# 
   292     0691                     	;# 
   293     0692                     	;# 
   294     0693                     	;# 
   295     0694                     	;# 
   296     0695                     	;# 
   297     0E8E                     	;# 
   298     0E8F                     	;# 
   299     0E90                     	;# 
   300     0E91                     	;# 
   301     0E92                     	;# 
   302     0E93                     	;# 
   303     0E94                     	;# 
   304     0E94                     	;# 
   305     0E95                     	;# 
   306     0E96                     	;# 
   307     0E97                     	;# 
   308     0E98                     	;# 
   309     0E99                     	;# 
   310     0E9A                     	;# 
   311     0E9B                     	;# 
   312     0E9C                     	;# 
   313     0E9D                     	;# 
   314     0E9E                     	;# 
   315     0E9F                     	;# 
   316     0FE4                     	;# 
   317     0FE5                     	;# 
   318     0FE6                     	;# 
   319     0FE7                     	;# 
   320     0FE8                     	;# 
   321     0FE9                     	;# 
   322     0FEA                     	;# 
   323     0FEB                     	;# 
   324     0FED                     	;# 
   325     0FEE                     	;# 
   326     0FEF                     	;# 
   327     0000                     	;# 
   328     0001                     	;# 
   329     0002                     	;# 
   330     0003                     	;# 
   331     0004                     	;# 
   332     0005                     	;# 
   333     0006                     	;# 
   334     0007                     	;# 
   335     0008                     	;# 
   336     0009                     	;# 
   337     000A                     	;# 
   338     000B                     	;# 
   339     000C                     	;# 
   340     000D                     	;# 
   341     000E                     	;# 
   342     0011                     	;# 
   343     0012                     	;# 
   344     0015                     	;# 
   345     0016                     	;# 
   346     0016                     	;# 
   347     0017                     	;# 
   348     0018                     	;# 
   349     0019                     	;# 
   350     001A                     	;# 
   351     001B                     	;# 
   352     001C                     	;# 
   353     008C                     	;# 
   354     008D                     	;# 
   355     008E                     	;# 
   356     0091                     	;# 
   357     0092                     	;# 
   358     0095                     	;# 
   359     0096                     	;# 
   360     0097                     	;# 
   361     0098                     	;# 
   362     0099                     	;# 
   363     009A                     	;# 
   364     009B                     	;# 
   365     009B                     	;# 
   366     009C                     	;# 
   367     009D                     	;# 
   368     009E                     	;# 
   369     009F                     	;# 
   370     010C                     	;# 
   371     010D                     	;# 
   372     010E                     	;# 
   373     0111                     	;# 
   374     0112                     	;# 
   375     0113                     	;# 
   376     0114                     	;# 
   377     0115                     	;# 
   378     0116                     	;# 
   379     0117                     	;# 
   380     0118                     	;# 
   381     0119                     	;# 
   382     011D                     	;# 
   383     018C                     	;# 
   384     018D                     	;# 
   385     018E                     	;# 
   386     0191                     	;# 
   387     0191                     	;# 
   388     0192                     	;# 
   389     0193                     	;# 
   390     0193                     	;# 
   391     0194                     	;# 
   392     0195                     	;# 
   393     0196                     	;# 
   394     0197                     	;# 
   395     0199                     	;# 
   396     019A                     	;# 
   397     019B                     	;# 
   398     019B                     	;# 
   399     019C                     	;# 
   400     019D                     	;# 
   401     019E                     	;# 
   402     019F                     	;# 
   403     020C                     	;# 
   404     020D                     	;# 
   405     0211                     	;# 
   406     0211                     	;# 
   407     0212                     	;# 
   408     0212                     	;# 
   409     0213                     	;# 
   410     0213                     	;# 
   411     0214                     	;# 
   412     0214                     	;# 
   413     0215                     	;# 
   414     0215                     	;# 
   415     0215                     	;# 
   416     0216                     	;# 
   417     0216                     	;# 
   418     0217                     	;# 
   419     0217                     	;# 
   420     0391                     	;# 
   421     0392                     	;# 
   422     0393                     	;# 
   423     0394                     	;# 
   424     0395                     	;# 
   425     0396                     	;# 
   426     039A                     	;# 
   427     039B                     	;# 
   428     0611                     	;# 
   429     0612                     	;# 
   430     0613                     	;# 
   431     0613                     	;# 
   432     0614                     	;# 
   433     0615                     	;# 
   434     0616                     	;# 
   435     0616                     	;# 
   436     0691                     	;# 
   437     0692                     	;# 
   438     0693                     	;# 
   439     0694                     	;# 
   440     0695                     	;# 
   441     0E8E                     	;# 
   442     0E8F                     	;# 
   443     0E90                     	;# 
   444     0E91                     	;# 
   445     0E92                     	;# 
   446     0E93                     	;# 
   447     0E94                     	;# 
   448     0E94                     	;# 
   449     0E95                     	;# 
   450     0E96                     	;# 
   451     0E97                     	;# 
   452     0E98                     	;# 
   453     0E99                     	;# 
   454     0E9A                     	;# 
   455     0E9B                     	;# 
   456     0E9C                     	;# 
   457     0E9D                     	;# 
   458     0E9E                     	;# 
   459     0E9F                     	;# 
   460     0FE4                     	;# 
   461     0FE5                     	;# 
   462     0FE6                     	;# 
   463     0FE7                     	;# 
   464     0FE8                     	;# 
   465     0FE9                     	;# 
   466     0FEA                     	;# 
   467     0FEB                     	;# 
   468     0FED                     	;# 
   469     0FEE                     	;# 
   470     0FEF                     	;# 
   471     0000                     	;# 
   472     0001                     	;# 
   473     0002                     	;# 
   474     0003                     	;# 
   475     0004                     	;# 
   476     0005                     	;# 
   477     0006                     	;# 
   478     0007                     	;# 
   479     0008                     	;# 
   480     0009                     	;# 
   481     000A                     	;# 
   482     000B                     	;# 
   483     000C                     	;# 
   484     000D                     	;# 
   485     000E                     	;# 
   486     0011                     	;# 
   487     0012                     	;# 
   488     0015                     	;# 
   489     0016                     	;# 
   490     0016                     	;# 
   491     0017                     	;# 
   492     0018                     	;# 
   493     0019                     	;# 
   494     001A                     	;# 
   495     001B                     	;# 
   496     001C                     	;# 
   497     008C                     	;# 
   498     008D                     	;# 
   499     008E                     	;# 
   500     0091                     	;# 
   501     0092                     	;# 
   502     0095                     	;# 
   503     0096                     	;# 
   504     0097                     	;# 
   505     0098                     	;# 
   506     0099                     	;# 
   507     009A                     	;# 
   508     009B                     	;# 
   509     009B                     	;# 
   510     009C                     	;# 
   511     009D                     	;# 
   512     009E                     	;# 
   513     009F                     	;# 
   514     010C                     	;# 
   515     010D                     	;# 
   516     010E                     	;# 
   517     0111                     	;# 
   518     0112                     	;# 
   519     0113                     	;# 
   520     0114                     	;# 
   521     0115                     	;# 
   522     0116                     	;# 
   523     0117                     	;# 
   524     0118                     	;# 
   525     0119                     	;# 
   526     011D                     	;# 
   527     018C                     	;# 
   528     018D                     	;# 
   529     018E                     	;# 
   530     0191                     	;# 
   531     0191                     	;# 
   532     0192                     	;# 
   533     0193                     	;# 
   534     0193                     	;# 
   535     0194                     	;# 
   536     0195                     	;# 
   537     0196                     	;# 
   538     0197                     	;# 
   539     0199                     	;# 
   540     019A                     	;# 
   541     019B                     	;# 
   542     019B                     	;# 
   543     019C                     	;# 
   544     019D                     	;# 
   545     019E                     	;# 
   546     019F                     	;# 
   547     020C                     	;# 
   548     020D                     	;# 
   549     0211                     	;# 
   550     0211                     	;# 
   551     0212                     	;# 
   552     0212                     	;# 
   553     0213                     	;# 
   554     0213                     	;# 
   555     0214                     	;# 
   556     0214                     	;# 
   557     0215                     	;# 
   558     0215                     	;# 
   559     0215                     	;# 
   560     0216                     	;# 
   561     0216                     	;# 
   562     0217                     	;# 
   563     0217                     	;# 
   564     0391                     	;# 
   565     0392                     	;# 
   566     0393                     	;# 
   567     0394                     	;# 
   568     0395                     	;# 
   569     0396                     	;# 
   570     039A                     	;# 
   571     039B                     	;# 
   572     0611                     	;# 
   573     0612                     	;# 
   574     0613                     	;# 
   575     0613                     	;# 
   576     0614                     	;# 
   577     0615                     	;# 
   578     0616                     	;# 
   579     0616                     	;# 
   580     0691                     	;# 
   581     0692                     	;# 
   582     0693                     	;# 
   583     0694                     	;# 
   584     0695                     	;# 
   585     0E8E                     	;# 
   586     0E8F                     	;# 
   587     0E90                     	;# 
   588     0E91                     	;# 
   589     0E92                     	;# 
   590     0E93                     	;# 
   591     0E94                     	;# 
   592     0E94                     	;# 
   593     0E95                     	;# 
   594     0E96                     	;# 
   595     0E97                     	;# 
   596     0E98                     	;# 
   597     0E99                     	;# 
   598     0E9A                     	;# 
   599     0E9B                     	;# 
   600     0E9C                     	;# 
   601     0E9D                     	;# 
   602     0E9E                     	;# 
   603     0E9F                     	;# 
   604     0FE4                     	;# 
   605     0FE5                     	;# 
   606     0FE6                     	;# 
   607     0FE7                     	;# 
   608     0FE8                     	;# 
   609     0FE9                     	;# 
   610     0FEA                     	;# 
   611     0FEB                     	;# 
   612     0FED                     	;# 
   613     0FEE                     	;# 
   614     0FEF                     	;# 
   615     0000                     	;# 
   616     0001                     	;# 
   617     0002                     	;# 
   618     0003                     	;# 
   619     0004                     	;# 
   620     0005                     	;# 
   621     0006                     	;# 
   622     0007                     	;# 
   623     0008                     	;# 
   624     0009                     	;# 
   625     000A                     	;# 
   626     000B                     	;# 
   627     000C                     	;# 
   628     000D                     	;# 
   629     000E                     	;# 
   630     0011                     	;# 
   631     0012                     	;# 
   632     0015                     	;# 
   633     0016                     	;# 
   634     0016                     	;# 
   635     0017                     	;# 
   636     0018                     	;# 
   637     0019                     	;# 
   638     001A                     	;# 
   639     001B                     	;# 
   640     001C                     	;# 
   641     008C                     	;# 
   642     008D                     	;# 
   643     008E                     	;# 
   644     0091                     	;# 
   645     0092                     	;# 
   646     0095                     	;# 
   647     0096                     	;# 
   648     0097                     	;# 
   649     0098                     	;# 
   650     0099                     	;# 
   651     009A                     	;# 
   652     009B                     	;# 
   653     009B                     	;# 
   654     009C                     	;# 
   655     009D                     	;# 
   656     009E                     	;# 
   657     009F                     	;# 
   658     010C                     	;# 
   659     010D                     	;# 
   660     010E                     	;# 
   661     0111                     	;# 
   662     0112                     	;# 
   663     0113                     	;# 
   664     0114                     	;# 
   665     0115                     	;# 
   666     0116                     	;# 
   667     0117                     	;# 
   668     0118                     	;# 
   669     0119                     	;# 
   670     011D                     	;# 
   671     018C                     	;# 
   672     018D                     	;# 
   673     018E                     	;# 
   674     0191                     	;# 
   675     0191                     	;# 
   676     0192                     	;# 
   677     0193                     	;# 
   678     0193                     	;# 
   679     0194                     	;# 
   680     0195                     	;# 
   681     0196                     	;# 
   682     0197                     	;# 
   683     0199                     	;# 
   684     019A                     	;# 
   685     019B                     	;# 
   686     019B                     	;# 
   687     019C                     	;# 
   688     019D                     	;# 
   689     019E                     	;# 
   690     019F                     	;# 
   691     020C                     	;# 
   692     020D                     	;# 
   693     0211                     	;# 
   694     0211                     	;# 
   695     0212                     	;# 
   696     0212                     	;# 
   697     0213                     	;# 
   698     0213                     	;# 
   699     0214                     	;# 
   700     0214                     	;# 
   701     0215                     	;# 
   702     0215                     	;# 
   703     0215                     	;# 
   704     0216                     	;# 
   705     0216                     	;# 
   706     0217                     	;# 
   707     0217                     	;# 
   708     0391                     	;# 
   709     0392                     	;# 
   710     0393                     	;# 
   711     0394                     	;# 
   712     0395                     	;# 
   713     0396                     	;# 
   714     039A                     	;# 
   715     039B                     	;# 
   716     0611                     	;# 
   717     0612                     	;# 
   718     0613                     	;# 
   719     0613                     	;# 
   720     0614                     	;# 
   721     0615                     	;# 
   722     0616                     	;# 
   723     0616                     	;# 
   724     0691                     	;# 
   725     0692                     	;# 
   726     0693                     	;# 
   727     0694                     	;# 
   728     0695                     	;# 
   729     0E8E                     	;# 
   730     0E8F                     	;# 
   731     0E90                     	;# 
   732     0E91                     	;# 
   733     0E92                     	;# 
   734     0E93                     	;# 
   735     0E94                     	;# 
   736     0E94                     	;# 
   737     0E95                     	;# 
   738     0E96                     	;# 
   739     0E97                     	;# 
   740     0E98                     	;# 
   741     0E99                     	;# 
   742     0E9A                     	;# 
   743     0E9B                     	;# 
   744     0E9C                     	;# 
   745     0E9D                     	;# 
   746     0E9E                     	;# 
   747     0E9F                     	;# 
   748     0FE4                     	;# 
   749     0FE5                     	;# 
   750     0FE6                     	;# 
   751     0FE7                     	;# 
   752     0FE8                     	;# 
   753     0FE9                     	;# 
   754     0FEA                     	;# 
   755     0FEB                     	;# 
   756     0FED                     	;# 
   757     0FEE                     	;# 
   758     0FEF                     	;# 
   759     0000                     	;# 
   760     0001                     	;# 
   761     0002                     	;# 
   762     0003                     	;# 
   763     0004                     	;# 
   764     0005                     	;# 
   765     0006                     	;# 
   766     0007                     	;# 
   767     0008                     	;# 
   768     0009                     	;# 
   769     000A                     	;# 
   770     000B                     	;# 
   771     000C                     	;# 
   772     000D                     	;# 
   773     000E                     	;# 
   774     0011                     	;# 
   775     0012                     	;# 
   776     0015                     	;# 
   777     0016                     	;# 
   778     0016                     	;# 
   779     0017                     	;# 
   780     0018                     	;# 
   781     0019                     	;# 
   782     001A                     	;# 
   783     001B                     	;# 
   784     001C                     	;# 
   785     008C                     	;# 
   786     008D                     	;# 
   787     008E                     	;# 
   788     0091                     	;# 
   789     0092                     	;# 
   790     0095                     	;# 
   791     0096                     	;# 
   792     0097                     	;# 
   793     0098                     	;# 
   794     0099                     	;# 
   795     009A                     	;# 
   796     009B                     	;# 
   797     009B                     	;# 
   798     009C                     	;# 
   799     009D                     	;# 
   800     009E                     	;# 
   801     009F                     	;# 
   802     010C                     	;# 
   803     010D                     	;# 
   804     010E                     	;# 
   805     0111                     	;# 
   806     0112                     	;# 
   807     0113                     	;# 
   808     0114                     	;# 
   809     0115                     	;# 
   810     0116                     	;# 
   811     0117                     	;# 
   812     0118                     	;# 
   813     0119                     	;# 
   814     011D                     	;# 
   815     018C                     	;# 
   816     018D                     	;# 
   817     018E                     	;# 
   818     0191                     	;# 
   819     0191                     	;# 
   820     0192                     	;# 
   821     0193                     	;# 
   822     0193                     	;# 
   823     0194                     	;# 
   824     0195                     	;# 
   825     0196                     	;# 
   826     0197                     	;# 
   827     0199                     	;# 
   828     019A                     	;# 
   829     019B                     	;# 
   830     019B                     	;# 
   831     019C                     	;# 
   832     019D                     	;# 
   833     019E                     	;# 
   834     019F                     	;# 
   835     020C                     	;# 
   836     020D                     	;# 
   837     0211                     	;# 
   838     0211                     	;# 
   839     0212                     	;# 
   840     0212                     	;# 
   841     0213                     	;# 
   842     0213                     	;# 
   843     0214                     	;# 
   844     0214                     	;# 
   845     0215                     	;# 
   846     0215                     	;# 
   847     0215                     	;# 
   848     0216                     	;# 
   849     0216                     	;# 
   850     0217                     	;# 
   851     0217                     	;# 
   852     0391                     	;# 
   853     0392                     	;# 
   854     0393                     	;# 
   855     0394                     	;# 
   856     0395                     	;# 
   857     0396                     	;# 
   858     039A                     	;# 
   859     039B                     	;# 
   860     0611                     	;# 
   861     0612                     	;# 
   862     0613                     	;# 
   863     0613                     	;# 
   864     0614                     	;# 
   865     0615                     	;# 
   866     0616                     	;# 
   867     0616                     	;# 
   868     0691                     	;# 
   869     0692                     	;# 
   870     0693                     	;# 
   871     0694                     	;# 
   872     0695                     	;# 
   873     0E8E                     	;# 
   874     0E8F                     	;# 
   875     0E90                     	;# 
   876     0E91                     	;# 
   877     0E92                     	;# 
   878     0E93                     	;# 
   879     0E94                     	;# 
   880     0E94                     	;# 
   881     0E95                     	;# 
   882     0E96                     	;# 
   883     0E97                     	;# 
   884     0E98                     	;# 
   885     0E99                     	;# 
   886     0E9A                     	;# 
   887     0E9B                     	;# 
   888     0E9C                     	;# 
   889     0E9D                     	;# 
   890     0E9E                     	;# 
   891     0E9F                     	;# 
   892     0FE4                     	;# 
   893     0FE5                     	;# 
   894     0FE6                     	;# 
   895     0FE7                     	;# 
   896     0FE8                     	;# 
   897     0FE9                     	;# 
   898     0FEA                     	;# 
   899     0FEB                     	;# 
   900     0FED                     	;# 
   901     0FEE                     	;# 
   902     0FEF                     	;# 
   903     0000                     	;# 
   904     0001                     	;# 
   905     0002                     	;# 
   906     0003                     	;# 
   907     0004                     	;# 
   908     0005                     	;# 
   909     0006                     	;# 
   910     0007                     	;# 
   911     0008                     	;# 
   912     0009                     	;# 
   913     000A                     	;# 
   914     000B                     	;# 
   915     000C                     	;# 
   916     000D                     	;# 
   917     000E                     	;# 
   918     0011                     	;# 
   919     0012                     	;# 
   920     0015                     	;# 
   921     0016                     	;# 
   922     0016                     	;# 
   923     0017                     	;# 
   924     0018                     	;# 
   925     0019                     	;# 
   926     001A                     	;# 
   927     001B                     	;# 
   928     001C                     	;# 
   929     008C                     	;# 
   930     008D                     	;# 
   931     008E                     	;# 
   932     0091                     	;# 
   933     0092                     	;# 
   934     0095                     	;# 
   935     0096                     	;# 
   936     0097                     	;# 
   937     0098                     	;# 
   938     0099                     	;# 
   939     009A                     	;# 
   940     009B                     	;# 
   941     009B                     	;# 
   942     009C                     	;# 
   943     009D                     	;# 
   944     009E                     	;# 
   945     009F                     	;# 
   946     010C                     	;# 
   947     010D                     	;# 
   948     010E                     	;# 
   949     0111                     	;# 
   950     0112                     	;# 
   951     0113                     	;# 
   952     0114                     	;# 
   953     0115                     	;# 
   954     0116                     	;# 
   955     0117                     	;# 
   956     0118                     	;# 
   957     0119                     	;# 
   958     011D                     	;# 
   959     018C                     	;# 
   960     018D                     	;# 
   961     018E                     	;# 
   962     0191                     	;# 
   963     0191                     	;# 
   964     0192                     	;# 
   965     0193                     	;# 
   966     0193                     	;# 
   967     0194                     	;# 
   968     0195                     	;# 
   969     0196                     	;# 
   970     0197                     	;# 
   971     0199                     	;# 
   972     019A                     	;# 
   973     019B                     	;# 
   974     019B                     	;# 
   975     019C                     	;# 
   976     019D                     	;# 
   977     019E                     	;# 
   978     019F                     	;# 
   979     020C                     	;# 
   980     020D                     	;# 
   981     0211                     	;# 
   982     0211                     	;# 
   983     0212                     	;# 
   984     0212                     	;# 
   985     0213                     	;# 
   986     0213                     	;# 
   987     0214                     	;# 
   988     0214                     	;# 
   989     0215                     	;# 
   990     0215                     	;# 
   991     0215                     	;# 
   992     0216                     	;# 
   993     0216                     	;# 
   994     0217                     	;# 
   995     0217                     	;# 
   996     0391                     	;# 
   997     0392                     	;# 
   998     0393                     	;# 
   999     0394                     	;# 
  1000     0395                     	;# 
  1001     0396                     	;# 
  1002     039A                     	;# 
  1003     039B                     	;# 
  1004     0611                     	;# 
  1005     0612                     	;# 
  1006     0613                     	;# 
  1007     0613                     	;# 
  1008     0614                     	;# 
  1009     0615                     	;# 
  1010     0616                     	;# 
  1011     0616                     	;# 
  1012     0691                     	;# 
  1013     0692                     	;# 
  1014     0693                     	;# 
  1015     0694                     	;# 
  1016     0695                     	;# 
  1017     0E8E                     	;# 
  1018     0E8F                     	;# 
  1019     0E90                     	;# 
  1020     0E91                     	;# 
  1021     0E92                     	;# 
  1022     0E93                     	;# 
  1023     0E94                     	;# 
  1024     0E94                     	;# 
  1025     0E95                     	;# 
  1026     0E96                     	;# 
  1027     0E97                     	;# 
  1028     0E98                     	;# 
  1029     0E99                     	;# 
  1030     0E9A                     	;# 
  1031     0E9B                     	;# 
  1032     0E9C                     	;# 
  1033     0E9D                     	;# 
  1034     0E9E                     	;# 
  1035     0E9F                     	;# 
  1036     0FE4                     	;# 
  1037     0FE5                     	;# 
  1038     0FE6                     	;# 
  1039     0FE7                     	;# 
  1040     0FE8                     	;# 
  1041     0FE9                     	;# 
  1042     0FEA                     	;# 
  1043     0FEB                     	;# 
  1044     0FED                     	;# 
  1045     0FEE                     	;# 
  1046     0FEF                     	;# 
  1047     0000                     	;# 
  1048     0001                     	;# 
  1049     0002                     	;# 
  1050     0003                     	;# 
  1051     0004                     	;# 
  1052     0005                     	;# 
  1053     0006                     	;# 
  1054     0007                     	;# 
  1055     0008                     	;# 
  1056     0009                     	;# 
  1057     000A                     	;# 
  1058     000B                     	;# 
  1059     000C                     	;# 
  1060     000D                     	;# 
  1061     000E                     	;# 
  1062     0011                     	;# 
  1063     0012                     	;# 
  1064     0015                     	;# 
  1065     0016                     	;# 
  1066     0016                     	;# 
  1067     0017                     	;# 
  1068     0018                     	;# 
  1069     0019                     	;# 
  1070     001A                     	;# 
  1071     001B                     	;# 
  1072     001C                     	;# 
  1073     008C                     	;# 
  1074     008D                     	;# 
  1075     008E                     	;# 
  1076     0091                     	;# 
  1077     0092                     	;# 
  1078     0095                     	;# 
  1079     0096                     	;# 
  1080     0097                     	;# 
  1081     0098                     	;# 
  1082     0099                     	;# 
  1083     009A                     	;# 
  1084     009B                     	;# 
  1085     009B                     	;# 
  1086     009C                     	;# 
  1087     009D                     	;# 
  1088     009E                     	;# 
  1089     009F                     	;# 
  1090     010C                     	;# 
  1091     010D                     	;# 
  1092     010E                     	;# 
  1093     0111                     	;# 
  1094     0112                     	;# 
  1095     0113                     	;# 
  1096     0114                     	;# 
  1097     0115                     	;# 
  1098     0116                     	;# 
  1099     0117                     	;# 
  1100     0118                     	;# 
  1101     0119                     	;# 
  1102     011D                     	;# 
  1103     018C                     	;# 
  1104     018D                     	;# 
  1105     018E                     	;# 
  1106     0191                     	;# 
  1107     0191                     	;# 
  1108     0192                     	;# 
  1109     0193                     	;# 
  1110     0193                     	;# 
  1111     0194                     	;# 
  1112     0195                     	;# 
  1113     0196                     	;# 
  1114     0197                     	;# 
  1115     0199                     	;# 
  1116     019A                     	;# 
  1117     019B                     	;# 
  1118     019B                     	;# 
  1119     019C                     	;# 
  1120     019D                     	;# 
  1121     019E                     	;# 
  1122     019F                     	;# 
  1123     020C                     	;# 
  1124     020D                     	;# 
  1125     0211                     	;# 
  1126     0211                     	;# 
  1127     0212                     	;# 
  1128     0212                     	;# 
  1129     0213                     	;# 
  1130     0213                     	;# 
  1131     0214                     	;# 
  1132     0214                     	;# 
  1133     0215                     	;# 
  1134     0215                     	;# 
  1135     0215                     	;# 
  1136     0216                     	;# 
  1137     0216                     	;# 
  1138     0217                     	;# 
  1139     0217                     	;# 
  1140     0391                     	;# 
  1141     0392                     	;# 
  1142     0393                     	;# 
  1143     0394                     	;# 
  1144     0395                     	;# 
  1145     0396                     	;# 
  1146     039A                     	;# 
  1147     039B                     	;# 
  1148     0611                     	;# 
  1149     0612                     	;# 
  1150     0613                     	;# 
  1151     0613                     	;# 
  1152     0614                     	;# 
  1153     0615                     	;# 
  1154     0616                     	;# 
  1155     0616                     	;# 
  1156     0691                     	;# 
  1157     0692                     	;# 
  1158     0693                     	;# 
  1159     0694                     	;# 
  1160     0695                     	;# 
  1161     0E8E                     	;# 
  1162     0E8F                     	;# 
  1163     0E90                     	;# 
  1164     0E91                     	;# 
  1165     0E92                     	;# 
  1166     0E93                     	;# 
  1167     0E94                     	;# 
  1168     0E94                     	;# 
  1169     0E95                     	;# 
  1170     0E96                     	;# 
  1171     0E97                     	;# 
  1172     0E98                     	;# 
  1173     0E99                     	;# 
  1174     0E9A                     	;# 
  1175     0E9B                     	;# 
  1176     0E9C                     	;# 
  1177     0E9D                     	;# 
  1178     0E9E                     	;# 
  1179     0E9F                     	;# 
  1180     0FE4                     	;# 
  1181     0FE5                     	;# 
  1182     0FE6                     	;# 
  1183     0FE7                     	;# 
  1184     0FE8                     	;# 
  1185     0FE9                     	;# 
  1186     0FEA                     	;# 
  1187     0FEB                     	;# 
  1188     0FED                     	;# 
  1189     0FEE                     	;# 
  1190     0FEF                     	;# 
  1191     0000                     	;# 
  1192     0001                     	;# 
  1193     0002                     	;# 
  1194     0003                     	;# 
  1195     0004                     	;# 
  1196     0005                     	;# 
  1197     0006                     	;# 
  1198     0007                     	;# 
  1199     0008                     	;# 
  1200     0009                     	;# 
  1201     000A                     	;# 
  1202     000B                     	;# 
  1203     000C                     	;# 
  1204     000D                     	;# 
  1205     000E                     	;# 
  1206     0011                     	;# 
  1207     0012                     	;# 
  1208     0015                     	;# 
  1209     0016                     	;# 
  1210     0016                     	;# 
  1211     0017                     	;# 
  1212     0018                     	;# 
  1213     0019                     	;# 
  1214     001A                     	;# 
  1215     001B                     	;# 
  1216     001C                     	;# 
  1217     008C                     	;# 
  1218     008D                     	;# 
  1219     008E                     	;# 
  1220     0091                     	;# 
  1221     0092                     	;# 
  1222     0095                     	;# 
  1223     0096                     	;# 
  1224     0097                     	;# 
  1225     0098                     	;# 
  1226     0099                     	;# 
  1227     009A                     	;# 
  1228     009B                     	;# 
  1229     009B                     	;# 
  1230     009C                     	;# 
  1231     009D                     	;# 
  1232     009E                     	;# 
  1233     009F                     	;# 
  1234     010C                     	;# 
  1235     010D                     	;# 
  1236     010E                     	;# 
  1237     0111                     	;# 
  1238     0112                     	;# 
  1239     0113                     	;# 
  1240     0114                     	;# 
  1241     0115                     	;# 
  1242     0116                     	;# 
  1243     0117                     	;# 
  1244     0118                     	;# 
  1245     0119                     	;# 
  1246     011D                     	;# 
  1247     018C                     	;# 
  1248     018D                     	;# 
  1249     018E                     	;# 
  1250     0191                     	;# 
  1251     0191                     	;# 
  1252     0192                     	;# 
  1253     0193                     	;# 
  1254     0193                     	;# 
  1255     0194                     	;# 
  1256     0195                     	;# 
  1257     0196                     	;# 
  1258     0197                     	;# 
  1259     0199                     	;# 
  1260     019A                     	;# 
  1261     019B                     	;# 
  1262     019B                     	;# 
  1263     019C                     	;# 
  1264     019D                     	;# 
  1265     019E                     	;# 
  1266     019F                     	;# 
  1267     020C                     	;# 
  1268     020D                     	;# 
  1269     0211                     	;# 
  1270     0211                     	;# 
  1271     0212                     	;# 
  1272     0212                     	;# 
  1273     0213                     	;# 
  1274     0213                     	;# 
  1275     0214                     	;# 
  1276     0214                     	;# 
  1277     0215                     	;# 
  1278     0215                     	;# 
  1279     0215                     	;# 
  1280     0216                     	;# 
  1281     0216                     	;# 
  1282     0217                     	;# 
  1283     0217                     	;# 
  1284     0391                     	;# 
  1285     0392                     	;# 
  1286     0393                     	;# 
  1287     0394                     	;# 
  1288     0395                     	;# 
  1289     0396                     	;# 
  1290     039A                     	;# 
  1291     039B                     	;# 
  1292     0611                     	;# 
  1293     0612                     	;# 
  1294     0613                     	;# 
  1295     0613                     	;# 
  1296     0614                     	;# 
  1297     0615                     	;# 
  1298     0616                     	;# 
  1299     0616                     	;# 
  1300     0691                     	;# 
  1301     0692                     	;# 
  1302     0693                     	;# 
  1303     0694                     	;# 
  1304     0695                     	;# 
  1305     0E8E                     	;# 
  1306     0E8F                     	;# 
  1307     0E90                     	;# 
  1308     0E91                     	;# 
  1309     0E92                     	;# 
  1310     0E93                     	;# 
  1311     0E94                     	;# 
  1312     0E94                     	;# 
  1313     0E95                     	;# 
  1314     0E96                     	;# 
  1315     0E97                     	;# 
  1316     0E98                     	;# 
  1317     0E99                     	;# 
  1318     0E9A                     	;# 
  1319     0E9B                     	;# 
  1320     0E9C                     	;# 
  1321     0E9D                     	;# 
  1322     0E9E                     	;# 
  1323     0E9F                     	;# 
  1324     0FE4                     	;# 
  1325     0FE5                     	;# 
  1326     0FE6                     	;# 
  1327     0FE7                     	;# 
  1328     0FE8                     	;# 
  1329     0FE9                     	;# 
  1330     0FEA                     	;# 
  1331     0FEB                     	;# 
  1332     0FED                     	;# 
  1333     0FEE                     	;# 
  1334     0FEF                     	;# 
  1335     0000                     	;# 
  1336     0001                     	;# 
  1337     0002                     	;# 
  1338     0003                     	;# 
  1339     0004                     	;# 
  1340     0005                     	;# 
  1341     0006                     	;# 
  1342     0007                     	;# 
  1343     0008                     	;# 
  1344     0009                     	;# 
  1345     000A                     	;# 
  1346     000B                     	;# 
  1347     000C                     	;# 
  1348     000D                     	;# 
  1349     000E                     	;# 
  1350     0011                     	;# 
  1351     0012                     	;# 
  1352     0015                     	;# 
  1353     0016                     	;# 
  1354     0016                     	;# 
  1355     0017                     	;# 
  1356     0018                     	;# 
  1357     0019                     	;# 
  1358     001A                     	;# 
  1359     001B                     	;# 
  1360     001C                     	;# 
  1361     008C                     	;# 
  1362     008D                     	;# 
  1363     008E                     	;# 
  1364     0091                     	;# 
  1365     0092                     	;# 
  1366     0095                     	;# 
  1367     0096                     	;# 
  1368     0097                     	;# 
  1369     0098                     	;# 
  1370     0099                     	;# 
  1371     009A                     	;# 
  1372     009B                     	;# 
  1373     009B                     	;# 
  1374     009C                     	;# 
  1375     009D                     	;# 
  1376     009E                     	;# 
  1377     009F                     	;# 
  1378     010C                     	;# 
  1379     010D                     	;# 
  1380     010E                     	;# 
  1381     0111                     	;# 
  1382     0112                     	;# 
  1383     0113                     	;# 
  1384     0114                     	;# 
  1385     0115                     	;# 
  1386     0116                     	;# 
  1387     0117                     	;# 
  1388     0118                     	;# 
  1389     0119                     	;# 
  1390     011D                     	;# 
  1391     018C                     	;# 
  1392     018D                     	;# 
  1393     018E                     	;# 
  1394     0191                     	;# 
  1395     0191                     	;# 
  1396     0192                     	;# 
  1397     0193                     	;# 
  1398     0193                     	;# 
  1399     0194                     	;# 
  1400     0195                     	;# 
  1401     0196                     	;# 
  1402     0197                     	;# 
  1403     0199                     	;# 
  1404     019A                     	;# 
  1405     019B                     	;# 
  1406     019B                     	;# 
  1407     019C                     	;# 
  1408     019D                     	;# 
  1409     019E                     	;# 
  1410     019F                     	;# 
  1411     020C                     	;# 
  1412     020D                     	;# 
  1413     0211                     	;# 
  1414     0211                     	;# 
  1415     0212                     	;# 
  1416     0212                     	;# 
  1417     0213                     	;# 
  1418     0213                     	;# 
  1419     0214                     	;# 
  1420     0214                     	;# 
  1421     0215                     	;# 
  1422     0215                     	;# 
  1423     0215                     	;# 
  1424     0216                     	;# 
  1425     0216                     	;# 
  1426     0217                     	;# 
  1427     0217                     	;# 
  1428     0391                     	;# 
  1429     0392                     	;# 
  1430     0393                     	;# 
  1431     0394                     	;# 
  1432     0395                     	;# 
  1433     0396                     	;# 
  1434     039A                     	;# 
  1435     039B                     	;# 
  1436     0611                     	;# 
  1437     0612                     	;# 
  1438     0613                     	;# 
  1439     0613                     	;# 
  1440     0614                     	;# 
  1441     0615                     	;# 
  1442     0616                     	;# 
  1443     0616                     	;# 
  1444     0691                     	;# 
  1445     0692                     	;# 
  1446     0693                     	;# 
  1447     0694                     	;# 
  1448     0695                     	;# 
  1449     0E8E                     	;# 
  1450     0E8F                     	;# 
  1451     0E90                     	;# 
  1452     0E91                     	;# 
  1453     0E92                     	;# 
  1454     0E93                     	;# 
  1455     0E94                     	;# 
  1456     0E94                     	;# 
  1457     0E95                     	;# 
  1458     0E96                     	;# 
  1459     0E97                     	;# 
  1460     0E98                     	;# 
  1461     0E99                     	;# 
  1462     0E9A                     	;# 
  1463     0E9B                     	;# 
  1464     0E9C                     	;# 
  1465     0E9D                     	;# 
  1466     0E9E                     	;# 
  1467     0E9F                     	;# 
  1468     0FE4                     	;# 
  1469     0FE5                     	;# 
  1470     0FE6                     	;# 
  1471     0FE7                     	;# 
  1472     0FE8                     	;# 
  1473     0FE9                     	;# 
  1474     0FEA                     	;# 
  1475     0FEB                     	;# 
  1476     0FED                     	;# 
  1477     0FEE                     	;# 
  1478     0FEF                     	;# 
  1479     0000                     	;# 
  1480     0001                     	;# 
  1481     0002                     	;# 
  1482     0003                     	;# 
  1483     0004                     	;# 
  1484     0005                     	;# 
  1485     0006                     	;# 
  1486     0007                     	;# 
  1487     0008                     	;# 
  1488     0009                     	;# 
  1489     000A                     	;# 
  1490     000B                     	;# 
  1491     000C                     	;# 
  1492     000D                     	;# 
  1493     000E                     	;# 
  1494     0011                     	;# 
  1495     0012                     	;# 
  1496     0015                     	;# 
  1497     0016                     	;# 
  1498     0016                     	;# 
  1499     0017                     	;# 
  1500     0018                     	;# 
  1501     0019                     	;# 
  1502     001A                     	;# 
  1503     001B                     	;# 
  1504     001C                     	;# 
  1505     008C                     	;# 
  1506     008D                     	;# 
  1507     008E                     	;# 
  1508     0091                     	;# 
  1509     0092                     	;# 
  1510     0095                     	;# 
  1511     0096                     	;# 
  1512     0097                     	;# 
  1513     0098                     	;# 
  1514     0099                     	;# 
  1515     009A                     	;# 
  1516     009B                     	;# 
  1517     009B                     	;# 
  1518     009C                     	;# 
  1519     009D                     	;# 
  1520     009E                     	;# 
  1521     009F                     	;# 
  1522     010C                     	;# 
  1523     010D                     	;# 
  1524     010E                     	;# 
  1525     0111                     	;# 
  1526     0112                     	;# 
  1527     0113                     	;# 
  1528     0114                     	;# 
  1529     0115                     	;# 
  1530     0116                     	;# 
  1531     0117                     	;# 
  1532     0118                     	;# 
  1533     0119                     	;# 
  1534     011D                     	;# 
  1535     018C                     	;# 
  1536     018D                     	;# 
  1537     018E                     	;# 
  1538     0191                     	;# 
  1539     0191                     	;# 
  1540     0192                     	;# 
  1541     0193                     	;# 
  1542     0193                     	;# 
  1543     0194                     	;# 
  1544     0195                     	;# 
  1545     0196                     	;# 
  1546     0197                     	;# 
  1547     0199                     	;# 
  1548     019A                     	;# 
  1549     019B                     	;# 
  1550     019B                     	;# 
  1551     019C                     	;# 
  1552     019D                     	;# 
  1553     019E                     	;# 
  1554     019F                     	;# 
  1555     020C                     	;# 
  1556     020D                     	;# 
  1557     0211                     	;# 
  1558     0211                     	;# 
  1559     0212                     	;# 
  1560     0212                     	;# 
  1561     0213                     	;# 
  1562     0213                     	;# 
  1563     0214                     	;# 
  1564     0214                     	;# 
  1565     0215                     	;# 
  1566     0215                     	;# 
  1567     0215                     	;# 
  1568     0216                     	;# 
  1569     0216                     	;# 
  1570     0217                     	;# 
  1571     0217                     	;# 
  1572     0391                     	;# 
  1573     0392                     	;# 
  1574     0393                     	;# 
  1575     0394                     	;# 
  1576     0395                     	;# 
  1577     0396                     	;# 
  1578     039A                     	;# 
  1579     039B                     	;# 
  1580     0611                     	;# 
  1581     0612                     	;# 
  1582     0613                     	;# 
  1583     0613                     	;# 
  1584     0614                     	;# 
  1585     0615                     	;# 
  1586     0616                     	;# 
  1587     0616                     	;# 
  1588     0691                     	;# 
  1589     0692                     	;# 
  1590     0693                     	;# 
  1591     0694                     	;# 
  1592     0695                     	;# 
  1593     0E8E                     	;# 
  1594     0E8F                     	;# 
  1595     0E90                     	;# 
  1596     0E91                     	;# 
  1597     0E92                     	;# 
  1598     0E93                     	;# 
  1599     0E94                     	;# 
  1600     0E94                     	;# 
  1601     0E95                     	;# 
  1602     0E96                     	;# 
  1603     0E97                     	;# 
  1604     0E98                     	;# 
  1605     0E99                     	;# 
  1606     0E9A                     	;# 
  1607     0E9B                     	;# 
  1608     0E9C                     	;# 
  1609     0E9D                     	;# 
  1610     0E9E                     	;# 
  1611     0E9F                     	;# 
  1612     0FE4                     	;# 
  1613     0FE5                     	;# 
  1614     0FE6                     	;# 
  1615     0FE7                     	;# 
  1616     0FE8                     	;# 
  1617     0FE9                     	;# 
  1618     0FEA                     	;# 
  1619     0FEB                     	;# 
  1620     0FED                     	;# 
  1621     0FEE                     	;# 
  1622     0FEF                     	;# 
  1623     0000                     	;# 
  1624     0001                     	;# 
  1625     0002                     	;# 
  1626     0003                     	;# 
  1627     0004                     	;# 
  1628     0005                     	;# 
  1629     0006                     	;# 
  1630     0007                     	;# 
  1631     0008                     	;# 
  1632     0009                     	;# 
  1633     000A                     	;# 
  1634     000B                     	;# 
  1635     000C                     	;# 
  1636     000D                     	;# 
  1637     000E                     	;# 
  1638     0011                     	;# 
  1639     0012                     	;# 
  1640     0015                     	;# 
  1641     0016                     	;# 
  1642     0016                     	;# 
  1643     0017                     	;# 
  1644     0018                     	;# 
  1645     0019                     	;# 
  1646     001A                     	;# 
  1647     001B                     	;# 
  1648     001C                     	;# 
  1649     008C                     	;# 
  1650     008D                     	;# 
  1651     008E                     	;# 
  1652     0091                     	;# 
  1653     0092                     	;# 
  1654     0095                     	;# 
  1655     0096                     	;# 
  1656     0097                     	;# 
  1657     0098                     	;# 
  1658     0099                     	;# 
  1659     009A                     	;# 
  1660     009B                     	;# 
  1661     009B                     	;# 
  1662     009C                     	;# 
  1663     009D                     	;# 
  1664     009E                     	;# 
  1665     009F                     	;# 
  1666     010C                     	;# 
  1667     010D                     	;# 
  1668     010E                     	;# 
  1669     0111                     	;# 
  1670     0112                     	;# 
  1671     0113                     	;# 
  1672     0114                     	;# 
  1673     0115                     	;# 
  1674     0116                     	;# 
  1675     0117                     	;# 
  1676     0118                     	;# 
  1677     0119                     	;# 
  1678     011D                     	;# 
  1679     018C                     	;# 
  1680     018D                     	;# 
  1681     018E                     	;# 
  1682     0191                     	;# 
  1683     0191                     	;# 
  1684     0192                     	;# 
  1685     0193                     	;# 
  1686     0193                     	;# 
  1687     0194                     	;# 
  1688     0195                     	;# 
  1689     0196                     	;# 
  1690     0197                     	;# 
  1691     0199                     	;# 
  1692     019A                     	;# 
  1693     019B                     	;# 
  1694     019B                     	;# 
  1695     019C                     	;# 
  1696     019D                     	;# 
  1697     019E                     	;# 
  1698     019F                     	;# 
  1699     020C                     	;# 
  1700     020D                     	;# 
  1701     0211                     	;# 
  1702     0211                     	;# 
  1703     0212                     	;# 
  1704     0212                     	;# 
  1705     0213                     	;# 
  1706     0213                     	;# 
  1707     0214                     	;# 
  1708     0214                     	;# 
  1709     0215                     	;# 
  1710     0215                     	;# 
  1711     0215                     	;# 
  1712     0216                     	;# 
  1713     0216                     	;# 
  1714     0217                     	;# 
  1715     0217                     	;# 
  1716     0391                     	;# 
  1717     0392                     	;# 
  1718     0393                     	;# 
  1719     0394                     	;# 
  1720     0395                     	;# 
  1721     0396                     	;# 
  1722     039A                     	;# 
  1723     039B                     	;# 
  1724     0611                     	;# 
  1725     0612                     	;# 
  1726     0613                     	;# 
  1727     0613                     	;# 
  1728     0614                     	;# 
  1729     0615                     	;# 
  1730     0616                     	;# 
  1731     0616                     	;# 
  1732     0691                     	;# 
  1733     0692                     	;# 
  1734     0693                     	;# 
  1735     0694                     	;# 
  1736     0695                     	;# 
  1737     0E8E                     	;# 
  1738     0E8F                     	;# 
  1739     0E90                     	;# 
  1740     0E91                     	;# 
  1741     0E92                     	;# 
  1742     0E93                     	;# 
  1743     0E94                     	;# 
  1744     0E94                     	;# 
  1745     0E95                     	;# 
  1746     0E96                     	;# 
  1747     0E97                     	;# 
  1748     0E98                     	;# 
  1749     0E99                     	;# 
  1750     0E9A                     	;# 
  1751     0E9B                     	;# 
  1752     0E9C                     	;# 
  1753     0E9D                     	;# 
  1754     0E9E                     	;# 
  1755     0E9F                     	;# 
  1756     0FE4                     	;# 
  1757     0FE5                     	;# 
  1758     0FE6                     	;# 
  1759     0FE7                     	;# 
  1760     0FE8                     	;# 
  1761     0FE9                     	;# 
  1762     0FEA                     	;# 
  1763     0FEB                     	;# 
  1764     0FED                     	;# 
  1765     0FEE                     	;# 
  1766     0FEF                     	;# 
  1767     0000                     	;# 
  1768     0001                     	;# 
  1769     0002                     	;# 
  1770     0003                     	;# 
  1771     0004                     	;# 
  1772     0005                     	;# 
  1773     0006                     	;# 
  1774     0007                     	;# 
  1775     0008                     	;# 
  1776     0009                     	;# 
  1777     000A                     	;# 
  1778     000B                     	;# 
  1779     000C                     	;# 
  1780     000D                     	;# 
  1781     000E                     	;# 
  1782     0011                     	;# 
  1783     0012                     	;# 
  1784     0015                     	;# 
  1785     0016                     	;# 
  1786     0016                     	;# 
  1787     0017                     	;# 
  1788     0018                     	;# 
  1789     0019                     	;# 
  1790     001A                     	;# 
  1791     001B                     	;# 
  1792     001C                     	;# 
  1793     008C                     	;# 
  1794     008D                     	;# 
  1795     008E                     	;# 
  1796     0091                     	;# 
  1797     0092                     	;# 
  1798     0095                     	;# 
  1799     0096                     	;# 
  1800     0097                     	;# 
  1801     0098                     	;# 
  1802     0099                     	;# 
  1803     009A                     	;# 
  1804     009B                     	;# 
  1805     009B                     	;# 
  1806     009C                     	;# 
  1807     009D                     	;# 
  1808     009E                     	;# 
  1809     009F                     	;# 
  1810     010C                     	;# 
  1811     010D                     	;# 
  1812     010E                     	;# 
  1813     0111                     	;# 
  1814     0112                     	;# 
  1815     0113                     	;# 
  1816     0114                     	;# 
  1817     0115                     	;# 
  1818     0116                     	;# 
  1819     0117                     	;# 
  1820     0118                     	;# 
  1821     0119                     	;# 
  1822     011D                     	;# 
  1823     018C                     	;# 
  1824     018D                     	;# 
  1825     018E                     	;# 
  1826     0191                     	;# 
  1827     0191                     	;# 
  1828     0192                     	;# 
  1829     0193                     	;# 
  1830     0193                     	;# 
  1831     0194                     	;# 
  1832     0195                     	;# 
  1833     0196                     	;# 
  1834     0197                     	;# 
  1835     0199                     	;# 
  1836     019A                     	;# 
  1837     019B                     	;# 
  1838     019B                     	;# 
  1839     019C                     	;# 
  1840     019D                     	;# 
  1841     019E                     	;# 
  1842     019F                     	;# 
  1843     020C                     	;# 
  1844     020D                     	;# 
  1845     0211                     	;# 
  1846     0211                     	;# 
  1847     0212                     	;# 
  1848     0212                     	;# 
  1849     0213                     	;# 
  1850     0213                     	;# 
  1851     0214                     	;# 
  1852     0214                     	;# 
  1853     0215                     	;# 
  1854     0215                     	;# 
  1855     0215                     	;# 
  1856     0216                     	;# 
  1857     0216                     	;# 
  1858     0217                     	;# 
  1859     0217                     	;# 
  1860     0391                     	;# 
  1861     0392                     	;# 
  1862     0393                     	;# 
  1863     0394                     	;# 
  1864     0395                     	;# 
  1865     0396                     	;# 
  1866     039A                     	;# 
  1867     039B                     	;# 
  1868     0611                     	;# 
  1869     0612                     	;# 
  1870     0613                     	;# 
  1871     0613                     	;# 
  1872     0614                     	;# 
  1873     0615                     	;# 
  1874     0616                     	;# 
  1875     0616                     	;# 
  1876     0691                     	;# 
  1877     0692                     	;# 
  1878     0693                     	;# 
  1879     0694                     	;# 
  1880     0695                     	;# 
  1881     0E8E                     	;# 
  1882     0E8F                     	;# 
  1883     0E90                     	;# 
  1884     0E91                     	;# 
  1885     0E92                     	;# 
  1886     0E93                     	;# 
  1887     0E94                     	;# 
  1888     0E94                     	;# 
  1889     0E95                     	;# 
  1890     0E96                     	;# 
  1891     0E97                     	;# 
  1892     0E98                     	;# 
  1893     0E99                     	;# 
  1894     0E9A                     	;# 
  1895     0E9B                     	;# 
  1896     0E9C                     	;# 
  1897     0E9D                     	;# 
  1898     0E9E                     	;# 
  1899     0E9F                     	;# 
  1900     0FE4                     	;# 
  1901     0FE5                     	;# 
  1902     0FE6                     	;# 
  1903     0FE7                     	;# 
  1904     0FE8                     	;# 
  1905     0FE9                     	;# 
  1906     0FEA                     	;# 
  1907     0FEB                     	;# 
  1908     0FED                     	;# 
  1909     0FEE                     	;# 
  1910     0FEF                     	;# 
  1911     0000                     	;# 
  1912     0001                     	;# 
  1913     0002                     	;# 
  1914     0003                     	;# 
  1915     0004                     	;# 
  1916     0005                     	;# 
  1917     0006                     	;# 
  1918     0007                     	;# 
  1919     0008                     	;# 
  1920     0009                     	;# 
  1921     000A                     	;# 
  1922     000B                     	;# 
  1923     000C                     	;# 
  1924     000D                     	;# 
  1925     000E                     	;# 
  1926     0011                     	;# 
  1927     0012                     	;# 
  1928     0015                     	;# 
  1929     0016                     	;# 
  1930     0016                     	;# 
  1931     0017                     	;# 
  1932     0018                     	;# 
  1933     0019                     	;# 
  1934     001A                     	;# 
  1935     001B                     	;# 
  1936     001C                     	;# 
  1937     008C                     	;# 
  1938     008D                     	;# 
  1939     008E                     	;# 
  1940     0091                     	;# 
  1941     0092                     	;# 
  1942     0095                     	;# 
  1943     0096                     	;# 
  1944     0097                     	;# 
  1945     0098                     	;# 
  1946     0099                     	;# 
  1947     009A                     	;# 
  1948     009B                     	;# 
  1949     009B                     	;# 
  1950     009C                     	;# 
  1951     009D                     	;# 
  1952     009E                     	;# 
  1953     009F                     	;# 
  1954     010C                     	;# 
  1955     010D                     	;# 
  1956     010E                     	;# 
  1957     0111                     	;# 
  1958     0112                     	;# 
  1959     0113                     	;# 
  1960     0114                     	;# 
  1961     0115                     	;# 
  1962     0116                     	;# 
  1963     0117                     	;# 
  1964     0118                     	;# 
  1965     0119                     	;# 
  1966     011D                     	;# 
  1967     018C                     	;# 
  1968     018D                     	;# 
  1969     018E                     	;# 
  1970     0191                     	;# 
  1971     0191                     	;# 
  1972     0192                     	;# 
  1973     0193                     	;# 
  1974     0193                     	;# 
  1975     0194                     	;# 
  1976     0195                     	;# 
  1977     0196                     	;# 
  1978     0197                     	;# 
  1979     0199                     	;# 
  1980     019A                     	;# 
  1981     019B                     	;# 
  1982     019B                     	;# 
  1983     019C                     	;# 
  1984     019D                     	;# 
  1985     019E                     	;# 
  1986     019F                     	;# 
  1987     020C                     	;# 
  1988     020D                     	;# 
  1989     0211                     	;# 
  1990     0211                     	;# 
  1991     0212                     	;# 
  1992     0212                     	;# 
  1993     0213                     	;# 
  1994     0213                     	;# 
  1995     0214                     	;# 
  1996     0214                     	;# 
  1997     0215                     	;# 
  1998     0215                     	;# 
  1999     0215                     	;# 
  2000     0216                     	;# 
  2001     0216                     	;# 
  2002     0217                     	;# 
  2003     0217                     	;# 
  2004     0391                     	;# 
  2005     0392                     	;# 
  2006     0393                     	;# 
  2007     0394                     	;# 
  2008     0395                     	;# 
  2009     0396                     	;# 
  2010     039A                     	;# 
  2011     039B                     	;# 
  2012     0611                     	;# 
  2013     0612                     	;# 
  2014     0613                     	;# 
  2015     0613                     	;# 
  2016     0614                     	;# 
  2017     0615                     	;# 
  2018     0616                     	;# 
  2019     0616                     	;# 
  2020     0691                     	;# 
  2021     0692                     	;# 
  2022     0693                     	;# 
  2023     0694                     	;# 
  2024     0695                     	;# 
  2025     0E8E                     	;# 
  2026     0E8F                     	;# 
  2027     0E90                     	;# 
  2028     0E91                     	;# 
  2029     0E92                     	;# 
  2030     0E93                     	;# 
  2031     0E94                     	;# 
  2032     0E94                     	;# 
  2033     0E95                     	;# 
  2034     0E96                     	;# 
  2035     0E97                     	;# 
  2036     0E98                     	;# 
  2037     0E99                     	;# 
  2038     0E9A                     	;# 
  2039     0E9B                     	;# 
  2040     0E9C                     	;# 
  2041     0E9D                     	;# 
  2042     0E9E                     	;# 
  2043     0E9F                     	;# 
  2044     0FE4                     	;# 
  2045     0FE5                     	;# 
  2046     0FE6                     	;# 
  2047     0FE7                     	;# 
  2048     0FE8                     	;# 
  2049     0FE9                     	;# 
  2050     0FEA                     	;# 
  2051     0FEB                     	;# 
  2052     0FED                     	;# 
  2053     0FEE                     	;# 
  2054     0FEF                     	;_keyboard
  2055                           
  2056                           	psect	stringtext1
  2057     03D6                     __pstringtext1:
  2058     03D6                     _ps2ExtUsbMap:
  2059     03D6  3400               	retlw	0
  2060     03D7  3400               	retlw	0
  2061     03D8  3400               	retlw	0
  2062     03D9  3400               	retlw	0
  2063     03DA  3400               	retlw	0
  2064     03DB  3400               	retlw	0
  2065     03DC  3400               	retlw	0
  2066     03DD  3400               	retlw	0
  2067     03DE  3400               	retlw	0
  2068     03DF  3400               	retlw	0
  2069     03E0  3400               	retlw	0
  2070     03E1  3400               	retlw	0
  2071     03E2  3400               	retlw	0
  2072     03E3  3400               	retlw	0
  2073     03E4  3400               	retlw	0
  2074     03E5  3400               	retlw	0
  2075     03E6  3400               	retlw	0
  2076     03E7  34E6               	retlw	230
  2077     03E8  3400               	retlw	0
  2078     03E9  3400               	retlw	0
  2079     03EA  34E4               	retlw	228
  2080     03EB  3400               	retlw	0
  2081     03EC  3400               	retlw	0
  2082     03ED  3400               	retlw	0
  2083     03EE  3400               	retlw	0
  2084     03EF  3400               	retlw	0
  2085     03F0  3400               	retlw	0
  2086     03F1  3400               	retlw	0
  2087     03F2  3400               	retlw	0
  2088     03F3  3400               	retlw	0
  2089     03F4  3400               	retlw	0
  2090     03F5  34E3               	retlw	227
  2091     03F6  3400               	retlw	0
  2092     03F7  3400               	retlw	0
  2093     03F8  3400               	retlw	0
  2094     03F9  3400               	retlw	0
  2095     03FA  3400               	retlw	0
  2096     03FB  3400               	retlw	0
  2097     03FC  3400               	retlw	0
  2098     03FD  34E7               	retlw	231
  2099     03FE  3400               	retlw	0
  2100     03FF  3400               	retlw	0
  2101     0400  3400               	retlw	0
  2102     0401  3400               	retlw	0
  2103     0402  3400               	retlw	0
  2104     0403  3400               	retlw	0
  2105     0404  3400               	retlw	0
  2106     0405  3465               	retlw	101
  2107     0406  3400               	retlw	0
  2108     0407  3400               	retlw	0
  2109     0408  3400               	retlw	0
  2110     0409  3400               	retlw	0
  2111     040A  3400               	retlw	0
  2112     040B  3400               	retlw	0
  2113     040C  3400               	retlw	0
  2114     040D  3400               	retlw	0
  2115     040E  3400               	retlw	0
  2116     040F  3400               	retlw	0
  2117     0410  3400               	retlw	0
  2118     0411  3400               	retlw	0
  2119     0412  3400               	retlw	0
  2120     0413  3400               	retlw	0
  2121     0414  3400               	retlw	0
  2122     0415  3400               	retlw	0
  2123     0416  3400               	retlw	0
  2124     0417  3400               	retlw	0
  2125     0418  3400               	retlw	0
  2126     0419  3400               	retlw	0
  2127     041A  3400               	retlw	0
  2128     041B  3400               	retlw	0
  2129     041C  3400               	retlw	0
  2130     041D  3400               	retlw	0
  2131     041E  3400               	retlw	0
  2132     041F  3400               	retlw	0
  2133     0420  3454               	retlw	84
  2134     0421  3400               	retlw	0
  2135     0422  3400               	retlw	0
  2136     0423  3400               	retlw	0
  2137     0424  3400               	retlw	0
  2138     0425  3400               	retlw	0
  2139     0426  3400               	retlw	0
  2140     0427  3400               	retlw	0
  2141     0428  3400               	retlw	0
  2142     0429  3400               	retlw	0
  2143     042A  3400               	retlw	0
  2144     042B  3400               	retlw	0
  2145     042C  3400               	retlw	0
  2146     042D  3400               	retlw	0
  2147     042E  3400               	retlw	0
  2148     042F  3400               	retlw	0
  2149     0430  3458               	retlw	88
  2150     0431  3400               	retlw	0
  2151     0432  3400               	retlw	0
  2152     0433  3400               	retlw	0
  2153     0434  3400               	retlw	0
  2154     0435  3400               	retlw	0
  2155     0436  3400               	retlw	0
  2156     0437  3400               	retlw	0
  2157     0438  3400               	retlw	0
  2158     0439  3400               	retlw	0
  2159     043A  3400               	retlw	0
  2160     043B  3400               	retlw	0
  2161     043C  3400               	retlw	0
  2162     043D  3400               	retlw	0
  2163     043E  3400               	retlw	0
  2164     043F  344D               	retlw	77
  2165     0440  3400               	retlw	0
  2166     0441  3450               	retlw	80
  2167     0442  344A               	retlw	74
  2168     0443  3400               	retlw	0
  2169     0444  3400               	retlw	0
  2170     0445  3400               	retlw	0
  2171     0446  3449               	retlw	73
  2172     0447  344C               	retlw	76
  2173     0448  3451               	retlw	81
  2174     0449  3400               	retlw	0
  2175     044A  344F               	retlw	79
  2176     044B  3452               	retlw	82
  2177     044C  3400               	retlw	0
  2178     044D  3400               	retlw	0
  2179     044E  3400               	retlw	0
  2180     044F  3400               	retlw	0
  2181     0450  344E               	retlw	78
  2182     0451  3400               	retlw	0
  2183     0452  3446               	retlw	70
  2184     0453  344B               	retlw	75
  2185     0454  3400               	retlw	0
  2186     0455  3400               	retlw	0
  2187     0456  3400               	retlw	0
  2188     0457  3400               	retlw	0
  2189     0458  3400               	retlw	0
  2190     0459  3400               	retlw	0
  2191     045A  3400               	retlw	0
  2192     045B  3400               	retlw	0
  2193     045C  3400               	retlw	0
  2194     045D  3400               	retlw	0
  2195     045E  3400               	retlw	0
  2196     045F  3400               	retlw	0
  2197     0460  3400               	retlw	0
  2198     0461  3400               	retlw	0
  2199     0462  3400               	retlw	0
  2200     0463  3400               	retlw	0
  2201     0464  3400               	retlw	0
  2202     0465  3400               	retlw	0
  2203     0466  3400               	retlw	0
  2204     0467  3400               	retlw	0
  2205     0468  3400               	retlw	0
  2206     0469  3400               	retlw	0
  2207     046A  3400               	retlw	0
  2208     046B  3400               	retlw	0
  2209     046C  3400               	retlw	0
  2210     046D  3400               	retlw	0
  2211     046E  3400               	retlw	0
  2212     046F  3400               	retlw	0
  2213     0470  3400               	retlw	0
  2214     0471  3400               	retlw	0
  2215     0472  3400               	retlw	0
  2216     0473  3400               	retlw	0
  2217     0474  3400               	retlw	0
  2218     0475  3400               	retlw	0
  2219     0476  3400               	retlw	0
  2220     0477  3400               	retlw	0
  2221     0478  3400               	retlw	0
  2222     0479  3400               	retlw	0
  2223     047A  3400               	retlw	0
  2224     047B  3400               	retlw	0
  2225     047C  3400               	retlw	0
  2226     047D  3400               	retlw	0
  2227     047E  3400               	retlw	0
  2228     047F  3400               	retlw	0
  2229     0480  3400               	retlw	0
  2230     0481  3400               	retlw	0
  2231     0482  3400               	retlw	0
  2232     0483  3400               	retlw	0
  2233     0484  3400               	retlw	0
  2234     0485  3400               	retlw	0
  2235     0486  3400               	retlw	0
  2236     0487  3400               	retlw	0
  2237     0488  3400               	retlw	0
  2238     0489  3400               	retlw	0
  2239     048A  3400               	retlw	0
  2240     048B  3400               	retlw	0
  2241     048C  3400               	retlw	0
  2242     048D  3400               	retlw	0
  2243     048E  3400               	retlw	0
  2244     048F  3400               	retlw	0
  2245     0490  3400               	retlw	0
  2246     0491  3400               	retlw	0
  2247     0492  3400               	retlw	0
  2248     0493  3400               	retlw	0
  2249     0494  3400               	retlw	0
  2250     0495  3400               	retlw	0
  2251     0496  3400               	retlw	0
  2252     0497  3400               	retlw	0
  2253     0498  3400               	retlw	0
  2254     0499  3400               	retlw	0
  2255     049A  3400               	retlw	0
  2256     049B  3400               	retlw	0
  2257     049C  3400               	retlw	0
  2258     049D  3400               	retlw	0
  2259     049E  3400               	retlw	0
  2260     049F  3400               	retlw	0
  2261     04A0  3400               	retlw	0
  2262     04A1  3400               	retlw	0
  2263     04A2  3400               	retlw	0
  2264     04A3  3400               	retlw	0
  2265     04A4  3400               	retlw	0
  2266     04A5  3400               	retlw	0
  2267     04A6  3400               	retlw	0
  2268     04A7  3400               	retlw	0
  2269     04A8  3400               	retlw	0
  2270     04A9  3400               	retlw	0
  2271     04AA  3400               	retlw	0
  2272     04AB  3400               	retlw	0
  2273     04AC  3400               	retlw	0
  2274     04AD  3400               	retlw	0
  2275     04AE  3400               	retlw	0
  2276     04AF  3400               	retlw	0
  2277     04B0  3400               	retlw	0
  2278     04B1  3400               	retlw	0
  2279     04B2  3400               	retlw	0
  2280     04B3  3400               	retlw	0
  2281     04B4  3400               	retlw	0
  2282     04B5  3400               	retlw	0
  2283     04B6  3400               	retlw	0
  2284     04B7  3400               	retlw	0
  2285     04B8  3400               	retlw	0
  2286     04B9  3400               	retlw	0
  2287     04BA  3400               	retlw	0
  2288     04BB  3400               	retlw	0
  2289     04BC  3400               	retlw	0
  2290     04BD  3400               	retlw	0
  2291     04BE  3400               	retlw	0
  2292     04BF  3400               	retlw	0
  2293     04C0  3400               	retlw	0
  2294     04C1  3400               	retlw	0
  2295     04C2  3400               	retlw	0
  2296     04C3  3400               	retlw	0
  2297     04C4  3400               	retlw	0
  2298     04C5  3400               	retlw	0
  2299     04C6  3400               	retlw	0
  2300     04C7  3400               	retlw	0
  2301     04C8  3400               	retlw	0
  2302     04C9  3400               	retlw	0
  2303     04CA  3400               	retlw	0
  2304     04CB  3400               	retlw	0
  2305     04CC  3400               	retlw	0
  2306     04CD  3400               	retlw	0
  2307     04CE  3400               	retlw	0
  2308     04CF  3400               	retlw	0
  2309     04D0  3400               	retlw	0
  2310     04D1  3400               	retlw	0
  2311     04D2  3400               	retlw	0
  2312     04D3  3400               	retlw	0
  2313     04D4  3400               	retlw	0
  2314     04D5                     __end_of_ps2ExtUsbMap:
  2315                           
  2316                           	psect	stringtext2
  2317     1000                     __pstringtext2:
  2318     1000                     _ps2UsbMap:
  2319     1000  3400               	retlw	0
  2320     1001  3442               	retlw	66
  2321     1002  3400               	retlw	0
  2322     1003  343E               	retlw	62
  2323     1004  343C               	retlw	60
  2324     1005  343A               	retlw	58
  2325     1006  343B               	retlw	59
  2326     1007  3445               	retlw	69
  2327     1008  3400               	retlw	0
  2328     1009  3443               	retlw	67
  2329     100A  3441               	retlw	65
  2330     100B  343F               	retlw	63
  2331     100C  343D               	retlw	61
  2332     100D  342B               	retlw	43
  2333     100E  3435               	retlw	53
  2334     100F  3400               	retlw	0
  2335     1010  3400               	retlw	0
  2336     1011  34E2               	retlw	226
  2337     1012  34E1               	retlw	225
  2338     1013  3400               	retlw	0
  2339     1014  34E0               	retlw	224
  2340     1015  3414               	retlw	20
  2341     1016  341E               	retlw	30
  2342     1017  3400               	retlw	0
  2343     1018  3400               	retlw	0
  2344     1019  3400               	retlw	0
  2345     101A  341D               	retlw	29
  2346     101B  3416               	retlw	22
  2347     101C  3404               	retlw	4
  2348     101D  341A               	retlw	26
  2349     101E  341F               	retlw	31
  2350     101F  3400               	retlw	0
  2351     1020  3400               	retlw	0
  2352     1021  3406               	retlw	6
  2353     1022  341B               	retlw	27
  2354     1023  3407               	retlw	7
  2355     1024  3408               	retlw	8
  2356     1025  3421               	retlw	33
  2357     1026  3420               	retlw	32
  2358     1027  3400               	retlw	0
  2359     1028  3400               	retlw	0
  2360     1029  342C               	retlw	44
  2361     102A  3419               	retlw	25
  2362     102B  3409               	retlw	9
  2363     102C  3417               	retlw	23
  2364     102D  3415               	retlw	21
  2365     102E  3422               	retlw	34
  2366     102F  3400               	retlw	0
  2367     1030  3400               	retlw	0
  2368     1031  3411               	retlw	17
  2369     1032  3405               	retlw	5
  2370     1033  340B               	retlw	11
  2371     1034  340A               	retlw	10
  2372     1035  341C               	retlw	28
  2373     1036  3423               	retlw	35
  2374     1037  3400               	retlw	0
  2375     1038  3400               	retlw	0
  2376     1039  3400               	retlw	0
  2377     103A  3410               	retlw	16
  2378     103B  340D               	retlw	13
  2379     103C  3418               	retlw	24
  2380     103D  3424               	retlw	36
  2381     103E  3425               	retlw	37
  2382     103F  3400               	retlw	0
  2383     1040  3400               	retlw	0
  2384     1041  3436               	retlw	54
  2385     1042  340E               	retlw	14
  2386     1043  340C               	retlw	12
  2387     1044  3412               	retlw	18
  2388     1045  3427               	retlw	39
  2389     1046  3426               	retlw	38
  2390     1047  3400               	retlw	0
  2391     1048  3400               	retlw	0
  2392     1049  3437               	retlw	55
  2393     104A  3438               	retlw	56
  2394     104B  340F               	retlw	15
  2395     104C  3433               	retlw	51
  2396     104D  3413               	retlw	19
  2397     104E  342D               	retlw	45
  2398     104F  3400               	retlw	0
  2399     1050  3400               	retlw	0
  2400     1051  3400               	retlw	0
  2401     1052  3434               	retlw	52
  2402     1053  3400               	retlw	0
  2403     1054  342F               	retlw	47
  2404     1055  342E               	retlw	46
  2405     1056  3400               	retlw	0
  2406     1057  3400               	retlw	0
  2407     1058  3439               	retlw	57
  2408     1059  34E5               	retlw	229
  2409     105A  3428               	retlw	40
  2410     105B  3430               	retlw	48
  2411     105C  3400               	retlw	0
  2412     105D  3431               	retlw	49
  2413     105E  3400               	retlw	0
  2414     105F  3400               	retlw	0
  2415     1060  3400               	retlw	0
  2416     1061  3400               	retlw	0
  2417     1062  3400               	retlw	0
  2418     1063  3400               	retlw	0
  2419     1064  3400               	retlw	0
  2420     1065  3400               	retlw	0
  2421     1066  342A               	retlw	42
  2422     1067  3400               	retlw	0
  2423     1068  3400               	retlw	0
  2424     1069  341E               	retlw	30
  2425     106A  3400               	retlw	0
  2426     106B  3421               	retlw	33
  2427     106C  3424               	retlw	36
  2428     106D  3400               	retlw	0
  2429     106E  3400               	retlw	0
  2430     106F  3400               	retlw	0
  2431     1070  3427               	retlw	39
  2432     1071  3437               	retlw	55
  2433     1072  341F               	retlw	31
  2434     1073  3422               	retlw	34
  2435     1074  3423               	retlw	35
  2436     1075  3425               	retlw	37
  2437     1076  3429               	retlw	41
  2438     1077  3453               	retlw	83
  2439     1078  3444               	retlw	68
  2440     1079  342E               	retlw	46
  2441     107A  3420               	retlw	32
  2442     107B  342D               	retlw	45
  2443     107C  3425               	retlw	37
  2444     107D  3426               	retlw	38
  2445     107E  3400               	retlw	0
  2446     107F  3400               	retlw	0
  2447     1080  3400               	retlw	0
  2448     1081  3400               	retlw	0
  2449     1082  3400               	retlw	0
  2450     1083  3440               	retlw	64
  2451     1084                     __end_of_ps2UsbMap:
  2452                           
  2453                           	psect	stringtext3
  2454     18D3                     __pstringtext3:
  2455     18D3                     _USB_SD_Ptr:
  2456     18D3  34D9               	retlw	low (_sd000| (0+32768))
  2457     18D4  3498               	retlw	high (_sd000| (0+32768))
  2458     18D5  343F               	retlw	low (_sd001| (0+32768))
  2459     18D6  3498               	retlw	high (_sd001| (0+32768))
  2460     18D7  349C               	retlw	low (_sd002| (0+32768))
  2461     18D8  3498               	retlw	high (_sd002| (0+32768))
  2462     18D9                     __end_of_USB_SD_Ptr:
  2463                           
  2464                           	psect	stringtext4
  2465     18DD                     __pstringtext4:
  2466     18DD                     _USB_CD_Ptr:
  2467     18DD  3473               	retlw	low (_configDescriptor1| (0+32768))
  2468     18DE  3498               	retlw	high (_configDescriptor1| (0+32768))
  2469     18DF                     __end_of_USB_CD_Ptr:
  2470                           
  2471                           	psect	stringtext5
  2472     1800                     __pstringtext5:
  2473     1800                     _hid_rpt01:
  2474     1800  3405               	retlw	5
  2475     1801  3401               	retlw	1
  2476     1802  3409               	retlw	9
  2477     1803  3406               	retlw	6
  2478     1804  34A1               	retlw	161
  2479     1805  3401               	retlw	1
  2480     1806  3405               	retlw	5
  2481     1807  3407               	retlw	7
  2482     1808  3419               	retlw	25
  2483     1809  34E0               	retlw	224
  2484     180A  3429               	retlw	41
  2485     180B  34E7               	retlw	231
  2486     180C  3415               	retlw	21
  2487     180D  3400               	retlw	0
  2488     180E  3425               	retlw	37
  2489     180F  3401               	retlw	1
  2490     1810  3475               	retlw	117
  2491     1811  3401               	retlw	1
  2492     1812  3495               	retlw	149
  2493     1813  3408               	retlw	8
  2494     1814  3481               	retlw	129
  2495     1815  3402               	retlw	2
  2496     1816  3495               	retlw	149
  2497     1817  3401               	retlw	1
  2498     1818  3475               	retlw	117
  2499     1819  3408               	retlw	8
  2500     181A  3481               	retlw	129
  2501     181B  3403               	retlw	3
  2502     181C  3495               	retlw	149
  2503     181D  3405               	retlw	5
  2504     181E  3475               	retlw	117
  2505     181F  3401               	retlw	1
  2506     1820  3405               	retlw	5
  2507     1821  3408               	retlw	8
  2508     1822  3419               	retlw	25
  2509     1823  3401               	retlw	1
  2510     1824  3429               	retlw	41
  2511     1825  3405               	retlw	5
  2512     1826  3491               	retlw	145
  2513     1827  3402               	retlw	2
  2514     1828  3495               	retlw	149
  2515     1829  3401               	retlw	1
  2516     182A  3475               	retlw	117
  2517     182B  3403               	retlw	3
  2518     182C  3491               	retlw	145
  2519     182D  3403               	retlw	3
  2520     182E  3495               	retlw	149
  2521     182F  3406               	retlw	6
  2522     1830  3475               	retlw	117
  2523     1831  3408               	retlw	8
  2524     1832  3415               	retlw	21
  2525     1833  3400               	retlw	0
  2526     1834  3425               	retlw	37
  2527     1835  3465               	retlw	101
  2528     1836  3405               	retlw	5
  2529     1837  3407               	retlw	7
  2530     1838  3419               	retlw	25
  2531     1839  3400               	retlw	0
  2532     183A  3429               	retlw	41
  2533     183B  3465               	retlw	101
  2534     183C  3481               	retlw	129
  2535     183D  3400               	retlw	0
  2536     183E  34C0               	retlw	192
  2537     183F                     __end_of_hid_rpt01:
  2538                           
  2539                           	psect	stringtext6
  2540     183F                     __pstringtext6:
  2541     183F                     _sd001:
  2542     183F  3434               	retlw	52
  2543     1840  3403               	retlw	3
  2544     1841  344D               	retlw	77
  2545     1842  3400               	retlw	0
  2546     1843  3469               	retlw	105
  2547     1844  3400               	retlw	0
  2548     1845  3463               	retlw	99
  2549     1846  3400               	retlw	0
  2550     1847  3472               	retlw	114
  2551     1848  3400               	retlw	0
  2552     1849  346F               	retlw	111
  2553     184A  3400               	retlw	0
  2554     184B  3463               	retlw	99
  2555     184C  3400               	retlw	0
  2556     184D  3468               	retlw	104
  2557     184E  3400               	retlw	0
  2558     184F  3469               	retlw	105
  2559     1850  3400               	retlw	0
  2560     1851  3470               	retlw	112
  2561     1852  3400               	retlw	0
  2562     1853  3420               	retlw	32
  2563     1854  3400               	retlw	0
  2564     1855  3454               	retlw	84
  2565     1856  3400               	retlw	0
  2566     1857  3465               	retlw	101
  2567     1858  3400               	retlw	0
  2568     1859  3463               	retlw	99
  2569     185A  3400               	retlw	0
  2570     185B  3468               	retlw	104
  2571     185C  3400               	retlw	0
  2572     185D  346E               	retlw	110
  2573     185E  3400               	retlw	0
  2574     185F  346F               	retlw	111
  2575     1860  3400               	retlw	0
  2576     1861  346C               	retlw	108
  2577     1862  3400               	retlw	0
  2578     1863  346F               	retlw	111
  2579     1864  3400               	retlw	0
  2580     1865  3467               	retlw	103
  2581     1866  3400               	retlw	0
  2582     1867  3479               	retlw	121
  2583     1868  3400               	retlw	0
  2584     1869  3420               	retlw	32
  2585     186A  3400               	retlw	0
  2586     186B  3449               	retlw	73
  2587     186C  3400               	retlw	0
  2588     186D  346E               	retlw	110
  2589     186E  3400               	retlw	0
  2590     186F  3463               	retlw	99
  2591     1870  3400               	retlw	0
  2592     1871  342E               	retlw	46
  2593     1872  3400               	retlw	0
  2594     1873                     __end_of_sd001:
  2595                           
  2596                           	psect	stringtext7
  2597     1873                     __pstringtext7:
  2598     1873                     _configDescriptor1:
  2599     1873  3409               	retlw	9
  2600     1874  3402               	retlw	2
  2601     1875  3429               	retlw	41
  2602     1876  3400               	retlw	0
  2603     1877  3401               	retlw	1
  2604     1878  3401               	retlw	1
  2605     1879  3400               	retlw	0
  2606     187A  34C0               	retlw	192
  2607     187B  3432               	retlw	50
  2608     187C  3409               	retlw	9
  2609     187D  3404               	retlw	4
  2610     187E  3400               	retlw	0
  2611     187F  3400               	retlw	0
  2612     1880  3402               	retlw	2
  2613     1881  3403               	retlw	3
  2614     1882  3401               	retlw	1
  2615     1883  3401               	retlw	1
  2616     1884  3400               	retlw	0
  2617     1885  3409               	retlw	9
  2618     1886  3421               	retlw	33
  2619     1887  3411               	retlw	17
  2620     1888  3401               	retlw	1
  2621     1889  3400               	retlw	0
  2622     188A  3401               	retlw	1
  2623     188B  3422               	retlw	34
  2624     188C  343F               	retlw	63
  2625     188D  3400               	retlw	0
  2626     188E  3407               	retlw	7
  2627     188F  3405               	retlw	5
  2628     1890  3481               	retlw	129
  2629     1891  3403               	retlw	3
  2630     1892  3408               	retlw	8
  2631     1893  3400               	retlw	0
  2632     1894  3401               	retlw	1
  2633     1895  3407               	retlw	7
  2634     1896  3405               	retlw	5
  2635     1897  3401               	retlw	1
  2636     1898  3403               	retlw	3
  2637     1899  3408               	retlw	8
  2638     189A  3400               	retlw	0
  2639     189B  3401               	retlw	1
  2640     189C                     __end_of_configDescriptor1:
  2641                           
  2642                           	psect	stringtext8
  2643     189C                     __pstringtext8:
  2644     189C                     _sd002:
  2645     189C  341C               	retlw	28
  2646     189D  3403               	retlw	3
  2647     189E  344B               	retlw	75
  2648     189F  3400               	retlw	0
  2649     18A0  3465               	retlw	101
  2650     18A1  3400               	retlw	0
  2651     18A2  3479               	retlw	121
  2652     18A3  3400               	retlw	0
  2653     18A4  3462               	retlw	98
  2654     18A5  3400               	retlw	0
  2655     18A6  346F               	retlw	111
  2656     18A7  3400               	retlw	0
  2657     18A8  3461               	retlw	97
  2658     18A9  3400               	retlw	0
  2659     18AA  3472               	retlw	114
  2660     18AB  3400               	retlw	0
  2661     18AC  3464               	retlw	100
  2662     18AD  3400               	retlw	0
  2663     18AE  3420               	retlw	32
  2664     18AF  3400               	retlw	0
  2665     18B0  3444               	retlw	68
  2666     18B1  3400               	retlw	0
  2667     18B2  3465               	retlw	101
  2668     18B3  3400               	retlw	0
  2669     18B4  346D               	retlw	109
  2670     18B5  3400               	retlw	0
  2671     18B6  346F               	retlw	111
  2672     18B7  3400               	retlw	0
  2673     18B8                     __end_of_sd002:
  2674                           
  2675                           	psect	stringtext9
  2676     18B8                     __pstringtext9:
  2677     18B8                     _device_dsc:
  2678     18B8  3412               	retlw	18
  2679     18B9  3401               	retlw	1
  2680     18BA  3400               	retlw	0
  2681     18BB  3402               	retlw	2
  2682     18BC  3400               	retlw	0
  2683     18BD  3400               	retlw	0
  2684     18BE  3400               	retlw	0
  2685     18BF  3408               	retlw	8
  2686     18C0  34D8               	retlw	216
  2687     18C1  3404               	retlw	4
  2688     18C2  3455               	retlw	85
  2689     18C3  3400               	retlw	0
  2690     18C4  3401               	retlw	1
  2691     18C5  3400               	retlw	0
  2692     18C6  3401               	retlw	1
  2693     18C7  3402               	retlw	2
  2694     18C8  3400               	retlw	0
  2695     18C9  3401               	retlw	1
  2696     18CA                     __end_of_device_dsc:
  2697                           
  2698                           	psect	stringtext10
  2699     18D9                     __pstringtext10:
  2700     18D9                     _sd000:
  2701     18D9  3404               	retlw	4
  2702     18DA  3403               	retlw	3
  2703     18DB  3409               	retlw	9
  2704     18DC  3404               	retlw	4
  2705     18DD                     __end_of_sd000:
  2706                           
  2707                           	psect	nvBANK3
  2708     01E5                     __pnvBANK3:
  2709     01E5                     _IOCAF5_InterruptHandler:
  2710     01E5                     	ds	2
  2711     01E7                     _IOCAF4_InterruptHandler:
  2712     01E7                     	ds	2
  2713     000C                     _PORTAbits	set	12
  2714     001C                     _T2CONbits	set	28
  2715     001C                     _T2CON	set	28
  2716     001A                     _TMR2	set	26
  2717     001B                     _PR2	set	27
  2718     0011                     _PIR1bits	set	17
  2719     0012                     _PIR2bits	set	18
  2720     000B                     _INTCONbits	set	11
  2721     0091                     _PIE1bits	set	145
  2722     0092                     _PIE2bits	set	146
  2723     0097                     _WDTCON	set	151
  2724     0098                     _OSCTUNE	set	152
  2725     0099                     _OSCCON	set	153
  2726     0095                     _OPTION_REGbits	set	149
  2727     008E                     _TRISC	set	142
  2728     008D                     _TRISB	set	141
  2729     008C                     _TRISA	set	140
  2730     04D6                     _PLLRDY	set	1238
  2731     0116                     _BORCON	set	278
  2732     011D                     _APFCON	set	285
  2733     010E                     _LATC	set	270
  2734     010D                     _LATB	set	269
  2735     010C                     _LATA	set	268
  2736     0199                     _RCREG	set	409
  2737     019D                     _RCSTAbits	set	413
  2738     019A                     _TXREG	set	410
  2739     019C                     _SPBRGH	set	412
  2740     019B                     _SPBRGL	set	411
  2741     019E                     _TXSTA	set	414
  2742     019D                     _RCSTA	set	413
  2743     019F                     _BAUDCON	set	415
  2744     018C                     _ANSELA	set	396
  2745     018D                     _ANSELB	set	397
  2746     018E                     _ANSELC	set	398
  2747     020C                     _WPUA	set	524
  2748     020D                     _WPUB	set	525
  2749     039B                     _ACTCON	set	923
  2750     0391                     _IOCAPbits	set	913
  2751     0392                     _IOCANbits	set	914
  2752     0393                     _IOCAFbits	set	915
  2753     0E98                     _UEP0bits	set	3736
  2754     0E8E                     _UCON	set	3726
  2755     0E8F                     _USTAT	set	3727
  2756     0E92                     _UIEbits	set	3730
  2757     0E90                     _UIRbits	set	3728
  2758     0E96                     _UADDR	set	3734
  2759     0E8E                     _UCONbits	set	3726
  2760     0E92                     _UIE	set	3730
  2761     0E97                     _UEIE	set	3735
  2762     0E91                     _UCFG	set	3729
  2763     0E90                     _UIR	set	3728
  2764     0E93                     _UEIR	set	3731
  2765     0E99                     _UEP1	set	3737
  2766     0E98                     _UEP0	set	3736
  2767                           
  2768                           	psect	stringtext11
  2769     18CA                     __pstringtext11:
  2770     18CA                     STR_1:
  2771     18CA  3425               	retlw	37	;'%'
  2772     18CB  3463               	retlw	99	;'c'
  2773     18CC  3425               	retlw	37	;'%'
  2774     18CD  3430               	retlw	48	;'0'
  2775     18CE  3432               	retlw	50	;'2'
  2776     18CF  3458               	retlw	88	;'X'
  2777     18D0  340D               	retlw	13
  2778     18D1  340A               	retlw	10
  2779     18D2  3400               	retlw	0
  2780                           
  2781                           	psect	stringtext12
  2782     0000                     __pstringtext12:
  2783                           
  2784                           	psect	cinit
  2785     003F                     start_initialization:	
  2786                           ; #config settings
  2787                           
  2788     003F                     __initialization:	;BIGRAM
  2789                           
  2790                           ; Clear objects allocated to BIGRAM
  2791     003F  302D               	movlw	low (0+9005)
  2792     0040  0084               	movwf	4
  2793     0041  3023               	movlw	high (0+9005)
  2794     0042  0085               	movwf	5
  2795     0043  30C3               	movlw	195
  2796     0044  00FE               	movwf	btemp
  2797     0045  3000               	movlw	0
  2798     0046  00FF               	movwf	btemp+1
  2799     0047  319C  2483  3180   	fcall	clear_ram0
  2800                           
  2801                           ; Clear objects allocated to BANK0
  2802     004A  3061               	movlw	low __pbssBANK0
  2803     004B  0084               	movwf	4
  2804     004C  3000               	movlw	high __pbssBANK0
  2805     004D  0085               	movwf	5
  2806     004E  300F               	movlw	15
  2807     004F  00FE               	movwf	btemp
  2808     0050  3000               	movlw	0
  2809     0051  00FF               	movwf	btemp+1
  2810     0052  319C  2483  3180   	fcall	clear_ram0
  2811                           
  2812                           ; Clear objects allocated to BANK1
  2813     0055  0021               	movlb	1	; select bank1
  2814     0056  01EB               	clrf	__pbssBANK1& (0+127)
  2815     0057  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  2816     0058  01ED               	clrf	(__pbssBANK1+2)& (0+127)
  2817     0059  01EE               	clrf	(__pbssBANK1+3)& (0+127)
  2818     005A  01EF               	clrf	(__pbssBANK1+4)& (0+127)
  2819                           
  2820                           ; Clear objects allocated to BANK2
  2821     005B  3021               	movlw	low __pbssBANK2
  2822     005C  0084               	movwf	4
  2823     005D  3001               	movlw	high __pbssBANK2
  2824     005E  0085               	movwf	5
  2825     005F  302B               	movlw	43
  2826     0060  00FE               	movwf	btemp
  2827     0061  3000               	movlw	0
  2828     0062  00FF               	movwf	btemp+1
  2829     0063  319C  2483  3180   	fcall	clear_ram0
  2830                           
  2831                           ; Clear objects allocated to BANK3
  2832     0066  30A0               	movlw	low __pbssBANK3
  2833     0067  0084               	movwf	4
  2834     0068  3001               	movlw	high __pbssBANK3
  2835     0069  0085               	movwf	5
  2836     006A  3045               	movlw	69
  2837     006B  00FE               	movwf	btemp
  2838     006C  3000               	movlw	0
  2839     006D  00FF               	movwf	btemp+1
  2840     006E  319C  2483  3180   	fcall	clear_ram0
  2841                           
  2842                           ; Clear objects allocated to BANK4
  2843     0071  3020               	movlw	low __pbssBANK4
  2844     0072  0084               	movwf	4
  2845     0073  3002               	movlw	high __pbssBANK4
  2846     0074  0085               	movwf	5
  2847     0075  3032               	movlw	50
  2848     0076  00FE               	movwf	btemp
  2849     0077  3000               	movlw	0
  2850     0078  00FF               	movwf	btemp+1
  2851     0079  319C  2483         	fcall	clear_ram0
  2852     007B                     end_of_initialization:	
  2853                           ;End of C runtime variable initialization code
  2854                           
  2855     007B                     __end_of__initialization:
  2856     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2857     007C  0020               	movlb	0
  2858     007D  318B  2BA7         	ljmp	_main	;jump to C main() function
  2859                           
  2860                           	psect	bssBANK0
  2861     0061                     __pbssBANK0:
  2862     0061                     _pBDTEntryIn:
  2863     0061                     	ds	4
  2864     0065                     _SOFCounter:
  2865     0065                     	ds	2
  2866     0067                     _pBDTEntryEP0OutNext:
  2867     0067                     	ds	2
  2868     0069                     _controlTransferState:
  2869     0069                     	ds	1
  2870     006A                     _pBDTEntryEP0OutCurrent:
  2871     006A                     	ds	1
  2872     006B                     _USBDeviceState:
  2873     006B                     	ds	1
  2874     006C                     _eusartRxHead:
  2875     006C                     	ds	1
  2876     006D                     _eusartTxBufferRemaining:
  2877     006D                     	ds	1
  2878     006E                     _USTATcopy:
  2879     006E                     	ds	1
  2880     006F                     _USBActiveConfiguration:
  2881     006F                     	ds	1
  2882                           
  2883                           	psect	bssBANK1
  2884     00EB                     __pbssBANK1:
  2885     00EB                     _inPipes:
  2886     00EB                     	ds	5
  2887                           
  2888                           	psect	bssBANK2
  2889     0121                     __pbssBANK2:
  2890     0121                     _outPipes:
  2891     0121                     	ds	7
  2892     0128                     _pBDTEntryOut:
  2893     0128                     	ds	4
  2894     012C                     _width:
  2895     012C                     	ds	2
  2896     012E                     _LocalSOFCount:
  2897     012E                     	ds	2
  2898     0130                     _ep_data_out:
  2899     0130                     	ds	2
  2900     0132                     _ep_data_in:
  2901     0132                     	ds	2
  2902     0134                     _flags:
  2903     0134                     	ds	1
  2904     0135                     _keyboardIsExtend:
  2905     0135                     	ds	1
  2906     0136                     _keyboardData:
  2907     0136                     	ds	1
  2908     0137                     _keyboardScanCodeValid:
  2909     0137                     	ds	1
  2910     0138                     _keyboardOnesCount:
  2911     0138                     	ds	1
  2912     0139                     _keyboardIndexData:
  2913     0139                     	ds	1
  2914     013A                     _keyboardState:
  2915     013A                     	ds	1
  2916     013B                     _USBTicksSinceSuspendEnd:
  2917     013B                     	ds	1
  2918     013C                     _USBDeferOUTDataStagePackets:
  2919     013C                     	ds	1
  2920     013D                     _USBDeferINDataStagePackets:
  2921     013D                     	ds	1
  2922     013E                     _USBStatusStageEnabledFlag2:
  2923     013E                     	ds	1
  2924     013F                     _USBStatusStageEnabledFlag1:
  2925     013F                     	ds	1
  2926     0140                     _USBDeferStatusStagePacket:
  2927     0140                     	ds	1
  2928     0141                     _USBStatusStageTimeoutCounter:
  2929     0141                     	ds	1
  2930     0142                     _BothEP0OutUOWNsSet:
  2931     0142                     	ds	1
  2932     0143                     _endpoint_number:
  2933     0143                     	ds	1
  2934     0144                     _USBBusIsSuspended:
  2935     0144                     	ds	1
  2936     0145                     _RemoteWakeup:
  2937     0145                     	ds	1
  2938     0146                     _pDst:
  2939     0146                     	ds	1
  2940     0147                     _shortPacketStatus:
  2941     0147                     	ds	1
  2942     0148                     _eusartTxTail:
  2943     0148                     	ds	1
  2944     0149                     _eusartTxHead:
  2945     0149                     	ds	1
  2946     014A                     _idle_rate:
  2947     014A                     	ds	1
  2948     014B                     _USBAlternateInterface:
  2949     014B                     	ds	1
  2950                           
  2951                           	psect	bssBANK3
  2952     01A0                     __pbssBANK3:
  2953     01A0                     _eusartRxStatusBuffer:
  2954     01A0                     	ds	8
  2955     01A8                     _eusartRxBuffer:
  2956     01A8                     	ds	8
  2957     01B0                     _eusartTxBuffer:
  2958     01B0                     	ds	8
  2959     01B8                     _timeMs:
  2960     01B8                     	ds	4
  2961     01BC                     _prevTimeMs:
  2962     01BC                     	ds	4
  2963     01C0                     _USB1msTickCount:
  2964     01C0                     	ds	4
  2965     01C4                     main@F3438:
  2966     01C4                     	ds	3
  2967     01C7                     _nout:
  2968     01C7                     	ds	2
  2969     01C9                     _prec:
  2970     01C9                     	ds	2
  2971     01CB                     _errno:
  2972     01CB                     	ds	2
  2973     01CD                     _OldSOFCount:
  2974     01CD                     	ds	2
  2975     01CF                     _keyboardIdleRate:
  2976     01CF                     	ds	2
  2977     01D1                     _EUSART_ErrorHandler:
  2978     01D1                     	ds	2
  2979     01D3                     _EUSART_OverrunErrorHandler:
  2980     01D3                     	ds	2
  2981     01D5                     _EUSART_FramingErrorHandler:
  2982     01D5                     	ds	2
  2983     01D7                     _TMR2_InterruptHandler:
  2984     01D7                     	ds	2
  2985     01D9                     _EUSART_RxDefaultInterruptHandler:
  2986     01D9                     	ds	2
  2987     01DB                     _EUSART_TxDefaultInterruptHandler:
  2988     01DB                     	ds	2
  2989     01DD                     _keyboardIsBreak:
  2990     01DD                     	ds	1
  2991     01DE                     _eusartRxLastError:
  2992     01DE                     	ds	1
  2993     01DF                     _eusartRxCount:
  2994     01DF                     	ds	1
  2995     01E0                     _eusartRxTail:
  2996     01E0                     	ds	1
  2997     01E1                     _keyboardScanCode:
  2998     01E1                     	ds	3
  2999     01E4                     _active_protocol:
  3000     01E4                     	ds	1
  3001                           
  3002                           	psect	bssBANK4
  3003     0220                     __pbssBANK4:
  3004     0220                     main@F3442:
  3005     0220                     	ds	10
  3006     022A                     _oldInputReport:
  3007     022A                     	ds	8
  3008     0232                     _dbuf:
  3009     0232                     	ds	32
  3010                           
  3011                           	psect	clrtext
  3012     1C83                     clear_ram0:	
  3013                           ;	Called with FSR0 containing the base address, and
  3014                           ;	btemp/btemp+1 has the size to clear
  3015                           
  3016     1C83  0064               	clrwdt	;clear the watchdog before getting into this loop
  3017     1C84                     clrloop0:
  3018     1C84  0180               	clrf	0	;clear RAM location pointed to by FSR
  3019     1C85  3101               	addfsr 0,1
  3020     1C86  3001               	movlw	1
  3021     1C87  02FE               	subwf	126,f
  3022     1C88  3000               	movlw	0
  3023     1C89  3BFF               	subwfb	127,f
  3024     1C8A  087F               	movf	127,w
  3025     1C8B  047E               	iorwf	126,w
  3026     1C8C  1903               	btfsc	3,2
  3027     1C8D  3400               	retlw	0	;all done for this memory range, return
  3028     1C8E  2C84               	goto	clrloop0	;have we reached the end yet?
  3029                           
  3030                           	psect	cstackBANK2
  3031     014C                     __pcstackBANK2:
  3032     014C                     _snprintf$3536:
  3033                           
  3034                           ; 2 bytes @ 0x0
  3035     014C                     	ds	2
  3036     014E                     snprintf@s:
  3037                           
  3038                           ; 1 bytes @ 0x2
  3039     014E                     	ds	1
  3040     014F                     snprintf@ap:
  3041                           
  3042                           ; 1 bytes @ 0x3
  3043     014F                     	ds	1
  3044     0150                     snprintf@cnt:
  3045                           
  3046                           ; 2 bytes @ 0x4
  3047     0150                     	ds	2
  3048     0152                     snprintf@f:
  3049                           
  3050                           ; 11 bytes @ 0x6
  3051     0152                     	ds	11
  3052     015D                     main@scanCodeStr:
  3053                           
  3054                           ; 10 bytes @ 0x11
  3055     015D                     	ds	10
  3056     0167                     _main$2651:
  3057                           
  3058                           ; 2 bytes @ 0x1B
  3059     0167                     	ds	2
  3060     0169                     main@scanCodeValid:
  3061                           
  3062                           ; 1 bytes @ 0x1D
  3063     0169                     	ds	1
  3064     016A                     main@strLen:
  3065                           
  3066                           ; 1 bytes @ 0x1E
  3067     016A                     	ds	1
  3068     016B                     main@i:
  3069                           
  3070                           ; 1 bytes @ 0x1F
  3071     016B                     	ds	1
  3072     016C                     main@hndlScanCode:
  3073                           
  3074                           ; 1 bytes @ 0x20
  3075     016C                     	ds	1
  3076     016D                     main@scanCode:
  3077                           
  3078                           ; 3 bytes @ 0x21
  3079     016D                     	ds	3
  3080                           
  3081                           	psect	cstackBANK1
  3082     00A8                     __pcstackBANK1:
  3083     00A8                     ?_IOCAF4_SetInterruptHandler:
  3084     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087     00A8                     ??_OSCILLATOR_Initialize:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090     00A8                     ??_WDT_Initialize:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093     00A8                     ??_USBDeviceInit:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096     00A8                     ??_USBDeviceAttach:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099     00A8                     ?_TMR2_SetInterruptHandler:	
  3100                           ; 1 bytes @ 0x0
  3101                           
  3102     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3103                           ; 1 bytes @ 0x0
  3104                           
  3105     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3106                           ; 1 bytes @ 0x0
  3107                           
  3108     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3109                           ; 1 bytes @ 0x0
  3110                           
  3111     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3112                           ; 1 bytes @ 0x0
  3113                           
  3114     00A8                     ?_EUSART_SetErrorHandler:	
  3115                           ; 1 bytes @ 0x0
  3116                           
  3117     00A8                     ?_GenericQueue_Init:	
  3118                           ; 1 bytes @ 0x0
  3119                           
  3120     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3121                           ; 1 bytes @ 0x0
  3122                           
  3123     00A8                     ??_APP_KeyboardProcessOutputReport:	
  3124                           ; 1 bytes @ 0x0
  3125                           
  3126     00A8                     ??_putch:	
  3127                           ; 1 bytes @ 0x0
  3128                           
  3129     00A8                     ??_TMR2_StartTimer:	
  3130                           ; 1 bytes @ 0x0
  3131                           
  3132     00A8                     ??_EUSART_is_tx_ready:	
  3133                           ; 1 bytes @ 0x0
  3134                           
  3135     00A8                     ??_EUSART_Write:	
  3136                           ; 1 bytes @ 0x0
  3137                           
  3138     00A8                     ?___bmul:	
  3139                           ; 1 bytes @ 0x0
  3140                           
  3141     00A8                     ?_memset:	
  3142                           ; 1 bytes @ 0x0
  3143                           
  3144     00A8                     ?_USBTransferOnePacket:	
  3145                           ; 2 bytes @ 0x0
  3146                           
  3147     00A8                     ?_GenericQueue_IsEmpty:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150     00A8                     ?_fputc:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153     00A8                     ?_strlen:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156     00A8                     ?_GenericQueue_IsFull:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159     00A8                     ?___awmod:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162     00A8                     USBTransferOnePacket@dir:	
  3163                           ; 2 bytes @ 0x0
  3164                           
  3165     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168     00A8                     ___bmul@multiplicand:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3175                           ; 2 bytes @ 0x0
  3176                           
  3177     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3178                           ; 2 bytes @ 0x0
  3179                           
  3180     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3181                           ; 2 bytes @ 0x0
  3182                           
  3183     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3184                           ; 2 bytes @ 0x0
  3185                           
  3186     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3187                           ; 2 bytes @ 0x0
  3188                           
  3189     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3190                           ; 2 bytes @ 0x0
  3191                           
  3192     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195     00A8                     GenericQueue_Init@q:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198     00A8                     GenericQueue_IsEmpty@q:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201     00A8                     GenericQueue_IsFull@q:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204     00A8                     ___awmod@divisor:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207     00A8                     memset@dest:	
  3208                           ; 2 bytes @ 0x0
  3209                           
  3210     00A8                     fputc@c:	
  3211                           ; 2 bytes @ 0x0
  3212                           
  3213                           
  3214                           ; 2 bytes @ 0x0
  3215     00A8                     	ds	1
  3216     00A9                     ??___bmul:
  3217     00A9                     EUSART_Write@txData:	
  3218                           ; 1 bytes @ 0x1
  3219                           
  3220     00A9                     USBTransferOnePacket@data:	
  3221                           ; 1 bytes @ 0x1
  3222                           
  3223                           
  3224                           ; 2 bytes @ 0x1
  3225     00A9                     	ds	1
  3226     00AA                     ??_IOCAF4_SetInterruptHandler:
  3227     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230     00AA                     ??_TMR2_Initialize:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233     00AA                     ??_EUSART_Initialize:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236     00AA                     ??_TMR2_SetInterruptHandler:	
  3237                           ; 1 bytes @ 0x2
  3238                           
  3239     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3240                           ; 1 bytes @ 0x2
  3241                           
  3242     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3243                           ; 1 bytes @ 0x2
  3244                           
  3245     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3246                           ; 1 bytes @ 0x2
  3247                           
  3248     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3249                           ; 1 bytes @ 0x2
  3250                           
  3251     00AA                     ??_EUSART_SetErrorHandler:	
  3252                           ; 1 bytes @ 0x2
  3253                           
  3254     00AA                     ??_SysTime_Init:	
  3255                           ; 1 bytes @ 0x2
  3256                           
  3257     00AA                     ??_GenericQueue_IsEmpty:	
  3258                           ; 1 bytes @ 0x2
  3259                           
  3260     00AA                     ??_strlen:	
  3261                           ; 1 bytes @ 0x2
  3262                           
  3263     00AA                     ??_PIN_MANAGER_Initialize:	
  3264                           ; 1 bytes @ 0x2
  3265                           
  3266     00AA                     ??_GenericQueue_IsFull:	
  3267                           ; 1 bytes @ 0x2
  3268                           
  3269     00AA                     ___bmul@product:	
  3270                           ; 1 bytes @ 0x2
  3271                           
  3272     00AA                     fputc@fp:	
  3273                           ; 1 bytes @ 0x2
  3274                           
  3275     00AA                     GenericQueue_Init@element_size:	
  3276                           ; 1 bytes @ 0x2
  3277                           
  3278     00AA                     ___awmod@dividend:	
  3279                           ; 2 bytes @ 0x2
  3280                           
  3281     00AA                     memset@c:	
  3282                           ; 2 bytes @ 0x2
  3283                           
  3284                           
  3285                           ; 2 bytes @ 0x2
  3286     00AA                     	ds	1
  3287     00AB                     ??_fputc:
  3288     00AB                     USBTransferOnePacket@len:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291     00AB                     ___bmul@multiplier:	
  3292                           ; 1 bytes @ 0x3
  3293                           
  3294     00AB                     strlen@a:	
  3295                           ; 1 bytes @ 0x3
  3296                           
  3297                           
  3298                           ; 1 bytes @ 0x3
  3299     00AB                     	ds	1
  3300     00AC                     ??_USBTransferOnePacket:
  3301     00AC                     ??_PS2Keyboard_Init:	
  3302                           ; 1 bytes @ 0x4
  3303                           
  3304     00AC                     ??_GenericQueue_Init:	
  3305                           ; 1 bytes @ 0x4
  3306                           
  3307     00AC                     ??___awmod:	
  3308                           ; 1 bytes @ 0x4
  3309                           
  3310     00AC                     strlen@s:	
  3311                           ; 1 bytes @ 0x4
  3312                           
  3313     00AC                     USBDeviceInit@p:	
  3314                           ; 1 bytes @ 0x4
  3315                           
  3316     00AC                     memset@n:	
  3317                           ; 2 bytes @ 0x4
  3318                           
  3319                           
  3320                           ; 2 bytes @ 0x4
  3321     00AC                     	ds	1
  3322     00AD                     ___awmod@counter:
  3323                           
  3324                           ; 1 bytes @ 0x5
  3325     00AD                     	ds	1
  3326     00AE                     ??_memset:
  3327     00AE                     USBDeviceInit@i_1369:	
  3328                           ; 1 bytes @ 0x6
  3329                           
  3330     00AE                     ___awmod@sign:	
  3331                           ; 1 bytes @ 0x6
  3332                           
  3333     00AE                     memset@p:	
  3334                           ; 1 bytes @ 0x6
  3335                           
  3336                           
  3337                           ; 2 bytes @ 0x6
  3338     00AE                     	ds	1
  3339     00AF                     ?___wmul:
  3340     00AF                     USBDeviceInit@i:	
  3341                           ; 2 bytes @ 0x7
  3342                           
  3343     00AF                     ___wmul@multiplier:	
  3344                           ; 1 bytes @ 0x7
  3345                           
  3346                           
  3347                           ; 2 bytes @ 0x7
  3348     00AF                     	ds	1
  3349     00B0                     ??_SYSTEM_Initialize:
  3350     00B0                     ?_fputs:	
  3351                           ; 1 bytes @ 0x8
  3352                           
  3353     00B0                     ?_ctoa:	
  3354                           ; 2 bytes @ 0x8
  3355                           
  3356     00B0                     USBTransferOnePacket@ep:	
  3357                           ; 2 bytes @ 0x8
  3358                           
  3359     00B0                     ctoa@c:	
  3360                           ; 1 bytes @ 0x8
  3361                           
  3362     00B0                     fputs@fp:	
  3363                           ; 1 bytes @ 0x8
  3364                           
  3365                           
  3366                           ; 1 bytes @ 0x8
  3367     00B0                     	ds	1
  3368     00B1                     ??_fputs:
  3369     00B1                     USBTransferOnePacket@handle:	
  3370                           ; 1 bytes @ 0x9
  3371                           
  3372     00B1                     ___wmul@multiplicand:	
  3373                           ; 2 bytes @ 0x9
  3374                           
  3375                           
  3376                           ; 2 bytes @ 0x9
  3377     00B1                     	ds	1
  3378     00B2                     ??_ctoa:
  3379                           
  3380                           ; 1 bytes @ 0xA
  3381     00B2                     	ds	1
  3382     00B3                     ??___wmul:
  3383     00B3                     fputs@c:	
  3384                           ; 1 bytes @ 0xB
  3385                           
  3386     00B3                     ___wmul@product:	
  3387                           ; 1 bytes @ 0xB
  3388                           
  3389                           
  3390                           ; 2 bytes @ 0xB
  3391     00B3                     	ds	1
  3392     00B4                     ctoa@l:
  3393     00B4                     fputs@i:	
  3394                           ; 2 bytes @ 0xC
  3395                           
  3396                           
  3397                           ; 2 bytes @ 0xC
  3398     00B4                     	ds	1
  3399     00B5                     ?_memcpy:
  3400     00B5                     ?_memcmp:	
  3401                           ; 2 bytes @ 0xD
  3402                           
  3403     00B5                     ?_read_prec_or_width:	
  3404                           ; 2 bytes @ 0xD
  3405                           
  3406     00B5                     read_prec_or_width@ap:	
  3407                           ; 2 bytes @ 0xD
  3408                           
  3409     00B5                     memcmp@vl:	
  3410                           ; 1 bytes @ 0xD
  3411                           
  3412     00B5                     memcpy@d1:	
  3413                           ; 2 bytes @ 0xD
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0xD
  3417     00B5                     	ds	1
  3418     00B6                     fputs@s:
  3419     00B6                     ctoa@w:	
  3420                           ; 1 bytes @ 0xE
  3421                           
  3422                           
  3423                           ; 2 bytes @ 0xE
  3424     00B6                     	ds	1
  3425     00B7                     ??_read_prec_or_width:
  3426     00B7                     ?_pad:	
  3427                           ; 1 bytes @ 0xF
  3428                           
  3429     00B7                     memcmp@vr:	
  3430                           ; 2 bytes @ 0xF
  3431                           
  3432     00B7                     pad@buf:	
  3433                           ; 1 bytes @ 0xF
  3434                           
  3435     00B7                     memcpy@s1:	
  3436                           ; 1 bytes @ 0xF
  3437                           
  3438                           
  3439                           ; 2 bytes @ 0xF
  3440     00B7                     	ds	1
  3441     00B8                     ctoa@fp:
  3442     00B8                     memcmp@n:	
  3443                           ; 1 bytes @ 0x10
  3444                           
  3445     00B8                     pad@p:	
  3446                           ; 2 bytes @ 0x10
  3447                           
  3448                           
  3449                           ; 2 bytes @ 0x10
  3450     00B8                     	ds	1
  3451     00B9                     memcpy@n:
  3452                           
  3453                           ; 2 bytes @ 0x11
  3454     00B9                     	ds	1
  3455     00BA                     ??_memcmp:
  3456     00BA                     ??_pad:	
  3457                           ; 1 bytes @ 0x12
  3458                           
  3459     00BA                     read_prec_or_width@c:	
  3460                           ; 1 bytes @ 0x12
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x12
  3464     00BA                     	ds	1
  3465     00BB                     ??_memcpy:
  3466     00BB                     memcmp@l:	
  3467                           ; 1 bytes @ 0x13
  3468                           
  3469     00BB                     memcpy@d:	
  3470                           ; 2 bytes @ 0x13
  3471                           
  3472     00BB                     pad@i:	
  3473                           ; 2 bytes @ 0x13
  3474                           
  3475     00BB                     read_prec_or_width@n:	
  3476                           ; 2 bytes @ 0x13
  3477                           
  3478                           
  3479                           ; 2 bytes @ 0x13
  3480     00BB                     	ds	2
  3481     00BD                     memcmp@r:
  3482     00BD                     pad@fp:	
  3483                           ; 1 bytes @ 0x15
  3484                           
  3485     00BD                     read_prec_or_width@fmt:	
  3486                           ; 1 bytes @ 0x15
  3487                           
  3488     00BD                     memcpy@s:	
  3489                           ; 1 bytes @ 0x15
  3490                           
  3491                           
  3492                           ; 2 bytes @ 0x15
  3493     00BD                     	ds	1
  3494     00BE                     ?_GenericQueue_Contains:
  3495     00BE                     ?_xtoa:	
  3496                           ; 1 bytes @ 0x16
  3497                           
  3498     00BE                     GenericQueue_Contains@q:	
  3499                           ; 2 bytes @ 0x16
  3500                           
  3501     00BE                     xtoa@d:	
  3502                           ; 2 bytes @ 0x16
  3503                           
  3504                           
  3505                           ; 2 bytes @ 0x16
  3506     00BE                     	ds	1
  3507     00BF                     memcpy@tmp:
  3508                           
  3509                           ; 1 bytes @ 0x17
  3510     00BF                     	ds	1
  3511     00C0                     ?_GenericQueue_Remove:
  3512     00C0                     ?_GenericQueue_Enqueue:	
  3513                           ; 1 bytes @ 0x18
  3514                           
  3515     00C0                     ?_GenericQueue_CopyToArray:	
  3516                           ; 1 bytes @ 0x18
  3517                           
  3518     00C0                     ?_GenericQueue_Dequeue:	
  3519                           ; 1 bytes @ 0x18
  3520                           
  3521     00C0                     ??_xtoa:	
  3522                           ; 1 bytes @ 0x18
  3523                           
  3524     00C0                     GenericQueue_Contains@item:	
  3525                           ; 1 bytes @ 0x18
  3526                           
  3527     00C0                     GenericQueue_Enqueue@q:	
  3528                           ; 1 bytes @ 0x18
  3529                           
  3530     00C0                     GenericQueue_Dequeue@q:	
  3531                           ; 2 bytes @ 0x18
  3532                           
  3533     00C0                     GenericQueue_Remove@q:	
  3534                           ; 2 bytes @ 0x18
  3535                           
  3536     00C0                     GenericQueue_CopyToArray@q:	
  3537                           ; 2 bytes @ 0x18
  3538                           
  3539                           
  3540                           ; 2 bytes @ 0x18
  3541     00C0                     	ds	1
  3542     00C1                     ??_GenericQueue_Contains:
  3543     00C1                     xtoa@fp:	
  3544                           ; 1 bytes @ 0x19
  3545                           
  3546                           
  3547                           ; 1 bytes @ 0x19
  3548     00C1                     	ds	1
  3549     00C2                     GenericQueue_Dequeue@item:
  3550     00C2                     GenericQueue_Remove@item:	
  3551                           ; 1 bytes @ 0x1A
  3552                           
  3553     00C2                     GenericQueue_CopyToArray@array:	
  3554                           ; 1 bytes @ 0x1A
  3555                           
  3556     00C2                     xtoa@p:	
  3557                           ; 1 bytes @ 0x1A
  3558                           
  3559     00C2                     GenericQueue_Enqueue@item:	
  3560                           ; 1 bytes @ 0x1A
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x1A
  3564     00C2                     	ds	1
  3565     00C3                     ??_GenericQueue_Remove:
  3566     00C3                     ??_GenericQueue_CopyToArray:	
  3567                           ; 1 bytes @ 0x1B
  3568                           
  3569     00C3                     ??_GenericQueue_Dequeue:	
  3570                           ; 1 bytes @ 0x1B
  3571                           
  3572     00C3                     xtoa@w:	
  3573                           ; 1 bytes @ 0x1B
  3574                           
  3575                           
  3576                           ; 2 bytes @ 0x1B
  3577     00C3                     	ds	1
  3578     00C4                     ??_GenericQueue_Enqueue:
  3579                           
  3580                           ; 1 bytes @ 0x1C
  3581     00C4                     	ds	1
  3582     00C5                     GenericQueue_Contains@i:
  3583     00C5                     xtoa@c:	
  3584                           ; 1 bytes @ 0x1D
  3585                           
  3586                           
  3587                           ; 1 bytes @ 0x1D
  3588     00C5                     	ds	1
  3589     00C6                     xtoa@i:
  3590                           
  3591                           ; 2 bytes @ 0x1E
  3592     00C6                     	ds	1
  3593     00C7                     ??_PS2Keyboard_GetScanCode:
  3594     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3595                           ; 1 bytes @ 0x1F
  3596                           
  3597     00C7                     GenericQueue_Remove@i:	
  3598                           ; 1 bytes @ 0x1F
  3599                           
  3600     00C7                     GenericQueue_CopyToArray@index:	
  3601                           ; 1 bytes @ 0x1F
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x1F
  3605     00C7                     	ds	1
  3606     00C8                     ?_vfpfcnvrt:
  3607     00C8                     PS2Keyboard_GetScanCode@ret:	
  3608                           ; 2 bytes @ 0x20
  3609                           
  3610     00C8                     GenericQueue_Remove@j:	
  3611                           ; 1 bytes @ 0x20
  3612                           
  3613     00C8                     GenericQueue_CopyToArray@count:	
  3614                           ; 1 bytes @ 0x20
  3615                           
  3616     00C8                     vfpfcnvrt@fmt:	
  3617                           ; 1 bytes @ 0x20
  3618                           
  3619                           
  3620                           ; 1 bytes @ 0x20
  3621     00C8                     	ds	1
  3622     00C9                     ??_APP_KeyboardTasks:
  3623     00C9                     vfpfcnvrt@ap:	
  3624                           ; 1 bytes @ 0x21
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x21
  3628     00C9                     	ds	1
  3629     00CA                     ??_vfpfcnvrt:
  3630                           
  3631                           ; 1 bytes @ 0x22
  3632     00CA                     	ds	1
  3633     00CB                     APP_KeyboardTasks@usbHidCode:
  3634                           
  3635                           ; 1 bytes @ 0x23
  3636     00CB                     	ds	1
  3637     00CC                     APP_KeyboardTasks@usbHidCode_2877:
  3638                           
  3639                           ; 1 bytes @ 0x24
  3640     00CC                     	ds	1
  3641     00CD                     APP_KeyboardTasks@needToSendNewReportPacket:
  3642                           
  3643                           ; 1 bytes @ 0x25
  3644     00CD                     	ds	1
  3645     00CE                     APP_KeyboardTasks@usbHidCode_2876:
  3646     00CE                     vfpfcnvrt@convarg:	
  3647                           ; 1 bytes @ 0x26
  3648                           
  3649                           
  3650                           ; 4 bytes @ 0x26
  3651     00CE                     	ds	1
  3652     00CF                     APP_KeyboardTasks@usbHidCode_2878:
  3653                           
  3654                           ; 1 bytes @ 0x27
  3655     00CF                     	ds	1
  3656     00D0                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3657                           
  3658                           ; 2 bytes @ 0x28
  3659     00D0                     	ds	2
  3660     00D2                     APP_KeyboardTasks@i:
  3661     00D2                     vfpfcnvrt@c:	
  3662                           ; 1 bytes @ 0x2A
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0x2A
  3666     00D2                     	ds	1
  3667     00D3                     APP_KeyboardTasks@scanCode:
  3668     00D3                     vfpfcnvrt@done:	
  3669                           ; 1 bytes @ 0x2B
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x2B
  3673     00D3                     	ds	1
  3674     00D4                     vfpfcnvrt@cp:
  3675                           
  3676                           ; 2 bytes @ 0x2C
  3677     00D4                     	ds	2
  3678     00D6                     vfpfcnvrt@fp:
  3679                           
  3680                           ; 1 bytes @ 0x2E
  3681     00D6                     	ds	1
  3682     00D7                     ?_vfprintf:
  3683     00D7                     vfprintf@fmt:	
  3684                           ; 2 bytes @ 0x2F
  3685                           
  3686                           
  3687                           ; 2 bytes @ 0x2F
  3688     00D7                     	ds	2
  3689     00D9                     vfprintf@ap:
  3690                           
  3691                           ; 1 bytes @ 0x31
  3692     00D9                     	ds	1
  3693     00DA                     ??_vfprintf:
  3694                           
  3695                           ; 1 bytes @ 0x32
  3696     00DA                     	ds	1
  3697     00DB                     vfprintf@fp:
  3698                           
  3699                           ; 1 bytes @ 0x33
  3700     00DB                     	ds	1
  3701     00DC                     vfprintf@cfmt:
  3702                           
  3703                           ; 2 bytes @ 0x34
  3704     00DC                     	ds	2
  3705     00DE                     ?_snprintf:
  3706     00DE                     snprintf@n:	
  3707                           ; 2 bytes @ 0x36
  3708                           
  3709                           
  3710                           ; 2 bytes @ 0x36
  3711     00DE                     	ds	2
  3712     00E0                     snprintf@fmt:
  3713                           
  3714                           ; 2 bytes @ 0x38
  3715     00E0                     	ds	6
  3716     00E6                     ??_snprintf:
  3717                           
  3718                           ; 1 bytes @ 0x3E
  3719     00E6                     	ds	3
  3720     00E9                     ??_main:
  3721                           
  3722                           ; 1 bytes @ 0x41
  3723     00E9                     	ds	2
  3724                           
  3725                           	psect	cstackCOMMON
  3726     0070                     __pcstackCOMMON:
  3727     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3728     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3729                           ; 1 bytes @ 0x0
  3730                           
  3731     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3732                           ; 1 bytes @ 0x0
  3733                           
  3734     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3735                           ; 1 bytes @ 0x0
  3736                           
  3737     0070                     ?_IOCAF4_ISR:	
  3738                           ; 1 bytes @ 0x0
  3739                           
  3740     0070                     ?_IOCAF5_ISR:	
  3741                           ; 1 bytes @ 0x0
  3742                           
  3743     0070                     ??_IOCAF5_ISR:	
  3744                           ; 1 bytes @ 0x0
  3745                           
  3746     0070                     ?_OSCILLATOR_Initialize:	
  3747                           ; 1 bytes @ 0x0
  3748                           
  3749     0070                     ?_WDT_Initialize:	
  3750                           ; 1 bytes @ 0x0
  3751                           
  3752     0070                     ?_TMR2_Initialize:	
  3753                           ; 1 bytes @ 0x0
  3754                           
  3755     0070                     ?_EUSART_Initialize:	
  3756                           ; 1 bytes @ 0x0
  3757                           
  3758     0070                     ?_USBDeviceInit:	
  3759                           ; 1 bytes @ 0x0
  3760                           
  3761     0070                     ?_USBDeviceAttach:	
  3762                           ; 1 bytes @ 0x0
  3763                           
  3764     0070                     ?_USBDeviceTasks:	
  3765                           ; 1 bytes @ 0x0
  3766                           
  3767     0070                     ?_TMR2_ISR:	
  3768                           ; 1 bytes @ 0x0
  3769                           
  3770     0070                     ??_TMR2_ISR:	
  3771                           ; 1 bytes @ 0x0
  3772                           
  3773     0070                     ?_TMR2_DefaultInterruptHandler:	
  3774                           ; 1 bytes @ 0x0
  3775                           
  3776     0070                     ??_TMR2_DefaultInterruptHandler:	
  3777                           ; 1 bytes @ 0x0
  3778                           
  3779     0070                     ?_EUSART_Receive_ISR:	
  3780                           ; 1 bytes @ 0x0
  3781                           
  3782     0070                     ?_EUSART_Transmit_ISR:	
  3783                           ; 1 bytes @ 0x0
  3784                           
  3785     0070                     ??_EUSART_Transmit_ISR:	
  3786                           ; 1 bytes @ 0x0
  3787                           
  3788     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3789                           ; 1 bytes @ 0x0
  3790                           
  3791     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3792                           ; 1 bytes @ 0x0
  3793                           
  3794     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3795                           ; 1 bytes @ 0x0
  3796                           
  3797     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3798                           ; 1 bytes @ 0x0
  3799                           
  3800     0070                     ?_EUSART_DefaultErrorHandler:	
  3801                           ; 1 bytes @ 0x0
  3802                           
  3803     0070                     ?_EUSART_RxDataHandler:	
  3804                           ; 1 bytes @ 0x0
  3805                           
  3806     0070                     ??_EUSART_RxDataHandler:	
  3807                           ; 1 bytes @ 0x0
  3808                           
  3809     0070                     ?_USBWakeFromSuspend:	
  3810                           ; 1 bytes @ 0x0
  3811                           
  3812     0070                     ?_USBSuspend:	
  3813                           ; 1 bytes @ 0x0
  3814                           
  3815     0070                     ?_USBIncrement1msInternalTimers:	
  3816                           ; 1 bytes @ 0x0
  3817                           
  3818     0070                     ??_USBIncrement1msInternalTimers:	
  3819                           ; 1 bytes @ 0x0
  3820                           
  3821     0070                     ?_USBCtrlEPAllowStatusStage:	
  3822                           ; 1 bytes @ 0x0
  3823                           
  3824     0070                     ??_USBCtrlEPAllowStatusStage:	
  3825                           ; 1 bytes @ 0x0
  3826                           
  3827     0070                     ?_USBStallHandler:	
  3828                           ; 1 bytes @ 0x0
  3829                           
  3830     0070                     ??_USBStallHandler:	
  3831                           ; 1 bytes @ 0x0
  3832                           
  3833     0070                     ?_USBCtrlEPService:	
  3834                           ; 1 bytes @ 0x0
  3835                           
  3836     0070                     ?_USBConfigureEndpoint:	
  3837                           ; 1 bytes @ 0x0
  3838                           
  3839     0070                     ?_USBCtrlTrfTxService:	
  3840                           ; 1 bytes @ 0x0
  3841                           
  3842     0070                     ??_USBCtrlTrfTxService:	
  3843                           ; 1 bytes @ 0x0
  3844                           
  3845     0070                     ?_USBCtrlTrfSetupHandler:	
  3846                           ; 1 bytes @ 0x0
  3847                           
  3848     0070                     ?_USBCtrlTrfOutHandler:	
  3849                           ; 1 bytes @ 0x0
  3850                           
  3851     0070                     ?_USBCtrlTrfInHandler:	
  3852                           ; 1 bytes @ 0x0
  3853                           
  3854     0070                     ?_USBCheckStdRequest:	
  3855                           ; 1 bytes @ 0x0
  3856                           
  3857     0070                     ?_USBStdFeatureReqHandler:	
  3858                           ; 1 bytes @ 0x0
  3859                           
  3860     0070                     ?_USBHIDCBSetReportHandler:	
  3861                           ; 1 bytes @ 0x0
  3862                           
  3863     0070                     ??_USBHIDCBSetReportHandler:	
  3864                           ; 1 bytes @ 0x0
  3865                           
  3866     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3867                           ; 1 bytes @ 0x0
  3868                           
  3869     0070                     ?_APP_KeyboardInit:	
  3870                           ; 1 bytes @ 0x0
  3871                           
  3872     0070                     ?_SysTime_Init:	
  3873                           ; 1 bytes @ 0x0
  3874                           
  3875     0070                     ?_PS2Keyboard_Init:	
  3876                           ; 1 bytes @ 0x0
  3877                           
  3878     0070                     ?_PS2Keyboard_GetScanCode:	
  3879                           ; 1 bytes @ 0x0
  3880                           
  3881     0070                     ?_APP_KeyboardTasks:	
  3882                           ; 1 bytes @ 0x0
  3883                           
  3884     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3885                           ; 1 bytes @ 0x0
  3886                           
  3887     0070                     ?_APP_KeyboardProcessOutputReport:	
  3888                           ; 1 bytes @ 0x0
  3889                           
  3890     0070                     ?_PS2KeyboardClockInterrupt:	
  3891                           ; 1 bytes @ 0x0
  3892                           
  3893     0070                     ?_PS2KeyboardDataInterrupt:	
  3894                           ; 1 bytes @ 0x0
  3895                           
  3896     0070                     ??_PS2KeyboardDataInterrupt:	
  3897                           ; 1 bytes @ 0x0
  3898                           
  3899     0070                     ?_SysTimeInterrupt:	
  3900                           ; 1 bytes @ 0x0
  3901                           
  3902     0070                     ??_SysTimeInterrupt:	
  3903                           ; 1 bytes @ 0x0
  3904                           
  3905     0070                     ?_putch:	
  3906                           ; 1 bytes @ 0x0
  3907                           
  3908     0070                     ?_PIN_MANAGER_Initialize:	
  3909                           ; 1 bytes @ 0x0
  3910                           
  3911     0070                     ?_PIN_MANAGER_IOC:	
  3912                           ; 1 bytes @ 0x0
  3913                           
  3914     0070                     ?_SYSTEM_Initialize:	
  3915                           ; 1 bytes @ 0x0
  3916                           
  3917     0070                     ?_INTERRUPT_InterruptManager:	
  3918                           ; 1 bytes @ 0x0
  3919                           
  3920     0070                     ?_TMR2_StartTimer:	
  3921                           ; 1 bytes @ 0x0
  3922                           
  3923     0070                     ?_EUSART_is_tx_ready:	
  3924                           ; 1 bytes @ 0x0
  3925                           
  3926     0070                     ?_EUSART_Write:	
  3927                           ; 1 bytes @ 0x0
  3928                           
  3929     0070                     ?_USBCtrlEPAllowDataStage:	
  3930                           ; 1 bytes @ 0x0
  3931                           
  3932     0070                     ?_USBCtrlEPServiceComplete:	
  3933                           ; 1 bytes @ 0x0
  3934                           
  3935     0070                     ?_USBCtrlTrfRxService:	
  3936                           ; 1 bytes @ 0x0
  3937                           
  3938     0070                     ?_USBStdSetCfgHandler:	
  3939                           ; 1 bytes @ 0x0
  3940                           
  3941     0070                     ?_USBStdGetDscHandler:	
  3942                           ; 1 bytes @ 0x0
  3943                           
  3944     0070                     ??_USBStdGetDscHandler:	
  3945                           ; 1 bytes @ 0x0
  3946                           
  3947     0070                     ?_USBStdGetStatusHandler:	
  3948                           ; 1 bytes @ 0x0
  3949                           
  3950     0070                     ??_USBStdGetStatusHandler:	
  3951                           ; 1 bytes @ 0x0
  3952                           
  3953     0070                     ?_USBCheckHIDRequest:	
  3954                           ; 1 bytes @ 0x0
  3955                           
  3956     0070                     ?_USBHIDCBSetReportComplete:	
  3957                           ; 1 bytes @ 0x0
  3958                           
  3959     0070                     ??_USBHIDCBSetReportComplete:	
  3960                           ; 1 bytes @ 0x0
  3961                           
  3962     0070                     ?i1_USBDeviceInit:	
  3963                           ; 1 bytes @ 0x0
  3964                           
  3965     0070                     ??i1_USBDeviceInit:	
  3966                           ; 1 bytes @ 0x0
  3967                           
  3968     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3969                           ; 1 bytes @ 0x0
  3970                           
  3971     0070                     ??i1_APP_KeyboardProcessOutputReport:	
  3972                           ; 1 bytes @ 0x0
  3973                           
  3974     0070                     ?i1_GenericQueue_Init:	
  3975                           ; 1 bytes @ 0x0
  3976                           
  3977     0070                     ?_main:	
  3978                           ; 1 bytes @ 0x0
  3979                           
  3980     0070                     ?i1_USBTransferOnePacket:	
  3981                           ; 2 bytes @ 0x0
  3982                           
  3983     0070                     ?i1_GenericQueue_IsFull:	
  3984                           ; 2 bytes @ 0x0
  3985                           
  3986     0070                     ?i1___wmul:	
  3987                           ; 2 bytes @ 0x0
  3988                           
  3989     0070                     ?i1___awmod:	
  3990                           ; 2 bytes @ 0x0
  3991                           
  3992     0070                     ?i1_memset:	
  3993                           ; 2 bytes @ 0x0
  3994                           
  3995     0070                     ?_SysTime_GetCurrentTimeMs:	
  3996                           ; 2 bytes @ 0x0
  3997                           
  3998     0070                     USBConfigureEndpoint@direction:	
  3999                           ; 4 bytes @ 0x0
  4000                           
  4001     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  4002                           ; 1 bytes @ 0x0
  4003                           
  4004     0070                     putch@c:	
  4005                           ; 1 bytes @ 0x0
  4006                           
  4007     0070                     i1USBTransferOnePacket@dir:	
  4008                           ; 1 bytes @ 0x0
  4009                           
  4010     0070                     USBStdGetStatusHandler@p:	
  4011                           ; 1 bytes @ 0x0
  4012                           
  4013     0070                     i1GenericQueue_Init@q:	
  4014                           ; 2 bytes @ 0x0
  4015                           
  4016     0070                     i1GenericQueue_IsFull@q:	
  4017                           ; 2 bytes @ 0x0
  4018                           
  4019     0070                     i1___wmul@multiplier:	
  4020                           ; 2 bytes @ 0x0
  4021                           
  4022     0070                     i1___awmod@divisor:	
  4023                           ; 2 bytes @ 0x0
  4024                           
  4025     0070                     i1memset@dest:	
  4026                           ; 2 bytes @ 0x0
  4027                           
  4028                           
  4029                           ; 2 bytes @ 0x0
  4030     0070                     	ds	1
  4031     0071                     ??_EUSART_Receive_ISR:
  4032     0071                     ??_EUSART_DefaultErrorHandler:	
  4033                           ; 1 bytes @ 0x1
  4034                           
  4035     0071                     ??_USBConfigureEndpoint:	
  4036                           ; 1 bytes @ 0x1
  4037                           
  4038     0071                     ??_USBHIDCBSetIdleRateHandler:	
  4039                           ; 1 bytes @ 0x1
  4040                           
  4041     0071                     i1USBTransferOnePacket@data:	
  4042                           ; 1 bytes @ 0x1
  4043                           
  4044                           
  4045                           ; 2 bytes @ 0x1
  4046     0071                     	ds	1
  4047     0072                     ??i1_GenericQueue_IsFull:
  4048     0072                     USBCtrlTrfTxService@byteToSend:	
  4049                           ; 1 bytes @ 0x2
  4050                           
  4051     0072                     i1GenericQueue_Init@element_size:	
  4052                           ; 1 bytes @ 0x2
  4053                           
  4054     0072                     i1___wmul@multiplicand:	
  4055                           ; 2 bytes @ 0x2
  4056                           
  4057     0072                     i1___awmod@dividend:	
  4058                           ; 2 bytes @ 0x2
  4059                           
  4060     0072                     i1memset@c:	
  4061                           ; 2 bytes @ 0x2
  4062                           
  4063                           
  4064                           ; 2 bytes @ 0x2
  4065     0072                     	ds	1
  4066     0073                     ??_USBCtrlTrfInHandler:
  4067     0073                     ??_USBCtrlEPAllowDataStage:	
  4068                           ; 1 bytes @ 0x3
  4069                           
  4070     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  4071                           ; 1 bytes @ 0x3
  4072                           
  4073     0073                     i1USBTransferOnePacket@len:	
  4074                           ; 1 bytes @ 0x3
  4075                           
  4076                           
  4077                           ; 1 bytes @ 0x3
  4078     0073                     	ds	1
  4079     0074                     ??_SysTime_GetCurrentTimeMs:
  4080     0074                     ??_USBCtrlTrfRxService:	
  4081                           ; 1 bytes @ 0x4
  4082                           
  4083     0074                     ??_USBCheckHIDRequest:	
  4084                           ; 1 bytes @ 0x4
  4085                           
  4086     0074                     ??i1_USBTransferOnePacket:	
  4087                           ; 1 bytes @ 0x4
  4088                           
  4089     0074                     ??i1_GenericQueue_Init:	
  4090                           ; 1 bytes @ 0x4
  4091                           
  4092     0074                     ??i1___wmul:	
  4093                           ; 1 bytes @ 0x4
  4094                           
  4095     0074                     ??i1___awmod:	
  4096                           ; 1 bytes @ 0x4
  4097                           
  4098     0074                     i1USBDeviceInit@p:	
  4099                           ; 1 bytes @ 0x4
  4100                           
  4101     0074                     i1___wmul@product:	
  4102                           ; 2 bytes @ 0x4
  4103                           
  4104     0074                     i1memset@n:	
  4105                           ; 2 bytes @ 0x4
  4106                           
  4107                           
  4108                           ; 2 bytes @ 0x4
  4109     0074                     	ds	1
  4110     0075                     USBConfigureEndpoint@EPNum:
  4111     0075                     i1___awmod@counter:	
  4112                           ; 1 bytes @ 0x5
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x5
  4116     0075                     	ds	1
  4117     0076                     ??i1_memset:
  4118     0076                     ?i1_memcpy:	
  4119                           ; 1 bytes @ 0x6
  4120                           
  4121     0076                     USBConfigureEndpoint@handle:	
  4122                           ; 2 bytes @ 0x6
  4123                           
  4124     0076                     i1USBDeviceInit@i_1369:	
  4125                           ; 1 bytes @ 0x6
  4126                           
  4127     0076                     i1___awmod@sign:	
  4128                           ; 1 bytes @ 0x6
  4129                           
  4130     0076                     i1memcpy@d1:	
  4131                           ; 1 bytes @ 0x6
  4132                           
  4133     0076                     i1memset@p:	
  4134                           ; 2 bytes @ 0x6
  4135                           
  4136                           
  4137                           ; 2 bytes @ 0x6
  4138     0076                     	ds	1
  4139     0077                     ?_USBEnableEndpoint:
  4140     0077                     ??_USBCtrlEPServiceComplete:	
  4141                           ; 1 bytes @ 0x7
  4142                           
  4143     0077                     USBEnableEndpoint@options:	
  4144                           ; 1 bytes @ 0x7
  4145                           
  4146     0077                     USBCtrlTrfInHandler@lastDTS:	
  4147                           ; 1 bytes @ 0x7
  4148                           
  4149     0077                     i1USBDeviceInit@i:	
  4150                           ; 1 bytes @ 0x7
  4151                           
  4152                           
  4153                           ; 1 bytes @ 0x7
  4154     0077                     	ds	1
  4155     0078                     ??_USBEnableEndpoint:
  4156     0078                     USBCtrlTrfRxService@i:	
  4157                           ; 1 bytes @ 0x8
  4158                           
  4159     0078                     i1USBTransferOnePacket@ep:	
  4160                           ; 1 bytes @ 0x8
  4161                           
  4162     0078                     i1memcpy@s1:	
  4163                           ; 1 bytes @ 0x8
  4164                           
  4165                           
  4166                           ; 2 bytes @ 0x8
  4167     0078                     	ds	1
  4168     0079                     USBCtrlTrfRxService@byteToRead:
  4169     0079                     i1USBTransferOnePacket@handle:	
  4170                           ; 1 bytes @ 0x9
  4171                           
  4172                           
  4173                           ; 2 bytes @ 0x9
  4174     0079                     	ds	1
  4175     007A                     ??_USBCtrlTrfOutHandler:
  4176     007A                     USBEnableEndpoint@p:	
  4177                           ; 1 bytes @ 0xA
  4178                           
  4179     007A                     i1memcpy@n:	
  4180                           ; 2 bytes @ 0xA
  4181                           
  4182                           
  4183                           ; 2 bytes @ 0xA
  4184     007A                     	ds	2
  4185     007C                     ??_IOCAF4_ISR:
  4186     007C                     ??_PIN_MANAGER_IOC:	
  4187                           ; 1 bytes @ 0xC
  4188                           
  4189     007C                     ??i1_memcpy:	
  4190                           ; 1 bytes @ 0xC
  4191                           
  4192     007C                     USBEnableEndpoint@ep:	
  4193                           ; 1 bytes @ 0xC
  4194                           
  4195                           
  4196                           ; 1 bytes @ 0xC
  4197     007C                     	ds	1
  4198     007D                     ??_USBWakeFromSuspend:
  4199     007D                     ??_USBSuspend:	
  4200                           ; 1 bytes @ 0xD
  4201                           
  4202     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4203                           ; 1 bytes @ 0xD
  4204                           
  4205     007D                     ??_APP_KeyboardInit:	
  4206                           ; 1 bytes @ 0xD
  4207                           
  4208     007D                     ??_USBStdSetCfgHandler:	
  4209                           ; 1 bytes @ 0xD
  4210                           
  4211                           
  4212                           ; 1 bytes @ 0xD
  4213     007D                     	ds	1
  4214     007E                     ??_USBCheckStdRequest:
  4215     007E                     ??_INTERRUPT_InterruptManager:	
  4216                           ; 1 bytes @ 0xE
  4217                           
  4218                           
  4219                           	psect	cstackBANK0
  4220     0050                     __pcstackBANK0:	
  4221                           ; 1 bytes @ 0xE
  4222                           
  4223     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4224     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227     0050                     i1memcpy@d:	
  4228                           ; 2 bytes @ 0x0
  4229                           
  4230                           
  4231                           ; 2 bytes @ 0x0
  4232     0050                     	ds	2
  4233     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4234     0052                     i1memcpy@s:	
  4235                           ; 2 bytes @ 0x2
  4236                           
  4237                           
  4238                           ; 2 bytes @ 0x2
  4239     0052                     	ds	2
  4240     0054                     i1memcpy@tmp:
  4241     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4242                           ; 1 bytes @ 0x4
  4243                           
  4244                           
  4245                           ; 2 bytes @ 0x4
  4246     0054                     	ds	1
  4247     0055                     ?i1_GenericQueue_Enqueue:
  4248     0055                     i1GenericQueue_Enqueue@q:	
  4249                           ; 1 bytes @ 0x5
  4250                           
  4251                           
  4252                           ; 2 bytes @ 0x5
  4253     0055                     	ds	1
  4254     0056                     ??_USBStdFeatureReqHandler:
  4255     0056                     USBStdSetCfgHandler@p:	
  4256                           ; 1 bytes @ 0x6
  4257                           
  4258                           
  4259                           ; 2 bytes @ 0x6
  4260     0056                     	ds	1
  4261     0057                     i1GenericQueue_Enqueue@item:
  4262                           
  4263                           ; 2 bytes @ 0x7
  4264     0057                     	ds	1
  4265     0058                     USBStdSetCfgHandler@i_2097:
  4266     0058                     USBStdFeatureReqHandler@pUEP:	
  4267                           ; 1 bytes @ 0x8
  4268                           
  4269                           
  4270                           ; 2 bytes @ 0x8
  4271     0058                     	ds	1
  4272     0059                     ??i1_GenericQueue_Enqueue:
  4273     0059                     USBStdSetCfgHandler@i:	
  4274                           ; 1 bytes @ 0x9
  4275                           
  4276                           
  4277                           ; 1 bytes @ 0x9
  4278     0059                     	ds	1
  4279     005A                     USBStdFeatureReqHandler@current_ep_data:
  4280                           
  4281                           ; 1 bytes @ 0xA
  4282     005A                     	ds	1
  4283     005B                     USBStdFeatureReqHandler@p:
  4284                           
  4285                           ; 2 bytes @ 0xB
  4286     005B                     	ds	1
  4287     005C                     ??_PS2KeyboardClockInterrupt:
  4288                           
  4289                           ; 1 bytes @ 0xC
  4290     005C                     	ds	1
  4291     005D                     ??_USBCtrlTrfSetupHandler:
  4292                           
  4293                           ; 1 bytes @ 0xD
  4294     005D                     	ds	1
  4295     005E                     ??_USBCtrlEPService:
  4296                           
  4297                           ; 1 bytes @ 0xE
  4298     005E                     	ds	1
  4299     005F                     ??_USBDeviceTasks:
  4300                           
  4301                           ; 1 bytes @ 0xF
  4302     005F                     	ds	1
  4303     0060                     USBDeviceTasks@i:
  4304                           
  4305                           ; 1 bytes @ 0x10
  4306     0060                     	ds	1
  4307                           
  4308                           	psect	maintext
  4309     0BA7                     __pmaintext:	
  4310 ;;
  4311 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4312 ;;
  4313 ;; *************** function _main *****************
  4314 ;; Defined at:
  4315 ;;		line 12 in file "main.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;  scanCodeStr    10   17[BANK2 ] unsigned char [10]
  4320 ;;  scanCode        3   33[BANK2 ] struct PS2ScanCode
  4321 ;;  hndlScanCode    1   32[BANK2 ] PTR struct PS2ScanCode
  4322 ;;		 -> main@scanCode(3), NULL(0), 
  4323 ;;  i               1   31[BANK2 ] unsigned char 
  4324 ;;  strLen          1   30[BANK2 ] unsigned char 
  4325 ;;  scanCodeVali    1   29[BANK2 ] _Bool 
  4326 ;; Return value:  Size  Location     Type
  4327 ;;                  2  840[None  ] int 
  4328 ;; Registers used:
  4329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : B1F/0
  4332 ;;		On exit  : 2/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;      Locals:         0       0       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4337 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Totals:         0       0       2      19       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;Total ram usage:       21 bytes
  4340 ;; Hardware stack levels required when called: 18
  4341 ;; This function calls:
  4342 ;;		_APP_KeyboardTasks
  4343 ;;		_EUSART_Write
  4344 ;;		_EUSART_is_tx_ready
  4345 ;;		_PS2Keyboard_GetScanCode
  4346 ;;		_PS2Keyboard_Init
  4347 ;;		_SYSTEM_Initialize
  4348 ;;		_SysTime_Init
  4349 ;;		_snprintf
  4350 ;; This function is called by:
  4351 ;;		Startup code after reset
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355     0BA7                     _main:	
  4356                           ;psect for function _main
  4357                           
  4358                           
  4359                           ;main.c: 13:     SYSTEM_Initialize();
  4360                           
  4361                           ;incstack = 0
  4362 ;; hardware stack exceeded
  4363                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4364     0BA7  319D  252D  318B   	fcall	_SYSTEM_Initialize
  4365                           
  4366                           ;main.c: 14:     SysTime_Init();
  4367     0BAA  319C  246C  318B   	fcall	_SysTime_Init
  4368                           
  4369                           ;main.c: 15:     PS2Keyboard_Init();
  4370     0BAD  319E  261E  318B   	fcall	_PS2Keyboard_Init
  4371                           
  4372                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4373     0BB0  178B               	bsf	11,7	;volatile
  4374                           
  4375                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4376     0BB1  170B               	bsf	11,6	;volatile
  4377                           
  4378                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4379     0BB2  0844               	movf	main@F3438^(0+384),w
  4380     0BB3  0022               	movlb	2	; select bank2
  4381     0BB4  00ED               	movwf	main@scanCode^(0+256)
  4382     0BB5  0023               	movlb	3	; select bank3
  4383     0BB6  0845               	movf	(main@F3438+1)^(0+384),w
  4384     0BB7  0022               	movlb	2	; select bank2
  4385     0BB8  00EE               	movwf	(main@scanCode+1)^(0+256)
  4386     0BB9  0023               	movlb	3	; select bank3
  4387     0BBA  0846               	movf	(main@F3438+2)^(0+384),w
  4388     0BBB  0022               	movlb	2	; select bank2
  4389     0BBC  00EF               	movwf	(main@scanCode+2)^(0+256)
  4390                           
  4391                           ;main.c: 34:     char scanCodeStr[10] = "";
  4392     0BBD  305D               	movlw	low main@scanCodeStr
  4393     0BBE  0086               	movwf	6
  4394     0BBF  3001               	movlw	high main@scanCodeStr
  4395     0BC0  0087               	movwf	7
  4396     0BC1  300A               	movlw	10
  4397     0BC2  0021               	movlb	1	; select bank1
  4398     0BC3  00E9               	movwf	??_main^(0+128)
  4399     0BC4  3000               	movlw	0
  4400     0BC5                     u6820:
  4401     0BC5  001E               	movwi fsr1++
  4402     0BC6  0BE9               	decfsz	??_main^(0+128),f
  4403     0BC7  2BC5               	goto	u6820
  4404     0BC8                     l6728:
  4405                           
  4406                           ;main.c: 38:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4407     0BC8  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4408     0BC9  319E  2639  318B   	fcall	_PS2Keyboard_GetScanCode
  4409     0BCC  0022               	movlb	2	; select bank2
  4410     0BCD  00E9               	movwf	main@scanCodeValid^(0+256)
  4411                           
  4412                           ;main.c: 39:         if(scanCodeValid) {
  4413     0BCE  0869               	movf	main@scanCodeValid^(0+256),w
  4414     0BCF  1903               	btfsc	3,2
  4415     0BD0  2BD4               	goto	l6734
  4416                           
  4417                           ;main.c: 40:             hndlScanCode = &scanCode;
  4418     0BD1  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4419     0BD2  00EC               	movwf	main@hndlScanCode^(0+256)
  4420                           
  4421                           ;main.c: 41:         } else {
  4422     0BD3  2BD5               	goto	l6736
  4423     0BD4                     l6734:
  4424                           
  4425                           ;main.c: 42:             hndlScanCode = ((void*)0);
  4426     0BD4  01EC               	clrf	main@hndlScanCode^(0+256)
  4427     0BD5                     l6736:
  4428                           
  4429                           ;main.c: 44:         if(hndlScanCode != ((void*)0)) {
  4430     0BD5  086C               	movf	main@hndlScanCode^(0+256),w
  4431     0BD6  1903               	btfsc	3,2
  4432     0BD7  2C26               	goto	l6756
  4433                           
  4434                           ;main.c: 45:             strLen = snprintf(scanCodeStr, sizeof(scanCodeStr), "%c%02X\r\n
      +                          ", hndlScanCode->isBreak ? 'b' : ' ', hndlScanCode->value);
  4435     0BD8  086C               	movf	main@hndlScanCode^(0+256),w
  4436     0BD9  3E02               	addlw	2
  4437     0BDA  0086               	movwf	6
  4438     0BDB  3001               	movlw	1	; select bank2/3
  4439     0BDC  0087               	movwf	7
  4440     0BDD  0801               	movf	1,w
  4441     0BDE  1D03               	btfss	3,2
  4442     0BDF  2BE2               	goto	l6742
  4443     0BE0  3020               	movlw	32
  4444     0BE1  2BE3               	goto	L1
  4445     0BE2                     l6742:
  4446     0BE2  3062               	movlw	98
  4447     0BE3                     L1:
  4448     0BE3  00E7               	movwf	_main$2651^(0+256)
  4449     0BE4  3000               	movlw	0
  4450     0BE5  00E8               	movwf	(_main$2651^(0+256)+1)
  4451     0BE6  300A               	movlw	10
  4452     0BE7  0021               	movlb	1	; select bank1
  4453     0BE8  00DE               	movwf	snprintf@n^(0+128)
  4454     0BE9  3000               	movlw	0
  4455     0BEA  00DF               	movwf	(snprintf@n^(0+128)+1)
  4456     0BEB  30CA               	movlw	low (STR_1| (0+32768))
  4457     0BEC  00E0               	movwf	snprintf@fmt^(0+128)
  4458     0BED  3098               	movlw	high (STR_1| (0+32768))
  4459     0BEE  00E1               	movwf	(snprintf@fmt^(0+128)+1)
  4460     0BEF  0022               	movlb	2	; select bank2
  4461     0BF0  0868               	movf	(_main$2651+1)^(0+256),w
  4462     0BF1  0021               	movlb	1	; select bank1
  4463     0BF2  00E3               	movwf	((?_snprintf+1)^(0+128)+4)
  4464     0BF3  0022               	movlb	2	; select bank2
  4465     0BF4  0867               	movf	_main$2651^(0+256),w
  4466     0BF5  0021               	movlb	1	; select bank1
  4467     0BF6  00E2               	movwf	(?_snprintf^(0+128)+4)
  4468     0BF7  0022               	movlb	2	; select bank2
  4469     0BF8  086C               	movf	main@hndlScanCode^(0+256),w
  4470     0BF9  0086               	movwf	6
  4471     0BFA  3001               	movlw	1	; select bank2/3
  4472     0BFB  0087               	movwf	7
  4473     0BFC  0801               	movf	1,w
  4474     0BFD  0021               	movlb	1	; select bank1
  4475     0BFE  00E9               	movwf	??_main^(0+128)
  4476     0BFF  01EA               	clrf	(??_main^(0+128)+1)
  4477     0C00  0869               	movf	??_main^(0+128),w
  4478     0C01  00E4               	movwf	(?_snprintf^(0+128)+6)
  4479     0C02  086A               	movf	(??_main+1)^(0+128),w
  4480     0C03  00E5               	movwf	((?_snprintf+1)^(0+128)+6)
  4481     0C04  305D               	movlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4482     0C05  318C  242B  318B   	fcall	_snprintf
  4483     0C08  085E               	movf	?_snprintf^(0+128),w
  4484     0C09  0022               	movlb	2	; select bank2
  4485     0C0A  00EA               	movwf	main@strLen^(0+256)
  4486                           
  4487                           ;main.c: 46:             for(i = 0; i < strLen; i++) {
  4488     0C0B  01EB               	clrf	main@i^(0+256)
  4489     0C0C                     l6754:
  4490     0C0C  086A               	movf	main@strLen^(0+256),w
  4491     0C0D  026B               	subwf	main@i^(0+256),w
  4492     0C0E  1803               	btfsc	3,0
  4493     0C0F  2C26               	goto	l6756
  4494     0C10                     l6748:
  4495     0C10  319C  2406  318B   	fcall	_EUSART_is_tx_ready
  4496     0C13  3A00               	xorlw	0
  4497     0C14  1903               	skipnz
  4498     0C15  2C10               	goto	l6748
  4499                           
  4500                           ;main.c: 48:                 EUSART_Write((uint8_t)scanCodeStr[i]);
  4501     0C16  0022               	movlb	2	; select bank2
  4502     0C17  086B               	movf	main@i^(0+256),w
  4503     0C18  3E5D               	addlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4504     0C19  0086               	movwf	6
  4505     0C1A  3001               	movlw	1	; select bank2/3
  4506     0C1B  0087               	movwf	7
  4507     0C1C  0801               	movf	1,w
  4508     0C1D  319F  2781  318B   	fcall	_EUSART_Write
  4509                           
  4510                           ;main.c: 49:             }
  4511     0C20  3001               	movlw	1
  4512     0C21  00E9               	movwf	??_main^(0+128)
  4513     0C22  0869               	movf	??_main^(0+128),w
  4514     0C23  0022               	movlb	2	; select bank2
  4515     0C24  07EB               	addwf	main@i^(0+256),f
  4516     0C25  2C0C               	goto	l6754
  4517     0C26                     l6756:
  4518                           
  4519                           ;main.c: 51:         APP_KeyboardTasks(hndlScanCode);
  4520     0C26  086C               	movf	main@hndlScanCode^(0+256),w
  4521     0C27  3180  207F  318B   	fcall	_APP_KeyboardTasks
  4522     0C2A  2BC8               	goto	l6728
  4523     0C2B                     __end_of_main:
  4524                           
  4525                           	psect	text1
  4526     0C2B                     __ptext1:	
  4527 ;; *************** function _snprintf *****************
  4528 ;; Defined at:
  4529 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_snprintf.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  s               1    wreg     PTR unsigned char 
  4532 ;;		 -> main@scanCodeStr(10), 
  4533 ;;  n               2   54[BANK1 ] unsigned int 
  4534 ;;  fmt             2   56[BANK1 ] PTR const unsigned char 
  4535 ;;		 -> STR_1(9), 
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;  s               1    2[BANK2 ] PTR unsigned char 
  4538 ;;		 -> main@scanCodeStr(10), 
  4539 ;;  f              11    6[BANK2 ] struct _IO_FILE
  4540 ;;  cnt             2    4[BANK2 ] int 
  4541 ;;  ap              1    3[BANK2 ] PTR void [1]
  4542 ;;		 -> ?_snprintf(2), 
  4543 ;; Return value:  Size  Location     Type
  4544 ;;                  2   54[BANK1 ] int 
  4545 ;; Registers used:
  4546 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4547 ;; Tracked objects:
  4548 ;;		On entry : 1F/1
  4549 ;;		On exit  : 1F/1
  4550 ;;		Unchanged: 0/0
  4551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4552 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0
  4554 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4555 ;;      Totals:         0       0      11      17       0       0       0       0       0       0       0       0       
      +0       0
  4556 ;;Total ram usage:       28 bytes
  4557 ;; Hardware stack levels used: 1
  4558 ;; Hardware stack levels required when called: 17
  4559 ;; This function calls:
  4560 ;;		_vfprintf
  4561 ;; This function is called by:
  4562 ;;		_main
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566     0C2B                     _snprintf:	
  4567                           ;psect for function _snprintf
  4568                           
  4569                           
  4570                           ;incstack = 0
  4571 ;; hardware stack exceeded
  4572                           ; Regs used in _snprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4573                           ;snprintf@s stored from wreg
  4574     0C2B  0022               	movlb	2	; select bank2
  4575     0C2C  00CE               	movwf	snprintf@s^(0+256)
  4576     0C2D  3080               	movlw	128
  4577     0C2E  0021               	movlb	1	; select bank1
  4578     0C2F  025F               	subwf	(snprintf@n+1)^(0+128),w
  4579     0C30  3000               	movlw	0
  4580     0C31  1903               	skipnz
  4581     0C32  025E               	subwf	snprintf@n^(0+128),w
  4582     0C33  1C03               	skipc
  4583     0C34  2C40               	goto	l5902
  4584     0C35  304B               	movlw	75
  4585     0C36  0023               	movlb	3	; select bank3
  4586     0C37  00CB               	movwf	_errno^(0+384)
  4587     0C38  3000               	movlw	0
  4588     0C39  00CC               	movwf	(_errno^(0+384)+1)
  4589     0C3A  30FF               	movlw	255
  4590     0C3B  0021               	movlb	1	; select bank1
  4591     0C3C  00DE               	movwf	?_snprintf^(0+128)
  4592     0C3D  30FF               	movlw	255
  4593     0C3E  00DF               	movwf	(?_snprintf^(0+128)+1)
  4594     0C3F  0008               	return
  4595     0C40                     l5902:
  4596     0C40  30E2               	movlw	(low ((?_snprintf| 0+4)))& (0+255)
  4597     0C41  0022               	movlb	2	; select bank2
  4598     0C42  00CF               	movwf	snprintf@ap^(0+256)
  4599     0C43  084E               	movf	snprintf@s^(0+256),w
  4600     0C44  00D2               	movwf	snprintf@f^(0+256)
  4601     0C45  3000               	movlw	0
  4602     0C46  0021               	movlb	1	; select bank1
  4603     0C47  025F               	subwf	(snprintf@n+1)^(0+128),w
  4604     0C48  3002               	movlw	2
  4605     0C49  1903               	skipnz
  4606     0C4A  025E               	subwf	snprintf@n^(0+128),w
  4607     0C4B  1C03               	skipc
  4608     0C4C  2C59               	goto	l5908
  4609     0C4D  085E               	movf	snprintf@n^(0+128),w
  4610     0C4E  3EFF               	addlw	255
  4611     0C4F  0022               	movlb	2	; select bank2
  4612     0C50  00DB               	movwf	(snprintf@f^(0+256)+9)
  4613     0C51  30FF               	movlw	255
  4614     0C52  0021               	movlb	1	; select bank1
  4615     0C53  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4616     0C54  0022               	movlb	2	; select bank2
  4617     0C55  00DC               	movwf	((snprintf@f+1)^(0+256)+9)
  4618     0C56  01D4               	clrf	(snprintf@f^(0+256)+2)
  4619     0C57  01D5               	clrf	((snprintf@f+1)^(0+256)+2)
  4620     0C58  2C62               	goto	l5910
  4621     0C59                     l5908:
  4622     0C59  3001               	movlw	1
  4623     0C5A  0022               	movlb	2	; select bank2
  4624     0C5B  00DB               	movwf	(snprintf@f^(0+256)+9)
  4625     0C5C  3000               	movlw	0
  4626     0C5D  00DC               	movwf	(snprintf@f^(0+256)+10)
  4627     0C5E  3001               	movlw	1
  4628     0C5F  00D4               	movwf	(snprintf@f^(0+256)+2)
  4629     0C60  3000               	movlw	0
  4630     0C61  00D5               	movwf	(snprintf@f^(0+256)+3)
  4631     0C62                     l5910:
  4632     0C62  0021               	movlb	1	; select bank1
  4633     0C63  0861               	movf	(snprintf@fmt+1)^(0+128),w
  4634     0C64  00D8               	movwf	(vfprintf@fmt+1)^(0+128)
  4635     0C65  0860               	movf	snprintf@fmt^(0+128),w
  4636     0C66  00D7               	movwf	vfprintf@fmt^(0+128)
  4637     0C67  304F               	movlw	(low (snprintf@ap| (0+256)))& (0+255)
  4638     0C68  00D9               	movwf	vfprintf@ap^(0+128)
  4639     0C69  3052               	movlw	(low (snprintf@f| (0+256)))& (0+255)
  4640     0C6A  319F  27A7  318C   	fcall	_vfprintf
  4641     0C6D  0858               	movf	(?_vfprintf+1)^(0+128),w
  4642     0C6E  0022               	movlb	2	; select bank2
  4643     0C6F  00D1               	movwf	(snprintf@cnt+1)^(0+256)
  4644     0C70  0021               	movlb	1	; select bank1
  4645     0C71  0857               	movf	?_vfprintf^(0+128),w
  4646     0C72  0022               	movlb	2	; select bank2
  4647     0C73  00D0               	movwf	snprintf@cnt^(0+256)
  4648     0C74  0021               	movlb	1	; select bank1
  4649     0C75  085E               	movf	snprintf@n^(0+128),w
  4650     0C76  045F               	iorwf	(snprintf@n+1)^(0+128),w
  4651     0C77  1903               	btfsc	3,2
  4652     0C78  2CAB               	goto	l5924
  4653     0C79  0022               	movlb	2	; select bank2
  4654     0C7A  1BD1               	btfsc	(snprintf@cnt+1)^(0+256),7
  4655     0C7B  2CAB               	goto	l5924
  4656     0C7C  0021               	movlb	1	; select bank1
  4657     0C7D  085E               	movf	snprintf@n^(0+128),w
  4658     0C7E  3EFF               	addlw	255
  4659     0C7F  00E6               	movwf	??_snprintf^(0+128)
  4660     0C80  30FF               	movlw	255
  4661     0C81  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4662     0C82  00E7               	movwf	(??_snprintf+1)^(0+128)
  4663     0C83  0022               	movlb	2	; select bank2
  4664     0C84  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4665     0C85  3A80               	xorlw	128
  4666     0C86  0021               	movlb	1	; select bank1
  4667     0C87  00E8               	movwf	(??_snprintf+2)^(0+128)
  4668     0C88  0867               	movf	(??_snprintf+1)^(0+128),w
  4669     0C89  3A80               	xorlw	128
  4670     0C8A  0268               	subwf	(??_snprintf+2)^(0+128),w
  4671     0C8B  1D03               	skipz
  4672     0C8C  2C90               	goto	u5395
  4673     0C8D  0866               	movf	??_snprintf^(0+128),w
  4674     0C8E  0022               	movlb	2	; select bank2
  4675     0C8F  0250               	subwf	snprintf@cnt^(0+256),w
  4676     0C90                     u5395:
  4677     0C90  1C03               	skipc
  4678     0C91  2C9D               	goto	l5920
  4679     0C92  0021               	movlb	1	; select bank1
  4680     0C93  085E               	movf	snprintf@n^(0+128),w
  4681     0C94  3EFF               	addlw	255
  4682     0C95  0022               	movlb	2	; select bank2
  4683     0C96  00CC               	movwf	_snprintf$3536^(0+256)
  4684     0C97  30FF               	movlw	255
  4685     0C98  0021               	movlb	1	; select bank1
  4686     0C99  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4687     0C9A  0022               	movlb	2	; select bank2
  4688     0C9B  00CD               	movwf	(_snprintf$3536+1)^(0+256)
  4689     0C9C  2CA2               	goto	l5922
  4690     0C9D                     l5920:
  4691     0C9D  0022               	movlb	2	; select bank2
  4692     0C9E  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4693     0C9F  00CD               	movwf	(_snprintf$3536+1)^(0+256)
  4694     0CA0  0850               	movf	snprintf@cnt^(0+256),w
  4695     0CA1  00CC               	movwf	_snprintf$3536^(0+256)
  4696     0CA2                     l5922:
  4697     0CA2  084C               	movf	_snprintf$3536^(0+256),w
  4698     0CA3  074E               	addwf	snprintf@s^(0+256),w
  4699     0CA4  0021               	movlb	1	; select bank1
  4700     0CA5  00E6               	movwf	??_snprintf^(0+128)
  4701     0CA6  0866               	movf	??_snprintf^(0+128),w
  4702     0CA7  0086               	movwf	6
  4703     0CA8  3001               	movlw	1	; select bank2/3
  4704     0CA9  0087               	movwf	7
  4705     0CAA  0181               	clrf	1
  4706     0CAB                     l5924:
  4707     0CAB  0022               	movlb	2	; select bank2
  4708     0CAC  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4709     0CAD  0021               	movlb	1	; select bank1
  4710     0CAE  00DF               	movwf	(?_snprintf+1)^(0+128)
  4711     0CAF  0022               	movlb	2	; select bank2
  4712     0CB0  0850               	movf	snprintf@cnt^(0+256),w
  4713     0CB1  0021               	movlb	1	; select bank1
  4714     0CB2  00DE               	movwf	?_snprintf^(0+128)
  4715     0CB3  0008               	return
  4716     0CB4                     __end_of_snprintf:
  4717                           
  4718                           	psect	text2
  4719     1FA7                     __ptext2:	
  4720 ;; *************** function _vfprintf *****************
  4721 ;; Defined at:
  4722 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;  fp              1    wreg     PTR struct _IO_FILE
  4725 ;;		 -> snprintf@f(11), 
  4726 ;;  fmt             2   47[BANK1 ] PTR const unsigned char 
  4727 ;;		 -> STR_1(9), 
  4728 ;;  ap              1   49[BANK1 ] PTR PTR void 
  4729 ;;		 -> snprintf@ap(1), 
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;  fp              1   51[BANK1 ] PTR struct _IO_FILE
  4732 ;;		 -> snprintf@f(11), 
  4733 ;;  cfmt            2   52[BANK1 ] PTR unsigned char 
  4734 ;;		 -> STR_1(9), 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  2   47[BANK1 ] int 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 1F/1
  4741 ;;		On exit  : 1F/1
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4744 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4745 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4746 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;Total ram usage:        7 bytes
  4749 ;; Hardware stack levels used: 1
  4750 ;; Hardware stack levels required when called: 16
  4751 ;; This function calls:
  4752 ;;		_vfpfcnvrt
  4753 ;; This function is called by:
  4754 ;;		_snprintf
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758     1FA7                     _vfprintf:	
  4759                           ;psect for function _vfprintf
  4760                           
  4761                           
  4762                           ;incstack = 0
  4763 ;; hardware stack exceeded
  4764                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4765                           ;vfprintf@fp stored from wreg
  4766     1FA7  00DB               	movwf	vfprintf@fp^(0+128)
  4767                           
  4768                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4769     1FA8  0858               	movf	(vfprintf@fmt+1)^(0+128),w
  4770     1FA9  00DD               	movwf	(vfprintf@cfmt+1)^(0+128)
  4771     1FAA  0857               	movf	vfprintf@fmt^(0+128),w
  4772     1FAB  00DC               	movwf	vfprintf@cfmt^(0+128)
  4773                           
  4774                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  4775     1FAC  0023               	movlb	3	; select bank3
  4776     1FAD  01C7               	clrf	_nout^(0+384)
  4777     1FAE  01C8               	clrf	(_nout+1)^(0+384)
  4778     1FAF                     l5604:	
  4779                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4780                           
  4781                           
  4782                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4783     1FAF  0021               	movlb	1	; select bank1
  4784     1FB0  085C               	movf	vfprintf@cfmt^(0+128),w
  4785     1FB1  0084               	movwf	4
  4786     1FB2  085D               	movf	(vfprintf@cfmt+1)^(0+128),w
  4787     1FB3  0085               	movwf	5
  4788     1FB4  0012               	moviw fsr0++
  4789     1FB5  1903               	btfsc	3,2
  4790     1FB6  2FC7               	goto	l5606
  4791                           
  4792                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  4793     1FB7  30DC               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4794     1FB8  00C8               	movwf	vfpfcnvrt@fmt^(0+128)
  4795     1FB9  0859               	movf	vfprintf@ap^(0+128),w
  4796     1FBA  00C9               	movwf	vfpfcnvrt@ap^(0+128)
  4797     1FBB  085B               	movf	vfprintf@fp^(0+128),w
  4798     1FBC  3184  24D5  319F   	fcall	_vfpfcnvrt
  4799     1FBF  0848               	movf	?_vfpfcnvrt^(0+128),w
  4800     1FC0  0023               	movlb	3	; select bank3
  4801     1FC1  07C7               	addwf	_nout^(0+384),f
  4802     1FC2  0021               	movlb	1	; select bank1
  4803     1FC3  0849               	movf	(?_vfpfcnvrt+1)^(0+128),w
  4804     1FC4  0023               	movlb	3	; select bank3
  4805     1FC5  3DC8               	addwfc	(_nout+1)^(0+384),f
  4806     1FC6  2FAF               	goto	l5604
  4807     1FC7                     l5606:
  4808                           
  4809                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  4810     1FC7  0023               	movlb	3	; select bank3
  4811     1FC8  0848               	movf	(_nout+1)^(0+384),w
  4812     1FC9  0021               	movlb	1	; select bank1
  4813     1FCA  00D8               	movwf	(?_vfprintf+1)^(0+128)
  4814     1FCB  0023               	movlb	3	; select bank3
  4815     1FCC  0847               	movf	_nout^(0+384),w
  4816     1FCD  0021               	movlb	1	; select bank1
  4817     1FCE  00D7               	movwf	?_vfprintf^(0+128)
  4818     1FCF  0008               	return
  4819     1FD0                     __end_of_vfprintf:
  4820                           
  4821                           	psect	text3
  4822     04D5                     __ptext3:	
  4823 ;; *************** function _vfpfcnvrt *****************
  4824 ;; Defined at:
  4825 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4826 ;; Parameters:    Size  Location     Type
  4827 ;;  fp              1    wreg     PTR struct _IO_FILE
  4828 ;;		 -> snprintf@f(11), 
  4829 ;;  fmt             1   32[BANK1 ] PTR PTR unsigned char 
  4830 ;;		 -> vfprintf@cfmt(2), 
  4831 ;;  ap              1   33[BANK1 ] PTR PTR void 
  4832 ;;		 -> snprintf@ap(1), 
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;  fp              1   46[BANK1 ] PTR struct _IO_FILE
  4835 ;;		 -> snprintf@f(11), 
  4836 ;;  convarg         4   38[BANK1 ] struct .
  4837 ;;  cp              2   44[BANK1 ] PTR unsigned char 
  4838 ;;		 -> STR_1(9), 
  4839 ;;  done            1   43[BANK1 ] _Bool 
  4840 ;;  c               1   42[BANK1 ] unsigned char 
  4841 ;; Return value:  Size  Location     Type
  4842 ;;                  2   32[BANK1 ] int 
  4843 ;; Registers used:
  4844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4845 ;; Tracked objects:
  4846 ;;		On entry : 1F/1
  4847 ;;		On exit  : 1F/1
  4848 ;;		Unchanged: 0/0
  4849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4850 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4851 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;Total ram usage:       15 bytes
  4855 ;; Hardware stack levels used: 1
  4856 ;; Hardware stack levels required when called: 15
  4857 ;; This function calls:
  4858 ;;		_ctoa
  4859 ;;		_fputc
  4860 ;;		_read_prec_or_width
  4861 ;;		_xtoa
  4862 ;; This function is called by:
  4863 ;;		_vfprintf
  4864 ;; This function uses a non-reentrant model
  4865 ;;
  4866                           
  4867     04D5                     _vfpfcnvrt:	
  4868                           ;psect for function _vfpfcnvrt
  4869                           
  4870                           
  4871                           ;incstack = 0
  4872 ;; hardware stack exceeded
  4873                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4874                           ;vfpfcnvrt@fp stored from wreg
  4875     04D5  00D6               	movwf	vfpfcnvrt@fp^(0+128)
  4876                           
  4877                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4878     04D6  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4879     04D7  0086               	movwf	6
  4880     04D8  0187               	clrf	7
  4881     04D9  3F40               	moviw [0]fsr1
  4882     04DA  00CA               	movwf	??_vfpfcnvrt^(0+128)
  4883     04DB  3F41               	moviw [1]fsr1
  4884     04DC  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4885     04DD  084A               	movf	??_vfpfcnvrt^(0+128),w
  4886     04DE  0084               	movwf	4
  4887     04DF  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4888     04E0  0085               	movwf	5
  4889     04E1  0012               	moviw fsr0++
  4890     04E2  3A25               	xorlw	37
  4891     04E3  1D03               	btfss	3,2
  4892     04E4  2DAB               	goto	l5196
  4893                           
  4894                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4895     04E5  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4896     04E6  0086               	movwf	6
  4897     04E7  0187               	clrf	7
  4898     04E8  3001               	movlw	1
  4899     04E9  0781               	addwf	1,f
  4900     04EA  3141               	addfsr 1,1
  4901     04EB  1803               	skipnc
  4902     04EC  0A81               	incf	1,f
  4903                           
  4904                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4905     04ED  0022               	movlb	2	; select bank2
  4906     04EE  01AC               	clrf	_width^(0+256)
  4907     04EF  01AD               	clrf	(_width+1)^(0+256)
  4908     04F0  1003               	clrc
  4909     04F1  3000               	movlw	0
  4910     04F2  1803               	btfsc	3,0
  4911     04F3  3001               	movlw	1
  4912     04F4  00B4               	movwf	_flags^(0+256)
  4913                           
  4914                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4915     04F5  30FF               	movlw	255
  4916     04F6  0023               	movlb	3	; select bank3
  4917     04F7  00C9               	movwf	_prec^(0+384)
  4918     04F8  30FF               	movlw	255
  4919     04F9  00CA               	movwf	(_prec^(0+384)+1)
  4920                           
  4921                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4922     04FA  0021               	movlb	1	; select bank1
  4923     04FB  01D3               	clrf	vfpfcnvrt@done^(0+128)
  4924                           
  4925                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4926     04FC  2D0B               	goto	l5154
  4927     04FD                     l1801:	
  4928                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  4929                           
  4930                           
  4931                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4932     04FD  0022               	movlb	2	; select bank2
  4933     04FE  14B4               	bsf	_flags^(0+256),1
  4934                           
  4935                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4936     04FF  0021               	movlb	1	; select bank1
  4937     0500  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4938     0501  0086               	movwf	6
  4939     0502  0187               	clrf	7
  4940     0503  3001               	movlw	1
  4941     0504  0781               	addwf	1,f
  4942     0505  3141               	addfsr 1,1
  4943     0506  1803               	skipnc
  4944     0507  0A81               	incf	1,f
  4945                           
  4946                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  4947     0508  2D0B               	goto	l5154
  4948     0509                     l1803:	
  4949                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  4950                           
  4951                           
  4952                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  4953     0509  01D3               	clrf	vfpfcnvrt@done^(0+128)
  4954     050A  0AD3               	incf	vfpfcnvrt@done^(0+128),f
  4955     050B                     l5154:	
  4956                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  4957                           
  4958                           
  4959                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4960     050B  0853               	movf	vfpfcnvrt@done^(0+128),w
  4961     050C  1D03               	btfss	3,2
  4962     050D  2D1F               	goto	l5156
  4963     050E  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4964     050F  0086               	movwf	6
  4965     0510  0187               	clrf	7
  4966     0511  3F40               	moviw [0]fsr1
  4967     0512  00CA               	movwf	??_vfpfcnvrt^(0+128)
  4968     0513  3F41               	moviw [1]fsr1
  4969     0514  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4970     0515  084A               	movf	??_vfpfcnvrt^(0+128),w
  4971     0516  0084               	movwf	4
  4972     0517  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4973     0518  0085               	movwf	5
  4974     0519  0800               	movf	0,w	;code access
  4975                           
  4976                           ; Switch size 1, requested type "simple"
  4977                           ; Number of cases is 1, Range of values is 48 to 48
  4978                           ; switch strategies available:
  4979                           ; Name         Instructions Cycles
  4980                           ; simple_byte            4     3 (average)
  4981                           ; direct_byte           11     9 (fixed)
  4982                           ; jumptable            263     9 (fixed)
  4983                           ;	Chosen strategy is simple_byte
  4984     051A  3A30               	xorlw	48	; case 48
  4985     051B  1903               	skipnz
  4986     051C  2CFD               	goto	l1801
  4987     051D  2D09               	goto	l1803
  4988     051E  2D0B               	goto	l5154
  4989     051F                     l5156:
  4990                           
  4991                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  4992     051F  0849               	movf	vfpfcnvrt@ap^(0+128),w
  4993     0520  00B5               	movwf	read_prec_or_width@ap^(0+128)
  4994     0521  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4995     0522  3194  240C  3184   	fcall	_read_prec_or_width
  4996     0525  0836               	movf	(?_read_prec_or_width+1)^(0+128),w
  4997     0526  0022               	movlb	2	; select bank2
  4998     0527  00AD               	movwf	(_width+1)^(0+256)
  4999     0528  0021               	movlb	1	; select bank1
  5000     0529  0835               	movf	?_read_prec_or_width^(0+128),w
  5001     052A  0022               	movlb	2	; select bank2
  5002     052B  00AC               	movwf	_width^(0+256)
  5003                           
  5004                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  5005     052C  1FAD               	btfss	(_width+1)^(0+256),7
  5006     052D  2D34               	goto	l5164
  5007                           
  5008                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  5009     052E  1434               	bsf	_flags^(0+256),0
  5010                           
  5011                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  5012     052F  09AC               	comf	_width^(0+256),f
  5013     0530  09AD               	comf	(_width+1)^(0+256),f
  5014     0531  0AAC               	incf	_width^(0+256),f
  5015     0532  1903               	skipnz
  5016     0533  0AAD               	incf	(_width+1)^(0+256),f
  5017     0534                     l5164:
  5018                           
  5019                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1273:         if 
      +                          ((*fmt)[0] == 'c') {
  5020     0534  0021               	movlb	1	; select bank1
  5021     0535  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5022     0536  0086               	movwf	6
  5023     0537  0187               	clrf	7
  5024     0538  3F40               	moviw [0]fsr1
  5025     0539  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5026     053A  3F41               	moviw [1]fsr1
  5027     053B  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5028     053C  084A               	movf	??_vfpfcnvrt^(0+128),w
  5029     053D  0084               	movwf	4
  5030     053E  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5031     053F  0085               	movwf	5
  5032     0540  0012               	moviw fsr0++
  5033     0541  3A63               	xorlw	99
  5034     0542  1D03               	btfss	3,2
  5035     0543  2D61               	goto	l5174
  5036                           
  5037                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1274:            
      +                           ++*fmt;
  5038     0544  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5039     0545  0086               	movwf	6
  5040     0546  0187               	clrf	7
  5041     0547  3001               	movlw	1
  5042     0548  0781               	addwf	1,f
  5043     0549  3141               	addfsr 1,1
  5044     054A  1803               	skipnc
  5045     054B  0A81               	incf	1,f
  5046                           
  5047                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1275:            
      +                           c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5048     054C  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5049     054D  0086               	movwf	6
  5050     054E  3001               	movlw	1	; select bank2/3
  5051     054F  0087               	movwf	7
  5052     0550  0801               	movf	1,w
  5053     0551  0084               	movwf	4
  5054     0552  0185               	clrf	5
  5055     0553  3002               	movlw	2
  5056     0554  0781               	addwf	1,f
  5057     0555  0800               	movf	0,w
  5058     0556  00D2               	movwf	vfpfcnvrt@c^(0+128)
  5059                           
  5060                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1284:            
      +                           return (int) ctoa(fp, c);
  5061     0557  0852               	movf	vfpfcnvrt@c^(0+128),w
  5062     0558  00B0               	movwf	ctoa@c^(0+128)
  5063     0559  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5064     055A  3194  2467         	fcall	_ctoa
  5065     055C  0831               	movf	(?_ctoa+1)^(0+128),w
  5066     055D  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5067     055E  0830               	movf	?_ctoa^(0+128),w
  5068     055F  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5069     0560  0008               	return
  5070     0561                     l5174:
  5071                           
  5072                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1439:   if (0
  5073     0561  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5074     0562  0086               	movwf	6
  5075     0563  0187               	clrf	7
  5076     0564  3F40               	moviw [0]fsr1
  5077     0565  00D4               	movwf	vfpfcnvrt@cp^(0+128)
  5078     0566  3F41               	moviw [1]fsr1
  5079     0567  00D5               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  5080     0568  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5081     0569  0084               	movwf	4
  5082     056A  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5083     056B  0085               	movwf	5
  5084     056C  0012               	moviw fsr0++
  5085     056D  3A58               	xorlw	88
  5086     056E  1D03               	btfss	3,2
  5087     056F  2DA0               	goto	l5190
  5088                           
  5089                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  5090     0570  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5091     0571  0086               	movwf	6
  5092     0572  3001               	movlw	1	; select bank2/3
  5093     0573  0087               	movwf	7
  5094     0574  0801               	movf	1,w
  5095     0575  0084               	movwf	4
  5096     0576  0185               	clrf	5
  5097     0577  3002               	movlw	2
  5098     0578  0781               	addwf	1,f
  5099     0579  3F00               	moviw [0]fsr0
  5100     057A  00CE               	movwf	vfpfcnvrt@convarg^(0+128)
  5101     057B  3F01               	moviw [1]fsr0
  5102     057C  00CF               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  5103                           
  5104                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  5105     057D  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5106     057E  3E01               	addlw	1
  5107     057F  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5108     0580  3000               	movlw	0
  5109     0581  3D55               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  5110     0582  00CB               	movwf	(??_vfpfcnvrt+1)^(0+128)
  5111     0583  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5112     0584  0086               	movwf	6
  5113     0585  0187               	clrf	7
  5114     0586  084A               	movf	??_vfpfcnvrt^(0+128),w
  5115     0587  3FC0               	movwi [0]fsr1
  5116     0588  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5117     0589  3FC1               	movwi [1]fsr1
  5118                           
  5119                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  5120     058A  2D97               	goto	l5188
  5121     058B                     l5182:
  5122                           
  5123                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (int) xtoa(fp,convarg.uint);
  5124     058B  084F               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  5125     058C  00BF               	movwf	(xtoa@d+1)^(0+128)
  5126     058D  084E               	movf	vfpfcnvrt@convarg^(0+128),w
  5127     058E  00BE               	movwf	xtoa@d^(0+128)
  5128     058F  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5129     0590  3197  2795         	fcall	_xtoa
  5130     0592  083F               	movf	(?_xtoa+1)^(0+128),w
  5131     0593  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5132     0594  083E               	movf	?_xtoa^(0+128),w
  5133     0595  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5134     0596  0008               	return
  5135     0597                     l5188:
  5136     0597  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5137     0598  0084               	movwf	4
  5138     0599  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5139     059A  0085               	movwf	5
  5140     059B  0800               	movf	0,w	;code access
  5141                           
  5142                           ; Switch size 1, requested type "simple"
  5143                           ; Number of cases is 1, Range of values is 88 to 88
  5144                           ; switch strategies available:
  5145                           ; Name         Instructions Cycles
  5146                           ; simple_byte            4     3 (average)
  5147                           ; direct_byte           11     9 (fixed)
  5148                           ; jumptable            263     9 (fixed)
  5149                           ;	Chosen strategy is simple_byte
  5150     059C  3A58               	xorlw	88	; case 88
  5151     059D  1903               	skipnz
  5152     059E  2D8B               	goto	l5182
  5153     059F  2DA0               	goto	l5190
  5154     05A0                     l5190:
  5155                           
  5156                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  5157     05A0  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5158     05A1  0086               	movwf	6
  5159     05A2  0187               	clrf	7
  5160     05A3  3001               	movlw	1
  5161     05A4  0781               	addwf	1,f
  5162     05A5  3141               	addfsr 1,1
  5163     05A6  1803               	skipnc
  5164     05A7  0A81               	incf	1,f
  5165                           
  5166                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  5167     05A8  01C8               	clrf	?_vfpfcnvrt^(0+128)
  5168     05A9  01C9               	clrf	(?_vfpfcnvrt+1)^(0+128)
  5169     05AA  0008               	return
  5170     05AB                     l5196:
  5171                           
  5172                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  5173     05AB  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5174     05AC  0086               	movwf	6
  5175     05AD  0187               	clrf	7
  5176     05AE  3F40               	moviw [0]fsr1
  5177     05AF  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5178     05B0  3F41               	moviw [1]fsr1
  5179     05B1  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5180     05B2  084A               	movf	??_vfpfcnvrt^(0+128),w
  5181     05B3  0084               	movwf	4
  5182     05B4  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5183     05B5  0085               	movwf	5
  5184     05B6  0800               	movf	0,w	;code access
  5185     05B7  00CC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  5186     05B8  01CD               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  5187     05B9  084C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  5188     05BA  00A8               	movwf	fputc@c^(0+128)
  5189     05BB  084D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  5190     05BC  00A9               	movwf	(fputc@c+1)^(0+128)
  5191     05BD  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5192     05BE  00AA               	movwf	fputc@fp^(0+128)
  5193     05BF  3188  2003         	fcall	_fputc
  5194                           
  5195                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  5196     05C1  0021               	movlb	1	; select bank1
  5197     05C2  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5198     05C3  0086               	movwf	6
  5199     05C4  0187               	clrf	7
  5200     05C5  3001               	movlw	1
  5201     05C6  0781               	addwf	1,f
  5202     05C7  3141               	addfsr 1,1
  5203     05C8  1803               	skipnc
  5204     05C9  0A81               	incf	1,f
  5205                           
  5206                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  5207     05CA  3001               	movlw	1
  5208     05CB  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5209     05CC  3000               	movlw	0
  5210     05CD  00C9               	movwf	(?_vfpfcnvrt^(0+128)+1)
  5211     05CE  0008               	return
  5212     05CF                     __end_of_vfpfcnvrt:
  5213                           
  5214                           	psect	text4
  5215     1795                     __ptext4:	
  5216 ;; *************** function _xtoa *****************
  5217 ;; Defined at:
  5218 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;  fp              1    wreg     PTR struct _IO_FILE
  5221 ;;		 -> snprintf@f(11), 
  5222 ;;  d               2   22[BANK1 ] unsigned int 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  fp              1   25[BANK1 ] PTR struct _IO_FILE
  5225 ;;		 -> snprintf@f(11), 
  5226 ;;  i               2   30[BANK1 ] int 
  5227 ;;  w               2   27[BANK1 ] int 
  5228 ;;  c               1   29[BANK1 ] unsigned char 
  5229 ;;  p               1   26[BANK1 ] _Bool 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  2   22[BANK1 ] int 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 1F/1
  5236 ;;		On exit  : 1F/1
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5239 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5243 ;;Total ram usage:       10 bytes
  5244 ;; Hardware stack levels used: 1
  5245 ;; Hardware stack levels required when called: 14
  5246 ;; This function calls:
  5247 ;;		_pad
  5248 ;; This function is called by:
  5249 ;;		_vfpfcnvrt
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253     1795                     _xtoa:	
  5254                           ;psect for function _xtoa
  5255                           
  5256                           
  5257                           ;incstack = 0
  5258 ;; hardware stack exceeded
  5259                           ; Regs used in _xtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5260                           ;xtoa@fp stored from wreg
  5261     1795  00C1               	movwf	xtoa@fp^(0+128)
  5262                           
  5263                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1055: static int 
      +                          xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\commo
      +                          n\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 1059:  char c;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1
      +                          063:     int i, w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           1067:  _Bool p = 1;
  5264     1796  01C2               	clrf	xtoa@p^(0+128)
  5265     1797  0AC2               	incf	xtoa@p^(0+128),f
  5266                           
  5267                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  5268     1798  0022               	movlb	2	; select bank2
  5269     1799  082D               	movf	(_width+1)^(0+256),w
  5270     179A  0021               	movlb	1	; select bank1
  5271     179B  00C4               	movwf	(xtoa@w+1)^(0+128)
  5272     179C  0022               	movlb	2	; select bank2
  5273     179D  082C               	movf	_width^(0+256),w
  5274     179E  0021               	movlb	1	; select bank1
  5275     179F  00C3               	movwf	xtoa@w^(0+128)
  5276                           
  5277                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  5278     17A0  301F               	movlw	31
  5279     17A1  00C6               	movwf	xtoa@i^(0+128)
  5280     17A2  3000               	movlw	0
  5281     17A3  00C7               	movwf	(xtoa@i^(0+128)+1)
  5282                           
  5283                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  5284     17A4  0024               	movlb	4	; select bank4
  5285     17A5  01D1               	clrf	(_dbuf^(0+512)+31)
  5286                           
  5287                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5288     17A6  2FCE               	goto	l4838
  5289     17A7                     l4820:
  5290                           
  5291                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1107:         --i;
  5292     17A7  30FF               	movlw	255
  5293     17A8  0021               	movlb	1	; select bank1
  5294     17A9  07C6               	addwf	xtoa@i^(0+128),f
  5295     17AA  30FF               	movlw	255
  5296     17AB  3DC7               	addwfc	(xtoa@i+1)^(0+128),f
  5297                           
  5298                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  5299     17AC  083E               	movf	xtoa@d^(0+128),w
  5300     17AD  390F               	andlw	15
  5301     17AE  00C5               	movwf	xtoa@c^(0+128)
  5302                           
  5303                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  5304     17AF  300A               	movlw	10
  5305     17B0  0245               	subwf	xtoa@c^(0+128),w
  5306     17B1  1803               	skipnc
  5307     17B2  2FB5               	goto	l4828
  5308                           
  5309                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  5310     17B3  3030               	movlw	48
  5311     17B4  2FB6               	goto	L2
  5312     17B5                     l4828:	
  5313                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1111:   }
  5314                           
  5315                           
  5316                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  5317     17B5  3037               	movlw	55
  5318     17B6                     L2:
  5319     17B6  00C0               	movwf	??_xtoa^(0+128)
  5320     17B7  0840               	movf	??_xtoa^(0+128),w
  5321     17B8  07C5               	addwf	xtoa@c^(0+128),f
  5322                           
  5323                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  5324     17B9  0846               	movf	xtoa@i^(0+128),w
  5325     17BA  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5326     17BB  0086               	movwf	6
  5327     17BC  3002               	movlw	2	; select bank4/5
  5328     17BD  0087               	movwf	7
  5329     17BE  0845               	movf	xtoa@c^(0+128),w
  5330     17BF  0081               	movwf	1
  5331                           
  5332                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  5333     17C0  01C2               	clrf	xtoa@p^(0+128)
  5334                           
  5335                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  5336     17C1  30FF               	movlw	255
  5337     17C2  07C3               	addwf	xtoa@w^(0+128),f
  5338     17C3  30FF               	movlw	255
  5339     17C4  3DC4               	addwfc	(xtoa@w+1)^(0+128),f
  5340                           
  5341                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  5342     17C5  0E3E               	swapf	xtoa@d^(0+128),w
  5343     17C6  390F               	andlw	15
  5344     17C7  00BE               	movwf	xtoa@d^(0+128)
  5345     17C8  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5346     17C9  39F0               	andlw	240
  5347     17CA  04BE               	iorwf	xtoa@d^(0+128),f
  5348     17CB  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5349     17CC  390F               	andlw	15
  5350     17CD  00BF               	movwf	(xtoa@d^(0+128)+1)
  5351     17CE                     l4838:
  5352                           
  5353                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5354     17CE  0021               	movlb	1	; select bank1
  5355     17CF  0847               	movf	(xtoa@i+1)^(0+128),w
  5356     17D0  3A80               	xorlw	128
  5357     17D1  00C0               	movwf	??_xtoa^(0+128)
  5358     17D2  3080               	movlw	128
  5359     17D3  0240               	subwf	??_xtoa^(0+128),w
  5360     17D4  1D03               	skipz
  5361     17D5  2FD8               	goto	u4065
  5362     17D6  3002               	movlw	2
  5363     17D7  0246               	subwf	xtoa@i^(0+128),w
  5364     17D8                     u4065:
  5365     17D8  1C03               	skipc
  5366     17D9  2FF0               	goto	l4848
  5367     17DA  0021               	movlb	1	; select bank1
  5368     17DB  083E               	movf	xtoa@d^(0+128),w
  5369     17DC  043F               	iorwf	(xtoa@d+1)^(0+128),w
  5370     17DD  1D03               	btfss	3,2
  5371     17DE  2FA7               	goto	l4820
  5372     17DF  0842               	movf	xtoa@p^(0+128),w
  5373     17E0  1D03               	btfss	3,2
  5374     17E1  2FA7               	goto	l4820
  5375     17E2  0844               	movf	(xtoa@w+1)^(0+128),w
  5376     17E3  3A80               	xorlw	128
  5377     17E4  00C0               	movwf	??_xtoa^(0+128)
  5378     17E5  3080               	movlw	128
  5379     17E6  0240               	subwf	??_xtoa^(0+128),w
  5380     17E7  1D03               	skipz
  5381     17E8  2FEB               	goto	u4095
  5382     17E9  3001               	movlw	1
  5383     17EA  0243               	subwf	xtoa@w^(0+128),w
  5384     17EB                     u4095:
  5385     17EB  1C03               	skipc
  5386     17EC  2FF0               	goto	l4848
  5387     17ED  0022               	movlb	2	; select bank2
  5388     17EE  18B4               	btfsc	_flags^(0+256),1
  5389     17EF  2FA7               	goto	l4820
  5390     17F0                     l4848:
  5391                           
  5392                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (int) pad(fp, &dbuf[i], w);
  5393     17F0  0021               	movlb	1	; select bank1
  5394     17F1  0846               	movf	xtoa@i^(0+128),w
  5395     17F2  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5396     17F3  00B7               	movwf	pad@buf^(0+128)
  5397     17F4  0844               	movf	(xtoa@w+1)^(0+128),w
  5398     17F5  00B9               	movwf	(pad@p+1)^(0+128)
  5399     17F6  0843               	movf	xtoa@w^(0+128),w
  5400     17F7  00B8               	movwf	pad@p^(0+128)
  5401     17F8  0841               	movf	xtoa@fp^(0+128),w
  5402     17F9  3192  2210         	fcall	_pad
  5403     17FB  0838               	movf	(?_pad+1)^(0+128),w
  5404     17FC  00BF               	movwf	(?_xtoa+1)^(0+128)
  5405     17FD  0837               	movf	?_pad^(0+128),w
  5406     17FE  00BE               	movwf	?_xtoa^(0+128)
  5407     17FF  0008               	return
  5408     1800                     __end_of_xtoa:
  5409                           
  5410                           	psect	text5
  5411     1210                     __ptext5:	
  5412 ;; *************** function _pad *****************
  5413 ;; Defined at:
  5414 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  fp              1    wreg     PTR struct _IO_FILE
  5417 ;;		 -> snprintf@f(11), 
  5418 ;;  buf             1   15[BANK1 ] PTR unsigned char 
  5419 ;;		 -> dbuf(32), 
  5420 ;;  p               2   16[BANK1 ] int 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  fp              1   21[BANK1 ] PTR struct _IO_FILE
  5423 ;;		 -> snprintf@f(11), 
  5424 ;;  i               2   19[BANK1 ] int 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  2   15[BANK1 ] int 
  5427 ;; Registers used:
  5428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5429 ;; Tracked objects:
  5430 ;;		On entry : 1F/1
  5431 ;;		On exit  : 1F/1
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5434 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;Total ram usage:        7 bytes
  5439 ;; Hardware stack levels used: 1
  5440 ;; Hardware stack levels required when called: 13
  5441 ;; This function calls:
  5442 ;;		_fputc
  5443 ;;		_fputs
  5444 ;;		_strlen
  5445 ;; This function is called by:
  5446 ;;		_xtoa
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450     1210                     _pad:	
  5451                           ;psect for function _pad
  5452                           
  5453                           
  5454                           ;incstack = 0
  5455 ;; hardware stack exceeded
  5456                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5457                           ;pad@fp stored from wreg
  5458     1210  00BD               	movwf	pad@fp^(0+128)
  5459                           
  5460                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 193: static int p
      +                          ad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 195:     int i;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 
      +                          199:     if (flags & (1 << 0)) {
  5461     1211  0022               	movlb	2	; select bank2
  5462     1212  1C34               	btfss	_flags^(0+256),0
  5463     1213  2A1B               	goto	l4560
  5464                           
  5465                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  5466     1214  0021               	movlb	1	; select bank1
  5467     1215  083D               	movf	pad@fp^(0+128),w
  5468     1216  00B0               	movwf	fputs@fp^(0+128)
  5469     1217  0837               	movf	pad@buf^(0+128),w
  5470     1218  319E  26F2  3192   	fcall	_fputs
  5471     121B                     l4560:
  5472                           
  5473                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  5474     121B  0021               	movlb	1	; select bank1
  5475     121C  1FB9               	btfss	(pad@p+1)^(0+128),7
  5476     121D  2A20               	goto	l1753
  5477                           
  5478                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  5479     121E  01B8               	clrf	pad@p^(0+128)
  5480     121F  01B9               	clrf	(pad@p+1)^(0+128)
  5481     1220                     l1753:	
  5482                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 207:  }
  5483                           
  5484                           
  5485                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  5486     1220  01BB               	clrf	pad@i^(0+128)
  5487     1221  01BC               	clrf	(pad@i+1)^(0+128)
  5488     1222                     l4568:	
  5489                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5490                           
  5491                           
  5492                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5493     1222  083C               	movf	(pad@i+1)^(0+128),w
  5494     1223  3A80               	xorlw	128
  5495     1224  00BA               	movwf	??_pad^(0+128)
  5496     1225  0839               	movf	(pad@p+1)^(0+128),w
  5497     1226  3A80               	xorlw	128
  5498     1227  023A               	subwf	??_pad^(0+128),w
  5499     1228  1D03               	skipz
  5500     1229  2A2C               	goto	u3685
  5501     122A  0838               	movf	pad@p^(0+128),w
  5502     122B  023B               	subwf	pad@i^(0+128),w
  5503     122C                     u3685:
  5504     122C  1803               	btfsc	3,0
  5505     122D  2A3E               	goto	l1756
  5506                           
  5507                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  5508     122E  3020               	movlw	32
  5509     122F  0021               	movlb	1	; select bank1
  5510     1230  00A8               	movwf	fputc@c^(0+128)
  5511     1231  3000               	movlw	0
  5512     1232  00A9               	movwf	(fputc@c^(0+128)+1)
  5513     1233  083D               	movf	pad@fp^(0+128),w
  5514     1234  00AA               	movwf	fputc@fp^(0+128)
  5515     1235  3188  2003  3192   	fcall	_fputc
  5516                           
  5517                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 211:         ++i;
  5518     1238  3001               	movlw	1
  5519     1239  0021               	movlb	1	; select bank1
  5520     123A  07BB               	addwf	pad@i^(0+128),f
  5521     123B  3000               	movlw	0
  5522     123C  3DBC               	addwfc	(pad@i+1)^(0+128),f
  5523     123D  2A22               	goto	l4568
  5524     123E                     l1756:
  5525                           
  5526                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  5527     123E  0022               	movlb	2	; select bank2
  5528     123F  1834               	btfsc	_flags^(0+256),0
  5529     1240  2A48               	goto	l4572
  5530                           
  5531                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  5532     1241  0021               	movlb	1	; select bank1
  5533     1242  083D               	movf	pad@fp^(0+128),w
  5534     1243  00B0               	movwf	fputs@fp^(0+128)
  5535     1244  0837               	movf	pad@buf^(0+128),w
  5536     1245  319E  26F2  3192   	fcall	_fputs
  5537     1248                     l4572:
  5538                           
  5539                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 224:     return (
      +                          int)(strlen(buf) + (size_t)p);
  5540     1248  0021               	movlb	1	; select bank1
  5541     1249  0837               	movf	pad@buf^(0+128),w
  5542     124A  319D  2542         	fcall	_strlen
  5543     124C  0838               	movf	pad@p^(0+128),w
  5544     124D  0728               	addwf	?_strlen^(0+128),w
  5545     124E  00B7               	movwf	?_pad^(0+128)
  5546     124F  0839               	movf	(pad@p+1)^(0+128),w
  5547     1250  3D29               	addwfc	(?_strlen+1)^(0+128),w
  5548     1251  00B8               	movwf	(?_pad+1)^(0+128)
  5549     1252  0008               	return
  5550     1253                     __end_of_pad:
  5551                           
  5552                           	psect	text6
  5553     1D42                     __ptext6:	
  5554 ;; *************** function _strlen *****************
  5555 ;; Defined at:
  5556 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
  5557 ;; Parameters:    Size  Location     Type
  5558 ;;  s               1    wreg     PTR const unsigned char 
  5559 ;;		 -> dbuf(32), 
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;  s               1    4[BANK1 ] PTR const unsigned char 
  5562 ;;		 -> dbuf(32), 
  5563 ;;  a               1    3[BANK1 ] PTR const unsigned char 
  5564 ;;		 -> dbuf(32), 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  2    0[BANK1 ] unsigned int 
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 1F/1
  5571 ;;		On exit  : 1F/1
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        5 bytes
  5579 ;; Hardware stack levels used: 1
  5580 ;; Hardware stack levels required when called: 10
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_pad
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588     1D42                     _strlen:	
  5589                           ;psect for function _strlen
  5590                           
  5591                           
  5592                           ;incstack = 0
  5593                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5594                           ;strlen@s stored from wreg
  5595     1D42  00AC               	movwf	strlen@s^(0+128)
  5596     1D43  082C               	movf	strlen@s^(0+128),w
  5597     1D44  00AB               	movwf	strlen@a^(0+128)
  5598     1D45                     l4260:
  5599     1D45  082C               	movf	strlen@s^(0+128),w
  5600     1D46  0086               	movwf	6
  5601     1D47  3002               	movlw	2	; select bank4/5
  5602     1D48  0087               	movwf	7
  5603     1D49  0801               	movf	1,w
  5604     1D4A  1903               	btfsc	3,2
  5605     1D4B  2D51               	goto	l4262
  5606     1D4C  3001               	movlw	1
  5607     1D4D  00AA               	movwf	??_strlen^(0+128)
  5608     1D4E  082A               	movf	??_strlen^(0+128),w
  5609     1D4F  07AC               	addwf	strlen@s^(0+128),f
  5610     1D50  2D45               	goto	l4260
  5611     1D51                     l4262:
  5612     1D51  082B               	movf	strlen@a^(0+128),w
  5613     1D52  022C               	subwf	strlen@s^(0+128),w
  5614     1D53  00A8               	movwf	?_strlen^(0+128)
  5615     1D54  01A9               	clrf	(?_strlen+1)^(0+128)
  5616     1D55  1BA8               	btfsc	?_strlen^(0+128),7
  5617     1D56  03A9               	decf	(?_strlen+1)^(0+128),f
  5618     1D57  0008               	return
  5619     1D58                     __end_of_strlen:
  5620                           
  5621                           	psect	text7
  5622     1EF2                     __ptext7:	
  5623 ;; *************** function _fputs *****************
  5624 ;; Defined at:
  5625 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputs.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  s               1    wreg     PTR const unsigned char 
  5628 ;;		 -> dbuf(32), 
  5629 ;;  fp              1    8[BANK1 ] PTR struct _IO_FILE
  5630 ;;		 -> snprintf@f(11), 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  s               1   14[BANK1 ] PTR const unsigned char 
  5633 ;;		 -> dbuf(32), 
  5634 ;;  i               2   12[BANK1 ] int 
  5635 ;;  c               1   11[BANK1 ] unsigned char 
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  2    8[BANK1 ] int 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 1F/1
  5642 ;;		On exit  : 1F/1
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5645 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5646 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5647 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5648 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5649 ;;Total ram usage:        7 bytes
  5650 ;; Hardware stack levels used: 1
  5651 ;; Hardware stack levels required when called: 12
  5652 ;; This function calls:
  5653 ;;		_fputc
  5654 ;; This function is called by:
  5655 ;;		_pad
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659     1EF2                     _fputs:	
  5660                           ;psect for function _fputs
  5661                           
  5662                           
  5663                           ;incstack = 0
  5664 ;; hardware stack exceeded
  5665                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5666                           ;fputs@s stored from wreg
  5667     1EF2  00B6               	movwf	fputs@s^(0+128)
  5668     1EF3  01B4               	clrf	fputs@i^(0+128)
  5669     1EF4  01B5               	clrf	(fputs@i+1)^(0+128)
  5670     1EF5                     l4254:
  5671     1EF5  0834               	movf	fputs@i^(0+128),w
  5672     1EF6  0736               	addwf	fputs@s^(0+128),w
  5673     1EF7  00B1               	movwf	??_fputs^(0+128)
  5674     1EF8  0831               	movf	??_fputs^(0+128),w
  5675     1EF9  0086               	movwf	6
  5676     1EFA  3002               	movlw	2	; select bank4/5
  5677     1EFB  0087               	movwf	7
  5678     1EFC  0801               	movf	1,w
  5679     1EFD  00B3               	movwf	fputs@c^(0+128)
  5680     1EFE  0833               	movf	fputs@c^(0+128),w
  5681     1EFF  1903               	btfsc	3,2
  5682     1F00  0008               	return
  5683     1F01  0833               	movf	fputs@c^(0+128),w
  5684     1F02  00B1               	movwf	??_fputs^(0+128)
  5685     1F03  01B2               	clrf	(??_fputs^(0+128)+1)
  5686     1F04  0831               	movf	??_fputs^(0+128),w
  5687     1F05  00A8               	movwf	fputc@c^(0+128)
  5688     1F06  0832               	movf	(??_fputs+1)^(0+128),w
  5689     1F07  00A9               	movwf	(fputc@c+1)^(0+128)
  5690     1F08  0830               	movf	fputs@fp^(0+128),w
  5691     1F09  00AA               	movwf	fputc@fp^(0+128)
  5692     1F0A  3188  2003  319E   	fcall	_fputc
  5693     1F0D  3001               	movlw	1
  5694     1F0E  0021               	movlb	1	; select bank1
  5695     1F0F  07B4               	addwf	fputs@i^(0+128),f
  5696     1F10  3000               	movlw	0
  5697     1F11  3DB5               	addwfc	(fputs@i+1)^(0+128),f
  5698     1F12  2EF5               	goto	l4254
  5699     1F13                     __end_of_fputs:
  5700                           
  5701                           	psect	text8
  5702     140C                     __ptext8:	
  5703 ;; *************** function _read_prec_or_width *****************
  5704 ;; Defined at:
  5705 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  fmt             1    wreg     PTR PTR const unsigned c
  5708 ;;		 -> vfprintf@cfmt(2), 
  5709 ;;  ap              1   13[BANK1 ] PTR PTR void [1]
  5710 ;;		 -> snprintf@ap(1), 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  fmt             1   21[BANK1 ] PTR PTR const unsigned c
  5713 ;;		 -> vfprintf@cfmt(2), 
  5714 ;;  c               1   18[BANK1 ] unsigned char 
  5715 ;;  n               2   19[BANK1 ] int 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  2   13[BANK1 ] int 
  5718 ;; Registers used:
  5719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 1F/1
  5722 ;;		On exit  : 1F/1
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5725 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5728 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5729 ;;Total ram usage:        9 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; Hardware stack levels required when called: 11
  5732 ;; This function calls:
  5733 ;;		___wmul
  5734 ;; This function is called by:
  5735 ;;		_vfpfcnvrt
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739     140C                     _read_prec_or_width:	
  5740                           ;psect for function _read_prec_or_width
  5741                           
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5745                           ;read_prec_or_width@fmt stored from wreg
  5746     140C  00BD               	movwf	read_prec_or_width@fmt^(0+128)
  5747                           
  5748                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  5749     140D  01BB               	clrf	read_prec_or_width@n^(0+128)
  5750     140E  01BC               	clrf	(read_prec_or_width@n+1)^(0+128)
  5751                           
  5752                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  5753     140F  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5754     1410  0086               	movwf	6
  5755     1411  0187               	clrf	7
  5756     1412  3F40               	moviw [0]fsr1
  5757     1413  00B7               	movwf	??_read_prec_or_width^(0+128)
  5758     1414  3F41               	moviw [1]fsr1
  5759     1415  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5760     1416  0837               	movf	??_read_prec_or_width^(0+128),w
  5761     1417  0084               	movwf	4
  5762     1418  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5763     1419  0085               	movwf	5
  5764     141A  0012               	moviw fsr0++
  5765     141B  3A2A               	xorlw	42
  5766     141C  1D03               	btfss	3,2
  5767     141D  2C50               	goto	l4864
  5768                           
  5769                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  5770     141E  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5771     141F  0086               	movwf	6
  5772     1420  0187               	clrf	7
  5773     1421  3001               	movlw	1
  5774     1422  0781               	addwf	1,f
  5775     1423  3141               	addfsr 1,1
  5776     1424  1803               	skipnc
  5777     1425  0A81               	incf	1,f
  5778                           
  5779                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  5780     1426  0835               	movf	read_prec_or_width@ap^(0+128),w
  5781     1427  0086               	movwf	6
  5782     1428  3001               	movlw	1	; select bank2/3
  5783     1429  0087               	movwf	7
  5784     142A  0801               	movf	1,w
  5785     142B  0084               	movwf	4
  5786     142C  0185               	clrf	5
  5787     142D  3002               	movlw	2
  5788     142E  0781               	addwf	1,f
  5789     142F  3F00               	moviw [0]fsr0
  5790     1430  00BB               	movwf	read_prec_or_width@n^(0+128)
  5791     1431  3F01               	moviw [1]fsr0
  5792     1432  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5793                           
  5794                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  5795     1433  2C62               	goto	l4866
  5796     1434                     l4860:
  5797                           
  5798                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  5799     1434  083A               	movf	read_prec_or_width@c^(0+128),w
  5800     1435  00B7               	movwf	??_read_prec_or_width^(0+128)
  5801     1436  01B8               	clrf	(??_read_prec_or_width^(0+128)+1)
  5802     1437  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5803     1438  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  5804     1439  083B               	movf	read_prec_or_width@n^(0+128),w
  5805     143A  00AF               	movwf	___wmul@multiplier^(0+128)
  5806     143B  300A               	movlw	10
  5807     143C  00B1               	movwf	___wmul@multiplicand^(0+128)
  5808     143D  3000               	movlw	0
  5809     143E  00B2               	movwf	(___wmul@multiplicand^(0+128)+1)
  5810     143F  319E  2603  3194   	fcall	___wmul
  5811     1442  0837               	movf	??_read_prec_or_width^(0+128),w
  5812     1443  072F               	addwf	?___wmul^(0+128),w
  5813     1444  00BB               	movwf	read_prec_or_width@n^(0+128)
  5814     1445  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5815     1446  3D30               	addwfc	(?___wmul+1)^(0+128),w
  5816     1447  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5817                           
  5818                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  5819     1448  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5820     1449  0086               	movwf	6
  5821     144A  0187               	clrf	7
  5822     144B  3001               	movlw	1
  5823     144C  0781               	addwf	1,f
  5824     144D  3141               	addfsr 1,1
  5825     144E  1803               	skipnc
  5826     144F  0A81               	incf	1,f
  5827     1450                     l4864:
  5828                           
  5829                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  5830     1450  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5831     1451  0086               	movwf	6
  5832     1452  0187               	clrf	7
  5833     1453  3F40               	moviw [0]fsr1
  5834     1454  00B7               	movwf	??_read_prec_or_width^(0+128)
  5835     1455  3F41               	moviw [1]fsr1
  5836     1456  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5837     1457  0837               	movf	??_read_prec_or_width^(0+128),w
  5838     1458  0084               	movwf	4
  5839     1459  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5840     145A  0085               	movwf	5
  5841     145B  0800               	movf	0,w	;code access
  5842     145C  3ED0               	addlw	208
  5843     145D  00BA               	movwf	read_prec_or_width@c^(0+128)
  5844     145E  300A               	movlw	10
  5845     145F  023A               	subwf	read_prec_or_width@c^(0+128),w
  5846     1460  1C03               	skipc
  5847     1461  2C34               	goto	l4860
  5848     1462                     l4866:
  5849                           
  5850                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  5851     1462  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5852     1463  00B6               	movwf	(?_read_prec_or_width+1)^(0+128)
  5853     1464  083B               	movf	read_prec_or_width@n^(0+128),w
  5854     1465  00B5               	movwf	?_read_prec_or_width^(0+128)
  5855     1466  0008               	return
  5856     1467                     __end_of_read_prec_or_width:
  5857                           
  5858                           	psect	text9
  5859     1467                     __ptext9:	
  5860 ;; *************** function _ctoa *****************
  5861 ;; Defined at:
  5862 ;;		line 476 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5863 ;; Parameters:    Size  Location     Type
  5864 ;;  fp              1    wreg     PTR struct _IO_FILE
  5865 ;;		 -> snprintf@f(11), 
  5866 ;;  c               1    8[BANK1 ] unsigned char 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  fp              1   16[BANK1 ] PTR struct _IO_FILE
  5869 ;;		 -> snprintf@f(11), 
  5870 ;;  w               2   14[BANK1 ] int 
  5871 ;;  l               2   12[BANK1 ] int 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  2    8[BANK1 ] int 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 1F/1
  5878 ;;		On exit  : 1F/1
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5881 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;Total ram usage:        9 bytes
  5886 ;; Hardware stack levels used: 1
  5887 ;; Hardware stack levels required when called: 12
  5888 ;; This function calls:
  5889 ;;		_fputc
  5890 ;; This function is called by:
  5891 ;;		_vfpfcnvrt
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895     1467                     _ctoa:	
  5896                           ;psect for function _ctoa
  5897                           
  5898                           
  5899                           ;incstack = 0
  5900                           ; Regs used in _ctoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5901                           ;ctoa@fp stored from wreg
  5902     1467  00B8               	movwf	ctoa@fp^(0+128)
  5903                           
  5904                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 476: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt
      +                          .c: 477: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 478:   
      +                            int l,w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 481:   
      +                            w = width ? width - 1 : width;
  5905     1468  0022               	movlb	2	; select bank2
  5906     1469  082C               	movf	_width^(0+256),w
  5907     146A  042D               	iorwf	(_width+1)^(0+256),w
  5908     146B  1D03               	btfss	3,2
  5909     146C  2C75               	goto	l4790
  5910     146D  082D               	movf	(_width+1)^(0+256),w
  5911     146E  0021               	movlb	1	; select bank1
  5912     146F  00B7               	movwf	(ctoa@w+1)^(0+128)
  5913     1470  0022               	movlb	2	; select bank2
  5914     1471  082C               	movf	_width^(0+256),w
  5915     1472  0021               	movlb	1	; select bank1
  5916     1473  00B6               	movwf	ctoa@w^(0+128)
  5917     1474  2C7E               	goto	l4792
  5918     1475                     l4790:
  5919     1475  082C               	movf	_width^(0+256),w
  5920     1476  3EFF               	addlw	255
  5921     1477  0021               	movlb	1	; select bank1
  5922     1478  00B6               	movwf	ctoa@w^(0+128)
  5923     1479  30FF               	movlw	255
  5924     147A  0022               	movlb	2	; select bank2
  5925     147B  3D2D               	addwfc	(_width+1)^(0+256),w
  5926     147C  0021               	movlb	1	; select bank1
  5927     147D  00B7               	movwf	(ctoa@w+1)^(0+128)
  5928     147E                     l4792:
  5929                           
  5930                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 485:     if (flag
      +                          s & (1 << 0)) {
  5931     147E  0022               	movlb	2	; select bank2
  5932     147F  1C34               	btfss	_flags^(0+256),0
  5933     1480  2C8E               	goto	l4796
  5934                           
  5935                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 486:         fput
      +                          c(c, fp);
  5936     1481  0021               	movlb	1	; select bank1
  5937     1482  0830               	movf	ctoa@c^(0+128),w
  5938     1483  00B2               	movwf	??_ctoa^(0+128)
  5939     1484  01B3               	clrf	(??_ctoa^(0+128)+1)
  5940     1485  0832               	movf	??_ctoa^(0+128),w
  5941     1486  00A8               	movwf	fputc@c^(0+128)
  5942     1487  0833               	movf	(??_ctoa+1)^(0+128),w
  5943     1488  00A9               	movwf	(fputc@c+1)^(0+128)
  5944     1489  0838               	movf	ctoa@fp^(0+128),w
  5945     148A  00AA               	movwf	fputc@fp^(0+128)
  5946     148B  3188  2003  3194   	fcall	_fputc
  5947     148E                     l4796:
  5948                           
  5949                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 491:     w = (w <
      +                           0) ? 0 : w;
  5950     148E  0021               	movlb	1	; select bank1
  5951     148F  1FB7               	btfss	(ctoa@w+1)^(0+128),7
  5952     1490  2C93               	goto	l1769
  5953     1491  01B6               	clrf	ctoa@w^(0+128)
  5954     1492  01B7               	clrf	(ctoa@w+1)^(0+128)
  5955     1493                     l1769:
  5956                           
  5957                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 492:     l = 0;
  5958     1493  01B4               	clrf	ctoa@l^(0+128)
  5959     1494  01B5               	clrf	(ctoa@l+1)^(0+128)
  5960     1495                     l4806:	
  5961                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  5962                           
  5963                           
  5964                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  5965     1495  0835               	movf	(ctoa@l+1)^(0+128),w
  5966     1496  3A80               	xorlw	128
  5967     1497  00B2               	movwf	??_ctoa^(0+128)
  5968     1498  0837               	movf	(ctoa@w+1)^(0+128),w
  5969     1499  3A80               	xorlw	128
  5970     149A  0232               	subwf	??_ctoa^(0+128),w
  5971     149B  1D03               	skipz
  5972     149C  2C9F               	goto	u4035
  5973     149D  0836               	movf	ctoa@w^(0+128),w
  5974     149E  0234               	subwf	ctoa@l^(0+128),w
  5975     149F                     u4035:
  5976     149F  1803               	btfsc	3,0
  5977     14A0  2CB1               	goto	l1772
  5978                           
  5979                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 494:         fput
      +                          c(' ', fp);
  5980     14A1  3020               	movlw	32
  5981     14A2  0021               	movlb	1	; select bank1
  5982     14A3  00A8               	movwf	fputc@c^(0+128)
  5983     14A4  3000               	movlw	0
  5984     14A5  00A9               	movwf	(fputc@c^(0+128)+1)
  5985     14A6  0838               	movf	ctoa@fp^(0+128),w
  5986     14A7  00AA               	movwf	fputc@fp^(0+128)
  5987     14A8  3188  2003  3194   	fcall	_fputc
  5988                           
  5989                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 495:         ++l;
  5990     14AB  3001               	movlw	1
  5991     14AC  0021               	movlb	1	; select bank1
  5992     14AD  07B4               	addwf	ctoa@l^(0+128),f
  5993     14AE  3000               	movlw	0
  5994     14AF  3DB5               	addwfc	(ctoa@l+1)^(0+128),f
  5995     14B0  2C95               	goto	l4806
  5996     14B1                     l1772:
  5997                           
  5998                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 499:     if (!(fl
      +                          ags & (1 << 0))) {
  5999     14B1  0022               	movlb	2	; select bank2
  6000     14B2  1834               	btfsc	_flags^(0+256),0
  6001     14B3  2CC0               	goto	l4810
  6002                           
  6003                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 501:         fput
      +                          c(c, fp);
  6004     14B4  0021               	movlb	1	; select bank1
  6005     14B5  0830               	movf	ctoa@c^(0+128),w
  6006     14B6  00B2               	movwf	??_ctoa^(0+128)
  6007     14B7  01B3               	clrf	(??_ctoa^(0+128)+1)
  6008     14B8  0832               	movf	??_ctoa^(0+128),w
  6009     14B9  00A8               	movwf	fputc@c^(0+128)
  6010     14BA  0833               	movf	(??_ctoa+1)^(0+128),w
  6011     14BB  00A9               	movwf	(fputc@c+1)^(0+128)
  6012     14BC  0838               	movf	ctoa@fp^(0+128),w
  6013     14BD  00AA               	movwf	fputc@fp^(0+128)
  6014     14BE  3188  2003         	fcall	_fputc
  6015     14C0                     l4810:
  6016                           
  6017                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 507:     return l
      +                          +1;
  6018     14C0  0021               	movlb	1	; select bank1
  6019     14C1  0834               	movf	ctoa@l^(0+128),w
  6020     14C2  3E01               	addlw	1
  6021     14C3  00B0               	movwf	?_ctoa^(0+128)
  6022     14C4  3000               	movlw	0
  6023     14C5  3D35               	addwfc	(ctoa@l+1)^(0+128),w
  6024     14C6  00B1               	movwf	(?_ctoa+1)^(0+128)
  6025     14C7  0008               	return
  6026     14C8                     __end_of_ctoa:
  6027                           
  6028                           	psect	text10
  6029     0803                     __ptext10:	
  6030 ;; *************** function _fputc *****************
  6031 ;; Defined at:
  6032 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;  c               2    0[BANK1 ] int 
  6035 ;;  fp              1    2[BANK1 ] PTR struct _IO_FILE
  6036 ;;		 -> snprintf@f(11), 
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  2    0[BANK1 ] int 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 1F/1
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6048 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6050 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6051 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6052 ;;Total ram usage:        8 bytes
  6053 ;; Hardware stack levels used: 1
  6054 ;; Hardware stack levels required when called: 11
  6055 ;; This function calls:
  6056 ;;		_putch
  6057 ;; This function is called by:
  6058 ;;		_pad
  6059 ;;		_ctoa
  6060 ;;		_vfpfcnvrt
  6061 ;;		_fputs
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065     0803                     _fputc:	
  6066                           ;psect for function _fputc
  6067                           
  6068                           
  6069                           ;incstack = 0
  6070 ;; hardware stack exceeded
  6071                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6072     0803  082A               	movf	fputc@fp^(0+128),w
  6073     0804  1D03               	btfss	3,2
  6074     0805  082A               	movf	fputc@fp^(0+128),w
  6075     0806  1D03               	btfss	3,2
  6076     0807  280C               	goto	l4170
  6077     0808  0828               	movf	fputc@c^(0+128),w
  6078     0809  3190  2085         	fcall	_putch
  6079     080B  0008               	return
  6080     080C                     l4170:
  6081     080C  082A               	movf	fputc@fp^(0+128),w
  6082     080D  3E09               	addlw	9
  6083     080E  0086               	movwf	6
  6084     080F  3001               	movlw	1	; select bank2/3
  6085     0810  0087               	movwf	7
  6086     0811  0016               	moviw fsr1++
  6087     0812  0401               	iorwf	1,w
  6088     0813  1903               	btfsc	3,2
  6089     0814  2833               	goto	l4174
  6090     0815  082A               	movf	fputc@fp^(0+128),w
  6091     0816  3E09               	addlw	9
  6092     0817  0086               	movwf	6
  6093     0818  3001               	movlw	1	; select bank2/3
  6094     0819  0087               	movwf	7
  6095     081A  3F40               	moviw [0]fsr1
  6096     081B  00AB               	movwf	??_fputc^(0+128)
  6097     081C  3F41               	moviw [1]fsr1
  6098     081D  00AC               	movwf	(??_fputc^(0+128)+1)
  6099     081E  082A               	movf	fputc@fp^(0+128),w
  6100     081F  3E02               	addlw	2
  6101     0820  0086               	movwf	6
  6102     0821  3001               	movlw	1	; select bank2/3
  6103     0822  0087               	movwf	7
  6104     0823  3F40               	moviw [0]fsr1
  6105     0824  00AD               	movwf	(??_fputc+2)^(0+128)
  6106     0825  3F41               	moviw [1]fsr1
  6107     0826  00AE               	movwf	((??_fputc+2)^(0+128)+1)
  6108     0827  082E               	movf	(??_fputc+3)^(0+128),w
  6109     0828  3A80               	xorlw	128
  6110     0829  00AF               	movwf	(??_fputc+4)^(0+128)
  6111     082A  082C               	movf	(??_fputc+1)^(0+128),w
  6112     082B  3A80               	xorlw	128
  6113     082C  022F               	subwf	(??_fputc+4)^(0+128),w
  6114     082D  1D03               	skipz
  6115     082E  2831               	goto	u3155
  6116     082F  082B               	movf	??_fputc^(0+128),w
  6117     0830  022D               	subwf	(??_fputc+2)^(0+128),w
  6118     0831                     u3155:
  6119     0831  1803               	skipnc
  6120     0832  0008               	return
  6121     0833                     l4174:
  6122     0833  0021               	movlb	1	; select bank1
  6123     0834  082A               	movf	fputc@fp^(0+128),w
  6124     0835  0086               	movwf	6
  6125     0836  3001               	movlw	1	; select bank2/3
  6126     0837  0087               	movwf	7
  6127     0838  082A               	movf	fputc@fp^(0+128),w
  6128     0839  3E02               	addlw	2
  6129     083A  0084               	movwf	4
  6130     083B  3001               	movlw	1	; select bank2/3
  6131     083C  0085               	movwf	5
  6132     083D  0800               	movf	0,w
  6133     083E  0701               	addwf	1,w
  6134     083F  00AB               	movwf	??_fputc^(0+128)
  6135     0840  082B               	movf	??_fputc^(0+128),w
  6136     0841  0086               	movwf	6
  6137     0842  3001               	movlw	1	; select bank2/3
  6138     0843  0087               	movwf	7
  6139     0844  0828               	movf	fputc@c^(0+128),w
  6140     0845  0081               	movwf	1
  6141     0846  082A               	movf	fputc@fp^(0+128),w
  6142     0847  3E02               	addlw	2
  6143     0848  0086               	movwf	6
  6144     0849  3001               	movlw	1	; select bank2/3
  6145     084A  0087               	movwf	7
  6146     084B  3001               	movlw	1
  6147     084C  0781               	addwf	1,f
  6148     084D  3141               	addfsr 1,1
  6149     084E  1803               	skipnc
  6150     084F  0A81               	incf	1,f
  6151     0850  0008               	return
  6152     0851                     __end_of_fputc:
  6153                           
  6154                           	psect	text11
  6155     1085                     __ptext11:	
  6156 ;; *************** function _putch *****************
  6157 ;; Defined at:
  6158 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  c               1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  c               1    0[COMMON] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      void 
  6165 ;; Registers used:
  6166 ;;		wreg
  6167 ;; Tracked objects:
  6168 ;;		On entry : 1F/1
  6169 ;;		On exit  : 1F/1
  6170 ;;		Unchanged: 1F/0
  6171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;Total ram usage:        0 bytes
  6177 ;; Hardware stack levels used: 1
  6178 ;; Hardware stack levels required when called: 10
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_fputc
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186     1085                     _putch:	
  6187                           ;psect for function _putch
  6188                           
  6189                           
  6190                           ;incstack = 0
  6191 ;; hardware stack exceeded
  6192                           ; Regs used in _putch: [wreg]
  6193     1085  0008               	return
  6194     1086                     __end_of_putch:
  6195                           
  6196                           	psect	text12
  6197     1C6C                     __ptext12:	
  6198 ;; *************** function _SysTime_Init *****************
  6199 ;; Defined at:
  6200 ;;		line 12 in file "systime.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;		None
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;		None
  6205 ;; Return value:  Size  Location     Type
  6206 ;;                  1    wreg      void 
  6207 ;; Registers used:
  6208 ;;		wreg, status,2, status,0, pclath, cstack
  6209 ;; Tracked objects:
  6210 ;;		On entry : 1F/0
  6211 ;;		On exit  : 1F/0
  6212 ;;		Unchanged: 0/0
  6213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;Total ram usage:        0 bytes
  6219 ;; Hardware stack levels used: 1
  6220 ;; Hardware stack levels required when called: 11
  6221 ;; This function calls:
  6222 ;;		_TMR2_SetInterruptHandler
  6223 ;;		_TMR2_StartTimer
  6224 ;; This function is called by:
  6225 ;;		_main
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229     1C6C                     _SysTime_Init:	
  6230                           ;psect for function _SysTime_Init
  6231                           
  6232                           
  6233                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  6237     1C6C  304E               	movlw	low _SysTimeInterrupt
  6238     1C6D  0021               	movlb	1	; select bank1
  6239     1C6E  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6240     1C6F  301C               	movlw	high _SysTimeInterrupt
  6241     1C70  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6242     1C71  319C  2446  319C   	fcall	_TMR2_SetInterruptHandler
  6243                           
  6244                           ;systime.c: 15:     TMR2_StartTimer();
  6245     1C74  3188  2000         	fcall	_TMR2_StartTimer
  6246     1C76  0008               	return
  6247     1C77                     __end_of_SysTime_Init:
  6248                           
  6249                           	psect	text13
  6250     0800                     __ptext13:	
  6251 ;; *************** function _TMR2_StartTimer *****************
  6252 ;; Defined at:
  6253 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;		None
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;		None
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      void 
  6260 ;; Registers used:
  6261 ;;		None
  6262 ;; Tracked objects:
  6263 ;;		On entry : 1F/3
  6264 ;;		On exit  : 1F/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;Total ram usage:        0 bytes
  6272 ;; Hardware stack levels used: 1
  6273 ;; Hardware stack levels required when called: 10
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_SysTime_Init
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281     0800                     _TMR2_StartTimer:	
  6282                           ;psect for function _TMR2_StartTimer
  6283                           
  6284                           
  6285                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  6286                           
  6287                           ;incstack = 0
  6288                           ; Regs used in _TMR2_StartTimer: []
  6289     0800  0020               	movlb	0	; select bank0
  6290     0801  151C               	bsf	28,2	;volatile
  6291     0802  0008               	return
  6292     0803                     __end_of_TMR2_StartTimer:
  6293                           
  6294                           	psect	text14
  6295     1D2D                     __ptext14:	
  6296 ;; *************** function _SYSTEM_Initialize *****************
  6297 ;; Defined at:
  6298 ;;		line 49 in file "mcc_generated_files/mcc.c"
  6299 ;; Parameters:    Size  Location     Type
  6300 ;;		None
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;		None
  6303 ;; Return value:  Size  Location     Type
  6304 ;;                  1    wreg      void 
  6305 ;; Registers used:
  6306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6307 ;; Tracked objects:
  6308 ;;		On entry : B1F/0
  6309 ;;		On exit  : 1F/0
  6310 ;;		Unchanged: 0/0
  6311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;Total ram usage:        0 bytes
  6317 ;; Hardware stack levels used: 1
  6318 ;; Hardware stack levels required when called: 12
  6319 ;; This function calls:
  6320 ;;		_EUSART_Initialize
  6321 ;;		_OSCILLATOR_Initialize
  6322 ;;		_PIN_MANAGER_Initialize
  6323 ;;		_TMR2_Initialize
  6324 ;;		_USBDeviceAttach
  6325 ;;		_USBDeviceInit
  6326 ;;		_WDT_Initialize
  6327 ;; This function is called by:
  6328 ;;		_main
  6329 ;; This function uses a non-reentrant model
  6330 ;;
  6331                           
  6332     1D2D                     _SYSTEM_Initialize:	
  6333                           ;psect for function _SYSTEM_Initialize
  6334                           
  6335                           
  6336                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  6337                           
  6338                           ;incstack = 0
  6339                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6340     1D2D  319F  27D0  319D   	fcall	_PIN_MANAGER_Initialize
  6341                           
  6342                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  6343     1D30  319C  24C3  319D   	fcall	_OSCILLATOR_Initialize
  6344                           
  6345                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  6346     1D33  319B  23F5  319D   	fcall	_WDT_Initialize
  6347                           
  6348                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  6349     1D36  319C  24E1  319D   	fcall	_TMR2_Initialize
  6350                           
  6351                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  6352     1D39  3191  21CF  319D   	fcall	_EUSART_Initialize
  6353                           
  6354                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  6355     1D3C  318D  25E5  319D   	fcall	_USBDeviceInit
  6356                           
  6357                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  6358     1D3F  319D  25CF         	fcall	_USBDeviceAttach
  6359     1D41  0008               	return
  6360     1D42                     __end_of_SYSTEM_Initialize:
  6361                           
  6362                           	psect	text15
  6363     1BF5                     __ptext15:	
  6364 ;; *************** function _WDT_Initialize *****************
  6365 ;; Defined at:
  6366 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg
  6375 ;; Tracked objects:
  6376 ;;		On entry : 1F/1
  6377 ;;		On exit  : 1F/1
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used: 1
  6386 ;; Hardware stack levels required when called: 10
  6387 ;; This function calls:
  6388 ;;		Nothing
  6389 ;; This function is called by:
  6390 ;;		_SYSTEM_Initialize
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394     1BF5                     _WDT_Initialize:	
  6395                           ;psect for function _WDT_Initialize
  6396                           
  6397                           
  6398                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  6399                           
  6400                           ;incstack = 0
  6401                           ; Regs used in _WDT_Initialize: [wreg]
  6402     1BF5  3016               	movlw	22
  6403     1BF6  0097               	movwf	23	;volatile
  6404     1BF7  0008               	return
  6405     1BF8                     __end_of_WDT_Initialize:
  6406                           
  6407                           	psect	text16
  6408     0DE5                     __ptext16:	
  6409 ;; *************** function _USBDeviceInit *****************
  6410 ;; Defined at:
  6411 ;;		line 281 in file "usb/usb_device.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  p               2    4[BANK1 ] PTR unsigned char 
  6416 ;;		 -> UEP1(1), 
  6417 ;;  i               1    6[BANK1 ] unsigned char 
  6418 ;;  i               1    7[BANK1 ] unsigned char 
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6423 ;; Tracked objects:
  6424 ;;		On entry : 1F/1
  6425 ;;		On exit  : 1F/0
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6432 ;;Total ram usage:        8 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 10
  6435 ;; This function calls:
  6436 ;;		Nothing
  6437 ;; This function is called by:
  6438 ;;		_SYSTEM_Initialize
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442     0DE5                     _USBDeviceInit:	
  6443                           ;psect for function _USBDeviceInit
  6444                           
  6445                           
  6446                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  6450     0DE5  1112               	bcf	18,2	;volatile
  6451                           
  6452                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  6453     0DE6  003D               	movlb	29	; select bank29
  6454     0DE7  0193               	clrf	19	;volatile
  6455                           
  6456                           ;usb/usb_device.c: 295:     {UIR = 0;};
  6457     0DE8  0190               	clrf	16	;volatile
  6458                           
  6459                           ;usb/usb_device.c: 298:     UEP0 = 0;
  6460     0DE9  0198               	clrf	24	;volatile
  6461                           
  6462                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  6463     0DEA  300E               	movlw	14
  6464     0DEB  0021               	movlb	1	; select bank1
  6465     0DEC  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  6466     0DED  3099               	movlw	153
  6467     0DEE  00AC               	movwf	USBDeviceInit@p^(0+128)
  6468     0DEF  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  6469     0DF0                     l5312:
  6470     0DF0  082C               	movf	USBDeviceInit@p^(0+128),w
  6471     0DF1  0086               	movwf	6
  6472     0DF2  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  6473     0DF3  0087               	movwf	7
  6474     0DF4  0181               	clrf	1
  6475     0DF5  3001               	movlw	1
  6476     0DF6  07AC               	addwf	USBDeviceInit@p^(0+128),f
  6477     0DF7  3000               	movlw	0
  6478     0DF8  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  6479     0DF9  3001               	movlw	1
  6480     0DFA  00A8               	movwf	??_USBDeviceInit^(0+128)
  6481     0DFB  0828               	movf	??_USBDeviceInit^(0+128),w
  6482     0DFC  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  6483     0DFD  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  6484     0DFE  1903               	btfsc	3,2
  6485     0DFF  2DF0               	goto	l5312
  6486                           
  6487                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  6488     0E00  3016               	movlw	22
  6489     0E01  003D               	movlb	29	; select bank29
  6490     0E02  0091               	movwf	17	;volatile
  6491     0E03  309F               	movlw	159
  6492     0E04  0097               	movwf	23	;volatile
  6493     0E05  307B               	movlw	123
  6494     0E06  0092               	movwf	18	;volatile
  6495                           
  6496                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  6497     0E07  0021               	movlb	1	; select bank1
  6498     0E08  01AF               	clrf	USBDeviceInit@i^(0+128)
  6499     0E09                     l5328:
  6500                           
  6501                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  6502     0E09  082F               	movf	USBDeviceInit@i^(0+128),w
  6503     0E0A  00A8               	movwf	??_USBDeviceInit^(0+128)
  6504     0E0B  3001               	movlw	1
  6505     0E0C                     u4615:
  6506     0E0C  35A8               	lslf	??_USBDeviceInit^(0+128),f
  6507     0E0D  3EFF               	addlw	-1
  6508     0E0E  1D03               	skipz
  6509     0E0F  2E0C               	goto	u4615
  6510     0E10  3528               	lslf	??_USBDeviceInit^(0+128),w
  6511     0E11  3E20               	addlw	32
  6512     0E12  0086               	movwf	6
  6513     0E13  0187               	clrf	7
  6514     0E14  3000               	movlw	0
  6515     0E15  3FC0               	movwi [0]fsr1
  6516     0E16  3000               	movlw	0
  6517     0E17  3FC1               	movwi [1]fsr1
  6518     0E18  3FC2               	movwi [2]fsr1
  6519     0E19  3FC3               	movwi [3]fsr1
  6520                           
  6521                           ;usb/usb_device.c: 314:     }
  6522     0E1A  3001               	movlw	1
  6523     0E1B  00A8               	movwf	??_USBDeviceInit^(0+128)
  6524     0E1C  0828               	movf	??_USBDeviceInit^(0+128),w
  6525     0E1D  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6526     0E1E  3008               	movlw	8
  6527     0E1F  022F               	subwf	USBDeviceInit@i^(0+128),w
  6528     0E20  1C03               	skipc
  6529     0E21  2E09               	goto	l5328
  6530                           
  6531                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  6532     0E22  003D               	movlb	29	; select bank29
  6533     0E23  170E               	bsf	14,6	;volatile
  6534                           
  6535                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  6536     0E24  0196               	clrf	22	;volatile
  6537                           
  6538                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  6539     0E25  120E               	bcf	14,4	;volatile
  6540                           
  6541                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  6542     0E26  130E               	bcf	14,6	;volatile
  6543     0E27                     l5340:
  6544                           
  6545                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  6546     0E27  30F7               	movlw	247
  6547     0E28  0021               	movlb	1	; select bank1
  6548     0E29  00A8               	movwf	??_USBDeviceInit^(0+128)
  6549     0E2A  0828               	movf	??_USBDeviceInit^(0+128),w
  6550     0E2B  003D               	movlb	29	; select bank29
  6551     0E2C  0590               	andwf	16,f	;volatile
  6552                           
  6553                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  6554     0E2D  0021               	movlb	1	; select bank1
  6555     0E2E  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
  6556                           
  6557                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  6558     0E2F  0022               	movlb	2	; select bank2
  6559     0E30  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  6560                           
  6561                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  6562     0E31  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  6563     0E32  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  6564                           
  6565                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  6566     0E33  003D               	movlb	29	; select bank29
  6567     0E34  1990               	btfsc	16,3	;volatile
  6568     0E35  2E27               	goto	l5340
  6569                           
  6570                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  6571     0E36  3001               	movlw	1
  6572     0E37  0022               	movlb	2	; select bank2
  6573     0E38  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6574                           
  6575                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  6576     0E39  3001               	movlw	1
  6577     0E3A  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6578                           
  6579                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  6580     0E3B  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6581                           
  6582                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  6583     0E3C  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6584                           
  6585                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  6586     0E3D  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  6587                           
  6588                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  6589     0E3E  0021               	movlb	1	; select bank1
  6590     0E3F  01AF               	clrf	USBDeviceInit@i^(0+128)
  6591     0E40                     l5362:
  6592                           
  6593                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  6594     0E40  352F               	lslf	USBDeviceInit@i^(0+128),w
  6595     0E41  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6596     0E42  0086               	movwf	6
  6597     0E43  0187               	clrf	7
  6598     0E44  3000               	movlw	0
  6599     0E45  3FC0               	movwi [0]fsr1
  6600     0E46  3FC1               	movwi [1]fsr1
  6601                           
  6602                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  6603     0E47  352F               	lslf	USBDeviceInit@i^(0+128),w
  6604     0E48  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6605     0E49  0086               	movwf	6
  6606     0E4A  3001               	movlw	1	; select bank2/3
  6607     0E4B  0087               	movwf	7
  6608     0E4C  3000               	movlw	0
  6609     0E4D  3FC0               	movwi [0]fsr1
  6610     0E4E  3FC1               	movwi [1]fsr1
  6611                           
  6612                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  6613     0E4F  082F               	movf	USBDeviceInit@i^(0+128),w
  6614     0E50  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  6615     0E51  0086               	movwf	6
  6616     0E52  3001               	movlw	1	; select bank2/3
  6617     0E53  0087               	movwf	7
  6618     0E54  0181               	clrf	1
  6619                           
  6620                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  6621     0E55  082F               	movf	USBDeviceInit@i^(0+128),w
  6622     0E56  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  6623     0E57  0086               	movwf	6
  6624     0E58  3001               	movlw	1	; select bank2/3
  6625     0E59  0087               	movwf	7
  6626     0E5A  0181               	clrf	1
  6627                           
  6628                           ;usb/usb_device.c: 355:     }
  6629     0E5B  3001               	movlw	1
  6630     0E5C  00A8               	movwf	??_USBDeviceInit^(0+128)
  6631     0E5D  0828               	movf	??_USBDeviceInit^(0+128),w
  6632     0E5E  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6633     0E5F  3002               	movlw	2
  6634     0E60  022F               	subwf	USBDeviceInit@i^(0+128),w
  6635     0E61  1C03               	skipc
  6636     0E62  2E40               	goto	l5362
  6637                           
  6638                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6639     0E63  3028               	movlw	40
  6640     0E64  0020               	movlb	0	; select bank0
  6641     0E65  00E1               	movwf	_pBDTEntryIn
  6642     0E66  3000               	movlw	0
  6643     0E67  00E2               	movwf	_pBDTEntryIn+1
  6644                           
  6645                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  6646     0E68  3016               	movlw	22
  6647     0E69  003D               	movlb	29	; select bank29
  6648     0E6A  0098               	movwf	24	;volatile
  6649                           
  6650                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  6651     0E6B  3040               	movlw	64
  6652     0E6C  0021               	movlb	1	; select bank1
  6653     0E6D  00A8               	movwf	??_USBDeviceInit^(0+128)
  6654     0E6E  3000               	movlw	0
  6655     0E6F  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  6656     0E70  30FF               	movlw	255
  6657     0E71  0528               	andwf	??_USBDeviceInit^(0+128),w
  6658     0E72  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  6659     0E73  307F               	movlw	127
  6660     0E74  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  6661     0E75  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  6662     0E76  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  6663     0E77  0020               	movlb	0	; select bank0
  6664     0E78  00A2               	movwf	34	;volatile
  6665     0E79  0021               	movlb	1	; select bank1
  6666     0E7A  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  6667     0E7B  0020               	movlb	0	; select bank0
  6668     0E7C  00A3               	movwf	35	;volatile
  6669                           
  6670                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  6671     0E7D  3008               	movlw	8
  6672     0E7E  00A1               	movwf	33	;volatile
  6673                           
  6674                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  6675     0E7F  3004               	movlw	4
  6676     0E80  00A0               	movwf	32	;volatile
  6677                           
  6678                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  6679     0E81  17A0               	bsf	32,7	;volatile
  6680                           
  6681                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  6682     0E82  01EF               	clrf	_USBActiveConfiguration	;volatile
  6683                           
  6684                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  6685     0E83  3000               	movlw	0
  6686     0E84  0023               	movlb	3	; select bank3
  6687     0E85  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  6688     0E86  3000               	movlw	0
  6689     0E87  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  6690     0E88  3000               	movlw	0
  6691     0E89  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  6692     0E8A  3000               	movlw	0
  6693     0E8B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  6694                           
  6695                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  6696     0E8C  0022               	movlb	2	; select bank2
  6697     0E8D  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  6698                           
  6699                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  6700     0E8E  0020               	movlb	0	; select bank0
  6701     0E8F  01EB               	clrf	_USBDeviceState	;volatile
  6702     0E90  0008               	return
  6703     0E91                     __end_of_USBDeviceInit:
  6704                           
  6705                           	psect	text17
  6706     1DCF                     __ptext17:	
  6707 ;; *************** function _USBDeviceAttach *****************
  6708 ;; Defined at:
  6709 ;;		line 1356 in file "usb/usb_device.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 1F/0
  6720 ;;		On exit  : 1F/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used: 1
  6729 ;; Hardware stack levels required when called: 10
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_SYSTEM_Initialize
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737     1DCF                     _USBDeviceAttach:	
  6738                           ;psect for function _USBDeviceAttach
  6739                           
  6740                           
  6741                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  6745     1DCF  086B               	movf	_USBDeviceState,w
  6746     1DD0  1D03               	btfss	3,2
  6747     1DD1  0008               	return
  6748                           
  6749                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  6750     1DD2  003D               	movlb	29	; select bank29
  6751     1DD3  018E               	clrf	14	;volatile
  6752                           
  6753                           ;usb/usb_device.c: 1367:             UIE = 0;
  6754     1DD4  0192               	clrf	18	;volatile
  6755                           
  6756                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  6757     1DD5  3016               	movlw	22
  6758     1DD6  0091               	movwf	17	;volatile
  6759     1DD7  309F               	movlw	159
  6760     1DD8  0097               	movwf	23	;volatile
  6761     1DD9  307B               	movlw	123
  6762     1DDA  0092               	movwf	18	;volatile
  6763                           
  6764                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  6765     1DDB  0021               	movlb	1	; select bank1
  6766     1DDC  1512               	bsf	18,2	;volatile
  6767     1DDD  170B               	bsf	11,6	;volatile
  6768     1DDE  178B               	bsf	11,7	;volatile
  6769     1DDF                     l541:	
  6770                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6771                           
  6772     1DDF  003D               	movlb	29	; select bank29
  6773     1DE0  198E               	btfsc	14,3	;volatile
  6774     1DE1  2DE4               	goto	l5404
  6775     1DE2  158E               	bsf	14,3	;volatile
  6776     1DE3  2DDF               	goto	l541
  6777     1DE4                     l5404:
  6778                           
  6779                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  6780     1DE4  3001               	movlw	1
  6781     1DE5  0020               	movlb	0	; select bank0
  6782     1DE6  00EB               	movwf	_USBDeviceState	;volatile
  6783     1DE7  0008               	return
  6784     1DE8                     __end_of_USBDeviceAttach:
  6785                           
  6786                           	psect	text18
  6787     1CE1                     __ptext18:	
  6788 ;; *************** function _TMR2_Initialize *****************
  6789 ;; Defined at:
  6790 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;		None
  6795 ;; Return value:  Size  Location     Type
  6796 ;;                  1    wreg      void 
  6797 ;; Registers used:
  6798 ;;		wreg, status,2, status,0, pclath, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 1F/1
  6801 ;;		On exit  : 1F/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6808 ;;Total ram usage:        0 bytes
  6809 ;; Hardware stack levels used: 1
  6810 ;; Hardware stack levels required when called: 11
  6811 ;; This function calls:
  6812 ;;		_TMR2_SetInterruptHandler
  6813 ;; This function is called by:
  6814 ;;		_SYSTEM_Initialize
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818     1CE1                     _TMR2_Initialize:	
  6819                           ;psect for function _TMR2_Initialize
  6820                           
  6821                           
  6822                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  6823                           
  6824                           ;incstack = 0
  6825                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6826     1CE1  305D               	movlw	93
  6827     1CE2  0020               	movlb	0	; select bank0
  6828     1CE3  009B               	movwf	27	;volatile
  6829                           
  6830                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  6831     1CE4  019A               	clrf	26	;volatile
  6832                           
  6833                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  6834     1CE5  1091               	bcf	17,1	;volatile
  6835                           
  6836                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  6837     1CE6  0021               	movlb	1	; select bank1
  6838     1CE7  1491               	bsf	17,1	;volatile
  6839                           
  6840                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  6841     1CE8  3084               	movlw	low _TMR2_DefaultInterruptHandler
  6842     1CE9  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6843     1CEA  3010               	movlw	high _TMR2_DefaultInterruptHandler
  6844     1CEB  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6845     1CEC  319C  2446         	fcall	_TMR2_SetInterruptHandler
  6846                           
  6847                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  6848     1CEE  300F               	movlw	15
  6849     1CEF  0020               	movlb	0	; select bank0
  6850     1CF0  009C               	movwf	28	;volatile
  6851     1CF1  0008               	return
  6852     1CF2                     __end_of_TMR2_Initialize:
  6853                           
  6854                           	psect	text19
  6855     1C46                     __ptext19:	
  6856 ;; *************** function _TMR2_SetInterruptHandler *****************
  6857 ;; Defined at:
  6858 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  6861 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg
  6868 ;; Tracked objects:
  6869 ;;		On entry : 1F/1
  6870 ;;		On exit  : 1F/3
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        2 bytes
  6878 ;; Hardware stack levels used: 1
  6879 ;; Hardware stack levels required when called: 10
  6880 ;; This function calls:
  6881 ;;		Nothing
  6882 ;; This function is called by:
  6883 ;;		_TMR2_Initialize
  6884 ;;		_SysTime_Init
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888     1C46                     _TMR2_SetInterruptHandler:	
  6889                           ;psect for function _TMR2_SetInterruptHandler
  6890                           
  6891                           
  6892                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6896     1C46  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6897     1C47  0023               	movlb	3	; select bank3
  6898     1C48  00D8               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
  6899     1C49  0021               	movlb	1	; select bank1
  6900     1C4A  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  6901     1C4B  0023               	movlb	3	; select bank3
  6902     1C4C  00D7               	movwf	_TMR2_InterruptHandler^(0+384)
  6903     1C4D  0008               	return
  6904     1C4E                     __end_of_TMR2_SetInterruptHandler:
  6905                           
  6906                           	psect	text20
  6907     1FD0                     __ptext20:	
  6908 ;; *************** function _PIN_MANAGER_Initialize *****************
  6909 ;; Defined at:
  6910 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      void 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2, status,0, pclath, cstack
  6919 ;; Tracked objects:
  6920 ;;		On entry : B1F/0
  6921 ;;		On exit  : 1F/3
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used: 1
  6930 ;; Hardware stack levels required when called: 11
  6931 ;; This function calls:
  6932 ;;		_IOCAF4_SetInterruptHandler
  6933 ;;		_IOCAF5_SetInterruptHandler
  6934 ;; This function is called by:
  6935 ;;		_SYSTEM_Initialize
  6936 ;; This function uses a non-reentrant model
  6937 ;;
  6938                           
  6939     1FD0                     _PIN_MANAGER_Initialize:	
  6940                           ;psect for function _PIN_MANAGER_Initialize
  6941                           
  6942                           
  6943                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  6944                           
  6945                           ;incstack = 0
  6946                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6947     1FD0  0022               	movlb	2	; select bank2
  6948     1FD1  018C               	clrf	12	;volatile
  6949                           
  6950                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  6951     1FD2  018D               	clrf	13	;volatile
  6952                           
  6953                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  6954     1FD3  018E               	clrf	14	;volatile
  6955                           
  6956                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  6957     1FD4  3030               	movlw	48
  6958     1FD5  0021               	movlb	1	; select bank1
  6959     1FD6  008C               	movwf	12	;volatile
  6960                           
  6961                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  6962     1FD7  3070               	movlw	112
  6963     1FD8  008D               	movwf	13	;volatile
  6964                           
  6965                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  6966     1FD9  30FF               	movlw	255
  6967     1FDA  008E               	movwf	14	;volatile
  6968                           
  6969                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  6970     1FDB  30CF               	movlw	207
  6971     1FDC  0023               	movlb	3	; select bank3
  6972     1FDD  008E               	movwf	14	;volatile
  6973                           
  6974                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  6975     1FDE  018D               	clrf	13	;volatile
  6976                           
  6977                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  6978     1FDF  018C               	clrf	12	;volatile
  6979                           
  6980                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  6981     1FE0  0024               	movlb	4	; select bank4
  6982     1FE1  018D               	clrf	13	;volatile
  6983                           
  6984                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  6985     1FE2  3030               	movlw	48
  6986     1FE3  008C               	movwf	12	;volatile
  6987                           
  6988                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  6989     1FE4  0021               	movlb	1	; select bank1
  6990     1FE5  1395               	bcf	21,7	;volatile
  6991                           
  6992                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  6993     1FE6  0022               	movlb	2	; select bank2
  6994     1FE7  019D               	clrf	29	;volatile
  6995                           
  6996                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  6997     1FE8  0027               	movlb	7	; select bank7
  6998     1FE9  1213               	bcf	19,4	;volatile
  6999                           
  7000                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  7001     1FEA  1293               	bcf	19,5	;volatile
  7002                           
  7003                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  7004     1FEB  1612               	bsf	18,4	;volatile
  7005                           
  7006                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  7007     1FEC  1692               	bsf	18,5	;volatile
  7008                           
  7009                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  7010     1FED  1211               	bcf	17,4	;volatile
  7011                           
  7012                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  7013     1FEE  1291               	bcf	17,5	;volatile
  7014                           
  7015                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  7016     1FEF  30EA               	movlw	low _IOCAF4_DefaultInterruptHandler
  7017     1FF0  0021               	movlb	1	; select bank1
  7018     1FF1  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7019     1FF2  301B               	movlw	high _IOCAF4_DefaultInterruptHandler
  7020     1FF3  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7021     1FF4  319C  240E  319F   	fcall	_IOCAF4_SetInterruptHandler
  7022                           
  7023                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  7024     1FF7  30EB               	movlw	low _IOCAF5_DefaultInterruptHandler
  7025     1FF8  0021               	movlb	1	; select bank1
  7026     1FF9  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7027     1FFA  301B               	movlw	high _IOCAF5_DefaultInterruptHandler
  7028     1FFB  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7029     1FFC  319C  2416         	fcall	_IOCAF5_SetInterruptHandler
  7030                           
  7031                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  7032     1FFE  158B               	bsf	11,3	;volatile
  7033     1FFF  0008               	return
  7034     2000                     __end_of_PIN_MANAGER_Initialize:
  7035                           
  7036                           	psect	text21
  7037     1CC3                     __ptext21:	
  7038 ;; *************** function _OSCILLATOR_Initialize *****************
  7039 ;; Defined at:
  7040 ;;		line 60 in file "mcc_generated_files/mcc.c"
  7041 ;; Parameters:    Size  Location     Type
  7042 ;;		None
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, status,2
  7049 ;; Tracked objects:
  7050 ;;		On entry : 1F/3
  7051 ;;		On exit  : 1F/1
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7058 ;;Total ram usage:        0 bytes
  7059 ;; Hardware stack levels used: 1
  7060 ;; Hardware stack levels required when called: 10
  7061 ;; This function calls:
  7062 ;;		Nothing
  7063 ;; This function is called by:
  7064 ;;		_SYSTEM_Initialize
  7065 ;; This function uses a non-reentrant model
  7066 ;;
  7067                           
  7068     1CC3                     _OSCILLATOR_Initialize:	
  7069                           ;psect for function _OSCILLATOR_Initialize
  7070                           
  7071                           
  7072                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  7073                           
  7074                           ;incstack = 0
  7075                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7076     1CC3  30FC               	movlw	252
  7077     1CC4  0021               	movlb	1	; select bank1
  7078     1CC5  0099               	movwf	25	;volatile
  7079                           
  7080                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  7081     1CC6  0198               	clrf	24	;volatile
  7082                           
  7083                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  7084     1CC7  3090               	movlw	144
  7085     1CC8  0027               	movlb	7	; select bank7
  7086     1CC9  009B               	movwf	27	;volatile
  7087                           
  7088                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  7089     1CCA  0022               	movlb	2	; select bank2
  7090     1CCB  0196               	clrf	22	;volatile
  7091     1CCC                     l110:	
  7092                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  7093                           
  7094                           
  7095                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  7096     1CCC  0021               	movlb	1	; select bank1
  7097     1CCD  1B1A               	btfsc	26,6	;volatile
  7098     1CCE  0008               	return
  7099     1CCF  2CCC               	goto	l110
  7100     1CD0                     __end_of_OSCILLATOR_Initialize:
  7101                           
  7102                           	psect	text22
  7103     11CF                     __ptext22:	
  7104 ;; *************** function _EUSART_Initialize *****************
  7105 ;; Defined at:
  7106 ;;		line 88 in file "mcc_generated_files/eusart.c"
  7107 ;; Parameters:    Size  Location     Type
  7108 ;;		None
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;		None
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      void 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 1F/0
  7117 ;;		On exit  : 1F/1
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;Total ram usage:        0 bytes
  7125 ;; Hardware stack levels used: 1
  7126 ;; Hardware stack levels required when called: 11
  7127 ;; This function calls:
  7128 ;;		_EUSART_SetErrorHandler
  7129 ;;		_EUSART_SetFramingErrorHandler
  7130 ;;		_EUSART_SetOverrunErrorHandler
  7131 ;;		_EUSART_SetRxInterruptHandler
  7132 ;;		_EUSART_SetTxInterruptHandler
  7133 ;; This function is called by:
  7134 ;;		_SYSTEM_Initialize
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138     11CF                     _EUSART_Initialize:	
  7139                           ;psect for function _EUSART_Initialize
  7140                           
  7141                           
  7142                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7146     11CF  0021               	movlb	1	; select bank1
  7147     11D0  1291               	bcf	17,5	;volatile
  7148                           
  7149                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7150     11D1  30DF               	movlw	low _EUSART_Receive_ISR
  7151     11D2  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  7152     11D3  3010               	movlw	high _EUSART_Receive_ISR
  7153     11D4  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  7154     11D5  319C  2436  3191   	fcall	_EUSART_SetRxInterruptHandler
  7155                           
  7156                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  7157     11D8  0021               	movlb	1	; select bank1
  7158     11D9  1211               	bcf	17,4	;volatile
  7159                           
  7160                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  7161     11DA  3072               	movlw	low _EUSART_Transmit_ISR
  7162     11DB  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  7163     11DC  301E               	movlw	high _EUSART_Transmit_ISR
  7164     11DD  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  7165     11DE  319C  243E  3191   	fcall	_EUSART_SetTxInterruptHandler
  7166                           
  7167                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  7168     11E1  3008               	movlw	8
  7169     11E2  009F               	movwf	31	;volatile
  7170                           
  7171                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  7172     11E3  3090               	movlw	144
  7173     11E4  009D               	movwf	29	;volatile
  7174                           
  7175                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  7176     11E5  3024               	movlw	36
  7177     11E6  009E               	movwf	30	;volatile
  7178                           
  7179                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  7180     11E7  30E1               	movlw	225
  7181     11E8  009B               	movwf	27	;volatile
  7182                           
  7183                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  7184     11E9  3004               	movlw	4
  7185     11EA  009C               	movwf	28	;volatile
  7186                           
  7187                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7188     11EB  30E9               	movlw	low _EUSART_DefaultFramingErrorHandler
  7189     11EC  0021               	movlb	1	; select bank1
  7190     11ED  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  7191     11EE  301B               	movlw	high _EUSART_DefaultFramingErrorHandler
  7192     11EF  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  7193     11F0  319C  2426  3191   	fcall	_EUSART_SetFramingErrorHandler
  7194                           
  7195                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7196     11F3  30EF               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7197     11F4  0021               	movlb	1	; select bank1
  7198     11F5  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  7199     11F6  301B               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7200     11F7  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  7201     11F8  319C  242E  3191   	fcall	_EUSART_SetOverrunErrorHandler
  7202                           
  7203                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7204     11FB  30EC               	movlw	low _EUSART_DefaultErrorHandler
  7205     11FC  0021               	movlb	1	; select bank1
  7206     11FD  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  7207     11FE  301B               	movlw	high _EUSART_DefaultErrorHandler
  7208     11FF  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  7209     1200  319C  241E         	fcall	_EUSART_SetErrorHandler
  7210                           
  7211                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  7212     1202  01DE               	clrf	_eusartRxLastError^(0+384)	;volatile
  7213                           
  7214                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  7215     1203  0022               	movlb	2	; select bank2
  7216     1204  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  7217                           
  7218                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  7219     1205  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
  7220                           
  7221                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7222     1206  3008               	movlw	8
  7223     1207  0020               	movlb	0	; select bank0
  7224     1208  00ED               	movwf	_eusartTxBufferRemaining	;volatile
  7225                           
  7226                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  7227     1209  01EC               	clrf	_eusartRxHead	;volatile
  7228                           
  7229                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  7230     120A  0023               	movlb	3	; select bank3
  7231     120B  01E0               	clrf	_eusartRxTail^(0+384)	;volatile
  7232                           
  7233                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  7234     120C  01DF               	clrf	_eusartRxCount^(0+384)	;volatile
  7235                           
  7236                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  7237     120D  0021               	movlb	1	; select bank1
  7238     120E  1691               	bsf	17,5	;volatile
  7239     120F  0008               	return
  7240     1210                     __end_of_EUSART_Initialize:
  7241                           
  7242                           	psect	text23
  7243     1C3E                     __ptext23:	
  7244 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7245 ;; Defined at:
  7246 ;;		line 276 in file "mcc_generated_files/eusart.c"
  7247 ;; Parameters:    Size  Location     Type
  7248 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7249 ;;		 -> EUSART_Transmit_ISR(1), 
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg
  7256 ;; Tracked objects:
  7257 ;;		On entry : 1F/1
  7258 ;;		On exit  : 1F/3
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7261 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7264 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7265 ;;Total ram usage:        2 bytes
  7266 ;; Hardware stack levels used: 1
  7267 ;; Hardware stack levels required when called: 10
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_EUSART_Initialize
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275     1C3E                     _EUSART_SetTxInterruptHandler:	
  7276                           ;psect for function _EUSART_SetTxInterruptHandler
  7277                           
  7278                           
  7279                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7283     1C3E  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  7284     1C3F  0023               	movlb	3	; select bank3
  7285     1C40  00DC               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384)
  7286     1C41  0021               	movlb	1	; select bank1
  7287     1C42  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  7288     1C43  0023               	movlb	3	; select bank3
  7289     1C44  00DB               	movwf	_EUSART_TxDefaultInterruptHandler^(0+384)
  7290     1C45  0008               	return
  7291     1C46                     __end_of_EUSART_SetTxInterruptHandler:
  7292                           
  7293                           	psect	text24
  7294     1C36                     __ptext24:	
  7295 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7296 ;; Defined at:
  7297 ;;		line 280 in file "mcc_generated_files/eusart.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7300 ;;		 -> EUSART_Receive_ISR(1), 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;                  1    wreg      void 
  7305 ;; Registers used:
  7306 ;;		wreg
  7307 ;; Tracked objects:
  7308 ;;		On entry : 1F/1
  7309 ;;		On exit  : 1F/3
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7312 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7316 ;;Total ram usage:        2 bytes
  7317 ;; Hardware stack levels used: 1
  7318 ;; Hardware stack levels required when called: 10
  7319 ;; This function calls:
  7320 ;;		Nothing
  7321 ;; This function is called by:
  7322 ;;		_EUSART_Initialize
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326     1C36                     _EUSART_SetRxInterruptHandler:	
  7327                           ;psect for function _EUSART_SetRxInterruptHandler
  7328                           
  7329                           
  7330                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7334     1C36  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  7335     1C37  0023               	movlb	3	; select bank3
  7336     1C38  00DA               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384)
  7337     1C39  0021               	movlb	1	; select bank1
  7338     1C3A  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  7339     1C3B  0023               	movlb	3	; select bank3
  7340     1C3C  00D9               	movwf	_EUSART_RxDefaultInterruptHandler^(0+384)
  7341     1C3D  0008               	return
  7342     1C3E                     __end_of_EUSART_SetRxInterruptHandler:
  7343                           
  7344                           	psect	text25
  7345     1C2E                     __ptext25:	
  7346 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7347 ;; Defined at:
  7348 ;;		line 268 in file "mcc_generated_files/eusart.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7351 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;		None
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg
  7358 ;; Tracked objects:
  7359 ;;		On entry : 1F/1
  7360 ;;		On exit  : 1F/3
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7363 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used: 1
  7369 ;; Hardware stack levels required when called: 10
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_EUSART_Initialize
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377     1C2E                     _EUSART_SetOverrunErrorHandler:	
  7378                           ;psect for function _EUSART_SetOverrunErrorHandler
  7379                           
  7380                           
  7381                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  7382                           
  7383                           ;incstack = 0
  7384                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7385     1C2E  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  7386     1C2F  0023               	movlb	3	; select bank3
  7387     1C30  00D4               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  7388     1C31  0021               	movlb	1	; select bank1
  7389     1C32  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  7390     1C33  0023               	movlb	3	; select bank3
  7391     1C34  00D3               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  7392     1C35  0008               	return
  7393     1C36                     __end_of_EUSART_SetOverrunErrorHandler:
  7394                           
  7395                           	psect	text26
  7396     1C26                     __ptext26:	
  7397 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7398 ;; Defined at:
  7399 ;;		line 264 in file "mcc_generated_files/eusart.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7402 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;		None
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      void 
  7407 ;; Registers used:
  7408 ;;		wreg
  7409 ;; Tracked objects:
  7410 ;;		On entry : 1F/1
  7411 ;;		On exit  : 1F/3
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7414 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;Total ram usage:        2 bytes
  7419 ;; Hardware stack levels used: 1
  7420 ;; Hardware stack levels required when called: 10
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_EUSART_Initialize
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428     1C26                     _EUSART_SetFramingErrorHandler:	
  7429                           ;psect for function _EUSART_SetFramingErrorHandler
  7430                           
  7431                           
  7432                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  7433                           
  7434                           ;incstack = 0
  7435                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7436     1C26  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  7437     1C27  0023               	movlb	3	; select bank3
  7438     1C28  00D6               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  7439     1C29  0021               	movlb	1	; select bank1
  7440     1C2A  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  7441     1C2B  0023               	movlb	3	; select bank3
  7442     1C2C  00D5               	movwf	_EUSART_FramingErrorHandler^(0+384)
  7443     1C2D  0008               	return
  7444     1C2E                     __end_of_EUSART_SetFramingErrorHandler:
  7445                           
  7446                           	psect	text27
  7447     1C1E                     __ptext27:	
  7448 ;; *************** function _EUSART_SetErrorHandler *****************
  7449 ;; Defined at:
  7450 ;;		line 272 in file "mcc_generated_files/eusart.c"
  7451 ;; Parameters:    Size  Location     Type
  7452 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7453 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;		None
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg
  7460 ;; Tracked objects:
  7461 ;;		On entry : 1F/1
  7462 ;;		On exit  : 1F/3
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7465 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used: 1
  7471 ;; Hardware stack levels required when called: 10
  7472 ;; This function calls:
  7473 ;;		Nothing
  7474 ;; This function is called by:
  7475 ;;		_EUSART_Initialize
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479     1C1E                     _EUSART_SetErrorHandler:	
  7480                           ;psect for function _EUSART_SetErrorHandler
  7481                           
  7482                           
  7483                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  7484                           
  7485                           ;incstack = 0
  7486                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7487     1C1E  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  7488     1C1F  0023               	movlb	3	; select bank3
  7489     1C20  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  7490     1C21  0021               	movlb	1	; select bank1
  7491     1C22  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  7492     1C23  0023               	movlb	3	; select bank3
  7493     1C24  00D1               	movwf	_EUSART_ErrorHandler^(0+384)
  7494     1C25  0008               	return
  7495     1C26                     __end_of_EUSART_SetErrorHandler:
  7496                           
  7497                           	psect	text28
  7498     1E1E                     __ptext28:	
  7499 ;; *************** function _PS2Keyboard_Init *****************
  7500 ;; Defined at:
  7501 ;;		line 38 in file "ps2_keyboard.c"
  7502 ;; Parameters:    Size  Location     Type
  7503 ;;		None
  7504 ;; Auto vars:     Size  Location     Type
  7505 ;;		None
  7506 ;; Return value:  Size  Location     Type
  7507 ;;                  1    wreg      void 
  7508 ;; Registers used:
  7509 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7510 ;; Tracked objects:
  7511 ;;		On entry : 1F/0
  7512 ;;		On exit  : 1F/3
  7513 ;;		Unchanged: 0/0
  7514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;Total ram usage:        0 bytes
  7520 ;; Hardware stack levels used: 1
  7521 ;; Hardware stack levels required when called: 11
  7522 ;; This function calls:
  7523 ;;		_GenericQueue_Init
  7524 ;;		_IOCAF4_SetInterruptHandler
  7525 ;;		_IOCAF5_SetInterruptHandler
  7526 ;; This function is called by:
  7527 ;;		_main
  7528 ;; This function uses a non-reentrant model
  7529 ;;
  7530                           
  7531     1E1E                     _PS2Keyboard_Init:	
  7532                           ;psect for function _PS2Keyboard_Init
  7533                           
  7534                           
  7535                           ;ps2_keyboard.c: 39:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  7536                           
  7537                           ;incstack = 0
  7538                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7539     1E1E  3091               	movlw	145
  7540     1E1F  0021               	movlb	1	; select bank1
  7541     1E20  00A8               	movwf	GenericQueue_Init@q^(0+128)
  7542     1E21  3023               	movlw	35
  7543     1E22  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  7544     1E23  3003               	movlw	3
  7545     1E24  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  7546     1E25  3000               	movlw	0
  7547     1E26  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  7548     1E27  319E  26D2  319E   	fcall	_GenericQueue_Init
  7549                           
  7550                           ;ps2_keyboard.c: 40:     IOCAF4_SetInterruptHandler(PS2KeyboardClockInterrupt);
  7551     1E2A  3044               	movlw	low _PS2KeyboardClockInterrupt
  7552     1E2B  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7553     1E2C  300F               	movlw	high _PS2KeyboardClockInterrupt
  7554     1E2D  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7555     1E2E  319C  240E  319E   	fcall	_IOCAF4_SetInterruptHandler
  7556                           
  7557                           ;ps2_keyboard.c: 41:     IOCAF5_SetInterruptHandler(PS2KeyboardDataInterrupt);
  7558     1E31  30F8               	movlw	low _PS2KeyboardDataInterrupt
  7559     1E32  0021               	movlb	1	; select bank1
  7560     1E33  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7561     1E34  301B               	movlw	high _PS2KeyboardDataInterrupt
  7562     1E35  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7563     1E36  319C  2416         	fcall	_IOCAF5_SetInterruptHandler
  7564     1E38  0008               	return
  7565     1E39                     __end_of_PS2Keyboard_Init:
  7566                           
  7567                           	psect	text29
  7568     1C16                     __ptext29:	
  7569 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  7570 ;; Defined at:
  7571 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7574 ;;		 -> PS2KeyboardDataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;		None
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      void 
  7579 ;; Registers used:
  7580 ;;		wreg
  7581 ;; Tracked objects:
  7582 ;;		On entry : 1F/1
  7583 ;;		On exit  : 1F/3
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7586 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;Total ram usage:        2 bytes
  7591 ;; Hardware stack levels used: 1
  7592 ;; Hardware stack levels required when called: 10
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_PIN_MANAGER_Initialize
  7597 ;;		_PS2Keyboard_Init
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601     1C16                     _IOCAF5_SetInterruptHandler:	
  7602                           ;psect for function _IOCAF5_SetInterruptHandler
  7603                           
  7604                           
  7605                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  7606                           
  7607                           ;incstack = 0
  7608                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  7609     1C16  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7610     1C17  0023               	movlb	3	; select bank3
  7611     1C18  00E6               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  7612     1C19  0021               	movlb	1	; select bank1
  7613     1C1A  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  7614     1C1B  0023               	movlb	3	; select bank3
  7615     1C1C  00E5               	movwf	_IOCAF5_InterruptHandler^(0+384)
  7616     1C1D  0008               	return
  7617     1C1E                     __end_of_IOCAF5_SetInterruptHandler:
  7618                           
  7619                           	psect	text30
  7620     1C0E                     __ptext30:	
  7621 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  7622 ;; Defined at:
  7623 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7626 ;;		 -> PS2KeyboardClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;		None
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      void 
  7631 ;; Registers used:
  7632 ;;		wreg
  7633 ;; Tracked objects:
  7634 ;;		On entry : 1F/1
  7635 ;;		On exit  : 1F/3
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        2 bytes
  7643 ;; Hardware stack levels used: 1
  7644 ;; Hardware stack levels required when called: 10
  7645 ;; This function calls:
  7646 ;;		Nothing
  7647 ;; This function is called by:
  7648 ;;		_PIN_MANAGER_Initialize
  7649 ;;		_PS2Keyboard_Init
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653     1C0E                     _IOCAF4_SetInterruptHandler:	
  7654                           ;psect for function _IOCAF4_SetInterruptHandler
  7655                           
  7656                           
  7657                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  7658                           
  7659                           ;incstack = 0
  7660                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  7661     1C0E  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7662     1C0F  0023               	movlb	3	; select bank3
  7663     1C10  00E8               	movwf	(_IOCAF4_InterruptHandler+1)^(0+384)
  7664     1C11  0021               	movlb	1	; select bank1
  7665     1C12  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  7666     1C13  0023               	movlb	3	; select bank3
  7667     1C14  00E7               	movwf	_IOCAF4_InterruptHandler^(0+384)
  7668     1C15  0008               	return
  7669     1C16                     __end_of_IOCAF4_SetInterruptHandler:
  7670                           
  7671                           	psect	text31
  7672     1ED2                     __ptext31:	
  7673 ;; *************** function _GenericQueue_Init *****************
  7674 ;; Defined at:
  7675 ;;		line 4 in file "generic_queue.c"
  7676 ;; Parameters:    Size  Location     Type
  7677 ;;  q               2    0[BANK1 ] PTR struct .
  7678 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  7679 ;;  element_size    2    2[BANK1 ] unsigned int 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;		None
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      void 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 1F/1
  7688 ;;		On exit  : 1F/1
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        4 bytes
  7696 ;; Hardware stack levels used: 1
  7697 ;; Hardware stack levels required when called: 10
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_PS2Keyboard_Init
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705     1ED2                     _GenericQueue_Init:	
  7706                           ;psect for function _GenericQueue_Init
  7707                           
  7708                           
  7709                           ;generic_queue.c: 5:     q->element_size = element_size;
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  7713     1ED2  0828               	movf	GenericQueue_Init@q^(0+128),w
  7714     1ED3  3E5A               	addlw	90
  7715     1ED4  0086               	movwf	6
  7716     1ED5  3000               	movlw	0
  7717     1ED6  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7718     1ED7  0087               	movwf	7
  7719     1ED8  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  7720     1ED9  3FC0               	movwi [0]fsr1
  7721     1EDA  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  7722     1EDB  3FC1               	movwi [1]fsr1
  7723                           
  7724                           ;generic_queue.c: 6:     q->front = 0;
  7725     1EDC  0828               	movf	GenericQueue_Init@q^(0+128),w
  7726     1EDD  3E5C               	addlw	92
  7727     1EDE  0086               	movwf	6
  7728     1EDF  3000               	movlw	0
  7729     1EE0  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7730     1EE1  0087               	movwf	7
  7731     1EE2  0181               	clrf	1
  7732                           
  7733                           ;generic_queue.c: 7:     q->rear = 0;
  7734     1EE3  0828               	movf	GenericQueue_Init@q^(0+128),w
  7735     1EE4  3E5D               	addlw	93
  7736     1EE5  0086               	movwf	6
  7737     1EE6  3000               	movlw	0
  7738     1EE7  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7739     1EE8  0087               	movwf	7
  7740     1EE9  0181               	clrf	1
  7741                           
  7742                           ;generic_queue.c: 8:     q->size = 0;
  7743     1EEA  0828               	movf	GenericQueue_Init@q^(0+128),w
  7744     1EEB  3E5E               	addlw	94
  7745     1EEC  0086               	movwf	6
  7746     1EED  3000               	movlw	0
  7747     1EEE  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7748     1EEF  0087               	movwf	7
  7749     1EF0  0181               	clrf	1
  7750     1EF1  0008               	return
  7751     1EF2                     __end_of_GenericQueue_Init:
  7752                           
  7753                           	psect	text32
  7754     1E39                     __ptext32:	
  7755 ;; *************** function _PS2Keyboard_GetScanCode *****************
  7756 ;; Defined at:
  7757 ;;		line 44 in file "ps2_keyboard.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  7760 ;;		 -> main@scanCode(3), 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  7763 ;;		 -> main@scanCode(3), 
  7764 ;;  ret             1   32[BANK1 ] _Bool 
  7765 ;; Return value:  Size  Location     Type
  7766 ;;                  1    wreg      _Bool 
  7767 ;; Registers used:
  7768 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 2/1
  7771 ;;		On exit  : 1F/1
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7778 ;;Total ram usage:        2 bytes
  7779 ;; Hardware stack levels used: 1
  7780 ;; Hardware stack levels required when called: 12
  7781 ;; This function calls:
  7782 ;;		_GenericQueue_Dequeue
  7783 ;;		_GenericQueue_IsEmpty
  7784 ;; This function is called by:
  7785 ;;		_main
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789     1E39                     _PS2Keyboard_GetScanCode:	
  7790                           ;psect for function _PS2Keyboard_GetScanCode
  7791                           
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7795                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  7796     1E39  0021               	movlb	1	; select bank1
  7797     1E3A  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  7798                           
  7799                           ;ps2_keyboard.c: 47:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  7800     1E3B  3091               	movlw	145
  7801     1E3C  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7802     1E3D  3023               	movlw	35
  7803     1E3E  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  7804     1E3F  319C  24F2  319E   	fcall	_GenericQueue_IsEmpty
  7805     1E42  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7806     1E43  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7807     1E44  1D03               	btfss	3,2
  7808     1E45  2E52               	goto	l5890
  7809                           
  7810                           ;ps2_keyboard.c: 48:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  7811     1E46  3091               	movlw	145
  7812     1E47  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  7813     1E48  3023               	movlw	35
  7814     1E49  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  7815     1E4A  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  7816     1E4B  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  7817     1E4C  3187  2796  319E   	fcall	_GenericQueue_Dequeue
  7818                           
  7819                           ;ps2_keyboard.c: 49:         ret = 1;
  7820     1E4F  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7821     1E50  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  7822                           
  7823                           ;ps2_keyboard.c: 50:     } else {
  7824     1E51  2E53               	goto	l5892
  7825     1E52                     l5890:
  7826                           
  7827                           ;ps2_keyboard.c: 51:         ret = 0;
  7828     1E52  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7829     1E53                     l5892:
  7830                           
  7831                           ;ps2_keyboard.c: 54:     return ret;
  7832     1E53  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  7833     1E54  0008               	return
  7834     1E55                     __end_of_PS2Keyboard_GetScanCode:
  7835                           
  7836                           	psect	text33
  7837     0796                     __ptext33:	
  7838 ;; *************** function _GenericQueue_Dequeue *****************
  7839 ;; Defined at:
  7840 ;;		line 27 in file "generic_queue.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;  q               2   24[BANK1 ] PTR struct .
  7843 ;;		 -> keyboardScanCodeQueue(95), 
  7844 ;;  item            1   26[BANK1 ] PTR void 
  7845 ;;		 -> main@scanCode(3), 
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 1F/1
  7854 ;;		On exit  : 1F/1
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7857 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7859 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7860 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7861 ;;Total ram usage:        7 bytes
  7862 ;; Hardware stack levels used: 1
  7863 ;; Hardware stack levels required when called: 11
  7864 ;; This function calls:
  7865 ;;		_GenericQueue_IsEmpty
  7866 ;;		___awmod
  7867 ;;		___wmul
  7868 ;;		_memcpy
  7869 ;; This function is called by:
  7870 ;;		_PS2Keyboard_GetScanCode
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874     0796                     _GenericQueue_Dequeue:	
  7875                           ;psect for function _GenericQueue_Dequeue
  7876                           
  7877                           
  7878                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  7879                           
  7880                           ;incstack = 0
  7881                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7882     0796  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  7883     0797  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  7884     0798  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7885     0799  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7886     079A  319C  24F2  3187   	fcall	_GenericQueue_IsEmpty
  7887     079D  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7888     079E  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7889     079F  1D03               	btfss	3,2
  7890     07A0  0008               	return
  7891                           
  7892                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  7893     07A1  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  7894     07A2  00B5               	movwf	memcpy@d1^(0+128)
  7895     07A3  3001               	movlw	1
  7896     07A4  00B6               	movwf	(memcpy@d1+1)^(0+128)
  7897     07A5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7898     07A6  3E5C               	addlw	92
  7899     07A7  0086               	movwf	6
  7900     07A8  3000               	movlw	0
  7901     07A9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7902     07AA  0087               	movwf	7
  7903     07AB  0801               	movf	1,w
  7904     07AC  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  7905     07AD  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  7906     07AE  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  7907     07AF  00AF               	movwf	___wmul@multiplier^(0+128)
  7908     07B0  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  7909     07B1  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7910     07B2  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7911     07B3  3E5A               	addlw	90
  7912     07B4  0086               	movwf	6
  7913     07B5  3000               	movlw	0
  7914     07B6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7915     07B7  0087               	movwf	7
  7916     07B8  3F40               	moviw [0]fsr1
  7917     07B9  00B1               	movwf	___wmul@multiplicand^(0+128)
  7918     07BA  3F41               	moviw [1]fsr1
  7919     07BB  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7920     07BC  319E  2603  3187   	fcall	___wmul
  7921     07BF  082F               	movf	?___wmul^(0+128),w
  7922     07C0  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  7923     07C1  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  7924     07C2  0830               	movf	(?___wmul+1)^(0+128),w
  7925     07C3  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7926     07C4  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  7927     07C5  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  7928     07C6  00B7               	movwf	memcpy@s1^(0+128)
  7929     07C7  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  7930     07C8  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7931     07C9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7932     07CA  3E5A               	addlw	90
  7933     07CB  0086               	movwf	6
  7934     07CC  3000               	movlw	0
  7935     07CD  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7936     07CE  0087               	movwf	7
  7937     07CF  3F40               	moviw [0]fsr1
  7938     07D0  00B9               	movwf	memcpy@n^(0+128)
  7939     07D1  3F41               	moviw [1]fsr1
  7940     07D2  00BA               	movwf	(memcpy@n+1)^(0+128)
  7941     07D3  319F  275B  3187   	fcall	_memcpy
  7942                           
  7943                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  7944     07D6  300F               	movlw	15
  7945     07D7  00A8               	movwf	___awmod@divisor^(0+128)
  7946     07D8  3000               	movlw	0
  7947     07D9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7948     07DA  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7949     07DB  3E5C               	addlw	92
  7950     07DC  0086               	movwf	6
  7951     07DD  3000               	movlw	0
  7952     07DE  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7953     07DF  0087               	movwf	7
  7954     07E0  0801               	movf	1,w
  7955     07E1  3E01               	addlw	1
  7956     07E2  00AA               	movwf	___awmod@dividend^(0+128)
  7957     07E3  3000               	movlw	0
  7958     07E4  1803               	skipnc
  7959     07E5  3001               	movlw	1
  7960     07E6  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7961     07E7  3192  2298         	fcall	___awmod
  7962     07E9  0828               	movf	?___awmod^(0+128),w
  7963     07EA  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  7964     07EB  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7965     07EC  3E5C               	addlw	92
  7966     07ED  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  7967     07EE  3000               	movlw	0
  7968     07EF  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7969     07F0  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  7970     07F1  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  7971     07F2  0086               	movwf	6
  7972     07F3  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  7973     07F4  0087               	movwf	7
  7974     07F5  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  7975     07F6  0081               	movwf	1
  7976                           
  7977                           ;generic_queue.c: 31:         q->size--;
  7978     07F7  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7979     07F8  3E5E               	addlw	94
  7980     07F9  0086               	movwf	6
  7981     07FA  3000               	movlw	0
  7982     07FB  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7983     07FC  0087               	movwf	7
  7984     07FD  3001               	movlw	1
  7985     07FE  0281               	subwf	1,f
  7986     07FF  0008               	return
  7987     0800                     __end_of_GenericQueue_Dequeue:
  7988                           
  7989                           	psect	text34
  7990     1C06                     __ptext34:	
  7991 ;; *************** function _EUSART_is_tx_ready *****************
  7992 ;; Defined at:
  7993 ;;		line 132 in file "mcc_generated_files/eusart.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;		None
  7998 ;; Return value:  Size  Location     Type
  7999 ;;                  1    wreg      _Bool 
  8000 ;; Registers used:
  8001 ;;		wreg, status,2, status,0
  8002 ;; Tracked objects:
  8003 ;;		On entry : 1D/2
  8004 ;;		On exit  : 1F/0
  8005 ;;		Unchanged: 0/0
  8006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;Total ram usage:        0 bytes
  8012 ;; Hardware stack levels used: 1
  8013 ;; Hardware stack levels required when called: 10
  8014 ;; This function calls:
  8015 ;;		Nothing
  8016 ;; This function is called by:
  8017 ;;		_main
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021     1C06                     _EUSART_is_tx_ready:	
  8022                           ;psect for function _EUSART_is_tx_ready
  8023                           
  8024                           
  8025                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  8029     1C06  0020               	movlb	0	; select bank0
  8030     1C07  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  8031     1C08  1903               	btfsc	3,2
  8032     1C09  2C0C               	goto	u5240
  8033     1C0A  3001               	movlw	1
  8034     1C0B  0008               	return
  8035     1C0C                     u5240:
  8036     1C0C  3000               	movlw	0
  8037     1C0D  0008               	return
  8038     1C0E                     __end_of_EUSART_is_tx_ready:
  8039                           
  8040                           	psect	text35
  8041     1F81                     __ptext35:	
  8042 ;; *************** function _EUSART_Write *****************
  8043 ;; Defined at:
  8044 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8045 ;; Parameters:    Size  Location     Type
  8046 ;;  txData          1    wreg     unsigned char 
  8047 ;; Auto vars:     Size  Location     Type
  8048 ;;  txData          1    1[BANK1 ] unsigned char 
  8049 ;; Return value:  Size  Location     Type
  8050 ;;                  1    wreg      void 
  8051 ;; Registers used:
  8052 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8053 ;; Tracked objects:
  8054 ;;		On entry : 1F/2
  8055 ;;		On exit  : 1F/1
  8056 ;;		Unchanged: 0/0
  8057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8059 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8060 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8061 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8062 ;;Total ram usage:        2 bytes
  8063 ;; Hardware stack levels used: 1
  8064 ;; Hardware stack levels required when called: 10
  8065 ;; This function calls:
  8066 ;;		Nothing
  8067 ;; This function is called by:
  8068 ;;		_main
  8069 ;; This function uses a non-reentrant model
  8070 ;;
  8071                           
  8072     1F81                     _EUSART_Write:	
  8073                           ;psect for function _EUSART_Write
  8074                           
  8075                           
  8076                           ;incstack = 0
  8077                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8078                           ;EUSART_Write@txData stored from wreg
  8079     1F81  0021               	movlb	1	; select bank1
  8080     1F82  00A9               	movwf	EUSART_Write@txData^(0+128)
  8081     1F83                     l5824:	
  8082                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  8083                           
  8084                           
  8085                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  8086     1F83  0020               	movlb	0	; select bank0
  8087     1F84  086D               	movf	_eusartTxBufferRemaining,w	;volatile
  8088     1F85  1903               	btfsc	3,2
  8089     1F86  2F83               	goto	l5824
  8090                           
  8091                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  8092     1F87  0021               	movlb	1	; select bank1
  8093     1F88  1A11               	btfsc	17,4	;volatile
  8094     1F89  2F8E               	goto	l299
  8095                           
  8096                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  8097     1F8A  0829               	movf	EUSART_Write@txData^(0+128),w
  8098     1F8B  0023               	movlb	3	; select bank3
  8099     1F8C  009A               	movwf	26	;volatile
  8100                           
  8101                           ;mcc_generated_files/eusart.c: 182:     }
  8102     1F8D  2FA4               	goto	l5838
  8103     1F8E                     l299:	
  8104                           ;mcc_generated_files/eusart.c: 183:     else
  8105                           
  8106                           
  8107                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  8108     1F8E  1211               	bcf	17,4	;volatile
  8109                           
  8110                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  8111     1F8F  0022               	movlb	2	; select bank2
  8112     1F90  0849               	movf	_eusartTxHead^(0+256),w
  8113     1F91  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8114     1F92  0086               	movwf	6
  8115     1F93  3001               	movlw	1	; select bank3/4
  8116     1F94  0087               	movwf	7
  8117     1F95  0021               	movlb	1	; select bank1
  8118     1F96  0829               	movf	EUSART_Write@txData^(0+128),w
  8119     1F97  0081               	movwf	1
  8120     1F98  3001               	movlw	1
  8121     1F99  00A8               	movwf	??_EUSART_Write^(0+128)
  8122     1F9A  0828               	movf	??_EUSART_Write^(0+128),w
  8123     1F9B  0022               	movlb	2	; select bank2
  8124     1F9C  07C9               	addwf	_eusartTxHead^(0+256),f	;volatile
  8125                           
  8126                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8127     1F9D  3008               	movlw	8
  8128     1F9E  0249               	subwf	_eusartTxHead^(0+256),w
  8129     1F9F  1803               	btfsc	3,0
  8130                           
  8131                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  8132     1FA0  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  8133                           
  8134                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  8135     1FA1  3001               	movlw	1
  8136     1FA2  0020               	movlb	0	; select bank0
  8137     1FA3  02ED               	subwf	_eusartTxBufferRemaining,f	;volatile
  8138     1FA4                     l5838:
  8139                           
  8140                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  8141     1FA4  0021               	movlb	1	; select bank1
  8142     1FA5  1611               	bsf	17,4	;volatile
  8143     1FA6  0008               	return
  8144     1FA7                     __end_of_EUSART_Write:
  8145                           
  8146                           	psect	text36
  8147     007F                     __ptext36:	
  8148 ;; *************** function _APP_KeyboardTasks *****************
  8149 ;; Defined at:
  8150 ;;		line 319 in file "app_device_keyboard.c"
  8151 ;; Parameters:    Size  Location     Type
  8152 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8153 ;;		 -> main@scanCode(3), NULL(0), 
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  8156 ;;		 -> main@scanCode(3), NULL(0), 
  8157 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  8158 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  8159 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  8160 ;;  usbHidCode      1   35[BANK1 ] unsigned char 
  8161 ;;  TimeDeltaMil    2   40[BANK1 ] int 
  8162 ;;  i               1   42[BANK1 ] unsigned char 
  8163 ;;  needToSendNe    1   37[BANK1 ] _Bool 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 1F/2
  8170 ;;		On exit  : 2/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:       11 bytes
  8178 ;; Hardware stack levels used: 1
  8179 ;; Hardware stack levels required when called: 12
  8180 ;; This function calls:
  8181 ;;		_APP_KeyboardProcessOutputReport
  8182 ;;		_GenericQueue_Contains
  8183 ;;		_GenericQueue_CopyToArray
  8184 ;;		_GenericQueue_Enqueue
  8185 ;;		_GenericQueue_Remove
  8186 ;;		_PS2USB_ScanCodeToUSBHID
  8187 ;;		_USBTransferOnePacket
  8188 ;;		_memset
  8189 ;; This function is called by:
  8190 ;;		_main
  8191 ;; This function uses a non-reentrant model
  8192 ;;
  8193                           
  8194     007F                     _APP_KeyboardTasks:	
  8195                           ;psect for function _APP_KeyboardTasks
  8196                           
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8200                           ;APP_KeyboardTasks@scanCode stored from wreg
  8201     007F  0021               	movlb	1	; select bank1
  8202     0080  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  8203                           
  8204                           ;app_device_keyboard.c: 320:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 321:     unsigned char i;;app_device_keyboard.c: 322:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 327:     if (USBDeviceState < CONFIGURED_STATE) {
  8205     0081  3020               	movlw	32
  8206     0082  0020               	movlb	0	; select bank0
  8207     0083  026B               	subwf	_USBDeviceState,w
  8208     0084  1C03               	btfss	3,0
  8209     0085  0008               	return
  8210                           
  8211                           ;app_device_keyboard.c: 335:     if (UCONbits.SUSPND == 1) {
  8212                           
  8213                           ;app_device_keyboard.c: 329:     }
  8214     0086  003D               	movlb	29	; select bank29
  8215     0087  188E               	btfsc	14,1	;volatile
  8216     0088  0008               	return
  8217     0089                     l919:	
  8218                           ;app_device_keyboard.c: 351:     }
  8219                           
  8220                           
  8221                           ;app_device_keyboard.c: 349:     while (LocalSOFCount != SOFCounter) {
  8222     0089  0020               	movlb	0	; select bank0
  8223     008A  0866               	movf	_SOFCounter+1,w	;volatile
  8224     008B  0022               	movlb	2	; select bank2
  8225     008C  062F               	xorwf	(_LocalSOFCount+1)^(0+256),w
  8226     008D  1D03               	skipz
  8227     008E  2893               	goto	u6395
  8228     008F  0020               	movlb	0	; select bank0
  8229     0090  0865               	movf	_SOFCounter,w	;volatile
  8230     0091  0022               	movlb	2	; select bank2
  8231     0092  062E               	xorwf	_LocalSOFCount^(0+256),w
  8232     0093                     u6395:
  8233     0093  1903               	btfsc	3,2
  8234     0094  289E               	goto	l6556
  8235                           
  8236                           ;app_device_keyboard.c: 350:         LocalSOFCount = SOFCounter;
  8237     0095  0020               	movlb	0	; select bank0
  8238     0096  0866               	movf	_SOFCounter+1,w	;volatile
  8239     0097  0022               	movlb	2	; select bank2
  8240     0098  00AF               	movwf	(_LocalSOFCount+1)^(0+256)
  8241     0099  0020               	movlb	0	; select bank0
  8242     009A  0865               	movf	_SOFCounter,w	;volatile
  8243     009B  0022               	movlb	2	; select bank2
  8244     009C  00AE               	movwf	_LocalSOFCount^(0+256)
  8245     009D  2889               	goto	l919
  8246     009E                     l6556:
  8247                           
  8248                           ;app_device_keyboard.c: 355:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  8249     009E  0023               	movlb	3	; select bank3
  8250     009F  084D               	movf	_OldSOFCount^(0+384),w
  8251     00A0  0022               	movlb	2	; select bank2
  8252     00A1  022E               	subwf	_LocalSOFCount^(0+256),w
  8253     00A2  0021               	movlb	1	; select bank1
  8254     00A3  00D0               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8255     00A4  0023               	movlb	3	; select bank3
  8256     00A5  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8257     00A6  0022               	movlb	2	; select bank2
  8258     00A7  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8259     00A8  0021               	movlb	1	; select bank1
  8260     00A9  00D1               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8261                           
  8262                           ;app_device_keyboard.c: 357:     if (TimeDeltaMilliseconds < 0) {
  8263     00AA  1FD1               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  8264     00AB  28BE               	goto	l6562
  8265                           
  8266                           ;app_device_keyboard.c: 358:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  8267     00AC  0023               	movlb	3	; select bank3
  8268     00AD  084D               	movf	_OldSOFCount^(0+384),w
  8269     00AE  0022               	movlb	2	; select bank2
  8270     00AF  022E               	subwf	_LocalSOFCount^(0+256),w
  8271     00B0  0021               	movlb	1	; select bank1
  8272     00B1  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8273     00B2  0023               	movlb	3	; select bank3
  8274     00B3  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8275     00B4  0022               	movlb	2	; select bank2
  8276     00B5  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8277     00B6  0021               	movlb	1	; select bank1
  8278     00B7  00CA               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  8279     00B8  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8280     00B9  3EFF               	addlw	255
  8281     00BA  00D0               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8282     00BB  307F               	movlw	127
  8283     00BC  3D4A               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  8284     00BD  00D1               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8285     00BE                     l6562:
  8286                           
  8287                           ;app_device_keyboard.c: 365:     if (TimeDeltaMilliseconds > 5000) {
  8288     00BE  0851               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8289     00BF  3A80               	xorlw	128
  8290     00C0  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8291     00C1  3093               	movlw	147
  8292     00C2  0249               	subwf	??_APP_KeyboardTasks^(0+128),w
  8293     00C3  1D03               	skipz
  8294     00C4  28C7               	goto	u6415
  8295     00C5  3089               	movlw	137
  8296     00C6  0250               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8297     00C7                     u6415:
  8298     00C7  1C03               	skipc
  8299     00C8  28D3               	goto	l6566
  8300                           
  8301                           ;app_device_keyboard.c: 366:         OldSOFCount = LocalSOFCount - 5000;
  8302     00C9  0022               	movlb	2	; select bank2
  8303     00CA  082E               	movf	_LocalSOFCount^(0+256),w
  8304     00CB  3E78               	addlw	120
  8305     00CC  0023               	movlb	3	; select bank3
  8306     00CD  00CD               	movwf	_OldSOFCount^(0+384)
  8307     00CE  30EC               	movlw	236
  8308     00CF  0022               	movlb	2	; select bank2
  8309     00D0  3D2F               	addwfc	(_LocalSOFCount+1)^(0+256),w
  8310     00D1  0023               	movlb	3	; select bank3
  8311     00D2  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8312     00D3                     l6566:
  8313                           
  8314                           ;app_device_keyboard.c: 372:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  8315     00D3  302D               	movlw	45
  8316     00D4  0086               	movwf	6
  8317     00D5  3023               	movlw	35
  8318     00D6  0087               	movwf	7
  8319     00D7  0016               	moviw fsr1++
  8320     00D8  0401               	iorwf	1,w
  8321     00D9  1903               	btfsc	3,2
  8322     00DA  28EA               	goto	l6570
  8323     00DB  302D               	movlw	45
  8324     00DC  0086               	movwf	6
  8325     00DD  3023               	movlw	35
  8326     00DE  0087               	movwf	7
  8327     00DF  3F40               	moviw [0]fsr1
  8328     00E0  0021               	movlb	1	; select bank1
  8329     00E1  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8330     00E2  3F41               	moviw [1]fsr1
  8331     00E3  00CA               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8332     00E4  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8333     00E5  0086               	movwf	6
  8334     00E6  084A               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8335     00E7  0087               	movwf	7
  8336     00E8  1B81               	btfsc	1,7
  8337     00E9  2A85               	goto	l6672
  8338     00EA                     l6570:
  8339                           
  8340                           ;app_device_keyboard.c: 374:         if (scanCode != ((void*)0) && scanCode->value != 0x
      +                          00) {
  8341     00EA  0021               	movlb	1	; select bank1
  8342     00EB  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8343     00EC  1903               	btfsc	3,2
  8344     00ED  2A07               	goto	l927
  8345     00EE  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8346     00EF  0086               	movwf	6
  8347     00F0  3001               	movlw	1	; select bank2/3
  8348     00F1  0087               	movwf	7
  8349     00F2  0801               	movf	1,w
  8350     00F3  1903               	btfsc	3,2
  8351     00F4  2A07               	goto	l927
  8352                           
  8353                           ;app_device_keyboard.c: 375:             if (scanCode->isExtend) {
  8354     00F5  0A53               	incf	APP_KeyboardTasks@scanCode^(0+128),w
  8355     00F6  0086               	movwf	6
  8356     00F7  3001               	movlw	1	; select bank2/3
  8357     00F8  0087               	movwf	7
  8358     00F9  0801               	movf	1,w
  8359     00FA  1903               	btfsc	3,2
  8360     00FB  2964               	goto	l6600
  8361                           
  8362                           ;app_device_keyboard.c: 376:                 if (scanCode->isBreak) {
  8363     00FC  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8364     00FD  3E02               	addlw	2
  8365     00FE  0086               	movwf	6
  8366     00FF  3001               	movlw	1	; select bank2/3
  8367     0100  0087               	movwf	7
  8368     0101  0801               	movf	1,w
  8369     0102  1903               	btfsc	3,2
  8370     0103  292F               	goto	l6588
  8371                           
  8372                           ;app_device_keyboard.c: 377:                     if (scanCode->value == 0X14) {
  8373     0104  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8374     0105  0086               	movwf	6
  8375     0106  3001               	movlw	1	; select bank2/3
  8376     0107  0087               	movwf	7
  8377     0108  3014               	movlw	20
  8378     0109  0601               	xorwf	1,w
  8379     010A  1D03               	btfss	3,2
  8380     010B  2912               	goto	l6582
  8381                           
  8382                           ;app_device_keyboard.c: 378:                         keyboard.modifiers.bits.rightContro
      +                          l = 0;
  8383     010C  3090               	movlw	144
  8384     010D  0086               	movwf	6
  8385     010E  3023               	movlw	35
  8386     010F  0087               	movwf	7
  8387     0110  1201               	bcf	1,4
  8388                           
  8389                           ;app_device_keyboard.c: 379:                     } else if (scanCode->value == 0x11) {
  8390     0111  2A07               	goto	l927
  8391     0112                     l6582:
  8392     0112  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8393     0113  0086               	movwf	6
  8394     0114  3001               	movlw	1	; select bank2/3
  8395     0115  0087               	movwf	7
  8396     0116  3011               	movlw	17
  8397     0117  0601               	xorwf	1,w
  8398     0118  1D03               	btfss	3,2
  8399     0119  2920               	goto	l6586
  8400                           
  8401                           ;app_device_keyboard.c: 380:                         keyboard.modifiers.bits.rightAlt = 
      +                          0;
  8402     011A  3090               	movlw	144
  8403     011B  0086               	movwf	6
  8404     011C  3023               	movlw	35
  8405     011D  0087               	movwf	7
  8406     011E  1301               	bcf	1,6
  8407                           
  8408                           ;app_device_keyboard.c: 381:                     } else {
  8409     011F  2A07               	goto	l927
  8410     0120                     l6586:
  8411                           
  8412                           ;app_device_keyboard.c: 382:                         uint8_t usbHidCode = PS2USB_ScanCod
      +                          eToUSBHID(scanCode);
  8413     0120  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8414     0121  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8415     0124  00CB               	movwf	APP_KeyboardTasks@usbHidCode^(0+128)
  8416                           
  8417                           ;app_device_keyboard.c: 383:                         GenericQueue_Remove(&keyboard.keys,
      +                           &usbHidCode);
  8418     0125  3031               	movlw	49
  8419     0126  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  8420     0127  3023               	movlw	35
  8421     0128  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  8422     0129  30CB               	movlw	(low (APP_KeyboardTasks@usbHidCode| 0))& (0+255)
  8423     012A  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  8424     012B  3185  25CF  3180   	fcall	_GenericQueue_Remove
  8425                           
  8426                           ;app_device_keyboard.c: 385:                 } else {
  8427     012E  2A07               	goto	l927
  8428     012F                     l6588:
  8429                           
  8430                           ;app_device_keyboard.c: 386:                     if (scanCode->value == 0X14) {
  8431     012F  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8432     0130  0086               	movwf	6
  8433     0131  3001               	movlw	1	; select bank2/3
  8434     0132  0087               	movwf	7
  8435     0133  3014               	movlw	20
  8436     0134  0601               	xorwf	1,w
  8437     0135  1D03               	btfss	3,2
  8438     0136  293D               	goto	l6592
  8439                           
  8440                           ;app_device_keyboard.c: 387:                         keyboard.modifiers.bits.rightContro
      +                          l = 1;
  8441     0137  3090               	movlw	144
  8442     0138  0086               	movwf	6
  8443     0139  3023               	movlw	35
  8444     013A  0087               	movwf	7
  8445     013B  1601               	bsf	1,4
  8446                           
  8447                           ;app_device_keyboard.c: 388:                     } else if (scanCode->value == 0x11) {
  8448     013C  2A07               	goto	l927
  8449     013D                     l6592:
  8450     013D  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8451     013E  0086               	movwf	6
  8452     013F  3001               	movlw	1	; select bank2/3
  8453     0140  0087               	movwf	7
  8454     0141  3011               	movlw	17
  8455     0142  0601               	xorwf	1,w
  8456     0143  1D03               	btfss	3,2
  8457     0144  294B               	goto	l6596
  8458                           
  8459                           ;app_device_keyboard.c: 389:                         keyboard.modifiers.bits.rightAlt = 
      +                          1;
  8460     0145  3090               	movlw	144
  8461     0146  0086               	movwf	6
  8462     0147  3023               	movlw	35
  8463     0148  0087               	movwf	7
  8464     0149  1701               	bsf	1,6
  8465                           
  8466                           ;app_device_keyboard.c: 390:                     } else {
  8467     014A  2A07               	goto	l927
  8468     014B                     l6596:
  8469                           
  8470                           ;app_device_keyboard.c: 391:                         uint8_t usbHidCode = PS2USB_ScanCod
      +                          eToUSBHID(scanCode);
  8471     014B  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8472     014C  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8473     014F  00CE               	movwf	APP_KeyboardTasks@usbHidCode_2876^(0+128)
  8474                           
  8475                           ;app_device_keyboard.c: 392:                         if (!GenericQueue_Contains(&keyboar
      +                          d.keys, &usbHidCode)) {
  8476     0150  3031               	movlw	49
  8477     0151  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8478     0152  3023               	movlw	35
  8479     0153  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8480     0154  30CE               	movlw	(low (APP_KeyboardTasks@usbHidCode_2876| 0))& (0+255)
  8481     0155  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8482     0156  3194  24C8  3180   	fcall	_GenericQueue_Contains
  8483     0159  3A00               	xorlw	0
  8484     015A  1D03               	skipz
  8485     015B  2A07               	goto	l927
  8486                           
  8487                           ;app_device_keyboard.c: 393:                             GenericQueue_Enqueue(&keyboard.
      +                          keys, &usbHidCode);
  8488     015C  3031               	movlw	49
  8489     015D  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8490     015E  3023               	movlw	35
  8491     015F  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8492     0160  30CE               	movlw	low APP_KeyboardTasks@usbHidCode_2876
  8493     0161  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8494     0162  3000               	movlw	high APP_KeyboardTasks@usbHidCode_2876
  8495     0163  2A03               	goto	L3
  8496     0164                     l6600:
  8497                           
  8498                           ;app_device_keyboard.c: 398:                 if (scanCode->isBreak) {
  8499     0164  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8500     0165  3E02               	addlw	2
  8501     0166  0086               	movwf	6
  8502     0167  3001               	movlw	1	; select bank2/3
  8503     0168  0087               	movwf	7
  8504     0169  0801               	movf	1,w
  8505     016A  1903               	btfsc	3,2
  8506     016B  29B3               	goto	l6620
  8507                           
  8508                           ;app_device_keyboard.c: 400:                     if (scanCode->value == 0x12) {
  8509     016C  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8510     016D  0086               	movwf	6
  8511     016E  3001               	movlw	1	; select bank2/3
  8512     016F  0087               	movwf	7
  8513     0170  3012               	movlw	18
  8514     0171  0601               	xorwf	1,w
  8515     0172  1D03               	btfss	3,2
  8516     0173  297A               	goto	l6606
  8517                           
  8518                           ;app_device_keyboard.c: 401:                         keyboard.modifiers.bits.leftShift =
      +                           0;
  8519     0174  3090               	movlw	144
  8520     0175  0086               	movwf	6
  8521     0176  3023               	movlw	35
  8522     0177  0087               	movwf	7
  8523     0178  1081               	bcf	1,1
  8524                           
  8525                           ;app_device_keyboard.c: 402:                     } else if (scanCode->value == 0X14) {
  8526     0179  2A07               	goto	l927
  8527     017A                     l6606:
  8528     017A  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8529     017B  0086               	movwf	6
  8530     017C  3001               	movlw	1	; select bank2/3
  8531     017D  0087               	movwf	7
  8532     017E  3014               	movlw	20
  8533     017F  0601               	xorwf	1,w
  8534     0180  1D03               	btfss	3,2
  8535     0181  2988               	goto	l6610
  8536                           
  8537                           ;app_device_keyboard.c: 403:                         keyboard.modifiers.bits.leftControl
      +                           = 0;
  8538     0182  3090               	movlw	144
  8539     0183  0086               	movwf	6
  8540     0184  3023               	movlw	35
  8541     0185  0087               	movwf	7
  8542     0186  1001               	bcf	1,0
  8543                           
  8544                           ;app_device_keyboard.c: 404:                     } else if (scanCode->value == 0x11) {
  8545     0187  2A07               	goto	l927
  8546     0188                     l6610:
  8547     0188  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8548     0189  0086               	movwf	6
  8549     018A  3001               	movlw	1	; select bank2/3
  8550     018B  0087               	movwf	7
  8551     018C  3011               	movlw	17
  8552     018D  0601               	xorwf	1,w
  8553     018E  1D03               	btfss	3,2
  8554     018F  2996               	goto	l6614
  8555                           
  8556                           ;app_device_keyboard.c: 405:                         keyboard.modifiers.bits.leftAlt = 0
      +                          ;
  8557     0190  3090               	movlw	144
  8558     0191  0086               	movwf	6
  8559     0192  3023               	movlw	35
  8560     0193  0087               	movwf	7
  8561     0194  1101               	bcf	1,2
  8562                           
  8563                           ;app_device_keyboard.c: 406:                     } else if (scanCode->value == 0x59) {
  8564     0195  2A07               	goto	l927
  8565     0196                     l6614:
  8566     0196  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8567     0197  0086               	movwf	6
  8568     0198  3001               	movlw	1	; select bank2/3
  8569     0199  0087               	movwf	7
  8570     019A  3059               	movlw	89
  8571     019B  0601               	xorwf	1,w
  8572     019C  1D03               	btfss	3,2
  8573     019D  29A4               	goto	l6618
  8574                           
  8575                           ;app_device_keyboard.c: 407:                         keyboard.modifiers.bits.rightShift 
      +                          = 0;
  8576     019E  3090               	movlw	144
  8577     019F  0086               	movwf	6
  8578     01A0  3023               	movlw	35
  8579     01A1  0087               	movwf	7
  8580     01A2  1281               	bcf	1,5
  8581                           
  8582                           ;app_device_keyboard.c: 408:                     } else {
  8583     01A3  2A07               	goto	l927
  8584     01A4                     l6618:
  8585                           
  8586                           ;app_device_keyboard.c: 409:                         uint8_t usbHidCode = PS2USB_ScanCod
      +                          eToUSBHID(scanCode);
  8587     01A4  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8588     01A5  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8589     01A8  00CC               	movwf	APP_KeyboardTasks@usbHidCode_2877^(0+128)
  8590                           
  8591                           ;app_device_keyboard.c: 410:                         GenericQueue_Remove(&keyboard.keys,
      +                           &usbHidCode);
  8592     01A9  3031               	movlw	49
  8593     01AA  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  8594     01AB  3023               	movlw	35
  8595     01AC  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  8596     01AD  30CC               	movlw	(low (APP_KeyboardTasks@usbHidCode_2877| 0))& (0+255)
  8597     01AE  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  8598     01AF  3185  25CF  3180   	fcall	_GenericQueue_Remove
  8599     01B2  2A07               	goto	l927
  8600     01B3                     l6620:
  8601                           
  8602                           ;app_device_keyboard.c: 414:                     if (scanCode->value == 0x12) {
  8603     01B3  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8604     01B4  0086               	movwf	6
  8605     01B5  3001               	movlw	1	; select bank2/3
  8606     01B6  0087               	movwf	7
  8607     01B7  3012               	movlw	18
  8608     01B8  0601               	xorwf	1,w
  8609     01B9  1D03               	btfss	3,2
  8610     01BA  29C1               	goto	l6624
  8611                           
  8612                           ;app_device_keyboard.c: 415:                         keyboard.modifiers.bits.leftShift =
      +                           1;
  8613     01BB  3090               	movlw	144
  8614     01BC  0086               	movwf	6
  8615     01BD  3023               	movlw	35
  8616     01BE  0087               	movwf	7
  8617     01BF  1481               	bsf	1,1
  8618                           
  8619                           ;app_device_keyboard.c: 416:                     } else if (scanCode->value == 0X14) {
  8620     01C0  2A07               	goto	l927
  8621     01C1                     l6624:
  8622     01C1  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8623     01C2  0086               	movwf	6
  8624     01C3  3001               	movlw	1	; select bank2/3
  8625     01C4  0087               	movwf	7
  8626     01C5  3014               	movlw	20
  8627     01C6  0601               	xorwf	1,w
  8628     01C7  1D03               	btfss	3,2
  8629     01C8  29CF               	goto	l6628
  8630                           
  8631                           ;app_device_keyboard.c: 417:                         keyboard.modifiers.bits.leftControl
      +                           = 1;
  8632     01C9  3090               	movlw	144
  8633     01CA  0086               	movwf	6
  8634     01CB  3023               	movlw	35
  8635     01CC  0087               	movwf	7
  8636     01CD  1401               	bsf	1,0
  8637                           
  8638                           ;app_device_keyboard.c: 418:                     } else if (scanCode->value == 0x11) {
  8639     01CE  2A07               	goto	l927
  8640     01CF                     l6628:
  8641     01CF  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8642     01D0  0086               	movwf	6
  8643     01D1  3001               	movlw	1	; select bank2/3
  8644     01D2  0087               	movwf	7
  8645     01D3  3011               	movlw	17
  8646     01D4  0601               	xorwf	1,w
  8647     01D5  1D03               	btfss	3,2
  8648     01D6  29DD               	goto	l6632
  8649                           
  8650                           ;app_device_keyboard.c: 419:                         keyboard.modifiers.bits.leftAlt = 1
      +                          ;
  8651     01D7  3090               	movlw	144
  8652     01D8  0086               	movwf	6
  8653     01D9  3023               	movlw	35
  8654     01DA  0087               	movwf	7
  8655     01DB  1501               	bsf	1,2
  8656                           
  8657                           ;app_device_keyboard.c: 420:                     } else if (scanCode->value == 0x59) {
  8658     01DC  2A07               	goto	l927
  8659     01DD                     l6632:
  8660     01DD  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8661     01DE  0086               	movwf	6
  8662     01DF  3001               	movlw	1	; select bank2/3
  8663     01E0  0087               	movwf	7
  8664     01E1  3059               	movlw	89
  8665     01E2  0601               	xorwf	1,w
  8666     01E3  1D03               	btfss	3,2
  8667     01E4  29EB               	goto	l6636
  8668                           
  8669                           ;app_device_keyboard.c: 421:                         keyboard.modifiers.bits.rightShift 
      +                          = 1;
  8670     01E5  3090               	movlw	144
  8671     01E6  0086               	movwf	6
  8672     01E7  3023               	movlw	35
  8673     01E8  0087               	movwf	7
  8674     01E9  1681               	bsf	1,5
  8675                           
  8676                           ;app_device_keyboard.c: 422:                     } else {
  8677     01EA  2A07               	goto	l927
  8678     01EB                     l6636:
  8679                           
  8680                           ;app_device_keyboard.c: 423:                         uint8_t usbHidCode = PS2USB_ScanCod
      +                          eToUSBHID(scanCode);
  8681     01EB  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8682     01EC  3190  2086  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8683     01EF  00CF               	movwf	APP_KeyboardTasks@usbHidCode_2878^(0+128)
  8684                           
  8685                           ;app_device_keyboard.c: 424:                         if (!GenericQueue_Contains(&keyboar
      +                          d.keys, &usbHidCode)) {
  8686     01F0  3031               	movlw	49
  8687     01F1  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8688     01F2  3023               	movlw	35
  8689     01F3  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8690     01F4  30CF               	movlw	(low (APP_KeyboardTasks@usbHidCode_2878| 0))& (0+255)
  8691     01F5  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8692     01F6  3194  24C8  3180   	fcall	_GenericQueue_Contains
  8693     01F9  3A00               	xorlw	0
  8694     01FA  1D03               	skipz
  8695     01FB  2A07               	goto	l927
  8696                           
  8697                           ;app_device_keyboard.c: 425:                             GenericQueue_Enqueue(&keyboard.
      +                          keys, &usbHidCode);
  8698     01FC  3031               	movlw	49
  8699     01FD  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8700     01FE  3023               	movlw	35
  8701     01FF  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8702     0200  30CF               	movlw	low APP_KeyboardTasks@usbHidCode_2878
  8703     0201  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8704     0202  3000               	movlw	high APP_KeyboardTasks@usbHidCode_2878
  8705     0203                     L3:
  8706     0203  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  8707     0204  3196  26C2  3180   	fcall	_GenericQueue_Enqueue
  8708     0207                     l927:	
  8709                           ;app_device_keyboard.c: 430:         }
  8710                           
  8711                           
  8712                           ;app_device_keyboard.c: 432:         memset(&inputReport, 0, sizeof (inputReport));
  8713     0207  30A0               	movlw	160
  8714     0208  00A8               	movwf	memset@dest^(0+128)
  8715     0209  3000               	movlw	0
  8716     020A  00A9               	movwf	(memset@dest+1)^(0+128)
  8717     020B  3000               	movlw	0
  8718     020C  00AA               	movwf	memset@c^(0+128)
  8719     020D  00AB               	movwf	(memset@c+1)^(0+128)
  8720     020E  3008               	movlw	8
  8721     020F  00AC               	movwf	memset@n^(0+128)
  8722     0210  3000               	movlw	0
  8723     0211  00AD               	movwf	(memset@n^(0+128)+1)
  8724     0212  319D  25B7  3180   	fcall	_memset
  8725                           
  8726                           ;app_device_keyboard.c: 434:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  8727     0215  3031               	movlw	49
  8728     0216  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  8729     0217  3023               	movlw	35
  8730     0218  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  8731     0219  30A2               	movlw	162
  8732     021A  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  8733     021B  3195  252A  3180   	fcall	_GenericQueue_CopyToArray
  8734                           
  8735                           ;app_device_keyboard.c: 435:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  8736     021E  3090               	movlw	144
  8737     021F  0086               	movwf	6
  8738     0220  3023               	movlw	35
  8739     0221  0087               	movwf	7
  8740     0222  0801               	movf	1,w
  8741     0223  00A0               	movwf	32
  8742                           
  8743                           ;app_device_keyboard.c: 438:         needToSendNewReportPacket = 0;
  8744     0224  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8745                           
  8746                           ;app_device_keyboard.c: 439:         for (i = 0; i < sizeof (inputReport); i++) {
  8747     0225  01D2               	clrf	APP_KeyboardTasks@i^(0+128)
  8748                           
  8749                           ;app_device_keyboard.c: 442:                 break;
  8750     0226  2A2B               	goto	l6646
  8751     0227                     l6654:
  8752                           
  8753                           ;app_device_keyboard.c: 444:         }
  8754     0227  3001               	movlw	1
  8755     0228  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8756     0229  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8757     022A  07D2               	addwf	APP_KeyboardTasks@i^(0+128),f
  8758     022B                     l6646:
  8759     022B  3008               	movlw	8
  8760     022C  0252               	subwf	APP_KeyboardTasks@i^(0+128),w
  8761     022D  1803               	btfsc	3,0
  8762     022E  2A3E               	goto	l6658
  8763                           
  8764                           ;app_device_keyboard.c: 440:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  8765     022F  0852               	movf	APP_KeyboardTasks@i^(0+128),w
  8766     0230  3EA0               	addlw	160
  8767     0231  0086               	movwf	6
  8768     0232  0187               	clrf	7
  8769     0233  0852               	movf	APP_KeyboardTasks@i^(0+128),w
  8770     0234  3E2A               	addlw	(low (_oldInputReport| (0+512)))& (0+255)
  8771     0235  0084               	movwf	4
  8772     0236  3002               	movlw	2	; select bank4/5
  8773     0237  0085               	movwf	5
  8774     0238  0800               	movf	0,w
  8775     0239  0601               	xorwf	1,w
  8776     023A  1903               	skipnz
  8777     023B  2A27               	goto	l6654
  8778                           
  8779                           ;app_device_keyboard.c: 441:                 needToSendNewReportPacket = 1;
  8780     023C  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8781     023D  0ACD               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8782     023E                     l6658:
  8783                           
  8784                           ;app_device_keyboard.c: 449:         if (keyboardIdleRate != 0) {
  8785     023E  0023               	movlb	3	; select bank3
  8786     023F  084F               	movf	_keyboardIdleRate^(0+384),w
  8787     0240  0450               	iorwf	(_keyboardIdleRate+1)^(0+384),w
  8788     0241  1903               	btfsc	3,2
  8789     0242  2A57               	goto	l6664
  8790                           
  8791                           ;app_device_keyboard.c: 451:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  8792     0243  0021               	movlb	1	; select bank1
  8793     0244  0851               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8794     0245  3A80               	xorlw	128
  8795     0246  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8796     0247  0023               	movlb	3	; select bank3
  8797     0248  0850               	movf	(_keyboardIdleRate+1)^(0+384),w
  8798     0249  3A80               	xorlw	128
  8799     024A  0021               	movlb	1	; select bank1
  8800     024B  0249               	subwf	??_APP_KeyboardTasks^(0+128),w
  8801     024C  1D03               	skipz
  8802     024D  2A52               	goto	u6665
  8803     024E  0023               	movlb	3	; select bank3
  8804     024F  084F               	movf	_keyboardIdleRate^(0+384),w
  8805     0250  0021               	movlb	1	; select bank1
  8806     0251  0250               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8807     0252                     u6665:
  8808     0252  1C03               	skipc
  8809     0253  2A57               	goto	l6664
  8810                           
  8811                           ;app_device_keyboard.c: 452:                 needToSendNewReportPacket = 1;
  8812     0254  0021               	movlb	1	; select bank1
  8813     0255  01CD               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8814     0256  0ACD               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8815     0257                     l6664:
  8816                           
  8817                           ;app_device_keyboard.c: 458:         if (needToSendNewReportPacket == 1) {
  8818     0257  0021               	movlb	1	; select bank1
  8819     0258  034D               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  8820     0259  1D03               	btfss	3,2
  8821     025A  2A85               	goto	l6672
  8822                           
  8823                           ;app_device_keyboard.c: 462:             oldInputReport = inputReport;
  8824     025B  30A0               	movlw	160
  8825     025C  0086               	movwf	6
  8826     025D  3000               	movlw	0
  8827     025E  0087               	movwf	7
  8828     025F  302A               	movlw	low _oldInputReport
  8829     0260  0084               	movwf	4
  8830     0261  3002               	movlw	high _oldInputReport
  8831     0262  0085               	movwf	5
  8832     0263  3008               	movlw	8
  8833     0264  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8834     0265                     u6680:
  8835     0265  0016               	moviw fsr1++
  8836     0266  001A               	movwi fsr0++
  8837     0267  0BC9               	decfsz	??_APP_KeyboardTasks^(0+128),f
  8838     0268  2A65               	goto	u6680
  8839                           
  8840                           ;app_device_keyboard.c: 465:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  8841     0269  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8842     026A  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  8843     026B  30A0               	movlw	160
  8844     026C  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8845     026D  3000               	movlw	0
  8846     026E  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8847     026F  3008               	movlw	8
  8848     0270  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  8849     0271  3001               	movlw	1
  8850     0272  318B  2327  3180   	fcall	_USBTransferOnePacket
  8851     0275  302D               	movlw	45
  8852     0276  0086               	movwf	6
  8853     0277  3023               	movlw	35
  8854     0278  0087               	movwf	7
  8855     0279  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8856     027A  3FC0               	movwi [0]fsr1
  8857     027B  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8858     027C  3FC1               	movwi [1]fsr1
  8859                           
  8860                           ;app_device_keyboard.c: 466:             OldSOFCount = LocalSOFCount;
  8861     027D  0022               	movlb	2	; select bank2
  8862     027E  082F               	movf	(_LocalSOFCount+1)^(0+256),w
  8863     027F  0023               	movlb	3	; select bank3
  8864     0280  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8865     0281  0022               	movlb	2	; select bank2
  8866     0282  082E               	movf	_LocalSOFCount^(0+256),w
  8867     0283  0023               	movlb	3	; select bank3
  8868     0284  00CD               	movwf	_OldSOFCount^(0+384)
  8869     0285                     l6672:
  8870                           
  8871                           ;app_device_keyboard.c: 478:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  8872     0285  302D               	movlw	45
  8873     0286  0086               	movwf	6
  8874     0287  3023               	movlw	35
  8875     0288  0087               	movwf	7
  8876     0289  3142               	addfsr 1,2
  8877     028A  0016               	moviw fsr1++
  8878     028B  0401               	iorwf	1,w
  8879     028C  1903               	btfsc	3,2
  8880     028D  2A9E               	goto	l6676
  8881     028E  302D               	movlw	45
  8882     028F  0086               	movwf	6
  8883     0290  3023               	movlw	35
  8884     0291  0087               	movwf	7
  8885     0292  3142               	addfsr 1,2
  8886     0293  3F40               	moviw [0]fsr1
  8887     0294  0021               	movlb	1	; select bank1
  8888     0295  00C9               	movwf	??_APP_KeyboardTasks^(0+128)
  8889     0296  3F41               	moviw [1]fsr1
  8890     0297  00CA               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8891     0298  0849               	movf	??_APP_KeyboardTasks^(0+128),w
  8892     0299  0086               	movwf	6
  8893     029A  084A               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8894     029B  0087               	movwf	7
  8895     029C  1B81               	btfsc	1,7
  8896     029D  0008               	return
  8897     029E                     l6676:
  8898                           
  8899                           ;app_device_keyboard.c: 479:         APP_KeyboardProcessOutputReport();
  8900     029E  319B  23F2  3180   	fcall	_APP_KeyboardProcessOutputReport
  8901                           
  8902                           ;app_device_keyboard.c: 481:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  8903     02A1  0021               	movlb	1	; select bank1
  8904     02A2  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8905     02A3  3020               	movlw	32
  8906     02A4  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8907     02A5  3001               	movlw	1
  8908     02A6  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8909     02A7  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  8910     02A8  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  8911     02A9  3001               	movlw	1
  8912     02AA  318B  2327         	fcall	_USBTransferOnePacket
  8913     02AC  302D               	movlw	45
  8914     02AD  0086               	movwf	6
  8915     02AE  3023               	movlw	35
  8916     02AF  0087               	movwf	7
  8917     02B0  3142               	addfsr 1,2
  8918     02B1  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8919     02B2  3FC0               	movwi [0]fsr1
  8920     02B3  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8921     02B4  3FC1               	movwi [1]fsr1
  8922     02B5  0008               	return
  8923     02B6                     __end_of_APP_KeyboardTasks:
  8924                           
  8925                           	psect	text37
  8926     1DB7                     __ptext37:	
  8927 ;; *************** function _memset *****************
  8928 ;; Defined at:
  8929 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;  dest            2    0[BANK1 ] PTR void 
  8932 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8933 ;;  c               2    2[BANK1 ] int 
  8934 ;;  n               2    4[BANK1 ] unsigned int 
  8935 ;; Auto vars:     Size  Location     Type
  8936 ;;  p               2    6[BANK1 ] PTR unsigned char 
  8937 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  2    0[BANK1 ] PTR void 
  8940 ;; Registers used:
  8941 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8942 ;; Tracked objects:
  8943 ;;		On entry : 1F/1
  8944 ;;		On exit  : 1F/1
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8947 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8950 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;Total ram usage:        8 bytes
  8952 ;; Hardware stack levels used: 1
  8953 ;; Hardware stack levels required when called: 10
  8954 ;; This function calls:
  8955 ;;		Nothing
  8956 ;; This function is called by:
  8957 ;;		_APP_KeyboardTasks
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961     1DB7                     _memset:	
  8962                           ;psect for function _memset
  8963                           
  8964                           
  8965                           ;incstack = 0
  8966                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8967     1DB7  0829               	movf	(memset@dest+1)^(0+128),w
  8968     1DB8  00AF               	movwf	(memset@p+1)^(0+128)
  8969     1DB9  0828               	movf	memset@dest^(0+128),w
  8970     1DBA  00AE               	movwf	memset@p^(0+128)
  8971     1DBB                     l6424:
  8972     1DBB  3001               	movlw	1
  8973     1DBC  02AC               	subwf	memset@n^(0+128),f
  8974     1DBD  3000               	movlw	0
  8975     1DBE  3BAD               	subwfb	(memset@n+1)^(0+128),f
  8976     1DBF  0A2C               	incf	memset@n^(0+128),w
  8977     1DC0  1903               	btfsc	3,2
  8978     1DC1  0A2D               	incf	(memset@n+1)^(0+128),w
  8979     1DC2  1903               	btfsc	3,2
  8980     1DC3  0008               	return
  8981     1DC4  082E               	movf	memset@p^(0+128),w
  8982     1DC5  0086               	movwf	6
  8983     1DC6  082F               	movf	(memset@p+1)^(0+128),w
  8984     1DC7  0087               	movwf	7
  8985     1DC8  082A               	movf	memset@c^(0+128),w
  8986     1DC9  0081               	movwf	1
  8987     1DCA  3001               	movlw	1
  8988     1DCB  07AE               	addwf	memset@p^(0+128),f
  8989     1DCC  3000               	movlw	0
  8990     1DCD  3DAF               	addwfc	(memset@p+1)^(0+128),f
  8991     1DCE  2DBB               	goto	l6424
  8992     1DCF                     __end_of_memset:
  8993                           
  8994                           	psect	text38
  8995     0B27                     __ptext38:	
  8996 ;; *************** function _USBTransferOnePacket *****************
  8997 ;; Defined at:
  8998 ;;		line 999 in file "usb/usb_device.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;  ep              1    wreg     unsigned char 
  9001 ;;  dir             1    0[BANK1 ] unsigned char 
  9002 ;;  data            2    1[BANK1 ] PTR unsigned char 
  9003 ;;		 -> inputReport(8), outputReport(1), 
  9004 ;;  len             1    3[BANK1 ] unsigned char 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  ep              1    8[BANK1 ] unsigned char 
  9007 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  9008 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  2    0[BANK1 ] PTR void 
  9011 ;; Registers used:
  9012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9013 ;; Tracked objects:
  9014 ;;		On entry : 1F/1
  9015 ;;		On exit  : 1F/1
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9018 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;Total ram usage:       11 bytes
  9023 ;; Hardware stack levels used: 1
  9024 ;; Hardware stack levels required when called: 10
  9025 ;; This function calls:
  9026 ;;		Nothing
  9027 ;; This function is called by:
  9028 ;;		_APP_KeyboardTasks
  9029 ;; This function uses a non-reentrant model
  9030 ;;
  9031                           
  9032     0B27                     _USBTransferOnePacket:	
  9033                           ;psect for function _USBTransferOnePacket
  9034                           
  9035                           
  9036                           ;incstack = 0
  9037                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  9038                           ;USBTransferOnePacket@ep stored from wreg
  9039     0B27  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  9040                           
  9041                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  9042     0B28  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  9043     0B29  1903               	btfsc	3,2
  9044     0B2A  2B33               	goto	l5484
  9045                           
  9046                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  9047     0B2B  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9048     0B2C  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9049     0B2D  0086               	movwf	6
  9050     0B2E  0187               	clrf	7
  9051     0B2F  3F40               	moviw [0]fsr1
  9052     0B30  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  9053     0B31  3F41               	moviw [1]fsr1
  9054     0B32  2B3B               	goto	L4
  9055     0B33                     l5484:	
  9056                           ;usb/usb_device.c: 1008:     }
  9057                           
  9058                           
  9059                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  9060     0B33  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9061     0B34  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9062     0B35  0086               	movwf	6
  9063     0B36  3001               	movlw	1	; select bank2/3
  9064     0B37  0087               	movwf	7
  9065     0B38  3F40               	moviw [0]fsr1
  9066     0B39  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  9067     0B3A  3F41               	moviw [1]fsr1
  9068     0B3B                     L4:
  9069     0B3B  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  9070                           
  9071                           ;usb/usb_device.c: 1017:     if(handle == 0)
  9072     0B3C  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9073     0B3D  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  9074     0B3E  1D03               	btfss	3,2
  9075     0B3F  2B43               	goto	l5492
  9076                           
  9077                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  9078     0B40  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  9079     0B41  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  9080     0B42  0008               	return
  9081     0B43                     l5492:
  9082                           
  9083                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  9084     0B43  30FF               	movlw	255
  9085     0B44  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  9086     0B45  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9087     0B46  307F               	movlw	127
  9088     0B47  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  9089     0B48  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  9090     0B49  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9091     0B4A  0086               	movwf	6
  9092     0B4B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9093     0B4C  0087               	movwf	7
  9094     0B4D  3142               	addfsr 1,2
  9095     0B4E  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9096     0B4F  3FC0               	movwi [0]fsr1
  9097     0B50  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  9098     0B51  3FC1               	movwi [1]fsr1
  9099                           
  9100                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  9101     0B52  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9102     0B53  3E01               	addlw	1
  9103     0B54  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9104     0B55  3000               	movlw	0
  9105     0B56  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  9106     0B57  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  9107     0B58  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9108     0B59  0086               	movwf	6
  9109     0B5A  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  9110     0B5B  0087               	movwf	7
  9111     0B5C  082B               	movf	USBTransferOnePacket@len^(0+128),w
  9112     0B5D  0081               	movwf	1
  9113                           
  9114                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  9115     0B5E  3040               	movlw	64
  9116     0B5F  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9117     0B60  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9118     0B61  0086               	movwf	6
  9119     0B62  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9120     0B63  0087               	movwf	7
  9121     0B64  082C               	movf	??_USBTransferOnePacket^(0+128),w
  9122     0B65  0581               	andwf	1,f
  9123                           
  9124                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  9125     0B66  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9126     0B67  0086               	movwf	6
  9127     0B68  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9128     0B69  0087               	movwf	7
  9129     0B6A  1581               	bsf	1,3
  9130                           
  9131                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  9132     0B6B  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9133     0B6C  0086               	movwf	6
  9134     0B6D  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9135     0B6E  0087               	movwf	7
  9136     0B6F  1781               	bsf	1,7
  9137                           
  9138                           ;usb/usb_device.c: 1040:     if(dir != 0)
  9139     0B70  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  9140     0B71  1903               	btfsc	3,2
  9141     0B72  2B8A               	goto	l5502
  9142                           
  9143                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  9144     0B73  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9145     0B74  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9146     0B75  0086               	movwf	6
  9147     0B76  0187               	clrf	7
  9148     0B77  3F40               	moviw [0]fsr1
  9149     0B78  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9150     0B79  3F41               	moviw [1]fsr1
  9151     0B7A  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  9152     0B7B  3004               	movlw	4
  9153     0B7C  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  9154     0B7D  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  9155     0B7E  3000               	movlw	0
  9156     0B7F  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  9157     0B80  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  9158     0B81  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9159     0B82  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9160     0B83  0086               	movwf	6
  9161     0B84  0187               	clrf	7
  9162     0B85  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  9163     0B86  3FC0               	movwi [0]fsr1
  9164     0B87  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  9165     0B88  3FC1               	movwi [1]fsr1
  9166                           
  9167                           ;usb/usb_device.c: 1044:     }
  9168     0B89  2BA2               	goto	l5504
  9169     0B8A                     l5502:
  9170                           
  9171                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  9172     0B8A  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9173     0B8B  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9174     0B8C  0086               	movwf	6
  9175     0B8D  3001               	movlw	1	; select bank2/3
  9176     0B8E  0087               	movwf	7
  9177     0B8F  3F40               	moviw [0]fsr1
  9178     0B90  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  9179     0B91  3F41               	moviw [1]fsr1
  9180     0B92  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  9181     0B93  3004               	movlw	4
  9182     0B94  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  9183     0B95  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  9184     0B96  3000               	movlw	0
  9185     0B97  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  9186     0B98  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  9187     0B99  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  9188     0B9A  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9189     0B9B  0086               	movwf	6
  9190     0B9C  3001               	movlw	1	; select bank2/3
  9191     0B9D  0087               	movwf	7
  9192     0B9E  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  9193     0B9F  3FC0               	movwi [0]fsr1
  9194     0BA0  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  9195     0BA1  3FC1               	movwi [1]fsr1
  9196     0BA2                     l5504:
  9197                           
  9198                           ;usb/usb_device.c: 1050:     return (void*)handle;
  9199     0BA2  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  9200     0BA3  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  9201     0BA4  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  9202     0BA5  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  9203     0BA6  0008               	return
  9204     0BA7                     __end_of_USBTransferOnePacket:
  9205                           
  9206                           	psect	text39
  9207     1086                     __ptext39:	
  9208 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  9209 ;; Defined at:
  9210 ;;		line 396 in file "ps2usb.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  9213 ;;		 -> main@scanCode(3), NULL(0), 
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  9216 ;;		 -> main@scanCode(3), NULL(0), 
  9217 ;; Return value:  Size  Location     Type
  9218 ;;                  1    wreg      unsigned char 
  9219 ;; Registers used:
  9220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9221 ;; Tracked objects:
  9222 ;;		On entry : 1F/1
  9223 ;;		On exit  : 1F/1
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        1 bytes
  9231 ;; Hardware stack levels used: 1
  9232 ;; Hardware stack levels required when called: 10
  9233 ;; This function calls:
  9234 ;;		Nothing
  9235 ;; This function is called by:
  9236 ;;		_APP_KeyboardTasks
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240     1086                     _PS2USB_ScanCodeToUSBHID:	
  9241                           ;psect for function _PS2USB_ScanCodeToUSBHID
  9242                           
  9243                           
  9244                           ;incstack = 0
  9245                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  9246                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  9247     1086  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  9248                           
  9249                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  9250     1087  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9251     1088  0086               	movwf	6
  9252     1089  3001               	movlw	1	; select bank2/3
  9253     108A  0087               	movwf	7
  9254     108B  0801               	movf	1,w
  9255     108C  1903               	btfsc	3,2
  9256     108D  289B               	goto	l5526
  9257                           
  9258                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  9259     108E  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9260     108F  0086               	movwf	6
  9261     1090  3001               	movlw	1	; select bank2/3
  9262     1091  0087               	movwf	7
  9263     1092  0801               	movf	1,w
  9264     1093  3ED6               	addlw	low (_ps2ExtUsbMap| (0+32768))
  9265     1094  0084               	movwf	4
  9266     1095  3083               	movlw	high (_ps2ExtUsbMap| (0+32768))
  9267     1096  1803               	skipnc
  9268     1097  3E01               	addlw	1
  9269     1098  0085               	movwf	5
  9270     1099  0800               	movf	0,w	;code access
  9271     109A  0008               	return
  9272     109B                     l5526:
  9273                           
  9274                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  9275     109B  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9276     109C  0086               	movwf	6
  9277     109D  3001               	movlw	1	; select bank2/3
  9278     109E  0087               	movwf	7
  9279     109F  0801               	movf	1,w
  9280     10A0  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  9281     10A1  0084               	movwf	4
  9282     10A2  3090               	movlw	high (_ps2UsbMap| (0+32768))
  9283     10A3  1803               	skipnc
  9284     10A4  3E01               	addlw	1
  9285     10A5  0085               	movwf	5
  9286     10A6  0800               	movf	0,w	;code access
  9287     10A7  0008               	return
  9288     10A8                     __end_of_PS2USB_ScanCodeToUSBHID:
  9289                           
  9290                           	psect	text40
  9291     05CF                     __ptext40:	
  9292 ;; *************** function _GenericQueue_Remove *****************
  9293 ;; Defined at:
  9294 ;;		line 35 in file "generic_queue.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;  q               2   24[BANK1 ] PTR struct .
  9297 ;;		 -> keyboard(100), 
  9298 ;;  item            1   26[BANK1 ] PTR const void 
  9299 ;;		 -> APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode(1), 
  9300 ;; Auto vars:     Size  Location     Type
  9301 ;;  j               1   32[BANK1 ] unsigned char 
  9302 ;;  i               1   31[BANK1 ] unsigned char 
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  1    wreg      void 
  9305 ;; Registers used:
  9306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9307 ;; Tracked objects:
  9308 ;;		On entry : 1F/1
  9309 ;;		On exit  : 1F/1
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9312 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;Total ram usage:        9 bytes
  9317 ;; Hardware stack levels used: 1
  9318 ;; Hardware stack levels required when called: 11
  9319 ;; This function calls:
  9320 ;;		_GenericQueue_IsEmpty
  9321 ;;		___awmod
  9322 ;;		___wmul
  9323 ;;		_memcmp
  9324 ;;		_memcpy
  9325 ;; This function is called by:
  9326 ;;		_APP_KeyboardTasks
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330     05CF                     _GenericQueue_Remove:	
  9331                           ;psect for function _GenericQueue_Remove
  9332                           
  9333                           
  9334                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  9335                           
  9336                           ;incstack = 0
  9337                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9338     05CF  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  9339     05D0  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  9340     05D1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9341     05D2  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  9342     05D3  319C  24F2  3185   	fcall	_GenericQueue_IsEmpty
  9343     05D6  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  9344     05D7  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  9345     05D8  1D03               	btfss	3,2
  9346     05D9  0008               	return
  9347                           
  9348                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  9349     05DA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9350     05DB  3E5C               	addlw	92
  9351     05DC  0086               	movwf	6
  9352     05DD  3000               	movlw	0
  9353     05DE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9354     05DF  0087               	movwf	7
  9355     05E0  0801               	movf	1,w
  9356     05E1                     L5:
  9357     05E1  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  9358     05E2  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9359     05E3  3E5D               	addlw	93
  9360     05E4  0086               	movwf	6
  9361     05E5  3000               	movlw	0
  9362     05E6  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9363     05E7  0087               	movwf	7
  9364     05E8  0801               	movf	1,w
  9365     05E9  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  9366     05EA  1903               	btfsc	3,2
  9367     05EB  0008               	return
  9368                           
  9369                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  9370     05EC  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9371     05ED  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9372     05EE  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9373     05EF  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9374     05F0  00AF               	movwf	___wmul@multiplier^(0+128)
  9375     05F1  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9376     05F2  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9377     05F3  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9378     05F4  3E5A               	addlw	90
  9379     05F5  0086               	movwf	6
  9380     05F6  3000               	movlw	0
  9381     05F7  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9382     05F8  0087               	movwf	7
  9383     05F9  3F40               	moviw [0]fsr1
  9384     05FA  00B1               	movwf	___wmul@multiplicand^(0+128)
  9385     05FB  3F41               	moviw [1]fsr1
  9386     05FC  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9387     05FD  319E  2603  3185   	fcall	___wmul
  9388     0600  082F               	movf	?___wmul^(0+128),w
  9389     0601  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9390     0602  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9391     0603  0830               	movf	(?___wmul+1)^(0+128),w
  9392     0604  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9393     0605  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  9394     0606  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9395     0607  00B5               	movwf	memcmp@vl^(0+128)
  9396     0608  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  9397     0609  00B6               	movwf	(memcmp@vl+1)^(0+128)
  9398     060A  0842               	movf	GenericQueue_Remove@item^(0+128),w
  9399     060B  00B7               	movwf	memcmp@vr^(0+128)
  9400     060C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9401     060D  3E5A               	addlw	90
  9402     060E  0086               	movwf	6
  9403     060F  3000               	movlw	0
  9404     0610  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9405     0611  0087               	movwf	7
  9406     0612  3F40               	moviw [0]fsr1
  9407     0613  00B8               	movwf	memcmp@n^(0+128)
  9408     0614  3F41               	moviw [1]fsr1
  9409     0615  00B9               	movwf	(memcmp@n+1)^(0+128)
  9410     0616  3190  20A8  3185   	fcall	_memcmp
  9411     0619  0835               	movf	?_memcmp^(0+128),w
  9412     061A  0436               	iorwf	(?_memcmp+1)^(0+128),w
  9413     061B  1D03               	btfss	3,2
  9414     061C  2EB3               	goto	l5548
  9415                           
  9416                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  9417     061D  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9418     061E                     L6:
  9419     061E  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  9420     061F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9421     0620  3E5D               	addlw	93
  9422     0621  0086               	movwf	6
  9423     0622  3000               	movlw	0
  9424     0623  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9425     0624  0087               	movwf	7
  9426     0625  0801               	movf	1,w
  9427     0626  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  9428     0627  1903               	btfsc	3,2
  9429     0628  2E89               	goto	l5544
  9430                           
  9431                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  9432     0629  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9433     062A  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9434     062B  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9435     062C  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9436     062D  00AF               	movwf	___wmul@multiplier^(0+128)
  9437     062E  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9438     062F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9439     0630  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9440     0631  3E5A               	addlw	90
  9441     0632  0086               	movwf	6
  9442     0633  3000               	movlw	0
  9443     0634  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9444     0635  0087               	movwf	7
  9445     0636  3F40               	moviw [0]fsr1
  9446     0637  00B1               	movwf	___wmul@multiplicand^(0+128)
  9447     0638  3F41               	moviw [1]fsr1
  9448     0639  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9449     063A  319E  2603  3185   	fcall	___wmul
  9450     063D  082F               	movf	?___wmul^(0+128),w
  9451     063E  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9452     063F  00B5               	movwf	memcpy@d1^(0+128)
  9453     0640  0830               	movf	(?___wmul+1)^(0+128),w
  9454     0641  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9455     0642  00B6               	movwf	(memcpy@d1+1)^(0+128)
  9456     0643  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9457     0644  3E01               	addlw	1
  9458     0645  00AA               	movwf	___awmod@dividend^(0+128)
  9459     0646  3000               	movlw	0
  9460     0647  1803               	skipnc
  9461     0648  3001               	movlw	1
  9462     0649  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9463     064A  300F               	movlw	15
  9464     064B  00A8               	movwf	___awmod@divisor^(0+128)
  9465     064C  3000               	movlw	0
  9466     064D  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9467     064E  3192  2298  3185   	fcall	___awmod
  9468     0651  0829               	movf	(?___awmod+1)^(0+128),w
  9469     0652  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9470     0653  0828               	movf	?___awmod^(0+128),w
  9471     0654  00AF               	movwf	___wmul@multiplier^(0+128)
  9472     0655  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9473     0656  3E5A               	addlw	90
  9474     0657  0086               	movwf	6
  9475     0658  3000               	movlw	0
  9476     0659  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9477     065A  0087               	movwf	7
  9478     065B  3F40               	moviw [0]fsr1
  9479     065C  00B1               	movwf	___wmul@multiplicand^(0+128)
  9480     065D  3F41               	moviw [1]fsr1
  9481     065E  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9482     065F  319E  2603  3185   	fcall	___wmul
  9483     0662  082F               	movf	?___wmul^(0+128),w
  9484     0663  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9485     0664  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9486     0665  0830               	movf	(?___wmul+1)^(0+128),w
  9487     0666  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9488     0667  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  9489     0668  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9490     0669  00B7               	movwf	memcpy@s1^(0+128)
  9491     066A  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  9492     066B  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9493     066C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9494     066D  3E5A               	addlw	90
  9495     066E  0086               	movwf	6
  9496     066F  3000               	movlw	0
  9497     0670  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9498     0671  0087               	movwf	7
  9499     0672  3F40               	moviw [0]fsr1
  9500     0673  00B9               	movwf	memcpy@n^(0+128)
  9501     0674  3F41               	moviw [1]fsr1
  9502     0675  00BA               	movwf	(memcpy@n+1)^(0+128)
  9503     0676  319F  275B  3185   	fcall	_memcpy
  9504                           
  9505                           ;generic_queue.c: 43:                 }
  9506     0679  300F               	movlw	15
  9507     067A  00A8               	movwf	___awmod@divisor^(0+128)
  9508     067B  3000               	movlw	0
  9509     067C  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9510     067D  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9511     067E  3E01               	addlw	1
  9512     067F  00AA               	movwf	___awmod@dividend^(0+128)
  9513     0680  3000               	movlw	0
  9514     0681  1803               	skipnc
  9515     0682  3001               	movlw	1
  9516     0683  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9517     0684  3192  2298  3185   	fcall	___awmod
  9518     0687  0828               	movf	?___awmod^(0+128),w
  9519     0688  2E1E               	goto	L6
  9520     0689                     l5544:
  9521                           
  9522                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  9523     0689  300F               	movlw	15
  9524     068A  00A8               	movwf	___awmod@divisor^(0+128)
  9525     068B  3000               	movlw	0
  9526     068C  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9527     068D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9528     068E  3E5D               	addlw	93
  9529     068F  0086               	movwf	6
  9530     0690  3000               	movlw	0
  9531     0691  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9532     0692  0087               	movwf	7
  9533     0693  0801               	movf	1,w
  9534     0694  3E0E               	addlw	14
  9535     0695  00AA               	movwf	___awmod@dividend^(0+128)
  9536     0696  3000               	movlw	0
  9537     0697  1803               	skipnc
  9538     0698  3001               	movlw	1
  9539     0699  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9540     069A  3192  2298         	fcall	___awmod
  9541     069C  0828               	movf	?___awmod^(0+128),w
  9542     069D  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9543     069E  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9544     069F  3E5D               	addlw	93
  9545     06A0  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  9546     06A1  3000               	movlw	0
  9547     06A2  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9548     06A3  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9549     06A4  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9550     06A5  0086               	movwf	6
  9551     06A6  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9552     06A7  0087               	movwf	7
  9553     06A8  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9554     06A9  0081               	movwf	1
  9555                           
  9556                           ;generic_queue.c: 45:                 q->size--;
  9557     06AA  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9558     06AB  3E5E               	addlw	94
  9559     06AC  0086               	movwf	6
  9560     06AD  3000               	movlw	0
  9561     06AE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9562     06AF  0087               	movwf	7
  9563     06B0  3001               	movlw	1
  9564     06B1  0281               	subwf	1,f
  9565                           
  9566                           ;generic_queue.c: 46:                 break;
  9567     06B2  0008               	return
  9568     06B3                     l5548:
  9569                           
  9570                           ;generic_queue.c: 48:         }
  9571     06B3  300F               	movlw	15
  9572     06B4  00A8               	movwf	___awmod@divisor^(0+128)
  9573     06B5  3000               	movlw	0
  9574     06B6  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9575     06B7  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9576     06B8  3E01               	addlw	1
  9577     06B9  00AA               	movwf	___awmod@dividend^(0+128)
  9578     06BA  3000               	movlw	0
  9579     06BB  1803               	skipnc
  9580     06BC  3001               	movlw	1
  9581     06BD  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9582     06BE  3192  2298  3185   	fcall	___awmod
  9583     06C1  0828               	movf	?___awmod^(0+128),w
  9584     06C2  2DE1               	goto	L5
  9585     06C3                     __end_of_GenericQueue_Remove:
  9586                           
  9587                           	psect	text41
  9588     16C2                     __ptext41:	
  9589 ;; *************** function _GenericQueue_Enqueue *****************
  9590 ;; Defined at:
  9591 ;;		line 19 in file "generic_queue.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;  q               2   24[BANK1 ] PTR struct .
  9594 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  9595 ;;  item            2   26[BANK1 ] PTR const void 
  9596 ;;		 -> keyboardScanCode(3), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;		None
  9599 ;; Return value:  Size  Location     Type
  9600 ;;                  1    wreg      void 
  9601 ;; Registers used:
  9602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9603 ;; Tracked objects:
  9604 ;;		On entry : 1F/1
  9605 ;;		On exit  : 1F/1
  9606 ;;		Unchanged: 0/0
  9607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9608 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9611 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9612 ;;Total ram usage:        7 bytes
  9613 ;; Hardware stack levels used: 1
  9614 ;; Hardware stack levels required when called: 11
  9615 ;; This function calls:
  9616 ;;		_GenericQueue_IsFull
  9617 ;;		___awmod
  9618 ;;		___wmul
  9619 ;;		_memcpy
  9620 ;; This function is called by:
  9621 ;;		_APP_KeyboardTasks
  9622 ;; This function uses a non-reentrant model
  9623 ;;
  9624                           
  9625     16C2                     _GenericQueue_Enqueue:	
  9626                           ;psect for function _GenericQueue_Enqueue
  9627                           
  9628                           
  9629                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  9630                           
  9631                           ;incstack = 0
  9632                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9633     16C2  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  9634     16C3  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  9635     16C4  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9636     16C5  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  9637     16C6  319D  2519  3196   	fcall	_GenericQueue_IsFull
  9638     16C9  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  9639     16CA  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  9640     16CB  1D03               	btfss	3,2
  9641     16CC  0008               	return
  9642                           
  9643                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  9644     16CD  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9645     16CE  3E5D               	addlw	93
  9646     16CF  0086               	movwf	6
  9647     16D0  3000               	movlw	0
  9648     16D1  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9649     16D2  0087               	movwf	7
  9650     16D3  0801               	movf	1,w
  9651     16D4  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9652     16D5  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  9653     16D6  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9654     16D7  00AF               	movwf	___wmul@multiplier^(0+128)
  9655     16D8  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  9656     16D9  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9657     16DA  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9658     16DB  3E5A               	addlw	90
  9659     16DC  0086               	movwf	6
  9660     16DD  3000               	movlw	0
  9661     16DE  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9662     16DF  0087               	movwf	7
  9663     16E0  3F40               	moviw [0]fsr1
  9664     16E1  00B1               	movwf	___wmul@multiplicand^(0+128)
  9665     16E2  3F41               	moviw [1]fsr1
  9666     16E3  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9667     16E4  319E  2603  3196   	fcall	___wmul
  9668     16E7  082F               	movf	?___wmul^(0+128),w
  9669     16E8  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  9670     16E9  00B5               	movwf	memcpy@d1^(0+128)
  9671     16EA  0830               	movf	(?___wmul+1)^(0+128),w
  9672     16EB  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9673     16EC  00B6               	movwf	(memcpy@d1+1)^(0+128)
  9674     16ED  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  9675     16EE  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9676     16EF  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  9677     16F0  00B7               	movwf	memcpy@s1^(0+128)
  9678     16F1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9679     16F2  3E5A               	addlw	90
  9680     16F3  0086               	movwf	6
  9681     16F4  3000               	movlw	0
  9682     16F5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9683     16F6  0087               	movwf	7
  9684     16F7  3F40               	moviw [0]fsr1
  9685     16F8  00B9               	movwf	memcpy@n^(0+128)
  9686     16F9  3F41               	moviw [1]fsr1
  9687     16FA  00BA               	movwf	(memcpy@n+1)^(0+128)
  9688     16FB  319F  275B  3196   	fcall	_memcpy
  9689                           
  9690                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  9691     16FE  300F               	movlw	15
  9692     16FF  00A8               	movwf	___awmod@divisor^(0+128)
  9693     1700  3000               	movlw	0
  9694     1701  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9695     1702  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9696     1703  3E5D               	addlw	93
  9697     1704  0086               	movwf	6
  9698     1705  3000               	movlw	0
  9699     1706  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9700     1707  0087               	movwf	7
  9701     1708  0801               	movf	1,w
  9702     1709  3E01               	addlw	1
  9703     170A  00AA               	movwf	___awmod@dividend^(0+128)
  9704     170B  3000               	movlw	0
  9705     170C  1803               	skipnc
  9706     170D  3001               	movlw	1
  9707     170E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9708     170F  3192  2298         	fcall	___awmod
  9709     1711  0828               	movf	?___awmod^(0+128),w
  9710     1712  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9711     1713  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9712     1714  3E5D               	addlw	93
  9713     1715  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  9714     1716  3000               	movlw	0
  9715     1717  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9716     1718  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  9717     1719  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  9718     171A  0086               	movwf	6
  9719     171B  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  9720     171C  0087               	movwf	7
  9721     171D  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9722     171E  0081               	movwf	1
  9723                           
  9724                           ;generic_queue.c: 23:         q->size++;
  9725     171F  3001               	movlw	1
  9726     1720  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  9727     1721  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  9728     1722  3E5E               	addlw	94
  9729     1723  0086               	movwf	6
  9730     1724  3000               	movlw	0
  9731     1725  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  9732     1726  0087               	movwf	7
  9733     1727  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  9734     1728  0781               	addwf	1,f
  9735     1729  0008               	return
  9736     172A                     __end_of_GenericQueue_Enqueue:
  9737                           
  9738                           	psect	text42
  9739     1D19                     __ptext42:	
  9740 ;; *************** function _GenericQueue_IsFull *****************
  9741 ;; Defined at:
  9742 ;;		line 15 in file "generic_queue.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  q               2    0[BANK1 ] PTR struct .
  9745 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;		None
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  2    0[BANK1 ] int 
  9750 ;; Registers used:
  9751 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9752 ;; Tracked objects:
  9753 ;;		On entry : 1F/1
  9754 ;;		On exit  : 1F/1
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9757 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;Total ram usage:        4 bytes
  9762 ;; Hardware stack levels used: 1
  9763 ;; Hardware stack levels required when called: 10
  9764 ;; This function calls:
  9765 ;;		Nothing
  9766 ;; This function is called by:
  9767 ;;		_GenericQueue_Enqueue
  9768 ;; This function uses a non-reentrant model
  9769 ;;
  9770                           
  9771     1D19                     _GenericQueue_IsFull:	
  9772                           ;psect for function _GenericQueue_IsFull
  9773                           
  9774                           
  9775                           ;generic_queue.c: 16:     return (q->size == 15);
  9776                           
  9777                           ;incstack = 0
  9778                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  9779     1D19  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  9780     1D1A  3E5E               	addlw	94
  9781     1D1B  0086               	movwf	6
  9782     1D1C  3000               	movlw	0
  9783     1D1D  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  9784     1D1E  0087               	movwf	7
  9785     1D1F  300F               	movlw	15
  9786     1D20  0601               	xorwf	1,w
  9787     1D21  1D03               	btfss	3,2
  9788     1D22  2D25               	goto	u4360
  9789     1D23  3001               	movlw	1
  9790     1D24  2D26               	goto	u4370
  9791     1D25                     u4360:
  9792     1D25  3000               	movlw	0
  9793     1D26                     u4370:
  9794     1D26  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  9795     1D27  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  9796     1D28  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  9797     1D29  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  9798     1D2A  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  9799     1D2B  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  9800     1D2C  0008               	return
  9801     1D2D                     __end_of_GenericQueue_IsFull:
  9802                           
  9803                           	psect	text43
  9804     152A                     __ptext43:	
  9805 ;; *************** function _GenericQueue_CopyToArray *****************
  9806 ;; Defined at:
  9807 ;;		line 63 in file "generic_queue.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  q               2   24[BANK1 ] PTR struct .
  9810 ;;		 -> keyboard(100), 
  9811 ;;  array           1   26[BANK1 ] PTR void 
  9812 ;;		 -> inputReport(8), 
  9813 ;; Auto vars:     Size  Location     Type
  9814 ;;  count           1   32[BANK1 ] unsigned char 
  9815 ;;  index           1   31[BANK1 ] unsigned char 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  1    wreg      void 
  9818 ;; Registers used:
  9819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9820 ;; Tracked objects:
  9821 ;;		On entry : 1F/1
  9822 ;;		On exit  : 1F/1
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9825 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9826 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9827 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;Total ram usage:        9 bytes
  9830 ;; Hardware stack levels used: 1
  9831 ;; Hardware stack levels required when called: 11
  9832 ;; This function calls:
  9833 ;;		___awmod
  9834 ;;		___bmul
  9835 ;;		___wmul
  9836 ;;		_memcpy
  9837 ;; This function is called by:
  9838 ;;		_APP_KeyboardTasks
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842     152A                     _GenericQueue_CopyToArray:	
  9843                           ;psect for function _GenericQueue_CopyToArray
  9844                           
  9845                           
  9846                           ;generic_queue.c: 64:     uint8_t index = q->front;
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9850     152A  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9851     152B  3E5C               	addlw	92
  9852     152C  0086               	movwf	6
  9853     152D  3000               	movlw	0
  9854     152E  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9855     152F  0087               	movwf	7
  9856     1530  0801               	movf	1,w
  9857     1531  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  9858                           
  9859                           ;generic_queue.c: 65:     uint8_t count = 0;
  9860     1532  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  9861     1533                     l1163:	
  9862                           ;generic_queue.c: 72:     }
  9863                           
  9864                           ;generic_queue.c: 66:     while (count < q->size) {
  9865                           
  9866                           
  9867                           ;generic_queue.c: 66:     while (count < q->size) {
  9868     1533  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9869     1534  3E5E               	addlw	94
  9870     1535  0086               	movwf	6
  9871     1536  3000               	movlw	0
  9872     1537  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9873     1538  0087               	movwf	7
  9874     1539  0801               	movf	1,w
  9875     153A  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  9876     153B  1803               	btfsc	3,0
  9877     153C  0008               	return
  9878                           
  9879                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  9880     153D  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  9881     153E  00A8               	movwf	___bmul@multiplicand^(0+128)
  9882     153F  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9883     1540  3E5A               	addlw	90
  9884     1541  0086               	movwf	6
  9885     1542  3000               	movlw	0
  9886     1543  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9887     1544  0087               	movwf	7
  9888     1545  0801               	movf	1,w
  9889     1546  319C  24D0  3195   	fcall	___bmul
  9890     1549  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  9891     154A  00B5               	movwf	memcpy@d1^(0+128)
  9892     154B  01B6               	clrf	(memcpy@d1+1)^(0+128)
  9893     154C  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  9894     154D  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  9895     154E  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  9896     154F  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  9897     1550  00AF               	movwf	___wmul@multiplier^(0+128)
  9898     1551  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  9899     1552  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9900     1553  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9901     1554  3E5A               	addlw	90
  9902     1555  0086               	movwf	6
  9903     1556  3000               	movlw	0
  9904     1557  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9905     1558  0087               	movwf	7
  9906     1559  3F40               	moviw [0]fsr1
  9907     155A  00B1               	movwf	___wmul@multiplicand^(0+128)
  9908     155B  3F41               	moviw [1]fsr1
  9909     155C  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9910     155D  319E  2603  3195   	fcall	___wmul
  9911     1560  082F               	movf	?___wmul^(0+128),w
  9912     1561  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  9913     1562  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  9914     1563  0830               	movf	(?___wmul+1)^(0+128),w
  9915     1564  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9916     1565  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  9917     1566  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  9918     1567  00B7               	movwf	memcpy@s1^(0+128)
  9919     1568  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  9920     1569  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9921     156A  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9922     156B  3E5A               	addlw	90
  9923     156C  0086               	movwf	6
  9924     156D  3000               	movlw	0
  9925     156E  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9926     156F  0087               	movwf	7
  9927     1570  3F40               	moviw [0]fsr1
  9928     1571  00B9               	movwf	memcpy@n^(0+128)
  9929     1572  3F41               	moviw [1]fsr1
  9930     1573  00BA               	movwf	(memcpy@n+1)^(0+128)
  9931     1574  319F  275B  3195   	fcall	_memcpy
  9932                           
  9933                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  9934     1577  300F               	movlw	15
  9935     1578  00A8               	movwf	___awmod@divisor^(0+128)
  9936     1579  3000               	movlw	0
  9937     157A  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9938     157B  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  9939     157C  3E01               	addlw	1
  9940     157D  00AA               	movwf	___awmod@dividend^(0+128)
  9941     157E  3000               	movlw	0
  9942     157F  1803               	skipnc
  9943     1580  3001               	movlw	1
  9944     1581  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9945     1582  3192  2298  3195   	fcall	___awmod
  9946     1585  0828               	movf	?___awmod^(0+128),w
  9947     1586  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  9948                           
  9949                           ;generic_queue.c: 71:         count++;
  9950     1587  3001               	movlw	1
  9951     1588  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  9952     1589  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  9953     158A  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  9954     158B  2D33               	goto	l1163
  9955     158C                     __end_of_GenericQueue_CopyToArray:
  9956                           
  9957                           	psect	text44
  9958     1F5B                     __ptext44:	
  9959 ;; *************** function _memcpy *****************
  9960 ;; Defined at:
  9961 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;  d1              2   13[BANK1 ] PTR void 
  9964 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  9965 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
  9966 ;;  s1              2   15[BANK1 ] PTR const void 
  9967 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  9968 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), keyboard(100), CtrlTrfData(8), 
  9969 ;;		 -> SetupPkt(8), 
  9970 ;;  n               2   17[BANK1 ] unsigned int 
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  9973 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  9974 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), keyboard(100), CtrlTrfData(8), 
  9975 ;;		 -> SetupPkt(8), 
  9976 ;;  d               2   19[BANK1 ] PTR unsigned char 
  9977 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  9978 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
  9979 ;;  tmp             1   23[BANK1 ] unsigned char 
  9980 ;; Return value:  Size  Location     Type
  9981 ;;                  2   13[BANK1 ] PTR void 
  9982 ;; Registers used:
  9983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9984 ;; Tracked objects:
  9985 ;;		On entry : 1F/1
  9986 ;;		On exit  : 1F/1
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9989 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;Total ram usage:       11 bytes
  9994 ;; Hardware stack levels used: 1
  9995 ;; Hardware stack levels required when called: 10
  9996 ;; This function calls:
  9997 ;;		Nothing
  9998 ;; This function is called by:
  9999 ;;		_GenericQueue_Enqueue
 10000 ;;		_GenericQueue_Dequeue
 10001 ;;		_GenericQueue_Remove
 10002 ;;		_GenericQueue_CopyToArray
 10003 ;; This function uses a non-reentrant model
 10004 ;;
 10005                           
 10006     1F5B                     _memcpy:	
 10007                           ;psect for function _memcpy
 10008                           
 10009                           
 10010                           ;incstack = 0
 10011                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 10012     1F5B  0838               	movf	(memcpy@s1+1)^(0+128),w
 10013     1F5C  00BE               	movwf	(memcpy@s+1)^(0+128)
 10014     1F5D  0837               	movf	memcpy@s1^(0+128),w
 10015     1F5E  00BD               	movwf	memcpy@s^(0+128)
 10016     1F5F  0836               	movf	(memcpy@d1+1)^(0+128),w
 10017     1F60  00BC               	movwf	(memcpy@d+1)^(0+128)
 10018     1F61  0835               	movf	memcpy@d1^(0+128),w
 10019     1F62  00BB               	movwf	memcpy@d^(0+128)
 10020     1F63                     l4910:
 10021     1F63  3001               	movlw	1
 10022     1F64  02B9               	subwf	memcpy@n^(0+128),f
 10023     1F65  3000               	movlw	0
 10024     1F66  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
 10025     1F67  0A39               	incf	memcpy@n^(0+128),w
 10026     1F68  1903               	btfsc	3,2
 10027     1F69  0A3A               	incf	(memcpy@n+1)^(0+128),w
 10028     1F6A  1903               	btfsc	3,2
 10029     1F6B  0008               	return
 10030     1F6C  083D               	movf	memcpy@s^(0+128),w
 10031     1F6D  0086               	movwf	6
 10032     1F6E  083E               	movf	(memcpy@s+1)^(0+128),w
 10033     1F6F  0087               	movwf	7
 10034     1F70  0801               	movf	1,w
 10035     1F71  00BF               	movwf	memcpy@tmp^(0+128)
 10036     1F72  3001               	movlw	1
 10037     1F73  07BD               	addwf	memcpy@s^(0+128),f
 10038     1F74  3000               	movlw	0
 10039     1F75  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
 10040     1F76  083B               	movf	memcpy@d^(0+128),w
 10041     1F77  0086               	movwf	6
 10042     1F78  083C               	movf	(memcpy@d+1)^(0+128),w
 10043     1F79  0087               	movwf	7
 10044     1F7A  083F               	movf	memcpy@tmp^(0+128),w
 10045     1F7B  0081               	movwf	1
 10046     1F7C  3001               	movlw	1
 10047     1F7D  07BB               	addwf	memcpy@d^(0+128),f
 10048     1F7E  3000               	movlw	0
 10049     1F7F  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
 10050     1F80  2F63               	goto	l4910
 10051     1F81                     __end_of_memcpy:
 10052                           
 10053                           	psect	text45
 10054     1CD0                     __ptext45:	
 10055 ;; *************** function ___bmul *****************
 10056 ;; Defined at:
 10057 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  multiplier      1    wreg     unsigned char 
 10060 ;;  multiplicand    1    0[BANK1 ] unsigned char 
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;  multiplier      1    3[BANK1 ] unsigned char 
 10063 ;;  product         1    2[BANK1 ] unsigned char 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  1    wreg      unsigned char 
 10066 ;; Registers used:
 10067 ;;		wreg, status,2, status,0
 10068 ;; Tracked objects:
 10069 ;;		On entry : 1F/1
 10070 ;;		On exit  : 1F/1
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10073 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;Total ram usage:        4 bytes
 10078 ;; Hardware stack levels used: 1
 10079 ;; Hardware stack levels required when called: 10
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_GenericQueue_CopyToArray
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087     1CD0                     ___bmul:	
 10088                           ;psect for function ___bmul
 10089                           
 10090                           
 10091                           ;incstack = 0
 10092                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 10093                           ;___bmul@multiplier stored from wreg
 10094     1CD0  00AB               	movwf	___bmul@multiplier^(0+128)
 10095     1CD1  01AA               	clrf	___bmul@product^(0+128)
 10096     1CD2                     l5088:
 10097     1CD2  1C2B               	btfss	___bmul@multiplier^(0+128),0
 10098     1CD3  2CD8               	goto	l5092
 10099     1CD4  0828               	movf	___bmul@multiplicand^(0+128),w
 10100     1CD5  00A9               	movwf	??___bmul^(0+128)
 10101     1CD6  0829               	movf	??___bmul^(0+128),w
 10102     1CD7  07AA               	addwf	___bmul@product^(0+128),f
 10103     1CD8                     l5092:
 10104     1CD8  1003               	clrc
 10105     1CD9  0DA8               	rlf	___bmul@multiplicand^(0+128),f
 10106     1CDA  1003               	clrc
 10107     1CDB  0CAB               	rrf	___bmul@multiplier^(0+128),f
 10108     1CDC  082B               	movf	___bmul@multiplier^(0+128),w
 10109     1CDD  1D03               	btfss	3,2
 10110     1CDE  2CD2               	goto	l5088
 10111     1CDF  082A               	movf	___bmul@product^(0+128),w
 10112     1CE0  0008               	return
 10113     1CE1                     __end_of___bmul:
 10114                           
 10115                           	psect	text46
 10116     14C8                     __ptext46:	
 10117 ;; *************** function _GenericQueue_Contains *****************
 10118 ;; Defined at:
 10119 ;;		line 52 in file "generic_queue.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;  q               2   22[BANK1 ] PTR struct .
 10122 ;;		 -> keyboard(100), 
 10123 ;;  item            1   24[BANK1 ] PTR const void 
 10124 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
 10125 ;; Auto vars:     Size  Location     Type
 10126 ;;  i               1   29[BANK1 ] unsigned char 
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  1    wreg      _Bool 
 10129 ;; Registers used:
 10130 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10131 ;; Tracked objects:
 10132 ;;		On entry : 1F/1
 10133 ;;		On exit  : 1F/1
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10136 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;Total ram usage:        8 bytes
 10141 ;; Hardware stack levels used: 1
 10142 ;; Hardware stack levels required when called: 11
 10143 ;; This function calls:
 10144 ;;		_GenericQueue_IsEmpty
 10145 ;;		___awmod
 10146 ;;		___wmul
 10147 ;;		_memcmp
 10148 ;; This function is called by:
 10149 ;;		_APP_KeyboardTasks
 10150 ;; This function uses a non-reentrant model
 10151 ;;
 10152                           
 10153     14C8                     _GenericQueue_Contains:	
 10154                           ;psect for function _GenericQueue_Contains
 10155                           
 10156                           
 10157                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
 10158                           
 10159                           ;incstack = 0
 10160                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10161     14C8  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
 10162     14C9  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
 10163     14CA  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10164     14CB  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
 10165     14CC  319C  24F2  3194   	fcall	_GenericQueue_IsEmpty
 10166     14CF  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
 10167     14D0  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
 10168     14D1  1D03               	btfss	3,2
 10169     14D2  2D28               	goto	l5566
 10170                           
 10171                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
 10172     14D3  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10173     14D4  3E5C               	addlw	92
 10174     14D5  0086               	movwf	6
 10175     14D6  3000               	movlw	0
 10176     14D7  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10177     14D8  0087               	movwf	7
 10178     14D9  0801               	movf	1,w
 10179     14DA                     L7:
 10180     14DA  00C5               	movwf	GenericQueue_Contains@i^(0+128)
 10181     14DB  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10182     14DC  3E5D               	addlw	93
 10183     14DD  0086               	movwf	6
 10184     14DE  3000               	movlw	0
 10185     14DF  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10186     14E0  0087               	movwf	7
 10187     14E1  0801               	movf	1,w
 10188     14E2  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
 10189     14E3  1903               	btfsc	3,2
 10190     14E4  2D28               	goto	l5566
 10191                           
 10192                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
 10193     14E5  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10194     14E6  00C1               	movwf	??_GenericQueue_Contains^(0+128)
 10195     14E7  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
 10196     14E8  0841               	movf	??_GenericQueue_Contains^(0+128),w
 10197     14E9  00AF               	movwf	___wmul@multiplier^(0+128)
 10198     14EA  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
 10199     14EB  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
 10200     14EC  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10201     14ED  3E5A               	addlw	90
 10202     14EE  0086               	movwf	6
 10203     14EF  3000               	movlw	0
 10204     14F0  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10205     14F1  0087               	movwf	7
 10206     14F2  3F40               	moviw [0]fsr1
 10207     14F3  00B1               	movwf	___wmul@multiplicand^(0+128)
 10208     14F4  3F41               	moviw [1]fsr1
 10209     14F5  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
 10210     14F6  319E  2603  3194   	fcall	___wmul
 10211     14F9  082F               	movf	?___wmul^(0+128),w
 10212     14FA  073E               	addwf	GenericQueue_Contains@q^(0+128),w
 10213     14FB  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
 10214     14FC  0830               	movf	(?___wmul+1)^(0+128),w
 10215     14FD  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10216     14FE  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
 10217     14FF  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
 10218     1500  00B5               	movwf	memcmp@vl^(0+128)
 10219     1501  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
 10220     1502  00B6               	movwf	(memcmp@vl+1)^(0+128)
 10221     1503  0840               	movf	GenericQueue_Contains@item^(0+128),w
 10222     1504  00B7               	movwf	memcmp@vr^(0+128)
 10223     1505  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10224     1506  3E5A               	addlw	90
 10225     1507  0086               	movwf	6
 10226     1508  3000               	movlw	0
 10227     1509  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10228     150A  0087               	movwf	7
 10229     150B  3F40               	moviw [0]fsr1
 10230     150C  00B8               	movwf	memcmp@n^(0+128)
 10231     150D  3F41               	moviw [1]fsr1
 10232     150E  00B9               	movwf	(memcmp@n+1)^(0+128)
 10233     150F  3190  20A8  3194   	fcall	_memcmp
 10234     1512  0835               	movf	?_memcmp^(0+128),w
 10235     1513  0436               	iorwf	(?_memcmp+1)^(0+128),w
 10236     1514  1D03               	btfss	3,2
 10237     1515  2D18               	goto	l5562
 10238                           
 10239                           ;generic_queue.c: 56:                 return 1;
 10240     1516  3001               	movlw	1
 10241     1517  0008               	return
 10242     1518                     l5562:
 10243                           
 10244                           ;generic_queue.c: 58:         }
 10245     1518  300F               	movlw	15
 10246     1519  00A8               	movwf	___awmod@divisor^(0+128)
 10247     151A  3000               	movlw	0
 10248     151B  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10249     151C  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10250     151D  3E01               	addlw	1
 10251     151E  00AA               	movwf	___awmod@dividend^(0+128)
 10252     151F  3000               	movlw	0
 10253     1520  1803               	skipnc
 10254     1521  3001               	movlw	1
 10255     1522  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10256     1523  3192  2298  3194   	fcall	___awmod
 10257     1526  0828               	movf	?___awmod^(0+128),w
 10258     1527  2CDA               	goto	L7
 10259     1528                     l5566:
 10260                           
 10261                           ;generic_queue.c: 60:     return 0;
 10262     1528  3000               	movlw	0
 10263     1529  0008               	return
 10264     152A                     __end_of_GenericQueue_Contains:
 10265                           
 10266                           	psect	text47
 10267     10A8                     __ptext47:	
 10268 ;; *************** function _memcmp *****************
 10269 ;; Defined at:
 10270 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
 10271 ;; Parameters:    Size  Location     Type
 10272 ;;  vl              2   13[BANK1 ] PTR const void 
 10273 ;;		 -> keyboard$buffer(90), keyboard(100), 
 10274 ;;  vr              1   15[BANK1 ] PTR const void 
 10275 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode_2876(1)
      +, APP_KeyboardTasks@usbHidCode(1), 
 10276 ;;  n               2   16[BANK1 ] unsigned int 
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  l               2   19[BANK1 ] PTR const unsigned char 
 10279 ;;		 -> keyboard$buffer(90), keyboard(100), 
 10280 ;;  r               1   21[BANK1 ] PTR const unsigned char 
 10281 ;;		 -> APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2877(1), APP_KeyboardTasks@usbHidCode_2876(1)
      +, APP_KeyboardTasks@usbHidCode(1), 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  2   13[BANK1 ] int 
 10284 ;; Registers used:
 10285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10286 ;; Tracked objects:
 10287 ;;		On entry : 1F/1
 10288 ;;		On exit  : 1F/1
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10291 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10292 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10293 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10294 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 10295 ;;Total ram usage:        9 bytes
 10296 ;; Hardware stack levels used: 1
 10297 ;; Hardware stack levels required when called: 10
 10298 ;; This function calls:
 10299 ;;		Nothing
 10300 ;; This function is called by:
 10301 ;;		_GenericQueue_Remove
 10302 ;;		_GenericQueue_Contains
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306     10A8                     _memcmp:	
 10307                           ;psect for function _memcmp
 10308                           
 10309                           
 10310                           ;incstack = 0
 10311                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
 10312     10A8  0836               	movf	(memcmp@vl+1)^(0+128),w
 10313     10A9  00BC               	movwf	(memcmp@l+1)^(0+128)
 10314     10AA  0835               	movf	memcmp@vl^(0+128),w
 10315     10AB  00BB               	movwf	memcmp@l^(0+128)
 10316     10AC  0837               	movf	memcmp@vr^(0+128),w
 10317     10AD  00BD               	movwf	memcmp@r^(0+128)
 10318     10AE  28C6               	goto	l5074
 10319     10AF                     l5076:
 10320     10AF  083D               	movf	memcmp@r^(0+128),w
 10321     10B0  0086               	movwf	6
 10322     10B1  0187               	clrf	7
 10323     10B2  083B               	movf	memcmp@l^(0+128),w
 10324     10B3  0084               	movwf	4
 10325     10B4  083C               	movf	(memcmp@l+1)^(0+128),w
 10326     10B5  0085               	movwf	5
 10327     10B6  0800               	movf	0,w
 10328     10B7  0601               	xorwf	1,w
 10329     10B8  1D03               	btfss	3,2
 10330     10B9  28CA               	goto	l5078
 10331     10BA  3001               	movlw	1
 10332     10BB  02B8               	subwf	memcmp@n^(0+128),f
 10333     10BC  3000               	movlw	0
 10334     10BD  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
 10335     10BE  3001               	movlw	1
 10336     10BF  07BB               	addwf	memcmp@l^(0+128),f
 10337     10C0  3000               	movlw	0
 10338     10C1  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
 10339     10C2  3001               	movlw	1
 10340     10C3  00BA               	movwf	??_memcmp^(0+128)
 10341     10C4  083A               	movf	??_memcmp^(0+128),w
 10342     10C5  07BD               	addwf	memcmp@r^(0+128),f
 10343     10C6                     l5074:
 10344     10C6  0838               	movf	memcmp@n^(0+128),w
 10345     10C7  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10346     10C8  1D03               	btfss	3,2
 10347     10C9  28AF               	goto	l5076
 10348     10CA                     l5078:
 10349     10CA  0838               	movf	memcmp@n^(0+128),w
 10350     10CB  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10351     10CC  1D03               	btfss	3,2
 10352     10CD  28D1               	goto	l5082
 10353     10CE  01B5               	clrf	?_memcmp^(0+128)
 10354     10CF  01B6               	clrf	(?_memcmp+1)^(0+128)
 10355     10D0  0008               	return
 10356     10D1                     l5082:
 10357     10D1  083B               	movf	memcmp@l^(0+128),w
 10358     10D2  0086               	movwf	6
 10359     10D3  083C               	movf	(memcmp@l+1)^(0+128),w
 10360     10D4  0087               	movwf	7
 10361     10D5  083D               	movf	memcmp@r^(0+128),w
 10362     10D6  0084               	movwf	4
 10363     10D7  0185               	clrf	5
 10364     10D8  0800               	movf	0,w
 10365     10D9  0201               	subwf	1,w
 10366     10DA  00B5               	movwf	?_memcmp^(0+128)
 10367     10DB  01B6               	clrf	(?_memcmp^(0+128)+1)
 10368     10DC  1C03               	skipc
 10369     10DD  03B6               	decf	(?_memcmp+1)^(0+128),f
 10370     10DE  0008               	return
 10371     10DF                     __end_of_memcmp:
 10372                           
 10373                           	psect	text48
 10374     1E03                     __ptext48:	
 10375 ;; *************** function ___wmul *****************
 10376 ;; Defined at:
 10377 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 10378 ;; Parameters:    Size  Location     Type
 10379 ;;  multiplier      2    7[BANK1 ] unsigned int 
 10380 ;;  multiplicand    2    9[BANK1 ] unsigned int 
 10381 ;; Auto vars:     Size  Location     Type
 10382 ;;  product         2   11[BANK1 ] unsigned int 
 10383 ;; Return value:  Size  Location     Type
 10384 ;;                  2    7[BANK1 ] unsigned int 
 10385 ;; Registers used:
 10386 ;;		wreg, status,2, status,0
 10387 ;; Tracked objects:
 10388 ;;		On entry : 1F/1
 10389 ;;		On exit  : 1F/1
 10390 ;;		Unchanged: 0/0
 10391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10392 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;Total ram usage:        6 bytes
 10397 ;; Hardware stack levels used: 1
 10398 ;; Hardware stack levels required when called: 10
 10399 ;; This function calls:
 10400 ;;		Nothing
 10401 ;; This function is called by:
 10402 ;;		_GenericQueue_Enqueue
 10403 ;;		_GenericQueue_Dequeue
 10404 ;;		_GenericQueue_Remove
 10405 ;;		_GenericQueue_Contains
 10406 ;;		_GenericQueue_CopyToArray
 10407 ;;		_read_prec_or_width
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411     1E03                     ___wmul:	
 10412                           ;psect for function ___wmul
 10413                           
 10414                           
 10415                           ;incstack = 0
 10416                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10417     1E03  01B3               	clrf	___wmul@product^(0+128)
 10418     1E04  01B4               	clrf	(___wmul@product+1)^(0+128)
 10419     1E05                     l4544:
 10420     1E05  1C2F               	btfss	___wmul@multiplier^(0+128),0
 10421     1E06  2E0B               	goto	l1234
 10422     1E07  0831               	movf	___wmul@multiplicand^(0+128),w
 10423     1E08  07B3               	addwf	___wmul@product^(0+128),f
 10424     1E09  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
 10425     1E0A  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
 10426     1E0B                     l1234:
 10427     1E0B  3001               	movlw	1
 10428     1E0C                     u3635:
 10429     1E0C  35B1               	lslf	___wmul@multiplicand^(0+128),f
 10430     1E0D  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
 10431     1E0E  0B89               	decfsz	9,f
 10432     1E0F  2E0C               	goto	u3635
 10433     1E10  3001               	movlw	1
 10434     1E11                     u3645:
 10435     1E11  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
 10436     1E12  0CAF               	rrf	___wmul@multiplier^(0+128),f
 10437     1E13  0B89               	decfsz	9,f
 10438     1E14  2E11               	goto	u3645
 10439     1E15  082F               	movf	___wmul@multiplier^(0+128),w
 10440     1E16  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
 10441     1E17  1D03               	btfss	3,2
 10442     1E18  2E05               	goto	l4544
 10443     1E19  0834               	movf	(___wmul@product+1)^(0+128),w
 10444     1E1A  00B0               	movwf	(?___wmul+1)^(0+128)
 10445     1E1B  0833               	movf	___wmul@product^(0+128),w
 10446     1E1C  00AF               	movwf	?___wmul^(0+128)
 10447     1E1D  0008               	return
 10448     1E1E                     __end_of___wmul:
 10449                           
 10450                           	psect	text49
 10451     1298                     __ptext49:	
 10452 ;; *************** function ___awmod *****************
 10453 ;; Defined at:
 10454 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;  divisor         2    0[BANK1 ] int 
 10457 ;;  dividend        2    2[BANK1 ] int 
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;  sign            1    6[BANK1 ] unsigned char 
 10460 ;;  counter         1    5[BANK1 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  2    0[BANK1 ] int 
 10463 ;; Registers used:
 10464 ;;		wreg, status,2, status,0
 10465 ;; Tracked objects:
 10466 ;;		On entry : 1F/1
 10467 ;;		On exit  : 1F/1
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10470 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;Total ram usage:        7 bytes
 10475 ;; Hardware stack levels used: 1
 10476 ;; Hardware stack levels required when called: 10
 10477 ;; This function calls:
 10478 ;;		Nothing
 10479 ;; This function is called by:
 10480 ;;		_GenericQueue_Enqueue
 10481 ;;		_GenericQueue_Dequeue
 10482 ;;		_GenericQueue_Remove
 10483 ;;		_GenericQueue_Contains
 10484 ;;		_GenericQueue_CopyToArray
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488     1298                     ___awmod:	
 10489                           ;psect for function ___awmod
 10490                           
 10491                           
 10492                           ;incstack = 0
 10493                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10494     1298  01AE               	clrf	___awmod@sign^(0+128)
 10495     1299  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
 10496     129A  2AA2               	goto	l5108
 10497     129B  09AA               	comf	___awmod@dividend^(0+128),f
 10498     129C  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10499     129D  0AAA               	incf	___awmod@dividend^(0+128),f
 10500     129E  1903               	skipnz
 10501     129F  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10502     12A0  01AE               	clrf	___awmod@sign^(0+128)
 10503     12A1  0AAE               	incf	___awmod@sign^(0+128),f
 10504     12A2                     l5108:
 10505     12A2  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
 10506     12A3  2AA9               	goto	l5112
 10507     12A4  09A8               	comf	___awmod@divisor^(0+128),f
 10508     12A5  09A9               	comf	(___awmod@divisor+1)^(0+128),f
 10509     12A6  0AA8               	incf	___awmod@divisor^(0+128),f
 10510     12A7  1903               	skipnz
 10511     12A8  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
 10512     12A9                     l5112:
 10513     12A9  0828               	movf	___awmod@divisor^(0+128),w
 10514     12AA  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
 10515     12AB  1903               	btfsc	3,2
 10516     12AC  2AD0               	goto	l5130
 10517     12AD  01AD               	clrf	___awmod@counter^(0+128)
 10518     12AE  0AAD               	incf	___awmod@counter^(0+128),f
 10519     12AF                     l5120:
 10520     12AF  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
 10521     12B0  2ABB               	goto	l5122
 10522     12B1  3001               	movlw	1
 10523     12B2                     u4465:
 10524     12B2  35A8               	lslf	___awmod@divisor^(0+128),f
 10525     12B3  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
 10526     12B4  0B89               	decfsz	9,f
 10527     12B5  2AB2               	goto	u4465
 10528     12B6  3001               	movlw	1
 10529     12B7  00AC               	movwf	??___awmod^(0+128)
 10530     12B8  082C               	movf	??___awmod^(0+128),w
 10531     12B9  07AD               	addwf	___awmod@counter^(0+128),f
 10532     12BA  2AAF               	goto	l5120
 10533     12BB                     l5122:
 10534     12BB  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10535     12BC  022B               	subwf	(___awmod@dividend+1)^(0+128),w
 10536     12BD  1D03               	skipz
 10537     12BE  2AC1               	goto	u4485
 10538     12BF  0828               	movf	___awmod@divisor^(0+128),w
 10539     12C0  022A               	subwf	___awmod@dividend^(0+128),w
 10540     12C1                     u4485:
 10541     12C1  1C03               	skipc
 10542     12C2  2AC7               	goto	l5126
 10543     12C3  0828               	movf	___awmod@divisor^(0+128),w
 10544     12C4  02AA               	subwf	___awmod@dividend^(0+128),f
 10545     12C5  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10546     12C6  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
 10547     12C7                     l5126:
 10548     12C7  3001               	movlw	1
 10549     12C8                     u4495:
 10550     12C8  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
 10551     12C9  0CA8               	rrf	___awmod@divisor^(0+128),f
 10552     12CA  0B89               	decfsz	9,f
 10553     12CB  2AC8               	goto	u4495
 10554     12CC  3001               	movlw	1
 10555     12CD  02AD               	subwf	___awmod@counter^(0+128),f
 10556     12CE  1D03               	btfss	3,2
 10557     12CF  2ABB               	goto	l5122
 10558     12D0                     l5130:
 10559     12D0  082E               	movf	___awmod@sign^(0+128),w
 10560     12D1  1903               	btfsc	3,2
 10561     12D2  2AD8               	goto	l5134
 10562     12D3  09AA               	comf	___awmod@dividend^(0+128),f
 10563     12D4  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10564     12D5  0AAA               	incf	___awmod@dividend^(0+128),f
 10565     12D6  1903               	skipnz
 10566     12D7  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10567     12D8                     l5134:
 10568     12D8  082B               	movf	(___awmod@dividend+1)^(0+128),w
 10569     12D9  00A9               	movwf	(?___awmod+1)^(0+128)
 10570     12DA  082A               	movf	___awmod@dividend^(0+128),w
 10571     12DB  00A8               	movwf	?___awmod^(0+128)
 10572     12DC  0008               	return
 10573     12DD                     __end_of___awmod:
 10574                           
 10575                           	psect	text50
 10576     1CF2                     __ptext50:	
 10577 ;; *************** function _GenericQueue_IsEmpty *****************
 10578 ;; Defined at:
 10579 ;;		line 11 in file "generic_queue.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;  q               2    0[BANK1 ] PTR struct .
 10582 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 10583 ;; Auto vars:     Size  Location     Type
 10584 ;;		None
 10585 ;; Return value:  Size  Location     Type
 10586 ;;                  2    0[BANK1 ] int 
 10587 ;; Registers used:
 10588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10589 ;; Tracked objects:
 10590 ;;		On entry : 1F/1
 10591 ;;		On exit  : 1F/1
 10592 ;;		Unchanged: 0/0
 10593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10594 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;Total ram usage:        4 bytes
 10599 ;; Hardware stack levels used: 1
 10600 ;; Hardware stack levels required when called: 10
 10601 ;; This function calls:
 10602 ;;		Nothing
 10603 ;; This function is called by:
 10604 ;;		_PS2Keyboard_GetScanCode
 10605 ;;		_GenericQueue_Dequeue
 10606 ;;		_GenericQueue_Remove
 10607 ;;		_GenericQueue_Contains
 10608 ;; This function uses a non-reentrant model
 10609 ;;
 10610                           
 10611     1CF2                     _GenericQueue_IsEmpty:	
 10612                           ;psect for function _GenericQueue_IsEmpty
 10613                           
 10614                           
 10615                           ;generic_queue.c: 12:     return (q->size == 0);
 10616                           
 10617                           ;incstack = 0
 10618                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
 10619     1CF2  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
 10620     1CF3  3E5E               	addlw	94
 10621     1CF4  0086               	movwf	6
 10622     1CF5  3000               	movlw	0
 10623     1CF6  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
 10624     1CF7  0087               	movwf	7
 10625     1CF8  0801               	movf	1,w
 10626     1CF9  1D03               	btfss	3,2
 10627     1CFA  2CFD               	goto	u4250
 10628     1CFB  3001               	movlw	1
 10629     1CFC  2CFE               	goto	u4260
 10630     1CFD                     u4250:
 10631     1CFD  3000               	movlw	0
 10632     1CFE                     u4260:
 10633     1CFE  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
 10634     1CFF  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
 10635     1D00  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
 10636     1D01  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
 10637     1D02  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
 10638     1D03  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
 10639     1D04  0008               	return
 10640     1D05                     __end_of_GenericQueue_IsEmpty:
 10641                           
 10642                           	psect	text51
 10643     1BF2                     __ptext51:	
 10644 ;; *************** function _APP_KeyboardProcessOutputReport *****************
 10645 ;; Defined at:
 10646 ;;		line 487 in file "app_device_keyboard.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      void 
 10653 ;; Registers used:
 10654 ;;		wreg
 10655 ;; Tracked objects:
 10656 ;;		On entry : 1D/1
 10657 ;;		On exit  : 1F/2
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;Total ram usage:        0 bytes
 10665 ;; Hardware stack levels used: 1
 10666 ;; Hardware stack levels required when called: 10
 10667 ;; This function calls:
 10668 ;;		Nothing
 10669 ;; This function is called by:
 10670 ;;		_APP_KeyboardTasks
 10671 ;; This function uses a non-reentrant model
 10672 ;;
 10673                           
 10674     1BF2                     _APP_KeyboardProcessOutputReport:	
 10675                           ;psect for function _APP_KeyboardProcessOutputReport
 10676                           
 10677                           
 10678                           ;app_device_keyboard.c: 488:     if (outputReport.leds.capsLock) {
 10679                           
 10680                           ;incstack = 0
 10681                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg]
 10682     1BF2  0022               	movlb	2	; select bank2
 10683     1BF3  0820               	movf	32,w	;volatile
 10684     1BF4  0008               	return
 10685     1BF5                     __end_of_APP_KeyboardProcessOutputReport:
 10686                           
 10687                           	psect	intentry
 10688     0004                     __pintentry:	
 10689 ;; *************** function _INTERRUPT_InterruptManager *****************
 10690 ;; Defined at:
 10691 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10692 ;; Parameters:    Size  Location     Type
 10693 ;;		None
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;		None
 10696 ;; Return value:  Size  Location     Type
 10697 ;;                  1    wreg      void 
 10698 ;; Registers used:
 10699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10700 ;; Tracked objects:
 10701 ;;		On entry : 0/0
 10702 ;;		On exit  : 0/0
 10703 ;;		Unchanged: 0/0
 10704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;Total ram usage:        0 bytes
 10710 ;; Hardware stack levels used: 1
 10711 ;; Hardware stack levels required when called: 9
 10712 ;; This function calls:
 10713 ;;		NULL
 10714 ;;		_EUSART_Receive_ISR
 10715 ;;		_EUSART_Transmit_ISR
 10716 ;;		_PIN_MANAGER_IOC
 10717 ;;		_TMR2_ISR
 10718 ;;		_USBDeviceTasks
 10719 ;; This function is called by:
 10720 ;;		Interrupt level 1
 10721 ;; This function uses a non-reentrant model
 10722 ;;
 10723                           
 10724     0004                     _INTERRUPT_InterruptManager:
 10725                           
 10726                           ;incstack = 0
 10727 ;; hardware stack exceeded
 10728     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10729                           
 10730                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10731     0005  3180               	pagesel	$
 10732                           
 10733                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 10734     0006  198B               	btfsc	11,3	;volatile
 10735     0007  1C0B               	btfss	11,0	;volatile
 10736     0008  280D               	goto	i1l141
 10737                           
 10738                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 10739     0009  319C  2461  3180   	fcall	_PIN_MANAGER_IOC
 10740                           
 10741                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 10742     000C  283B               	goto	i1l153
 10743     000D                     i1l141:	
 10744                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 10745                           
 10746     000D  1F0B               	btfss	11,6	;volatile
 10747     000E  283B               	goto	i1l153
 10748                           
 10749                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
 10750     000F  0021               	movlb	1	; select bank1
 10751     0010  1D12               	btfss	18,2	;volatile
 10752     0011  2819               	goto	i1l144
 10753     0012  0020               	movlb	0	; select bank0
 10754     0013  1D12               	btfss	18,2	;volatile
 10755     0014  2819               	goto	i1l144
 10756                           
 10757                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
 10758     0015  3186  26C3  3180   	fcall	_USBDeviceTasks
 10759                           
 10760                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 10761     0018  283B               	goto	i1l153
 10762     0019                     i1l144:	
 10763                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
 10764                           
 10765     0019  0021               	movlb	1	; select bank1
 10766     001A  1E11               	btfss	17,4	;volatile
 10767     001B  2826               	goto	i1l146
 10768     001C  0020               	movlb	0	; select bank0
 10769     001D  1E11               	btfss	17,4	;volatile
 10770     001E  2826               	goto	i1l146
 10771                           
 10772                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
 10773     001F  0023               	movlb	3	; select bank3
 10774     0020  085C               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384),w
 10775     0021  008A               	movwf	10
 10776     0022  085B               	movf	_EUSART_TxDefaultInterruptHandler^(0+384),w
 10777     0023  000A               	callw
 10778     0024  3180               	pagesel	$
 10779                           
 10780                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 10781     0025  283B               	goto	i1l153
 10782     0026                     i1l146:	
 10783                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 10784                           
 10785     0026  0021               	movlb	1	; select bank1
 10786     0027  1E91               	btfss	17,5	;volatile
 10787     0028  2833               	goto	i1l148
 10788     0029  0020               	movlb	0	; select bank0
 10789     002A  1E91               	btfss	17,5	;volatile
 10790     002B  2833               	goto	i1l148
 10791                           
 10792                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
 10793     002C  0023               	movlb	3	; select bank3
 10794     002D  085A               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384),w
 10795     002E  008A               	movwf	10
 10796     002F  0859               	movf	_EUSART_RxDefaultInterruptHandler^(0+384),w
 10797     0030  000A               	callw
 10798     0031  3180               	pagesel	$
 10799                           
 10800                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 10801     0032  283B               	goto	i1l153
 10802     0033                     i1l148:	
 10803                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 10804                           
 10805     0033  0021               	movlb	1	; select bank1
 10806     0034  1C91               	btfss	17,1	;volatile
 10807     0035  283B               	goto	i1l153
 10808     0036  0020               	movlb	0	; select bank0
 10809     0037  1C91               	btfss	17,1	;volatile
 10810     0038  283B               	goto	i1l153
 10811                           
 10812                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
 10813     0039  319C  2477         	fcall	_TMR2_ISR
 10814     003B                     i1l153:	
 10815                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 10816                           
 10817     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10818     003C  0009               	retfie
 10819     003D                     __end_of_INTERRUPT_InterruptManager:
 10820                           
 10821                           	psect	text53
 10822     06C3                     __ptext53:	
 10823 ;; *************** function _USBDeviceTasks *****************
 10824 ;; Defined at:
 10825 ;;		line 481 in file "usb/usb_device.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;		None
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;  i               1   16[BANK0 ] unsigned char 
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      void 
 10832 ;; Registers used:
 10833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10834 ;; Tracked objects:
 10835 ;;		On entry : 1F/0
 10836 ;;		On exit  : 1F/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;Total ram usage:        2 bytes
 10844 ;; Hardware stack levels used: 1
 10845 ;; Hardware stack levels required when called: 8
 10846 ;; This function calls:
 10847 ;;		_USBCtrlEPAllowStatusStage
 10848 ;;		_USBCtrlEPService
 10849 ;;		_USBIncrement1msInternalTimers
 10850 ;;		_USBStallHandler
 10851 ;;		_USBSuspend
 10852 ;;		_USBWakeFromSuspend
 10853 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10854 ;;		i1_USBDeviceInit
 10855 ;; This function is called by:
 10856 ;;		_INTERRUPT_InterruptManager
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860     06C3                     _USBDeviceTasks:	
 10861                           ;psect for function _USBDeviceTasks
 10862                           
 10863                           
 10864                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
 10865                           
 10866                           ;incstack = 0
 10867 ;; hardware stack exceeded
 10868                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10869     06C3  036B               	decf	_USBDeviceState,w
 10870     06C4  1D03               	btfss	3,2
 10871     06C5  2ECF               	goto	i1l6452
 10872                           
 10873                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
 10874     06C6  003D               	movlb	29	; select bank29
 10875     06C7  1A8E               	btfsc	14,5	;volatile
 10876     06C8  2ECF               	goto	i1l6452
 10877                           
 10878                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
 10879     06C9  0190               	clrf	16	;volatile
 10880                           
 10881                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
 10882     06CA  1412               	bsf	18,0	;volatile
 10883                           
 10884                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
 10885     06CB  1612               	bsf	18,4	;volatile
 10886                           
 10887                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
 10888     06CC  3002               	movlw	2
 10889     06CD  0020               	movlb	0	; select bank0
 10890     06CE  00EB               	movwf	_USBDeviceState	;volatile
 10891     06CF                     i1l6452:
 10892                           
 10893                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
 10894     06CF  003D               	movlb	29	; select bank29
 10895     06D0  1910               	btfsc	16,2	;volatile
 10896     06D1  1D12               	btfss	18,2	;volatile
 10897     06D2  2EDC               	goto	i1l6460
 10898                           
 10899                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
 10900     06D3  30FB               	movlw	251
 10901     06D4  0020               	movlb	0	; select bank0
 10902     06D5  00DF               	movwf	??_USBDeviceTasks
 10903     06D6  085F               	movf	??_USBDeviceTasks,w
 10904     06D7  003D               	movlb	29	; select bank29
 10905     06D8  0590               	andwf	16,f	;volatile
 10906                           
 10907                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
 10908     06D9  319E  2655  3186   	fcall	_USBWakeFromSuspend
 10909     06DC                     i1l6460:
 10910                           
 10911                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
 10912     06DC  003D               	movlb	29	; select bank29
 10913     06DD  1C8E               	btfss	14,1	;volatile
 10914     06DE  2EE2               	goto	i1l492
 10915                           
 10916                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
 10917     06DF  0020               	movlb	0	; select bank0
 10918     06E0  1112               	bcf	18,2	;volatile
 10919                           
 10920                           ;usb/usb_device.c: 654:         return;
 10921     06E1  0008               	return
 10922     06E2                     i1l492:	
 10923                           ;usb/usb_device.c: 655:     }
 10924                           
 10925                           
 10926                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
 10927     06E2  1810               	btfsc	16,0	;volatile
 10928     06E3  1C12               	btfss	18,0	;volatile
 10929     06E4  2EF2               	goto	i1l6474
 10930                           
 10931                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
 10932     06E5  318D  2542  3186   	fcall	i1_USBDeviceInit
 10933                           
 10934                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
 10935     06E8  0021               	movlb	1	; select bank1
 10936     06E9  1512               	bsf	18,2	;volatile
 10937                           
 10938                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
 10939     06EA  3004               	movlw	4
 10940     06EB  0020               	movlb	0	; select bank0
 10941     06EC  00EB               	movwf	_USBDeviceState	;volatile
 10942                           
 10943                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
 10944     06ED  30FE               	movlw	254
 10945     06EE  00DF               	movwf	??_USBDeviceTasks
 10946     06EF  085F               	movf	??_USBDeviceTasks,w
 10947     06F0  003D               	movlb	29	; select bank29
 10948     06F1  0590               	andwf	16,f	;volatile
 10949     06F2                     i1l6474:
 10950                           
 10951                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
 10952     06F2  1A10               	btfsc	16,4	;volatile
 10953     06F3  1E12               	btfss	18,4	;volatile
 10954     06F4  2EF8               	goto	i1l6480
 10955                           
 10956                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
 10957     06F5  319D  259F  3186   	fcall	_USBSuspend
 10958     06F8                     i1l6480:
 10959                           
 10960                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
 10961     06F8  003D               	movlb	29	; select bank29
 10962     06F9  1F10               	btfss	16,6	;volatile
 10963     06FA  2F20               	goto	i1l6496
 10964                           
 10965                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
 10966     06FB  1F12               	btfss	18,6	;volatile
 10967     06FC  2F0C               	goto	i1l6486
 10968                           
 10969                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
 10970     06FD  3073               	movlw	115
 10971     06FE  0020               	movlb	0	; select bank0
 10972     06FF  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10973     0700  3000               	movlw	0
 10974     0701  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10975     0702  3000               	movlw	0
 10976     0703  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10977     0704  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10978     0705  3001               	movlw	1
 10979     0706  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10980     0707  3000               	movlw	0
 10981     0708  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10982     0709  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10983     070C                     i1l6486:
 10984                           
 10985                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
 10986     070C  30BF               	movlw	191
 10987     070D  0020               	movlb	0	; select bank0
 10988     070E  00DF               	movwf	??_USBDeviceTasks
 10989     070F  085F               	movf	??_USBDeviceTasks,w
 10990     0710  003D               	movlb	29	; select bank29
 10991     0711  0590               	andwf	16,f	;volatile
 10992                           
 10993                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
 10994     0712  319D  2558  3186   	fcall	_USBIncrement1msInternalTimers
 10995                           
 10996                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
 10997     0715  0841               	movf	_USBStatusStageTimeoutCounter^(0+256),w
 10998     0716  1903               	btfsc	3,2
 10999     0717  2F1A               	goto	i1l498
 11000                           
 11001                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
 11002     0718  3001               	movlw	1
 11003     0719  02C1               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
 11004     071A                     i1l498:	
 11005                           ;usb/usb_device.c: 742:             }
 11006                           
 11007                           
 11008                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
 11009     071A  0841               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
 11010     071B  1D03               	btfss	3,2
 11011     071C  2F20               	goto	i1l6496
 11012                           
 11013                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
 11014     071D  3188  2051  3186   	fcall	_USBCtrlEPAllowStatusStage
 11015     0720                     i1l6496:
 11016                           
 11017                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
 11018     0720  003D               	movlb	29	; select bank29
 11019     0721  1A90               	btfsc	16,5	;volatile
 11020     0722  1E92               	btfss	18,5	;volatile
 11021     0723  2F27               	goto	i1l6502
 11022                           
 11023                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
 11024     0724  319F  2713  3186   	fcall	_USBStallHandler
 11025     0727                     i1l6502:
 11026                           
 11027                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
 11028     0727  1890               	btfsc	16,1	;volatile
 11029     0728  1C92               	btfss	18,1	;volatile
 11030     0729  2F3B               	goto	i1l6510
 11031                           
 11032                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
 11033     072A  30FF               	movlw	255
 11034     072B  0020               	movlb	0	; select bank0
 11035     072C  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11036     072D  307F               	movlw	127
 11037     072E  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11038     072F  3000               	movlw	0
 11039     0730  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11040     0731  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11041     0732  3001               	movlw	1
 11042     0733  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11043     0734  3000               	movlw	0
 11044     0735  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11045     0736  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11046                           
 11047                           ;usb/usb_device.c: 763:         {UEIR = 0;};
 11048     0739  003D               	movlb	29	; select bank29
 11049     073A  0193               	clrf	19	;volatile
 11050     073B                     i1l6510:
 11051                           
 11052                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
 11053     073B  3004               	movlw	4
 11054     073C  0020               	movlb	0	; select bank0
 11055     073D  026B               	subwf	_USBDeviceState,w
 11056     073E  1803               	skipnc
 11057     073F  2F42               	goto	i1l502
 11058                           
 11059                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
 11060     0740  1112               	bcf	18,2	;volatile
 11061                           
 11062                           ;usb/usb_device.c: 781:         return;
 11063     0741  0008               	return
 11064     0742                     i1l502:	
 11065                           ;usb/usb_device.c: 782:     }
 11066                           
 11067                           
 11068                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
 11069     0742  003D               	movlb	29	; select bank29
 11070     0743  1D92               	btfss	18,3	;volatile
 11071     0744  2F93               	goto	i1l503
 11072                           
 11073                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
 11074     0745  0020               	movlb	0	; select bank0
 11075     0746  01E0               	clrf	USBDeviceTasks@i
 11076     0747  2F90               	goto	i1l504
 11077     0748                     i1l6520:
 11078                           
 11079                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
 11080     0748  080F               	movf	15,w	;volatile
 11081     0749  0020               	movlb	0	; select bank0
 11082     074A  00EE               	movwf	_USTATcopy	;volatile
 11083                           
 11084                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
 11085     074B  0C6E               	rrf	_USTATcopy,w	;volatile
 11086     074C  00DF               	movwf	??_USBDeviceTasks
 11087     074D  0CDF               	rrf	??_USBDeviceTasks,f
 11088     074E  0C5F               	rrf	??_USBDeviceTasks,w
 11089     074F  390F               	andlw	15
 11090     0750  0022               	movlb	2	; select bank2
 11091     0751  00C3               	movwf	_endpoint_number^(0+256)	;volatile
 11092                           
 11093                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
 11094     0752  30F7               	movlw	247
 11095     0753  0020               	movlb	0	; select bank0
 11096     0754  00DF               	movwf	??_USBDeviceTasks
 11097     0755  085F               	movf	??_USBDeviceTasks,w
 11098     0756  003D               	movlb	29	; select bank29
 11099     0757  0590               	andwf	16,f	;volatile
 11100                           
 11101                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
 11102     0758  0020               	movlb	0	; select bank0
 11103     0759  196E               	btfsc	_USTATcopy,2	;volatile
 11104     075A  2F5F               	goto	i1l6530
 11105                           
 11106                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
 11107     075B  0022               	movlb	2	; select bank2
 11108     075C  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11109     075D  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11110     075E  2F62               	goto	L8
 11111     075F                     i1l6530:	
 11112                           ;usb/usb_device.c: 805:                 }
 11113                           
 11114                           
 11115                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
 11116     075F  0022               	movlb	2	; select bank2
 11117     0760  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11118     0761  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11119     0762                     L8:
 11120     0762  0086               	movwf	6
 11121     0763  3001               	movlw	1	; select bank2/3
 11122     0764  0087               	movwf	7
 11123     0765  0801               	movf	1,w
 11124     0766  3901               	andlw	1
 11125     0767  0020               	movlb	0	; select bank0
 11126     0768  00DF               	movwf	??_USBDeviceTasks
 11127     0769  3001               	movlw	1
 11128     076A  06DF               	xorwf	??_USBDeviceTasks,f
 11129     076B  0801               	movf	1,w
 11130     076C  065F               	xorwf	??_USBDeviceTasks,w
 11131     076D  39FE               	andlw	-2
 11132     076E  065F               	xorwf	??_USBDeviceTasks,w
 11133     076F  0081               	movwf	1
 11134                           
 11135                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
 11136     0770  0022               	movlb	2	; select bank2
 11137     0771  0843               	movf	_endpoint_number^(0+256),w	;volatile
 11138     0772  1D03               	btfss	3,2
 11139     0773  2F78               	goto	i1l6536
 11140                           
 11141                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
 11142     0774  3192  22DD  3186   	fcall	_USBCtrlEPService
 11143                           
 11144                           ;usb/usb_device.c: 817:                 }
 11145     0777  2F87               	goto	i1l6538
 11146     0778                     i1l6536:
 11147                           
 11148                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
 11149     0778  3072               	movlw	114
 11150     0779  0020               	movlb	0	; select bank0
 11151     077A  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11152     077B  3000               	movlw	0
 11153     077C  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11154     077D  306E               	movlw	low _USTATcopy
 11155     077E  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11156     077F  3000               	movlw	high _USTATcopy
 11157     0780  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11158     0781  3000               	movlw	0
 11159     0782  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11160     0783  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11161     0784  3191  2153  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11162     0787                     i1l6538:
 11163                           
 11164                           ;usb/usb_device.c: 827:         }
 11165     0787  3001               	movlw	1
 11166     0788  0020               	movlb	0	; select bank0
 11167     0789  00DF               	movwf	??_USBDeviceTasks
 11168     078A  085F               	movf	??_USBDeviceTasks,w
 11169     078B  07E0               	addwf	USBDeviceTasks@i,f
 11170     078C  3004               	movlw	4
 11171     078D  0260               	subwf	USBDeviceTasks@i,w
 11172     078E  1803               	btfsc	3,0
 11173     078F  2F93               	goto	i1l503
 11174     0790                     i1l504:
 11175                           
 11176                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
 11177     0790  003D               	movlb	29	; select bank29
 11178     0791  1990               	btfsc	16,3	;volatile
 11179     0792  2F48               	goto	i1l6520
 11180     0793                     i1l503:	
 11181                           ;usb/usb_device.c: 828:     }
 11182                           
 11183                           
 11184                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
 11185     0793  0020               	movlb	0	; select bank0
 11186     0794  1112               	bcf	18,2	;volatile
 11187     0795  0008               	return
 11188     0796                     __end_of_USBDeviceTasks:
 11189                           
 11190                           	psect	text54
 11191     0D42                     __ptext54:	
 11192 ;; *************** function i1_USBDeviceInit *****************
 11193 ;; Defined at:
 11194 ;;		line 281 in file "usb/usb_device.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  p               2    4[COMMON] PTR unsigned char 
 11199 ;;		 -> UEP1(1), 
 11200 ;;  i               1    7[COMMON] unsigned char 
 11201 ;;  i               1    6[COMMON] unsigned char 
 11202 ;; Return value:  Size  Location     Type
 11203 ;;                  1    wreg      void 
 11204 ;; Registers used:
 11205 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11206 ;; Tracked objects:
 11207 ;;		On entry : 1F/1D
 11208 ;;		On exit  : 1F/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;Total ram usage:        8 bytes
 11216 ;; Hardware stack levels used: 1
 11217 ;; This function calls:
 11218 ;;		Nothing
 11219 ;; This function is called by:
 11220 ;;		_USBDeviceTasks
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224     0D42                     i1_USBDeviceInit:	
 11225                           ;psect for function i1_USBDeviceInit
 11226                           
 11227                           
 11228                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
 11229                           
 11230                           ;incstack = 0
 11231                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 11232     0D42  0021               	movlb	1	; select bank1
 11233     0D43  1112               	bcf	18,2	;volatile
 11234                           
 11235                           ;usb/usb_device.c: 292:     {UEIR = 0;};
 11236     0D44  003D               	movlb	29	; select bank29
 11237     0D45  0193               	clrf	19	;volatile
 11238                           
 11239                           ;usb/usb_device.c: 295:     {UIR = 0;};
 11240     0D46  0190               	clrf	16	;volatile
 11241                           
 11242                           ;usb/usb_device.c: 298:     UEP0 = 0;
 11243     0D47  0198               	clrf	24	;volatile
 11244                           
 11245                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
 11246     0D48  300E               	movlw	14
 11247     0D49  00F5               	movwf	i1USBDeviceInit@p+1
 11248     0D4A  3099               	movlw	153
 11249     0D4B  00F4               	movwf	i1USBDeviceInit@p
 11250     0D4C  01F6               	clrf	i1USBDeviceInit@i_1369
 11251     0D4D                     i1l5620:
 11252     0D4D  0874               	movf	i1USBDeviceInit@p,w
 11253     0D4E  0086               	movwf	6
 11254     0D4F  0875               	movf	i1USBDeviceInit@p+1,w
 11255     0D50  0087               	movwf	7
 11256     0D51  0181               	clrf	1
 11257     0D52  3001               	movlw	1
 11258     0D53  07F4               	addwf	i1USBDeviceInit@p,f
 11259     0D54  3000               	movlw	0
 11260     0D55  3DF5               	addwfc	i1USBDeviceInit@p+1,f
 11261     0D56  3001               	movlw	1
 11262     0D57  00F0               	movwf	??i1_USBDeviceInit
 11263     0D58  0870               	movf	??i1_USBDeviceInit,w
 11264     0D59  07F6               	addwf	i1USBDeviceInit@i_1369,f
 11265     0D5A  0876               	movf	i1USBDeviceInit@i_1369,w
 11266     0D5B  1903               	btfsc	3,2
 11267     0D5C  2D4D               	goto	i1l5620
 11268                           
 11269                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
 11270     0D5D  3016               	movlw	22
 11271     0D5E  0091               	movwf	17	;volatile
 11272     0D5F  309F               	movlw	159
 11273     0D60  0097               	movwf	23	;volatile
 11274     0D61  307B               	movlw	123
 11275     0D62  0092               	movwf	18	;volatile
 11276                           
 11277                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 11278     0D63  01F7               	clrf	i1USBDeviceInit@i
 11279     0D64                     i1l5636:
 11280                           
 11281                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 11282     0D64  0877               	movf	i1USBDeviceInit@i,w
 11283     0D65  00F0               	movwf	??i1_USBDeviceInit
 11284     0D66  3001               	movlw	1
 11285     0D67                     u494_25:
 11286     0D67  35F0               	lslf	??i1_USBDeviceInit,f
 11287     0D68  3EFF               	addlw	-1
 11288     0D69  1D03               	skipz
 11289     0D6A  2D67               	goto	u494_25
 11290     0D6B  3570               	lslf	??i1_USBDeviceInit,w
 11291     0D6C  3E20               	addlw	32
 11292     0D6D  0086               	movwf	6
 11293     0D6E  0187               	clrf	7
 11294     0D6F  3000               	movlw	0
 11295     0D70  3FC0               	movwi [0]fsr1
 11296     0D71  3000               	movlw	0
 11297     0D72  3FC1               	movwi [1]fsr1
 11298     0D73  3FC2               	movwi [2]fsr1
 11299     0D74  3FC3               	movwi [3]fsr1
 11300                           
 11301                           ;usb/usb_device.c: 314:     }
 11302     0D75  3001               	movlw	1
 11303     0D76  00F0               	movwf	??i1_USBDeviceInit
 11304     0D77  0870               	movf	??i1_USBDeviceInit,w
 11305     0D78  07F7               	addwf	i1USBDeviceInit@i,f
 11306     0D79  3008               	movlw	8
 11307     0D7A  0277               	subwf	i1USBDeviceInit@i,w
 11308     0D7B  1C03               	skipc
 11309     0D7C  2D64               	goto	i1l5636
 11310                           
 11311                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 11312     0D7D  170E               	bsf	14,6	;volatile
 11313                           
 11314                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 11315     0D7E  0196               	clrf	22	;volatile
 11316                           
 11317                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 11318     0D7F  120E               	bcf	14,4	;volatile
 11319                           
 11320                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 11321     0D80  130E               	bcf	14,6	;volatile
 11322     0D81                     i1l5648:
 11323                           
 11324                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 11325     0D81  30F7               	movlw	247
 11326     0D82  00F0               	movwf	??i1_USBDeviceInit
 11327     0D83  0870               	movf	??i1_USBDeviceInit,w
 11328     0D84  0590               	andwf	16,f	;volatile
 11329                           
 11330                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 11331     0D85  0021               	movlb	1	; select bank1
 11332     0D86  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 11333                           
 11334                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 11335     0D87  0022               	movlb	2	; select bank2
 11336     0D88  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 11337                           
 11338                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 11339     0D89  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 11340     0D8A  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 11341                           
 11342                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 11343     0D8B  003D               	movlb	29	; select bank29
 11344     0D8C  1990               	btfsc	16,3	;volatile
 11345     0D8D  2D81               	goto	i1l5648
 11346                           
 11347                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 11348     0D8E  3001               	movlw	1
 11349     0D8F  0022               	movlb	2	; select bank2
 11350     0D90  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11351                           
 11352                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 11353     0D91  3001               	movlw	1
 11354     0D92  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11355                           
 11356                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 11357     0D93  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11358                           
 11359                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 11360     0D94  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11361                           
 11362                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 11363     0D95  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11364                           
 11365                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 11366     0D96  01F7               	clrf	i1USBDeviceInit@i
 11367     0D97                     i1l5670:
 11368                           
 11369                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 11370     0D97  3577               	lslf	i1USBDeviceInit@i,w
 11371     0D98  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11372     0D99  0086               	movwf	6
 11373     0D9A  0187               	clrf	7
 11374     0D9B  3000               	movlw	0
 11375     0D9C  3FC0               	movwi [0]fsr1
 11376     0D9D  3FC1               	movwi [1]fsr1
 11377                           
 11378                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 11379     0D9E  3577               	lslf	i1USBDeviceInit@i,w
 11380     0D9F  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11381     0DA0  0086               	movwf	6
 11382     0DA1  3001               	movlw	1	; select bank2/3
 11383     0DA2  0087               	movwf	7
 11384     0DA3  3000               	movlw	0
 11385     0DA4  3FC0               	movwi [0]fsr1
 11386     0DA5  3FC1               	movwi [1]fsr1
 11387                           
 11388                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 11389     0DA6  0877               	movf	i1USBDeviceInit@i,w
 11390     0DA7  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11391     0DA8  0086               	movwf	6
 11392     0DA9  3001               	movlw	1	; select bank2/3
 11393     0DAA  0087               	movwf	7
 11394     0DAB  0181               	clrf	1
 11395                           
 11396                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 11397     0DAC  0877               	movf	i1USBDeviceInit@i,w
 11398     0DAD  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11399     0DAE  0086               	movwf	6
 11400     0DAF  3001               	movlw	1	; select bank2/3
 11401     0DB0  0087               	movwf	7
 11402     0DB1  0181               	clrf	1
 11403                           
 11404                           ;usb/usb_device.c: 355:     }
 11405     0DB2  3001               	movlw	1
 11406     0DB3  00F0               	movwf	??i1_USBDeviceInit
 11407     0DB4  0870               	movf	??i1_USBDeviceInit,w
 11408     0DB5  07F7               	addwf	i1USBDeviceInit@i,f
 11409     0DB6  3002               	movlw	2
 11410     0DB7  0277               	subwf	i1USBDeviceInit@i,w
 11411     0DB8  1C03               	skipc
 11412     0DB9  2D97               	goto	i1l5670
 11413                           
 11414                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11415     0DBA  3028               	movlw	40
 11416     0DBB  0020               	movlb	0	; select bank0
 11417     0DBC  00E1               	movwf	_pBDTEntryIn
 11418     0DBD  3000               	movlw	0
 11419     0DBE  00E2               	movwf	_pBDTEntryIn+1
 11420                           
 11421                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 11422     0DBF  3016               	movlw	22
 11423     0DC0  003D               	movlb	29	; select bank29
 11424     0DC1  0098               	movwf	24	;volatile
 11425                           
 11426                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 11427     0DC2  3040               	movlw	64
 11428     0DC3  00F0               	movwf	??i1_USBDeviceInit
 11429     0DC4  3000               	movlw	0
 11430     0DC5  00F1               	movwf	??i1_USBDeviceInit+1
 11431     0DC6  30FF               	movlw	255
 11432     0DC7  0570               	andwf	??i1_USBDeviceInit,w
 11433     0DC8  00F2               	movwf	??i1_USBDeviceInit+2
 11434     0DC9  307F               	movlw	127
 11435     0DCA  0571               	andwf	??i1_USBDeviceInit+1,w
 11436     0DCB  00F3               	movwf	??i1_USBDeviceInit+3
 11437     0DCC  0872               	movf	??i1_USBDeviceInit+2,w
 11438     0DCD  0020               	movlb	0	; select bank0
 11439     0DCE  00A2               	movwf	34	;volatile
 11440     0DCF  0873               	movf	??i1_USBDeviceInit+3,w
 11441     0DD0  00A3               	movwf	35	;volatile
 11442                           
 11443                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 11444     0DD1  3008               	movlw	8
 11445     0DD2  00A1               	movwf	33	;volatile
 11446                           
 11447                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 11448     0DD3  3004               	movlw	4
 11449     0DD4  00A0               	movwf	32	;volatile
 11450                           
 11451                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 11452     0DD5  17A0               	bsf	32,7	;volatile
 11453                           
 11454                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 11455     0DD6  01EF               	clrf	_USBActiveConfiguration	;volatile
 11456                           
 11457                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 11458     0DD7  3000               	movlw	0
 11459     0DD8  0023               	movlb	3	; select bank3
 11460     0DD9  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 11461     0DDA  3000               	movlw	0
 11462     0DDB  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 11463     0DDC  3000               	movlw	0
 11464     0DDD  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 11465     0DDE  3000               	movlw	0
 11466     0DDF  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 11467                           
 11468                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 11469     0DE0  0022               	movlb	2	; select bank2
 11470     0DE1  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11471                           
 11472                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 11473     0DE2  0020               	movlb	0	; select bank0
 11474     0DE3  01EB               	clrf	_USBDeviceState	;volatile
 11475     0DE4  0008               	return
 11476     0DE5                     __end_ofi1_USBDeviceInit:
 11477                           
 11478                           	psect	text55
 11479     1E55                     __ptext55:	
 11480 ;; *************** function _USBWakeFromSuspend *****************
 11481 ;; Defined at:
 11482 ;;		line 2310 in file "usb/usb_device.c"
 11483 ;; Parameters:    Size  Location     Type
 11484 ;;		None
 11485 ;; Auto vars:     Size  Location     Type
 11486 ;;		None
 11487 ;; Return value:  Size  Location     Type
 11488 ;;                  1    wreg      void 
 11489 ;; Registers used:
 11490 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11491 ;; Tracked objects:
 11492 ;;		On entry : 1F/1D
 11493 ;;		On exit  : 1F/2
 11494 ;;		Unchanged: 0/0
 11495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;Total ram usage:        1 bytes
 11501 ;; Hardware stack levels used: 1
 11502 ;; Hardware stack levels required when called: 4
 11503 ;; This function calls:
 11504 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11505 ;; This function is called by:
 11506 ;;		_USBDeviceTasks
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510     1E55                     _USBWakeFromSuspend:	
 11511                           ;psect for function _USBWakeFromSuspend
 11512                           
 11513                           
 11514                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11518     1E55  0022               	movlb	2	; select bank2
 11519     1E56  01C4               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11520                           
 11521                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 11522     1E57  3074               	movlw	116
 11523     1E58  0020               	movlb	0	; select bank0
 11524     1E59  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11525     1E5A  3000               	movlw	0
 11526     1E5B  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11527     1E5C  3000               	movlw	0
 11528     1E5D  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11529     1E5E  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11530     1E5F  3000               	movlw	0
 11531     1E60  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11532     1E61  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11533     1E62  3191  2153  319E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11534                           
 11535                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 11536     1E65  003D               	movlb	29	; select bank29
 11537     1E66  108E               	bcf	14,1	;volatile
 11538                           
 11539                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 11540     1E67  1112               	bcf	18,2	;volatile
 11541     1E68                     i1l5422:	
 11542                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11543                           
 11544                           
 11545                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11546     1E68  1D10               	btfss	16,2	;volatile
 11547     1E69  2E6F               	goto	i1l5424
 11548                           
 11549                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 11550     1E6A  30FB               	movlw	251
 11551     1E6B  00FD               	movwf	??_USBWakeFromSuspend
 11552     1E6C  087D               	movf	??_USBWakeFromSuspend,w
 11553     1E6D  0590               	andwf	16,f	;volatile
 11554     1E6E  2E68               	goto	i1l5422
 11555     1E6F                     i1l5424:
 11556                           
 11557                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 11558     1E6F  0022               	movlb	2	; select bank2
 11559     1E70  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11560     1E71  0008               	return
 11561     1E72                     __end_of_USBWakeFromSuspend:
 11562                           
 11563                           	psect	text56
 11564     1D9F                     __ptext56:	
 11565 ;; *************** function _USBSuspend *****************
 11566 ;; Defined at:
 11567 ;;		line 2252 in file "usb/usb_device.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;		None
 11570 ;; Auto vars:     Size  Location     Type
 11571 ;;		None
 11572 ;; Return value:  Size  Location     Type
 11573 ;;                  1    wreg      void 
 11574 ;; Registers used:
 11575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11576 ;; Tracked objects:
 11577 ;;		On entry : 1F/1D
 11578 ;;		On exit  : 0/0
 11579 ;;		Unchanged: 0/0
 11580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;Total ram usage:        1 bytes
 11586 ;; Hardware stack levels used: 1
 11587 ;; Hardware stack levels required when called: 4
 11588 ;; This function calls:
 11589 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11590 ;; This function is called by:
 11591 ;;		_USBDeviceTasks
 11592 ;; This function uses a non-reentrant model
 11593 ;;
 11594                           
 11595     1D9F                     _USBSuspend:	
 11596                           ;psect for function _USBSuspend
 11597                           
 11598                           
 11599                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 11600                           
 11601                           ;incstack = 0
 11602                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11603     1D9F  1512               	bsf	18,2	;volatile
 11604                           
 11605                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 11606     1DA0  30EF               	movlw	239
 11607     1DA1  00FD               	movwf	??_USBSuspend
 11608     1DA2  087D               	movf	??_USBSuspend,w
 11609     1DA3  0590               	andwf	16,f	;volatile
 11610                           
 11611                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 11612     1DA4  148E               	bsf	14,1	;volatile
 11613                           
 11614                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 11615     1DA5  3001               	movlw	1
 11616     1DA6  0022               	movlb	2	; select bank2
 11617     1DA7  00C4               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 11618                           
 11619                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 11620     1DA8  01BB               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11621                           
 11622                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 11623     1DA9  3075               	movlw	117
 11624     1DAA  0020               	movlb	0	; select bank0
 11625     1DAB  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11626     1DAC  3000               	movlw	0
 11627     1DAD  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11628     1DAE  3000               	movlw	0
 11629     1DAF  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11630     1DB0  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11631     1DB1  3000               	movlw	0
 11632     1DB2  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11633     1DB3  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11634     1DB4  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11635     1DB6  0008               	return
 11636     1DB7                     __end_of_USBSuspend:
 11637                           
 11638                           	psect	text57
 11639     1F13                     __ptext57:	
 11640 ;; *************** function _USBStallHandler *****************
 11641 ;; Defined at:
 11642 ;;		line 2209 in file "usb/usb_device.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;		None
 11645 ;; Auto vars:     Size  Location     Type
 11646 ;;		None
 11647 ;; Return value:  Size  Location     Type
 11648 ;;                  1    wreg      void 
 11649 ;; Registers used:
 11650 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11651 ;; Tracked objects:
 11652 ;;		On entry : 1F/1D
 11653 ;;		On exit  : 1F/1D
 11654 ;;		Unchanged: 0/0
 11655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;Total ram usage:        1 bytes
 11661 ;; Hardware stack levels used: 1
 11662 ;; This function calls:
 11663 ;;		Nothing
 11664 ;; This function is called by:
 11665 ;;		_USBDeviceTasks
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669     1F13                     _USBStallHandler:	
 11670                           ;psect for function _USBStallHandler
 11671                           
 11672                           
 11673                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 11677     1F13  1C18               	btfss	24,0	;volatile
 11678     1F14  2F30               	goto	i1l5456
 11679                           
 11680                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 11681     1F15  0020               	movlb	0	; select bank0
 11682     1F16  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11683     1F17  0086               	movwf	6
 11684     1F18  0187               	clrf	7
 11685     1F19  3080               	movlw	128
 11686     1F1A  0601               	xorwf	1,w
 11687     1F1B  1D03               	btfss	3,2
 11688     1F1C  2F2E               	goto	i1l5454
 11689     1F1D  0861               	movf	_pBDTEntryIn,w
 11690     1F1E  0086               	movwf	6
 11691     1F1F  0862               	movf	_pBDTEntryIn+1,w
 11692     1F20  0087               	movwf	7
 11693     1F21  3084               	movlw	132
 11694     1F22  0601               	xorwf	1,w
 11695     1F23  1D03               	btfss	3,2
 11696     1F24  2F2E               	goto	i1l5454
 11697                           
 11698                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 11699     1F25  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11700     1F26  0086               	movwf	6
 11701     1F27  0187               	clrf	7
 11702     1F28  300C               	movlw	12
 11703     1F29  0081               	movwf	1
 11704                           
 11705                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 11706     1F2A  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11707     1F2B  0086               	movwf	6
 11708     1F2C  0187               	clrf	7
 11709     1F2D  1781               	bsf	1,7
 11710     1F2E                     i1l5454:
 11711                           
 11712                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 11713     1F2E  003D               	movlb	29	; select bank29
 11714     1F2F  1018               	bcf	24,0	;volatile
 11715     1F30                     i1l5456:
 11716                           
 11717                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 11718     1F30  30DF               	movlw	223
 11719     1F31  00F0               	movwf	??_USBStallHandler
 11720     1F32  0870               	movf	??_USBStallHandler,w
 11721     1F33  0590               	andwf	16,f	;volatile
 11722     1F34  0008               	return
 11723     1F35                     __end_of_USBStallHandler:
 11724                           
 11725                           	psect	text58
 11726     1D58                     __ptext58:	
 11727 ;; *************** function _USBIncrement1msInternalTimers *****************
 11728 ;; Defined at:
 11729 ;;		line 2998 in file "usb/usb_device.c"
 11730 ;; Parameters:    Size  Location     Type
 11731 ;;		None
 11732 ;; Auto vars:     Size  Location     Type
 11733 ;;		None
 11734 ;; Return value:  Size  Location     Type
 11735 ;;                  1    wreg      void 
 11736 ;; Registers used:
 11737 ;;		wreg, status,2, status,0
 11738 ;; Tracked objects:
 11739 ;;		On entry : 1F/1D
 11740 ;;		On exit  : 1F/2
 11741 ;;		Unchanged: 0/0
 11742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;Total ram usage:        1 bytes
 11748 ;; Hardware stack levels used: 1
 11749 ;; This function calls:
 11750 ;;		Nothing
 11751 ;; This function is called by:
 11752 ;;		_USBDeviceTasks
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756     1D58                     _USBIncrement1msInternalTimers:	
 11757                           ;psect for function _USBIncrement1msInternalTimers
 11758                           
 11759                           
 11760                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 11761                           
 11762                           ;incstack = 0
 11763                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 11764     1D58  3001               	movlw	1
 11765     1D59  0023               	movlb	3	; select bank3
 11766     1D5A  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 11767     1D5B  3000               	movlw	0
 11768     1D5C  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 11769     1D5D  3000               	movlw	0
 11770     1D5E  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 11771     1D5F  3000               	movlw	0
 11772     1D60  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 11773                           
 11774                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 11775     1D61  0022               	movlb	2	; select bank2
 11776     1D62  0844               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 11777     1D63  1D03               	btfss	3,2
 11778     1D64  0008               	return
 11779                           
 11780                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 11781     1D65  3001               	movlw	1
 11782     1D66  00F0               	movwf	??_USBIncrement1msInternalTimers
 11783     1D67  0870               	movf	??_USBIncrement1msInternalTimers,w
 11784     1D68  07BB               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 11785                           
 11786                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 11787     1D69  083B               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 11788     1D6A  1D03               	btfss	3,2
 11789     1D6B  0008               	return
 11790                           
 11791                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 11792     1D6C  30FF               	movlw	255
 11793     1D6D  00BB               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11794     1D6E  0008               	return
 11795     1D6F                     __end_of_USBIncrement1msInternalTimers:
 11796                           
 11797                           	psect	text59
 11798     12DD                     __ptext59:	
 11799 ;; *************** function _USBCtrlEPService *****************
 11800 ;; Defined at:
 11801 ;;		line 2379 in file "usb/usb_device.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;		None
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;		None
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  1    wreg      void 
 11808 ;; Registers used:
 11809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11810 ;; Tracked objects:
 11811 ;;		On entry : 1F/2
 11812 ;;		On exit  : 1D/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;Total ram usage:        1 bytes
 11820 ;; Hardware stack levels used: 1
 11821 ;; Hardware stack levels required when called: 7
 11822 ;; This function calls:
 11823 ;;		_USBCtrlTrfInHandler
 11824 ;;		_USBCtrlTrfOutHandler
 11825 ;;		_USBCtrlTrfSetupHandler
 11826 ;;		i1_memcpy
 11827 ;; This function is called by:
 11828 ;;		_USBDeviceTasks
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832     12DD                     _USBCtrlEPService:	
 11833                           ;psect for function _USBCtrlEPService
 11834                           
 11835                           
 11836                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 11837                           
 11838                           ;incstack = 0
 11839 ;; hardware stack exceeded
 11840                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11841     12DD  302D               	movlw	45
 11842     12DE  00C1               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 11843                           
 11844                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 11845     12DF  0020               	movlb	0	; select bank0
 11846     12E0  086E               	movf	_USTATcopy,w	;volatile
 11847     12E1  39FD               	andlw	253
 11848     12E2  1D03               	btfss	3,2
 11849     12E3  2B1A               	goto	i1l6414
 11850                           
 11851                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 11852     12E4  366E               	lsrf	_USTATcopy,w	;volatile
 11853     12E5  393F               	andlw	63
 11854     12E6  00DE               	movwf	??_USBCtrlEPService
 11855     12E7  3001               	movlw	1
 11856     12E8                     u607_25:
 11857     12E8  35DE               	lslf	??_USBCtrlEPService,f
 11858     12E9  3EFF               	addlw	-1
 11859     12EA  1D03               	skipz
 11860     12EB  2AE8               	goto	u607_25
 11861     12EC  355E               	lslf	??_USBCtrlEPService,w
 11862     12ED  3E20               	addlw	32
 11863     12EE  00EA               	movwf	_pBDTEntryEP0OutCurrent
 11864                           
 11865                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11866     12EF  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11867     12F0  00E7               	movwf	_pBDTEntryEP0OutNext
 11868     12F1  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11869                           
 11870                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 11871     12F2  3004               	movlw	4
 11872     12F3  0667               	xorwf	_pBDTEntryEP0OutNext,w
 11873     12F4  00E7               	movwf	_pBDTEntryEP0OutNext
 11874     12F5  3000               	movlw	0
 11875     12F6  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 11876     12F7  00E8               	movwf	_pBDTEntryEP0OutNext+1
 11877                           
 11878                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 11879     12F8  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11880     12F9  0086               	movwf	6
 11881     12FA  0187               	clrf	7
 11882     12FB  0C01               	rrf	1,w
 11883     12FC  0C89               	rrf	9,f
 11884     12FD  390F               	andlw	15
 11885     12FE  3A0D               	xorlw	13
 11886     12FF  1D03               	skipz
 11887     1300  2B17               	goto	i1l6412
 11888                           
 11889                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 11890     1301  3040               	movlw	64
 11891     1302  00F6               	movwf	i1memcpy@d1
 11892     1303  3000               	movlw	0
 11893     1304  00F7               	movwf	i1memcpy@d1+1
 11894     1305  086A               	movf	_pBDTEntryEP0OutCurrent,w
 11895     1306  3E02               	addlw	2
 11896     1307  0086               	movwf	6
 11897     1308  0187               	clrf	7
 11898     1309  3F40               	moviw [0]fsr1
 11899     130A  00F8               	movwf	i1memcpy@s1
 11900     130B  3F41               	moviw [1]fsr1
 11901     130C  00F9               	movwf	i1memcpy@s1+1
 11902     130D  3008               	movlw	8
 11903     130E  00FA               	movwf	i1memcpy@n
 11904     130F  3000               	movlw	0
 11905     1310  00FB               	movwf	i1memcpy@n+1
 11906     1311  319F  2735  3192   	fcall	i1_memcpy
 11907                           
 11908                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 11909     1314  3193  2324         	fcall	_USBCtrlTrfSetupHandler
 11910                           
 11911                           ;usb/usb_device.c: 2416:         }
 11912     1316  0008               	return
 11913     1317                     i1l6412:
 11914                           
 11915                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 11916     1317  3191  2119         	fcall	_USBCtrlTrfOutHandler
 11917     1319  0008               	return
 11918     131A                     i1l6414:
 11919     131A  30FD               	movlw	253
 11920     131B  056E               	andwf	_USTATcopy,w	;volatile
 11921     131C  00DE               	movwf	??_USBCtrlEPService
 11922     131D  3004               	movlw	4
 11923     131E  065E               	xorwf	??_USBCtrlEPService,w
 11924     131F  1D03               	btfss	3,2
 11925     1320  0008               	return
 11926                           
 11927                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 11928     1321  3189  21AE         	fcall	_USBCtrlTrfInHandler
 11929     1323  0008               	return
 11930     1324                     __end_of_USBCtrlEPService:
 11931                           
 11932                           	psect	text60
 11933     1324                     __ptext60:	
 11934 ;; *************** function _USBCtrlTrfSetupHandler *****************
 11935 ;; Defined at:
 11936 ;;		line 2472 in file "usb/usb_device.c"
 11937 ;; Parameters:    Size  Location     Type
 11938 ;;		None
 11939 ;; Auto vars:     Size  Location     Type
 11940 ;;		None
 11941 ;; Return value:  Size  Location     Type
 11942 ;;                  1    wreg      void 
 11943 ;; Registers used:
 11944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11945 ;; Tracked objects:
 11946 ;;		On entry : 1F/0
 11947 ;;		On exit  : 1D/0
 11948 ;;		Unchanged: 0/0
 11949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;Total ram usage:        1 bytes
 11955 ;; Hardware stack levels used: 1
 11956 ;; Hardware stack levels required when called: 6
 11957 ;; This function calls:
 11958 ;;		_USBCheckStdRequest
 11959 ;;		_USBCtrlEPServiceComplete
 11960 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11961 ;; This function is called by:
 11962 ;;		_USBCtrlEPService
 11963 ;; This function uses a non-reentrant model
 11964 ;;
 11965                           
 11966     1324                     _USBCtrlTrfSetupHandler:	
 11967                           ;psect for function _USBCtrlTrfSetupHandler
 11968                           
 11969                           
 11970                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 11971                           
 11972                           ;incstack = 0
 11973 ;; hardware stack exceeded
 11974                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11975     1324  0022               	movlb	2	; select bank2
 11976     1325  01C7               	clrf	_shortPacketStatus^(0+256)	;volatile
 11977                           
 11978                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 11979     1326  01C0               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 11980                           
 11981                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 11982     1327  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11983                           
 11984                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 11985     1328  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11986                           
 11987                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 11988     1329  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 11989                           
 11990                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 11991     132A  0020               	movlb	0	; select bank0
 11992     132B  01E9               	clrf	_controlTransferState	;volatile
 11993                           
 11994                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 11995     132C  307F               	movlw	127
 11996     132D  00DD               	movwf	??_USBCtrlTrfSetupHandler
 11997     132E  0861               	movf	_pBDTEntryIn,w
 11998     132F  0086               	movwf	6
 11999     1330  0862               	movf	_pBDTEntryIn+1,w
 12000     1331  0087               	movwf	7
 12001     1332  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12002     1333  0581               	andwf	1,f
 12003                           
 12004                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12005     1334  3004               	movlw	4
 12006     1335  0661               	xorwf	_pBDTEntryIn,w
 12007     1336  00E1               	movwf	_pBDTEntryIn
 12008     1337  3000               	movlw	0
 12009     1338  0662               	xorwf	_pBDTEntryIn+1,w
 12010     1339  00E2               	movwf	_pBDTEntryIn+1
 12011                           
 12012                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 12013     133A  307F               	movlw	127
 12014     133B  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12015     133C  0861               	movf	_pBDTEntryIn,w
 12016     133D  0086               	movwf	6
 12017     133E  0862               	movf	_pBDTEntryIn+1,w
 12018     133F  0087               	movwf	7
 12019     1340  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12020     1341  0581               	andwf	1,f
 12021                           
 12022                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12023     1342  3004               	movlw	4
 12024     1343  0661               	xorwf	_pBDTEntryIn,w
 12025     1344  00E1               	movwf	_pBDTEntryIn
 12026     1345  3000               	movlw	0
 12027     1346  0662               	xorwf	_pBDTEntryIn+1,w
 12028     1347  00E2               	movwf	_pBDTEntryIn+1
 12029                           
 12030                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 12031     1348  307F               	movlw	127
 12032     1349  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12033     134A  0867               	movf	_pBDTEntryEP0OutNext,w
 12034     134B  0086               	movwf	6
 12035     134C  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12036     134D  0087               	movwf	7
 12037     134E  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12038     134F  0581               	andwf	1,f
 12039                           
 12040                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 12041     1350  0021               	movlb	1	; select bank1
 12042     1351  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 12043                           
 12044                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 12045     1352  01EE               	clrf	(_inPipes^(0+128)+3)	;volatile
 12046     1353  01EF               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 12047                           
 12048                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 12049     1354  0022               	movlb	2	; select bank2
 12050     1355  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 12051                           
 12052                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 12053     1356  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 12054     1357  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 12055                           
 12056                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 12057     1358  3197  272A  3193   	fcall	_USBCheckStdRequest
 12058                           
 12059                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 12060     135B  3003               	movlw	3
 12061     135C  0020               	movlb	0	; select bank0
 12062     135D  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12063     135E  3000               	movlw	0
 12064     135F  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12065     1360  3000               	movlw	0
 12066     1361  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12067     1362  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12068     1363  3000               	movlw	0
 12069     1364  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12070     1365  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12071     1366  3191  2153  3193   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12072                           
 12073                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 12074     1369  318C  24B4         	fcall	_USBCtrlEPServiceComplete
 12075     136B  0008               	return
 12076     136C                     __end_of_USBCtrlTrfSetupHandler:
 12077                           
 12078                           	psect	text61
 12079     0CB4                     __ptext61:	
 12080 ;; *************** function _USBCtrlEPServiceComplete *****************
 12081 ;; Defined at:
 12082 ;;		line 1620 in file "usb/usb_device.c"
 12083 ;; Parameters:    Size  Location     Type
 12084 ;;		None
 12085 ;; Auto vars:     Size  Location     Type
 12086 ;;		None
 12087 ;; Return value:  Size  Location     Type
 12088 ;;                  1    wreg      void 
 12089 ;; Registers used:
 12090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12091 ;; Tracked objects:
 12092 ;;		On entry : 0/2
 12093 ;;		On exit  : 1D/0
 12094 ;;		Unchanged: 0/0
 12095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;Total ram usage:        4 bytes
 12101 ;; Hardware stack levels used: 1
 12102 ;; Hardware stack levels required when called: 2
 12103 ;; This function calls:
 12104 ;;		_USBCtrlEPAllowDataStage
 12105 ;;		_USBCtrlEPAllowStatusStage
 12106 ;; This function is called by:
 12107 ;;		_USBCtrlTrfSetupHandler
 12108 ;; This function uses a non-reentrant model
 12109 ;;
 12110                           
 12111     0CB4                     _USBCtrlEPServiceComplete:	
 12112                           ;psect for function _USBCtrlEPServiceComplete
 12113                           
 12114                           
 12115                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 12116                           
 12117                           ;incstack = 0
 12118                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12119     0CB4  003D               	movlb	29	; select bank29
 12120     0CB5  120E               	bcf	14,4	;volatile
 12121                           
 12122                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 12123     0CB6  0021               	movlb	1	; select bank1
 12124     0CB7  1BED               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 12125     0CB8  2D00               	goto	i1l566
 12126                           
 12127                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 12128     0CB9  0022               	movlb	2	; select bank2
 12129     0CBA  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 12130     0CBB  2CC9               	goto	i1l4656
 12131                           
 12132                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 12133     0CBC  3002               	movlw	2
 12134     0CBD  0020               	movlb	0	; select bank0
 12135     0CBE  00E9               	movwf	_controlTransferState	;volatile
 12136                           
 12137                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 12138     0CBF  0022               	movlb	2	; select bank2
 12139     0CC0  083C               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 12140     0CC1  1D03               	btfss	3,2
 12141     0CC2  2CC5               	goto	i1l4652
 12142                           
 12143                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 12144     0CC3  3195  25F3         	fcall	_USBCtrlEPAllowDataStage
 12145     0CC5                     i1l4652:
 12146                           
 12147                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 12148     0CC5  0022               	movlb	2	; select bank2
 12149     0CC6  01BE               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12150                           
 12151                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 12152     0CC7  01BF               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12153                           
 12154                           ;usb/usb_device.c: 1656:         }
 12155     0CC8  0008               	return
 12156     0CC9                     i1l4656:
 12157                           
 12158                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 12159     0CC9  0020               	movlb	0	; select bank0
 12160     0CCA  0867               	movf	_pBDTEntryEP0OutNext,w
 12161     0CCB  3E01               	addlw	1
 12162     0CCC  00F7               	movwf	??_USBCtrlEPServiceComplete
 12163     0CCD  3000               	movlw	0
 12164     0CCE  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12165     0CCF  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12166     0CD0  0877               	movf	??_USBCtrlEPServiceComplete,w
 12167     0CD1  0086               	movwf	6
 12168     0CD2  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12169     0CD3  0087               	movwf	7
 12170     0CD4  3008               	movlw	8
 12171     0CD5  0081               	movwf	1
 12172                           
 12173                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 12174     0CD6  3040               	movlw	64
 12175     0CD7  00F7               	movwf	??_USBCtrlEPServiceComplete
 12176     0CD8  3000               	movlw	0
 12177     0CD9  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12178     0CDA  30FF               	movlw	255
 12179     0CDB  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12180     0CDC  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12181     0CDD  307F               	movlw	127
 12182     0CDE  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12183     0CDF  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12184     0CE0  0867               	movf	_pBDTEntryEP0OutNext,w
 12185     0CE1  0086               	movwf	6
 12186     0CE2  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12187     0CE3  0087               	movwf	7
 12188     0CE4  3142               	addfsr 1,2
 12189     0CE5  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12190     0CE6  3FC0               	movwi [0]fsr1
 12191     0CE7  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12192     0CE8  3FC1               	movwi [1]fsr1
 12193                           
 12194                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 12195     0CE9  0867               	movf	_pBDTEntryEP0OutNext,w
 12196     0CEA  0086               	movwf	6
 12197     0CEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12198     0CEC  0087               	movwf	7
 12199     0CED  300C               	movlw	12
 12200     0CEE  0081               	movwf	1
 12201                           
 12202                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12203     0CEF  0867               	movf	_pBDTEntryEP0OutNext,w
 12204     0CF0  0086               	movwf	6
 12205     0CF1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12206     0CF2  0087               	movwf	7
 12207     0CF3  1781               	bsf	1,7
 12208                           
 12209                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 12210     0CF4  0861               	movf	_pBDTEntryIn,w
 12211     0CF5  0086               	movwf	6
 12212     0CF6  0862               	movf	_pBDTEntryIn+1,w
 12213     0CF7  0087               	movwf	7
 12214     0CF8  3004               	movlw	4
 12215     0CF9  0081               	movwf	1
 12216                           
 12217                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 12218     0CFA  0861               	movf	_pBDTEntryIn,w
 12219     0CFB  0086               	movwf	6
 12220     0CFC  0862               	movf	_pBDTEntryIn+1,w
 12221     0CFD  0087               	movwf	7
 12222     0CFE  1781               	bsf	1,7
 12223     0CFF  0008               	return
 12224     0D00                     i1l566:	
 12225                           ;usb/usb_device.c: 1671:     else
 12226                           
 12227                           
 12228                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 12229     0D00  0020               	movlb	0	; select bank0
 12230     0D01  1FC0               	btfss	64,7	;volatile
 12231     0D02  2D15               	goto	i1l4682
 12232                           
 12233                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 12234     0D03  3001               	movlw	1
 12235     0D04  00E9               	movwf	_controlTransferState	;volatile
 12236                           
 12237                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 12238     0D05  0022               	movlb	2	; select bank2
 12239     0D06  083D               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 12240     0D07  1D03               	btfss	3,2
 12241     0D08  2D0C               	goto	i1l4674
 12242                           
 12243                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 12244     0D09  3195  25F3  318C   	fcall	_USBCtrlEPAllowDataStage
 12245     0D0C                     i1l4674:
 12246                           
 12247                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 12248     0D0C  0022               	movlb	2	; select bank2
 12249     0D0D  01BE               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12250                           
 12251                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 12252     0D0E  01BF               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12253                           
 12254                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 12255     0D0F  0840               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 12256     0D10  1D03               	btfss	3,2
 12257     0D11  0008               	return
 12258                           
 12259                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 12260     0D12  3188  2051         	fcall	_USBCtrlEPAllowStatusStage
 12261     0D14  0008               	return
 12262     0D15                     i1l4682:
 12263                           
 12264                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 12265     0D15  3002               	movlw	2
 12266     0D16  00E9               	movwf	_controlTransferState	;volatile
 12267                           
 12268                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 12269     0D17  0867               	movf	_pBDTEntryEP0OutNext,w
 12270     0D18  3E01               	addlw	1
 12271     0D19  00F7               	movwf	??_USBCtrlEPServiceComplete
 12272     0D1A  3000               	movlw	0
 12273     0D1B  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12274     0D1C  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12275     0D1D  0877               	movf	??_USBCtrlEPServiceComplete,w
 12276     0D1E  0086               	movwf	6
 12277     0D1F  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12278     0D20  0087               	movwf	7
 12279     0D21  3008               	movlw	8
 12280     0D22  0081               	movwf	1
 12281                           
 12282                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 12283     0D23  3040               	movlw	64
 12284     0D24  00F7               	movwf	??_USBCtrlEPServiceComplete
 12285     0D25  3000               	movlw	0
 12286     0D26  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12287     0D27  30FF               	movlw	255
 12288     0D28  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12289     0D29  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12290     0D2A  307F               	movlw	127
 12291     0D2B  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12292     0D2C  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12293     0D2D  0867               	movf	_pBDTEntryEP0OutNext,w
 12294     0D2E  0086               	movwf	6
 12295     0D2F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12296     0D30  0087               	movwf	7
 12297     0D31  3142               	addfsr 1,2
 12298     0D32  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12299     0D33  3FC0               	movwi [0]fsr1
 12300     0D34  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12301     0D35  3FC1               	movwi [1]fsr1
 12302                           
 12303                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 12304     0D36  0867               	movf	_pBDTEntryEP0OutNext,w
 12305     0D37  0086               	movwf	6
 12306     0D38  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12307     0D39  0087               	movwf	7
 12308     0D3A  3004               	movlw	4
 12309     0D3B  0081               	movwf	1
 12310                           
 12311                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12312     0D3C  0867               	movf	_pBDTEntryEP0OutNext,w
 12313     0D3D  0086               	movwf	6
 12314     0D3E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12315     0D3F  0087               	movwf	7
 12316     0D40  1781               	bsf	1,7
 12317     0D41  2D0C               	goto	i1l4674
 12318     0D42                     __end_of_USBCtrlEPServiceComplete:	
 12319                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 12320                           
 12321                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 12322                           
 12323                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 12324                           
 12325                           
 12326                           	psect	text62
 12327     15F3                     __ptext62:	
 12328 ;; *************** function _USBCtrlEPAllowDataStage *****************
 12329 ;; Defined at:
 12330 ;;		line 1492 in file "usb/usb_device.c"
 12331 ;; Parameters:    Size  Location     Type
 12332 ;;		None
 12333 ;; Auto vars:     Size  Location     Type
 12334 ;;		None
 12335 ;; Return value:  Size  Location     Type
 12336 ;;                  1    wreg      void 
 12337 ;; Registers used:
 12338 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12339 ;; Tracked objects:
 12340 ;;		On entry : 1F/2
 12341 ;;		On exit  : 1F/0
 12342 ;;		Unchanged: 0/0
 12343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;Total ram usage:        4 bytes
 12349 ;; Hardware stack levels used: 1
 12350 ;; Hardware stack levels required when called: 1
 12351 ;; This function calls:
 12352 ;;		_USBCtrlTrfTxService
 12353 ;; This function is called by:
 12354 ;;		_USBCtrlEPServiceComplete
 12355 ;; This function uses a non-reentrant model
 12356 ;;
 12357                           
 12358     15F3                     _USBCtrlEPAllowDataStage:	
 12359                           ;psect for function _USBCtrlEPAllowDataStage
 12360                           
 12361                           
 12362                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 12363                           
 12364                           ;incstack = 0
 12365                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12366     15F3  01BD               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 12367                           
 12368                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 12369     15F4  01BC               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 12370                           
 12371                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 12372     15F5  3002               	movlw	2
 12373     15F6  0020               	movlb	0	; select bank0
 12374     15F7  0669               	xorwf	_controlTransferState,w	;volatile
 12375     15F8  1D03               	btfss	3,2
 12376     15F9  2E25               	goto	i1l4326
 12377                           
 12378                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 12379     15FA  0867               	movf	_pBDTEntryEP0OutNext,w
 12380     15FB  3E01               	addlw	1
 12381     15FC  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12382     15FD  3000               	movlw	0
 12383     15FE  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12384     15FF  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12385     1600  0873               	movf	??_USBCtrlEPAllowDataStage,w
 12386     1601  0086               	movwf	6
 12387     1602  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 12388     1603  0087               	movwf	7
 12389     1604  3008               	movlw	8
 12390     1605  0081               	movwf	1
 12391                           
 12392                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 12393     1606  3048               	movlw	72
 12394     1607  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12395     1608  3000               	movlw	0
 12396     1609  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12397     160A  30FF               	movlw	255
 12398     160B  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12399     160C  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12400     160D  307F               	movlw	127
 12401     160E  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12402     160F  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12403     1610  0867               	movf	_pBDTEntryEP0OutNext,w
 12404     1611  0086               	movwf	6
 12405     1612  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12406     1613  0087               	movwf	7
 12407     1614  3142               	addfsr 1,2
 12408     1615  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12409     1616  3FC0               	movwi [0]fsr1
 12410     1617  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12411     1618  3FC1               	movwi [1]fsr1
 12412                           
 12413                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 12414     1619  0867               	movf	_pBDTEntryEP0OutNext,w
 12415     161A  0086               	movwf	6
 12416     161B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12417     161C  0087               	movwf	7
 12418     161D  3048               	movlw	72
 12419     161E  0081               	movwf	1
 12420                           
 12421                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12422     161F  0867               	movf	_pBDTEntryEP0OutNext,w
 12423     1620  0086               	movwf	6
 12424     1621  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12425     1622  0087               	movwf	7
 12426     1623  1781               	bsf	1,7
 12427                           
 12428                           ;usb/usb_device.c: 1504:     }
 12429     1624  0008               	return
 12430     1625                     i1l4326:
 12431                           
 12432                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 12433     1625  0021               	movlb	1	; select bank1
 12434     1626  086F               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 12435     1627  0020               	movlb	0	; select bank0
 12436     1628  0247               	subwf	71,w	;volatile
 12437     1629  1D03               	skipz
 12438     162A  2E2F               	goto	u331_25
 12439     162B  0021               	movlb	1	; select bank1
 12440     162C  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 12441     162D  0020               	movlb	0	; select bank0
 12442     162E  0246               	subwf	70,w	;volatile
 12443     162F                     u331_25:
 12444     162F  1803               	skipnc
 12445     1630  2E38               	goto	i1l4330
 12446                           
 12447                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 12448     1631  0847               	movf	71,w	;volatile
 12449     1632  0021               	movlb	1	; select bank1
 12450     1633  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12451     1634  0020               	movlb	0	; select bank0
 12452     1635  0846               	movf	70,w	;volatile
 12453     1636  0021               	movlb	1	; select bank1
 12454     1637  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12455     1638                     i1l4330:
 12456                           
 12457                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 12458     1638  3195  258C         	fcall	_USBCtrlTrfTxService
 12459                           
 12460                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 12461     163A  3048               	movlw	72
 12462     163B  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12463     163C  3000               	movlw	0
 12464     163D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12465     163E  30FF               	movlw	255
 12466     163F  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12467     1640  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12468     1641  307F               	movlw	127
 12469     1642  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12470     1643  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12471     1644  0020               	movlb	0	; select bank0
 12472     1645  0861               	movf	_pBDTEntryIn,w
 12473     1646  0086               	movwf	6
 12474     1647  0862               	movf	_pBDTEntryIn+1,w
 12475     1648  0087               	movwf	7
 12476     1649  3142               	addfsr 1,2
 12477     164A  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12478     164B  3FC0               	movwi [0]fsr1
 12479     164C  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12480     164D  3FC1               	movwi [1]fsr1
 12481                           
 12482                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 12483     164E  0861               	movf	_pBDTEntryIn,w
 12484     164F  0086               	movwf	6
 12485     1650  0862               	movf	_pBDTEntryIn+1,w
 12486     1651  0087               	movwf	7
 12487     1652  3048               	movlw	72
 12488     1653  0081               	movwf	1
 12489                           
 12490                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 12491     1654  0861               	movf	_pBDTEntryIn,w
 12492     1655  0086               	movwf	6
 12493     1656  0862               	movf	_pBDTEntryIn+1,w
 12494     1657  0087               	movwf	7
 12495     1658  1781               	bsf	1,7
 12496     1659  0008               	return
 12497     165A                     __end_of_USBCtrlEPAllowDataStage:
 12498                           
 12499                           	psect	text63
 12500     172A                     __ptext63:	
 12501 ;; *************** function _USBCheckStdRequest *****************
 12502 ;; Defined at:
 12503 ;;		line 2693 in file "usb/usb_device.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;		None
 12506 ;; Auto vars:     Size  Location     Type
 12507 ;;		None
 12508 ;; Return value:  Size  Location     Type
 12509 ;;                  1    wreg      void 
 12510 ;; Registers used:
 12511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12512 ;; Tracked objects:
 12513 ;;		On entry : 1F/2
 12514 ;;		On exit  : 0/0
 12515 ;;		Unchanged: 0/0
 12516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12521 ;;Total ram usage:        0 bytes
 12522 ;; Hardware stack levels used: 1
 12523 ;; Hardware stack levels required when called: 5
 12524 ;; This function calls:
 12525 ;;		_USBStdFeatureReqHandler
 12526 ;;		_USBStdGetDscHandler
 12527 ;;		_USBStdGetStatusHandler
 12528 ;;		_USBStdSetCfgHandler
 12529 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12530 ;; This function is called by:
 12531 ;;		_USBCtrlTrfSetupHandler
 12532 ;; This function uses a non-reentrant model
 12533 ;;
 12534                           
 12535     172A                     _USBCheckStdRequest:	
 12536                           ;psect for function _USBCheckStdRequest
 12537                           
 12538                           
 12539                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 12540                           
 12541                           ;incstack = 0
 12542 ;; hardware stack exceeded
 12543                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12544     172A  0020               	movlb	0	; select bank0
 12545     172B  0E40               	swapf	64,w	;volatile
 12546     172C  0C89               	rrf	9,f
 12547     172D  3903               	andlw	3
 12548     172E  3A00               	xorlw	0
 12549     172F  1D03               	btfss	3,2
 12550     1730  0008               	return
 12551     1731  2F71               	goto	i1l6294
 12552     1732                     i1l694:	
 12553                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 12554                           
 12555                           
 12556                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 12557     1732  0021               	movlb	1	; select bank1
 12558     1733  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12559                           
 12560                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 12561     1734  3008               	movlw	8
 12562     1735  0020               	movlb	0	; select bank0
 12563     1736  00EB               	movwf	_USBDeviceState	;volatile
 12564                           
 12565                           ;usb/usb_device.c: 2703:             break;
 12566     1737  0008               	return
 12567     1738                     i1l6264:
 12568                           
 12569                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 12570     1738  3189  2135         	fcall	_USBStdGetDscHandler
 12571                           
 12572                           ;usb/usb_device.c: 2706:             break;
 12573     173A  0008               	return
 12574     173B                     i1l6266:
 12575                           
 12576                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 12577     173B  3188  20C3         	fcall	_USBStdSetCfgHandler
 12578                           
 12579                           ;usb/usb_device.c: 2709:             break;
 12580     173D  0008               	return
 12581     173E                     i1l6268:
 12582                           
 12583                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 12584     173E  306F               	movlw	low _USBActiveConfiguration
 12585     173F  0021               	movlb	1	; select bank1
 12586     1740  00EB               	movwf	_inPipes^(0+128)	;volatile
 12587     1741  3000               	movlw	high _USBActiveConfiguration
 12588     1742  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 12589                           
 12590                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 12591     1743  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 12592                           
 12593                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 12594     1744  3001               	movlw	1
 12595     1745  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12596                           
 12597                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 12598     1746  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12599                           
 12600                           ;usb/usb_device.c: 2715:             break;
 12601     1747  0008               	return
 12602     1748                     i1l6276:
 12603                           
 12604                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 12605     1748  3193  23B7         	fcall	_USBStdGetStatusHandler
 12606                           
 12607                           ;usb/usb_device.c: 2718:             break;
 12608     174A  0008               	return
 12609     174B                     i1l6278:
 12610                           
 12611                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 12612     174B  3182  22B6         	fcall	_USBStdFeatureReqHandler
 12613                           
 12614                           ;usb/usb_device.c: 2722:             break;
 12615     174D  0008               	return
 12616     174E                     i1l6280:
 12617                           
 12618                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 12619     174E  0844               	movf	68,w	;volatile
 12620     174F  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 12621     1750  0021               	movlb	1	; select bank1
 12622     1751  00EB               	movwf	_inPipes^(0+128)	;volatile
 12623     1752  3001               	movlw	1
 12624     1753  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 12625                           
 12626                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 12627     1754  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 12628                           
 12629                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 12630     1755  3001               	movlw	1
 12631     1756  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12632                           
 12633                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 12634     1757  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12635                           
 12636                           ;usb/usb_device.c: 2728:             break;
 12637     1758  0008               	return
 12638     1759                     i1l703:	
 12639                           ;usb/usb_device.c: 2729:         case 11:
 12640                           
 12641                           
 12642                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 12643     1759  0021               	movlb	1	; select bank1
 12644     175A  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12645                           
 12646                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 12647     175B  0020               	movlb	0	; select bank0
 12648     175C  0844               	movf	68,w	;volatile
 12649     175D  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 12650     175E  0086               	movwf	6
 12651     175F  3001               	movlw	1	; select bank2/3
 12652     1760  0087               	movwf	7
 12653     1761  0842               	movf	66,w	;volatile
 12654     1762  0081               	movwf	1
 12655                           
 12656                           ;usb/usb_device.c: 2732:             break;
 12657     1763  0008               	return
 12658     1764                     i1l6290:
 12659                           
 12660                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 12661     1764  3002               	movlw	2
 12662     1765  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12663     1766  3000               	movlw	0
 12664     1767  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12665     1768  3000               	movlw	0
 12666     1769  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12667     176A  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12668     176B  3000               	movlw	0
 12669     176C  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12670     176D  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12671     176E  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12672                           
 12673                           ;usb/usb_device.c: 2735:             break;
 12674     1770  0008               	return
 12675     1771                     i1l6294:
 12676     1771  0841               	movf	65,w	;volatile
 12677                           
 12678                           ; Switch size 1, requested type "simple"
 12679                           ; Number of cases is 11, Range of values is 0 to 12
 12680                           ; switch strategies available:
 12681                           ; Name         Instructions Cycles
 12682                           ; direct_byte           32     6 (fixed)
 12683                           ; simple_byte           34    18 (average)
 12684                           ; jumptable            260     6 (fixed)
 12685                           ;	Chosen strategy is simple_byte
 12686     1772  3A00               	xorlw	0	; case 0
 12687     1773  1903               	skipnz
 12688     1774  2F48               	goto	i1l6276
 12689     1775  3A01               	xorlw	1	; case 1
 12690     1776  1903               	skipnz
 12691     1777  2F4B               	goto	i1l6278
 12692     1778  3A02               	xorlw	2	; case 3
 12693     1779  1903               	skipnz
 12694     177A  2F4B               	goto	i1l6278
 12695     177B  3A06               	xorlw	6	; case 5
 12696     177C  1903               	skipnz
 12697     177D  2F32               	goto	i1l694
 12698     177E  3A03               	xorlw	3	; case 6
 12699     177F  1903               	skipnz
 12700     1780  2F38               	goto	i1l6264
 12701     1781  3A01               	xorlw	1	; case 7
 12702     1782  1903               	skipnz
 12703     1783  2F64               	goto	i1l6290
 12704     1784  3A0F               	xorlw	15	; case 8
 12705     1785  1903               	skipnz
 12706     1786  2F3E               	goto	i1l6268
 12707     1787  3A01               	xorlw	1	; case 9
 12708     1788  1903               	skipnz
 12709     1789  2F3B               	goto	i1l6266
 12710     178A  3A03               	xorlw	3	; case 10
 12711     178B  1903               	skipnz
 12712     178C  2F4E               	goto	i1l6280
 12713     178D  3A01               	xorlw	1	; case 11
 12714     178E  1903               	skipnz
 12715     178F  2F59               	goto	i1l703
 12716     1790  3A07               	xorlw	7	; case 12
 12717     1791  1903               	skipnz
 12718     1792  2F94               	goto	i1l692
 12719     1793  2F94               	goto	i1l692
 12720     1794                     i1l692:
 12721     1794  0008               	return
 12722     1795                     __end_of_USBCheckStdRequest:
 12723                           
 12724                           	psect	text64
 12725     08C3                     __ptext64:	
 12726 ;; *************** function _USBStdSetCfgHandler *****************
 12727 ;; Defined at:
 12728 ;;		line 1972 in file "usb/usb_device.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;		None
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;  p               2    6[BANK0 ] PTR unsigned char 
 12733 ;;		 -> UEP1(1), 
 12734 ;;  i               1    8[BANK0 ] unsigned char 
 12735 ;;  i               1    9[BANK0 ] unsigned char 
 12736 ;; Return value:  Size  Location     Type
 12737 ;;                  1    wreg      void 
 12738 ;; Registers used:
 12739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12740 ;; Tracked objects:
 12741 ;;		On entry : 1D/0
 12742 ;;		On exit  : 1F/0
 12743 ;;		Unchanged: 0/0
 12744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;Total ram usage:        5 bytes
 12750 ;; Hardware stack levels used: 1
 12751 ;; Hardware stack levels required when called: 4
 12752 ;; This function calls:
 12753 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12754 ;;		i1_memset
 12755 ;; This function is called by:
 12756 ;;		_USBCheckStdRequest
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760     08C3                     _USBStdSetCfgHandler:	
 12761                           ;psect for function _USBStdSetCfgHandler
 12762                           
 12763                           
 12764                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 12765                           
 12766                           ;incstack = 0
 12767 ;; hardware stack exceeded
 12768                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12769     08C3  0021               	movlb	1	; select bank1
 12770     08C4  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12771                           
 12772                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 12773     08C5  300E               	movlw	14
 12774     08C6  0020               	movlb	0	; select bank0
 12775     08C7  00D7               	movwf	USBStdSetCfgHandler@p+1
 12776     08C8  3099               	movlw	153
 12777     08C9  00D6               	movwf	USBStdSetCfgHandler@p
 12778     08CA  01D8               	clrf	USBStdSetCfgHandler@i_2097
 12779     08CB                     i1l6214:
 12780     08CB  0856               	movf	USBStdSetCfgHandler@p,w
 12781     08CC  0086               	movwf	6
 12782     08CD  0857               	movf	USBStdSetCfgHandler@p+1,w
 12783     08CE  0087               	movwf	7
 12784     08CF  0181               	clrf	1
 12785     08D0  3001               	movlw	1
 12786     08D1  07D6               	addwf	USBStdSetCfgHandler@p,f
 12787     08D2  3000               	movlw	0
 12788     08D3  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 12789     08D4  3001               	movlw	1
 12790     08D5  00FD               	movwf	??_USBStdSetCfgHandler
 12791     08D6  087D               	movf	??_USBStdSetCfgHandler,w
 12792     08D7  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 12793     08D8  0858               	movf	USBStdSetCfgHandler@i_2097,w
 12794     08D9  1903               	btfsc	3,2
 12795     08DA  28CB               	goto	i1l6214
 12796                           
 12797                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 12798     08DB  3020               	movlw	32
 12799     08DC  00F0               	movwf	i1memset@dest
 12800     08DD  3000               	movlw	0
 12801     08DE  00F1               	movwf	i1memset@dest+1
 12802     08DF  3000               	movlw	0
 12803     08E0  00F2               	movwf	i1memset@c
 12804     08E1  00F3               	movwf	i1memset@c+1
 12805     08E2  3020               	movlw	32
 12806     08E3  00F4               	movwf	i1memset@n
 12807     08E4  3000               	movlw	0
 12808     08E5  00F5               	movwf	i1memset@n+1
 12809     08E6  319D  2587  3188   	fcall	i1_memset
 12810                           
 12811                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 12812     08E9  003D               	movlb	29	; select bank29
 12813     08EA  170E               	bsf	14,6	;volatile
 12814                           
 12815                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 12816     08EB  0020               	movlb	0	; select bank0
 12817     08EC  01D9               	clrf	USBStdSetCfgHandler@i
 12818     08ED                     i1l6232:
 12819                           
 12820                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 12821     08ED  0859               	movf	USBStdSetCfgHandler@i,w
 12822     08EE  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12823     08EF  0086               	movwf	6
 12824     08F0  3001               	movlw	1	; select bank2/3
 12825     08F1  0087               	movwf	7
 12826     08F2  0181               	clrf	1
 12827                           
 12828                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 12829     08F3  0859               	movf	USBStdSetCfgHandler@i,w
 12830     08F4  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12831     08F5  0086               	movwf	6
 12832     08F6  3001               	movlw	1	; select bank2/3
 12833     08F7  0087               	movwf	7
 12834     08F8  0181               	clrf	1
 12835                           
 12836                           ;usb/usb_device.c: 1995:  }
 12837     08F9  3001               	movlw	1
 12838     08FA  00FD               	movwf	??_USBStdSetCfgHandler
 12839     08FB  087D               	movf	??_USBStdSetCfgHandler,w
 12840     08FC  07D9               	addwf	USBStdSetCfgHandler@i,f
 12841     08FD  3002               	movlw	2
 12842     08FE  0259               	subwf	USBStdSetCfgHandler@i,w
 12843     08FF  1C03               	skipc
 12844     0900  28ED               	goto	i1l6232
 12845                           
 12846                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 12847     0901  304B               	movlw	low _USBAlternateInterface
 12848     0902  00F0               	movwf	i1memset@dest
 12849     0903  3001               	movlw	high _USBAlternateInterface
 12850     0904  00F1               	movwf	i1memset@dest+1
 12851     0905  3000               	movlw	0
 12852     0906  00F2               	movwf	i1memset@c
 12853     0907  00F3               	movwf	i1memset@c+1
 12854     0908  3001               	movlw	1
 12855     0909  00F4               	movwf	i1memset@n
 12856     090A  3000               	movlw	0
 12857     090B  00F5               	movwf	i1memset@n+1
 12858     090C  319D  2587  3188   	fcall	i1_memset
 12859                           
 12860                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 12861     090F  003D               	movlb	29	; select bank29
 12862     0910  130E               	bcf	14,6	;volatile
 12863                           
 12864                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 12865     0911  3028               	movlw	40
 12866     0912  0020               	movlb	0	; select bank0
 12867     0913  00E1               	movwf	_pBDTEntryIn
 12868     0914  3000               	movlw	0
 12869     0915  00E2               	movwf	_pBDTEntryIn+1
 12870                           
 12871                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 12872     0916  3020               	movlw	32
 12873     0917  00EA               	movwf	_pBDTEntryEP0OutCurrent
 12874                           
 12875                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 12876     0918  086A               	movf	_pBDTEntryEP0OutCurrent,w
 12877     0919  00E7               	movwf	_pBDTEntryEP0OutNext
 12878     091A  01E8               	clrf	_pBDTEntryEP0OutNext+1
 12879                           
 12880                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 12881     091B  0842               	movf	66,w	;volatile
 12882     091C  00EF               	movwf	_USBActiveConfiguration	;volatile
 12883                           
 12884                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 12885     091D  086F               	movf	_USBActiveConfiguration,w	;volatile
 12886     091E  1D03               	btfss	3,2
 12887     091F  2923               	goto	i1l6254
 12888                           
 12889                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 12890     0920  3010               	movlw	16
 12891     0921  00EB               	movwf	_USBDeviceState	;volatile
 12892                           
 12893                           ;usb/usb_device.c: 2017:     }
 12894     0922  0008               	return
 12895     0923                     i1l6254:
 12896                           
 12897                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 12898     0923  3001               	movlw	1
 12899     0924  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12900     0925  3000               	movlw	0
 12901     0926  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12902     0927  306F               	movlw	low _USBActiveConfiguration
 12903     0928  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12904     0929  3000               	movlw	high _USBActiveConfiguration
 12905     092A  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12906     092B  3001               	movlw	1
 12907     092C  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12908     092D  3000               	movlw	0
 12909     092E  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12910     092F  3191  2153         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12911                           
 12912                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 12913     0931  3020               	movlw	32
 12914     0932  0020               	movlb	0	; select bank0
 12915     0933  00EB               	movwf	_USBDeviceState	;volatile
 12916     0934  0008               	return
 12917     0935                     __end_of_USBStdSetCfgHandler:
 12918                           
 12919                           	psect	text65
 12920     1D87                     __ptext65:	
 12921 ;; *************** function i1_memset *****************
 12922 ;; Defined at:
 12923 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;  dest            2    0[COMMON] PTR void 
 12926 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 12927 ;;  c               2    2[COMMON] int 
 12928 ;;  n               2    4[COMMON] unsigned int 
 12929 ;; Auto vars:     Size  Location     Type
 12930 ;;  p               2    6[COMMON] PTR unsigned char 
 12931 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 12932 ;; Return value:  Size  Location     Type
 12933 ;;                  2    0[COMMON] PTR void 
 12934 ;; Registers used:
 12935 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12936 ;; Tracked objects:
 12937 ;;		On entry : 1F/0
 12938 ;;		On exit  : 1F/0
 12939 ;;		Unchanged: 1F/0
 12940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12941 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12944 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12945 ;;Total ram usage:        8 bytes
 12946 ;; Hardware stack levels used: 1
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_USBStdSetCfgHandler
 12951 ;; This function uses a non-reentrant model
 12952 ;;
 12953                           
 12954     1D87                     i1_memset:	
 12955                           ;psect for function i1_memset
 12956                           
 12957                           
 12958                           ;incstack = 0
 12959                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 12960     1D87  0871               	movf	i1memset@dest+1,w
 12961     1D88  00F7               	movwf	i1memset@p+1
 12962     1D89  0870               	movf	i1memset@dest,w
 12963     1D8A  00F6               	movwf	i1memset@p
 12964     1D8B                     i1l6204:
 12965     1D8B  3001               	movlw	1
 12966     1D8C  02F4               	subwf	i1memset@n,f
 12967     1D8D  3000               	movlw	0
 12968     1D8E  3BF5               	subwfb	i1memset@n+1,f
 12969     1D8F  0A74               	incf	i1memset@n,w
 12970     1D90  1903               	btfsc	3,2
 12971     1D91  0A75               	incf	i1memset@n+1,w
 12972     1D92  1903               	btfsc	3,2
 12973     1D93  0008               	return
 12974     1D94  0876               	movf	i1memset@p,w
 12975     1D95  0086               	movwf	6
 12976     1D96  0877               	movf	i1memset@p+1,w
 12977     1D97  0087               	movwf	7
 12978     1D98  0872               	movf	i1memset@c,w
 12979     1D99  0081               	movwf	1
 12980     1D9A  3001               	movlw	1
 12981     1D9B  07F6               	addwf	i1memset@p,f
 12982     1D9C  3000               	movlw	0
 12983     1D9D  3DF7               	addwfc	i1memset@p+1,f
 12984     1D9E  2D8B               	goto	i1l6204
 12985     1D9F                     __end_ofi1_memset:
 12986                           
 12987                           	psect	text66
 12988     13B7                     __ptext66:	
 12989 ;; *************** function _USBStdGetStatusHandler *****************
 12990 ;; Defined at:
 12991 ;;		line 2133 in file "usb/usb_device.c"
 12992 ;; Parameters:    Size  Location     Type
 12993 ;;		None
 12994 ;; Auto vars:     Size  Location     Type
 12995 ;;  p               2    0[COMMON] PTR struct __BDT
 12996 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12997 ;; Return value:  Size  Location     Type
 12998 ;;                  1    wreg      void 
 12999 ;; Registers used:
 13000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13001 ;; Tracked objects:
 13002 ;;		On entry : 1D/0
 13003 ;;		On exit  : 1F/1
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;Total ram usage:        2 bytes
 13011 ;; Hardware stack levels used: 1
 13012 ;; This function calls:
 13013 ;;		Nothing
 13014 ;; This function is called by:
 13015 ;;		_USBCheckStdRequest
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019     13B7                     _USBStdGetStatusHandler:	
 13020                           ;psect for function _USBStdGetStatusHandler
 13021                           
 13022                           
 13023                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 13024                           
 13025                           ;incstack = 0
 13026                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 13027     13B7  0020               	movlb	0	; select bank0
 13028     13B8  01C8               	clrf	72	;volatile
 13029                           
 13030                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 13031     13B9  01C9               	clrf	73	;volatile
 13032                           
 13033                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 13034     13BA  2BF5               	goto	i1l4446
 13035     13BB                     i1l631:	
 13036                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 13037                           
 13038                           
 13039                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 13040     13BB  0021               	movlb	1	; select bank1
 13041     13BC  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13042                           
 13043                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 13044                           
 13045                           ;usb/usb_device.c: 2146:             if(0 == 1)
 13046     13BD  0022               	movlb	2	; select bank2
 13047     13BE  0345               	decf	_RemoteWakeup^(0+256),w	;volatile
 13048     13BF  1D03               	btfss	3,2
 13049     13C0  2C01               	goto	i1l634
 13050                           
 13051                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 13052     13C1  0020               	movlb	0	; select bank0
 13053     13C2  14C8               	bsf	72,1	;volatile
 13054     13C3  2C01               	goto	i1l634
 13055     13C4                     i1l635:	
 13056                           ;usb/usb_device.c: 2156:         case (0x01):
 13057                           
 13058                           
 13059                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 13060     13C4  0021               	movlb	1	; select bank1
 13061     13C5  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13062                           
 13063                           ;usb/usb_device.c: 2158:             break;
 13064     13C6  2C01               	goto	i1l634
 13065     13C7                     i1l636:	
 13066                           ;usb/usb_device.c: 2159:         case (0x02):
 13067                           
 13068                           
 13069                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 13070     13C7  0021               	movlb	1	; select bank1
 13071     13C8  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13072                           
 13073                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 13074     13C9  0020               	movlb	0	; select bank0
 13075     13CA  0844               	movf	68,w	;volatile
 13076     13CB  390F               	andlw	15
 13077     13CC  3A00               	xorlw	0
 13078     13CD  1903               	skipnz
 13079     13CE  2C01               	goto	i1l634
 13080                           
 13081                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 13082     13CF  1BC4               	btfsc	68,7	;volatile
 13083     13D0  2BDC               	goto	i1l4436
 13084                           
 13085                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 13086     13D1  0844               	movf	68,w	;volatile
 13087     13D2  390F               	andlw	15
 13088     13D3  0709               	addwf	9,w
 13089     13D4  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13090     13D5  0086               	movwf	6
 13091     13D6  3001               	movlw	1	; select bank2/3
 13092     13D7  0087               	movwf	7
 13093     13D8  3F40               	moviw [0]fsr1
 13094     13D9  00F0               	movwf	USBStdGetStatusHandler@p
 13095     13DA  3F41               	moviw [1]fsr1
 13096     13DB  2BE5               	goto	L9
 13097     13DC                     i1l4436:	
 13098                           ;usb/usb_device.c: 2171:                 }
 13099                           
 13100                           
 13101                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 13102     13DC  0844               	movf	68,w	;volatile
 13103     13DD  390F               	andlw	15
 13104     13DE  0709               	addwf	9,w
 13105     13DF  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13106     13E0  0086               	movwf	6
 13107     13E1  0187               	clrf	7
 13108     13E2  3F40               	moviw [0]fsr1
 13109     13E3  00F0               	movwf	USBStdGetStatusHandler@p
 13110     13E4  3F41               	moviw [1]fsr1
 13111     13E5                     L9:
 13112     13E5  00F1               	movwf	USBStdGetStatusHandler@p+1
 13113                           
 13114                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 13115     13E6  0870               	movf	USBStdGetStatusHandler@p,w
 13116     13E7  0086               	movwf	6
 13117     13E8  0871               	movf	USBStdGetStatusHandler@p+1,w
 13118     13E9  0087               	movwf	7
 13119     13EA  1F81               	btfss	1,7
 13120     13EB  2C01               	goto	i1l634
 13121     13EC  0870               	movf	USBStdGetStatusHandler@p,w
 13122     13ED  0086               	movwf	6
 13123     13EE  0871               	movf	USBStdGetStatusHandler@p+1,w
 13124     13EF  0087               	movwf	7
 13125     13F0  1D01               	btfss	1,2
 13126     13F1  2C01               	goto	i1l634
 13127                           
 13128                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 13129     13F2  3001               	movlw	1
 13130     13F3  00C8               	movwf	72	;volatile
 13131     13F4  2C01               	goto	i1l634
 13132     13F5                     i1l4446:
 13133     13F5  0840               	movf	64,w	;volatile
 13134     13F6  391F               	andlw	31
 13135                           
 13136                           ; Switch size 1, requested type "simple"
 13137                           ; Number of cases is 3, Range of values is 0 to 2
 13138                           ; switch strategies available:
 13139                           ; Name         Instructions Cycles
 13140                           ; simple_byte           10     6 (average)
 13141                           ; direct_byte           12     6 (fixed)
 13142                           ; jumptable            260     6 (fixed)
 13143                           ;	Chosen strategy is simple_byte
 13144     13F7  3A00               	xorlw	0	; case 0
 13145     13F8  1903               	skipnz
 13146     13F9  2BBB               	goto	i1l631
 13147     13FA  3A01               	xorlw	1	; case 1
 13148     13FB  1903               	skipnz
 13149     13FC  2BC4               	goto	i1l635
 13150     13FD  3A03               	xorlw	3	; case 2
 13151     13FE  1903               	skipnz
 13152     13FF  2BC7               	goto	i1l636
 13153     1400  2C01               	goto	i1l634
 13154     1401                     i1l634:
 13155                           
 13156                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 13157     1401  0021               	movlb	1	; select bank1
 13158     1402  1FED               	btfss	(_inPipes^(0+128)+2),7	;volatile
 13159     1403  0008               	return
 13160                           
 13161                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 13162     1404  3048               	movlw	72
 13163     1405  00EB               	movwf	_inPipes^(0+128)	;volatile
 13164     1406  3000               	movlw	0
 13165     1407  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13166                           
 13167                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13168     1408  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 13169                           
 13170                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 13171     1409  3002               	movlw	2
 13172     140A  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13173     140B  0008               	return
 13174     140C                     __end_of_USBStdGetStatusHandler:
 13175                           
 13176                           	psect	text67
 13177     0935                     __ptext67:	
 13178 ;; *************** function _USBStdGetDscHandler *****************
 13179 ;; Defined at:
 13180 ;;		line 2047 in file "usb/usb_device.c"
 13181 ;; Parameters:    Size  Location     Type
 13182 ;;		None
 13183 ;; Auto vars:     Size  Location     Type
 13184 ;;		None
 13185 ;; Return value:  Size  Location     Type
 13186 ;;                  1    wreg      void 
 13187 ;; Registers used:
 13188 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 13189 ;; Tracked objects:
 13190 ;;		On entry : 1D/0
 13191 ;;		On exit  : 1E/0
 13192 ;;		Unchanged: 0/0
 13193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;Total ram usage:        3 bytes
 13199 ;; Hardware stack levels used: 1
 13200 ;; This function calls:
 13201 ;;		Nothing
 13202 ;; This function is called by:
 13203 ;;		_USBCheckStdRequest
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207     0935                     _USBStdGetDscHandler:	
 13208                           ;psect for function _USBStdGetDscHandler
 13209                           
 13210                           
 13211                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 13212                           
 13213                           ;incstack = 0
 13214                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 13215     0935  3080               	movlw	128
 13216     0936  0020               	movlb	0	; select bank0
 13217     0937  0640               	xorwf	64,w	;volatile
 13218     0938  1D03               	btfss	3,2
 13219     0939  0008               	return
 13220                           
 13221                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 13222     093A  30C0               	movlw	192
 13223     093B  0021               	movlb	1	; select bank1
 13224     093C  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 13225                           
 13226                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 13227     093D  29A1               	goto	i1l4420
 13228     093E                     i1l4394:
 13229                           
 13230                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 13231     093E  30B8               	movlw	low (_device_dsc| (0+32768))
 13232     093F  0021               	movlb	1	; select bank1
 13233     0940  00EB               	movwf	_inPipes^(0+128)	;volatile
 13234     0941  3098               	movlw	high (_device_dsc| (0+32768))
 13235     0942  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 13236                           
 13237                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 13238     0943  3000               	movlw	0
 13239     0944  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13240     0945  3012               	movlw	18
 13241     0946  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13242                           
 13243                           ;usb/usb_device.c: 2062:                 break;
 13244     0947  0008               	return
 13245     0948                     i1l4398:
 13246                           
 13247                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 13248     0948  0842               	movf	66,w	;volatile
 13249     0949  1D03               	btfss	3,2
 13250     094A  2977               	goto	i1l4406
 13251                           
 13252                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 13253     094B  0842               	movf	66,w	;volatile
 13254     094C  00F0               	movwf	??_USBStdGetDscHandler
 13255     094D  01F1               	clrf	??_USBStdGetDscHandler+1
 13256     094E  35F0               	lslf	??_USBStdGetDscHandler,f
 13257     094F  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13258     0950  30DD               	movlw	low _USB_CD_Ptr
 13259     0951  0770               	addwf	??_USBStdGetDscHandler,w
 13260     0952  0084               	movwf	4
 13261     0953  3018               	movlw	high _USB_CD_Ptr
 13262     0954  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13263     0955  3880               	iorlw	128
 13264     0956  0085               	movwf	5
 13265     0957  3F00               	moviw [0]fsr0
 13266     0958  0021               	movlb	1	; select bank1
 13267     0959  00EB               	movwf	_inPipes^(0+128)	;volatile
 13268     095A  3F01               	moviw [1]fsr0
 13269     095B  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13270                           
 13271                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 13272     095C  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13273     095D  00F1               	movwf	??_USBStdGetDscHandler+1
 13274     095E  086B               	movf	_inPipes^(0+128),w	;volatile
 13275     095F  00F0               	movwf	??_USBStdGetDscHandler
 13276     0960  3002               	movlw	2
 13277     0961  0770               	addwf	??_USBStdGetDscHandler,w
 13278     0962  0084               	movwf	4
 13279     0963  0871               	movf	??_USBStdGetDscHandler+1,w
 13280     0964  1803               	skipnc
 13281     0965  0A71               	incf	??_USBStdGetDscHandler+1,w
 13282     0966  0085               	movwf	5
 13283     0967  0800               	movf	0,w	;code access
 13284     0968  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13285                           
 13286                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 13287     0969  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13288     096A  00F1               	movwf	??_USBStdGetDscHandler+1
 13289     096B  086B               	movf	_inPipes^(0+128),w	;volatile
 13290     096C  00F0               	movwf	??_USBStdGetDscHandler
 13291     096D  3003               	movlw	3
 13292     096E  0770               	addwf	??_USBStdGetDscHandler,w
 13293     096F  0084               	movwf	4
 13294     0970  0871               	movf	??_USBStdGetDscHandler+1,w
 13295     0971  1803               	skipnc
 13296     0972  0A71               	incf	??_USBStdGetDscHandler+1,w
 13297     0973  0085               	movwf	5
 13298     0974  0800               	movf	0,w	;code access
 13299     0975  00EF               	movwf	(_inPipes^(0+128)+4)	;volatile
 13300                           
 13301                           ;usb/usb_device.c: 2080:                 }
 13302     0976  0008               	return
 13303     0977                     i1l4406:
 13304                           
 13305                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 13306     0977  0021               	movlb	1	; select bank1
 13307     0978  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13308     0979  0008               	return
 13309     097A                     i1l4408:
 13310                           
 13311                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 13312     097A  3003               	movlw	3
 13313     097B  0242               	subwf	66,w	;volatile
 13314     097C  1803               	skipnc
 13315     097D  299B               	goto	i1l4414
 13316                           
 13317                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 13318     097E  0842               	movf	66,w	;volatile
 13319     097F  00F0               	movwf	??_USBStdGetDscHandler
 13320     0980  01F1               	clrf	??_USBStdGetDscHandler+1
 13321     0981  35F0               	lslf	??_USBStdGetDscHandler,f
 13322     0982  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13323     0983  30D3               	movlw	low _USB_SD_Ptr
 13324     0984  0770               	addwf	??_USBStdGetDscHandler,w
 13325     0985  0084               	movwf	4
 13326     0986  3018               	movlw	high _USB_SD_Ptr
 13327     0987  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13328     0988  3880               	iorlw	128
 13329     0989  0085               	movwf	5
 13330     098A  3F00               	moviw [0]fsr0
 13331     098B  0021               	movlb	1	; select bank1
 13332     098C  00EB               	movwf	_inPipes^(0+128)	;volatile
 13333     098D  3F01               	moviw [1]fsr0
 13334     098E  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13335                           
 13336                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 13337     098F  086B               	movf	_inPipes^(0+128),w	;volatile
 13338     0990  0084               	movwf	4
 13339     0991  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13340     0992  0085               	movwf	5
 13341     0993  0800               	movf	0,w	;code access
 13342     0994  00F0               	movwf	??_USBStdGetDscHandler
 13343     0995  01F1               	clrf	??_USBStdGetDscHandler+1
 13344     0996  0870               	movf	??_USBStdGetDscHandler,w
 13345     0997  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13346     0998  0871               	movf	??_USBStdGetDscHandler+1,w
 13347     0999  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13348                           
 13349                           ;usb/usb_device.c: 2096:                 }
 13350     099A  0008               	return
 13351     099B                     i1l4414:
 13352                           
 13353                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 13354     099B  0021               	movlb	1	; select bank1
 13355     099C  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13356     099D  0008               	return
 13357     099E                     i1l4416:
 13358                           
 13359                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 13360     099E  0021               	movlb	1	; select bank1
 13361     099F  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13362                           
 13363                           ;usb/usb_device.c: 2113:                 break;
 13364     09A0  0008               	return
 13365     09A1                     i1l4420:
 13366     09A1  0020               	movlb	0	; select bank0
 13367     09A2  0843               	movf	67,w	;volatile
 13368                           
 13369                           ; Switch size 1, requested type "simple"
 13370                           ; Number of cases is 3, Range of values is 1 to 3
 13371                           ; switch strategies available:
 13372                           ; Name         Instructions Cycles
 13373                           ; simple_byte           10     6 (average)
 13374                           ; direct_byte           15     9 (fixed)
 13375                           ; jumptable            263     9 (fixed)
 13376                           ;	Chosen strategy is simple_byte
 13377     09A3  3A01               	xorlw	1	; case 1
 13378     09A4  1903               	skipnz
 13379     09A5  293E               	goto	i1l4394
 13380     09A6  3A03               	xorlw	3	; case 2
 13381     09A7  1903               	skipnz
 13382     09A8  2948               	goto	i1l4398
 13383     09A9  3A01               	xorlw	1	; case 3
 13384     09AA  1903               	skipnz
 13385     09AB  297A               	goto	i1l4408
 13386     09AC  299E               	goto	i1l4416
 13387     09AD  0008               	return
 13388     09AE                     __end_of_USBStdGetDscHandler:
 13389                           
 13390                           	psect	text68
 13391     02B6                     __ptext68:	
 13392 ;; *************** function _USBStdFeatureReqHandler *****************
 13393 ;; Defined at:
 13394 ;;		line 2761 in file "usb/usb_device.c"
 13395 ;; Parameters:    Size  Location     Type
 13396 ;;		None
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;  p               2   11[BANK0 ] PTR struct __BDT
 13399 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13400 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 13401 ;;		 -> UEP0(1), 
 13402 ;;  current_ep_d    1   10[BANK0 ] struct .
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  1    wreg      void 
 13405 ;; Registers used:
 13406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13407 ;; Tracked objects:
 13408 ;;		On entry : 1D/0
 13409 ;;		On exit  : 1F/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13416 ;;Total ram usage:        7 bytes
 13417 ;; Hardware stack levels used: 1
 13418 ;; Hardware stack levels required when called: 4
 13419 ;; This function calls:
 13420 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13421 ;; This function is called by:
 13422 ;;		_USBCheckStdRequest
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426     02B6                     _USBStdFeatureReqHandler:	
 13427                           ;psect for function _USBStdFeatureReqHandler
 13428                           
 13429                           
 13430                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 13431                           
 13432                           ;incstack = 0
 13433 ;; hardware stack exceeded
 13434                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13435     02B6  0020               	movlb	0	; select bank0
 13436     02B7  0342               	decf	66,w	;volatile
 13437     02B8  1D03               	btfss	3,2
 13438     02B9  2ACC               	goto	i1l4466
 13439     02BA  0840               	movf	64,w	;volatile
 13440     02BB  391F               	andlw	31
 13441     02BC  3A00               	xorlw	0
 13442     02BD  1D03               	skipz
 13443     02BE  2ACC               	goto	i1l4466
 13444                           
 13445                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 13446     02BF  0021               	movlb	1	; select bank1
 13447     02C0  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13448                           
 13449                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 13450     02C1  3003               	movlw	3
 13451     02C2  0020               	movlb	0	; select bank0
 13452     02C3  0641               	xorwf	65,w	;volatile
 13453     02C4  1D03               	btfss	3,2
 13454     02C5  2ACA               	goto	i1l4464
 13455                           
 13456                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 13457     02C6  3001               	movlw	1
 13458     02C7  0022               	movlb	2	; select bank2
 13459     02C8  00C5               	movwf	_RemoteWakeup^(0+256)	;volatile
 13460     02C9  2ACC               	goto	i1l4466
 13461     02CA                     i1l4464:
 13462                           
 13463                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 13464     02CA  0022               	movlb	2	; select bank2
 13465     02CB  01C5               	clrf	_RemoteWakeup^(0+256)	;volatile
 13466     02CC                     i1l4466:
 13467                           
 13468                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 13469     02CC  0020               	movlb	0	; select bank0
 13470     02CD  0842               	movf	66,w	;volatile
 13471     02CE  1D03               	btfss	3,2
 13472     02CF  0008               	return
 13473     02D0  0840               	movf	64,w	;volatile
 13474     02D1  391F               	andlw	31
 13475     02D2  3A02               	xorlw	2
 13476     02D3  1D03               	skipz
 13477     02D4  0008               	return
 13478     02D5  0844               	movf	68,w	;volatile
 13479     02D6  390F               	andlw	15
 13480     02D7  3A00               	xorlw	0
 13481     02D8  1903               	skipnz
 13482     02D9  0008               	return
 13483     02DA  0844               	movf	68,w	;volatile
 13484     02DB  390F               	andlw	15
 13485     02DC  00D6               	movwf	??_USBStdFeatureReqHandler
 13486     02DD  3002               	movlw	2
 13487     02DE  0256               	subwf	??_USBStdFeatureReqHandler,w
 13488     02DF  1803               	skipnc
 13489     02E0  0008               	return
 13490     02E1  3020               	movlw	32
 13491     02E2  066B               	xorwf	_USBDeviceState,w
 13492     02E3  1D03               	btfss	3,2
 13493     02E4  0008               	return
 13494                           
 13495                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 13496     02E5  0021               	movlb	1	; select bank1
 13497     02E6  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13498                           
 13499                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 13500     02E7  0020               	movlb	0	; select bank0
 13501     02E8  1BC4               	btfsc	68,7	;volatile
 13502     02E9  2AF9               	goto	i1l4480
 13503                           
 13504                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 13505     02EA  0844               	movf	68,w	;volatile
 13506     02EB  390F               	andlw	15
 13507     02EC  0709               	addwf	9,w
 13508     02ED  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13509     02EE  0086               	movwf	6
 13510     02EF  3001               	movlw	1	; select bank2/3
 13511     02F0  0087               	movwf	7
 13512     02F1  3F40               	moviw [0]fsr1
 13513     02F2  00DB               	movwf	USBStdFeatureReqHandler@p
 13514     02F3  3F41               	moviw [1]fsr1
 13515     02F4  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13516                           
 13517                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 13518     02F5  0844               	movf	68,w	;volatile
 13519     02F6  390F               	andlw	15
 13520     02F7  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13521     02F8  2B06               	goto	L10
 13522     02F9                     i1l4480:	
 13523                           ;usb/usb_device.c: 2797:         }
 13524                           
 13525                           
 13526                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 13527     02F9  0844               	movf	68,w	;volatile
 13528     02FA  390F               	andlw	15
 13529     02FB  0709               	addwf	9,w
 13530     02FC  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13531     02FD  0086               	movwf	6
 13532     02FE  0187               	clrf	7
 13533     02FF  3F40               	moviw [0]fsr1
 13534     0300  00DB               	movwf	USBStdFeatureReqHandler@p
 13535     0301  3F41               	moviw [1]fsr1
 13536     0302  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13537                           
 13538                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 13539     0303  0844               	movf	68,w	;volatile
 13540     0304  390F               	andlw	15
 13541     0305  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13542     0306                     L10:
 13543     0306  0086               	movwf	6
 13544     0307  3001               	movlw	1	; select bank2/3
 13545     0308  0087               	movwf	7
 13546     0309  0801               	movf	1,w
 13547     030A  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 13548                           
 13549                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 13550     030B  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 13551     030C  2B17               	goto	i1l4486
 13552                           
 13553                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 13554     030D  30FB               	movlw	251
 13555     030E  00D6               	movwf	??_USBStdFeatureReqHandler
 13556     030F  30FF               	movlw	255
 13557     0310  00D7               	movwf	??_USBStdFeatureReqHandler+1
 13558     0311  085B               	movf	USBStdFeatureReqHandler@p,w
 13559     0312  0556               	andwf	??_USBStdFeatureReqHandler,w
 13560     0313  00DB               	movwf	USBStdFeatureReqHandler@p
 13561     0314  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13562     0315  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 13563     0316  2B1C               	goto	L11
 13564     0317                     i1l4486:	
 13565                           ;usb/usb_device.c: 2811:             }
 13566                           
 13567                           
 13568                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 13569     0317  3004               	movlw	4
 13570     0318  045B               	iorwf	USBStdFeatureReqHandler@p,w
 13571     0319  00DB               	movwf	USBStdFeatureReqHandler@p
 13572     031A  3000               	movlw	0
 13573     031B  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 13574     031C                     L11:
 13575     031C  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13576                           
 13577                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 13578     031D  1BC4               	btfsc	68,7	;volatile
 13579     031E  2B2B               	goto	i1l4492
 13580                           
 13581                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 13582     031F  0844               	movf	68,w	;volatile
 13583     0320  390F               	andlw	15
 13584     0321  0709               	addwf	9,w
 13585     0322  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13586     0323  0086               	movwf	6
 13587     0324  3001               	movlw	1	; select bank2/3
 13588     0325  0087               	movwf	7
 13589     0326  085B               	movf	USBStdFeatureReqHandler@p,w
 13590     0327  3FC0               	movwi [0]fsr1
 13591     0328  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13592     0329  3FC1               	movwi [1]fsr1
 13593                           
 13594                           ;usb/usb_device.c: 2823:         }
 13595     032A  2B35               	goto	i1l4494
 13596     032B                     i1l4492:
 13597                           
 13598                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 13599     032B  0844               	movf	68,w	;volatile
 13600     032C  390F               	andlw	15
 13601     032D  0709               	addwf	9,w
 13602     032E  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13603     032F  0086               	movwf	6
 13604     0330  0187               	clrf	7
 13605     0331  085B               	movf	USBStdFeatureReqHandler@p,w
 13606     0332  3FC0               	movwi [0]fsr1
 13607     0333  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13608     0334  3FC1               	movwi [1]fsr1
 13609     0335                     i1l4494:
 13610                           
 13611                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 13612     0335  3003               	movlw	3
 13613     0336  0641               	xorwf	65,w	;volatile
 13614     0337  1D03               	btfss	3,2
 13615     0338  2B57               	goto	i1l4508
 13616                           
 13617                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 13618     0339  085B               	movf	USBStdFeatureReqHandler@p,w
 13619     033A  0086               	movwf	6
 13620     033B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13621     033C  0087               	movwf	7
 13622     033D  1F81               	btfss	1,7
 13623     033E  2B4C               	goto	i1l4504
 13624                           
 13625                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 13626     033F  1BC4               	btfsc	68,7	;volatile
 13627     0340  2B45               	goto	i1l4502
 13628                           
 13629                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 13630     0341  0844               	movf	68,w	;volatile
 13631     0342  390F               	andlw	15
 13632     0343  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13633     0344  2B48               	goto	L12
 13634     0345                     i1l4502:	
 13635                           ;usb/usb_device.c: 2839:                 }
 13636                           
 13637                           
 13638                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 13639     0345  0844               	movf	68,w	;volatile
 13640     0346  390F               	andlw	15
 13641     0347  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13642     0348                     L12:
 13643     0348  0086               	movwf	6
 13644     0349  3001               	movlw	1	; select bank2/3
 13645     034A  0087               	movwf	7
 13646     034B  1481               	bsf	1,1
 13647     034C                     i1l4504:
 13648                           
 13649                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 13650     034C  085B               	movf	USBStdFeatureReqHandler@p,w
 13651     034D  0086               	movwf	6
 13652     034E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13653     034F  0087               	movwf	7
 13654     0350  1501               	bsf	1,2
 13655                           
 13656                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 13657     0351  085B               	movf	USBStdFeatureReqHandler@p,w
 13658     0352  0086               	movwf	6
 13659     0353  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13660     0354  0087               	movwf	7
 13661     0355  1781               	bsf	1,7
 13662                           
 13663                           ;usb/usb_device.c: 2849:         }
 13664     0356  0008               	return
 13665     0357                     i1l4508:
 13666                           
 13667                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 13668     0357  3004               	movlw	4
 13669     0358  065B               	xorwf	USBStdFeatureReqHandler@p,w
 13670     0359  00DB               	movwf	USBStdFeatureReqHandler@p
 13671     035A  3000               	movlw	0
 13672     035B  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 13673     035C  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13674                           
 13675                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 13676     035D  085B               	movf	USBStdFeatureReqHandler@p,w
 13677     035E  0086               	movwf	6
 13678     035F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13679     0360  0087               	movwf	7
 13680     0361  1F81               	btfss	1,7
 13681     0362  2B80               	goto	i1l4518
 13682                           
 13683                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 13684     0363  307F               	movlw	127
 13685     0364  00D6               	movwf	??_USBStdFeatureReqHandler
 13686     0365  085B               	movf	USBStdFeatureReqHandler@p,w
 13687     0366  0086               	movwf	6
 13688     0367  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13689     0368  0087               	movwf	7
 13690     0369  0856               	movf	??_USBStdFeatureReqHandler,w
 13691     036A  0581               	andwf	1,f
 13692                           
 13693                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 13694     036B  085B               	movf	USBStdFeatureReqHandler@p,w
 13695     036C  0086               	movwf	6
 13696     036D  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13697     036E  0087               	movwf	7
 13698     036F  1701               	bsf	1,6
 13699                           
 13700                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 13701     0370  3005               	movlw	5
 13702     0371  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13703     0372  3000               	movlw	0
 13704     0373  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13705     0374  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13706     0375  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13707     0376  085B               	movf	USBStdFeatureReqHandler@p,w
 13708     0377  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13709     0378  3002               	movlw	2
 13710     0379  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13711     037A  3000               	movlw	0
 13712     037B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13713     037C  3191  2153  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13714                           
 13715                           ;usb/usb_device.c: 2864:                 }
 13716     037F  2B85               	goto	i1l4520
 13717     0380                     i1l4518:
 13718                           
 13719                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 13720     0380  085B               	movf	USBStdFeatureReqHandler@p,w
 13721     0381  0086               	movwf	6
 13722     0382  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13723     0383  0087               	movwf	7
 13724     0384  1701               	bsf	1,6
 13725     0385                     i1l4520:
 13726                           
 13727                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 13728     0385  3004               	movlw	4
 13729     0386  0020               	movlb	0	; select bank0
 13730     0387  065B               	xorwf	USBStdFeatureReqHandler@p,w
 13731     0388  00DB               	movwf	USBStdFeatureReqHandler@p
 13732     0389  3000               	movlw	0
 13733     038A  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 13734     038B  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13735                           
 13736                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 13737     038C  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 13738     038D  2B94               	goto	i1l728
 13739     038E  085B               	movf	USBStdFeatureReqHandler@p,w
 13740     038F  0086               	movwf	6
 13741     0390  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13742     0391  0087               	movwf	7
 13743     0392  1F81               	btfss	1,7
 13744     0393  2BB9               	goto	i1l4532
 13745     0394                     i1l728:
 13746                           
 13747                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 13748     0394  1BC4               	btfsc	68,7	;volatile
 13749     0395  2B9A               	goto	i1l4528
 13750                           
 13751                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 13752     0396  0844               	movf	68,w	;volatile
 13753     0397  390F               	andlw	15
 13754     0398  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13755     0399  2B9D               	goto	L13
 13756     039A                     i1l4528:	
 13757                           ;usb/usb_device.c: 2884:                     }
 13758                           
 13759                           
 13760                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 13761     039A  0844               	movf	68,w	;volatile
 13762     039B  390F               	andlw	15
 13763     039C  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13764     039D                     L13:
 13765     039D  0086               	movwf	6
 13766     039E  3001               	movlw	1	; select bank2/3
 13767     039F  0087               	movwf	7
 13768     03A0  1081               	bcf	1,1
 13769                           
 13770                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 13771                           
 13772                           ;usb/usb_device.c: 2888:                     }
 13773     03A1  303B               	movlw	59
 13774     03A2  00D6               	movwf	??_USBStdFeatureReqHandler
 13775     03A3  085B               	movf	USBStdFeatureReqHandler@p,w
 13776     03A4  0086               	movwf	6
 13777     03A5  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13778     03A6  0087               	movwf	7
 13779     03A7  0856               	movf	??_USBStdFeatureReqHandler,w
 13780     03A8  0581               	andwf	1,f
 13781                           
 13782                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 13783     03A9  3005               	movlw	5
 13784     03AA  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13785     03AB  3000               	movlw	0
 13786     03AC  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13787     03AD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13788     03AE  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13789     03AF  085B               	movf	USBStdFeatureReqHandler@p,w
 13790     03B0  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13791     03B1  3002               	movlw	2
 13792     03B2  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13793     03B3  3000               	movlw	0
 13794     03B4  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13795     03B5  3191  2153  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13796                           
 13797                           ;usb/usb_device.c: 2894:                 }
 13798     03B8  2BC1               	goto	i1l4534
 13799     03B9                     i1l4532:
 13800                           
 13801                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 13802     03B9  303B               	movlw	59
 13803     03BA  00D6               	movwf	??_USBStdFeatureReqHandler
 13804     03BB  085B               	movf	USBStdFeatureReqHandler@p,w
 13805     03BC  0086               	movwf	6
 13806     03BD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13807     03BE  0087               	movwf	7
 13808     03BF  0856               	movf	??_USBStdFeatureReqHandler,w
 13809     03C0  0581               	andwf	1,f
 13810     03C1                     i1l4534:
 13811                           
 13812                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 13813     03C1  0020               	movlb	0	; select bank0
 13814     03C2  0844               	movf	68,w	;volatile
 13815     03C3  390F               	andlw	15
 13816     03C4  3E98               	addlw	152
 13817     03C5  00D6               	movwf	??_USBStdFeatureReqHandler
 13818     03C6  01D7               	clrf	??_USBStdFeatureReqHandler+1
 13819     03C7  300E               	movlw	14
 13820     03C8  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 13821     03C9  0856               	movf	??_USBStdFeatureReqHandler,w
 13822     03CA  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 13823     03CB  0857               	movf	??_USBStdFeatureReqHandler+1,w
 13824     03CC  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 13825                           
 13826                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 13827     03CD  30FE               	movlw	254
 13828     03CE  00D6               	movwf	??_USBStdFeatureReqHandler
 13829     03CF  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 13830     03D0  0086               	movwf	6
 13831     03D1  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 13832     03D2  0087               	movwf	7
 13833     03D3  0856               	movf	??_USBStdFeatureReqHandler,w
 13834     03D4  0581               	andwf	1,f
 13835     03D5  0008               	return
 13836     03D6                     __end_of_USBStdFeatureReqHandler:
 13837                           
 13838                           	psect	text69
 13839     1153                     __ptext69:	
 13840 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 13841 ;; Defined at:
 13842 ;;		line 66 in file "usb/usb_events.c"
 13843 ;; Parameters:    Size  Location     Type
 13844 ;;  event           2    0[BANK0 ] enum E238
 13845 ;;  pdata           2    2[BANK0 ] PTR void 
 13846 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 13847 ;;		 -> BDT(32), 
 13848 ;;  size            2    4[BANK0 ] unsigned short 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;		None
 13851 ;; Return value:  Size  Location     Type
 13852 ;;                  1    wreg      _Bool 
 13853 ;; Registers used:
 13854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13855 ;; Tracked objects:
 13856 ;;		On entry : 1F/0
 13857 ;;		On exit  : 0/0
 13858 ;;		Unchanged: 0/0
 13859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13860 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13863 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13864 ;;Total ram usage:        6 bytes
 13865 ;; Hardware stack levels used: 1
 13866 ;; Hardware stack levels required when called: 3
 13867 ;; This function calls:
 13868 ;;		_APP_KeyboardInit
 13869 ;;		_USBCheckHIDRequest
 13870 ;; This function is called by:
 13871 ;;		_USBDeviceTasks
 13872 ;;		_USBStdSetCfgHandler
 13873 ;;		_USBSuspend
 13874 ;;		_USBWakeFromSuspend
 13875 ;;		_USBCtrlTrfSetupHandler
 13876 ;;		_USBCheckStdRequest
 13877 ;;		_USBStdFeatureReqHandler
 13878 ;; This function uses a non-reentrant model
 13879 ;;
 13880                           
 13881     1153                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 13882                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 13883                           
 13884                           
 13885                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 13886                           
 13887                           ;incstack = 0
 13888                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13889     1153  2968               	goto	i1l4194
 13890     1154                     i1l4182:
 13891                           
 13892                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 13893     1154  0A65               	incf	_SOFCounter,w	;volatile
 13894     1155  307F               	movlw	127
 13895     1156  1903               	skipnz
 13896     1157  0666               	xorwf	_SOFCounter+1,w	;volatile
 13897     1158  1903               	btfsc	3,2
 13898     1159  295F               	goto	i1l4186
 13899                           
 13900                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 13901     115A  3001               	movlw	1
 13902     115B  07E5               	addwf	_SOFCounter,f	;volatile
 13903     115C  3000               	movlw	0
 13904     115D  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 13905                           
 13906                           ;usb/usb_events.c: 80:             }
 13907     115E  0008               	return
 13908     115F                     i1l4186:
 13909                           
 13910                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 13911     115F  01E5               	clrf	_SOFCounter	;volatile
 13912     1160  01E6               	clrf	_SOFCounter+1	;volatile
 13913     1161  0008               	return
 13914     1162                     i1l4188:
 13915                           
 13916                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 13917     1162  3193  236C         	fcall	_APP_KeyboardInit
 13918                           
 13919                           ;usb/usb_events.c: 115:             break;
 13920     1164  0008               	return
 13921     1165                     i1l4190:
 13922                           
 13923                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 13924     1165  318A  2229         	fcall	_USBCheckHIDRequest
 13925                           
 13926                           ;usb/usb_events.c: 124:             break;
 13927     1167  0008               	return
 13928     1168                     i1l4194:
 13929                           
 13930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 13931                           ; Switch size 1, requested type "simple"
 13932                           ; Number of cases is 2, Range of values is 0 to 127
 13933                           ; switch strategies available:
 13934                           ; Name         Instructions Cycles
 13935                           ; simple_byte            7     4 (average)
 13936                           ; direct_byte          262     6 (fixed)
 13937                           ; jumptable            260     6 (fixed)
 13938                           ;	Chosen strategy is simple_byte
 13939     1168  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 13940     1169  3A00               	xorlw	0	; case 0
 13941     116A  1903               	skipnz
 13942     116B  2970               	goto	i1l6818
 13943     116C  3A7F               	xorlw	127	; case 127
 13944     116D  1903               	skipnz
 13945     116E  298A               	goto	i1l6820
 13946     116F  298F               	goto	i1l818
 13947     1170                     i1l6818:
 13948                           
 13949                           ; Switch size 1, requested type "simple"
 13950                           ; Number of cases is 8, Range of values is 1 to 117
 13951                           ; switch strategies available:
 13952                           ; Name         Instructions Cycles
 13953                           ; simple_byte           25    13 (average)
 13954                           ; direct_byte          243     9 (fixed)
 13955                           ; jumptable            263     9 (fixed)
 13956                           ;	Chosen strategy is simple_byte
 13957     1170  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 13958     1171  3A01               	xorlw	1	; case 1
 13959     1172  1903               	skipnz
 13960     1173  2962               	goto	i1l4188
 13961     1174  3A03               	xorlw	3	; case 2
 13962     1175  1903               	skipnz
 13963     1176  298F               	goto	i1l818
 13964     1177  3A01               	xorlw	1	; case 3
 13965     1178  1903               	skipnz
 13966     1179  2965               	goto	i1l4190
 13967     117A  3A06               	xorlw	6	; case 5
 13968     117B  1903               	skipnz
 13969     117C  298F               	goto	i1l818
 13970     117D  3A77               	xorlw	119	; case 114
 13971     117E  1903               	skipnz
 13972     117F  298F               	goto	i1l818
 13973     1180  3A01               	xorlw	1	; case 115
 13974     1181  1903               	skipnz
 13975     1182  2954               	goto	i1l4182
 13976     1183  3A07               	xorlw	7	; case 116
 13977     1184  1903               	skipnz
 13978     1185  298F               	goto	i1l818
 13979     1186  3A01               	xorlw	1	; case 117
 13980     1187  1903               	skipnz
 13981     1188  298F               	goto	i1l818
 13982     1189  298F               	goto	i1l818
 13983     118A                     i1l6820:
 13984                           
 13985                           ; Switch size 1, requested type "simple"
 13986                           ; Number of cases is 1, Range of values is 255 to 255
 13987                           ; switch strategies available:
 13988                           ; Name         Instructions Cycles
 13989                           ; simple_byte            4     3 (average)
 13990                           ; direct_byte            7     5 (fixed)
 13991                           ; jumptable            263     9 (fixed)
 13992                           ;	Chosen strategy is simple_byte
 13993     118A  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 13994     118B  3AFF               	xorlw	255	; case 255
 13995     118C  1903               	skipnz
 13996     118D  298F               	goto	i1l818
 13997     118E  298F               	goto	i1l818
 13998     118F                     i1l818:
 13999     118F  0008               	return
 14000     1190                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 14001                           
 14002                           	psect	text70
 14003     0A29                     __ptext70:	
 14004 ;; *************** function _USBCheckHIDRequest *****************
 14005 ;; Defined at:
 14006 ;;		line 161 in file "usb/usb_device_hid.c"
 14007 ;; Parameters:    Size  Location     Type
 14008 ;;		None
 14009 ;; Auto vars:     Size  Location     Type
 14010 ;;		None
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  1    wreg      void 
 14013 ;; Registers used:
 14014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : 1F/0
 14017 ;;		On exit  : 1C/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14024 ;;Total ram usage:        0 bytes
 14025 ;; Hardware stack levels used: 1
 14026 ;; Hardware stack levels required when called: 1
 14027 ;; This function calls:
 14028 ;;		_USBHIDCBSetIdleRateHandler
 14029 ;;		_USBHIDCBSetReportHandler
 14030 ;; This function is called by:
 14031 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14032 ;; This function uses a non-reentrant model
 14033 ;;
 14034                           
 14035     0A29                     _USBCheckHIDRequest:	
 14036                           ;psect for function _USBCheckHIDRequest
 14037                           
 14038                           
 14039                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 14040                           
 14041                           ;incstack = 0
 14042                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14043     0A29  0840               	movf	64,w	;volatile
 14044     0A2A  391F               	andlw	31
 14045     0A2B  3A01               	xorlw	1
 14046     0A2C  1D03               	btfss	3,2
 14047     0A2D  0008               	return
 14048                           
 14049                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 14050     0A2E  0844               	movf	68,w	;volatile
 14051     0A2F  1D03               	btfss	3,2
 14052     0A30  0008               	return
 14053                           
 14054                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 14055     0A31  3006               	movlw	6
 14056     0A32  0641               	xorwf	65,w	;volatile
 14057     0A33  1903               	btfsc	3,2
 14058     0A34  2A4E               	goto	i1l4122
 14059     0A35  2A59               	goto	i1l4124
 14060     0A36                     i1l4110:
 14061                           
 14062                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 14063     0A36  036F               	decf	_USBActiveConfiguration,w	;volatile
 14064     0A37  1D03               	btfss	3,2
 14065     0A38  2A59               	goto	i1l4124
 14066                           
 14067                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14068     0A39  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 14069     0A3A  0021               	movlb	1	; select bank1
 14070     0A3B  00EB               	movwf	_inPipes^(0+128)	;volatile
 14071     0A3C  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 14072     0A3D  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14073     0A3E  3000               	movlw	0
 14074     0A3F  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14075     0A40  3009               	movlw	9
 14076     0A41  2A4A               	goto	L15
 14077     0A42                     i1l4116:
 14078                           
 14079                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14080     0A42  3000               	movlw	low (_hid_rpt01| (0+32768))
 14081     0A43  0021               	movlb	1	; select bank1
 14082     0A44  00EB               	movwf	_inPipes^(0+128)	;volatile
 14083     0A45  3098               	movlw	high (_hid_rpt01| (0+32768))
 14084     0A46  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14085     0A47  3000               	movlw	0
 14086     0A48  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14087     0A49  303F               	movlw	63
 14088     0A4A                     L15:
 14089     0A4A  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14090     0A4B  30C0               	movlw	192
 14091     0A4C  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14092                           
 14093                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 14094     0A4D  2A59               	goto	i1l4124
 14095     0A4E                     i1l4122:
 14096     0A4E  0843               	movf	67,w	;volatile
 14097                           
 14098                           ; Switch size 1, requested type "simple"
 14099                           ; Number of cases is 3, Range of values is 33 to 35
 14100                           ; switch strategies available:
 14101                           ; Name         Instructions Cycles
 14102                           ; simple_byte           10     6 (average)
 14103                           ; direct_byte           15     9 (fixed)
 14104                           ; jumptable            263     9 (fixed)
 14105                           ;	Chosen strategy is simple_byte
 14106     0A4F  3A21               	xorlw	33	; case 33
 14107     0A50  1903               	skipnz
 14108     0A51  2A36               	goto	i1l4110
 14109     0A52  3A03               	xorlw	3	; case 34
 14110     0A53  1903               	skipnz
 14111     0A54  2A42               	goto	i1l4116
 14112     0A55  3A01               	xorlw	1	; case 35
 14113     0A56  1903               	skipnz
 14114     0A57  2A59               	goto	i1l4124
 14115     0A58  2A59               	goto	i1l4124
 14116     0A59                     i1l4124:
 14117                           
 14118                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 14119     0A59  0020               	movlb	0	; select bank0
 14120     0A5A  0E40               	swapf	64,w	;volatile
 14121     0A5B  0C89               	rrf	9,f
 14122     0A5C  3903               	andlw	3
 14123     0A5D  3A01               	xorlw	1
 14124     0A5E  1D03               	btfss	3,2
 14125     0A5F  0008               	return
 14126     0A60  2A92               	goto	i1l4150
 14127     0A61                     i1l4128:
 14128                           
 14129                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 14130     0A61  319C  24B6         	fcall	_USBHIDCBSetReportHandler
 14131                           
 14132                           ;usb/usb_device_hid.c: 225:             break;
 14133     0A63  0008               	return
 14134     0A64                     i1l4130:
 14135                           
 14136                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 14137     0A64  304A               	movlw	low _idle_rate
 14138     0A65  0021               	movlb	1	; select bank1
 14139     0A66  00EB               	movwf	_inPipes^(0+128)	;volatile
 14140     0A67  3001               	movlw	high _idle_rate
 14141     0A68  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14142     0A69  3000               	movlw	0
 14143     0A6A  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14144     0A6B  3001               	movlw	1
 14145     0A6C  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14146     0A6D  30C1               	movlw	193
 14147     0A6E  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14148                           
 14149                           ;usb/usb_device_hid.c: 231:             break;
 14150     0A6F  0008               	return
 14151     0A70                     i1l4136:
 14152                           
 14153                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 14154     0A70  3080               	movlw	128
 14155     0A71  0021               	movlb	1	; select bank1
 14156     0A72  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14157                           
 14158                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 14159     0A73  0020               	movlb	0	; select bank0
 14160     0A74  0843               	movf	67,w	;volatile
 14161     0A75  0022               	movlb	2	; select bank2
 14162     0A76  00CA               	movwf	_idle_rate^(0+256)
 14163                           
 14164                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 14165     0A77  084A               	movf	_idle_rate^(0+256),w
 14166     0A78  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 14167     0A79  0020               	movlb	0	; select bank0
 14168     0A7A  0842               	movf	66,w	;volatile
 14169     0A7B  319C  24A9         	fcall	_USBHIDCBSetIdleRateHandler
 14170                           
 14171                           ;usb/usb_device_hid.c: 236:             break;
 14172     0A7D  0008               	return
 14173     0A7E                     i1l4140:
 14174                           
 14175                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 14176     0A7E  30E4               	movlw	low _active_protocol
 14177     0A7F  0021               	movlb	1	; select bank1
 14178     0A80  00EB               	movwf	_inPipes^(0+128)	;volatile
 14179     0A81  3001               	movlw	high _active_protocol
 14180     0A82  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14181     0A83  3000               	movlw	0
 14182     0A84  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14183     0A85  3001               	movlw	1
 14184     0A86  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14185     0A87  3081               	movlw	129
 14186     0A88  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14187                           
 14188                           ;usb/usb_device_hid.c: 242:             break;
 14189     0A89  0008               	return
 14190     0A8A                     i1l4146:
 14191                           
 14192                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 14193     0A8A  3080               	movlw	128
 14194     0A8B  0021               	movlb	1	; select bank1
 14195     0A8C  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14196                           
 14197                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 14198     0A8D  0020               	movlb	0	; select bank0
 14199     0A8E  0842               	movf	66,w	;volatile
 14200     0A8F  0023               	movlb	3	; select bank3
 14201     0A90  00E4               	movwf	_active_protocol^(0+384)
 14202                           
 14203                           ;usb/usb_device_hid.c: 246:             break;
 14204     0A91  0008               	return
 14205     0A92                     i1l4150:
 14206     0A92  0841               	movf	65,w	;volatile
 14207                           
 14208                           ; Switch size 1, requested type "simple"
 14209                           ; Number of cases is 6, Range of values is 1 to 11
 14210                           ; switch strategies available:
 14211                           ; Name         Instructions Cycles
 14212                           ; simple_byte           19    10 (average)
 14213                           ; direct_byte           31     9 (fixed)
 14214                           ; jumptable            263     9 (fixed)
 14215                           ;	Chosen strategy is simple_byte
 14216     0A93  3A01               	xorlw	1	; case 1
 14217     0A94  1903               	skipnz
 14218     0A95  2AA6               	goto	i1l764
 14219     0A96  3A03               	xorlw	3	; case 2
 14220     0A97  1903               	skipnz
 14221     0A98  2A64               	goto	i1l4130
 14222     0A99  3A01               	xorlw	1	; case 3
 14223     0A9A  1903               	skipnz
 14224     0A9B  2A7E               	goto	i1l4140
 14225     0A9C  3A0A               	xorlw	10	; case 9
 14226     0A9D  1903               	skipnz
 14227     0A9E  2A61               	goto	i1l4128
 14228     0A9F  3A03               	xorlw	3	; case 10
 14229     0AA0  1903               	skipnz
 14230     0AA1  2A70               	goto	i1l4136
 14231     0AA2  3A01               	xorlw	1	; case 11
 14232     0AA3  1903               	skipnz
 14233     0AA4  2A8A               	goto	i1l4146
 14234     0AA5  2AA6               	goto	i1l764
 14235     0AA6                     i1l764:
 14236     0AA6  0008               	return
 14237     0AA7                     __end_of_USBCheckHIDRequest:
 14238                           
 14239                           	psect	text71
 14240     1CB6                     __ptext71:	
 14241 ;; *************** function _USBHIDCBSetReportHandler *****************
 14242 ;; Defined at:
 14243 ;;		line 504 in file "app_device_keyboard.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		wreg
 14252 ;; Tracked objects:
 14253 ;;		On entry : 1F/0
 14254 ;;		On exit  : 1F/2
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14261 ;;Total ram usage:        0 bytes
 14262 ;; Hardware stack levels used: 1
 14263 ;; This function calls:
 14264 ;;		Nothing
 14265 ;; This function is called by:
 14266 ;;		_USBCheckHIDRequest
 14267 ;; This function uses a non-reentrant model
 14268 ;;
 14269                           
 14270     1CB6                     _USBHIDCBSetReportHandler:	
 14271                           ;psect for function _USBHIDCBSetReportHandler
 14272                           
 14273                           
 14274                           ;app_device_keyboard.c: 508:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 14275                           
 14276                           ;incstack = 0
 14277                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 14278     1CB6  3048               	movlw	72
 14279     1CB7  0022               	movlb	2	; select bank2
 14280     1CB8  00A1               	movwf	_outPipes^(0+256)	;volatile
 14281     1CB9  3000               	movlw	0
 14282     1CBA  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 14283     1CBB  3008               	movlw	8
 14284     1CBC  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 14285     1CBD  301B               	movlw	high _USBHIDCBSetReportComplete
 14286     1CBE  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 14287     1CBF  30FF               	movlw	low _USBHIDCBSetReportComplete
 14288     1CC0  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 14289     1CC1  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 14290     1CC2  0008               	return
 14291     1CC3                     __end_of_USBHIDCBSetReportHandler:
 14292                           
 14293                           	psect	text72
 14294     1CA9                     __ptext72:	
 14295 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 14296 ;; Defined at:
 14297 ;;		line 515 in file "app_device_keyboard.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;  reportID        1    wreg     unsigned char 
 14300 ;;  newIdleRate     1    0[COMMON] unsigned char 
 14301 ;; Auto vars:     Size  Location     Type
 14302 ;;  reportID        1    3[COMMON] unsigned char 
 14303 ;; Return value:  Size  Location     Type
 14304 ;;                  1    wreg      void 
 14305 ;; Registers used:
 14306 ;;		wreg, status,2, status,0
 14307 ;; Tracked objects:
 14308 ;;		On entry : 1F/0
 14309 ;;		On exit  : 1C/0
 14310 ;;		Unchanged: 0/0
 14311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14312 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;Total ram usage:        4 bytes
 14317 ;; Hardware stack levels used: 1
 14318 ;; This function calls:
 14319 ;;		Nothing
 14320 ;; This function is called by:
 14321 ;;		_USBCheckHIDRequest
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325     1CA9                     _USBHIDCBSetIdleRateHandler:	
 14326                           ;psect for function _USBHIDCBSetIdleRateHandler
 14327                           
 14328                           
 14329                           ;incstack = 0
 14330                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 14331                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 14332     1CA9  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 14333                           
 14334                           ;app_device_keyboard.c: 519:     if (reportID == 0) {
 14335     1CAA  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 14336     1CAB  1D03               	btfss	3,2
 14337     1CAC  0008               	return
 14338                           
 14339                           ;app_device_keyboard.c: 520:         keyboardIdleRate = newIdleRate;
 14340     1CAD  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 14341     1CAE  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 14342     1CAF  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 14343     1CB0  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 14344     1CB1  0023               	movlb	3	; select bank3
 14345     1CB2  00CF               	movwf	_keyboardIdleRate^(0+384)
 14346     1CB3  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 14347     1CB4  00D0               	movwf	(_keyboardIdleRate+1)^(0+384)
 14348     1CB5  0008               	return
 14349     1CB6                     __end_of_USBHIDCBSetIdleRateHandler:
 14350                           
 14351                           	psect	text73
 14352     136C                     __ptext73:	
 14353 ;; *************** function _APP_KeyboardInit *****************
 14354 ;; Defined at:
 14355 ;;		line 295 in file "app_device_keyboard.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;		None
 14358 ;; Auto vars:     Size  Location     Type
 14359 ;;		None
 14360 ;; Return value:  Size  Location     Type
 14361 ;;                  1    wreg      void 
 14362 ;; Registers used:
 14363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14364 ;; Tracked objects:
 14365 ;;		On entry : 1F/0
 14366 ;;		On exit  : 0/0
 14367 ;;		Unchanged: 0/0
 14368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;Total ram usage:        0 bytes
 14374 ;; Hardware stack levels used: 1
 14375 ;; Hardware stack levels required when called: 2
 14376 ;; This function calls:
 14377 ;;		_USBEnableEndpoint
 14378 ;;		i1_GenericQueue_Init
 14379 ;;		i1_USBTransferOnePacket
 14380 ;; This function is called by:
 14381 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385     136C                     _APP_KeyboardInit:	
 14386                           ;psect for function _APP_KeyboardInit
 14387                           
 14388                           
 14389                           ;app_device_keyboard.c: 296:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 14390                           
 14391                           ;incstack = 0
 14392                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14393     136C  3031               	movlw	49
 14394     136D  00F0               	movwf	i1GenericQueue_Init@q
 14395     136E  3023               	movlw	35
 14396     136F  00F1               	movwf	i1GenericQueue_Init@q+1
 14397     1370  3001               	movlw	1
 14398     1371  00F2               	movwf	i1GenericQueue_Init@element_size
 14399     1372  3000               	movlw	0
 14400     1373  00F3               	movwf	i1GenericQueue_Init@element_size+1
 14401     1374  319E  26B2  3193   	fcall	i1_GenericQueue_Init
 14402                           
 14403                           ;app_device_keyboard.c: 297:     keyboard.modifiers.value = 0;
 14404     1377  3090               	movlw	144
 14405     1378  0086               	movwf	6
 14406     1379  3023               	movlw	35
 14407     137A  0087               	movwf	7
 14408     137B  0181               	clrf	1
 14409                           
 14410                           ;app_device_keyboard.c: 300:     keyboard.lastINTransmission = 0;
 14411     137C  302D               	movlw	45
 14412     137D  0086               	movwf	6
 14413     137E  3023               	movlw	35
 14414     137F  0087               	movwf	7
 14415     1380  3000               	movlw	0
 14416     1381  3FC0               	movwi [0]fsr1
 14417     1382  3FC1               	movwi [1]fsr1
 14418                           
 14419                           ;app_device_keyboard.c: 303:     keyboardIdleRate = 250;
 14420     1383  30FA               	movlw	250
 14421     1384  0023               	movlb	3	; select bank3
 14422     1385  00CF               	movwf	_keyboardIdleRate^(0+384)
 14423     1386  3000               	movlw	0
 14424     1387  00D0               	movwf	(_keyboardIdleRate^(0+384)+1)
 14425     1388                     i1l910:	
 14426                           ;app_device_keyboard.c: 310:     }
 14427                           
 14428                           ;app_device_keyboard.c: 308:     while (OldSOFCount != SOFCounter) {
 14429                           
 14430                           
 14431                           ;app_device_keyboard.c: 308:     while (OldSOFCount != SOFCounter) {
 14432     1388  0020               	movlb	0	; select bank0
 14433     1389  0866               	movf	_SOFCounter+1,w	;volatile
 14434     138A  0023               	movlb	3	; select bank3
 14435     138B  064E               	xorwf	(_OldSOFCount+1)^(0+384),w
 14436     138C  1D03               	skipz
 14437     138D  2B92               	goto	u311_25
 14438     138E  0020               	movlb	0	; select bank0
 14439     138F  0865               	movf	_SOFCounter,w	;volatile
 14440     1390  0023               	movlb	3	; select bank3
 14441     1391  064D               	xorwf	_OldSOFCount^(0+384),w
 14442     1392                     u311_25:
 14443     1392  1903               	btfsc	3,2
 14444     1393  2B9D               	goto	i1l4162
 14445                           
 14446                           ;app_device_keyboard.c: 309:         OldSOFCount = SOFCounter;
 14447     1394  0020               	movlb	0	; select bank0
 14448     1395  0866               	movf	_SOFCounter+1,w	;volatile
 14449     1396  0023               	movlb	3	; select bank3
 14450     1397  00CE               	movwf	(_OldSOFCount+1)^(0+384)
 14451     1398  0020               	movlb	0	; select bank0
 14452     1399  0865               	movf	_SOFCounter,w	;volatile
 14453     139A  0023               	movlb	3	; select bank3
 14454     139B  00CD               	movwf	_OldSOFCount^(0+384)
 14455     139C  2B88               	goto	i1l910
 14456     139D                     i1l4162:
 14457                           
 14458                           ;app_device_keyboard.c: 313:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 14459     139D  301E               	movlw	30
 14460     139E  00F7               	movwf	USBEnableEndpoint@options
 14461     139F  3001               	movlw	1
 14462     13A0  319E  2692  3193   	fcall	_USBEnableEndpoint
 14463                           
 14464                           ;app_device_keyboard.c: 316:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 14465     13A3  01F0               	clrf	i1USBTransferOnePacket@dir
 14466     13A4  3020               	movlw	32
 14467     13A5  00F1               	movwf	i1USBTransferOnePacket@data
 14468     13A6  3001               	movlw	1
 14469     13A7  00F2               	movwf	i1USBTransferOnePacket@data+1
 14470     13A8  01F3               	clrf	i1USBTransferOnePacket@len
 14471     13A9  0AF3               	incf	i1USBTransferOnePacket@len,f
 14472     13AA  3001               	movlw	1
 14473     13AB  318A  22A7         	fcall	i1_USBTransferOnePacket
 14474     13AD  302D               	movlw	45
 14475     13AE  0086               	movwf	6
 14476     13AF  3023               	movlw	35
 14477     13B0  0087               	movwf	7
 14478     13B1  3142               	addfsr 1,2
 14479     13B2  0870               	movf	?i1_USBTransferOnePacket,w
 14480     13B3  3FC0               	movwi [0]fsr1
 14481     13B4  0871               	movf	?i1_USBTransferOnePacket+1,w
 14482     13B5  3FC1               	movwi [1]fsr1
 14483     13B6  0008               	return
 14484     13B7                     __end_of_APP_KeyboardInit:
 14485                           
 14486                           	psect	text74
 14487     0AA7                     __ptext74:	
 14488 ;; *************** function i1_USBTransferOnePacket *****************
 14489 ;; Defined at:
 14490 ;;		line 999 in file "usb/usb_device.c"
 14491 ;; Parameters:    Size  Location     Type
 14492 ;;  ep              1    wreg     unsigned char 
 14493 ;;  dir             1    0[COMMON] unsigned char 
 14494 ;;  data            2    1[COMMON] PTR unsigned char 
 14495 ;;		 -> inputReport(8), outputReport(1), 
 14496 ;;  len             1    3[COMMON] unsigned char 
 14497 ;; Auto vars:     Size  Location     Type
 14498 ;;  ep              1    8[COMMON] unsigned char 
 14499 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 14500 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 14501 ;; Return value:  Size  Location     Type
 14502 ;;                  2    0[COMMON] PTR void 
 14503 ;; Registers used:
 14504 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14505 ;; Tracked objects:
 14506 ;;		On entry : 0/3
 14507 ;;		On exit  : 0/0
 14508 ;;		Unchanged: 0/0
 14509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14513 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14514 ;;Total ram usage:       11 bytes
 14515 ;; Hardware stack levels used: 1
 14516 ;; This function calls:
 14517 ;;		Nothing
 14518 ;; This function is called by:
 14519 ;;		_APP_KeyboardInit
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523     0AA7                     i1_USBTransferOnePacket:	
 14524                           ;psect for function i1_USBTransferOnePacket
 14525                           
 14526                           
 14527                           ;incstack = 0
 14528                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 14529                           ;i1USBTransferOnePacket@ep stored from wreg
 14530     0AA7  00F8               	movwf	i1USBTransferOnePacket@ep
 14531                           
 14532                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 14533     0AA8  0870               	movf	i1USBTransferOnePacket@dir,w
 14534     0AA9  1903               	btfsc	3,2
 14535     0AAA  2AB3               	goto	i1l4072
 14536                           
 14537                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 14538     0AAB  3578               	lslf	i1USBTransferOnePacket@ep,w
 14539     0AAC  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14540     0AAD  0086               	movwf	6
 14541     0AAE  0187               	clrf	7
 14542     0AAF  3F40               	moviw [0]fsr1
 14543     0AB0  00F9               	movwf	i1USBTransferOnePacket@handle
 14544     0AB1  3F41               	moviw [1]fsr1
 14545     0AB2  2ABB               	goto	L16
 14546     0AB3                     i1l4072:	
 14547                           ;usb/usb_device.c: 1008:     }
 14548                           
 14549                           
 14550                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 14551     0AB3  3578               	lslf	i1USBTransferOnePacket@ep,w
 14552     0AB4  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14553     0AB5  0086               	movwf	6
 14554     0AB6  3001               	movlw	1	; select bank2/3
 14555     0AB7  0087               	movwf	7
 14556     0AB8  3F40               	moviw [0]fsr1
 14557     0AB9  00F9               	movwf	i1USBTransferOnePacket@handle
 14558     0ABA  3F41               	moviw [1]fsr1
 14559     0ABB                     L16:
 14560     0ABB  00FA               	movwf	i1USBTransferOnePacket@handle+1
 14561                           
 14562                           ;usb/usb_device.c: 1017:     if(handle == 0)
 14563     0ABC  0879               	movf	i1USBTransferOnePacket@handle,w
 14564     0ABD  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 14565     0ABE  1D03               	btfss	3,2
 14566     0ABF  2AC3               	goto	i1l4080
 14567                           
 14568                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 14569     0AC0  01F0               	clrf	?i1_USBTransferOnePacket
 14570     0AC1  01F1               	clrf	?i1_USBTransferOnePacket+1
 14571     0AC2  0008               	return
 14572     0AC3                     i1l4080:
 14573                           
 14574                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 14575     0AC3  30FF               	movlw	255
 14576     0AC4  0571               	andwf	i1USBTransferOnePacket@data,w
 14577     0AC5  00F4               	movwf	??i1_USBTransferOnePacket
 14578     0AC6  307F               	movlw	127
 14579     0AC7  0572               	andwf	i1USBTransferOnePacket@data+1,w
 14580     0AC8  00F5               	movwf	??i1_USBTransferOnePacket+1
 14581     0AC9  0879               	movf	i1USBTransferOnePacket@handle,w
 14582     0ACA  0086               	movwf	6
 14583     0ACB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14584     0ACC  0087               	movwf	7
 14585     0ACD  3142               	addfsr 1,2
 14586     0ACE  0874               	movf	??i1_USBTransferOnePacket,w
 14587     0ACF  3FC0               	movwi [0]fsr1
 14588     0AD0  0875               	movf	??i1_USBTransferOnePacket+1,w
 14589     0AD1  3FC1               	movwi [1]fsr1
 14590                           
 14591                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 14592     0AD2  0879               	movf	i1USBTransferOnePacket@handle,w
 14593     0AD3  3E01               	addlw	1
 14594     0AD4  00F4               	movwf	??i1_USBTransferOnePacket
 14595     0AD5  3000               	movlw	0
 14596     0AD6  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 14597     0AD7  00F5               	movwf	??i1_USBTransferOnePacket+1
 14598     0AD8  0874               	movf	??i1_USBTransferOnePacket,w
 14599     0AD9  0086               	movwf	6
 14600     0ADA  0875               	movf	??i1_USBTransferOnePacket+1,w
 14601     0ADB  0087               	movwf	7
 14602     0ADC  0873               	movf	i1USBTransferOnePacket@len,w
 14603     0ADD  0081               	movwf	1
 14604                           
 14605                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 14606     0ADE  3040               	movlw	64
 14607     0ADF  00F4               	movwf	??i1_USBTransferOnePacket
 14608     0AE0  0879               	movf	i1USBTransferOnePacket@handle,w
 14609     0AE1  0086               	movwf	6
 14610     0AE2  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14611     0AE3  0087               	movwf	7
 14612     0AE4  0874               	movf	??i1_USBTransferOnePacket,w
 14613     0AE5  0581               	andwf	1,f
 14614                           
 14615                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 14616     0AE6  0879               	movf	i1USBTransferOnePacket@handle,w
 14617     0AE7  0086               	movwf	6
 14618     0AE8  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14619     0AE9  0087               	movwf	7
 14620     0AEA  1581               	bsf	1,3
 14621                           
 14622                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 14623     0AEB  0879               	movf	i1USBTransferOnePacket@handle,w
 14624     0AEC  0086               	movwf	6
 14625     0AED  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14626     0AEE  0087               	movwf	7
 14627     0AEF  1781               	bsf	1,7
 14628                           
 14629                           ;usb/usb_device.c: 1040:     if(dir != 0)
 14630     0AF0  0870               	movf	i1USBTransferOnePacket@dir,w
 14631     0AF1  1903               	btfsc	3,2
 14632     0AF2  2B0A               	goto	i1l4090
 14633                           
 14634                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 14635     0AF3  3578               	lslf	i1USBTransferOnePacket@ep,w
 14636     0AF4  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14637     0AF5  0086               	movwf	6
 14638     0AF6  0187               	clrf	7
 14639     0AF7  3F40               	moviw [0]fsr1
 14640     0AF8  00F4               	movwf	??i1_USBTransferOnePacket
 14641     0AF9  3F41               	moviw [1]fsr1
 14642     0AFA  00F5               	movwf	??i1_USBTransferOnePacket+1
 14643     0AFB  3004               	movlw	4
 14644     0AFC  0674               	xorwf	??i1_USBTransferOnePacket,w
 14645     0AFD  00F6               	movwf	??i1_USBTransferOnePacket+2
 14646     0AFE  3000               	movlw	0
 14647     0AFF  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 14648     0B00  00F7               	movwf	??i1_USBTransferOnePacket+3
 14649     0B01  3578               	lslf	i1USBTransferOnePacket@ep,w
 14650     0B02  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14651     0B03  0086               	movwf	6
 14652     0B04  0187               	clrf	7
 14653     0B05  0876               	movf	??i1_USBTransferOnePacket+2,w
 14654     0B06  3FC0               	movwi [0]fsr1
 14655     0B07  0877               	movf	??i1_USBTransferOnePacket+3,w
 14656     0B08  3FC1               	movwi [1]fsr1
 14657                           
 14658                           ;usb/usb_device.c: 1044:     }
 14659     0B09  2B22               	goto	i1l4092
 14660     0B0A                     i1l4090:
 14661                           
 14662                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 14663     0B0A  3578               	lslf	i1USBTransferOnePacket@ep,w
 14664     0B0B  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14665     0B0C  0086               	movwf	6
 14666     0B0D  3001               	movlw	1	; select bank2/3
 14667     0B0E  0087               	movwf	7
 14668     0B0F  3F40               	moviw [0]fsr1
 14669     0B10  00F4               	movwf	??i1_USBTransferOnePacket
 14670     0B11  3F41               	moviw [1]fsr1
 14671     0B12  00F5               	movwf	??i1_USBTransferOnePacket+1
 14672     0B13  3004               	movlw	4
 14673     0B14  0674               	xorwf	??i1_USBTransferOnePacket,w
 14674     0B15  00F6               	movwf	??i1_USBTransferOnePacket+2
 14675     0B16  3000               	movlw	0
 14676     0B17  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 14677     0B18  00F7               	movwf	??i1_USBTransferOnePacket+3
 14678     0B19  3578               	lslf	i1USBTransferOnePacket@ep,w
 14679     0B1A  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14680     0B1B  0086               	movwf	6
 14681     0B1C  3001               	movlw	1	; select bank2/3
 14682     0B1D  0087               	movwf	7
 14683     0B1E  0876               	movf	??i1_USBTransferOnePacket+2,w
 14684     0B1F  3FC0               	movwi [0]fsr1
 14685     0B20  0877               	movf	??i1_USBTransferOnePacket+3,w
 14686     0B21  3FC1               	movwi [1]fsr1
 14687     0B22                     i1l4092:
 14688                           
 14689                           ;usb/usb_device.c: 1050:     return (void*)handle;
 14690     0B22  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14691     0B23  00F1               	movwf	?i1_USBTransferOnePacket+1
 14692     0B24  0879               	movf	i1USBTransferOnePacket@handle,w
 14693     0B25  00F0               	movwf	?i1_USBTransferOnePacket
 14694     0B26  0008               	return
 14695     0B27                     __end_ofi1_USBTransferOnePacket:
 14696                           
 14697                           	psect	text75
 14698     1EB2                     __ptext75:	
 14699 ;; *************** function i1_GenericQueue_Init *****************
 14700 ;; Defined at:
 14701 ;;		line 4 in file "generic_queue.c"
 14702 ;; Parameters:    Size  Location     Type
 14703 ;;  q               2    0[COMMON] PTR struct .
 14704 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 14705 ;;  element_size    2    2[COMMON] unsigned int 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;		None
 14708 ;; Return value:  Size  Location     Type
 14709 ;;                  1    wreg      void 
 14710 ;; Registers used:
 14711 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14712 ;; Tracked objects:
 14713 ;;		On entry : 1F/0
 14714 ;;		On exit  : 1F/0
 14715 ;;		Unchanged: 1F/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14717 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;Total ram usage:        4 bytes
 14722 ;; Hardware stack levels used: 1
 14723 ;; This function calls:
 14724 ;;		Nothing
 14725 ;; This function is called by:
 14726 ;;		_APP_KeyboardInit
 14727 ;; This function uses a non-reentrant model
 14728 ;;
 14729                           
 14730     1EB2                     i1_GenericQueue_Init:	
 14731                           ;psect for function i1_GenericQueue_Init
 14732                           
 14733                           
 14734                           ;generic_queue.c: 5:     q->element_size = element_size;
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 14738     1EB2  0870               	movf	i1GenericQueue_Init@q,w
 14739     1EB3  3E5A               	addlw	90
 14740     1EB4  0086               	movwf	6
 14741     1EB5  3000               	movlw	0
 14742     1EB6  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14743     1EB7  0087               	movwf	7
 14744     1EB8  0872               	movf	i1GenericQueue_Init@element_size,w
 14745     1EB9  3FC0               	movwi [0]fsr1
 14746     1EBA  0873               	movf	i1GenericQueue_Init@element_size+1,w
 14747     1EBB  3FC1               	movwi [1]fsr1
 14748                           
 14749                           ;generic_queue.c: 6:     q->front = 0;
 14750     1EBC  0870               	movf	i1GenericQueue_Init@q,w
 14751     1EBD  3E5C               	addlw	92
 14752     1EBE  0086               	movwf	6
 14753     1EBF  3000               	movlw	0
 14754     1EC0  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14755     1EC1  0087               	movwf	7
 14756     1EC2  0181               	clrf	1
 14757                           
 14758                           ;generic_queue.c: 7:     q->rear = 0;
 14759     1EC3  0870               	movf	i1GenericQueue_Init@q,w
 14760     1EC4  3E5D               	addlw	93
 14761     1EC5  0086               	movwf	6
 14762     1EC6  3000               	movlw	0
 14763     1EC7  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14764     1EC8  0087               	movwf	7
 14765     1EC9  0181               	clrf	1
 14766                           
 14767                           ;generic_queue.c: 8:     q->size = 0;
 14768     1ECA  0870               	movf	i1GenericQueue_Init@q,w
 14769     1ECB  3E5E               	addlw	94
 14770     1ECC  0086               	movwf	6
 14771     1ECD  3000               	movlw	0
 14772     1ECE  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 14773     1ECF  0087               	movwf	7
 14774     1ED0  0181               	clrf	1
 14775     1ED1  0008               	return
 14776     1ED2                     __end_ofi1_GenericQueue_Init:
 14777                           
 14778                           	psect	text76
 14779     1E92                     __ptext76:	
 14780 ;; *************** function _USBEnableEndpoint *****************
 14781 ;; Defined at:
 14782 ;;		line 882 in file "usb/usb_device.c"
 14783 ;; Parameters:    Size  Location     Type
 14784 ;;  ep              1    wreg     unsigned char 
 14785 ;;  options         1    7[COMMON] unsigned char 
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;  ep              1   12[COMMON] unsigned char 
 14788 ;;  p               2   10[COMMON] PTR unsigned char 
 14789 ;;		 -> UEP0(1), 
 14790 ;; Return value:  Size  Location     Type
 14791 ;;                  1    wreg      void 
 14792 ;; Registers used:
 14793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14794 ;; Tracked objects:
 14795 ;;		On entry : 1F/3
 14796 ;;		On exit  : 0/0
 14797 ;;		Unchanged: 0/0
 14798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14799 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14800 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14801 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14802 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14803 ;;Total ram usage:        6 bytes
 14804 ;; Hardware stack levels used: 1
 14805 ;; Hardware stack levels required when called: 1
 14806 ;; This function calls:
 14807 ;;		_USBConfigureEndpoint
 14808 ;; This function is called by:
 14809 ;;		_APP_KeyboardInit
 14810 ;; This function uses a non-reentrant model
 14811 ;;
 14812                           
 14813     1E92                     _USBEnableEndpoint:	
 14814                           ;psect for function _USBEnableEndpoint
 14815                           
 14816                           
 14817                           ;incstack = 0
 14818                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14819                           ;USBEnableEndpoint@ep stored from wreg
 14820     1E92  00FC               	movwf	USBEnableEndpoint@ep
 14821                           
 14822                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 14823     1E93  1D77               	btfss	USBEnableEndpoint@options,2
 14824     1E94  2E9A               	goto	i1l4048
 14825                           
 14826                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 14827     1E95  01F0               	clrf	USBConfigureEndpoint@direction
 14828     1E96  087C               	movf	USBEnableEndpoint@ep,w
 14829     1E97  3191  2190  319E   	fcall	_USBConfigureEndpoint
 14830     1E9A                     i1l4048:
 14831                           
 14832                           ;usb/usb_device.c: 892:     if(options & 0x02)
 14833     1E9A  1CF7               	btfss	USBEnableEndpoint@options,1
 14834     1E9B  2EA1               	goto	i1l4052
 14835                           
 14836                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 14837     1E9C  01F0               	clrf	USBConfigureEndpoint@direction
 14838     1E9D  0AF0               	incf	USBConfigureEndpoint@direction,f
 14839     1E9E  087C               	movf	USBEnableEndpoint@ep,w
 14840     1E9F  3191  2190         	fcall	_USBConfigureEndpoint
 14841     1EA1                     i1l4052:
 14842                           
 14843                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 14844     1EA1  087C               	movf	USBEnableEndpoint@ep,w
 14845     1EA2  3E98               	addlw	152
 14846     1EA3  00F8               	movwf	??_USBEnableEndpoint
 14847     1EA4  01F9               	clrf	??_USBEnableEndpoint+1
 14848     1EA5  300E               	movlw	14
 14849     1EA6  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 14850     1EA7  0878               	movf	??_USBEnableEndpoint,w
 14851     1EA8  00FA               	movwf	USBEnableEndpoint@p
 14852     1EA9  0879               	movf	??_USBEnableEndpoint+1,w
 14853     1EAA  00FB               	movwf	USBEnableEndpoint@p+1
 14854                           
 14855                           ;usb/usb_device.c: 905:     *p = options;
 14856     1EAB  087A               	movf	USBEnableEndpoint@p,w
 14857     1EAC  0086               	movwf	6
 14858     1EAD  087B               	movf	USBEnableEndpoint@p+1,w
 14859     1EAE  0087               	movwf	7
 14860     1EAF  0877               	movf	USBEnableEndpoint@options,w
 14861     1EB0  0081               	movwf	1
 14862     1EB1  0008               	return
 14863     1EB2                     __end_of_USBEnableEndpoint:
 14864                           
 14865                           	psect	text77
 14866     1190                     __ptext77:	
 14867 ;; *************** function _USBConfigureEndpoint *****************
 14868 ;; Defined at:
 14869 ;;		line 1547 in file "usb/usb_device.c"
 14870 ;; Parameters:    Size  Location     Type
 14871 ;;  EPNum           1    wreg     unsigned char 
 14872 ;;  direction       1    0[COMMON] unsigned char 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  EPNum           1    5[COMMON] unsigned char 
 14875 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 14876 ;;		 -> BDT(32), 
 14877 ;; Return value:  Size  Location     Type
 14878 ;;                  1    wreg      void 
 14879 ;; Registers used:
 14880 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14881 ;; Tracked objects:
 14882 ;;		On entry : 0/3
 14883 ;;		On exit  : 0/0
 14884 ;;		Unchanged: 0/0
 14885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14886 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;Total ram usage:        7 bytes
 14891 ;; Hardware stack levels used: 1
 14892 ;; This function calls:
 14893 ;;		Nothing
 14894 ;; This function is called by:
 14895 ;;		_USBEnableEndpoint
 14896 ;; This function uses a non-reentrant model
 14897 ;;
 14898                           
 14899     1190                     _USBConfigureEndpoint:	
 14900                           ;psect for function _USBConfigureEndpoint
 14901                           
 14902                           
 14903                           ;incstack = 0
 14904                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 14905                           ;USBConfigureEndpoint@EPNum stored from wreg
 14906     1190  00F5               	movwf	USBConfigureEndpoint@EPNum
 14907                           
 14908                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 14909     1191  3020               	movlw	32
 14910     1192  00F6               	movwf	USBConfigureEndpoint@handle
 14911                           
 14912                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 14913     1193  0870               	movf	USBConfigureEndpoint@direction,w
 14914     1194  00F1               	movwf	??_USBConfigureEndpoint
 14915     1195  3001               	movlw	1
 14916     1196                     u296_25:
 14917     1196  35F1               	lslf	??_USBConfigureEndpoint,f
 14918     1197  0B89               	decfsz	9,f
 14919     1198  2996               	goto	u296_25
 14920     1199  0875               	movf	USBConfigureEndpoint@EPNum,w
 14921     119A  00F2               	movwf	??_USBConfigureEndpoint+1
 14922     119B  3001               	movlw	1
 14923     119C                     u297_25:
 14924     119C  35F2               	lslf	??_USBConfigureEndpoint+1,f
 14925     119D  3EFF               	addlw	-1
 14926     119E  1D03               	skipz
 14927     119F  299C               	goto	u297_25
 14928     11A0  3572               	lslf	??_USBConfigureEndpoint+1,w
 14929     11A1  0771               	addwf	??_USBConfigureEndpoint,w
 14930     11A2  00F3               	movwf	??_USBConfigureEndpoint+2
 14931     11A3  3001               	movlw	1
 14932     11A4                     u298_25:
 14933     11A4  35F3               	lslf	??_USBConfigureEndpoint+2,f
 14934     11A5  3EFF               	addlw	-1
 14935     11A6  1D03               	skipz
 14936     11A7  29A4               	goto	u298_25
 14937     11A8  3573               	lslf	??_USBConfigureEndpoint+2,w
 14938     11A9  00F4               	movwf	??_USBConfigureEndpoint+3
 14939     11AA  0874               	movf	??_USBConfigureEndpoint+3,w
 14940     11AB  07F6               	addwf	USBConfigureEndpoint@handle,f
 14941                           
 14942                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 14943     11AC  0876               	movf	USBConfigureEndpoint@handle,w
 14944     11AD  0086               	movwf	6
 14945     11AE  0187               	clrf	7
 14946     11AF  1381               	bcf	1,7
 14947                           
 14948                           ;usb/usb_device.c: 1561:     if(direction == 0)
 14949     11B0  0870               	movf	USBConfigureEndpoint@direction,w
 14950     11B1  1D03               	btfss	3,2
 14951     11B2  29BD               	goto	i1l4038
 14952                           
 14953                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 14954     11B3  3575               	lslf	USBConfigureEndpoint@EPNum,w
 14955     11B4  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14956     11B5  0086               	movwf	6
 14957     11B6  3001               	movlw	1	; select bank2/3
 14958     11B7  0087               	movwf	7
 14959     11B8  0876               	movf	USBConfigureEndpoint@handle,w
 14960     11B9  3FC0               	movwi [0]fsr1
 14961     11BA  3000               	movlw	0
 14962     11BB  3FC1               	movwi [1]fsr1
 14963                           
 14964                           ;usb/usb_device.c: 1564:     }
 14965     11BC  29C5               	goto	i1l4040
 14966     11BD                     i1l4038:
 14967                           
 14968                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 14969     11BD  3575               	lslf	USBConfigureEndpoint@EPNum,w
 14970     11BE  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14971     11BF  0086               	movwf	6
 14972     11C0  0187               	clrf	7
 14973     11C1  0876               	movf	USBConfigureEndpoint@handle,w
 14974     11C2  3FC0               	movwi [0]fsr1
 14975     11C3  3000               	movlw	0
 14976     11C4  3FC1               	movwi [1]fsr1
 14977     11C5                     i1l4040:
 14978                           
 14979                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 14980     11C5  0876               	movf	USBConfigureEndpoint@handle,w
 14981     11C6  0086               	movwf	6
 14982     11C7  0187               	clrf	7
 14983     11C8  1301               	bcf	1,6
 14984                           
 14985                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 14986     11C9  0876               	movf	USBConfigureEndpoint@handle,w
 14987     11CA  3E04               	addlw	4
 14988     11CB  0086               	movwf	6
 14989     11CC  0187               	clrf	7
 14990     11CD  1701               	bsf	1,6
 14991     11CE  0008               	return
 14992     11CF                     __end_of_USBConfigureEndpoint:
 14993                           
 14994                           	psect	text78
 14995     1119                     __ptext78:	
 14996 ;; *************** function _USBCtrlTrfOutHandler *****************
 14997 ;; Defined at:
 14998 ;;		line 2545 in file "usb/usb_device.c"
 14999 ;; Parameters:    Size  Location     Type
 15000 ;;		None
 15001 ;; Auto vars:     Size  Location     Type
 15002 ;;		None
 15003 ;; Return value:  Size  Location     Type
 15004 ;;                  1    wreg      void 
 15005 ;; Registers used:
 15006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15007 ;; Tracked objects:
 15008 ;;		On entry : 1F/0
 15009 ;;		On exit  : 1D/0
 15010 ;;		Unchanged: 0/0
 15011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;Total ram usage:        4 bytes
 15017 ;; Hardware stack levels used: 1
 15018 ;; Hardware stack levels required when called: 3
 15019 ;; This function calls:
 15020 ;;		_USBCtrlTrfRxService
 15021 ;; This function is called by:
 15022 ;;		_USBCtrlEPService
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026     1119                     _USBCtrlTrfOutHandler:	
 15027                           ;psect for function _USBCtrlTrfOutHandler
 15028                           
 15029                           
 15030                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 15031                           
 15032                           ;incstack = 0
 15033                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15034     1119  3002               	movlw	2
 15035     111A  0669               	xorwf	_controlTransferState,w	;volatile
 15036     111B  1D03               	btfss	3,2
 15037     111C  2920               	goto	i1l4942
 15038                           
 15039                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 15040     111D  318E  2691         	fcall	_USBCtrlTrfRxService
 15041                           
 15042                           ;usb/usb_device.c: 2550:     }
 15043     111F  0008               	return
 15044     1120                     i1l4942:
 15045                           
 15046                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 15047     1120  01E9               	clrf	_controlTransferState	;volatile
 15048                           
 15049                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 15050     1121  0022               	movlb	2	; select bank2
 15051     1122  0842               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 15052     1123  1D03               	btfss	3,2
 15053     1124  2951               	goto	i1l4954
 15054                           
 15055                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 15056     1125  0020               	movlb	0	; select bank0
 15057     1126  0867               	movf	_pBDTEntryEP0OutNext,w
 15058     1127  3E01               	addlw	1
 15059     1128  00FA               	movwf	??_USBCtrlTrfOutHandler
 15060     1129  3000               	movlw	0
 15061     112A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15062     112B  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15063     112C  087A               	movf	??_USBCtrlTrfOutHandler,w
 15064     112D  0086               	movwf	6
 15065     112E  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 15066     112F  0087               	movwf	7
 15067     1130  3008               	movlw	8
 15068     1131  0081               	movwf	1
 15069                           
 15070                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 15071     1132  3040               	movlw	64
 15072     1133  00FA               	movwf	??_USBCtrlTrfOutHandler
 15073     1134  3000               	movlw	0
 15074     1135  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15075     1136  30FF               	movlw	255
 15076     1137  057A               	andwf	??_USBCtrlTrfOutHandler,w
 15077     1138  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 15078     1139  307F               	movlw	127
 15079     113A  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 15080     113B  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 15081     113C  0867               	movf	_pBDTEntryEP0OutNext,w
 15082     113D  0086               	movwf	6
 15083     113E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15084     113F  0087               	movwf	7
 15085     1140  3142               	addfsr 1,2
 15086     1141  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 15087     1142  3FC0               	movwi [0]fsr1
 15088     1143  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 15089     1144  3FC1               	movwi [1]fsr1
 15090                           
 15091                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 15092     1145  0867               	movf	_pBDTEntryEP0OutNext,w
 15093     1146  0086               	movwf	6
 15094     1147  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15095     1148  0087               	movwf	7
 15096     1149  300C               	movlw	12
 15097     114A  0081               	movwf	1
 15098                           
 15099                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15100     114B  0867               	movf	_pBDTEntryEP0OutNext,w
 15101     114C  0086               	movwf	6
 15102     114D  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15103     114E  0087               	movwf	7
 15104     114F  1781               	bsf	1,7
 15105                           
 15106                           ;usb/usb_device.c: 2568:         }
 15107     1150  0008               	return
 15108     1151                     i1l4954:
 15109                           
 15110                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 15111     1151  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15112     1152  0008               	return
 15113     1153                     __end_of_USBCtrlTrfOutHandler:
 15114                           
 15115                           	psect	text79
 15116     0E91                     __ptext79:	
 15117 ;; *************** function _USBCtrlTrfRxService *****************
 15118 ;; Defined at:
 15119 ;;		line 1856 in file "usb/usb_device.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;		None
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;  byteToRead      1    9[COMMON] unsigned char 
 15124 ;;  i               1    8[COMMON] unsigned char 
 15125 ;; Return value:  Size  Location     Type
 15126 ;;                  1    wreg      void 
 15127 ;; Registers used:
 15128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15129 ;; Tracked objects:
 15130 ;;		On entry : 1F/0
 15131 ;;		On exit  : 1D/0
 15132 ;;		Unchanged: 0/0
 15133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;Total ram usage:        6 bytes
 15139 ;; Hardware stack levels used: 1
 15140 ;; Hardware stack levels required when called: 2
 15141 ;; This function calls:
 15142 ;;		_USBCtrlEPAllowStatusStage
 15143 ;;		_USBHIDCBSetReportComplete
 15144 ;; This function is called by:
 15145 ;;		_USBCtrlTrfOutHandler
 15146 ;; This function uses a non-reentrant model
 15147 ;;
 15148                           
 15149     0E91                     _USBCtrlTrfRxService:	
 15150                           ;psect for function _USBCtrlTrfRxService
 15151                           
 15152                           
 15153                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 15154                           
 15155                           ;incstack = 0
 15156                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15157     0E91  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15158     0E92  0086               	movwf	6
 15159     0E93  0187               	clrf	7
 15160     0E94  3F41               	moviw [1]fsr1
 15161     0E95  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15162                           
 15163                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 15164     0E96  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15165     0E97  00F4               	movwf	??_USBCtrlTrfRxService
 15166     0E98  01F5               	clrf	??_USBCtrlTrfRxService+1
 15167     0E99  0875               	movf	??_USBCtrlTrfRxService+1,w
 15168     0E9A  0022               	movlb	2	; select bank2
 15169     0E9B  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15170     0E9C  1D03               	skipz
 15171     0E9D  2EA0               	goto	u393_25
 15172     0E9E  0874               	movf	??_USBCtrlTrfRxService,w
 15173     0E9F  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 15174     0EA0                     u393_25:
 15175     0EA0  1803               	skipnc
 15176     0EA1  2EA4               	goto	i1l594
 15177                           
 15178                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 15179     0EA2  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15180     0EA3  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15181     0EA4                     i1l594:	
 15182                           ;usb/usb_device.c: 1872:     }
 15183                           
 15184                           
 15185                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 15186     0EA4  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15187     0EA5  00F4               	movwf	??_USBCtrlTrfRxService
 15188     0EA6  01F5               	clrf	??_USBCtrlTrfRxService+1
 15189     0EA7  0874               	movf	??_USBCtrlTrfRxService,w
 15190     0EA8  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 15191     0EA9  0875               	movf	??_USBCtrlTrfRxService+1,w
 15192     0EAA  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 15193                           
 15194                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 15195     0EAB  01F8               	clrf	USBCtrlTrfRxService@i
 15196     0EAC                     i1l4712:
 15197     0EAC  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15198     0EAD  0278               	subwf	USBCtrlTrfRxService@i,w
 15199     0EAE  1803               	btfsc	3,0
 15200     0EAF  2EC2               	goto	i1l4714
 15201                           
 15202                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 15203     0EB0  0821               	movf	_outPipes^(0+256),w	;volatile
 15204     0EB1  0086               	movwf	6
 15205     0EB2  0187               	clrf	7
 15206     0EB3  0878               	movf	USBCtrlTrfRxService@i,w
 15207     0EB4  3E48               	addlw	72
 15208     0EB5  0084               	movwf	4
 15209     0EB6  0185               	clrf	5
 15210     0EB7  0800               	movf	0,w
 15211     0EB8  0081               	movwf	1
 15212     0EB9  3001               	movlw	1
 15213     0EBA  00F4               	movwf	??_USBCtrlTrfRxService
 15214     0EBB  0874               	movf	??_USBCtrlTrfRxService,w
 15215     0EBC  07A1               	addwf	_outPipes^(0+256),f	;volatile
 15216                           
 15217                           ;usb/usb_device.c: 1881:     }
 15218     0EBD  3001               	movlw	1
 15219     0EBE  00F4               	movwf	??_USBCtrlTrfRxService
 15220     0EBF  0874               	movf	??_USBCtrlTrfRxService,w
 15221     0EC0  07F8               	addwf	USBCtrlTrfRxService@i,f
 15222     0EC1  2EAC               	goto	i1l4712
 15223     0EC2                     i1l4714:
 15224                           
 15225                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 15226     0EC2  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15227     0EC3  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15228     0EC4  1903               	btfsc	3,2
 15229     0EC5  2F03               	goto	i1l4726
 15230                           
 15231                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15232     0EC6  0020               	movlb	0	; select bank0
 15233     0EC7  0867               	movf	_pBDTEntryEP0OutNext,w
 15234     0EC8  3E01               	addlw	1
 15235     0EC9  00F4               	movwf	??_USBCtrlTrfRxService
 15236     0ECA  3000               	movlw	0
 15237     0ECB  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15238     0ECC  00F5               	movwf	??_USBCtrlTrfRxService+1
 15239     0ECD  0874               	movf	??_USBCtrlTrfRxService,w
 15240     0ECE  0086               	movwf	6
 15241     0ECF  0875               	movf	??_USBCtrlTrfRxService+1,w
 15242     0ED0  0087               	movwf	7
 15243     0ED1  3008               	movlw	8
 15244     0ED2  0081               	movwf	1
 15245                           
 15246                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 15247     0ED3  3048               	movlw	72
 15248     0ED4  00F4               	movwf	??_USBCtrlTrfRxService
 15249     0ED5  3000               	movlw	0
 15250     0ED6  00F5               	movwf	??_USBCtrlTrfRxService+1
 15251     0ED7  30FF               	movlw	255
 15252     0ED8  0574               	andwf	??_USBCtrlTrfRxService,w
 15253     0ED9  00F6               	movwf	??_USBCtrlTrfRxService+2
 15254     0EDA  307F               	movlw	127
 15255     0EDB  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15256     0EDC  00F7               	movwf	??_USBCtrlTrfRxService+3
 15257     0EDD  0867               	movf	_pBDTEntryEP0OutNext,w
 15258     0EDE  0086               	movwf	6
 15259     0EDF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15260     0EE0  0087               	movwf	7
 15261     0EE1  3142               	addfsr 1,2
 15262     0EE2  0876               	movf	??_USBCtrlTrfRxService+2,w
 15263     0EE3  3FC0               	movwi [0]fsr1
 15264     0EE4  0877               	movf	??_USBCtrlTrfRxService+3,w
 15265     0EE5  3FC1               	movwi [1]fsr1
 15266                           
 15267                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 15268     0EE6  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15269     0EE7  0086               	movwf	6
 15270     0EE8  0187               	clrf	7
 15271     0EE9  1B01               	btfsc	1,6
 15272     0EEA  2EF7               	goto	i1l4724
 15273                           
 15274                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 15275     0EEB  0867               	movf	_pBDTEntryEP0OutNext,w
 15276     0EEC  0086               	movwf	6
 15277     0EED  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15278     0EEE  0087               	movwf	7
 15279     0EEF  3048               	movlw	72
 15280     0EF0  0081               	movwf	1
 15281                           
 15282                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15283     0EF1  0867               	movf	_pBDTEntryEP0OutNext,w
 15284     0EF2  0086               	movwf	6
 15285     0EF3  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15286     0EF4  0087               	movwf	7
 15287     0EF5  1781               	bsf	1,7
 15288                           
 15289                           ;usb/usb_device.c: 1893:         }
 15290     0EF6  0008               	return
 15291     0EF7                     i1l4724:
 15292                           
 15293                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 15294     0EF7  0867               	movf	_pBDTEntryEP0OutNext,w
 15295     0EF8  0086               	movwf	6
 15296     0EF9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15297     0EFA  0087               	movwf	7
 15298     0EFB  3008               	movlw	8
 15299     0EFC  0081               	movwf	1
 15300                           
 15301                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15302     0EFD  0867               	movf	_pBDTEntryEP0OutNext,w
 15303     0EFE  0086               	movwf	6
 15304     0EFF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15305     0F00  0087               	movwf	7
 15306     0F01  1781               	bsf	1,7
 15307     0F02  0008               	return
 15308     0F03                     i1l4726:
 15309                           
 15310                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15311     0F03  0020               	movlb	0	; select bank0
 15312     0F04  0867               	movf	_pBDTEntryEP0OutNext,w
 15313     0F05  3E01               	addlw	1
 15314     0F06  00F4               	movwf	??_USBCtrlTrfRxService
 15315     0F07  3000               	movlw	0
 15316     0F08  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15317     0F09  00F5               	movwf	??_USBCtrlTrfRxService+1
 15318     0F0A  0874               	movf	??_USBCtrlTrfRxService,w
 15319     0F0B  0086               	movwf	6
 15320     0F0C  0875               	movf	??_USBCtrlTrfRxService+1,w
 15321     0F0D  0087               	movwf	7
 15322     0F0E  3008               	movlw	8
 15323     0F0F  0081               	movwf	1
 15324                           
 15325                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 15326     0F10  3040               	movlw	64
 15327     0F11  00F4               	movwf	??_USBCtrlTrfRxService
 15328     0F12  3000               	movlw	0
 15329     0F13  00F5               	movwf	??_USBCtrlTrfRxService+1
 15330     0F14  30FF               	movlw	255
 15331     0F15  0574               	andwf	??_USBCtrlTrfRxService,w
 15332     0F16  00F6               	movwf	??_USBCtrlTrfRxService+2
 15333     0F17  307F               	movlw	127
 15334     0F18  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15335     0F19  00F7               	movwf	??_USBCtrlTrfRxService+3
 15336     0F1A  0867               	movf	_pBDTEntryEP0OutNext,w
 15337     0F1B  0086               	movwf	6
 15338     0F1C  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15339     0F1D  0087               	movwf	7
 15340     0F1E  3142               	addfsr 1,2
 15341     0F1F  0876               	movf	??_USBCtrlTrfRxService+2,w
 15342     0F20  3FC0               	movwi [0]fsr1
 15343     0F21  0877               	movf	??_USBCtrlTrfRxService+3,w
 15344     0F22  3FC1               	movwi [1]fsr1
 15345                           
 15346                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 15347     0F23  0867               	movf	_pBDTEntryEP0OutNext,w
 15348     0F24  0086               	movwf	6
 15349     0F25  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15350     0F26  0087               	movwf	7
 15351     0F27  3004               	movlw	4
 15352     0F28  0081               	movwf	1
 15353                           
 15354                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15355     0F29  0867               	movf	_pBDTEntryEP0OutNext,w
 15356     0F2A  0086               	movwf	6
 15357     0F2B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15358     0F2C  0087               	movwf	7
 15359     0F2D  1781               	bsf	1,7
 15360                           
 15361                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 15362     0F2E  0022               	movlb	2	; select bank2
 15363     0F2F  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 15364     0F30  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 15365     0F31  1903               	btfsc	3,2
 15366     0F32  2F3D               	goto	i1l4738
 15367                           
 15368                           ;usb/usb_device.c: 1919:         {
 15369     0F33  3005               	movlw	5
 15370     0F34  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 15371     0F35  0086               	movwf	6
 15372     0F36  3001               	movlw	1	; select bank2/3
 15373     0F37  0087               	movwf	7
 15374     0F38  3F41               	moviw [1]fsr1
 15375     0F39  008A               	movwf	10
 15376     0F3A  3F40               	moviw [0]fsr1
 15377     0F3B  000A               	callw
 15378     0F3C  318E               	pagesel	$
 15379     0F3D                     i1l4738:
 15380     0F3D  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 15381                           
 15382                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 15383     0F3E  0840               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 15384     0F3F  1D03               	btfss	3,2
 15385     0F40  0008               	return
 15386                           
 15387                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 15388     0F41  3188  2051         	fcall	_USBCtrlEPAllowStatusStage
 15389     0F43  0008               	return
 15390     0F44                     __end_of_USBCtrlTrfRxService:
 15391                           
 15392                           	psect	text80
 15393     0851                     __ptext80:	
 15394 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 15395 ;; Defined at:
 15396 ;;		line 1420 in file "usb/usb_device.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;		None
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;		None
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      void 
 15403 ;; Registers used:
 15404 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/2
 15407 ;;		On exit  : 1D/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;Total ram usage:        4 bytes
 15415 ;; Hardware stack levels used: 1
 15416 ;; This function calls:
 15417 ;;		Nothing
 15418 ;; This function is called by:
 15419 ;;		_USBDeviceTasks
 15420 ;;		_USBCtrlEPServiceComplete
 15421 ;;		_USBCtrlTrfRxService
 15422 ;; This function uses a non-reentrant model
 15423 ;;
 15424                           
 15425     0851                     _USBCtrlEPAllowStatusStage:	
 15426                           ;psect for function _USBCtrlEPAllowStatusStage
 15427                           
 15428                           
 15429                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 15430                           
 15431                           ;incstack = 0
 15432                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 15433     0851  0022               	movlb	2	; select bank2
 15434     0852  083F               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 15435     0853  1D03               	btfss	3,2
 15436     0854  0008               	return
 15437                           
 15438                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 15439     0855  3001               	movlw	1
 15440     0856  00BF               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 15441                           
 15442                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 15443     0857  083E               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 15444     0858  1D03               	btfss	3,2
 15445     0859  0008               	return
 15446                           
 15447                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 15448     085A  3001               	movlw	1
 15449     085B  00BE               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 15450                           
 15451                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 15452     085C  3002               	movlw	2
 15453     085D  0020               	movlb	0	; select bank0
 15454     085E  0669               	xorwf	_controlTransferState,w	;volatile
 15455     085F  1D03               	btfss	3,2
 15456     0860  2873               	goto	i1l4294
 15457                           
 15458                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 15459     0861  0861               	movf	_pBDTEntryIn,w
 15460     0862  0086               	movwf	6
 15461     0863  0862               	movf	_pBDTEntryIn+1,w
 15462     0864  0087               	movwf	7
 15463     0865  3141               	addfsr 1,1
 15464     0866  0181               	clrf	1
 15465                           
 15466                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 15467     0867  0861               	movf	_pBDTEntryIn,w
 15468     0868  0086               	movwf	6
 15469     0869  0862               	movf	_pBDTEntryIn+1,w
 15470     086A  0087               	movwf	7
 15471     086B  3048               	movlw	72
 15472     086C  0081               	movwf	1
 15473                           
 15474                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15475     086D  0861               	movf	_pBDTEntryIn,w
 15476     086E  0086               	movwf	6
 15477     086F  0862               	movf	_pBDTEntryIn+1,w
 15478     0870  0087               	movwf	7
 15479     0871  1781               	bsf	1,7
 15480                           
 15481                           ;usb/usb_device.c: 1441:             }
 15482     0872  0008               	return
 15483     0873                     i1l4294:
 15484     0873  0369               	decf	_controlTransferState,w	;volatile
 15485     0874  1D03               	btfss	3,2
 15486     0875  0008               	return
 15487                           
 15488                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 15489     0876  0022               	movlb	2	; select bank2
 15490     0877  01C2               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15491                           
 15492                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 15493     0878  0020               	movlb	0	; select bank0
 15494     0879  0A6A               	incf	_pBDTEntryEP0OutCurrent,w
 15495     087A  0086               	movwf	6
 15496     087B  0187               	clrf	7
 15497     087C  3008               	movlw	8
 15498     087D  0081               	movwf	1
 15499                           
 15500                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 15501     087E  3040               	movlw	64
 15502     087F  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15503     0880  3000               	movlw	0
 15504     0881  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15505     0882  30FF               	movlw	255
 15506     0883  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15507     0884  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15508     0885  307F               	movlw	127
 15509     0886  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15510     0887  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15511     0888  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15512     0889  3E02               	addlw	2
 15513     088A  0086               	movwf	6
 15514     088B  0187               	clrf	7
 15515     088C  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15516     088D  3FC0               	movwi [0]fsr1
 15517     088E  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15518     088F  3FC1               	movwi [1]fsr1
 15519                           
 15520                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 15521     0890  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15522     0891  0086               	movwf	6
 15523     0892  0187               	clrf	7
 15524     0893  3004               	movlw	4
 15525     0894  0081               	movwf	1
 15526                           
 15527                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 15528     0895  086A               	movf	_pBDTEntryEP0OutCurrent,w
 15529     0896  0086               	movwf	6
 15530     0897  0187               	clrf	7
 15531     0898  1781               	bsf	1,7
 15532                           
 15533                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 15534     0899  3001               	movlw	1
 15535     089A  0022               	movlb	2	; select bank2
 15536     089B  00C2               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15537                           
 15538                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 15539     089C  0020               	movlb	0	; select bank0
 15540     089D  0867               	movf	_pBDTEntryEP0OutNext,w
 15541     089E  3E01               	addlw	1
 15542     089F  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15543     08A0  3000               	movlw	0
 15544     08A1  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15545     08A2  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15546     08A3  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 15547     08A4  0086               	movwf	6
 15548     08A5  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 15549     08A6  0087               	movwf	7
 15550     08A7  3008               	movlw	8
 15551     08A8  0081               	movwf	1
 15552                           
 15553                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 15554     08A9  3040               	movlw	64
 15555     08AA  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15556     08AB  3000               	movlw	0
 15557     08AC  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15558     08AD  30FF               	movlw	255
 15559     08AE  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15560     08AF  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15561     08B0  307F               	movlw	127
 15562     08B1  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15563     08B2  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15564     08B3  0867               	movf	_pBDTEntryEP0OutNext,w
 15565     08B4  0086               	movwf	6
 15566     08B5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15567     08B6  0087               	movwf	7
 15568     08B7  3142               	addfsr 1,2
 15569     08B8  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15570     08B9  3FC0               	movwi [0]fsr1
 15571     08BA  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15572     08BB  3FC1               	movwi [1]fsr1
 15573                           
 15574                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 15575     08BC  0867               	movf	_pBDTEntryEP0OutNext,w
 15576     08BD  0086               	movwf	6
 15577     08BE  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15578     08BF  0087               	movwf	7
 15579     08C0  3080               	movlw	128
 15580     08C1  0081               	movwf	1
 15581     08C2  0008               	return
 15582     08C3                     __end_of_USBCtrlEPAllowStatusStage:	
 15583                           ;usb/usb_device.c: 1461:         }
 15584                           
 15585                           
 15586                           	psect	text81
 15587     09AE                     __ptext81:	
 15588 ;; *************** function _USBCtrlTrfInHandler *****************
 15589 ;; Defined at:
 15590 ;;		line 2599 in file "usb/usb_device.c"
 15591 ;; Parameters:    Size  Location     Type
 15592 ;;		None
 15593 ;; Auto vars:     Size  Location     Type
 15594 ;;  lastDTS         1    7[COMMON] unsigned char 
 15595 ;; Return value:  Size  Location     Type
 15596 ;;                  1    wreg      void 
 15597 ;; Registers used:
 15598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15599 ;; Tracked objects:
 15600 ;;		On entry : 1F/0
 15601 ;;		On exit  : 1F/0
 15602 ;;		Unchanged: 0/0
 15603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;Total ram usage:        5 bytes
 15609 ;; Hardware stack levels used: 1
 15610 ;; Hardware stack levels required when called: 2
 15611 ;; This function calls:
 15612 ;;		_USBCtrlTrfTxService
 15613 ;;		_USBHIDCBSetReportComplete
 15614 ;; This function is called by:
 15615 ;;		_USBCtrlEPService
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619     09AE                     _USBCtrlTrfInHandler:	
 15620                           ;psect for function _USBCtrlTrfInHandler
 15621                           
 15622                           
 15623                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15627     09AE  0861               	movf	_pBDTEntryIn,w
 15628     09AF  0086               	movwf	6
 15629     09B0  0862               	movf	_pBDTEntryIn+1,w
 15630     09B1  0087               	movwf	7
 15631     09B2  3000               	movlw	0
 15632     09B3  1B01               	btfsc	1,6
 15633     09B4  3001               	movlw	1
 15634     09B5  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 15635                           
 15636                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 15637     09B6  3004               	movlw	4
 15638     09B7  0661               	xorwf	_pBDTEntryIn,w
 15639     09B8  00E1               	movwf	_pBDTEntryIn
 15640     09B9  3000               	movlw	0
 15641     09BA  0662               	xorwf	_pBDTEntryIn+1,w
 15642     09BB  00E2               	movwf	_pBDTEntryIn+1
 15643                           
 15644                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 15645     09BC  3008               	movlw	8
 15646     09BD  066B               	xorwf	_USBDeviceState,w
 15647     09BE  1D03               	btfss	3,2
 15648     09BF  29CC               	goto	i1l4970
 15649                           
 15650                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 15651     09C0  0842               	movf	66,w	;volatile
 15652     09C1  397F               	andlw	127
 15653     09C2  003D               	movlb	29	; select bank29
 15654     09C3  0096               	movwf	22	;volatile
 15655                           
 15656                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 15657     09C4  0816               	movf	22,w
 15658     09C5  1903               	btfsc	3,2
 15659     09C6  29C9               	goto	i1l4968
 15660                           
 15661                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 15662     09C7  3010               	movlw	16
 15663     09C8  29CA               	goto	L17
 15664     09C9                     i1l4968:	
 15665                           ;usb/usb_device.c: 2617:         }
 15666                           
 15667                           
 15668                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 15669     09C9  3004               	movlw	4
 15670     09CA                     L17:
 15671     09CA  0020               	movlb	0	; select bank0
 15672     09CB  00EB               	movwf	_USBDeviceState	;volatile
 15673     09CC                     i1l4970:
 15674                           
 15675                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 15676     09CC  0369               	decf	_controlTransferState,w	;volatile
 15677     09CD  1D03               	btfss	3,2
 15678     09CE  2A14               	goto	i1l680
 15679                           
 15680                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 15681     09CF  3048               	movlw	72
 15682     09D0  00F3               	movwf	??_USBCtrlTrfInHandler
 15683     09D1  3000               	movlw	0
 15684     09D2  00F4               	movwf	??_USBCtrlTrfInHandler+1
 15685     09D3  30FF               	movlw	255
 15686     09D4  0573               	andwf	??_USBCtrlTrfInHandler,w
 15687     09D5  00F5               	movwf	??_USBCtrlTrfInHandler+2
 15688     09D6  307F               	movlw	127
 15689     09D7  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 15690     09D8  00F6               	movwf	??_USBCtrlTrfInHandler+3
 15691     09D9  0861               	movf	_pBDTEntryIn,w
 15692     09DA  0086               	movwf	6
 15693     09DB  0862               	movf	_pBDTEntryIn+1,w
 15694     09DC  0087               	movwf	7
 15695     09DD  3142               	addfsr 1,2
 15696     09DE  0875               	movf	??_USBCtrlTrfInHandler+2,w
 15697     09DF  3FC0               	movwi [0]fsr1
 15698     09E0  0876               	movf	??_USBCtrlTrfInHandler+3,w
 15699     09E1  3FC1               	movwi [1]fsr1
 15700                           
 15701                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 15702     09E2  3195  258C  3189   	fcall	_USBCtrlTrfTxService
 15703                           
 15704                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 15705     09E5  3002               	movlw	2
 15706     09E6  0022               	movlb	2	; select bank2
 15707     09E7  0647               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 15708     09E8  1D03               	btfss	3,2
 15709     09E9  29F7               	goto	i1l4980
 15710                           
 15711                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 15712     09EA  0020               	movlb	0	; select bank0
 15713     09EB  0861               	movf	_pBDTEntryIn,w
 15714     09EC  0086               	movwf	6
 15715     09ED  0862               	movf	_pBDTEntryIn+1,w
 15716     09EE  0087               	movwf	7
 15717     09EF  3004               	movlw	4
 15718     09F0  0081               	movwf	1
 15719                           
 15720                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 15721     09F1  0861               	movf	_pBDTEntryIn,w
 15722     09F2  0086               	movwf	6
 15723     09F3  0862               	movf	_pBDTEntryIn+1,w
 15724     09F4  0087               	movwf	7
 15725     09F5  1781               	bsf	1,7
 15726                           
 15727                           ;usb/usb_device.c: 2640:         }
 15728     09F6  0008               	return
 15729     09F7                     i1l4980:
 15730                           
 15731                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 15732     09F7  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 15733     09F8  1D03               	btfss	3,2
 15734     09F9  2A07               	goto	i1l4984
 15735                           
 15736                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 15737     09FA  0020               	movlb	0	; select bank0
 15738     09FB  0861               	movf	_pBDTEntryIn,w
 15739     09FC  0086               	movwf	6
 15740     09FD  0862               	movf	_pBDTEntryIn+1,w
 15741     09FE  0087               	movwf	7
 15742     09FF  3048               	movlw	72
 15743     0A00  0081               	movwf	1
 15744                           
 15745                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15746     0A01  0861               	movf	_pBDTEntryIn,w
 15747     0A02  0086               	movwf	6
 15748     0A03  0862               	movf	_pBDTEntryIn+1,w
 15749     0A04  0087               	movwf	7
 15750     0A05  1781               	bsf	1,7
 15751                           
 15752                           ;usb/usb_device.c: 2647:             }
 15753     0A06  0008               	return
 15754     0A07                     i1l4984:
 15755                           
 15756                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 15757     0A07  0020               	movlb	0	; select bank0
 15758     0A08  0861               	movf	_pBDTEntryIn,w
 15759     0A09  0086               	movwf	6
 15760     0A0A  0862               	movf	_pBDTEntryIn+1,w
 15761     0A0B  0087               	movwf	7
 15762     0A0C  3008               	movlw	8
 15763     0A0D  0081               	movwf	1
 15764                           
 15765                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15766     0A0E  0861               	movf	_pBDTEntryIn,w
 15767     0A0F  0086               	movwf	6
 15768     0A10  0862               	movf	_pBDTEntryIn+1,w
 15769     0A11  0087               	movwf	7
 15770     0A12  1781               	bsf	1,7
 15771     0A13  0008               	return
 15772     0A14                     i1l680:	
 15773                           ;usb/usb_device.c: 2655:  else
 15774                           
 15775                           
 15776                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 15777     0A14  0022               	movlb	2	; select bank2
 15778     0A15  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 15779     0A16  2A26               	goto	i1l4992
 15780                           
 15781                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 15782     0A17  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 15783     0A18  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 15784     0A19  1903               	btfsc	3,2
 15785     0A1A  2A25               	goto	i1l4990
 15786                           
 15787                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 15788     0A1B  3005               	movlw	5
 15789     0A1C  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 15790     0A1D  0086               	movwf	6
 15791     0A1E  3001               	movlw	1	; select bank2/3
 15792     0A1F  0087               	movwf	7
 15793     0A20  3F41               	moviw [1]fsr1
 15794     0A21  008A               	movwf	10
 15795     0A22  3F40               	moviw [0]fsr1
 15796     0A23  000A               	callw
 15797     0A24  3189               	pagesel	$
 15798     0A25                     i1l4990:
 15799                           
 15800                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 15801     0A25  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 15802     0A26                     i1l4992:
 15803                           
 15804                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 15805     0A26  0020               	movlb	0	; select bank0
 15806     0A27  01E9               	clrf	_controlTransferState	;volatile
 15807     0A28  0008               	return
 15808     0A29                     __end_of_USBCtrlTrfInHandler:
 15809                           
 15810                           	psect	text82
 15811     1BFF                     __ptext82:	
 15812 ;; *************** function _USBHIDCBSetReportComplete *****************
 15813 ;; Defined at:
 15814 ;;		line 495 in file "app_device_keyboard.c"
 15815 ;; Parameters:    Size  Location     Type
 15816 ;;		None
 15817 ;; Auto vars:     Size  Location     Type
 15818 ;;		None
 15819 ;; Return value:  Size  Location     Type
 15820 ;;                  1    wreg      void 
 15821 ;; Registers used:
 15822 ;;		wreg, status,2, status,0, pclath, cstack
 15823 ;; Tracked objects:
 15824 ;;		On entry : 1F/2
 15825 ;;		On exit  : 1F/2
 15826 ;;		Unchanged: 0/0
 15827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;Total ram usage:        0 bytes
 15833 ;; Hardware stack levels used: 1
 15834 ;; Hardware stack levels required when called: 1
 15835 ;; This function calls:
 15836 ;;		i1_APP_KeyboardProcessOutputReport
 15837 ;; This function is called by:
 15838 ;;		_USBHIDCBSetReportHandler
 15839 ;;		_USBCtrlTrfRxService
 15840 ;;		_USBCtrlTrfInHandler
 15841 ;; This function uses a non-reentrant model
 15842 ;;
 15843                           
 15844     1BFF                     _USBHIDCBSetReportComplete:	
 15845                           ;psect for function _USBHIDCBSetReportComplete
 15846                           
 15847                           
 15848                           ;app_device_keyboard.c: 498:     outputReport.value = CtrlTrfData[0];
 15849                           
 15850                           ;incstack = 0
 15851                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+status,2+status,0+pclath+cstack]
 15852     1BFF  0020               	movlb	0	; select bank0
 15853     1C00  0848               	movf	72,w	;volatile
 15854     1C01  0022               	movlb	2	; select bank2
 15855     1C02  00A0               	movwf	32	;volatile
 15856                           
 15857                           ;app_device_keyboard.c: 501:     APP_KeyboardProcessOutputReport();
 15858     1C03  3180  2002         	fcall	i1_APP_KeyboardProcessOutputReport
 15859     1C05  0008               	return
 15860     1C06                     __end_of_USBHIDCBSetReportComplete:
 15861                           
 15862                           	psect	text83
 15863     0002                     __ptext83:	
 15864 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 15865 ;; Defined at:
 15866 ;;		line 487 in file "app_device_keyboard.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;		None
 15869 ;; Auto vars:     Size  Location     Type
 15870 ;;		None
 15871 ;; Return value:  Size  Location     Type
 15872 ;;                  1    wreg      void 
 15873 ;; Registers used:
 15874 ;;		wreg
 15875 ;; Tracked objects:
 15876 ;;		On entry : 1F/2
 15877 ;;		On exit  : 1F/2
 15878 ;;		Unchanged: 0/0
 15879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;Total ram usage:        0 bytes
 15885 ;; Hardware stack levels used: 1
 15886 ;; This function calls:
 15887 ;;		Nothing
 15888 ;; This function is called by:
 15889 ;;		_USBHIDCBSetReportComplete
 15890 ;; This function uses a non-reentrant model
 15891 ;;
 15892                           
 15893     0002                     i1_APP_KeyboardProcessOutputReport:	
 15894                           ;psect for function i1_APP_KeyboardProcessOutputReport
 15895                           
 15896                           
 15897                           ;app_device_keyboard.c: 488:     if (outputReport.leds.capsLock) {
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg]
 15901     0002  0820               	movf	32,w	;volatile
 15902     0003  0008               	return
 15903     0004                     __end_ofi1_APP_KeyboardProcessOutputReport:
 15904                           
 15905                           	psect	text84
 15906     158C                     __ptext84:	
 15907 ;; *************** function _USBCtrlTrfTxService *****************
 15908 ;; Defined at:
 15909 ;;		line 1775 in file "usb/usb_device.c"
 15910 ;; Parameters:    Size  Location     Type
 15911 ;;		None
 15912 ;; Auto vars:     Size  Location     Type
 15913 ;;  byteToSend      1    2[COMMON] unsigned char 
 15914 ;; Return value:  Size  Location     Type
 15915 ;;                  1    wreg      void 
 15916 ;; Registers used:
 15917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 15918 ;; Tracked objects:
 15919 ;;		On entry : 1E/0
 15920 ;;		On exit  : 1C/0
 15921 ;;		Unchanged: 0/0
 15922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;Total ram usage:        3 bytes
 15928 ;; Hardware stack levels used: 1
 15929 ;; This function calls:
 15930 ;;		Nothing
 15931 ;; This function is called by:
 15932 ;;		_USBCtrlEPAllowDataStage
 15933 ;;		_USBCtrlTrfInHandler
 15934 ;; This function uses a non-reentrant model
 15935 ;;
 15936                           
 15937     158C                     _USBCtrlTrfTxService:	
 15938                           ;psect for function _USBCtrlTrfTxService
 15939                           
 15940                           
 15941                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 15942                           
 15943                           ;incstack = 0
 15944                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 15945     158C  3008               	movlw	8
 15946     158D  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 15947                           
 15948                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 15949     158E  3000               	movlw	0
 15950     158F  0021               	movlb	1	; select bank1
 15951     1590  026F               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 15952     1591  3008               	movlw	8
 15953     1592  1903               	skipnz
 15954     1593  026E               	subwf	(_inPipes^(0+128)+3),w	;volatile
 15955     1594  1803               	skipnc
 15956     1595  2DA3               	goto	i1l579
 15957                           
 15958                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 15959     1596  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 15960     1597  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 15961                           
 15962                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 15963     1598  0022               	movlb	2	; select bank2
 15964     1599  0847               	movf	_shortPacketStatus^(0+256),w	;volatile
 15965     159A  1D03               	btfss	3,2
 15966     159B  2D9E               	goto	i1l4216
 15967                           
 15968                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 15969     159C  3001               	movlw	1
 15970     159D  2DA2               	goto	L18
 15971     159E                     i1l4216:	
 15972                           ;usb/usb_device.c: 1794:         }
 15973                           
 15974     159E  0347               	decf	_shortPacketStatus^(0+256),w	;volatile
 15975     159F  1D03               	btfss	3,2
 15976     15A0  2DA3               	goto	i1l579
 15977                           
 15978                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 15979     15A1  3002               	movlw	2
 15980     15A2                     L18:
 15981     15A2  00C7               	movwf	_shortPacketStatus^(0+256)	;volatile
 15982     15A3                     i1l579:	
 15983                           ;usb/usb_device.c: 1799:     }
 15984                           
 15985                           
 15986                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 15987     15A3  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 15988     15A4  00F0               	movwf	??_USBCtrlTrfTxService
 15989     15A5  01F1               	clrf	??_USBCtrlTrfTxService+1
 15990     15A6  0870               	movf	??_USBCtrlTrfTxService,w
 15991     15A7  0021               	movlb	1	; select bank1
 15992     15A8  02EE               	subwf	(_inPipes^(0+128)+3),f	;volatile
 15993     15A9  0871               	movf	??_USBCtrlTrfTxService+1,w
 15994     15AA  3BEF               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 15995                           
 15996                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 15997     15AB  0020               	movlb	0	; select bank0
 15998     15AC  0861               	movf	_pBDTEntryIn,w
 15999     15AD  3E01               	addlw	1
 16000     15AE  00F0               	movwf	??_USBCtrlTrfTxService
 16001     15AF  3000               	movlw	0
 16002     15B0  3D62               	addwfc	_pBDTEntryIn+1,w
 16003     15B1  00F1               	movwf	??_USBCtrlTrfTxService+1
 16004     15B2  0870               	movf	??_USBCtrlTrfTxService,w
 16005     15B3  0086               	movwf	6
 16006     15B4  0871               	movf	??_USBCtrlTrfTxService+1,w
 16007     15B5  0087               	movwf	7
 16008     15B6  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16009     15B7  0081               	movwf	1
 16010                           
 16011                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 16012     15B8  3048               	movlw	72
 16013     15B9  0022               	movlb	2	; select bank2
 16014     15BA  00C6               	movwf	_pDst^(0+256)
 16015                           
 16016                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 16017     15BB  0021               	movlb	1	; select bank1
 16018     15BC  1C6D               	btfss	(_inPipes^(0+128)+2),0	;volatile
 16019     15BD  2DD5               	goto	i1l4236
 16020     15BE  2DEF               	goto	i1l4246
 16021     15BF                     i1l4228:
 16022                           
 16023                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 16024     15BF  0022               	movlb	2	; select bank2
 16025     15C0  0846               	movf	_pDst^(0+256),w
 16026     15C1  0086               	movwf	6
 16027     15C2  0187               	clrf	7
 16028     15C3  0021               	movlb	1	; select bank1
 16029     15C4  086B               	movf	_inPipes^(0+128),w	;volatile
 16030     15C5  0084               	movwf	4
 16031     15C6  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16032     15C7  0085               	movwf	5
 16033     15C8  0800               	movf	0,w	;code access
 16034     15C9  0081               	movwf	1
 16035     15CA  3001               	movlw	1
 16036     15CB  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16037     15CC  3000               	movlw	0
 16038     15CD  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16039     15CE  3001               	movlw	1
 16040     15CF  00F0               	movwf	??_USBCtrlTrfTxService
 16041     15D0  0870               	movf	??_USBCtrlTrfTxService,w
 16042     15D1  0022               	movlb	2	; select bank2
 16043     15D2  07C6               	addwf	_pDst^(0+256),f
 16044                           
 16045                           ;usb/usb_device.c: 1818:             byteToSend--;
 16046     15D3  3001               	movlw	1
 16047     15D4  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16048     15D5                     i1l4236:
 16049                           
 16050                           ;usb/usb_device.c: 1815:         while(byteToSend)
 16051     15D5  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16052     15D6  1903               	btfsc	3,2
 16053     15D7  0008               	return
 16054     15D8  2DBF               	goto	i1l4228
 16055     15D9                     i1l4238:
 16056                           
 16057                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 16058     15D9  0022               	movlb	2	; select bank2
 16059     15DA  0846               	movf	_pDst^(0+256),w
 16060     15DB  0086               	movwf	6
 16061     15DC  0187               	clrf	7
 16062     15DD  0021               	movlb	1	; select bank1
 16063     15DE  086B               	movf	_inPipes^(0+128),w	;volatile
 16064     15DF  0084               	movwf	4
 16065     15E0  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16066     15E1  0085               	movwf	5
 16067     15E2  0800               	movf	0,w	;code access
 16068     15E3  0081               	movwf	1
 16069     15E4  3001               	movlw	1
 16070     15E5  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16071     15E6  3000               	movlw	0
 16072     15E7  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16073     15E8  3001               	movlw	1
 16074     15E9  00F0               	movwf	??_USBCtrlTrfTxService
 16075     15EA  0870               	movf	??_USBCtrlTrfTxService,w
 16076     15EB  0022               	movlb	2	; select bank2
 16077     15EC  07C6               	addwf	_pDst^(0+256),f
 16078                           
 16079                           ;usb/usb_device.c: 1826:             byteToSend--;
 16080     15ED  3001               	movlw	1
 16081     15EE  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16082     15EF                     i1l4246:
 16083                           
 16084                           ;usb/usb_device.c: 1823:         while(byteToSend)
 16085     15EF  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16086     15F0  1903               	btfsc	3,2
 16087     15F1  0008               	return
 16088     15F2  2DD9               	goto	i1l4238
 16089     15F3                     __end_of_USBCtrlTrfTxService:
 16090                           
 16091                           	psect	text85
 16092     1C77                     __ptext85:	
 16093 ;; *************** function _TMR2_ISR *****************
 16094 ;; Defined at:
 16095 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;		None
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;		None
 16100 ;; Return value:  Size  Location     Type
 16101 ;;                  1    wreg      void 
 16102 ;; Registers used:
 16103 ;;		wreg, status,2, status,0, pclath, cstack
 16104 ;; Tracked objects:
 16105 ;;		On entry : 1F/0
 16106 ;;		On exit  : 0/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;Total ram usage:        0 bytes
 16114 ;; Hardware stack levels used: 1
 16115 ;; Hardware stack levels required when called: 1
 16116 ;; This function calls:
 16117 ;;		NULL
 16118 ;;		_SysTimeInterrupt
 16119 ;;		_TMR2_DefaultInterruptHandler
 16120 ;; This function is called by:
 16121 ;;		_INTERRUPT_InterruptManager
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125     1C77                     _TMR2_ISR:	
 16126                           ;psect for function _TMR2_ISR
 16127                           
 16128                           
 16129                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 16130                           
 16131                           ;incstack = 0
 16132                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 16133     1C77  1091               	bcf	17,1	;volatile
 16134                           
 16135                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 16136     1C78  0023               	movlb	3	; select bank3
 16137     1C79  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16138     1C7A  0458               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 16139     1C7B  1903               	btfsc	3,2
 16140     1C7C  0008               	return
 16141                           
 16142                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 16143     1C7D  0858               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 16144     1C7E  008A               	movwf	10
 16145     1C7F  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16146     1C80  000A               	callw
 16147     1C81  319C               	pagesel	$
 16148     1C82  0008               	return
 16149     1C83                     __end_of_TMR2_ISR:
 16150                           
 16151                           	psect	text86
 16152     1C4E                     __ptext86:	
 16153 ;; *************** function _SysTimeInterrupt *****************
 16154 ;; Defined at:
 16155 ;;		line 24 in file "systime.c"
 16156 ;; Parameters:    Size  Location     Type
 16157 ;;		None
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;		None
 16160 ;; Return value:  Size  Location     Type
 16161 ;;                  1    wreg      void 
 16162 ;; Registers used:
 16163 ;;		wreg
 16164 ;; Tracked objects:
 16165 ;;		On entry : 1F/3
 16166 ;;		On exit  : 1F/3
 16167 ;;		Unchanged: 0/0
 16168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;Total ram usage:        0 bytes
 16174 ;; Hardware stack levels used: 1
 16175 ;; This function calls:
 16176 ;;		Nothing
 16177 ;; This function is called by:
 16178 ;;		_SysTime_Init
 16179 ;;		_TMR2_ISR
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183     1C4E                     _SysTimeInterrupt:	
 16184                           ;psect for function _SysTimeInterrupt
 16185                           
 16186                           
 16187                           ;systime.c: 26:     ++timeMs;
 16188                           
 16189                           ;incstack = 0
 16190                           ; Regs used in _SysTimeInterrupt: [wreg]
 16191     1C4E  3001               	movlw	1
 16192     1C4F  07B8               	addwf	_timeMs^(0+384),f
 16193     1C50  3000               	movlw	0
 16194     1C51  3DB9               	addwfc	(_timeMs+1)^(0+384),f
 16195     1C52  3000               	movlw	0
 16196     1C53  3DBA               	addwfc	(_timeMs+2)^(0+384),f
 16197     1C54  3000               	movlw	0
 16198     1C55  3DBB               	addwfc	(_timeMs+3)^(0+384),f
 16199     1C56  0008               	return
 16200     1C57                     __end_of_SysTimeInterrupt:
 16201                           
 16202                           	psect	text87
 16203     1084                     __ptext87:	
 16204 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 16205 ;; Defined at:
 16206 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 16207 ;; Parameters:    Size  Location     Type
 16208 ;;		None
 16209 ;; Auto vars:     Size  Location     Type
 16210 ;;		None
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  1    wreg      void 
 16213 ;; Registers used:
 16214 ;;		None
 16215 ;; Tracked objects:
 16216 ;;		On entry : 1F/3
 16217 ;;		On exit  : 1F/3
 16218 ;;		Unchanged: 1E/0
 16219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;Total ram usage:        0 bytes
 16225 ;; Hardware stack levels used: 1
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_TMR2_Initialize
 16230 ;;		_TMR2_ISR
 16231 ;; This function uses a non-reentrant model
 16232 ;;
 16233                           
 16234     1084                     _TMR2_DefaultInterruptHandler:	
 16235                           ;psect for function _TMR2_DefaultInterruptHandler
 16236                           
 16237                           
 16238                           ;incstack = 0
 16239                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 16240     1084  0008               	return
 16241     1085                     __end_of_TMR2_DefaultInterruptHandler:
 16242                           
 16243                           	psect	text88
 16244     1C61                     __ptext88:	
 16245 ;; *************** function _PIN_MANAGER_IOC *****************
 16246 ;; Defined at:
 16247 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;		None
 16250 ;; Auto vars:     Size  Location     Type
 16251 ;;		None
 16252 ;; Return value:  Size  Location     Type
 16253 ;;                  1    wreg      void 
 16254 ;; Registers used:
 16255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16256 ;; Tracked objects:
 16257 ;;		On entry : 0/0
 16258 ;;		On exit  : 1F/7
 16259 ;;		Unchanged: 0/0
 16260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16265 ;;Total ram usage:        0 bytes
 16266 ;; Hardware stack levels used: 1
 16267 ;; Hardware stack levels required when called: 4
 16268 ;; This function calls:
 16269 ;;		_IOCAF4_ISR
 16270 ;;		_IOCAF5_ISR
 16271 ;; This function is called by:
 16272 ;;		_INTERRUPT_InterruptManager
 16273 ;; This function uses a non-reentrant model
 16274 ;;
 16275                           
 16276     1C61                     _PIN_MANAGER_IOC:	
 16277                           ;psect for function _PIN_MANAGER_IOC
 16278                           
 16279                           
 16280                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 16281                           
 16282                           ;incstack = 0
 16283                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16284     1C61  0027               	movlb	7	; select bank7
 16285     1C62  1E13               	btfss	19,4	;volatile
 16286     1C63  2C67               	goto	i1l6436
 16287                           
 16288                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 16289     1C64  319C  248F  319C   	fcall	_IOCAF4_ISR
 16290     1C67                     i1l6436:
 16291                           
 16292                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 16293     1C67  1E93               	btfss	19,5	;volatile
 16294     1C68  0008               	return
 16295                           
 16296                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 16297     1C69  319C  249C         	fcall	_IOCAF5_ISR
 16298     1C6B  0008               	return
 16299     1C6C                     __end_of_PIN_MANAGER_IOC:
 16300                           
 16301                           	psect	text89
 16302     1C9C                     __ptext89:	
 16303 ;; *************** function _IOCAF5_ISR *****************
 16304 ;; Defined at:
 16305 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;		None
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;		None
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      void 
 16312 ;; Registers used:
 16313 ;;		wreg, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 1F/7
 16316 ;;		On exit  : 1F/7
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;Total ram usage:        0 bytes
 16324 ;; Hardware stack levels used: 1
 16325 ;; Hardware stack levels required when called: 1
 16326 ;; This function calls:
 16327 ;;		NULL
 16328 ;;		_IOCAF5_DefaultInterruptHandler
 16329 ;;		_PS2KeyboardDataInterrupt
 16330 ;; This function is called by:
 16331 ;;		_PIN_MANAGER_IOC
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335     1C9C                     _IOCAF5_ISR:	
 16336                           ;psect for function _IOCAF5_ISR
 16337                           
 16338                           
 16339                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 16340                           
 16341                           ;incstack = 0
 16342                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 16343     1C9C  0023               	movlb	3	; select bank3
 16344     1C9D  0865               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16345     1C9E  0466               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16346     1C9F  1903               	btfsc	3,2
 16347     1CA0  2CA6               	goto	i1l5248
 16348                           
 16349                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 16350     1CA1  0866               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16351     1CA2  008A               	movwf	10
 16352     1CA3  0865               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16353     1CA4  000A               	callw
 16354     1CA5  319C               	pagesel	$
 16355     1CA6                     i1l5248:
 16356                           
 16357                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 16358     1CA6  0027               	movlb	7	; select bank7
 16359     1CA7  1293               	bcf	19,5	;volatile
 16360     1CA8  0008               	return
 16361     1CA9                     __end_of_IOCAF5_ISR:
 16362                           
 16363                           	psect	text90
 16364     1BEB                     __ptext90:	
 16365 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 16366 ;; Defined at:
 16367 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 16368 ;; Parameters:    Size  Location     Type
 16369 ;;		None
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;		None
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      void 
 16374 ;; Registers used:
 16375 ;;		None
 16376 ;; Tracked objects:
 16377 ;;		On entry : 1F/3
 16378 ;;		On exit  : 1F/3
 16379 ;;		Unchanged: 1E/0
 16380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;Total ram usage:        0 bytes
 16386 ;; Hardware stack levels used: 1
 16387 ;; This function calls:
 16388 ;;		Nothing
 16389 ;; This function is called by:
 16390 ;;		_PIN_MANAGER_Initialize
 16391 ;;		_IOCAF5_ISR
 16392 ;; This function uses a non-reentrant model
 16393 ;;
 16394                           
 16395     1BEB                     _IOCAF5_DefaultInterruptHandler:	
 16396                           ;psect for function _IOCAF5_DefaultInterruptHandler
 16397                           
 16398                           
 16399                           ;incstack = 0
 16400                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 16401     1BEB  0008               	return
 16402     1BEC                     __end_of_IOCAF5_DefaultInterruptHandler:
 16403                           
 16404                           	psect	text91
 16405     1BF8                     __ptext91:	
 16406 ;; *************** function _PS2KeyboardDataInterrupt *****************
 16407 ;; Defined at:
 16408 ;;		line 57 in file "ps2_keyboard.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0
 16417 ;; Tracked objects:
 16418 ;;		On entry : 1F/3
 16419 ;;		On exit  : 1F/2
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        0 bytes
 16427 ;; Hardware stack levels used: 1
 16428 ;; This function calls:
 16429 ;;		Nothing
 16430 ;; This function is called by:
 16431 ;;		_PS2Keyboard_Init
 16432 ;;		_IOCAF5_ISR
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436     1BF8                     _PS2KeyboardDataInterrupt:	
 16437                           ;psect for function _PS2KeyboardDataInterrupt
 16438                           
 16439                           
 16440                           ;ps2_keyboard.c: 58:     if (keyboardState == KeyboardIdle) {
 16441                           
 16442                           ;incstack = 0
 16443                           ; Regs used in _PS2KeyboardDataInterrupt: [wreg+status,2+status,0]
 16444     1BF8  0022               	movlb	2	; select bank2
 16445     1BF9  083A               	movf	_keyboardState^(0+256),w
 16446     1BFA  1D03               	btfss	3,2
 16447     1BFB  0008               	return
 16448                           
 16449                           ;ps2_keyboard.c: 59:         keyboardState = KeyboardStart;
 16450     1BFC  3001               	movlw	1
 16451     1BFD  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16452     1BFE  0008               	return
 16453     1BFF                     __end_of_PS2KeyboardDataInterrupt:
 16454                           
 16455                           	psect	text92
 16456     1C8F                     __ptext92:	
 16457 ;; *************** function _IOCAF4_ISR *****************
 16458 ;; Defined at:
 16459 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 16460 ;; Parameters:    Size  Location     Type
 16461 ;;		None
 16462 ;; Auto vars:     Size  Location     Type
 16463 ;;		None
 16464 ;; Return value:  Size  Location     Type
 16465 ;;                  1    wreg      void 
 16466 ;; Registers used:
 16467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16468 ;; Tracked objects:
 16469 ;;		On entry : 1F/7
 16470 ;;		On exit  : 1F/7
 16471 ;;		Unchanged: 0/0
 16472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16477 ;;Total ram usage:        0 bytes
 16478 ;; Hardware stack levels used: 1
 16479 ;; Hardware stack levels required when called: 3
 16480 ;; This function calls:
 16481 ;;		NULL
 16482 ;;		_IOCAF4_DefaultInterruptHandler
 16483 ;;		_PS2KeyboardClockInterrupt
 16484 ;; This function is called by:
 16485 ;;		_PIN_MANAGER_IOC
 16486 ;; This function uses a non-reentrant model
 16487 ;;
 16488                           
 16489     1C8F                     _IOCAF4_ISR:	
 16490                           ;psect for function _IOCAF4_ISR
 16491                           
 16492                           
 16493                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16497     1C8F  0023               	movlb	3	; select bank3
 16498     1C90  0867               	movf	_IOCAF4_InterruptHandler^(0+384),w
 16499     1C91  0468               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 16500     1C92  1903               	btfsc	3,2
 16501     1C93  2C99               	goto	i1l6394
 16502                           
 16503                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 16504     1C94  0868               	movf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 16505     1C95  008A               	movwf	10
 16506     1C96  0867               	movf	_IOCAF4_InterruptHandler^(0+384),w
 16507     1C97  000A               	callw
 16508     1C98  319C               	pagesel	$
 16509     1C99                     i1l6394:
 16510                           
 16511                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 16512     1C99  0027               	movlb	7	; select bank7
 16513     1C9A  1213               	bcf	19,4	;volatile
 16514     1C9B  0008               	return
 16515     1C9C                     __end_of_IOCAF4_ISR:
 16516                           
 16517                           	psect	text93
 16518     1BEA                     __ptext93:	
 16519 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 16520 ;; Defined at:
 16521 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 16522 ;; Parameters:    Size  Location     Type
 16523 ;;		None
 16524 ;; Auto vars:     Size  Location     Type
 16525 ;;		None
 16526 ;; Return value:  Size  Location     Type
 16527 ;;                  1    wreg      void 
 16528 ;; Registers used:
 16529 ;;		None
 16530 ;; Tracked objects:
 16531 ;;		On entry : 1F/3
 16532 ;;		On exit  : 1F/3
 16533 ;;		Unchanged: 1E/0
 16534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;Total ram usage:        0 bytes
 16540 ;; Hardware stack levels used: 1
 16541 ;; This function calls:
 16542 ;;		Nothing
 16543 ;; This function is called by:
 16544 ;;		_PIN_MANAGER_Initialize
 16545 ;;		_IOCAF4_ISR
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549     1BEA                     _IOCAF4_DefaultInterruptHandler:	
 16550                           ;psect for function _IOCAF4_DefaultInterruptHandler
 16551                           
 16552                           
 16553                           ;incstack = 0
 16554                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 16555     1BEA  0008               	return
 16556     1BEB                     __end_of_IOCAF4_DefaultInterruptHandler:
 16557                           
 16558                           	psect	text94
 16559     0F44                     __ptext94:	
 16560 ;; *************** function _PS2KeyboardClockInterrupt *****************
 16561 ;; Defined at:
 16562 ;;		line 63 in file "ps2_keyboard.c"
 16563 ;; Parameters:    Size  Location     Type
 16564 ;;		None
 16565 ;; Auto vars:     Size  Location     Type
 16566 ;;		None
 16567 ;; Return value:  Size  Location     Type
 16568 ;;                  1    wreg      void 
 16569 ;; Registers used:
 16570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16571 ;; Tracked objects:
 16572 ;;		On entry : 1F/3
 16573 ;;		On exit  : 1F/2
 16574 ;;		Unchanged: 0/0
 16575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;Total ram usage:        4 bytes
 16581 ;; Hardware stack levels used: 1
 16582 ;; Hardware stack levels required when called: 2
 16583 ;; This function calls:
 16584 ;;		_SysTime_GetCurrentTimeMs
 16585 ;;		i1_GenericQueue_Enqueue
 16586 ;; This function is called by:
 16587 ;;		_PS2Keyboard_Init
 16588 ;;		_IOCAF4_ISR
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592     0F44                     _PS2KeyboardClockInterrupt:	
 16593                           ;psect for function _PS2KeyboardClockInterrupt
 16594                           
 16595                           
 16596                           ;ps2_keyboard.c: 64:     if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 16597                           
 16598                           ;incstack = 0
 16599                           ; Regs used in _PS2KeyboardClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16600     0F44  319C  2457  318F   	fcall	_SysTime_GetCurrentTimeMs
 16601     0F47  083C               	movf	_prevTimeMs^(0+384),w	;volatile
 16602     0F48  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 16603     0F49  0020               	movlb	0	; select bank0
 16604     0F4A  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16605     0F4B  0023               	movlb	3	; select bank3
 16606     0F4C  083D               	movf	(_prevTimeMs+1)^(0+384),w	;volatile
 16607     0F4D  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 16608     0F4E  0020               	movlb	0	; select bank0
 16609     0F4F  00DD               	movwf	??_PS2KeyboardClockInterrupt+1
 16610     0F50  0023               	movlb	3	; select bank3
 16611     0F51  083E               	movf	(_prevTimeMs+2)^(0+384),w	;volatile
 16612     0F52  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 16613     0F53  0020               	movlb	0	; select bank0
 16614     0F54  00DE               	movwf	??_PS2KeyboardClockInterrupt+2
 16615     0F55  0023               	movlb	3	; select bank3
 16616     0F56  083F               	movf	(_prevTimeMs+3)^(0+384),w	;volatile
 16617     0F57  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 16618     0F58  0020               	movlb	0	; select bank0
 16619     0F59  00DF               	movwf	??_PS2KeyboardClockInterrupt+3
 16620     0F5A  085F               	movf	??_PS2KeyboardClockInterrupt+3,w
 16621     0F5B  1D03               	btfss	3,2
 16622     0F5C  2F67               	goto	i1l6330
 16623     0F5D  085E               	movf	??_PS2KeyboardClockInterrupt+2,w
 16624     0F5E  1D03               	btfss	3,2
 16625     0F5F  2F67               	goto	i1l6330
 16626     0F60  085D               	movf	??_PS2KeyboardClockInterrupt+1,w
 16627     0F61  1D03               	btfss	3,2
 16628     0F62  2F67               	goto	i1l6330
 16629     0F63  30FA               	movlw	250
 16630     0F64  025C               	subwf	??_PS2KeyboardClockInterrupt,w
 16631     0F65  1C03               	btfss	3,0
 16632     0F66  2FE7               	goto	i1l6384
 16633     0F67                     i1l6330:
 16634                           
 16635                           ;ps2_keyboard.c: 65:         keyboardState = KeyboardStart;
 16636     0F67  3001               	movlw	1
 16637     0F68  0022               	movlb	2	; select bank2
 16638     0F69  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16639                           
 16640                           ;ps2_keyboard.c: 66:         prevTimeMs = SysTime_GetCurrentTimeMs();
 16641     0F6A  319C  2457  318F   	fcall	_SysTime_GetCurrentTimeMs
 16642     0F6D  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 16643     0F6E  00BF               	movwf	(_prevTimeMs+3)^(0+384)	;volatile
 16644     0F6F  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 16645     0F70  00BE               	movwf	(_prevTimeMs+2)^(0+384)	;volatile
 16646     0F71  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 16647     0F72  00BD               	movwf	(_prevTimeMs+1)^(0+384)	;volatile
 16648     0F73  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 16649     0F74  00BC               	movwf	_prevTimeMs^(0+384)	;volatile
 16650     0F75  2FE7               	goto	i1l6384
 16651     0F76                     i1l6334:
 16652                           
 16653                           ;ps2_keyboard.c: 70:             keyboardIndexData = 0;
 16654     0F76  0022               	movlb	2	; select bank2
 16655     0F77  01B9               	clrf	_keyboardIndexData^(0+256)	;volatile
 16656                           
 16657                           ;ps2_keyboard.c: 71:             keyboardOnesCount = 0;
 16658     0F78  01B8               	clrf	_keyboardOnesCount^(0+256)	;volatile
 16659                           
 16660                           ;ps2_keyboard.c: 72:             keyboardScanCode.value = 0;
 16661     0F79  0023               	movlb	3	; select bank3
 16662     0F7A  01E1               	clrf	_keyboardScanCode^(0+384)
 16663     0F7B                     i1l6336:
 16664                           
 16665                           ;ps2_keyboard.c: 73:             keyboardState = KeyboardData;
 16666     0F7B  3002               	movlw	2
 16667     0F7C  0022               	movlb	2	; select bank2
 16668     0F7D  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16669                           
 16670                           ;ps2_keyboard.c: 74:             break;
 16671     0F7E  0008               	return
 16672     0F7F                     i1l6338:
 16673                           
 16674                           ;ps2_keyboard.c: 76:             keyboardData = PORTAbits.RA5;
 16675     0F7F  3000               	movlw	0
 16676     0F80  1A8C               	btfsc	12,5	;volatile
 16677     0F81  3001               	movlw	1
 16678     0F82  0022               	movlb	2	; select bank2
 16679     0F83  00B6               	movwf	_keyboardData^(0+256)	;volatile
 16680                           
 16681                           ;ps2_keyboard.c: 77:             keyboardScanCode.value |= keyboardData << keyboardIndex
      +                          Data;
 16682     0F84  0836               	movf	_keyboardData^(0+256),w	;volatile
 16683     0F85  0020               	movlb	0	; select bank0
 16684     0F86  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16685     0F87  0022               	movlb	2	; select bank2
 16686     0F88  0A39               	incf	_keyboardIndexData^(0+256),w	;volatile
 16687     0F89  0020               	movlb	0	; select bank0
 16688     0F8A  2F8C               	goto	u598_24
 16689     0F8B                     u598_25:
 16690     0F8B  35DC               	lslf	??_PS2KeyboardClockInterrupt,f
 16691     0F8C                     u598_24:
 16692     0F8C  0B89               	decfsz	9,f
 16693     0F8D  2F8B               	goto	u598_25
 16694     0F8E  085C               	movf	??_PS2KeyboardClockInterrupt,w
 16695     0F8F  00DD               	movwf	??_PS2KeyboardClockInterrupt+1
 16696     0F90  085D               	movf	??_PS2KeyboardClockInterrupt+1,w
 16697     0F91  0023               	movlb	3	; select bank3
 16698     0F92  04E1               	iorwf	_keyboardScanCode^(0+384),f
 16699                           
 16700                           ;ps2_keyboard.c: 78:             keyboardOnesCount += keyboardData;
 16701     0F93  0022               	movlb	2	; select bank2
 16702     0F94  0836               	movf	_keyboardData^(0+256),w	;volatile
 16703     0F95  0020               	movlb	0	; select bank0
 16704     0F96  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16705     0F97  085C               	movf	??_PS2KeyboardClockInterrupt,w
 16706     0F98  0022               	movlb	2	; select bank2
 16707     0F99  07B8               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 16708                           
 16709                           ;ps2_keyboard.c: 79:             keyboardIndexData += 1;
 16710     0F9A  3001               	movlw	1
 16711     0F9B  0020               	movlb	0	; select bank0
 16712     0F9C  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16713     0F9D  085C               	movf	??_PS2KeyboardClockInterrupt,w
 16714     0F9E  0022               	movlb	2	; select bank2
 16715     0F9F  07B9               	addwf	_keyboardIndexData^(0+256),f	;volatile
 16716                           
 16717                           ;ps2_keyboard.c: 80:             if (keyboardIndexData == 8) {
 16718     0FA0  3008               	movlw	8
 16719     0FA1  0639               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 16720     0FA2  1D03               	btfss	3,2
 16721     0FA3  2F7B               	goto	i1l6336
 16722                           
 16723                           ;ps2_keyboard.c: 81:                 keyboardState = KeyboardParity;
 16724     0FA4  3003               	movlw	3
 16725     0FA5  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16726                           
 16727                           ;ps2_keyboard.c: 82:             } else {
 16728     0FA6  0008               	return
 16729     0FA7                     i1l6352:
 16730                           
 16731                           ;ps2_keyboard.c: 87:             keyboardData = PORTAbits.RA5;
 16732     0FA7  3000               	movlw	0
 16733     0FA8  1A8C               	btfsc	12,5	;volatile
 16734     0FA9  3001               	movlw	1
 16735     0FAA  0022               	movlb	2	; select bank2
 16736     0FAB  00B6               	movwf	_keyboardData^(0+256)	;volatile
 16737                           
 16738                           ;ps2_keyboard.c: 88:             keyboardOnesCount += keyboardData;
 16739     0FAC  0836               	movf	_keyboardData^(0+256),w	;volatile
 16740     0FAD  0020               	movlb	0	; select bank0
 16741     0FAE  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16742     0FAF  085C               	movf	??_PS2KeyboardClockInterrupt,w
 16743     0FB0  0022               	movlb	2	; select bank2
 16744     0FB1  07B8               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 16745                           
 16746                           ;ps2_keyboard.c: 89:             keyboardScanCodeValid = keyboardOnesCount & 0x01;
 16747     0FB2  1C38               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 16748     0FB3  2FB6               	goto	u600_20
 16749     0FB4  3001               	movlw	1
 16750     0FB5  2FB7               	goto	u601_20
 16751     0FB6                     u600_20:
 16752     0FB6  3000               	movlw	0
 16753     0FB7                     u601_20:
 16754     0FB7  00B7               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 16755                           
 16756                           ;ps2_keyboard.c: 90:             keyboardState = KeyboardStop;
 16757     0FB8  3004               	movlw	4
 16758     0FB9  00BA               	movwf	_keyboardState^(0+256)	;volatile
 16759                           
 16760                           ;ps2_keyboard.c: 91:             break;
 16761     0FBA  0008               	return
 16762     0FBB                     i1l6360:
 16763                           
 16764                           ;ps2_keyboard.c: 93:             if (keyboardScanCode.value == 0xE0) {
 16765     0FBB  30E0               	movlw	224
 16766     0FBC  0023               	movlb	3	; select bank3
 16767     0FBD  0661               	xorwf	_keyboardScanCode^(0+384),w
 16768     0FBE  1D03               	btfss	3,2
 16769     0FBF  2FC4               	goto	i1l6364
 16770                           
 16771                           ;ps2_keyboard.c: 94:                 keyboardIsExtend = 1;
 16772     0FC0  3001               	movlw	1
 16773     0FC1  0022               	movlb	2	; select bank2
 16774     0FC2  00B5               	movwf	_keyboardIsExtend^(0+256)	;volatile
 16775                           
 16776                           ;ps2_keyboard.c: 95:             } else if (keyboardScanCode.value == 0xF0) {
 16777     0FC3  2FE4               	goto	i1l6378
 16778     0FC4                     i1l6364:
 16779     0FC4  30F0               	movlw	240
 16780     0FC5  0661               	xorwf	_keyboardScanCode^(0+384),w
 16781     0FC6  1D03               	btfss	3,2
 16782     0FC7  2FCB               	goto	i1l6368
 16783                           
 16784                           ;ps2_keyboard.c: 96:                 keyboardIsBreak = 1;
 16785     0FC8  3001               	movlw	1
 16786     0FC9  00DD               	movwf	_keyboardIsBreak^(0+384)	;volatile
 16787                           
 16788                           ;ps2_keyboard.c: 97:             } else {
 16789     0FCA  2FE4               	goto	i1l6378
 16790     0FCB                     i1l6368:
 16791                           
 16792                           ;ps2_keyboard.c: 98:                 keyboardScanCode.isBreak = keyboardIsBreak;
 16793     0FCB  085D               	movf	_keyboardIsBreak^(0+384),w	;volatile
 16794     0FCC  00E3               	movwf	(_keyboardScanCode^(0+384)+2)
 16795                           
 16796                           ;ps2_keyboard.c: 99:                 keyboardScanCode.isExtend = keyboardIsExtend;
 16797     0FCD  0022               	movlb	2	; select bank2
 16798     0FCE  0835               	movf	_keyboardIsExtend^(0+256),w	;volatile
 16799     0FCF  0023               	movlb	3	; select bank3
 16800     0FD0  00E2               	movwf	(_keyboardScanCode^(0+384)+1)
 16801                           
 16802                           ;ps2_keyboard.c: 100:                 if (keyboardScanCodeValid) {
 16803     0FD1  0022               	movlb	2	; select bank2
 16804     0FD2  0837               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 16805     0FD3  1903               	btfsc	3,2
 16806     0FD4  2FE0               	goto	i1l6374
 16807                           
 16808                           ;ps2_keyboard.c: 101:                     GenericQueue_Enqueue(&keyboardScanCodeQueue, &
      +                          keyboardScanCode);
 16809     0FD5  3091               	movlw	145
 16810     0FD6  0020               	movlb	0	; select bank0
 16811     0FD7  00D5               	movwf	i1GenericQueue_Enqueue@q
 16812     0FD8  3023               	movlw	35
 16813     0FD9  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 16814     0FDA  30E1               	movlw	low _keyboardScanCode
 16815     0FDB  00D7               	movwf	i1GenericQueue_Enqueue@item
 16816     0FDC  3001               	movlw	high _keyboardScanCode
 16817     0FDD  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 16818     0FDE  3196  265A         	fcall	i1_GenericQueue_Enqueue
 16819     0FE0                     i1l6374:
 16820                           
 16821                           ;ps2_keyboard.c: 103:                 keyboardIsBreak = 0;
 16822     0FE0  0023               	movlb	3	; select bank3
 16823     0FE1  01DD               	clrf	_keyboardIsBreak^(0+384)	;volatile
 16824                           
 16825                           ;ps2_keyboard.c: 104:                 keyboardIsExtend = 0;
 16826     0FE2  0022               	movlb	2	; select bank2
 16827     0FE3  01B5               	clrf	_keyboardIsExtend^(0+256)	;volatile
 16828     0FE4                     i1l6378:
 16829                           
 16830                           ;ps2_keyboard.c: 106:             keyboardState = KeyboardIdle;
 16831     0FE4  0022               	movlb	2	; select bank2
 16832     0FE5  01BA               	clrf	_keyboardState^(0+256)	;volatile
 16833                           
 16834                           ;ps2_keyboard.c: 107:             break;
 16835     0FE6  0008               	return
 16836     0FE7                     i1l6384:
 16837     0FE7  0022               	movlb	2	; select bank2
 16838     0FE8  083A               	movf	_keyboardState^(0+256),w	;volatile
 16839     0FE9  0020               	movlb	0	; select bank0
 16840     0FEA  00DC               	movwf	??_PS2KeyboardClockInterrupt
 16841     0FEB  01DD               	clrf	??_PS2KeyboardClockInterrupt+1
 16842                           
 16843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16844                           ; Switch size 1, requested type "simple"
 16845                           ; Number of cases is 1, Range of values is 0 to 0
 16846                           ; switch strategies available:
 16847                           ; Name         Instructions Cycles
 16848                           ; simple_byte            4     3 (average)
 16849                           ; direct_byte            8     6 (fixed)
 16850                           ; jumptable            260     6 (fixed)
 16851                           ;	Chosen strategy is simple_byte
 16852     0FEC  085D               	movf	??_PS2KeyboardClockInterrupt+1,w
 16853     0FED  3A00               	xorlw	0	; case 0
 16854     0FEE  1903               	skipnz
 16855     0FEF  2FF1               	goto	i1l6822
 16856     0FF0  2FE4               	goto	i1l6378
 16857     0FF1                     i1l6822:
 16858                           
 16859                           ; Switch size 1, requested type "simple"
 16860                           ; Number of cases is 4, Range of values is 1 to 4
 16861                           ; switch strategies available:
 16862                           ; Name         Instructions Cycles
 16863                           ; simple_byte           13     7 (average)
 16864                           ; direct_byte           17     9 (fixed)
 16865                           ; jumptable            263     9 (fixed)
 16866                           ;	Chosen strategy is simple_byte
 16867     0FF1  085C               	movf	??_PS2KeyboardClockInterrupt,w
 16868     0FF2  3A01               	xorlw	1	; case 1
 16869     0FF3  1903               	skipnz
 16870     0FF4  2F76               	goto	i1l6334
 16871     0FF5  3A03               	xorlw	3	; case 2
 16872     0FF6  1903               	skipnz
 16873     0FF7  2F7F               	goto	i1l6338
 16874     0FF8  3A01               	xorlw	1	; case 3
 16875     0FF9  1903               	skipnz
 16876     0FFA  2FA7               	goto	i1l6352
 16877     0FFB  3A07               	xorlw	7	; case 4
 16878     0FFC  1903               	skipnz
 16879     0FFD  2FBB               	goto	i1l6360
 16880     0FFE  2FE4               	goto	i1l6378
 16881     0FFF  0008               	return
 16882     1000                     __end_of_PS2KeyboardClockInterrupt:
 16883                           
 16884                           	psect	text95
 16885     165A                     __ptext95:	
 16886 ;; *************** function i1_GenericQueue_Enqueue *****************
 16887 ;; Defined at:
 16888 ;;		line 19 in file "generic_queue.c"
 16889 ;; Parameters:    Size  Location     Type
 16890 ;;  q               2    5[BANK0 ] PTR struct .
 16891 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 16892 ;;  item            2    7[BANK0 ] PTR const void 
 16893 ;;		 -> keyboardScanCode(3), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCode_2876(1), 
 16894 ;; Auto vars:     Size  Location     Type
 16895 ;;		None
 16896 ;; Return value:  Size  Location     Type
 16897 ;;                  1    wreg      void 
 16898 ;; Registers used:
 16899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16900 ;; Tracked objects:
 16901 ;;		On entry : 1F/0
 16902 ;;		On exit  : 1F/0
 16903 ;;		Unchanged: 0/0
 16904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16905 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16908 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;Total ram usage:        7 bytes
 16910 ;; Hardware stack levels used: 1
 16911 ;; Hardware stack levels required when called: 1
 16912 ;; This function calls:
 16913 ;;		i1_GenericQueue_IsFull
 16914 ;;		i1___awmod
 16915 ;;		i1___wmul
 16916 ;;		i1_memcpy
 16917 ;; This function is called by:
 16918 ;;		_PS2KeyboardClockInterrupt
 16919 ;; This function uses a non-reentrant model
 16920 ;;
 16921                           
 16922     165A                     i1_GenericQueue_Enqueue:	
 16923                           ;psect for function i1_GenericQueue_Enqueue
 16924                           
 16925                           
 16926                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 16927                           
 16928                           ;incstack = 0
 16929                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16930     165A  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 16931     165B  00F1               	movwf	i1GenericQueue_IsFull@q+1
 16932     165C  0855               	movf	i1GenericQueue_Enqueue@q,w
 16933     165D  00F0               	movwf	i1GenericQueue_IsFull@q
 16934     165E  319D  2505  3196   	fcall	i1_GenericQueue_IsFull
 16935     1661  0870               	movf	?i1_GenericQueue_IsFull,w
 16936     1662  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 16937     1663  1D03               	btfss	3,2
 16938     1664  0008               	return
 16939                           
 16940                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 16941     1665  0855               	movf	i1GenericQueue_Enqueue@q,w
 16942     1666  3E5D               	addlw	93
 16943     1667  0086               	movwf	6
 16944     1668  3000               	movlw	0
 16945     1669  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16946     166A  0087               	movwf	7
 16947     166B  0801               	movf	1,w
 16948     166C  00D9               	movwf	??i1_GenericQueue_Enqueue
 16949     166D  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 16950     166E  0859               	movf	??i1_GenericQueue_Enqueue,w
 16951     166F  00F0               	movwf	i1___wmul@multiplier
 16952     1670  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 16953     1671  00F1               	movwf	i1___wmul@multiplier+1
 16954     1672  0855               	movf	i1GenericQueue_Enqueue@q,w
 16955     1673  3E5A               	addlw	90
 16956     1674  0086               	movwf	6
 16957     1675  3000               	movlw	0
 16958     1676  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16959     1677  0087               	movwf	7
 16960     1678  3F40               	moviw [0]fsr1
 16961     1679  00F2               	movwf	i1___wmul@multiplicand
 16962     167A  3F41               	moviw [1]fsr1
 16963     167B  00F3               	movwf	i1___wmul@multiplicand+1
 16964     167C  319D  25E8  3196   	fcall	i1___wmul
 16965     167F  0870               	movf	?i1___wmul,w
 16966     1680  0755               	addwf	i1GenericQueue_Enqueue@q,w
 16967     1681  00F6               	movwf	i1memcpy@d1
 16968     1682  0871               	movf	?i1___wmul+1,w
 16969     1683  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16970     1684  00F7               	movwf	i1memcpy@d1+1
 16971     1685  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 16972     1686  00F9               	movwf	i1memcpy@s1+1
 16973     1687  0857               	movf	i1GenericQueue_Enqueue@item,w
 16974     1688  00F8               	movwf	i1memcpy@s1
 16975     1689  0855               	movf	i1GenericQueue_Enqueue@q,w
 16976     168A  3E5A               	addlw	90
 16977     168B  0086               	movwf	6
 16978     168C  3000               	movlw	0
 16979     168D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16980     168E  0087               	movwf	7
 16981     168F  3F40               	moviw [0]fsr1
 16982     1690  00FA               	movwf	i1memcpy@n
 16983     1691  3F41               	moviw [1]fsr1
 16984     1692  00FB               	movwf	i1memcpy@n+1
 16985     1693  319F  2735  3196   	fcall	i1_memcpy
 16986                           
 16987                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 16988     1696  300F               	movlw	15
 16989     1697  00F0               	movwf	i1___awmod@divisor
 16990     1698  3000               	movlw	0
 16991     1699  00F1               	movwf	i1___awmod@divisor+1
 16992     169A  0855               	movf	i1GenericQueue_Enqueue@q,w
 16993     169B  3E5D               	addlw	93
 16994     169C  0086               	movwf	6
 16995     169D  3000               	movlw	0
 16996     169E  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 16997     169F  0087               	movwf	7
 16998     16A0  0801               	movf	1,w
 16999     16A1  3E01               	addlw	1
 17000     16A2  00F2               	movwf	i1___awmod@dividend
 17001     16A3  3000               	movlw	0
 17002     16A4  1803               	skipnc
 17003     16A5  3001               	movlw	1
 17004     16A6  00F3               	movwf	i1___awmod@dividend+1
 17005     16A7  3192  2253         	fcall	i1___awmod
 17006     16A9  0870               	movf	?i1___awmod,w
 17007     16AA  00D9               	movwf	??i1_GenericQueue_Enqueue
 17008     16AB  0855               	movf	i1GenericQueue_Enqueue@q,w
 17009     16AC  3E5D               	addlw	93
 17010     16AD  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 17011     16AE  3000               	movlw	0
 17012     16AF  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17013     16B0  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 17014     16B1  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 17015     16B2  0086               	movwf	6
 17016     16B3  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 17017     16B4  0087               	movwf	7
 17018     16B5  0859               	movf	??i1_GenericQueue_Enqueue,w
 17019     16B6  0081               	movwf	1
 17020                           
 17021                           ;generic_queue.c: 23:         q->size++;
 17022     16B7  3001               	movlw	1
 17023     16B8  00D9               	movwf	??i1_GenericQueue_Enqueue
 17024     16B9  0855               	movf	i1GenericQueue_Enqueue@q,w
 17025     16BA  3E5E               	addlw	94
 17026     16BB  0086               	movwf	6
 17027     16BC  3000               	movlw	0
 17028     16BD  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17029     16BE  0087               	movwf	7
 17030     16BF  0859               	movf	??i1_GenericQueue_Enqueue,w
 17031     16C0  0781               	addwf	1,f
 17032     16C1  0008               	return
 17033     16C2                     __end_ofi1_GenericQueue_Enqueue:
 17034                           
 17035                           	psect	text96
 17036     1F35                     __ptext96:	
 17037 ;; *************** function i1_memcpy *****************
 17038 ;; Defined at:
 17039 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 17040 ;; Parameters:    Size  Location     Type
 17041 ;;  d1              2    6[COMMON] PTR void 
 17042 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17043 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
 17044 ;;  s1              2    8[COMMON] PTR const void 
 17045 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCo
      +de_2876(1), 
 17046 ;;		 -> keyboard(100), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17047 ;;  n               2   10[COMMON] unsigned int 
 17048 ;; Auto vars:     Size  Location     Type
 17049 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 17050 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardTasks@usbHidCode_2878(1), APP_KeyboardTasks@usbHidCo
      +de_2876(1), 
 17051 ;;		 -> keyboard(100), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17052 ;;  d               2    0[BANK0 ] PTR unsigned char 
 17053 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17054 ;;		 -> keyboard(100), main@scanCode(3), SetupPkt(8), 
 17055 ;;  tmp             1    4[BANK0 ] unsigned char 
 17056 ;; Return value:  Size  Location     Type
 17057 ;;                  2    6[COMMON] PTR void 
 17058 ;; Registers used:
 17059 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17060 ;; Tracked objects:
 17061 ;;		On entry : 1F/0
 17062 ;;		On exit  : 1F/0
 17063 ;;		Unchanged: 0/0
 17064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17065 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;Total ram usage:       11 bytes
 17070 ;; Hardware stack levels used: 1
 17071 ;; This function calls:
 17072 ;;		Nothing
 17073 ;; This function is called by:
 17074 ;;		_USBCtrlEPService
 17075 ;;		i1_GenericQueue_Enqueue
 17076 ;; This function uses a non-reentrant model
 17077 ;;
 17078                           
 17079     1F35                     i1_memcpy:	
 17080                           ;psect for function i1_memcpy
 17081                           
 17082                           
 17083                           ;incstack = 0
 17084                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 17085     1F35  0879               	movf	i1memcpy@s1+1,w
 17086     1F36  00D3               	movwf	i1memcpy@s+1
 17087     1F37  0878               	movf	i1memcpy@s1,w
 17088     1F38  00D2               	movwf	i1memcpy@s
 17089     1F39  0877               	movf	i1memcpy@d1+1,w
 17090     1F3A  00D1               	movwf	i1memcpy@d+1
 17091     1F3B  0876               	movf	i1memcpy@d1,w
 17092     1F3C  00D0               	movwf	i1memcpy@d
 17093     1F3D                     i1l4640:
 17094     1F3D  3001               	movlw	1
 17095     1F3E  02FA               	subwf	i1memcpy@n,f
 17096     1F3F  3000               	movlw	0
 17097     1F40  3BFB               	subwfb	i1memcpy@n+1,f
 17098     1F41  0A7A               	incf	i1memcpy@n,w
 17099     1F42  1903               	btfsc	3,2
 17100     1F43  0A7B               	incf	i1memcpy@n+1,w
 17101     1F44  1903               	btfsc	3,2
 17102     1F45  0008               	return
 17103     1F46  0852               	movf	i1memcpy@s,w
 17104     1F47  0086               	movwf	6
 17105     1F48  0853               	movf	i1memcpy@s+1,w
 17106     1F49  0087               	movwf	7
 17107     1F4A  0801               	movf	1,w
 17108     1F4B  00D4               	movwf	i1memcpy@tmp
 17109     1F4C  3001               	movlw	1
 17110     1F4D  07D2               	addwf	i1memcpy@s,f
 17111     1F4E  3000               	movlw	0
 17112     1F4F  3DD3               	addwfc	i1memcpy@s+1,f
 17113     1F50  0850               	movf	i1memcpy@d,w
 17114     1F51  0086               	movwf	6
 17115     1F52  0851               	movf	i1memcpy@d+1,w
 17116     1F53  0087               	movwf	7
 17117     1F54  0854               	movf	i1memcpy@tmp,w
 17118     1F55  0081               	movwf	1
 17119     1F56  3001               	movlw	1
 17120     1F57  07D0               	addwf	i1memcpy@d,f
 17121     1F58  3000               	movlw	0
 17122     1F59  3DD1               	addwfc	i1memcpy@d+1,f
 17123     1F5A  2F3D               	goto	i1l4640
 17124     1F5B                     __end_ofi1_memcpy:
 17125                           
 17126                           	psect	text97
 17127     1DE8                     __ptext97:	
 17128 ;; *************** function i1___wmul *****************
 17129 ;; Defined at:
 17130 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 17131 ;; Parameters:    Size  Location     Type
 17132 ;;  multiplier      2    0[COMMON] unsigned int 
 17133 ;;  multiplicand    2    2[COMMON] unsigned int 
 17134 ;; Auto vars:     Size  Location     Type
 17135 ;;  product         2    4[COMMON] unsigned int 
 17136 ;; Return value:  Size  Location     Type
 17137 ;;                  2    0[COMMON] unsigned int 
 17138 ;; Registers used:
 17139 ;;		wreg, status,2, status,0
 17140 ;; Tracked objects:
 17141 ;;		On entry : 1F/0
 17142 ;;		On exit  : 1F/0
 17143 ;;		Unchanged: 1F/0
 17144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17145 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17146 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17148 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17149 ;;Total ram usage:        6 bytes
 17150 ;; Hardware stack levels used: 1
 17151 ;; This function calls:
 17152 ;;		Nothing
 17153 ;; This function is called by:
 17154 ;;		i1_GenericQueue_Enqueue
 17155 ;; This function uses a non-reentrant model
 17156 ;;
 17157                           
 17158     1DE8                     i1___wmul:	
 17159                           ;psect for function i1___wmul
 17160                           
 17161                           
 17162                           ;incstack = 0
 17163                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 17164     1DE8  01F4               	clrf	i1___wmul@product
 17165     1DE9  01F5               	clrf	i1___wmul@product+1
 17166     1DEA                     i1l4582:
 17167     1DEA  1C70               	btfss	i1___wmul@multiplier,0
 17168     1DEB  2DF0               	goto	i1l1234
 17169     1DEC  0872               	movf	i1___wmul@multiplicand,w
 17170     1DED  07F4               	addwf	i1___wmul@product,f
 17171     1DEE  0873               	movf	i1___wmul@multiplicand+1,w
 17172     1DEF  3DF5               	addwfc	i1___wmul@product+1,f
 17173     1DF0                     i1l1234:
 17174     1DF0  3001               	movlw	1
 17175     1DF1                     u373_25:
 17176     1DF1  35F2               	lslf	i1___wmul@multiplicand,f
 17177     1DF2  0DF3               	rlf	i1___wmul@multiplicand+1,f
 17178     1DF3  0B89               	decfsz	9,f
 17179     1DF4  2DF1               	goto	u373_25
 17180     1DF5  3001               	movlw	1
 17181     1DF6                     u374_25:
 17182     1DF6  36F1               	lsrf	i1___wmul@multiplier+1,f
 17183     1DF7  0CF0               	rrf	i1___wmul@multiplier,f
 17184     1DF8  0B89               	decfsz	9,f
 17185     1DF9  2DF6               	goto	u374_25
 17186     1DFA  0870               	movf	i1___wmul@multiplier,w
 17187     1DFB  0471               	iorwf	i1___wmul@multiplier+1,w
 17188     1DFC  1D03               	btfss	3,2
 17189     1DFD  2DEA               	goto	i1l4582
 17190     1DFE  0875               	movf	i1___wmul@product+1,w
 17191     1DFF  00F1               	movwf	?i1___wmul+1
 17192     1E00  0874               	movf	i1___wmul@product,w
 17193     1E01  00F0               	movwf	?i1___wmul
 17194     1E02  0008               	return
 17195     1E03                     __end_ofi1___wmul:
 17196                           
 17197                           	psect	text98
 17198     1253                     __ptext98:	
 17199 ;; *************** function i1___awmod *****************
 17200 ;; Defined at:
 17201 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 17202 ;; Parameters:    Size  Location     Type
 17203 ;;  divisor         2    0[COMMON] int 
 17204 ;;  dividend        2    2[COMMON] int 
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;  sign            1    6[COMMON] unsigned char 
 17207 ;;  counter         1    5[COMMON] unsigned char 
 17208 ;; Return value:  Size  Location     Type
 17209 ;;                  2    0[COMMON] int 
 17210 ;; Registers used:
 17211 ;;		wreg, status,2, status,0
 17212 ;; Tracked objects:
 17213 ;;		On entry : 1F/0
 17214 ;;		On exit  : 1F/0
 17215 ;;		Unchanged: 1F/0
 17216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17217 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17218 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17219 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17220 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17221 ;;Total ram usage:        7 bytes
 17222 ;; Hardware stack levels used: 1
 17223 ;; This function calls:
 17224 ;;		Nothing
 17225 ;; This function is called by:
 17226 ;;		i1_GenericQueue_Enqueue
 17227 ;; This function uses a non-reentrant model
 17228 ;;
 17229                           
 17230     1253                     i1___awmod:	
 17231                           ;psect for function i1___awmod
 17232                           
 17233                           
 17234                           ;incstack = 0
 17235                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 17236     1253  01F6               	clrf	i1___awmod@sign
 17237     1254  1FF3               	btfss	i1___awmod@dividend+1,7
 17238     1255  2A5D               	goto	i1l4602
 17239     1256  09F2               	comf	i1___awmod@dividend,f
 17240     1257  09F3               	comf	i1___awmod@dividend+1,f
 17241     1258  0AF2               	incf	i1___awmod@dividend,f
 17242     1259  1903               	skipnz
 17243     125A  0AF3               	incf	i1___awmod@dividend+1,f
 17244     125B  01F6               	clrf	i1___awmod@sign
 17245     125C  0AF6               	incf	i1___awmod@sign,f
 17246     125D                     i1l4602:
 17247     125D  1FF1               	btfss	i1___awmod@divisor+1,7
 17248     125E  2A64               	goto	i1l4606
 17249     125F  09F0               	comf	i1___awmod@divisor,f
 17250     1260  09F1               	comf	i1___awmod@divisor+1,f
 17251     1261  0AF0               	incf	i1___awmod@divisor,f
 17252     1262  1903               	skipnz
 17253     1263  0AF1               	incf	i1___awmod@divisor+1,f
 17254     1264                     i1l4606:
 17255     1264  0870               	movf	i1___awmod@divisor,w
 17256     1265  0471               	iorwf	i1___awmod@divisor+1,w
 17257     1266  1903               	btfsc	3,2
 17258     1267  2A8B               	goto	i1l4624
 17259     1268  01F5               	clrf	i1___awmod@counter
 17260     1269  0AF5               	incf	i1___awmod@counter,f
 17261     126A                     i1l4614:
 17262     126A  1BF1               	btfsc	i1___awmod@divisor+1,7
 17263     126B  2A76               	goto	i1l4616
 17264     126C  3001               	movlw	1
 17265     126D                     u379_25:
 17266     126D  35F0               	lslf	i1___awmod@divisor,f
 17267     126E  0DF1               	rlf	i1___awmod@divisor+1,f
 17268     126F  0B89               	decfsz	9,f
 17269     1270  2A6D               	goto	u379_25
 17270     1271  3001               	movlw	1
 17271     1272  00F4               	movwf	??i1___awmod
 17272     1273  0874               	movf	??i1___awmod,w
 17273     1274  07F5               	addwf	i1___awmod@counter,f
 17274     1275  2A6A               	goto	i1l4614
 17275     1276                     i1l4616:
 17276     1276  0871               	movf	i1___awmod@divisor+1,w
 17277     1277  0273               	subwf	i1___awmod@dividend+1,w
 17278     1278  1D03               	skipz
 17279     1279  2A7C               	goto	u381_25
 17280     127A  0870               	movf	i1___awmod@divisor,w
 17281     127B  0272               	subwf	i1___awmod@dividend,w
 17282     127C                     u381_25:
 17283     127C  1C03               	skipc
 17284     127D  2A82               	goto	i1l4620
 17285     127E  0870               	movf	i1___awmod@divisor,w
 17286     127F  02F2               	subwf	i1___awmod@dividend,f
 17287     1280  0871               	movf	i1___awmod@divisor+1,w
 17288     1281  3BF3               	subwfb	i1___awmod@dividend+1,f
 17289     1282                     i1l4620:
 17290     1282  3001               	movlw	1
 17291     1283                     u382_25:
 17292     1283  36F1               	lsrf	i1___awmod@divisor+1,f
 17293     1284  0CF0               	rrf	i1___awmod@divisor,f
 17294     1285  0B89               	decfsz	9,f
 17295     1286  2A83               	goto	u382_25
 17296     1287  3001               	movlw	1
 17297     1288  02F5               	subwf	i1___awmod@counter,f
 17298     1289  1D03               	btfss	3,2
 17299     128A  2A76               	goto	i1l4616
 17300     128B                     i1l4624:
 17301     128B  0876               	movf	i1___awmod@sign,w
 17302     128C  1903               	btfsc	3,2
 17303     128D  2A93               	goto	i1l4628
 17304     128E  09F2               	comf	i1___awmod@dividend,f
 17305     128F  09F3               	comf	i1___awmod@dividend+1,f
 17306     1290  0AF2               	incf	i1___awmod@dividend,f
 17307     1291  1903               	skipnz
 17308     1292  0AF3               	incf	i1___awmod@dividend+1,f
 17309     1293                     i1l4628:
 17310     1293  0873               	movf	i1___awmod@dividend+1,w
 17311     1294  00F1               	movwf	?i1___awmod+1
 17312     1295  0872               	movf	i1___awmod@dividend,w
 17313     1296  00F0               	movwf	?i1___awmod
 17314     1297  0008               	return
 17315     1298                     __end_ofi1___awmod:
 17316                           
 17317                           	psect	text99
 17318     1D05                     __ptext99:	
 17319 ;; *************** function i1_GenericQueue_IsFull *****************
 17320 ;; Defined at:
 17321 ;;		line 15 in file "generic_queue.c"
 17322 ;; Parameters:    Size  Location     Type
 17323 ;;  q               2    0[COMMON] PTR struct .
 17324 ;;		 -> keyboardScanCodeQueue(95), keyboard(100), 
 17325 ;; Auto vars:     Size  Location     Type
 17326 ;;		None
 17327 ;; Return value:  Size  Location     Type
 17328 ;;                  2    0[COMMON] int 
 17329 ;; Registers used:
 17330 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17331 ;; Tracked objects:
 17332 ;;		On entry : 1F/0
 17333 ;;		On exit  : 1F/0
 17334 ;;		Unchanged: 1F/0
 17335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17336 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17338 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;Total ram usage:        4 bytes
 17341 ;; Hardware stack levels used: 1
 17342 ;; This function calls:
 17343 ;;		Nothing
 17344 ;; This function is called by:
 17345 ;;		i1_GenericQueue_Enqueue
 17346 ;; This function uses a non-reentrant model
 17347 ;;
 17348                           
 17349     1D05                     i1_GenericQueue_IsFull:	
 17350                           ;psect for function i1_GenericQueue_IsFull
 17351                           
 17352                           
 17353                           ;generic_queue.c: 16:     return (q->size == 15);
 17354                           
 17355                           ;incstack = 0
 17356                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 17357     1D05  0870               	movf	i1GenericQueue_IsFull@q,w
 17358     1D06  3E5E               	addlw	94
 17359     1D07  0086               	movwf	6
 17360     1D08  3000               	movlw	0
 17361     1D09  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 17362     1D0A  0087               	movwf	7
 17363     1D0B  300F               	movlw	15
 17364     1D0C  0601               	xorwf	1,w
 17365     1D0D  1D03               	btfss	3,2
 17366     1D0E  2D11               	goto	u370_20
 17367     1D0F  3001               	movlw	1
 17368     1D10  2D12               	goto	u371_20
 17369     1D11                     u370_20:
 17370     1D11  3000               	movlw	0
 17371     1D12                     u371_20:
 17372     1D12  00F2               	movwf	??i1_GenericQueue_IsFull
 17373     1D13  01F3               	clrf	??i1_GenericQueue_IsFull+1
 17374     1D14  0872               	movf	??i1_GenericQueue_IsFull,w
 17375     1D15  00F0               	movwf	?i1_GenericQueue_IsFull
 17376     1D16  0873               	movf	??i1_GenericQueue_IsFull+1,w
 17377     1D17  00F1               	movwf	?i1_GenericQueue_IsFull+1
 17378     1D18  0008               	return
 17379     1D19                     __end_ofi1_GenericQueue_IsFull:
 17380                           
 17381                           	psect	text100
 17382     1C57                     __ptext100:	
 17383 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 17384 ;; Defined at:
 17385 ;;		line 19 in file "systime.c"
 17386 ;; Parameters:    Size  Location     Type
 17387 ;;		None
 17388 ;; Auto vars:     Size  Location     Type
 17389 ;;		None
 17390 ;; Return value:  Size  Location     Type
 17391 ;;                  4    0[COMMON] unsigned long 
 17392 ;; Registers used:
 17393 ;;		wreg
 17394 ;; Tracked objects:
 17395 ;;		On entry : 1E/3
 17396 ;;		On exit  : 1F/3
 17397 ;;		Unchanged: 0/0
 17398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17399 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;Total ram usage:        4 bytes
 17404 ;; Hardware stack levels used: 1
 17405 ;; This function calls:
 17406 ;;		Nothing
 17407 ;; This function is called by:
 17408 ;;		_PS2KeyboardClockInterrupt
 17409 ;; This function uses a non-reentrant model
 17410 ;;
 17411                           
 17412     1C57                     _SysTime_GetCurrentTimeMs:	
 17413                           ;psect for function _SysTime_GetCurrentTimeMs
 17414                           
 17415                           
 17416                           ;systime.c: 21:     return timeMs;
 17417                           
 17418                           ;incstack = 0
 17419                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 17420     1C57  0023               	movlb	3	; select bank3
 17421     1C58  083B               	movf	(_timeMs+3)^(0+384),w
 17422     1C59  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 17423     1C5A  083A               	movf	(_timeMs+2)^(0+384),w
 17424     1C5B  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 17425     1C5C  0839               	movf	(_timeMs+1)^(0+384),w
 17426     1C5D  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 17427     1C5E  0838               	movf	_timeMs^(0+384),w
 17428     1C5F  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 17429     1C60  0008               	return
 17430     1C61                     __end_of_SysTime_GetCurrentTimeMs:
 17431                           
 17432                           	psect	text101
 17433     1E72                     __ptext101:	
 17434 ;; *************** function _EUSART_Transmit_ISR *****************
 17435 ;; Defined at:
 17436 ;;		line 197 in file "mcc_generated_files/eusart.c"
 17437 ;; Parameters:    Size  Location     Type
 17438 ;;		None
 17439 ;; Auto vars:     Size  Location     Type
 17440 ;;		None
 17441 ;; Return value:  Size  Location     Type
 17442 ;;                  1    wreg      void 
 17443 ;; Registers used:
 17444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17445 ;; Tracked objects:
 17446 ;;		On entry : 1F/3
 17447 ;;		On exit  : 1E/0
 17448 ;;		Unchanged: 0/0
 17449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17453 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;Total ram usage:        1 bytes
 17455 ;; Hardware stack levels used: 1
 17456 ;; This function calls:
 17457 ;;		Nothing
 17458 ;; This function is called by:
 17459 ;;		_EUSART_Initialize
 17460 ;;		_INTERRUPT_InterruptManager
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464     1E72                     _EUSART_Transmit_ISR:	
 17465                           ;psect for function _EUSART_Transmit_ISR
 17466                           
 17467                           
 17468                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 17469                           
 17470                           ;incstack = 0
 17471                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17472     1E72  3008               	movlw	8
 17473     1E73  0020               	movlb	0	; select bank0
 17474     1E74  026D               	subwf	_eusartTxBufferRemaining,w
 17475     1E75  1803               	skipnc
 17476     1E76  2E8F               	goto	i1l305
 17477                           
 17478                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 17479     1E77  0022               	movlb	2	; select bank2
 17480     1E78  0848               	movf	_eusartTxTail^(0+256),w
 17481     1E79  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 17482     1E7A  0086               	movwf	6
 17483     1E7B  3001               	movlw	1	; select bank3/4
 17484     1E7C  0087               	movwf	7
 17485     1E7D  0801               	movf	1,w
 17486     1E7E  0023               	movlb	3	; select bank3
 17487     1E7F  009A               	movwf	26	;volatile
 17488     1E80  3001               	movlw	1
 17489     1E81  00F0               	movwf	??_EUSART_Transmit_ISR
 17490     1E82  0870               	movf	??_EUSART_Transmit_ISR,w
 17491     1E83  0022               	movlb	2	; select bank2
 17492     1E84  07C8               	addwf	_eusartTxTail^(0+256),f	;volatile
 17493                           
 17494                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 17495     1E85  3008               	movlw	8
 17496     1E86  0248               	subwf	_eusartTxTail^(0+256),w
 17497     1E87  1803               	btfsc	3,0
 17498                           
 17499                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 17500     1E88  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
 17501                           
 17502                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 17503     1E89  3001               	movlw	1
 17504     1E8A  00F0               	movwf	??_EUSART_Transmit_ISR
 17505     1E8B  0870               	movf	??_EUSART_Transmit_ISR,w
 17506     1E8C  0020               	movlb	0	; select bank0
 17507     1E8D  07ED               	addwf	_eusartTxBufferRemaining,f	;volatile
 17508                           
 17509                           ;mcc_generated_files/eusart.c: 209:     }
 17510     1E8E  0008               	return
 17511     1E8F                     i1l305:	
 17512                           ;mcc_generated_files/eusart.c: 210:     else
 17513                           
 17514                           
 17515                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 17516     1E8F  0021               	movlb	1	; select bank1
 17517     1E90  1211               	bcf	17,4	;volatile
 17518     1E91  0008               	return
 17519     1E92                     __end_of_EUSART_Transmit_ISR:
 17520                           
 17521                           	psect	text102
 17522     10DF                     __ptext102:	
 17523 ;; *************** function _EUSART_Receive_ISR *****************
 17524 ;; Defined at:
 17525 ;;		line 216 in file "mcc_generated_files/eusart.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;		None
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;		None
 17530 ;; Return value:  Size  Location     Type
 17531 ;;                  1    wreg      void 
 17532 ;; Registers used:
 17533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17534 ;; Tracked objects:
 17535 ;;		On entry : 1F/3
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17543 ;;Total ram usage:        0 bytes
 17544 ;; Hardware stack levels used: 1
 17545 ;; Hardware stack levels required when called: 2
 17546 ;; This function calls:
 17547 ;;		NULL
 17548 ;;		_EUSART_DefaultErrorHandler
 17549 ;;		_EUSART_DefaultFramingErrorHandler
 17550 ;;		_EUSART_DefaultOverrunErrorHandler
 17551 ;;		_EUSART_RxDataHandler
 17552 ;; This function is called by:
 17553 ;;		_EUSART_Initialize
 17554 ;;		_INTERRUPT_InterruptManager
 17555 ;; This function uses a non-reentrant model
 17556 ;;
 17557                           
 17558     10DF                     _EUSART_Receive_ISR:	
 17559                           ;psect for function _EUSART_Receive_ISR
 17560                           
 17561                           
 17562                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 17563                           
 17564                           ;incstack = 0
 17565                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17566     10DF  0020               	movlb	0	; select bank0
 17567     10E0  086C               	movf	_eusartRxHead,w	;volatile
 17568     10E1  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17569     10E2  0086               	movwf	6
 17570     10E3  3001               	movlw	1	; select bank3/4
 17571     10E4  0087               	movwf	7
 17572     10E5  0181               	clrf	1
 17573                           
 17574                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 17575     10E6  0023               	movlb	3	; select bank3
 17576     10E7  1D1D               	btfss	29,2	;volatile
 17577     10E8  28F6               	goto	i1l5860
 17578                           
 17579                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17580     10E9  0020               	movlb	0	; select bank0
 17581     10EA  086C               	movf	_eusartRxHead,w	;volatile
 17582     10EB  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17583     10EC  0086               	movwf	6
 17584     10ED  3001               	movlw	1	; select bank3/4
 17585     10EE  0087               	movwf	7
 17586     10EF  1481               	bsf	1,1
 17587                           
 17588                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 17589     10F0  0023               	movlb	3	; select bank3
 17590     10F1  0856               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 17591     10F2  008A               	movwf	10
 17592     10F3  0855               	movf	_EUSART_FramingErrorHandler^(0+384),w
 17593     10F4  000A               	callw
 17594     10F5  3190               	pagesel	$
 17595     10F6                     i1l5860:
 17596                           
 17597                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 17598     10F6  0023               	movlb	3	; select bank3
 17599     10F7  1C9D               	btfss	29,1	;volatile
 17600     10F8  2906               	goto	i1l5866
 17601                           
 17602                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17603     10F9  0020               	movlb	0	; select bank0
 17604     10FA  086C               	movf	_eusartRxHead,w	;volatile
 17605     10FB  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17606     10FC  0086               	movwf	6
 17607     10FD  3001               	movlw	1	; select bank3/4
 17608     10FE  0087               	movwf	7
 17609     10FF  1501               	bsf	1,2
 17610                           
 17611                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 17612     1100  0023               	movlb	3	; select bank3
 17613     1101  0854               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 17614     1102  008A               	movwf	10
 17615     1103  0853               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 17616     1104  000A               	callw
 17617     1105  3190               	pagesel	$
 17618     1106                     i1l5866:
 17619                           
 17620                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 17621     1106  0020               	movlb	0	; select bank0
 17622     1107  086C               	movf	_eusartRxHead,w	;volatile
 17623     1108  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17624     1109  0086               	movwf	6
 17625     110A  3001               	movlw	1	; select bank3/4
 17626     110B  0087               	movwf	7
 17627     110C  0801               	movf	1,w
 17628     110D  1903               	btfsc	3,2
 17629     110E  2916               	goto	i1l5870
 17630                           
 17631                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 17632     110F  0023               	movlb	3	; select bank3
 17633     1110  0852               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 17634     1111  008A               	movwf	10
 17635     1112  0851               	movf	_EUSART_ErrorHandler^(0+384),w
 17636     1113  000A               	callw
 17637     1114  3190               	pagesel	$
 17638                           
 17639                           ;mcc_generated_files/eusart.c: 233:     } else {
 17640     1115  0008               	return
 17641     1116                     i1l5870:
 17642                           
 17643                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 17644     1116  319D  256F         	fcall	_EUSART_RxDataHandler
 17645     1118  0008               	return
 17646     1119                     __end_of_EUSART_Receive_ISR:
 17647                           
 17648                           	psect	text103
 17649     1BEF                     __ptext103:	
 17650 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17651 ;; Defined at:
 17652 ;;		line 252 in file "mcc_generated_files/eusart.c"
 17653 ;; Parameters:    Size  Location     Type
 17654 ;;		None
 17655 ;; Auto vars:     Size  Location     Type
 17656 ;;		None
 17657 ;; Return value:  Size  Location     Type
 17658 ;;                  1    wreg      void 
 17659 ;; Registers used:
 17660 ;;		None
 17661 ;; Tracked objects:
 17662 ;;		On entry : 1F/3
 17663 ;;		On exit  : 1F/3
 17664 ;;		Unchanged: 0/0
 17665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;Total ram usage:        0 bytes
 17671 ;; Hardware stack levels used: 1
 17672 ;; This function calls:
 17673 ;;		Nothing
 17674 ;; This function is called by:
 17675 ;;		_EUSART_Initialize
 17676 ;;		_EUSART_Receive_ISR
 17677 ;; This function uses a non-reentrant model
 17678 ;;
 17679                           
 17680     1BEF                     _EUSART_DefaultOverrunErrorHandler:	
 17681                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17682                           
 17683                           
 17684                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 17685                           
 17686                           ;incstack = 0
 17687                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17688     1BEF  121D               	bcf	29,4	;volatile
 17689                           
 17690                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 17691     1BF0  161D               	bsf	29,4	;volatile
 17692     1BF1  0008               	return
 17693     1BF2                     __end_of_EUSART_DefaultOverrunErrorHandler:
 17694                           
 17695                           	psect	text104
 17696     1BE9                     __ptext104:	
 17697 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17698 ;; Defined at:
 17699 ;;		line 250 in file "mcc_generated_files/eusart.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;		None
 17702 ;; Auto vars:     Size  Location     Type
 17703 ;;		None
 17704 ;; Return value:  Size  Location     Type
 17705 ;;                  1    wreg      void 
 17706 ;; Registers used:
 17707 ;;		None
 17708 ;; Tracked objects:
 17709 ;;		On entry : 1F/3
 17710 ;;		On exit  : 1F/3
 17711 ;;		Unchanged: 1E/0
 17712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;Total ram usage:        0 bytes
 17718 ;; Hardware stack levels used: 1
 17719 ;; This function calls:
 17720 ;;		Nothing
 17721 ;; This function is called by:
 17722 ;;		_EUSART_Initialize
 17723 ;;		_EUSART_Receive_ISR
 17724 ;; This function uses a non-reentrant model
 17725 ;;
 17726                           
 17727     1BE9                     _EUSART_DefaultFramingErrorHandler:	
 17728                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17729                           
 17730                           
 17731                           ;incstack = 0
 17732                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17733     1BE9  0008               	return
 17734     1BEA                     __end_of_EUSART_DefaultFramingErrorHandler:
 17735                           
 17736                           	psect	text105
 17737     1BEC                     __ptext105:	
 17738 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17739 ;; Defined at:
 17740 ;;		line 260 in file "mcc_generated_files/eusart.c"
 17741 ;; Parameters:    Size  Location     Type
 17742 ;;		None
 17743 ;; Auto vars:     Size  Location     Type
 17744 ;;		None
 17745 ;; Return value:  Size  Location     Type
 17746 ;;                  1    wreg      void 
 17747 ;; Registers used:
 17748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17749 ;; Tracked objects:
 17750 ;;		On entry : 1F/3
 17751 ;;		On exit  : 1F/3
 17752 ;;		Unchanged: 0/0
 17753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17758 ;;Total ram usage:        0 bytes
 17759 ;; Hardware stack levels used: 1
 17760 ;; Hardware stack levels required when called: 1
 17761 ;; This function calls:
 17762 ;;		_EUSART_RxDataHandler
 17763 ;; This function is called by:
 17764 ;;		_EUSART_Initialize
 17765 ;;		_EUSART_Receive_ISR
 17766 ;; This function uses a non-reentrant model
 17767 ;;
 17768                           
 17769     1BEC                     _EUSART_DefaultErrorHandler:	
 17770                           ;psect for function _EUSART_DefaultErrorHandler
 17771                           
 17772                           
 17773                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 17774                           
 17775                           ;incstack = 0
 17776                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17777     1BEC  319D  256F         	fcall	_EUSART_RxDataHandler
 17778     1BEE  0008               	return
 17779     1BEF                     __end_of_EUSART_DefaultErrorHandler:
 17780                           
 17781                           	psect	text106
 17782     1D6F                     __ptext106:	
 17783 ;; *************** function _EUSART_RxDataHandler *****************
 17784 ;; Defined at:
 17785 ;;		line 240 in file "mcc_generated_files/eusart.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;		None
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;                  1    wreg      void 
 17792 ;; Registers used:
 17793 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17794 ;; Tracked objects:
 17795 ;;		On entry : 1C/0
 17796 ;;		On exit  : 1F/3
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17801 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17802 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17803 ;;Total ram usage:        1 bytes
 17804 ;; Hardware stack levels used: 1
 17805 ;; This function calls:
 17806 ;;		Nothing
 17807 ;; This function is called by:
 17808 ;;		_EUSART_Receive_ISR
 17809 ;;		_EUSART_DefaultErrorHandler
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813     1D6F                     _EUSART_RxDataHandler:	
 17814                           ;psect for function _EUSART_RxDataHandler
 17815                           
 17816                           
 17817                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 17818                           
 17819                           ;incstack = 0
 17820                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17821     1D6F  0020               	movlb	0	; select bank0
 17822     1D70  086C               	movf	_eusartRxHead,w
 17823     1D71  3EA8               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17824     1D72  0086               	movwf	6
 17825     1D73  3001               	movlw	1	; select bank3/4
 17826     1D74  0087               	movwf	7
 17827     1D75  0023               	movlb	3	; select bank3
 17828     1D76  0819               	movf	25,w	;volatile
 17829     1D77  0081               	movwf	1
 17830     1D78  3001               	movlw	1
 17831     1D79  00F0               	movwf	??_EUSART_RxDataHandler
 17832     1D7A  0870               	movf	??_EUSART_RxDataHandler,w
 17833     1D7B  0020               	movlb	0	; select bank0
 17834     1D7C  07EC               	addwf	_eusartRxHead,f	;volatile
 17835                           
 17836                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17837     1D7D  3008               	movlw	8
 17838     1D7E  026C               	subwf	_eusartRxHead,w
 17839     1D7F  1803               	btfsc	3,0
 17840                           
 17841                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 17842     1D80  01EC               	clrf	_eusartRxHead	;volatile
 17843                           
 17844                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 17845     1D81  3001               	movlw	1
 17846     1D82  00F0               	movwf	??_EUSART_RxDataHandler
 17847     1D83  0870               	movf	??_EUSART_RxDataHandler,w
 17848     1D84  0023               	movlb	3	; select bank3
 17849     1D85  07DF               	addwf	_eusartRxCount^(0+384),f	;volatile
 17850     1D86  0008               	return
 17851     1D87                     __end_of_EUSART_RxDataHandler:
 17852     007E                     btemp	set	126	;btemp
 17853     007E                     int$flags	set	126
 17854     007E                     wtemp0	set	126
 17855     232D                     
 17856                           	psect	config
 17857                           
 17858                           ;Config register CONFIG1 @ 0x8007
 17859                           ;	Oscillator Selection Bits
 17860                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 17861                           ;	Watchdog Timer Enable
 17862                           ;	WDTE = OFF, WDT disabled
 17863                           ;	Power-up Timer Enable
 17864                           ;	PWRTE = OFF, PWRT disabled
 17865                           ;	MCLR Pin Function Select
 17866                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 17867                           ;	Flash Program Memory Code Protection
 17868                           ;	CP = OFF, Program memory code protection is disabled
 17869                           ;	Brown-out Reset Enable
 17870                           ;	BOREN = ON, Brown-out Reset enabled
 17871                           ;	Clock Out Enable
 17872                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 17873                           ;	Internal/External Switchover Mode
 17874                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 17875                           ;	Fail-Safe Clock Monitor Enable
 17876                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 17877     8007                     	org	32775
 17878     8007  3FE4               	dw	16356
 17879                           
 17880                           ;Config register CONFIG2 @ 0x8008
 17881                           ;	Flash Memory Self-Write Protection
 17882                           ;	WRT = OFF, Write protection off
 17883                           ;	CPU System Clock Selection Bit
 17884                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 17885                           ;	USB Low Speed Clock Selection bit
 17886                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 17887                           ;	PLL Multiplier Selection Bit
 17888                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 17889                           ;	PLL Enable Bit
 17890                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 17891                           ;	Stack Overflow/Underflow Reset Enable
 17892                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 17893                           ;	Brown-out Reset Voltage Selection
 17894                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 17895                           ;	Low-Power Brown Out Reset
 17896                           ;	LPBOR = OFF, Low-Power BOR is disabled
 17897                           ;	Low-Voltage Programming Enable
 17898                           ;	LVP = ON, Low-voltage programming enabled
 17899     8008                     	org	32776
 17900     8008  3FCF               	dw	16335

Data Sizes:
    Strings     9
    Constant    601
    Data        0
    BSS         182
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     67      72
    BANK2            79     36      79
    BANK3            80      0      73
    BANK4            80      0      50
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           13      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), keyboardScanCode(BANK3[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2KeyboardClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2KeyboardClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2KeyboardDataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2KeyboardDataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 100
		 -> keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardTasks@usbHidCode(BANK1[1]), APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2877(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 100
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[100]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 100
		 -> APP_KeyboardTasks@usbHidCode_2876(BANK1[1]), APP_KeyboardTasks@usbHidCode_2878(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[100]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    S2674$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2674$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S3499$buffer	PTR unsigned char  size(2) Largest target is 0

    S3499$source	PTR const unsigned char  size(2) Largest target is 0

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    snprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_snprintf(BANK1[2]), 

    snprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    snprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@scanCodeStr(BANK2[10]), 

    sp__memcpy	PTR void  size(2) Largest target is 100
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[100]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[28]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2KeyboardClockInterrupt
    _PS2KeyboardClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_snprintf
    _snprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    _ctoa->_fputc
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _APP_KeyboardTasks->_GenericQueue_CopyToArray
    _APP_KeyboardTasks->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _GenericQueue_CopyToArray->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_snprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   69390
                                             65 BANK1      2     2      0
                                             17 BANK2     19    19      0
                  _APP_KeyboardTasks
                       _EUSART_Write
                 _EUSART_is_tx_ready
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
                           _snprintf
 ---------------------------------------------------------------------------------
 (1) _snprintf                                            28    20      8   13505
                                             54 BANK1     11     3      8
                                              0 BANK2     17    17      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3   12825
                                             47 BANK1      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           15    13      2   12477
                                             32 BANK1     15    13      2
                               _ctoa
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                10     8      2    3919
                                             22 BANK1     10     8      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    3498
                                             15 BANK1      7     4      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     126
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1    1641
                                              8 BANK1      7     6      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2    4895
                                             13 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 9     7      2    1622
                                              8 BANK1      9     7      2
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1294
                                              0 BANK1      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0   10141
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    9680
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                   11    11      0   42724
                                             33 BANK1     11    11      0
    _APP_KeyboardProcessOutputReport
              _GenericQueue_Contains
           _GenericQueue_CopyToArray
               _GenericQueue_Enqueue
                _GenericQueue_Remove
            _PS2USB_ScanCodeToUSBHID
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     742
                                              0 BANK1      8     2      6
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Remove                                  9     6      3   10907
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Enqueue                                 7     3      4    9870
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    9506
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Contains                                8     5      3    9197
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (3) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    4590
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2936
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0   31780
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (10) _USBDeviceTasks                                      2     2      0   30592
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (11) i1_USBDeviceInit                                     8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (11) _USBWakeFromSuspend                                  1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBSuspend                                          1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBStallHandler                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBIncrement1msInternalTimers                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPService                                    1     1      0   17997
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfSetupHandler                              1     1      0   17469
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (13) _USBCtrlEPServiceComplete                            4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (13) _USBCheckStdRequest                                  0     0      0   13292
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USBStdSetCfgHandler                                 5     5      0    4605
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (15) i1_memset                                            8     2      6     285
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (14) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (14) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USER_USB_CALLBACK_EVENT_HANDLER                     6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (12) _USBCheckHIDRequest                                  0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetReportHandler                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetIdleRateHandler                          4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _APP_KeyboardInit                                    0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (13) i1_USBTransferOnePacket                             11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Init                                 4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (13) _USBEnableEndpoint                                   6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (14) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfOutHandler                                4     4      0     114
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (13) _USBCtrlTrfRxService                                 6     6      0     114
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfInHandler                                 5     5      0     115
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBHIDCBSetReportComplete                           0     0      0       0
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (15) i1_APP_KeyboardProcessOutputReport                   0     0      0       0
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _SysTimeInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0    1188
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF5_ISR                                          0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
           _PS2KeyboardDataInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2KeyboardDataInterrupt                            0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _IOCAF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_ISR                                          0     0      0    1188
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
          _PS2KeyboardClockInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2KeyboardClockInterrupt                           4     4      0    1188
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Enqueue                              7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) i1_memcpy                                           11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (14) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (14) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (14) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _SysTime_GetCurrentTimeMs                            4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (12) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
     _GenericQueue_Contains
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
         ___awmod (ARG)
       _memcmp
         ___wmul (ARG)
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
         ___awmod (ARG)
         ___bmul (ARG)
         ___wmul (ARG)
     _GenericQueue_Enqueue
       _GenericQueue_IsFull
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_Remove
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcmp
       _memcpy
     _PS2USB_ScanCodeToUSBHID
     _USBTransferOnePacket
     _memset
   _EUSART_Write
   _EUSART_is_tx_ready
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _snprintf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _fputc
             _putch
         _fputc
         _read_prec_or_width
           ___wmul
         _xtoa
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2KeyboardClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2KeyboardDataInterrupt *
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     43      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F     24      4F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      49      11       91.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      32      13       62.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     140      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               D      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon May 06 18:13:12 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1C4E  
                                   _USB_SD_Ptr 18D3                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 1E39                                  _USBDeviceInit 0DE5  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0A29  
             __end_of_USBHIDCBSetReportHandler 1CC3                               i1___wmul@product 0074  
         USER_USB_CALLBACK_EVENT_HANDLER@event 0050           USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052  
                                          l110 1CCC                    __end_of_USBStdGetDscHandler 09AE  
                                          l541 1DDF                                            l299 1F8E  
                                          _BDT 0020                                            l927 0207  
                                          l919 0089                       _GenericQueue_CopyToArray 152A  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
            __end_of_PS2KeyboardClockInterrupt 1000                                            _pad 1210  
                                   _USBSuspend 1D9F                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1CE1  
                                          wreg 0009                                 _USBDeviceTasks 06C3  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1D19  
                               _USBDeviceState 006B             __end_of_IOCAF5_SetInterruptHandler 1C1E  
                   _IOCAF5_SetInterruptHandler 1C16                              main@scanCodeValid 0169  
                        ??_USBCtrlTrfRxService 0074                            _GenericQueue_Remove 05CF  
                     USBEnableEndpoint@options 0077                                           l1234 1E0B  
                                         l1163 1533                                           l1801 04FD  
                                         l1803 0509                     USBConfigureEndpoint@handle 0076  
                                         l5120 12AF                                           l5112 12A9  
                                         l1753 1220                                           l5122 12BB  
                                         l5130 12D0                                           l4170 080C  
                                         l5108 12A2                                           l1772 14B1  
                                         l4260 1D45                                           l1756 123E  
                                         l5134 12D8                                           l5126 12C7  
                                         l4174 0833                                           l4254 1EF5  
                                         l4262 1D51                                           l5312 0DF0  
                                         l1769 1493                                           l5082 10D1  
                                         l5074 10C6                                           l5154 050B  
                                         l5076 10AF                                           l5092 1CD8  
                                         l5404 1DE4                                           l5340 0E27  
                                         l5164 0534                                           l5156 051F  
                                         l5078 10CA                                           l5502 0B8A  
                                         l5182 058B                                           l5190 05A0  
                                         l5174 0561                                           ?_pad 00B7  
                                         l4544 1E05                                           l5088 1CD2  
                                         l5504 0BA2                                           l5328 0E09  
                                         l4560 121B                                           l5362 0E40  
                                         l4810 14C0                                           l4572 1248  
                                         l4820 17A7                                           l5188 0597  
                                         l5196 05AB                                           l5604 1FAF  
                                         l4910 1F63                                           l5526 109B  
                                         l4806 1495                                           l5606 1FC7  
                                         l5544 0689                                           l6424 1DBB  
                                         l6600 0164                                           l4568 1222  
                                         l5562 1518                                           l6610 0188  
                                         l5548 06B3                                           l5492 0B43  
                                         l5484 0B33                                           l6620 01B3  
                                         l4860 1434                                           l4828 17B5  
                                         l5566 1528                                           l6614 0196  
                                         l6606 017A                                           l4790 1475  
                                         l4838 17CE                                           l5910 0C62  
                                         l5902 0C40                                           l6632 01DD  
                                         l6624 01C1                                           l5824 1F83  
                                         l4792 147E                                           l4864 1450  
                                         l4848 17F0                                           l5920 0C9D  
                                         l6618 01A4                                           l6570 00EA  
                                         l6562 00BE                                           l4866 1462  
                                         l5922 0CA2                                           l6636 01EB  
                                         l6628 01CF                                           l6556 009E  
                                         l4796 148E                                           l5924 0CAB  
                                         l5908 0C59                                           l6654 0227  
                                         l6646 022B                                           l6582 0112  
                                         l6566 00D3                                           l5838 1FA4  
                                         l6742 0BE2                                           l6734 0BD4  
                                         l6664 0257                                           l6592 013D  
                                         l6672 0285                                           l6736 0BD5  
                                         l6728 0BC8                                           l6658 023E  
                                         l6586 0120                                           l5890 1E52  
                                         l6754 0C0C                                           l6676 029E  
                                         l6596 014B                                           l6588 012F  
                                         l5892 1E53                                           l6748 0C10  
                                         l6756 0C26                                           STR_1 18CA  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u3155 0831  
                                         u4035 149F                                           u4065 17D8  
                                         u4250 1CFD                                           u4260 1CFE  
                                         u4095 17EB                                           u4360 1D25  
                                         u5240 1C0C                                           u4370 1D26  
                                         u3635 1E0C                                           u3645 1E11  
                                         u4615 0E0C                                           u4465 12B2  
                                         u4485 12C1                                           u3685 122C  
                                         u4495 12C8                                           u6415 00C7  
                                         u5395 0C90                          ??_USBCtrlTrfTxService 0070  
                                         u6395 0093                                           u6820 0BC5  
                                         _UCFG 0E91                                           u6680 0265  
                                         u6665 0252                                           _UEP0 0E98  
                                         _UEP1 0E99                                           _UEIE 0E97  
                                         _UEIR 0E93                                           _UCON 0E8E  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 0146                                           _dbuf 0232  
                                         _ctoa 1467                                           _main 0BA7  
                                         _prec 01C9                                           _nout 01C7  
                                         pad@i 00BB                                           pad@p 00B8  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 1DCF                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           _xtoa 1795  
                                         start 003D                                   _SysTime_Init 1C6C  
                         _GenericQueue_Dequeue 0796                           _GenericQueue_IsEmpty 1CF2  
                         ??_USBCheckHIDRequest 0074                           ?_GenericQueue_IsFull 00A8  
                   __end_of_USBCheckStdRequest 1795                       _PS2KeyboardDataInterrupt 1BF8  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 012E                           _GenericQueue_Enqueue 16C2  
                          USBDeviceInit@i_1369 00AE                      ??_USBStdFeatureReqHandler 0056  
                         ?_GenericQueue_Remove 00C0                       GenericQueue_Dequeue@item 00C2  
                  APP_KeyboardTasks@usbHidCode 00CB                       ??_USBStdGetStatusHandler 0070  
                                        ??_pad 00BA                                 ?_USBDeviceInit 0070  
                                ?_EUSART_Write 0070                  __end_of_OSCILLATOR_Initialize 1CD0  
              __end_of_PS2Keyboard_GetScanCode 1E55                                          ?_ctoa 00B0  
                                        ?_main 0070                                __end_of___awmod 12DD  
                                        ?_xtoa 00BE                         __end_of_USBDeviceTasks 0796  
                                        _T2CON 001C                      ?_USBCtrlEPServiceComplete 0070  
                                        i1l141 000D                                          i1l144 0019  
                                        i1l305 1E8F                                          i1l153 003B  
                                        i1l146 0026                                          i1l148 0033  
                                        i1l502 0742                                          i1l503 0793  
                                        i1l504 0790                                     i1memcpy@d1 0076  
                                        i1l631 13BB                                          i1l703 1759  
                                        i1l634 1401                                          i1l635 13C4  
                                        i1l636 13C7                                          i1l492 06E2  
                                        i1l910 1388                                          i1l566 0D00  
                                        i1l680 0A14                                          i1l728 0394  
                                        i1l594 0EA4                                          i1l818 118F  
                                        i1l498 071A                                          i1l579 15A3  
                                        i1l764 0AA6                                          i1l692 1794  
                                        i1l694 1732                                     i1memcpy@s1 0078  
                                        _UADDR 0E96                                          _RCREG 0199  
                                        _RCSTA 019D                                   vfpfcnvrt@fmt 00C8  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _USTAT 0E8F  
                                        _TXREG 019A                                   main@scanCode 016D  
                                        _TXSTA 019E                                   _outputReport 0120  
           __end_of_USBHIDCBSetIdleRateHandler 1CB6                     _USBHIDCBSetIdleRateHandler 1CA9  
              __end_of_USBCtrlEPAllowDataStage 165A                                          _sd000 18D9  
                                        _sd001 183F                                          _sd002 189C  
                             __end_of_TMR2_ISR 1C83                 ?_USBIncrement1msInternalTimers 0070  
                               i1___awmod@sign 0076                        __end_of_PIN_MANAGER_IOC 1C6C  
                                        _flags 0134                        _PS2USB_ScanCodeToUSBHID 1086  
                               _WDT_Initialize 1BF5                            read_prec_or_width@c 00BA  
                                        _errno 01CB                            read_prec_or_width@n 00BB  
                                        _fputc 0803                                          _fputs 1EF2  
                                        pad@fp 00BD                                          _width 012C  
                                        ctoa@c 00B0                                          _putch 1085  
                                        ctoa@l 00B4                                          ctoa@w 00B6  
                                        main@i 016B                                          pclath 000A  
                                _snprintf$3536 014C                               __end_ofi1___wmul 1E03  
                                        status 0003                            i1___wmul@multiplier 0070  
                                        wtemp0 007E                                          xtoa@c 00C5  
                                        xtoa@d 00BE                                          xtoa@i 00C6  
                                        xtoa@p 00C2                                          xtoa@w 00C3  
                             __end_ofi1_memcpy 1F5B                                _TMR2_StartTimer 0800  
                             __end_ofi1_memset 1D9F                          ?_GenericQueue_Dequeue 00C0  
                        ?_GenericQueue_IsEmpty 00A8                          ??_GenericQueue_IsFull 00AA  
                         __end_of_ps2ExtUsbMap 04D5                          _GenericQueue_Contains 14C8  
              PS2USB_ScanCodeToUSBHID@scanCode 00A8                          ?_GenericQueue_Enqueue 00C0  
                        ??_GenericQueue_Remove 00C3                                __initialization 003F  
                                 __end_of_ctoa 14C8                                   __end_of_main 0C2B  
                                 __end_of_xtoa 1800                                 ??_EUSART_Write 00A8  
                      __end_of_TMR2_Initialize 1CF2                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 00AA                                         ??_ctoa 00B2  
                     _TMR2_SetInterruptHandler 1C46                                         ??_main 00E9  
                __end_ofi1_GenericQueue_IsFull 1D19                                         ??_xtoa 00C0  
                              ?_USBDeviceTasks 0070                  GenericQueue_Init@element_size 00AA  
                                  ?_USBSuspend 0070                        _IOCAF4_InterruptHandler 01E7  
                              i1_USBDeviceInit 0D42                       _USBHIDCBSetReportHandler 1CB6  
                   __end_of_read_prec_or_width 1467                         __end_of_WDT_Initialize 1BF8  
    __end_of_EUSART_DefaultFramingErrorHandler 1BEA            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 1BE9  
                      __end_of_USBDeviceAttach 1DE8                     _EUSART_OverrunErrorHandler 01D3  
                                       ?_fputc 00A8                                         _ACTCON 039B  
                                       ?_fputs 00B0                                         _APFCON 011D  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1C57  
                                       i1l1234 1DF0                                         i1l4110 0A36  
                                       i1l4040 11C5                                         i1l4130 0A64  
                                       i1l4122 0A4E                                         i1l4052 1EA1  
                                       i1l4140 0A7E                                         i1l4116 0A42  
                                       i1l4124 0A59                                         i1l4038 11BD  
                                       i1l4150 0A92                                         i1l4216 159E  
                                       i1l4048 1E9A                                         i1l4080 0AC3  
                                       i1l4072 0AB3                                         i1l4136 0A70  
                                       i1l4128 0A61                                         i1l4090 0B0A  
                                       i1l4162 139D                                         i1l4146 0A8A  
                                       i1l4330 1638                                         i1l4228 15BF  
                                       i1l4236 15D5                                         i1l4092 0B22  
                                       i1l4420 09A1                                         i1l4238 15D9  
                                       i1l4246 15EF                                         i1l4190 1165  
                                       i1l4182 1154                                         i1l4502 0345  
                                       i1l4414 099B                                         i1l4406 0977  
                                       i1l4326 1625                                         i1l4520 0385  
                                       i1l4504 034C                                         i1l4416 099E  
                                       i1l4408 097A                                         i1l4602 125D  
                                       i1l4186 115F                                         i1l4194 1168  
                                       i1l4620 1282                                         i1l4188 1162  
                                       i1l4532 03B9                                         i1l4508 0357  
                                       i1l4436 13DC                                         i1l6204 1D8B  
                                       i1l4614 126A                                         i1l4606 1264  
                                       i1l4294 0873                                         i1l4534 03C1  
                                       i1l4518 0380                                         i1l4446 13F5  
                                       i1l6214 08CB                                         i1l5422 1E68  
                                       i1l4616 1276                                         i1l4624 128B  
                                       i1l4640 1F3D                                         i1l5248 1CA6  
                                       i1l4712 0EAC                                         i1l4528 039A  
                                       i1l4480 02F9                                         i1l4464 02CA  
                                       i1l6232 08ED                                         i1l5424 1E6F  
                                       i1l6330 0F67                                         i1l4714 0EC2  
                                       i1l4466 02CC                                         i1l4394 093E  
                                       i1l4628 1293                                         i1l4724 0EF7  
                                       i1l4492 032B                                         i1l4652 0CC5  
                                       i1l6412 1317                                         i1l5620 0D4D  
                                       i1l4582 1DEA                                         i1l6334 0F76  
                                       i1l4726 0F03                                         i1l4494 0335  
                                       i1l4486 0317                                         i1l4398 0948  
                                       i1l6254 0923                                         i1l6414 131A  
                                       i1l5454 1F2E                                         i1l6510 073B  
                                       i1l6502 0727                                         i1l6360 0FBB  
                                       i1l6352 0FA7                                         i1l6336 0F7B  
                                       i1l6280 174E                                         i1l6264 1738  
                                       i1l4656 0CC9                                         i1l5456 1F30  
                                       i1l6520 0748                                         i1l6338 0F7F  
                                       i1l4738 0F3D                                         i1l6290 1764  
                                       i1l6266 173B                                         i1l4674 0D0C  
                                       i1l4682 0D15                                         i1l6530 075F  
                                       i1l6364 0FC4                                         i1l6436 1C67  
                                       i1l6276 1748                                         i1l6268 173E  
                                       i1l5636 0D64                                         i1l6460 06DC  
                                       i1l6452 06CF                                         i1l6374 0FE0  
                                       i1l4942 1120                                         i1l6278 174B  
                                       i1l6294 1771                                         i1l5670 0D97  
                                       i1l6368 0FCB                                         i1l6384 0FE7  
                                       i1l5648 0D81                                         i1l6536 0778  
                                       i1l6480 06F8                                         i1l6378 0FE4  
                                       i1l6394 1C99                                         i1l4970 09CC  
                                       i1l4954 1151                                         i1l6538 0787  
                                       i1l6474 06F2                                         i1l5860 10F6  
                                       i1l4980 09F7                                         i1l6820 118A  
                                       i1l5870 1116                                         i1l6822 0FF1  
                                       i1l4990 0A25                                         i1l6486 070C  
                                       i1l4992 0A26                                         i1l4984 0A07  
                                       i1l4968 09C9                                         i1l6496 0720  
                                       i1l5866 1106                                         i1l6818 1170  
                                       u311_25 1392                                         u331_25 162F  
             APP_KeyboardTasks@usbHidCode_2876 00CE               APP_KeyboardTasks@usbHidCode_2877 00CC  
             APP_KeyboardTasks@usbHidCode_2878 00CF                     __end_of_EUSART_is_tx_ready 1C0E  
                                       u600_20 0FB6                                         u601_20 0FB7  
                                       u370_20 1D11                                         u371_20 1D12  
                                       u381_25 127C                                         u373_25 1DF1  
                                       u382_25 1283                                         u374_25 1DF6  
                                       u607_25 12E8                                         u296_25 1196  
                                       u393_25 0EA0                                         u297_25 119C  
                                       _OSCCON 0099                                         u298_25 11A4  
                                       u379_25 126D                                         u494_25 0D67  
                                       _PLLRDY 04D6                                  vfpfcnvrt@done 00D3  
                                  i1memcpy@tmp 0054                                         u598_24 0F8C  
                                       u598_25 0F8B                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                 i1USBTransferOnePacket@handle 0079                              _shortPacketStatus 0147  
                             _APP_KeyboardInit 136C                                USBDeviceTasks@i 0060  
                                 vfprintf@cfmt 00DC                    USBStdFeatureReqHandler@pUEP 0058  
                     USBTransferOnePacket@data 00A9                     USBCtrlTrfInHandler@lastDTS 0077  
                              ??_USBDeviceInit 00A8                                         ___bmul 1CD0  
                              _keyboardIsBreak 01DD                                         ___wmul 1E03  
                                    ??___awmod 00AC                              _USBEnableEndpoint 1E92  
                          _EUSART_Transmit_ISR 1E72                                         _memcmp 10A8  
                                       _memcpy 1F5B                           read_prec_or_width@ap 00B5  
                                       _memset 1DB7                                ___awmod@divisor 00A8  
                                       _timeMs 01B8                                ___awmod@counter 00AD  
                                       pad@buf 00B7                             ?_USBEnableEndpoint 0077  
                                       ctoa@fp 00B8                                         _strlen 1D42  
                  ??_PS2KeyboardClockInterrupt 005C                              __end_ofi1___awmod 1298  
                                       fputc@c 00A8                                         fputs@c 00B3  
                                       fputs@i 00B4                                         fputs@s 00B6  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 01CD                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D2                                         putch@c 0070  
                             __end_of_vfprintf 1FD0                        __end_of_TMR2_StartTimer 0803  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                             __end_of_snprintf 0CB4                                         xtoa@fp 00C1  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007C  
                                 ??_IOCAF5_ISR 0070                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 0069  
                            _SYSTEM_Initialize 1D2D                        __end_of__initialization 007B  
                   i1USBTransferOnePacket@data 0071                        ?i1_GenericQueue_Enqueue 0055  
                       ??_GenericQueue_Dequeue 00C3                         ??_GenericQueue_IsEmpty 00AA  
                       ?_GenericQueue_Contains 00BE                             ?_SYSTEM_Initialize 0070  
                       ??_GenericQueue_Enqueue 00C4                       GenericQueue_Enqueue@item 00C2  
         __end_of_EUSART_SetTxInterruptHandler 1C46                   _EUSART_SetTxInterruptHandler 1C3E  
                          ___bmul@multiplicand 00A8                        i1GenericQueue_Enqueue@q 0055  
                               __pcstackCOMMON 0070                     ??_GenericQueue_CopyToArray 00C3  
                    __end_of_USBEnableEndpoint 1EB2                                  __end_of_sd000 18DD  
                                __end_of_sd001 1873                                  __end_of_sd002 18B8  
                          ??_SYSTEM_Initialize 00B0                                      ?_TMR2_ISR 0070  
                              _active_protocol 01E4                                  __end_of_fputc 0851  
                                __end_of_fputs 1F13         __end_of_IOCAF4_DefaultInterruptHandler 1BEB  
               _IOCAF4_DefaultInterruptHandler 1BEA                        __end_ofi1_USBDeviceInit 0DE5  
                                __end_of_putch 1086                    __end_of_USBCtrlTrfInHandler 0A29  
                             ?_TMR2_Initialize 0070                              ?_PS2Keyboard_Init 0070  
                           __end_of_IOCAF4_ISR 1C9C                             __end_of_IOCAF5_ISR 1CA9  
                                    ?i1___wmul 0070                    __end_ofi1_GenericQueue_Init 1ED2  
                           ??_PS2Keyboard_Init 00AC                                 _OPTION_REGbits 0095  
                                    ?i1_memcpy 0076                                      ?i1_memset 0070  
                         _eusartRxStatusBuffer 01A0                    ?_IOCAF5_SetInterruptHandler 00A8  
              ??_EUSART_SetOverrunErrorHandler 00AA                       ??_USBCtrlTrfSetupHandler 005D  
                      _USBTicksSinceSuspendEnd 013B                i1GenericQueue_Init@element_size 0072  
                                _keyboardState 013A                               ?_USBDeviceAttach 0070  
                                      ??_fputc 00AB                      __end_of_SYSTEM_Initialize 1D42  
                                      ??_fputs 00B1                          ??_EUSART_Transmit_ISR 0070  
                       _USBStdGetStatusHandler 13B7                     i1GenericQueue_Enqueue@item 0057  
                                      ??_putch 00A8                     ??_PS2KeyboardDataInterrupt 0070  
               __end_ofi1_GenericQueue_Enqueue 16C2                                     __pbssBANK0 0061  
                                   __pbssBANK1 00EB                                     __pbssBANK2 0121  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                         __end_of_EUSART_Write 1FA7                      _PS2KeyboardClockInterrupt 0F44  
             ??_IOCAF5_DefaultInterruptHandler 0070                ?_IOCAF5_DefaultInterruptHandler 0070  
                                  _pBDTEntryIn 0061                        _IOCAF5_InterruptHandler 01E5  
             __end_of_USBCtrlEPServiceComplete 0D42                                     __pmaintext 0BA7  
                         USBCtrlTrfRxService@i 0078                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 01DB  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 18B8  
                             _USBCtrlEPService 12DD                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 0132                                     ??i1___wmul 0074  
                                      ?_strlen 00A8                    __end_of_USBCtrlTrfRxService 0F44  
                           _USBCheckStdRequest 172A                                  _eusartRxCount 01DF  
                            _configDescriptor1 1873                                     ??i1_memcpy 007C  
                                   ??i1_memset 0076                                   _ps2ExtUsbMap 03D6  
       APP_KeyboardTasks@TimeDeltaMilliseconds 00D0                    __end_of_USBCtrlTrfTxService 15F3  
                          _USBStdSetCfgHandler 08C3                    ?_USBHIDCBSetIdleRateHandler 0070  
                             main@hndlScanCode 016C                                        _OSCTUNE 0098  
                     ??_EUSART_SetErrorHandler 00AA                            ?_USBCheckStdRequest 0070  
                             ?_TMR2_StartTimer 0070                                        _UIEbits 0E92  
                                      _UIRbits 0E90                          GenericQueue_Dequeue@q 00C0  
                                 i1memset@dest 0070                       ??i1_USBTransferOnePacket 0074  
                        GenericQueue_IsEmpty@q 00A8                              __end_of_ps2UsbMap 1084  
              ??_USBIncrement1msInternalTimers 0070                           ?_USBStdSetCfgHandler 0070  
                            _APP_KeyboardTasks 007F                     ??_TMR2_SetInterruptHandler 00AA  
                            __end_of_hid_rpt01 183F                           ??_USBCheckStdRequest 007E  
                           ?_APP_KeyboardTasks 0070                                        ___awmod 1298  
                        GenericQueue_Enqueue@q 00C0                           i1GenericQueue_Init@q 0070  
                             ??_USBDeviceTasks 005F                     ??_USBHIDCBSetReportHandler 0070  
                            ??_USBStallHandler 0070                                      ?_vfprintf 00D7  
                             _keyboardIdleRate 01CF                                      ?_snprintf 00DE  
                             ?i1_USBDeviceInit 0070                      __end_of_configDescriptor1 189C  
                             _keyboardIsExtend 0135                                        __ptext1 0C2B  
                                      __ptext2 1FA7                                        __ptext3 04D5  
                                      __ptext4 1795                                        __ptext5 1210  
                                      __ptext6 1D42                                        __ptext7 1EF2  
                                      __ptext8 140C                                        __ptext9 1467  
                                      _inPipes 00EB                    _USBDeferOUTDataStagePackets 013C  
                          ??_APP_KeyboardTasks 00C9                          _OSCILLATOR_Initialize 1CC3  
                                 ??_USBSuspend 007D                                      _T2CONbits 001C  
                        read_prec_or_width@fmt 00BD                               _keyboardScanCode 01E1  
                             ___awmod@dividend 00AA                       ??_PIN_MANAGER_Initialize 00AA  
                                    _IOCAFbits 0393                       __end_of_APP_KeyboardInit 13B7  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                           __end_of_USB_CD_Ptr 18DF                                        clrloop0 1C84  
                     _SysTime_GetCurrentTimeMs 1C57                           end_of_initialization 007B  
                  __end_of_GenericQueue_IsFull 1D2D                             __end_of_USB_SD_Ptr 18D9  
                                      memcmp@l 00BB                                        memcmp@n 00B8  
                                      memcmp@r 00BD                              ?_SysTimeInterrupt 0070  
        __end_of_EUSART_SetOverrunErrorHandler 1C36                  _EUSART_SetOverrunErrorHandler 1C2E  
                                      memcpy@d 00BB                                        memcpy@n 00B9  
                                      memcpy@s 00BD                            _pBDTEntryEP0OutNext 0067  
                                      fputc@fp 00AA                    __end_of_GenericQueue_Remove 06C3  
                                      memset@c 00AA                                        memset@n 00AC  
                                      memset@p 00AE                                        fputs@fp 00B0  
                              _USB1msTickCount 01C0                        _PS2Keyboard_GetScanCode 1E39  
                           _read_prec_or_width 140C                       ?_USBStdFeatureReqHandler 0070  
                           ??_SysTimeInterrupt 0070                      __end_of_APP_KeyboardTasks 02B6  
                            _EUSART_Initialize 11CF                          ??_USBStdSetCfgHandler 007D  
                           ?_EUSART_Initialize 0070                             __end_of_USBSuspend 1DB7  
                            __end_of_vfpfcnvrt 05CF                        _USBCtrlEPAllowDataStage 15F3  
                                    _RCSTAbits 019D                            ?_read_prec_or_width 00B5  
                             vfpfcnvrt@convarg 00CE                             _EUSART_is_tx_ready 1C06  
                                   _prevTimeMs 01BC                                     ??_vfprintf 00DA  
                     _USBCtrlEPServiceComplete 0CB4                          i1___wmul@multiplicand 0072  
                                   ??_snprintf 00E6                                        strlen@a 00AB  
                                      strlen@s 00AC                     _USBStatusStageEnabledFlag1 013F  
                   _USBStatusStageEnabledFlag2 013E                            ??_EUSART_Initialize 00AA  
                             ??_WDT_Initialize 00A8                 ??_EUSART_SetTxInterruptHandler 00AA  
                           USBEnableEndpoint@p 007A                                      _PORTAbits 000C  
                          ?_EUSART_is_tx_ready 0070                          i1_GenericQueue_IsFull 1D05  
                           _BothEP0OutUOWNsSet 0142                      USBStdSetCfgHandler@i_2097 0058  
                                    i1___awmod 1253                           ??_read_prec_or_width 00B7  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 1ED2                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006E                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 1210                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0BA7                           ??_EUSART_is_tx_ready 00A8  
                                   main@strLen 016A                            ??_GenericQueue_Init 00AC  
                        i1USBDeviceInit@i_1369 0076                         _USBCtrlTrfSetupHandler 1324  
         __end_of_TMR2_DefaultInterruptHandler 1085                   _TMR2_DefaultInterruptHandler 1084  
                               __end_of___bmul 1CE1                          __end_of_USBDeviceInit 0E91  
        __end_of_USBIncrement1msInternalTimers 1D6F                  _USBIncrement1msInternalTimers 1D58  
           __end_of_EUSART_DefaultErrorHandler 1BEF                     _EUSART_DefaultErrorHandler 1BEC  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                  vfpfcnvrt@ap 00C9                                      i1memcpy@s 0052  
                                  vfpfcnvrt@cp 00D4                                    vfpfcnvrt@fp 00D6  
                               __end_of___wmul 1E1E                                      i1memset@c 0072  
                                    i1memset@n 0074                                      i1memset@p 0076  
                                 _EUSART_Write 1F81                                 __end_of_memcmp 10DF  
                               __end_of_memcpy 1F81                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 1DCF                     ?_USBHIDCBSetReportComplete 0070  
                            _USBBusIsSuspended 0144                                 __end_of_strlen 1D58  
                          start_initialization 003F                        ?_USBStdGetStatusHandler 0070  
                USBCtrlTrfRxService@byteToRead 0079                      __end_of_GenericQueue_Init 1EF2  
                                  __end_of_pad 1253                                     ?i1___awmod 0070  
                               _oldInputReport 022A   EUSART_SetRxInterruptHandler@interruptHandler 00A8  
 EUSART_SetTxInterruptHandler@interruptHandler 00A8                   __end_of_USBConfigureEndpoint 11CF  
              __end_of_USBStdFeatureReqHandler 03D6                      ??_PS2Keyboard_GetScanCode 00C7  
            __end_of_USBCtrlEPAllowStatusStage 08C3                       __end_of_USBCtrlEPService 1324  
                                ?_SysTime_Init 0070                      ??_USBCtrlEPAllowDataStage 0073  
                               USBDeviceInit@i 00AF                                 USBDeviceInit@p 00AC  
               ?_EUSART_SetOverrunErrorHandler 00A8                         _pBDTEntryEP0OutCurrent 006A  
                                  vfprintf@fmt 00D7                        USBTransferOnePacket@dir 00A8  
                      USBTransferOnePacket@len 00AB                     _EUSART_FramingErrorHandler 01D5  
                                     ??___bmul 00A9                                       ??___wmul 00B3  
                       _EUSART_SetErrorHandler 1C1E                            _USBStdGetDscHandler 0935  
                           i1___awmod@dividend 0072                                       ??_memcmp 00BA  
                                     ??_memcpy 00BB                                       ??_memset 00AE  
                ?_TMR2_DefaultInterruptHandler 0070                       ?_PS2USB_ScanCodeToUSBHID 0070  
                                   memset@dest 00A8                PS2Keyboard_GetScanCode@scanCode 00C7  
                       i1_USBTransferOnePacket 0AA7         __end_of_IOCAF5_DefaultInterruptHandler 1BEC  
               _IOCAF5_DefaultInterruptHandler 1BEB                                       ??_strlen 00AA  
                       ?i1_GenericQueue_IsFull 0070                         i1GenericQueue_IsFull@q 0070  
                       _USBActiveConfiguration 006F                 __end_of_USBStdGetStatusHandler 140C  
                    i1USBTransferOnePacket@dir 0070                                    __pbssBIGRAM 232D  
                  __end_of_EUSART_Transmit_ISR 1E92                      i1USBTransferOnePacket@len 0073  
            __end_of_USBHIDCBSetReportComplete 1C06                                      ___latbits 0002  
                                __pcstackBANK0 0050                                  __pcstackBANK1 00A8  
                                __pcstackBANK2 014C                      ?_GenericQueue_CopyToArray 00C0  
                                  snprintf@cnt 0150                                    snprintf@fmt 00E0  
                         ?_USBStdGetDscHandler 0070      __end_ofi1_APP_KeyboardProcessOutputReport 0004  
      __end_of_APP_KeyboardProcessOutputReport 1BF5            ??i1_APP_KeyboardProcessOutputReport 0070  
           ?i1_APP_KeyboardProcessOutputReport 0070               ?_APP_KeyboardProcessOutputReport 0070  
            ??_APP_KeyboardProcessOutputReport 00A8              i1_APP_KeyboardProcessOutputReport 0002  
              _APP_KeyboardProcessOutputReport 1BF2                     __end_of_EUSART_Receive_ISR 1119  
                                 _keyboardData 0136                     __end_of_USBWakeFromSuspend 1E72  
             _EUSART_RxDefaultInterruptHandler 01D9                                 ??_SysTime_Init 00AA  
                              _USBStallHandler 1F13                                   _pBDTEntryOut 0128  
                                    __pnvBANK3 01E5                   __end_of_EUSART_RxDataHandler 1D87  
                                    _main$2651 0167                         _PIN_MANAGER_Initialize 1FD0  
                                    __ptext100 1C57                                      __ptext101 1E72  
                                    __ptext102 10DF                                      __ptext103 1BEF  
                                    __ptext104 1BE9                                      __ptext105 1BEC  
                                    __ptext106 1D6F                                       ?___awmod 00A8  
                                    _ps2UsbMap 1000                             GenericQueue_Init@q 00A8  
                    ?_PS2KeyboardDataInterrupt 0070                                   _eusartRxHead 006C  
                                 _eusartTxHead 0149                                      _hid_rpt01 1800  
                                 _eusartRxTail 01E0                                   _eusartTxTail 0148  
                                    _idle_rate 014A                   ??_INTERRUPT_InterruptManager 007E  
                        _keyboardScanCodeValid 0137                          _keyboardScanCodeQueue 2391  
                      _eusartTxBufferRemaining 006D                     ??_SysTime_GetCurrentTimeMs 0074  
                         _USBTransferOnePacket 0B27                           GenericQueue_IsFull@q 00A8  
           __end_of_IOCAF4_SetInterruptHandler 1C16                     _IOCAF4_SetInterruptHandler 1C0E  
                 __end_of_USBCtrlTrfOutHandler 1153                              ?_APP_KeyboardInit 0070  
                                  ??i1___awmod 0074                          ??_USBStdGetDscHandler 0070  
                                  _ep_data_out 0130                  USBConfigureEndpoint@direction 0070  
                           ??_APP_KeyboardInit 007D                                 _eusartRxBuffer 01A8  
                               _eusartTxBuffer 01B0                           GenericQueue_Remove@i 00C7  
                         GenericQueue_Remove@j 00C8                           GenericQueue_Remove@q 00C0  
                               ___wmul@product 00B3         EUSART_SetErrorHandler@interruptHandler 00A8  
                   __end_of_USBCheckHIDRequest 0AA7                     ??_USBCtrlEPServiceComplete 0077  
                                    clear_ram0 1C83                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 01DE  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00AA  
                                     _PIR2bits 0012                __end_of_PS2USB_ScanCodeToUSBHID 10A8  
                                     _UEP0bits 0E98                                      main@F3442 0220  
                                    main@F3438 01C4                     _USBDeferINDataStagePackets 013D  
    __end_of_EUSART_DefaultOverrunErrorHandler 1BF2            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 1BEF  
                                     _TMR2_ISR 1C77                                       _UCONbits 0E8E  
                            ??_PIN_MANAGER_IOC 007C                           _USBConfigureEndpoint 1190  
                                    _vfpfcnvrt 04D5                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 1DE8  
                              main@scanCodeStr 015D                                       i1_memcpy 1F35  
                                     i1_memset 1D87                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 0145                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                        __end_of_USBStallHandler 1F35  
                                   vfpfcnvrt@c 00D2                      ?_USBHIDCBSetReportHandler 0070  
                             _PS2Keyboard_Init 1E1E                    ??_USBCtrlEPAllowStatusStage 0070  
                  __end_of_USBStdSetCfgHandler 0935                              ??_TMR2_Initialize 00AA  
                __end_of_GenericQueue_Contains 152A                             __end_of_device_dsc 18CA  
                       GenericQueue_Contains@i 00C5                         GenericQueue_Contains@q 00BE  
                      ?_USBCtrlTrfSetupHandler 0070                        USBStdGetStatusHandler@p 0070  
                                    memcpy@tmp 00BF                                     vfprintf@ap 00D9  
                                   vfprintf@fp 00DB                         USBTransferOnePacket@ep 00B0  
                                     _SetupPkt 0040                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 00A8                            _EUSART_ErrorHandler 01D1  
                        ?_USBConfigureEndpoint 0070                              i1___awmod@counter 0075  
                            ??_USBDeviceAttach 00A8                    ?_EUSART_DefaultErrorHandler 0070  
                                   ?_vfpfcnvrt 00C8                                     snprintf@ap 014F  
                         __end_of_SysTime_Init 1C77                    ??_USBHIDCBSetReportComplete 0070  
                         _EUSART_RxDataHandler 1D6F                                       __ptext10 0803  
                                     __ptext11 1085                                       __ptext20 1FD0  
                                     __ptext12 1C6C                                       __ptext21 1CC3  
                                     __ptext13 0800                                       __ptext30 1C0E  
                                     __ptext22 11CF                                       __ptext14 1D2D  
                                     __ptext31 1ED2                                       __ptext23 1C3E  
                                     __ptext15 1BF5                                       __ptext40 05CF  
                                     __ptext32 1E39                                       __ptext24 1C36  
                                     __ptext16 0DE5                                       __ptext41 16C2  
                                     __ptext33 0796                                       __ptext25 1C2E  
                                     __ptext17 1DCF                                       __ptext50 1CF2  
                                     __ptext42 1D19                                       __ptext34 1C06  
                                     __ptext26 1C26                                       __ptext18 1CE1  
                                     __ptext51 1BF2                                       __ptext43 152A  
                                     __ptext35 1F81                                       __ptext27 1C1E  
                                     __ptext19 1C46                                       __ptext60 1324  
                                     __ptext44 1F5B                                       __ptext36 007F  
                                     __ptext28 1E1E                                       __ptext61 0CB4  
                                     __ptext53 06C3                                       __ptext45 1CD0  
                                     __ptext37 1DB7                                       __ptext29 1C16  
                                     __ptext70 0A29                                       __ptext62 15F3  
                                     __ptext54 0D42                                       __ptext46 14C8  
                                     __ptext38 0B27                                       __ptext71 1CB6  
                                     __ptext63 172A                                       __ptext55 1E55  
                                     __ptext47 10A8                                       __ptext39 1086  
                                     __ptext80 0851                                       __ptext72 1CA9  
                                     __ptext64 08C3                                       __ptext56 1D9F  
                                     __ptext48 1E03                                       __ptext81 09AE  
                                     __ptext73 136C                                       __ptext65 1D87  
                                     __ptext57 1F13                                       __ptext49 1298  
                                     __ptext90 1BEB                                       __ptext82 1BFF  
                                     __ptext74 0AA7                                       __ptext66 13B7  
                                     __ptext58 1D58                                       __ptext91 1BF8  
                                     __ptext83 0002                                       __ptext75 1EB2  
                                     __ptext67 0935                                       __ptext59 12DD  
                                     __ptext92 1C8F                                       __ptext84 158C  
                                     __ptext76 1E92                                       __ptext68 02B6  
                                     __ptext93 1BEA                                       __ptext85 1C77  
                                     __ptext77 1190                                       __ptext69 1153  
                                     __ptext94 0F44                                       __ptext86 1C4E  
                                     __ptext78 1119                                       __ptext95 165A  
                                     __ptext87 1084                                       __ptext79 0E91  
                                     __ptext96 1F35                                       __ptext88 1C61  
                                     __ptext97 1DE8                                       __ptext89 1C9C  
                                     __ptext98 1253                                       __ptext99 1D05  
                 ??_IOCAF5_SetInterruptHandler 00AA                              _keyboardIndexData 0139  
                                   _IOCAF4_ISR 1C8F                  GenericQueue_CopyToArray@array 00C2  
                                   _IOCAF5_ISR 1C9C                  GenericQueue_CopyToArray@count 00C8  
                GenericQueue_CopyToArray@index 00C7                                       _keyboard 232D  
               __end_of_USBCtrlTrfSetupHandler 136C                              ?_USBCtrlEPService 0070  
                           ??_USBCtrlEPService 005E                        ?_EUSART_SetErrorHandler 00A8  
                          _USBCtrlTrfInHandler 09AE  EUSART_SetOverrunErrorHandler@interruptHandler 00A8  
                                  _inputReport 00A0                              _keyboardOnesCount 0138  
                                     _outPipes 0121                           _USBCtrlTrfOutHandler 1119  
                                     int$flags 007E                            i1_GenericQueue_Init 1EB2  
                      ?i1_USBTransferOnePacket 0070               __end_of_GenericQueue_CopyToArray 158C  
                    _USBCtrlEPAllowStatusStage 0851                                       _vfprintf 1FA7  
                            ??_TMR2_StartTimer 00A8             __end_of_INTERRUPT_InterruptManager 003D  
                   _INTERRUPT_InterruptManager 0004                        ??i1_GenericQueue_IsFull 0072  
                                     _snprintf 0C2B          __end_of_EUSART_SetFramingErrorHandler 1C2E  
                _EUSART_SetFramingErrorHandler 1C26                         ??_USBTransferOnePacket 00AC  
             __end_of_SysTime_GetCurrentTimeMs 1C61                   __end_of_GenericQueue_Dequeue 0800  
                 __end_of_GenericQueue_IsEmpty 1D05                      _USBDeferStatusStagePacket 0140  
                             i1USBDeviceInit@i 0077                               i1USBDeviceInit@p 0074  
                                   _INTCONbits 000B                   __end_of_GenericQueue_Enqueue 172A  
                         ?_USBCtrlTrfInHandler 0070                                       memcmp@vl 00B5  
                                     memcmp@vr 00B7                          ?_EUSART_RxDataHandler 0070  
                                     memcpy@d1 00B5                                       memcpy@s1 00B7  
                USBCtrlTrfTxService@byteToSend 0072                                 __pstringtext10 18D9  
                               __pstringtext11 18CA                                 __pstringtext12 0000  
                 ??_USBHIDCBSetIdleRateHandler 0071                               ?_USBStallHandler 0070  
                         ?i1_GenericQueue_Init 0070                       USBStdFeatureReqHandler@p 005B  
                                    snprintf@f 0152                                      snprintf@n 00DE  
                                    snprintf@s 014E                                       intlevel1 0000  
             __end_of_PS2KeyboardDataInterrupt 1BFF        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1190  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 1153                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1C26  
                    _USBHIDCBSetReportComplete 1BFF           __end_of_EUSART_SetRxInterruptHandler 1C3E  
                 _EUSART_SetRxInterruptHandler 1C36                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0B27  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 10DF                            _USBCtrlTrfRxService 0E91  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 1E55  
                             _SysTimeInterrupt 1C4E                        _USBStdFeatureReqHandler 02B6  
                                  ??_vfpfcnvrt 00CA                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 158C                                  __pstringtext1 03D6  
                                __pstringtext2 1000                                  __pstringtext3 18D3  
                                __pstringtext4 18DD                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18B8  
                   ?_PS2KeyboardClockInterrupt 0070                            ?_EUSART_Receive_ISR 0070  
                          ?_USBWakeFromSuspend 0070                          ??_USBCtrlTrfInHandler 0073  
                        _USBAlternateInterface 014B                       ?_PS2Keyboard_GetScanCode 0070  
                  ?_IOCAF4_SetInterruptHandler 00A8          USBHIDCBSetIdleRateHandler@newIdleRate 0070  
                          USBEnableEndpoint@ep 007C                                _endpoint_number 0143  
                        ??i1_GenericQueue_Init 0074                           ?_USBCtrlTrfRxService 0070  
                                  ?_IOCAF4_ISR 0070                                    ?_IOCAF5_ISR 0070  
                           EUSART_Write@txData 00A9                 __end_of_PIN_MANAGER_Initialize 2000  
                     ?_USBCtrlEPAllowDataStage 0070                           ?_USBCtrlTrfTxService 0070  
                                   _SOFCounter 0065               ??_IOCAF4_DefaultInterruptHandler 0070  
              ?_IOCAF4_DefaultInterruptHandler 0070                   _USBStatusStageTimeoutCounter 0141  
                              _PIN_MANAGER_IOC 1C61                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 01D7                           ??_USBWakeFromSuspend 007D  
                   USBTransferOnePacket@handle 00B1     APP_KeyboardTasks@needToSendNewReportPacket 00CD  
                       i1_GenericQueue_Enqueue 165A                                     _USB_CD_Ptr 18DD  
