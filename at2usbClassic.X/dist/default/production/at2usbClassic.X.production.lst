

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 07 10:51:47 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text37,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    63                           	psect	text39,local,class=CODE,merge=1,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	intentry,global,class=CODE,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,delta=2
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	text64,local,class=CODE,merge=1,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	text70,local,class=CODE,merge=1,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,delta=2
    99                           	psect	text75,local,class=CODE,merge=1,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   123                           	dabs	1,0x620,48
   124                           	dabs	1,0x5C1,47
   125                           	dabs	1,0x5A0,33
   126                           	dabs	1,0x52C,68
   127                           	dabs	1,0x20,32,_BDT
   128                           	dabs	1,0x48,8,_CtrlTrfData
   129                           	dabs	1,0x40,8,_SetupPkt
   130                           	dabs	1,0xA0,8,_inputReport
   131                           	dabs	1,0x120,1,_outputReport
   132                           	dabs	1,0x232C,0,_keyboard
   133                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   134                           	dabs	1,0x7E,2
   135     0000                     
   136                           ; Generated 07/09/2023 GMT
   137                           ; 
   138                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   139                           ; All rights reserved.
   140                           ; 
   141                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   142                           ; 
   143                           ; Redistribution and use in source and binary forms, with or without modification, are
   144                           ; permitted provided that the following conditions are met:
   145                           ; 
   146                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   147                           ;        conditions and the following disclaimer.
   148                           ; 
   149                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   150                           ;        of conditions and the following disclaimer in the documentation and/or other
   151                           ;        materials provided with the distribution. Publication is not required when
   152                           ;        this file is used in an embedded application.
   153                           ; 
   154                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   155                           ;        software without specific prior written permission.
   156                           ; 
   157                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   158                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   159                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   160                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   161                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   162                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   163                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   164                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   165                           ; 
   166                           ; 
   167                           ; Code-generator required, PIC16F1459 Definitions
   168                           ; 
   169                           ; SFR Addresses
   170     0000                     	;# 
   171     0001                     	;# 
   172     0002                     	;# 
   173     0003                     	;# 
   174     0004                     	;# 
   175     0005                     	;# 
   176     0006                     	;# 
   177     0007                     	;# 
   178     0008                     	;# 
   179     0009                     	;# 
   180     000A                     	;# 
   181     000B                     	;# 
   182     000C                     	;# 
   183     000D                     	;# 
   184     000E                     	;# 
   185     0011                     	;# 
   186     0012                     	;# 
   187     0015                     	;# 
   188     0016                     	;# 
   189     0016                     	;# 
   190     0017                     	;# 
   191     0018                     	;# 
   192     0019                     	;# 
   193     001A                     	;# 
   194     001B                     	;# 
   195     001C                     	;# 
   196     008C                     	;# 
   197     008D                     	;# 
   198     008E                     	;# 
   199     0091                     	;# 
   200     0092                     	;# 
   201     0095                     	;# 
   202     0096                     	;# 
   203     0097                     	;# 
   204     0098                     	;# 
   205     0099                     	;# 
   206     009A                     	;# 
   207     009B                     	;# 
   208     009B                     	;# 
   209     009C                     	;# 
   210     009D                     	;# 
   211     009E                     	;# 
   212     009F                     	;# 
   213     010C                     	;# 
   214     010D                     	;# 
   215     010E                     	;# 
   216     0111                     	;# 
   217     0112                     	;# 
   218     0113                     	;# 
   219     0114                     	;# 
   220     0115                     	;# 
   221     0116                     	;# 
   222     0117                     	;# 
   223     0118                     	;# 
   224     0119                     	;# 
   225     011D                     	;# 
   226     018C                     	;# 
   227     018D                     	;# 
   228     018E                     	;# 
   229     0191                     	;# 
   230     0191                     	;# 
   231     0192                     	;# 
   232     0193                     	;# 
   233     0193                     	;# 
   234     0194                     	;# 
   235     0195                     	;# 
   236     0196                     	;# 
   237     0197                     	;# 
   238     0199                     	;# 
   239     019A                     	;# 
   240     019B                     	;# 
   241     019B                     	;# 
   242     019C                     	;# 
   243     019D                     	;# 
   244     019E                     	;# 
   245     019F                     	;# 
   246     020C                     	;# 
   247     020D                     	;# 
   248     0211                     	;# 
   249     0211                     	;# 
   250     0212                     	;# 
   251     0212                     	;# 
   252     0213                     	;# 
   253     0213                     	;# 
   254     0214                     	;# 
   255     0214                     	;# 
   256     0215                     	;# 
   257     0215                     	;# 
   258     0215                     	;# 
   259     0216                     	;# 
   260     0216                     	;# 
   261     0217                     	;# 
   262     0217                     	;# 
   263     0391                     	;# 
   264     0392                     	;# 
   265     0393                     	;# 
   266     0394                     	;# 
   267     0395                     	;# 
   268     0396                     	;# 
   269     039A                     	;# 
   270     039B                     	;# 
   271     0611                     	;# 
   272     0612                     	;# 
   273     0613                     	;# 
   274     0613                     	;# 
   275     0614                     	;# 
   276     0615                     	;# 
   277     0616                     	;# 
   278     0616                     	;# 
   279     0691                     	;# 
   280     0692                     	;# 
   281     0693                     	;# 
   282     0694                     	;# 
   283     0695                     	;# 
   284     0E8E                     	;# 
   285     0E8F                     	;# 
   286     0E90                     	;# 
   287     0E91                     	;# 
   288     0E92                     	;# 
   289     0E93                     	;# 
   290     0E94                     	;# 
   291     0E94                     	;# 
   292     0E95                     	;# 
   293     0E96                     	;# 
   294     0E97                     	;# 
   295     0E98                     	;# 
   296     0E99                     	;# 
   297     0E9A                     	;# 
   298     0E9B                     	;# 
   299     0E9C                     	;# 
   300     0E9D                     	;# 
   301     0E9E                     	;# 
   302     0E9F                     	;# 
   303     0FE4                     	;# 
   304     0FE5                     	;# 
   305     0FE6                     	;# 
   306     0FE7                     	;# 
   307     0FE8                     	;# 
   308     0FE9                     	;# 
   309     0FEA                     	;# 
   310     0FEB                     	;# 
   311     0FED                     	;# 
   312     0FEE                     	;# 
   313     0FEF                     	;# 
   314     0000                     	;# 
   315     0001                     	;# 
   316     0002                     	;# 
   317     0003                     	;# 
   318     0004                     	;# 
   319     0005                     	;# 
   320     0006                     	;# 
   321     0007                     	;# 
   322     0008                     	;# 
   323     0009                     	;# 
   324     000A                     	;# 
   325     000B                     	;# 
   326     000C                     	;# 
   327     000D                     	;# 
   328     000E                     	;# 
   329     0011                     	;# 
   330     0012                     	;# 
   331     0015                     	;# 
   332     0016                     	;# 
   333     0016                     	;# 
   334     0017                     	;# 
   335     0018                     	;# 
   336     0019                     	;# 
   337     001A                     	;# 
   338     001B                     	;# 
   339     001C                     	;# 
   340     008C                     	;# 
   341     008D                     	;# 
   342     008E                     	;# 
   343     0091                     	;# 
   344     0092                     	;# 
   345     0095                     	;# 
   346     0096                     	;# 
   347     0097                     	;# 
   348     0098                     	;# 
   349     0099                     	;# 
   350     009A                     	;# 
   351     009B                     	;# 
   352     009B                     	;# 
   353     009C                     	;# 
   354     009D                     	;# 
   355     009E                     	;# 
   356     009F                     	;# 
   357     010C                     	;# 
   358     010D                     	;# 
   359     010E                     	;# 
   360     0111                     	;# 
   361     0112                     	;# 
   362     0113                     	;# 
   363     0114                     	;# 
   364     0115                     	;# 
   365     0116                     	;# 
   366     0117                     	;# 
   367     0118                     	;# 
   368     0119                     	;# 
   369     011D                     	;# 
   370     018C                     	;# 
   371     018D                     	;# 
   372     018E                     	;# 
   373     0191                     	;# 
   374     0191                     	;# 
   375     0192                     	;# 
   376     0193                     	;# 
   377     0193                     	;# 
   378     0194                     	;# 
   379     0195                     	;# 
   380     0196                     	;# 
   381     0197                     	;# 
   382     0199                     	;# 
   383     019A                     	;# 
   384     019B                     	;# 
   385     019B                     	;# 
   386     019C                     	;# 
   387     019D                     	;# 
   388     019E                     	;# 
   389     019F                     	;# 
   390     020C                     	;# 
   391     020D                     	;# 
   392     0211                     	;# 
   393     0211                     	;# 
   394     0212                     	;# 
   395     0212                     	;# 
   396     0213                     	;# 
   397     0213                     	;# 
   398     0214                     	;# 
   399     0214                     	;# 
   400     0215                     	;# 
   401     0215                     	;# 
   402     0215                     	;# 
   403     0216                     	;# 
   404     0216                     	;# 
   405     0217                     	;# 
   406     0217                     	;# 
   407     0391                     	;# 
   408     0392                     	;# 
   409     0393                     	;# 
   410     0394                     	;# 
   411     0395                     	;# 
   412     0396                     	;# 
   413     039A                     	;# 
   414     039B                     	;# 
   415     0611                     	;# 
   416     0612                     	;# 
   417     0613                     	;# 
   418     0613                     	;# 
   419     0614                     	;# 
   420     0615                     	;# 
   421     0616                     	;# 
   422     0616                     	;# 
   423     0691                     	;# 
   424     0692                     	;# 
   425     0693                     	;# 
   426     0694                     	;# 
   427     0695                     	;# 
   428     0E8E                     	;# 
   429     0E8F                     	;# 
   430     0E90                     	;# 
   431     0E91                     	;# 
   432     0E92                     	;# 
   433     0E93                     	;# 
   434     0E94                     	;# 
   435     0E94                     	;# 
   436     0E95                     	;# 
   437     0E96                     	;# 
   438     0E97                     	;# 
   439     0E98                     	;# 
   440     0E99                     	;# 
   441     0E9A                     	;# 
   442     0E9B                     	;# 
   443     0E9C                     	;# 
   444     0E9D                     	;# 
   445     0E9E                     	;# 
   446     0E9F                     	;# 
   447     0FE4                     	;# 
   448     0FE5                     	;# 
   449     0FE6                     	;# 
   450     0FE7                     	;# 
   451     0FE8                     	;# 
   452     0FE9                     	;# 
   453     0FEA                     	;# 
   454     0FEB                     	;# 
   455     0FED                     	;# 
   456     0FEE                     	;# 
   457     0FEF                     	;# 
   458     0000                     	;# 
   459     0001                     	;# 
   460     0002                     	;# 
   461     0003                     	;# 
   462     0004                     	;# 
   463     0005                     	;# 
   464     0006                     	;# 
   465     0007                     	;# 
   466     0008                     	;# 
   467     0009                     	;# 
   468     000A                     	;# 
   469     000B                     	;# 
   470     000C                     	;# 
   471     000D                     	;# 
   472     000E                     	;# 
   473     0011                     	;# 
   474     0012                     	;# 
   475     0015                     	;# 
   476     0016                     	;# 
   477     0016                     	;# 
   478     0017                     	;# 
   479     0018                     	;# 
   480     0019                     	;# 
   481     001A                     	;# 
   482     001B                     	;# 
   483     001C                     	;# 
   484     008C                     	;# 
   485     008D                     	;# 
   486     008E                     	;# 
   487     0091                     	;# 
   488     0092                     	;# 
   489     0095                     	;# 
   490     0096                     	;# 
   491     0097                     	;# 
   492     0098                     	;# 
   493     0099                     	;# 
   494     009A                     	;# 
   495     009B                     	;# 
   496     009B                     	;# 
   497     009C                     	;# 
   498     009D                     	;# 
   499     009E                     	;# 
   500     009F                     	;# 
   501     010C                     	;# 
   502     010D                     	;# 
   503     010E                     	;# 
   504     0111                     	;# 
   505     0112                     	;# 
   506     0113                     	;# 
   507     0114                     	;# 
   508     0115                     	;# 
   509     0116                     	;# 
   510     0117                     	;# 
   511     0118                     	;# 
   512     0119                     	;# 
   513     011D                     	;# 
   514     018C                     	;# 
   515     018D                     	;# 
   516     018E                     	;# 
   517     0191                     	;# 
   518     0191                     	;# 
   519     0192                     	;# 
   520     0193                     	;# 
   521     0193                     	;# 
   522     0194                     	;# 
   523     0195                     	;# 
   524     0196                     	;# 
   525     0197                     	;# 
   526     0199                     	;# 
   527     019A                     	;# 
   528     019B                     	;# 
   529     019B                     	;# 
   530     019C                     	;# 
   531     019D                     	;# 
   532     019E                     	;# 
   533     019F                     	;# 
   534     020C                     	;# 
   535     020D                     	;# 
   536     0211                     	;# 
   537     0211                     	;# 
   538     0212                     	;# 
   539     0212                     	;# 
   540     0213                     	;# 
   541     0213                     	;# 
   542     0214                     	;# 
   543     0214                     	;# 
   544     0215                     	;# 
   545     0215                     	;# 
   546     0215                     	;# 
   547     0216                     	;# 
   548     0216                     	;# 
   549     0217                     	;# 
   550     0217                     	;# 
   551     0391                     	;# 
   552     0392                     	;# 
   553     0393                     	;# 
   554     0394                     	;# 
   555     0395                     	;# 
   556     0396                     	;# 
   557     039A                     	;# 
   558     039B                     	;# 
   559     0611                     	;# 
   560     0612                     	;# 
   561     0613                     	;# 
   562     0613                     	;# 
   563     0614                     	;# 
   564     0615                     	;# 
   565     0616                     	;# 
   566     0616                     	;# 
   567     0691                     	;# 
   568     0692                     	;# 
   569     0693                     	;# 
   570     0694                     	;# 
   571     0695                     	;# 
   572     0E8E                     	;# 
   573     0E8F                     	;# 
   574     0E90                     	;# 
   575     0E91                     	;# 
   576     0E92                     	;# 
   577     0E93                     	;# 
   578     0E94                     	;# 
   579     0E94                     	;# 
   580     0E95                     	;# 
   581     0E96                     	;# 
   582     0E97                     	;# 
   583     0E98                     	;# 
   584     0E99                     	;# 
   585     0E9A                     	;# 
   586     0E9B                     	;# 
   587     0E9C                     	;# 
   588     0E9D                     	;# 
   589     0E9E                     	;# 
   590     0E9F                     	;# 
   591     0FE4                     	;# 
   592     0FE5                     	;# 
   593     0FE6                     	;# 
   594     0FE7                     	;# 
   595     0FE8                     	;# 
   596     0FE9                     	;# 
   597     0FEA                     	;# 
   598     0FEB                     	;# 
   599     0FED                     	;# 
   600     0FEE                     	;# 
   601     0FEF                     	;# 
   602     0000                     	;# 
   603     0001                     	;# 
   604     0002                     	;# 
   605     0003                     	;# 
   606     0004                     	;# 
   607     0005                     	;# 
   608     0006                     	;# 
   609     0007                     	;# 
   610     0008                     	;# 
   611     0009                     	;# 
   612     000A                     	;# 
   613     000B                     	;# 
   614     000C                     	;# 
   615     000D                     	;# 
   616     000E                     	;# 
   617     0011                     	;# 
   618     0012                     	;# 
   619     0015                     	;# 
   620     0016                     	;# 
   621     0016                     	;# 
   622     0017                     	;# 
   623     0018                     	;# 
   624     0019                     	;# 
   625     001A                     	;# 
   626     001B                     	;# 
   627     001C                     	;# 
   628     008C                     	;# 
   629     008D                     	;# 
   630     008E                     	;# 
   631     0091                     	;# 
   632     0092                     	;# 
   633     0095                     	;# 
   634     0096                     	;# 
   635     0097                     	;# 
   636     0098                     	;# 
   637     0099                     	;# 
   638     009A                     	;# 
   639     009B                     	;# 
   640     009B                     	;# 
   641     009C                     	;# 
   642     009D                     	;# 
   643     009E                     	;# 
   644     009F                     	;# 
   645     010C                     	;# 
   646     010D                     	;# 
   647     010E                     	;# 
   648     0111                     	;# 
   649     0112                     	;# 
   650     0113                     	;# 
   651     0114                     	;# 
   652     0115                     	;# 
   653     0116                     	;# 
   654     0117                     	;# 
   655     0118                     	;# 
   656     0119                     	;# 
   657     011D                     	;# 
   658     018C                     	;# 
   659     018D                     	;# 
   660     018E                     	;# 
   661     0191                     	;# 
   662     0191                     	;# 
   663     0192                     	;# 
   664     0193                     	;# 
   665     0193                     	;# 
   666     0194                     	;# 
   667     0195                     	;# 
   668     0196                     	;# 
   669     0197                     	;# 
   670     0199                     	;# 
   671     019A                     	;# 
   672     019B                     	;# 
   673     019B                     	;# 
   674     019C                     	;# 
   675     019D                     	;# 
   676     019E                     	;# 
   677     019F                     	;# 
   678     020C                     	;# 
   679     020D                     	;# 
   680     0211                     	;# 
   681     0211                     	;# 
   682     0212                     	;# 
   683     0212                     	;# 
   684     0213                     	;# 
   685     0213                     	;# 
   686     0214                     	;# 
   687     0214                     	;# 
   688     0215                     	;# 
   689     0215                     	;# 
   690     0215                     	;# 
   691     0216                     	;# 
   692     0216                     	;# 
   693     0217                     	;# 
   694     0217                     	;# 
   695     0391                     	;# 
   696     0392                     	;# 
   697     0393                     	;# 
   698     0394                     	;# 
   699     0395                     	;# 
   700     0396                     	;# 
   701     039A                     	;# 
   702     039B                     	;# 
   703     0611                     	;# 
   704     0612                     	;# 
   705     0613                     	;# 
   706     0613                     	;# 
   707     0614                     	;# 
   708     0615                     	;# 
   709     0616                     	;# 
   710     0616                     	;# 
   711     0691                     	;# 
   712     0692                     	;# 
   713     0693                     	;# 
   714     0694                     	;# 
   715     0695                     	;# 
   716     0E8E                     	;# 
   717     0E8F                     	;# 
   718     0E90                     	;# 
   719     0E91                     	;# 
   720     0E92                     	;# 
   721     0E93                     	;# 
   722     0E94                     	;# 
   723     0E94                     	;# 
   724     0E95                     	;# 
   725     0E96                     	;# 
   726     0E97                     	;# 
   727     0E98                     	;# 
   728     0E99                     	;# 
   729     0E9A                     	;# 
   730     0E9B                     	;# 
   731     0E9C                     	;# 
   732     0E9D                     	;# 
   733     0E9E                     	;# 
   734     0E9F                     	;# 
   735     0FE4                     	;# 
   736     0FE5                     	;# 
   737     0FE6                     	;# 
   738     0FE7                     	;# 
   739     0FE8                     	;# 
   740     0FE9                     	;# 
   741     0FEA                     	;# 
   742     0FEB                     	;# 
   743     0FED                     	;# 
   744     0FEE                     	;# 
   745     0FEF                     	;# 
   746     0000                     	;# 
   747     0001                     	;# 
   748     0002                     	;# 
   749     0003                     	;# 
   750     0004                     	;# 
   751     0005                     	;# 
   752     0006                     	;# 
   753     0007                     	;# 
   754     0008                     	;# 
   755     0009                     	;# 
   756     000A                     	;# 
   757     000B                     	;# 
   758     000C                     	;# 
   759     000D                     	;# 
   760     000E                     	;# 
   761     0011                     	;# 
   762     0012                     	;# 
   763     0015                     	;# 
   764     0016                     	;# 
   765     0016                     	;# 
   766     0017                     	;# 
   767     0018                     	;# 
   768     0019                     	;# 
   769     001A                     	;# 
   770     001B                     	;# 
   771     001C                     	;# 
   772     008C                     	;# 
   773     008D                     	;# 
   774     008E                     	;# 
   775     0091                     	;# 
   776     0092                     	;# 
   777     0095                     	;# 
   778     0096                     	;# 
   779     0097                     	;# 
   780     0098                     	;# 
   781     0099                     	;# 
   782     009A                     	;# 
   783     009B                     	;# 
   784     009B                     	;# 
   785     009C                     	;# 
   786     009D                     	;# 
   787     009E                     	;# 
   788     009F                     	;# 
   789     010C                     	;# 
   790     010D                     	;# 
   791     010E                     	;# 
   792     0111                     	;# 
   793     0112                     	;# 
   794     0113                     	;# 
   795     0114                     	;# 
   796     0115                     	;# 
   797     0116                     	;# 
   798     0117                     	;# 
   799     0118                     	;# 
   800     0119                     	;# 
   801     011D                     	;# 
   802     018C                     	;# 
   803     018D                     	;# 
   804     018E                     	;# 
   805     0191                     	;# 
   806     0191                     	;# 
   807     0192                     	;# 
   808     0193                     	;# 
   809     0193                     	;# 
   810     0194                     	;# 
   811     0195                     	;# 
   812     0196                     	;# 
   813     0197                     	;# 
   814     0199                     	;# 
   815     019A                     	;# 
   816     019B                     	;# 
   817     019B                     	;# 
   818     019C                     	;# 
   819     019D                     	;# 
   820     019E                     	;# 
   821     019F                     	;# 
   822     020C                     	;# 
   823     020D                     	;# 
   824     0211                     	;# 
   825     0211                     	;# 
   826     0212                     	;# 
   827     0212                     	;# 
   828     0213                     	;# 
   829     0213                     	;# 
   830     0214                     	;# 
   831     0214                     	;# 
   832     0215                     	;# 
   833     0215                     	;# 
   834     0215                     	;# 
   835     0216                     	;# 
   836     0216                     	;# 
   837     0217                     	;# 
   838     0217                     	;# 
   839     0391                     	;# 
   840     0392                     	;# 
   841     0393                     	;# 
   842     0394                     	;# 
   843     0395                     	;# 
   844     0396                     	;# 
   845     039A                     	;# 
   846     039B                     	;# 
   847     0611                     	;# 
   848     0612                     	;# 
   849     0613                     	;# 
   850     0613                     	;# 
   851     0614                     	;# 
   852     0615                     	;# 
   853     0616                     	;# 
   854     0616                     	;# 
   855     0691                     	;# 
   856     0692                     	;# 
   857     0693                     	;# 
   858     0694                     	;# 
   859     0695                     	;# 
   860     0E8E                     	;# 
   861     0E8F                     	;# 
   862     0E90                     	;# 
   863     0E91                     	;# 
   864     0E92                     	;# 
   865     0E93                     	;# 
   866     0E94                     	;# 
   867     0E94                     	;# 
   868     0E95                     	;# 
   869     0E96                     	;# 
   870     0E97                     	;# 
   871     0E98                     	;# 
   872     0E99                     	;# 
   873     0E9A                     	;# 
   874     0E9B                     	;# 
   875     0E9C                     	;# 
   876     0E9D                     	;# 
   877     0E9E                     	;# 
   878     0E9F                     	;# 
   879     0FE4                     	;# 
   880     0FE5                     	;# 
   881     0FE6                     	;# 
   882     0FE7                     	;# 
   883     0FE8                     	;# 
   884     0FE9                     	;# 
   885     0FEA                     	;# 
   886     0FEB                     	;# 
   887     0FED                     	;# 
   888     0FEE                     	;# 
   889     0FEF                     	;# 
   890     0000                     	;# 
   891     0001                     	;# 
   892     0002                     	;# 
   893     0003                     	;# 
   894     0004                     	;# 
   895     0005                     	;# 
   896     0006                     	;# 
   897     0007                     	;# 
   898     0008                     	;# 
   899     0009                     	;# 
   900     000A                     	;# 
   901     000B                     	;# 
   902     000C                     	;# 
   903     000D                     	;# 
   904     000E                     	;# 
   905     0011                     	;# 
   906     0012                     	;# 
   907     0015                     	;# 
   908     0016                     	;# 
   909     0016                     	;# 
   910     0017                     	;# 
   911     0018                     	;# 
   912     0019                     	;# 
   913     001A                     	;# 
   914     001B                     	;# 
   915     001C                     	;# 
   916     008C                     	;# 
   917     008D                     	;# 
   918     008E                     	;# 
   919     0091                     	;# 
   920     0092                     	;# 
   921     0095                     	;# 
   922     0096                     	;# 
   923     0097                     	;# 
   924     0098                     	;# 
   925     0099                     	;# 
   926     009A                     	;# 
   927     009B                     	;# 
   928     009B                     	;# 
   929     009C                     	;# 
   930     009D                     	;# 
   931     009E                     	;# 
   932     009F                     	;# 
   933     010C                     	;# 
   934     010D                     	;# 
   935     010E                     	;# 
   936     0111                     	;# 
   937     0112                     	;# 
   938     0113                     	;# 
   939     0114                     	;# 
   940     0115                     	;# 
   941     0116                     	;# 
   942     0117                     	;# 
   943     0118                     	;# 
   944     0119                     	;# 
   945     011D                     	;# 
   946     018C                     	;# 
   947     018D                     	;# 
   948     018E                     	;# 
   949     0191                     	;# 
   950     0191                     	;# 
   951     0192                     	;# 
   952     0193                     	;# 
   953     0193                     	;# 
   954     0194                     	;# 
   955     0195                     	;# 
   956     0196                     	;# 
   957     0197                     	;# 
   958     0199                     	;# 
   959     019A                     	;# 
   960     019B                     	;# 
   961     019B                     	;# 
   962     019C                     	;# 
   963     019D                     	;# 
   964     019E                     	;# 
   965     019F                     	;# 
   966     020C                     	;# 
   967     020D                     	;# 
   968     0211                     	;# 
   969     0211                     	;# 
   970     0212                     	;# 
   971     0212                     	;# 
   972     0213                     	;# 
   973     0213                     	;# 
   974     0214                     	;# 
   975     0214                     	;# 
   976     0215                     	;# 
   977     0215                     	;# 
   978     0215                     	;# 
   979     0216                     	;# 
   980     0216                     	;# 
   981     0217                     	;# 
   982     0217                     	;# 
   983     0391                     	;# 
   984     0392                     	;# 
   985     0393                     	;# 
   986     0394                     	;# 
   987     0395                     	;# 
   988     0396                     	;# 
   989     039A                     	;# 
   990     039B                     	;# 
   991     0611                     	;# 
   992     0612                     	;# 
   993     0613                     	;# 
   994     0613                     	;# 
   995     0614                     	;# 
   996     0615                     	;# 
   997     0616                     	;# 
   998     0616                     	;# 
   999     0691                     	;# 
  1000     0692                     	;# 
  1001     0693                     	;# 
  1002     0694                     	;# 
  1003     0695                     	;# 
  1004     0E8E                     	;# 
  1005     0E8F                     	;# 
  1006     0E90                     	;# 
  1007     0E91                     	;# 
  1008     0E92                     	;# 
  1009     0E93                     	;# 
  1010     0E94                     	;# 
  1011     0E94                     	;# 
  1012     0E95                     	;# 
  1013     0E96                     	;# 
  1014     0E97                     	;# 
  1015     0E98                     	;# 
  1016     0E99                     	;# 
  1017     0E9A                     	;# 
  1018     0E9B                     	;# 
  1019     0E9C                     	;# 
  1020     0E9D                     	;# 
  1021     0E9E                     	;# 
  1022     0E9F                     	;# 
  1023     0FE4                     	;# 
  1024     0FE5                     	;# 
  1025     0FE6                     	;# 
  1026     0FE7                     	;# 
  1027     0FE8                     	;# 
  1028     0FE9                     	;# 
  1029     0FEA                     	;# 
  1030     0FEB                     	;# 
  1031     0FED                     	;# 
  1032     0FEE                     	;# 
  1033     0FEF                     	;# 
  1034     0000                     	;# 
  1035     0001                     	;# 
  1036     0002                     	;# 
  1037     0003                     	;# 
  1038     0004                     	;# 
  1039     0005                     	;# 
  1040     0006                     	;# 
  1041     0007                     	;# 
  1042     0008                     	;# 
  1043     0009                     	;# 
  1044     000A                     	;# 
  1045     000B                     	;# 
  1046     000C                     	;# 
  1047     000D                     	;# 
  1048     000E                     	;# 
  1049     0011                     	;# 
  1050     0012                     	;# 
  1051     0015                     	;# 
  1052     0016                     	;# 
  1053     0016                     	;# 
  1054     0017                     	;# 
  1055     0018                     	;# 
  1056     0019                     	;# 
  1057     001A                     	;# 
  1058     001B                     	;# 
  1059     001C                     	;# 
  1060     008C                     	;# 
  1061     008D                     	;# 
  1062     008E                     	;# 
  1063     0091                     	;# 
  1064     0092                     	;# 
  1065     0095                     	;# 
  1066     0096                     	;# 
  1067     0097                     	;# 
  1068     0098                     	;# 
  1069     0099                     	;# 
  1070     009A                     	;# 
  1071     009B                     	;# 
  1072     009B                     	;# 
  1073     009C                     	;# 
  1074     009D                     	;# 
  1075     009E                     	;# 
  1076     009F                     	;# 
  1077     010C                     	;# 
  1078     010D                     	;# 
  1079     010E                     	;# 
  1080     0111                     	;# 
  1081     0112                     	;# 
  1082     0113                     	;# 
  1083     0114                     	;# 
  1084     0115                     	;# 
  1085     0116                     	;# 
  1086     0117                     	;# 
  1087     0118                     	;# 
  1088     0119                     	;# 
  1089     011D                     	;# 
  1090     018C                     	;# 
  1091     018D                     	;# 
  1092     018E                     	;# 
  1093     0191                     	;# 
  1094     0191                     	;# 
  1095     0192                     	;# 
  1096     0193                     	;# 
  1097     0193                     	;# 
  1098     0194                     	;# 
  1099     0195                     	;# 
  1100     0196                     	;# 
  1101     0197                     	;# 
  1102     0199                     	;# 
  1103     019A                     	;# 
  1104     019B                     	;# 
  1105     019B                     	;# 
  1106     019C                     	;# 
  1107     019D                     	;# 
  1108     019E                     	;# 
  1109     019F                     	;# 
  1110     020C                     	;# 
  1111     020D                     	;# 
  1112     0211                     	;# 
  1113     0211                     	;# 
  1114     0212                     	;# 
  1115     0212                     	;# 
  1116     0213                     	;# 
  1117     0213                     	;# 
  1118     0214                     	;# 
  1119     0214                     	;# 
  1120     0215                     	;# 
  1121     0215                     	;# 
  1122     0215                     	;# 
  1123     0216                     	;# 
  1124     0216                     	;# 
  1125     0217                     	;# 
  1126     0217                     	;# 
  1127     0391                     	;# 
  1128     0392                     	;# 
  1129     0393                     	;# 
  1130     0394                     	;# 
  1131     0395                     	;# 
  1132     0396                     	;# 
  1133     039A                     	;# 
  1134     039B                     	;# 
  1135     0611                     	;# 
  1136     0612                     	;# 
  1137     0613                     	;# 
  1138     0613                     	;# 
  1139     0614                     	;# 
  1140     0615                     	;# 
  1141     0616                     	;# 
  1142     0616                     	;# 
  1143     0691                     	;# 
  1144     0692                     	;# 
  1145     0693                     	;# 
  1146     0694                     	;# 
  1147     0695                     	;# 
  1148     0E8E                     	;# 
  1149     0E8F                     	;# 
  1150     0E90                     	;# 
  1151     0E91                     	;# 
  1152     0E92                     	;# 
  1153     0E93                     	;# 
  1154     0E94                     	;# 
  1155     0E94                     	;# 
  1156     0E95                     	;# 
  1157     0E96                     	;# 
  1158     0E97                     	;# 
  1159     0E98                     	;# 
  1160     0E99                     	;# 
  1161     0E9A                     	;# 
  1162     0E9B                     	;# 
  1163     0E9C                     	;# 
  1164     0E9D                     	;# 
  1165     0E9E                     	;# 
  1166     0E9F                     	;# 
  1167     0FE4                     	;# 
  1168     0FE5                     	;# 
  1169     0FE6                     	;# 
  1170     0FE7                     	;# 
  1171     0FE8                     	;# 
  1172     0FE9                     	;# 
  1173     0FEA                     	;# 
  1174     0FEB                     	;# 
  1175     0FED                     	;# 
  1176     0FEE                     	;# 
  1177     0FEF                     	;# 
  1178     0000                     	;# 
  1179     0001                     	;# 
  1180     0002                     	;# 
  1181     0003                     	;# 
  1182     0004                     	;# 
  1183     0005                     	;# 
  1184     0006                     	;# 
  1185     0007                     	;# 
  1186     0008                     	;# 
  1187     0009                     	;# 
  1188     000A                     	;# 
  1189     000B                     	;# 
  1190     000C                     	;# 
  1191     000D                     	;# 
  1192     000E                     	;# 
  1193     0011                     	;# 
  1194     0012                     	;# 
  1195     0015                     	;# 
  1196     0016                     	;# 
  1197     0016                     	;# 
  1198     0017                     	;# 
  1199     0018                     	;# 
  1200     0019                     	;# 
  1201     001A                     	;# 
  1202     001B                     	;# 
  1203     001C                     	;# 
  1204     008C                     	;# 
  1205     008D                     	;# 
  1206     008E                     	;# 
  1207     0091                     	;# 
  1208     0092                     	;# 
  1209     0095                     	;# 
  1210     0096                     	;# 
  1211     0097                     	;# 
  1212     0098                     	;# 
  1213     0099                     	;# 
  1214     009A                     	;# 
  1215     009B                     	;# 
  1216     009B                     	;# 
  1217     009C                     	;# 
  1218     009D                     	;# 
  1219     009E                     	;# 
  1220     009F                     	;# 
  1221     010C                     	;# 
  1222     010D                     	;# 
  1223     010E                     	;# 
  1224     0111                     	;# 
  1225     0112                     	;# 
  1226     0113                     	;# 
  1227     0114                     	;# 
  1228     0115                     	;# 
  1229     0116                     	;# 
  1230     0117                     	;# 
  1231     0118                     	;# 
  1232     0119                     	;# 
  1233     011D                     	;# 
  1234     018C                     	;# 
  1235     018D                     	;# 
  1236     018E                     	;# 
  1237     0191                     	;# 
  1238     0191                     	;# 
  1239     0192                     	;# 
  1240     0193                     	;# 
  1241     0193                     	;# 
  1242     0194                     	;# 
  1243     0195                     	;# 
  1244     0196                     	;# 
  1245     0197                     	;# 
  1246     0199                     	;# 
  1247     019A                     	;# 
  1248     019B                     	;# 
  1249     019B                     	;# 
  1250     019C                     	;# 
  1251     019D                     	;# 
  1252     019E                     	;# 
  1253     019F                     	;# 
  1254     020C                     	;# 
  1255     020D                     	;# 
  1256     0211                     	;# 
  1257     0211                     	;# 
  1258     0212                     	;# 
  1259     0212                     	;# 
  1260     0213                     	;# 
  1261     0213                     	;# 
  1262     0214                     	;# 
  1263     0214                     	;# 
  1264     0215                     	;# 
  1265     0215                     	;# 
  1266     0215                     	;# 
  1267     0216                     	;# 
  1268     0216                     	;# 
  1269     0217                     	;# 
  1270     0217                     	;# 
  1271     0391                     	;# 
  1272     0392                     	;# 
  1273     0393                     	;# 
  1274     0394                     	;# 
  1275     0395                     	;# 
  1276     0396                     	;# 
  1277     039A                     	;# 
  1278     039B                     	;# 
  1279     0611                     	;# 
  1280     0612                     	;# 
  1281     0613                     	;# 
  1282     0613                     	;# 
  1283     0614                     	;# 
  1284     0615                     	;# 
  1285     0616                     	;# 
  1286     0616                     	;# 
  1287     0691                     	;# 
  1288     0692                     	;# 
  1289     0693                     	;# 
  1290     0694                     	;# 
  1291     0695                     	;# 
  1292     0E8E                     	;# 
  1293     0E8F                     	;# 
  1294     0E90                     	;# 
  1295     0E91                     	;# 
  1296     0E92                     	;# 
  1297     0E93                     	;# 
  1298     0E94                     	;# 
  1299     0E94                     	;# 
  1300     0E95                     	;# 
  1301     0E96                     	;# 
  1302     0E97                     	;# 
  1303     0E98                     	;# 
  1304     0E99                     	;# 
  1305     0E9A                     	;# 
  1306     0E9B                     	;# 
  1307     0E9C                     	;# 
  1308     0E9D                     	;# 
  1309     0E9E                     	;# 
  1310     0E9F                     	;# 
  1311     0FE4                     	;# 
  1312     0FE5                     	;# 
  1313     0FE6                     	;# 
  1314     0FE7                     	;# 
  1315     0FE8                     	;# 
  1316     0FE9                     	;# 
  1317     0FEA                     	;# 
  1318     0FEB                     	;# 
  1319     0FED                     	;# 
  1320     0FEE                     	;# 
  1321     0FEF                     	;# 
  1322     0000                     	;# 
  1323     0001                     	;# 
  1324     0002                     	;# 
  1325     0003                     	;# 
  1326     0004                     	;# 
  1327     0005                     	;# 
  1328     0006                     	;# 
  1329     0007                     	;# 
  1330     0008                     	;# 
  1331     0009                     	;# 
  1332     000A                     	;# 
  1333     000B                     	;# 
  1334     000C                     	;# 
  1335     000D                     	;# 
  1336     000E                     	;# 
  1337     0011                     	;# 
  1338     0012                     	;# 
  1339     0015                     	;# 
  1340     0016                     	;# 
  1341     0016                     	;# 
  1342     0017                     	;# 
  1343     0018                     	;# 
  1344     0019                     	;# 
  1345     001A                     	;# 
  1346     001B                     	;# 
  1347     001C                     	;# 
  1348     008C                     	;# 
  1349     008D                     	;# 
  1350     008E                     	;# 
  1351     0091                     	;# 
  1352     0092                     	;# 
  1353     0095                     	;# 
  1354     0096                     	;# 
  1355     0097                     	;# 
  1356     0098                     	;# 
  1357     0099                     	;# 
  1358     009A                     	;# 
  1359     009B                     	;# 
  1360     009B                     	;# 
  1361     009C                     	;# 
  1362     009D                     	;# 
  1363     009E                     	;# 
  1364     009F                     	;# 
  1365     010C                     	;# 
  1366     010D                     	;# 
  1367     010E                     	;# 
  1368     0111                     	;# 
  1369     0112                     	;# 
  1370     0113                     	;# 
  1371     0114                     	;# 
  1372     0115                     	;# 
  1373     0116                     	;# 
  1374     0117                     	;# 
  1375     0118                     	;# 
  1376     0119                     	;# 
  1377     011D                     	;# 
  1378     018C                     	;# 
  1379     018D                     	;# 
  1380     018E                     	;# 
  1381     0191                     	;# 
  1382     0191                     	;# 
  1383     0192                     	;# 
  1384     0193                     	;# 
  1385     0193                     	;# 
  1386     0194                     	;# 
  1387     0195                     	;# 
  1388     0196                     	;# 
  1389     0197                     	;# 
  1390     0199                     	;# 
  1391     019A                     	;# 
  1392     019B                     	;# 
  1393     019B                     	;# 
  1394     019C                     	;# 
  1395     019D                     	;# 
  1396     019E                     	;# 
  1397     019F                     	;# 
  1398     020C                     	;# 
  1399     020D                     	;# 
  1400     0211                     	;# 
  1401     0211                     	;# 
  1402     0212                     	;# 
  1403     0212                     	;# 
  1404     0213                     	;# 
  1405     0213                     	;# 
  1406     0214                     	;# 
  1407     0214                     	;# 
  1408     0215                     	;# 
  1409     0215                     	;# 
  1410     0215                     	;# 
  1411     0216                     	;# 
  1412     0216                     	;# 
  1413     0217                     	;# 
  1414     0217                     	;# 
  1415     0391                     	;# 
  1416     0392                     	;# 
  1417     0393                     	;# 
  1418     0394                     	;# 
  1419     0395                     	;# 
  1420     0396                     	;# 
  1421     039A                     	;# 
  1422     039B                     	;# 
  1423     0611                     	;# 
  1424     0612                     	;# 
  1425     0613                     	;# 
  1426     0613                     	;# 
  1427     0614                     	;# 
  1428     0615                     	;# 
  1429     0616                     	;# 
  1430     0616                     	;# 
  1431     0691                     	;# 
  1432     0692                     	;# 
  1433     0693                     	;# 
  1434     0694                     	;# 
  1435     0695                     	;# 
  1436     0E8E                     	;# 
  1437     0E8F                     	;# 
  1438     0E90                     	;# 
  1439     0E91                     	;# 
  1440     0E92                     	;# 
  1441     0E93                     	;# 
  1442     0E94                     	;# 
  1443     0E94                     	;# 
  1444     0E95                     	;# 
  1445     0E96                     	;# 
  1446     0E97                     	;# 
  1447     0E98                     	;# 
  1448     0E99                     	;# 
  1449     0E9A                     	;# 
  1450     0E9B                     	;# 
  1451     0E9C                     	;# 
  1452     0E9D                     	;# 
  1453     0E9E                     	;# 
  1454     0E9F                     	;# 
  1455     0FE4                     	;# 
  1456     0FE5                     	;# 
  1457     0FE6                     	;# 
  1458     0FE7                     	;# 
  1459     0FE8                     	;# 
  1460     0FE9                     	;# 
  1461     0FEA                     	;# 
  1462     0FEB                     	;# 
  1463     0FED                     	;# 
  1464     0FEE                     	;# 
  1465     0FEF                     	;# 
  1466     0000                     	;# 
  1467     0001                     	;# 
  1468     0002                     	;# 
  1469     0003                     	;# 
  1470     0004                     	;# 
  1471     0005                     	;# 
  1472     0006                     	;# 
  1473     0007                     	;# 
  1474     0008                     	;# 
  1475     0009                     	;# 
  1476     000A                     	;# 
  1477     000B                     	;# 
  1478     000C                     	;# 
  1479     000D                     	;# 
  1480     000E                     	;# 
  1481     0011                     	;# 
  1482     0012                     	;# 
  1483     0015                     	;# 
  1484     0016                     	;# 
  1485     0016                     	;# 
  1486     0017                     	;# 
  1487     0018                     	;# 
  1488     0019                     	;# 
  1489     001A                     	;# 
  1490     001B                     	;# 
  1491     001C                     	;# 
  1492     008C                     	;# 
  1493     008D                     	;# 
  1494     008E                     	;# 
  1495     0091                     	;# 
  1496     0092                     	;# 
  1497     0095                     	;# 
  1498     0096                     	;# 
  1499     0097                     	;# 
  1500     0098                     	;# 
  1501     0099                     	;# 
  1502     009A                     	;# 
  1503     009B                     	;# 
  1504     009B                     	;# 
  1505     009C                     	;# 
  1506     009D                     	;# 
  1507     009E                     	;# 
  1508     009F                     	;# 
  1509     010C                     	;# 
  1510     010D                     	;# 
  1511     010E                     	;# 
  1512     0111                     	;# 
  1513     0112                     	;# 
  1514     0113                     	;# 
  1515     0114                     	;# 
  1516     0115                     	;# 
  1517     0116                     	;# 
  1518     0117                     	;# 
  1519     0118                     	;# 
  1520     0119                     	;# 
  1521     011D                     	;# 
  1522     018C                     	;# 
  1523     018D                     	;# 
  1524     018E                     	;# 
  1525     0191                     	;# 
  1526     0191                     	;# 
  1527     0192                     	;# 
  1528     0193                     	;# 
  1529     0193                     	;# 
  1530     0194                     	;# 
  1531     0195                     	;# 
  1532     0196                     	;# 
  1533     0197                     	;# 
  1534     0199                     	;# 
  1535     019A                     	;# 
  1536     019B                     	;# 
  1537     019B                     	;# 
  1538     019C                     	;# 
  1539     019D                     	;# 
  1540     019E                     	;# 
  1541     019F                     	;# 
  1542     020C                     	;# 
  1543     020D                     	;# 
  1544     0211                     	;# 
  1545     0211                     	;# 
  1546     0212                     	;# 
  1547     0212                     	;# 
  1548     0213                     	;# 
  1549     0213                     	;# 
  1550     0214                     	;# 
  1551     0214                     	;# 
  1552     0215                     	;# 
  1553     0215                     	;# 
  1554     0215                     	;# 
  1555     0216                     	;# 
  1556     0216                     	;# 
  1557     0217                     	;# 
  1558     0217                     	;# 
  1559     0391                     	;# 
  1560     0392                     	;# 
  1561     0393                     	;# 
  1562     0394                     	;# 
  1563     0395                     	;# 
  1564     0396                     	;# 
  1565     039A                     	;# 
  1566     039B                     	;# 
  1567     0611                     	;# 
  1568     0612                     	;# 
  1569     0613                     	;# 
  1570     0613                     	;# 
  1571     0614                     	;# 
  1572     0615                     	;# 
  1573     0616                     	;# 
  1574     0616                     	;# 
  1575     0691                     	;# 
  1576     0692                     	;# 
  1577     0693                     	;# 
  1578     0694                     	;# 
  1579     0695                     	;# 
  1580     0E8E                     	;# 
  1581     0E8F                     	;# 
  1582     0E90                     	;# 
  1583     0E91                     	;# 
  1584     0E92                     	;# 
  1585     0E93                     	;# 
  1586     0E94                     	;# 
  1587     0E94                     	;# 
  1588     0E95                     	;# 
  1589     0E96                     	;# 
  1590     0E97                     	;# 
  1591     0E98                     	;# 
  1592     0E99                     	;# 
  1593     0E9A                     	;# 
  1594     0E9B                     	;# 
  1595     0E9C                     	;# 
  1596     0E9D                     	;# 
  1597     0E9E                     	;# 
  1598     0E9F                     	;# 
  1599     0FE4                     	;# 
  1600     0FE5                     	;# 
  1601     0FE6                     	;# 
  1602     0FE7                     	;# 
  1603     0FE8                     	;# 
  1604     0FE9                     	;# 
  1605     0FEA                     	;# 
  1606     0FEB                     	;# 
  1607     0FED                     	;# 
  1608     0FEE                     	;# 
  1609     0FEF                     	;# 
  1610     0000                     	;# 
  1611     0001                     	;# 
  1612     0002                     	;# 
  1613     0003                     	;# 
  1614     0004                     	;# 
  1615     0005                     	;# 
  1616     0006                     	;# 
  1617     0007                     	;# 
  1618     0008                     	;# 
  1619     0009                     	;# 
  1620     000A                     	;# 
  1621     000B                     	;# 
  1622     000C                     	;# 
  1623     000D                     	;# 
  1624     000E                     	;# 
  1625     0011                     	;# 
  1626     0012                     	;# 
  1627     0015                     	;# 
  1628     0016                     	;# 
  1629     0016                     	;# 
  1630     0017                     	;# 
  1631     0018                     	;# 
  1632     0019                     	;# 
  1633     001A                     	;# 
  1634     001B                     	;# 
  1635     001C                     	;# 
  1636     008C                     	;# 
  1637     008D                     	;# 
  1638     008E                     	;# 
  1639     0091                     	;# 
  1640     0092                     	;# 
  1641     0095                     	;# 
  1642     0096                     	;# 
  1643     0097                     	;# 
  1644     0098                     	;# 
  1645     0099                     	;# 
  1646     009A                     	;# 
  1647     009B                     	;# 
  1648     009B                     	;# 
  1649     009C                     	;# 
  1650     009D                     	;# 
  1651     009E                     	;# 
  1652     009F                     	;# 
  1653     010C                     	;# 
  1654     010D                     	;# 
  1655     010E                     	;# 
  1656     0111                     	;# 
  1657     0112                     	;# 
  1658     0113                     	;# 
  1659     0114                     	;# 
  1660     0115                     	;# 
  1661     0116                     	;# 
  1662     0117                     	;# 
  1663     0118                     	;# 
  1664     0119                     	;# 
  1665     011D                     	;# 
  1666     018C                     	;# 
  1667     018D                     	;# 
  1668     018E                     	;# 
  1669     0191                     	;# 
  1670     0191                     	;# 
  1671     0192                     	;# 
  1672     0193                     	;# 
  1673     0193                     	;# 
  1674     0194                     	;# 
  1675     0195                     	;# 
  1676     0196                     	;# 
  1677     0197                     	;# 
  1678     0199                     	;# 
  1679     019A                     	;# 
  1680     019B                     	;# 
  1681     019B                     	;# 
  1682     019C                     	;# 
  1683     019D                     	;# 
  1684     019E                     	;# 
  1685     019F                     	;# 
  1686     020C                     	;# 
  1687     020D                     	;# 
  1688     0211                     	;# 
  1689     0211                     	;# 
  1690     0212                     	;# 
  1691     0212                     	;# 
  1692     0213                     	;# 
  1693     0213                     	;# 
  1694     0214                     	;# 
  1695     0214                     	;# 
  1696     0215                     	;# 
  1697     0215                     	;# 
  1698     0215                     	;# 
  1699     0216                     	;# 
  1700     0216                     	;# 
  1701     0217                     	;# 
  1702     0217                     	;# 
  1703     0391                     	;# 
  1704     0392                     	;# 
  1705     0393                     	;# 
  1706     0394                     	;# 
  1707     0395                     	;# 
  1708     0396                     	;# 
  1709     039A                     	;# 
  1710     039B                     	;# 
  1711     0611                     	;# 
  1712     0612                     	;# 
  1713     0613                     	;# 
  1714     0613                     	;# 
  1715     0614                     	;# 
  1716     0615                     	;# 
  1717     0616                     	;# 
  1718     0616                     	;# 
  1719     0691                     	;# 
  1720     0692                     	;# 
  1721     0693                     	;# 
  1722     0694                     	;# 
  1723     0695                     	;# 
  1724     0E8E                     	;# 
  1725     0E8F                     	;# 
  1726     0E90                     	;# 
  1727     0E91                     	;# 
  1728     0E92                     	;# 
  1729     0E93                     	;# 
  1730     0E94                     	;# 
  1731     0E94                     	;# 
  1732     0E95                     	;# 
  1733     0E96                     	;# 
  1734     0E97                     	;# 
  1735     0E98                     	;# 
  1736     0E99                     	;# 
  1737     0E9A                     	;# 
  1738     0E9B                     	;# 
  1739     0E9C                     	;# 
  1740     0E9D                     	;# 
  1741     0E9E                     	;# 
  1742     0E9F                     	;# 
  1743     0FE4                     	;# 
  1744     0FE5                     	;# 
  1745     0FE6                     	;# 
  1746     0FE7                     	;# 
  1747     0FE8                     	;# 
  1748     0FE9                     	;# 
  1749     0FEA                     	;# 
  1750     0FEB                     	;# 
  1751     0FED                     	;# 
  1752     0FEE                     	;# 
  1753     0FEF                     	;# 
  1754     0000                     	;# 
  1755     0001                     	;# 
  1756     0002                     	;# 
  1757     0003                     	;# 
  1758     0004                     	;# 
  1759     0005                     	;# 
  1760     0006                     	;# 
  1761     0007                     	;# 
  1762     0008                     	;# 
  1763     0009                     	;# 
  1764     000A                     	;# 
  1765     000B                     	;# 
  1766     000C                     	;# 
  1767     000D                     	;# 
  1768     000E                     	;# 
  1769     0011                     	;# 
  1770     0012                     	;# 
  1771     0015                     	;# 
  1772     0016                     	;# 
  1773     0016                     	;# 
  1774     0017                     	;# 
  1775     0018                     	;# 
  1776     0019                     	;# 
  1777     001A                     	;# 
  1778     001B                     	;# 
  1779     001C                     	;# 
  1780     008C                     	;# 
  1781     008D                     	;# 
  1782     008E                     	;# 
  1783     0091                     	;# 
  1784     0092                     	;# 
  1785     0095                     	;# 
  1786     0096                     	;# 
  1787     0097                     	;# 
  1788     0098                     	;# 
  1789     0099                     	;# 
  1790     009A                     	;# 
  1791     009B                     	;# 
  1792     009B                     	;# 
  1793     009C                     	;# 
  1794     009D                     	;# 
  1795     009E                     	;# 
  1796     009F                     	;# 
  1797     010C                     	;# 
  1798     010D                     	;# 
  1799     010E                     	;# 
  1800     0111                     	;# 
  1801     0112                     	;# 
  1802     0113                     	;# 
  1803     0114                     	;# 
  1804     0115                     	;# 
  1805     0116                     	;# 
  1806     0117                     	;# 
  1807     0118                     	;# 
  1808     0119                     	;# 
  1809     011D                     	;# 
  1810     018C                     	;# 
  1811     018D                     	;# 
  1812     018E                     	;# 
  1813     0191                     	;# 
  1814     0191                     	;# 
  1815     0192                     	;# 
  1816     0193                     	;# 
  1817     0193                     	;# 
  1818     0194                     	;# 
  1819     0195                     	;# 
  1820     0196                     	;# 
  1821     0197                     	;# 
  1822     0199                     	;# 
  1823     019A                     	;# 
  1824     019B                     	;# 
  1825     019B                     	;# 
  1826     019C                     	;# 
  1827     019D                     	;# 
  1828     019E                     	;# 
  1829     019F                     	;# 
  1830     020C                     	;# 
  1831     020D                     	;# 
  1832     0211                     	;# 
  1833     0211                     	;# 
  1834     0212                     	;# 
  1835     0212                     	;# 
  1836     0213                     	;# 
  1837     0213                     	;# 
  1838     0214                     	;# 
  1839     0214                     	;# 
  1840     0215                     	;# 
  1841     0215                     	;# 
  1842     0215                     	;# 
  1843     0216                     	;# 
  1844     0216                     	;# 
  1845     0217                     	;# 
  1846     0217                     	;# 
  1847     0391                     	;# 
  1848     0392                     	;# 
  1849     0393                     	;# 
  1850     0394                     	;# 
  1851     0395                     	;# 
  1852     0396                     	;# 
  1853     039A                     	;# 
  1854     039B                     	;# 
  1855     0611                     	;# 
  1856     0612                     	;# 
  1857     0613                     	;# 
  1858     0613                     	;# 
  1859     0614                     	;# 
  1860     0615                     	;# 
  1861     0616                     	;# 
  1862     0616                     	;# 
  1863     0691                     	;# 
  1864     0692                     	;# 
  1865     0693                     	;# 
  1866     0694                     	;# 
  1867     0695                     	;# 
  1868     0E8E                     	;# 
  1869     0E8F                     	;# 
  1870     0E90                     	;# 
  1871     0E91                     	;# 
  1872     0E92                     	;# 
  1873     0E93                     	;# 
  1874     0E94                     	;# 
  1875     0E94                     	;# 
  1876     0E95                     	;# 
  1877     0E96                     	;# 
  1878     0E97                     	;# 
  1879     0E98                     	;# 
  1880     0E99                     	;# 
  1881     0E9A                     	;# 
  1882     0E9B                     	;# 
  1883     0E9C                     	;# 
  1884     0E9D                     	;# 
  1885     0E9E                     	;# 
  1886     0E9F                     	;# 
  1887     0FE4                     	;# 
  1888     0FE5                     	;# 
  1889     0FE6                     	;# 
  1890     0FE7                     	;# 
  1891     0FE8                     	;# 
  1892     0FE9                     	;# 
  1893     0FEA                     	;# 
  1894     0FEB                     	;# 
  1895     0FED                     	;# 
  1896     0FEE                     	;# 
  1897     0FEF                     	;# 
  1898     0000                     	;# 
  1899     0001                     	;# 
  1900     0002                     	;# 
  1901     0003                     	;# 
  1902     0004                     	;# 
  1903     0005                     	;# 
  1904     0006                     	;# 
  1905     0007                     	;# 
  1906     0008                     	;# 
  1907     0009                     	;# 
  1908     000A                     	;# 
  1909     000B                     	;# 
  1910     000C                     	;# 
  1911     000D                     	;# 
  1912     000E                     	;# 
  1913     0011                     	;# 
  1914     0012                     	;# 
  1915     0015                     	;# 
  1916     0016                     	;# 
  1917     0016                     	;# 
  1918     0017                     	;# 
  1919     0018                     	;# 
  1920     0019                     	;# 
  1921     001A                     	;# 
  1922     001B                     	;# 
  1923     001C                     	;# 
  1924     008C                     	;# 
  1925     008D                     	;# 
  1926     008E                     	;# 
  1927     0091                     	;# 
  1928     0092                     	;# 
  1929     0095                     	;# 
  1930     0096                     	;# 
  1931     0097                     	;# 
  1932     0098                     	;# 
  1933     0099                     	;# 
  1934     009A                     	;# 
  1935     009B                     	;# 
  1936     009B                     	;# 
  1937     009C                     	;# 
  1938     009D                     	;# 
  1939     009E                     	;# 
  1940     009F                     	;# 
  1941     010C                     	;# 
  1942     010D                     	;# 
  1943     010E                     	;# 
  1944     0111                     	;# 
  1945     0112                     	;# 
  1946     0113                     	;# 
  1947     0114                     	;# 
  1948     0115                     	;# 
  1949     0116                     	;# 
  1950     0117                     	;# 
  1951     0118                     	;# 
  1952     0119                     	;# 
  1953     011D                     	;# 
  1954     018C                     	;# 
  1955     018D                     	;# 
  1956     018E                     	;# 
  1957     0191                     	;# 
  1958     0191                     	;# 
  1959     0192                     	;# 
  1960     0193                     	;# 
  1961     0193                     	;# 
  1962     0194                     	;# 
  1963     0195                     	;# 
  1964     0196                     	;# 
  1965     0197                     	;# 
  1966     0199                     	;# 
  1967     019A                     	;# 
  1968     019B                     	;# 
  1969     019B                     	;# 
  1970     019C                     	;# 
  1971     019D                     	;# 
  1972     019E                     	;# 
  1973     019F                     	;# 
  1974     020C                     	;# 
  1975     020D                     	;# 
  1976     0211                     	;# 
  1977     0211                     	;# 
  1978     0212                     	;# 
  1979     0212                     	;# 
  1980     0213                     	;# 
  1981     0213                     	;# 
  1982     0214                     	;# 
  1983     0214                     	;# 
  1984     0215                     	;# 
  1985     0215                     	;# 
  1986     0215                     	;# 
  1987     0216                     	;# 
  1988     0216                     	;# 
  1989     0217                     	;# 
  1990     0217                     	;# 
  1991     0391                     	;# 
  1992     0392                     	;# 
  1993     0393                     	;# 
  1994     0394                     	;# 
  1995     0395                     	;# 
  1996     0396                     	;# 
  1997     039A                     	;# 
  1998     039B                     	;# 
  1999     0611                     	;# 
  2000     0612                     	;# 
  2001     0613                     	;# 
  2002     0613                     	;# 
  2003     0614                     	;# 
  2004     0615                     	;# 
  2005     0616                     	;# 
  2006     0616                     	;# 
  2007     0691                     	;# 
  2008     0692                     	;# 
  2009     0693                     	;# 
  2010     0694                     	;# 
  2011     0695                     	;# 
  2012     0E8E                     	;# 
  2013     0E8F                     	;# 
  2014     0E90                     	;# 
  2015     0E91                     	;# 
  2016     0E92                     	;# 
  2017     0E93                     	;# 
  2018     0E94                     	;# 
  2019     0E94                     	;# 
  2020     0E95                     	;# 
  2021     0E96                     	;# 
  2022     0E97                     	;# 
  2023     0E98                     	;# 
  2024     0E99                     	;# 
  2025     0E9A                     	;# 
  2026     0E9B                     	;# 
  2027     0E9C                     	;# 
  2028     0E9D                     	;# 
  2029     0E9E                     	;# 
  2030     0E9F                     	;# 
  2031     0FE4                     	;# 
  2032     0FE5                     	;# 
  2033     0FE6                     	;# 
  2034     0FE7                     	;# 
  2035     0FE8                     	;# 
  2036     0FE9                     	;# 
  2037     0FEA                     	;# 
  2038     0FEB                     	;# 
  2039     0FED                     	;# 
  2040     0FEE                     	;# 
  2041     0FEF                     	;_keyboard
  2042                           
  2043                           	psect	stringtext1
  2044     03F2                     __pstringtext1:
  2045     03F2                     _ps2ExtUsbMap:
  2046     03F2  3400               	retlw	0
  2047     03F3  3400               	retlw	0
  2048     03F4  3400               	retlw	0
  2049     03F5  3400               	retlw	0
  2050     03F6  3400               	retlw	0
  2051     03F7  3400               	retlw	0
  2052     03F8  3400               	retlw	0
  2053     03F9  3400               	retlw	0
  2054     03FA  3400               	retlw	0
  2055     03FB  3400               	retlw	0
  2056     03FC  3400               	retlw	0
  2057     03FD  3400               	retlw	0
  2058     03FE  3400               	retlw	0
  2059     03FF  3400               	retlw	0
  2060     0400  3400               	retlw	0
  2061     0401  3400               	retlw	0
  2062     0402  3400               	retlw	0
  2063     0403  34E6               	retlw	230
  2064     0404  3400               	retlw	0
  2065     0405  3400               	retlw	0
  2066     0406  34E4               	retlw	228
  2067     0407  3400               	retlw	0
  2068     0408  3400               	retlw	0
  2069     0409  3400               	retlw	0
  2070     040A  3400               	retlw	0
  2071     040B  3400               	retlw	0
  2072     040C  3400               	retlw	0
  2073     040D  3400               	retlw	0
  2074     040E  3400               	retlw	0
  2075     040F  3400               	retlw	0
  2076     0410  3400               	retlw	0
  2077     0411  34E3               	retlw	227
  2078     0412  3400               	retlw	0
  2079     0413  3400               	retlw	0
  2080     0414  3400               	retlw	0
  2081     0415  3400               	retlw	0
  2082     0416  3400               	retlw	0
  2083     0417  3400               	retlw	0
  2084     0418  3400               	retlw	0
  2085     0419  34E7               	retlw	231
  2086     041A  3400               	retlw	0
  2087     041B  3400               	retlw	0
  2088     041C  3400               	retlw	0
  2089     041D  3400               	retlw	0
  2090     041E  3400               	retlw	0
  2091     041F  3400               	retlw	0
  2092     0420  3400               	retlw	0
  2093     0421  3465               	retlw	101
  2094     0422  3400               	retlw	0
  2095     0423  3400               	retlw	0
  2096     0424  3400               	retlw	0
  2097     0425  3400               	retlw	0
  2098     0426  3400               	retlw	0
  2099     0427  3400               	retlw	0
  2100     0428  3400               	retlw	0
  2101     0429  3400               	retlw	0
  2102     042A  3400               	retlw	0
  2103     042B  3400               	retlw	0
  2104     042C  3400               	retlw	0
  2105     042D  3400               	retlw	0
  2106     042E  3400               	retlw	0
  2107     042F  3400               	retlw	0
  2108     0430  3400               	retlw	0
  2109     0431  3400               	retlw	0
  2110     0432  3400               	retlw	0
  2111     0433  3400               	retlw	0
  2112     0434  3400               	retlw	0
  2113     0435  3400               	retlw	0
  2114     0436  3400               	retlw	0
  2115     0437  3400               	retlw	0
  2116     0438  3400               	retlw	0
  2117     0439  3400               	retlw	0
  2118     043A  3400               	retlw	0
  2119     043B  3400               	retlw	0
  2120     043C  3454               	retlw	84
  2121     043D  3400               	retlw	0
  2122     043E  3400               	retlw	0
  2123     043F  3400               	retlw	0
  2124     0440  3400               	retlw	0
  2125     0441  3400               	retlw	0
  2126     0442  3400               	retlw	0
  2127     0443  3400               	retlw	0
  2128     0444  3400               	retlw	0
  2129     0445  3400               	retlw	0
  2130     0446  3400               	retlw	0
  2131     0447  3400               	retlw	0
  2132     0448  3400               	retlw	0
  2133     0449  3400               	retlw	0
  2134     044A  3400               	retlw	0
  2135     044B  3400               	retlw	0
  2136     044C  3458               	retlw	88
  2137     044D  3400               	retlw	0
  2138     044E  3400               	retlw	0
  2139     044F  3400               	retlw	0
  2140     0450  3400               	retlw	0
  2141     0451  3400               	retlw	0
  2142     0452  3400               	retlw	0
  2143     0453  3400               	retlw	0
  2144     0454  3400               	retlw	0
  2145     0455  3400               	retlw	0
  2146     0456  3400               	retlw	0
  2147     0457  3400               	retlw	0
  2148     0458  3400               	retlw	0
  2149     0459  3400               	retlw	0
  2150     045A  3400               	retlw	0
  2151     045B  344D               	retlw	77
  2152     045C  3400               	retlw	0
  2153     045D  3450               	retlw	80
  2154     045E  344A               	retlw	74
  2155     045F  3400               	retlw	0
  2156     0460  3400               	retlw	0
  2157     0461  3400               	retlw	0
  2158     0462  3449               	retlw	73
  2159     0463  344C               	retlw	76
  2160     0464  3451               	retlw	81
  2161     0465  3400               	retlw	0
  2162     0466  344F               	retlw	79
  2163     0467  3452               	retlw	82
  2164     0468  3400               	retlw	0
  2165     0469  3400               	retlw	0
  2166     046A  3400               	retlw	0
  2167     046B  3400               	retlw	0
  2168     046C  344E               	retlw	78
  2169     046D  3400               	retlw	0
  2170     046E  3446               	retlw	70
  2171     046F  344B               	retlw	75
  2172     0470  3400               	retlw	0
  2173     0471  3400               	retlw	0
  2174     0472  3400               	retlw	0
  2175     0473  3400               	retlw	0
  2176     0474  3400               	retlw	0
  2177     0475  3400               	retlw	0
  2178     0476  3400               	retlw	0
  2179     0477  3400               	retlw	0
  2180     0478  3400               	retlw	0
  2181     0479  3400               	retlw	0
  2182     047A  3400               	retlw	0
  2183     047B  3400               	retlw	0
  2184     047C  3400               	retlw	0
  2185     047D  3400               	retlw	0
  2186     047E  3400               	retlw	0
  2187     047F  3400               	retlw	0
  2188     0480  3400               	retlw	0
  2189     0481  3400               	retlw	0
  2190     0482  3400               	retlw	0
  2191     0483  3400               	retlw	0
  2192     0484  3400               	retlw	0
  2193     0485  3400               	retlw	0
  2194     0486  3400               	retlw	0
  2195     0487  3400               	retlw	0
  2196     0488  3400               	retlw	0
  2197     0489  3400               	retlw	0
  2198     048A  3400               	retlw	0
  2199     048B  3400               	retlw	0
  2200     048C  3400               	retlw	0
  2201     048D  3400               	retlw	0
  2202     048E  3400               	retlw	0
  2203     048F  3400               	retlw	0
  2204     0490  3400               	retlw	0
  2205     0491  3400               	retlw	0
  2206     0492  3400               	retlw	0
  2207     0493  3400               	retlw	0
  2208     0494  3400               	retlw	0
  2209     0495  3400               	retlw	0
  2210     0496  3400               	retlw	0
  2211     0497  3400               	retlw	0
  2212     0498  3400               	retlw	0
  2213     0499  3400               	retlw	0
  2214     049A  3400               	retlw	0
  2215     049B  3400               	retlw	0
  2216     049C  3400               	retlw	0
  2217     049D  3400               	retlw	0
  2218     049E  3400               	retlw	0
  2219     049F  3400               	retlw	0
  2220     04A0  3400               	retlw	0
  2221     04A1  3400               	retlw	0
  2222     04A2  3400               	retlw	0
  2223     04A3  3400               	retlw	0
  2224     04A4  3400               	retlw	0
  2225     04A5  3400               	retlw	0
  2226     04A6  3400               	retlw	0
  2227     04A7  3400               	retlw	0
  2228     04A8  3400               	retlw	0
  2229     04A9  3400               	retlw	0
  2230     04AA  3400               	retlw	0
  2231     04AB  3400               	retlw	0
  2232     04AC  3400               	retlw	0
  2233     04AD  3400               	retlw	0
  2234     04AE  3400               	retlw	0
  2235     04AF  3400               	retlw	0
  2236     04B0  3400               	retlw	0
  2237     04B1  3400               	retlw	0
  2238     04B2  3400               	retlw	0
  2239     04B3  3400               	retlw	0
  2240     04B4  3400               	retlw	0
  2241     04B5  3400               	retlw	0
  2242     04B6  3400               	retlw	0
  2243     04B7  3400               	retlw	0
  2244     04B8  3400               	retlw	0
  2245     04B9  3400               	retlw	0
  2246     04BA  3400               	retlw	0
  2247     04BB  3400               	retlw	0
  2248     04BC  3400               	retlw	0
  2249     04BD  3400               	retlw	0
  2250     04BE  3400               	retlw	0
  2251     04BF  3400               	retlw	0
  2252     04C0  3400               	retlw	0
  2253     04C1  3400               	retlw	0
  2254     04C2  3400               	retlw	0
  2255     04C3  3400               	retlw	0
  2256     04C4  3400               	retlw	0
  2257     04C5  3400               	retlw	0
  2258     04C6  3400               	retlw	0
  2259     04C7  3400               	retlw	0
  2260     04C8  3400               	retlw	0
  2261     04C9  3400               	retlw	0
  2262     04CA  3400               	retlw	0
  2263     04CB  3400               	retlw	0
  2264     04CC  3400               	retlw	0
  2265     04CD  3400               	retlw	0
  2266     04CE  3400               	retlw	0
  2267     04CF  3400               	retlw	0
  2268     04D0  3400               	retlw	0
  2269     04D1  3400               	retlw	0
  2270     04D2  3400               	retlw	0
  2271     04D3  3400               	retlw	0
  2272     04D4  3400               	retlw	0
  2273     04D5  3400               	retlw	0
  2274     04D6  3400               	retlw	0
  2275     04D7  3400               	retlw	0
  2276     04D8  3400               	retlw	0
  2277     04D9  3400               	retlw	0
  2278     04DA  3400               	retlw	0
  2279     04DB  3400               	retlw	0
  2280     04DC  3400               	retlw	0
  2281     04DD  3400               	retlw	0
  2282     04DE  3400               	retlw	0
  2283     04DF  3400               	retlw	0
  2284     04E0  3400               	retlw	0
  2285     04E1  3400               	retlw	0
  2286     04E2  3400               	retlw	0
  2287     04E3  3400               	retlw	0
  2288     04E4  3400               	retlw	0
  2289     04E5  3400               	retlw	0
  2290     04E6  3400               	retlw	0
  2291     04E7  3400               	retlw	0
  2292     04E8  3400               	retlw	0
  2293     04E9  3400               	retlw	0
  2294     04EA  3400               	retlw	0
  2295     04EB  3400               	retlw	0
  2296     04EC  3400               	retlw	0
  2297     04ED  3400               	retlw	0
  2298     04EE  3400               	retlw	0
  2299     04EF  3400               	retlw	0
  2300     04F0  3400               	retlw	0
  2301     04F1                     __end_of_ps2ExtUsbMap:
  2302                           
  2303                           	psect	stringtext2
  2304     1000                     __pstringtext2:
  2305     1000                     _ps2UsbMap:
  2306     1000  3400               	retlw	0
  2307     1001  3442               	retlw	66
  2308     1002  3400               	retlw	0
  2309     1003  343E               	retlw	62
  2310     1004  343C               	retlw	60
  2311     1005  343A               	retlw	58
  2312     1006  343B               	retlw	59
  2313     1007  3445               	retlw	69
  2314     1008  3400               	retlw	0
  2315     1009  3443               	retlw	67
  2316     100A  3441               	retlw	65
  2317     100B  343F               	retlw	63
  2318     100C  343D               	retlw	61
  2319     100D  342B               	retlw	43
  2320     100E  3435               	retlw	53
  2321     100F  3400               	retlw	0
  2322     1010  3400               	retlw	0
  2323     1011  34E2               	retlw	226
  2324     1012  34E1               	retlw	225
  2325     1013  3400               	retlw	0
  2326     1014  34E0               	retlw	224
  2327     1015  3414               	retlw	20
  2328     1016  341E               	retlw	30
  2329     1017  3400               	retlw	0
  2330     1018  3400               	retlw	0
  2331     1019  3400               	retlw	0
  2332     101A  341D               	retlw	29
  2333     101B  3416               	retlw	22
  2334     101C  3404               	retlw	4
  2335     101D  341A               	retlw	26
  2336     101E  341F               	retlw	31
  2337     101F  3400               	retlw	0
  2338     1020  3400               	retlw	0
  2339     1021  3406               	retlw	6
  2340     1022  341B               	retlw	27
  2341     1023  3407               	retlw	7
  2342     1024  3408               	retlw	8
  2343     1025  3421               	retlw	33
  2344     1026  3420               	retlw	32
  2345     1027  3400               	retlw	0
  2346     1028  3400               	retlw	0
  2347     1029  342C               	retlw	44
  2348     102A  3419               	retlw	25
  2349     102B  3409               	retlw	9
  2350     102C  3417               	retlw	23
  2351     102D  3415               	retlw	21
  2352     102E  3422               	retlw	34
  2353     102F  3400               	retlw	0
  2354     1030  3400               	retlw	0
  2355     1031  3411               	retlw	17
  2356     1032  3405               	retlw	5
  2357     1033  340B               	retlw	11
  2358     1034  340A               	retlw	10
  2359     1035  341C               	retlw	28
  2360     1036  3423               	retlw	35
  2361     1037  3400               	retlw	0
  2362     1038  3400               	retlw	0
  2363     1039  3400               	retlw	0
  2364     103A  3410               	retlw	16
  2365     103B  340D               	retlw	13
  2366     103C  3418               	retlw	24
  2367     103D  3424               	retlw	36
  2368     103E  3425               	retlw	37
  2369     103F  3400               	retlw	0
  2370     1040  3400               	retlw	0
  2371     1041  3436               	retlw	54
  2372     1042  340E               	retlw	14
  2373     1043  340C               	retlw	12
  2374     1044  3412               	retlw	18
  2375     1045  3427               	retlw	39
  2376     1046  3426               	retlw	38
  2377     1047  3400               	retlw	0
  2378     1048  3400               	retlw	0
  2379     1049  3437               	retlw	55
  2380     104A  3438               	retlw	56
  2381     104B  340F               	retlw	15
  2382     104C  3433               	retlw	51
  2383     104D  3413               	retlw	19
  2384     104E  342D               	retlw	45
  2385     104F  3400               	retlw	0
  2386     1050  3400               	retlw	0
  2387     1051  3400               	retlw	0
  2388     1052  3434               	retlw	52
  2389     1053  3400               	retlw	0
  2390     1054  342F               	retlw	47
  2391     1055  342E               	retlw	46
  2392     1056  3400               	retlw	0
  2393     1057  3400               	retlw	0
  2394     1058  3439               	retlw	57
  2395     1059  34E5               	retlw	229
  2396     105A  3428               	retlw	40
  2397     105B  3430               	retlw	48
  2398     105C  3400               	retlw	0
  2399     105D  3431               	retlw	49
  2400     105E  3400               	retlw	0
  2401     105F  3400               	retlw	0
  2402     1060  3400               	retlw	0
  2403     1061  3400               	retlw	0
  2404     1062  3400               	retlw	0
  2405     1063  3400               	retlw	0
  2406     1064  3400               	retlw	0
  2407     1065  3400               	retlw	0
  2408     1066  342A               	retlw	42
  2409     1067  3400               	retlw	0
  2410     1068  3400               	retlw	0
  2411     1069  341E               	retlw	30
  2412     106A  3400               	retlw	0
  2413     106B  3421               	retlw	33
  2414     106C  3424               	retlw	36
  2415     106D  3400               	retlw	0
  2416     106E  3400               	retlw	0
  2417     106F  3400               	retlw	0
  2418     1070  3427               	retlw	39
  2419     1071  3437               	retlw	55
  2420     1072  341F               	retlw	31
  2421     1073  3422               	retlw	34
  2422     1074  3423               	retlw	35
  2423     1075  3425               	retlw	37
  2424     1076  3429               	retlw	41
  2425     1077  3453               	retlw	83
  2426     1078  3444               	retlw	68
  2427     1079  342E               	retlw	46
  2428     107A  3420               	retlw	32
  2429     107B  342D               	retlw	45
  2430     107C  3425               	retlw	37
  2431     107D  3426               	retlw	38
  2432     107E  3400               	retlw	0
  2433     107F  3400               	retlw	0
  2434     1080  3400               	retlw	0
  2435     1081  3400               	retlw	0
  2436     1082  3400               	retlw	0
  2437     1083  3440               	retlw	64
  2438     1084                     __end_of_ps2UsbMap:
  2439                           
  2440                           	psect	stringtext3
  2441     18CA                     __pstringtext3:
  2442     18CA                     _USB_SD_Ptr:
  2443     18CA  34D0               	retlw	low (_sd000| (0+32768))
  2444     18CB  3498               	retlw	high (_sd000| (0+32768))
  2445     18CC  343F               	retlw	low (_sd001| (0+32768))
  2446     18CD  3498               	retlw	high (_sd001| (0+32768))
  2447     18CE  349C               	retlw	low (_sd002| (0+32768))
  2448     18CF  3498               	retlw	high (_sd002| (0+32768))
  2449     18D0                     __end_of_USB_SD_Ptr:
  2450                           
  2451                           	psect	stringtext4
  2452     18D4                     __pstringtext4:
  2453     18D4                     _USB_CD_Ptr:
  2454     18D4  3473               	retlw	low (_configDescriptor1| (0+32768))
  2455     18D5  3498               	retlw	high (_configDescriptor1| (0+32768))
  2456     18D6                     __end_of_USB_CD_Ptr:
  2457                           
  2458                           	psect	stringtext5
  2459     1800                     __pstringtext5:
  2460     1800                     _hid_rpt01:
  2461     1800  3405               	retlw	5
  2462     1801  3401               	retlw	1
  2463     1802  3409               	retlw	9
  2464     1803  3406               	retlw	6
  2465     1804  34A1               	retlw	161
  2466     1805  3401               	retlw	1
  2467     1806  3405               	retlw	5
  2468     1807  3407               	retlw	7
  2469     1808  3419               	retlw	25
  2470     1809  34E0               	retlw	224
  2471     180A  3429               	retlw	41
  2472     180B  34E7               	retlw	231
  2473     180C  3415               	retlw	21
  2474     180D  3400               	retlw	0
  2475     180E  3425               	retlw	37
  2476     180F  3401               	retlw	1
  2477     1810  3475               	retlw	117
  2478     1811  3401               	retlw	1
  2479     1812  3495               	retlw	149
  2480     1813  3408               	retlw	8
  2481     1814  3481               	retlw	129
  2482     1815  3402               	retlw	2
  2483     1816  3495               	retlw	149
  2484     1817  3401               	retlw	1
  2485     1818  3475               	retlw	117
  2486     1819  3408               	retlw	8
  2487     181A  3481               	retlw	129
  2488     181B  3403               	retlw	3
  2489     181C  3495               	retlw	149
  2490     181D  3405               	retlw	5
  2491     181E  3475               	retlw	117
  2492     181F  3401               	retlw	1
  2493     1820  3405               	retlw	5
  2494     1821  3408               	retlw	8
  2495     1822  3419               	retlw	25
  2496     1823  3401               	retlw	1
  2497     1824  3429               	retlw	41
  2498     1825  3405               	retlw	5
  2499     1826  3491               	retlw	145
  2500     1827  3402               	retlw	2
  2501     1828  3495               	retlw	149
  2502     1829  3401               	retlw	1
  2503     182A  3475               	retlw	117
  2504     182B  3403               	retlw	3
  2505     182C  3491               	retlw	145
  2506     182D  3403               	retlw	3
  2507     182E  3495               	retlw	149
  2508     182F  3406               	retlw	6
  2509     1830  3475               	retlw	117
  2510     1831  3408               	retlw	8
  2511     1832  3415               	retlw	21
  2512     1833  3400               	retlw	0
  2513     1834  3425               	retlw	37
  2514     1835  3465               	retlw	101
  2515     1836  3405               	retlw	5
  2516     1837  3407               	retlw	7
  2517     1838  3419               	retlw	25
  2518     1839  3400               	retlw	0
  2519     183A  3429               	retlw	41
  2520     183B  3465               	retlw	101
  2521     183C  3481               	retlw	129
  2522     183D  3400               	retlw	0
  2523     183E  34C0               	retlw	192
  2524     183F                     __end_of_hid_rpt01:
  2525                           
  2526                           	psect	stringtext6
  2527     183F                     __pstringtext6:
  2528     183F                     _sd001:
  2529     183F  3434               	retlw	52
  2530     1840  3403               	retlw	3
  2531     1841  344D               	retlw	77
  2532     1842  3400               	retlw	0
  2533     1843  3469               	retlw	105
  2534     1844  3400               	retlw	0
  2535     1845  3463               	retlw	99
  2536     1846  3400               	retlw	0
  2537     1847  3472               	retlw	114
  2538     1848  3400               	retlw	0
  2539     1849  346F               	retlw	111
  2540     184A  3400               	retlw	0
  2541     184B  3463               	retlw	99
  2542     184C  3400               	retlw	0
  2543     184D  3468               	retlw	104
  2544     184E  3400               	retlw	0
  2545     184F  3469               	retlw	105
  2546     1850  3400               	retlw	0
  2547     1851  3470               	retlw	112
  2548     1852  3400               	retlw	0
  2549     1853  3420               	retlw	32
  2550     1854  3400               	retlw	0
  2551     1855  3454               	retlw	84
  2552     1856  3400               	retlw	0
  2553     1857  3465               	retlw	101
  2554     1858  3400               	retlw	0
  2555     1859  3463               	retlw	99
  2556     185A  3400               	retlw	0
  2557     185B  3468               	retlw	104
  2558     185C  3400               	retlw	0
  2559     185D  346E               	retlw	110
  2560     185E  3400               	retlw	0
  2561     185F  346F               	retlw	111
  2562     1860  3400               	retlw	0
  2563     1861  346C               	retlw	108
  2564     1862  3400               	retlw	0
  2565     1863  346F               	retlw	111
  2566     1864  3400               	retlw	0
  2567     1865  3467               	retlw	103
  2568     1866  3400               	retlw	0
  2569     1867  3479               	retlw	121
  2570     1868  3400               	retlw	0
  2571     1869  3420               	retlw	32
  2572     186A  3400               	retlw	0
  2573     186B  3449               	retlw	73
  2574     186C  3400               	retlw	0
  2575     186D  346E               	retlw	110
  2576     186E  3400               	retlw	0
  2577     186F  3463               	retlw	99
  2578     1870  3400               	retlw	0
  2579     1871  342E               	retlw	46
  2580     1872  3400               	retlw	0
  2581     1873                     __end_of_sd001:
  2582                           
  2583                           	psect	stringtext7
  2584     1873                     __pstringtext7:
  2585     1873                     _configDescriptor1:
  2586     1873  3409               	retlw	9
  2587     1874  3402               	retlw	2
  2588     1875  3429               	retlw	41
  2589     1876  3400               	retlw	0
  2590     1877  3401               	retlw	1
  2591     1878  3401               	retlw	1
  2592     1879  3400               	retlw	0
  2593     187A  34C0               	retlw	192
  2594     187B  3432               	retlw	50
  2595     187C  3409               	retlw	9
  2596     187D  3404               	retlw	4
  2597     187E  3400               	retlw	0
  2598     187F  3400               	retlw	0
  2599     1880  3402               	retlw	2
  2600     1881  3403               	retlw	3
  2601     1882  3401               	retlw	1
  2602     1883  3401               	retlw	1
  2603     1884  3400               	retlw	0
  2604     1885  3409               	retlw	9
  2605     1886  3421               	retlw	33
  2606     1887  3411               	retlw	17
  2607     1888  3401               	retlw	1
  2608     1889  3400               	retlw	0
  2609     188A  3401               	retlw	1
  2610     188B  3422               	retlw	34
  2611     188C  343F               	retlw	63
  2612     188D  3400               	retlw	0
  2613     188E  3407               	retlw	7
  2614     188F  3405               	retlw	5
  2615     1890  3481               	retlw	129
  2616     1891  3403               	retlw	3
  2617     1892  3408               	retlw	8
  2618     1893  3400               	retlw	0
  2619     1894  3401               	retlw	1
  2620     1895  3407               	retlw	7
  2621     1896  3405               	retlw	5
  2622     1897  3401               	retlw	1
  2623     1898  3403               	retlw	3
  2624     1899  3408               	retlw	8
  2625     189A  3400               	retlw	0
  2626     189B  3401               	retlw	1
  2627     189C                     __end_of_configDescriptor1:
  2628                           
  2629                           	psect	stringtext8
  2630     189C                     __pstringtext8:
  2631     189C                     _sd002:
  2632     189C  341C               	retlw	28
  2633     189D  3403               	retlw	3
  2634     189E  344B               	retlw	75
  2635     189F  3400               	retlw	0
  2636     18A0  3465               	retlw	101
  2637     18A1  3400               	retlw	0
  2638     18A2  3479               	retlw	121
  2639     18A3  3400               	retlw	0
  2640     18A4  3462               	retlw	98
  2641     18A5  3400               	retlw	0
  2642     18A6  346F               	retlw	111
  2643     18A7  3400               	retlw	0
  2644     18A8  3461               	retlw	97
  2645     18A9  3400               	retlw	0
  2646     18AA  3472               	retlw	114
  2647     18AB  3400               	retlw	0
  2648     18AC  3464               	retlw	100
  2649     18AD  3400               	retlw	0
  2650     18AE  3420               	retlw	32
  2651     18AF  3400               	retlw	0
  2652     18B0  3444               	retlw	68
  2653     18B1  3400               	retlw	0
  2654     18B2  3465               	retlw	101
  2655     18B3  3400               	retlw	0
  2656     18B4  346D               	retlw	109
  2657     18B5  3400               	retlw	0
  2658     18B6  346F               	retlw	111
  2659     18B7  3400               	retlw	0
  2660     18B8                     __end_of_sd002:
  2661                           
  2662                           	psect	stringtext9
  2663     18B8                     __pstringtext9:
  2664     18B8                     _device_dsc:
  2665     18B8  3412               	retlw	18
  2666     18B9  3401               	retlw	1
  2667     18BA  3400               	retlw	0
  2668     18BB  3402               	retlw	2
  2669     18BC  3400               	retlw	0
  2670     18BD  3400               	retlw	0
  2671     18BE  3400               	retlw	0
  2672     18BF  3408               	retlw	8
  2673     18C0  34D8               	retlw	216
  2674     18C1  3404               	retlw	4
  2675     18C2  3455               	retlw	85
  2676     18C3  3400               	retlw	0
  2677     18C4  3401               	retlw	1
  2678     18C5  3400               	retlw	0
  2679     18C6  3401               	retlw	1
  2680     18C7  3402               	retlw	2
  2681     18C8  3400               	retlw	0
  2682     18C9  3401               	retlw	1
  2683     18CA                     __end_of_device_dsc:
  2684                           
  2685                           	psect	stringtext10
  2686     18D0                     __pstringtext10:
  2687     18D0                     _sd000:
  2688     18D0  3404               	retlw	4
  2689     18D1  3403               	retlw	3
  2690     18D2  3409               	retlw	9
  2691     18D3  3404               	retlw	4
  2692     18D4                     __end_of_sd000:
  2693                           
  2694                           	psect	nvBANK2
  2695     016A                     __pnvBANK2:
  2696     016A                     _IOCAF5_InterruptHandler:
  2697     016A                     	ds	2
  2698     016C                     _IOCAF4_InterruptHandler:
  2699     016C                     	ds	2
  2700     000C                     _PORTAbits	set	12
  2701     001C                     _T2CONbits	set	28
  2702     001C                     _T2CON	set	28
  2703     001A                     _TMR2	set	26
  2704     001B                     _PR2	set	27
  2705     0011                     _PIR1bits	set	17
  2706     0012                     _PIR2bits	set	18
  2707     000B                     _INTCONbits	set	11
  2708     008C                     _TRISAbits	set	140
  2709     0091                     _PIE1bits	set	145
  2710     0092                     _PIE2bits	set	146
  2711     0097                     _WDTCON	set	151
  2712     0098                     _OSCTUNE	set	152
  2713     0099                     _OSCCON	set	153
  2714     0095                     _OPTION_REGbits	set	149
  2715     008E                     _TRISC	set	142
  2716     008D                     _TRISB	set	141
  2717     008C                     _TRISA	set	140
  2718     04D6                     _PLLRDY	set	1238
  2719     010C                     _LATAbits	set	268
  2720     0116                     _BORCON	set	278
  2721     011D                     _APFCON	set	285
  2722     010E                     _LATC	set	270
  2723     010D                     _LATB	set	269
  2724     010C                     _LATA	set	268
  2725     0199                     _RCREG	set	409
  2726     019D                     _RCSTAbits	set	413
  2727     019A                     _TXREG	set	410
  2728     019C                     _SPBRGH	set	412
  2729     019B                     _SPBRGL	set	411
  2730     019E                     _TXSTA	set	414
  2731     019D                     _RCSTA	set	413
  2732     019F                     _BAUDCON	set	415
  2733     018C                     _ANSELA	set	396
  2734     018D                     _ANSELB	set	397
  2735     018E                     _ANSELC	set	398
  2736     020C                     _WPUA	set	524
  2737     020D                     _WPUB	set	525
  2738     039B                     _ACTCON	set	923
  2739     0391                     _IOCAPbits	set	913
  2740     0392                     _IOCANbits	set	914
  2741     0393                     _IOCAFbits	set	915
  2742     0E98                     _UEP0bits	set	3736
  2743     0E8E                     _UCON	set	3726
  2744     0E8F                     _USTAT	set	3727
  2745     0E92                     _UIEbits	set	3730
  2746     0E90                     _UIRbits	set	3728
  2747     0E96                     _UADDR	set	3734
  2748     0E8E                     _UCONbits	set	3726
  2749     0E92                     _UIE	set	3730
  2750     0E97                     _UEIE	set	3735
  2751     0E91                     _UCFG	set	3729
  2752     0E90                     _UIR	set	3728
  2753     0E93                     _UEIR	set	3731
  2754     0E99                     _UEP1	set	3737
  2755     0E98                     _UEP0	set	3736
  2756                           
  2757                           	psect	cinit
  2758     003F                     start_initialization:	
  2759                           ; #config settings
  2760                           
  2761     003F                     __initialization:	;BIGRAM
  2762                           
  2763                           ; Clear objects allocated to BIGRAM
  2764     003F  302C               	movlw	low (0+9004)
  2765     0040  0084               	movwf	4
  2766     0041  3023               	movlw	high (0+9004)
  2767     0042  0085               	movwf	5
  2768     0043  30C4               	movlw	196
  2769     0044  00FE               	movwf	btemp
  2770     0045  3000               	movlw	0
  2771     0046  00FF               	movwf	btemp+1
  2772     0047  3190  208F  3180   	fcall	clear_ram0
  2773                           
  2774                           ; Clear objects allocated to BANK0
  2775     004A  3061               	movlw	low __pbssBANK0
  2776     004B  0084               	movwf	4
  2777     004C  3000               	movlw	high __pbssBANK0
  2778     004D  0085               	movwf	5
  2779     004E  300F               	movlw	15
  2780     004F  00FE               	movwf	btemp
  2781     0050  3000               	movlw	0
  2782     0051  00FF               	movwf	btemp+1
  2783     0052  3190  208F  3180   	fcall	clear_ram0
  2784                           
  2785                           ; Clear objects allocated to BANK1
  2786     0055  0021               	movlb	1	; select bank1
  2787     0056  01E8               	clrf	__pbssBANK1& (0+127)
  2788     0057  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2789     0058  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2790     0059  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  2791     005A  01EC               	clrf	(__pbssBANK1+4)& (0+127)
  2792     005B  01ED               	clrf	(__pbssBANK1+5)& (0+127)
  2793     005C  01EE               	clrf	(__pbssBANK1+6)& (0+127)
  2794     005D  01EF               	clrf	(__pbssBANK1+7)& (0+127)
  2795                           
  2796                           ; Clear objects allocated to BANK2
  2797     005E  3021               	movlw	low __pbssBANK2
  2798     005F  0084               	movwf	4
  2799     0060  3001               	movlw	high __pbssBANK2
  2800     0061  0085               	movwf	5
  2801     0062  3049               	movlw	73
  2802     0063  00FE               	movwf	btemp
  2803     0064  3000               	movlw	0
  2804     0065  00FF               	movwf	btemp+1
  2805     0066  3190  208F  3180   	fcall	clear_ram0
  2806                           
  2807                           ; Clear objects allocated to BANK3
  2808     0069  30A0               	movlw	low __pbssBANK3
  2809     006A  0084               	movwf	4
  2810     006B  3001               	movlw	high __pbssBANK3
  2811     006C  0085               	movwf	5
  2812     006D  3031               	movlw	49
  2813     006E  00FE               	movwf	btemp
  2814     006F  3000               	movlw	0
  2815     0070  00FF               	movwf	btemp+1
  2816     0071  3190  208F         	fcall	clear_ram0
  2817     0073                     end_of_initialization:	
  2818                           ;End of C runtime variable initialization code
  2819                           
  2820     0073                     __end_of__initialization:
  2821     0073  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2822     0074  0020               	movlb	0
  2823     0075  3193  2BCD         	ljmp	_main	;jump to C main() function
  2824                           
  2825                           	psect	bssBANK0
  2826     0061                     __pbssBANK0:
  2827     0061                     _pBDTEntryIn:
  2828     0061                     	ds	4
  2829     0065                     _SOFCounter:
  2830     0065                     	ds	2
  2831     0067                     _pBDTEntryEP0OutNext:
  2832     0067                     	ds	2
  2833     0069                     _keyboardCommandCount:
  2834     0069                     	ds	1
  2835     006A                     _controlTransferState:
  2836     006A                     	ds	1
  2837     006B                     _pBDTEntryEP0OutCurrent:
  2838     006B                     	ds	1
  2839     006C                     _USBDeviceState:
  2840     006C                     	ds	1
  2841     006D                     _USTATcopy:
  2842     006D                     	ds	1
  2843     006E                     _USBAlternateInterface:
  2844     006E                     	ds	1
  2845     006F                     _USBActiveConfiguration:
  2846     006F                     	ds	1
  2847                           
  2848                           	psect	bssBANK1
  2849     00E8                     __pbssBANK1:
  2850     00E8                     _inPipes:
  2851     00E8                     	ds	5
  2852     00ED                     _endpoint_number:
  2853     00ED                     	ds	1
  2854     00EE                     _shortPacketStatus:
  2855     00EE                     	ds	1
  2856     00EF                     _eusartRxHead:
  2857     00EF                     	ds	1
  2858                           
  2859                           	psect	bssBANK2
  2860     0121                     __pbssBANK2:
  2861     0121                     _outPipes:
  2862     0121                     	ds	7
  2863     0128                     _timeMs:
  2864     0128                     	ds	4
  2865     012C                     _prevTimeMs:
  2866     012C                     	ds	4
  2867     0130                     _pBDTEntryOut:
  2868     0130                     	ds	4
  2869     0134                     _OldSOFCount:
  2870     0134                     	ds	2
  2871     0136                     _LocalSOFCount:
  2872     0136                     	ds	2
  2873     0138                     _keyboardIdleRate:
  2874     0138                     	ds	2
  2875     013A                     _ep_data_out:
  2876     013A                     	ds	2
  2877     013C                     _ep_data_in:
  2878     013C                     	ds	2
  2879     013E                     _EUSART_ErrorHandler:
  2880     013E                     	ds	2
  2881     0140                     _EUSART_OverrunErrorHandler:
  2882     0140                     	ds	2
  2883     0142                     _EUSART_FramingErrorHandler:
  2884     0142                     	ds	2
  2885     0144                     _TMR2_InterruptHandler:
  2886     0144                     	ds	2
  2887     0146                     _EUSART_RxDefaultInterruptHandler:
  2888     0146                     	ds	2
  2889     0148                     _EUSART_TxDefaultInterruptHandler:
  2890     0148                     	ds	2
  2891     014A                     _keyboardCommandOnes:
  2892     014A                     	ds	1
  2893     014B                     _keyboardCommandBits:
  2894     014B                     	ds	1
  2895     014C                     _keyboardCommand:
  2896     014C                     	ds	1
  2897     014D                     _keyboardIsBreak:
  2898     014D                     	ds	1
  2899     014E                     _keyboardIsExtend:
  2900     014E                     	ds	1
  2901     014F                     _keyboardData:
  2902     014F                     	ds	1
  2903     0150                     _keyboardScanCodeValid:
  2904     0150                     	ds	1
  2905     0151                     _keyboardOnesCount:
  2906     0151                     	ds	1
  2907     0152                     _keyboardIndexData:
  2908     0152                     	ds	1
  2909     0153                     _keyboardState:
  2910     0153                     	ds	1
  2911     0154                     _USBTicksSinceSuspendEnd:
  2912     0154                     	ds	1
  2913     0155                     _USBDeferOUTDataStagePackets:
  2914     0155                     	ds	1
  2915     0156                     _USBDeferINDataStagePackets:
  2916     0156                     	ds	1
  2917     0157                     _USBStatusStageEnabledFlag2:
  2918     0157                     	ds	1
  2919     0158                     _USBStatusStageEnabledFlag1:
  2920     0158                     	ds	1
  2921     0159                     _USBDeferStatusStagePacket:
  2922     0159                     	ds	1
  2923     015A                     _USBStatusStageTimeoutCounter:
  2924     015A                     	ds	1
  2925     015B                     _BothEP0OutUOWNsSet:
  2926     015B                     	ds	1
  2927     015C                     _USBBusIsSuspended:
  2928     015C                     	ds	1
  2929     015D                     _RemoteWakeup:
  2930     015D                     	ds	1
  2931     015E                     _pDst:
  2932     015E                     	ds	1
  2933     015F                     _eusartRxLastError:
  2934     015F                     	ds	1
  2935     0160                     _eusartRxCount:
  2936     0160                     	ds	1
  2937     0161                     _eusartRxTail:
  2938     0161                     	ds	1
  2939     0162                     _eusartTxBufferRemaining:
  2940     0162                     	ds	1
  2941     0163                     _eusartTxTail:
  2942     0163                     	ds	1
  2943     0164                     _eusartTxHead:
  2944     0164                     	ds	1
  2945     0165                     _keyboardScanCode:
  2946     0165                     	ds	3
  2947     0168                     _active_protocol:
  2948     0168                     	ds	1
  2949     0169                     _idle_rate:
  2950     0169                     	ds	1
  2951                           
  2952                           	psect	bssBANK3
  2953     01A0                     __pbssBANK3:
  2954     01A0                     main@F3445:
  2955     01A0                     	ds	10
  2956     01AA                     _oldInputReport:
  2957     01AA                     	ds	8
  2958     01B2                     _eusartRxStatusBuffer:
  2959     01B2                     	ds	8
  2960     01BA                     _eusartRxBuffer:
  2961     01BA                     	ds	8
  2962     01C2                     _eusartTxBuffer:
  2963     01C2                     	ds	8
  2964     01CA                     _USB1msTickCount:
  2965     01CA                     	ds	4
  2966     01CE                     main@F3441:
  2967     01CE                     	ds	3
  2968                           
  2969                           	psect	clrtext
  2970     108F                     clear_ram0:	
  2971                           ;	Called with FSR0 containing the base address, and
  2972                           ;	btemp/btemp+1 has the size to clear
  2973                           
  2974     108F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2975     1090                     clrloop0:
  2976     1090  0180               	clrf	0	;clear RAM location pointed to by FSR
  2977     1091  3101               	addfsr 0,1
  2978     1092  3001               	movlw	1
  2979     1093  02FE               	subwf	126,f
  2980     1094  3000               	movlw	0
  2981     1095  3BFF               	subwfb	127,f
  2982     1096  087F               	movf	127,w
  2983     1097  047E               	iorwf	126,w
  2984     1098  1903               	btfsc	3,2
  2985     1099  3400               	retlw	0	;all done for this memory range, return
  2986     109A  2890               	goto	clrloop0	;have we reached the end yet?
  2987                           
  2988                           	psect	cstackBANK1
  2989     00A8                     __pcstackBANK1:
  2990     00A8                     ?_IOCAF4_SetInterruptHandler:
  2991     00A8                     ?_IOCAF5_SetInterruptHandler:	
  2992                           ; 1 bytes @ 0x0
  2993                           
  2994     00A8                     ??_OSCILLATOR_Initialize:	
  2995                           ; 1 bytes @ 0x0
  2996                           
  2997     00A8                     ??_WDT_Initialize:	
  2998                           ; 1 bytes @ 0x0
  2999                           
  3000     00A8                     ??_USBDeviceInit:	
  3001                           ; 1 bytes @ 0x0
  3002                           
  3003     00A8                     ??_USBDeviceAttach:	
  3004                           ; 1 bytes @ 0x0
  3005                           
  3006     00A8                     ?_TMR2_SetInterruptHandler:	
  3007                           ; 1 bytes @ 0x0
  3008                           
  3009     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3010                           ; 1 bytes @ 0x0
  3011                           
  3012     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3013                           ; 1 bytes @ 0x0
  3014                           
  3015     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3016                           ; 1 bytes @ 0x0
  3017                           
  3018     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3019                           ; 1 bytes @ 0x0
  3020                           
  3021     00A8                     ?_EUSART_SetErrorHandler:	
  3022                           ; 1 bytes @ 0x0
  3023                           
  3024     00A8                     ?_memset:	
  3025                           ; 1 bytes @ 0x0
  3026                           
  3027     00A8                     ?_GenericQueue_Init:	
  3028                           ; 1 bytes @ 0x0
  3029                           
  3030     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3031                           ; 1 bytes @ 0x0
  3032                           
  3033     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3034                           ; 1 bytes @ 0x0
  3035                           
  3036     00A8                     ??_PS2Keyboard_SendCommand:	
  3037                           ; 1 bytes @ 0x0
  3038                           
  3039     00A8                     ??_TMR2_StartTimer:	
  3040                           ; 1 bytes @ 0x0
  3041                           
  3042     00A8                     ?___bmul:	
  3043                           ; 1 bytes @ 0x0
  3044                           
  3045     00A8                     ?_USBTransferOnePacket:	
  3046                           ; 1 bytes @ 0x0
  3047                           
  3048     00A8                     ?_GenericQueue_IsEmpty:	
  3049                           ; 2 bytes @ 0x0
  3050                           
  3051     00A8                     ?_GenericQueue_IsFull:	
  3052                           ; 2 bytes @ 0x0
  3053                           
  3054     00A8                     ?___awmod:	
  3055                           ; 2 bytes @ 0x0
  3056                           
  3057     00A8                     USBTransferOnePacket@dir:	
  3058                           ; 2 bytes @ 0x0
  3059                           
  3060     00A8                     PS2Keyboard_SendCommand@cmd:	
  3061                           ; 1 bytes @ 0x0
  3062                           
  3063     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3064                           ; 1 bytes @ 0x0
  3065                           
  3066     00A8                     ___bmul@multiplicand:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3070                           ; 1 bytes @ 0x0
  3071                           
  3072     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3076                           ; 2 bytes @ 0x0
  3077                           
  3078     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3085                           ; 2 bytes @ 0x0
  3086                           
  3087     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3088                           ; 2 bytes @ 0x0
  3089                           
  3090     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3091                           ; 2 bytes @ 0x0
  3092                           
  3093     00A8                     GenericQueue_Init@q:	
  3094                           ; 2 bytes @ 0x0
  3095                           
  3096     00A8                     GenericQueue_IsEmpty@q:	
  3097                           ; 2 bytes @ 0x0
  3098                           
  3099     00A8                     GenericQueue_IsFull@q:	
  3100                           ; 2 bytes @ 0x0
  3101                           
  3102     00A8                     ___awmod@divisor:	
  3103                           ; 2 bytes @ 0x0
  3104                           
  3105     00A8                     memset@c:	
  3106                           ; 2 bytes @ 0x0
  3107                           
  3108                           
  3109                           ; 2 bytes @ 0x0
  3110     00A8                     	ds	1
  3111     00A9                     ??_APP_KeyboardProcessOutputReport:
  3112     00A9                     ??___bmul:	
  3113                           ; 1 bytes @ 0x1
  3114                           
  3115     00A9                     USBTransferOnePacket@data:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118                           
  3119                           ; 2 bytes @ 0x1
  3120     00A9                     	ds	1
  3121     00AA                     ??_IOCAF4_SetInterruptHandler:
  3122     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3123                           ; 1 bytes @ 0x2
  3124                           
  3125     00AA                     ??_TMR2_Initialize:	
  3126                           ; 1 bytes @ 0x2
  3127                           
  3128     00AA                     ??_EUSART_Initialize:	
  3129                           ; 1 bytes @ 0x2
  3130                           
  3131     00AA                     ??_TMR2_SetInterruptHandler:	
  3132                           ; 1 bytes @ 0x2
  3133                           
  3134     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3135                           ; 1 bytes @ 0x2
  3136                           
  3137     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3138                           ; 1 bytes @ 0x2
  3139                           
  3140     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3141                           ; 1 bytes @ 0x2
  3142                           
  3143     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3144                           ; 1 bytes @ 0x2
  3145                           
  3146     00AA                     ??_EUSART_SetErrorHandler:	
  3147                           ; 1 bytes @ 0x2
  3148                           
  3149     00AA                     ??_SysTime_Init:	
  3150                           ; 1 bytes @ 0x2
  3151                           
  3152     00AA                     ??_GenericQueue_IsEmpty:	
  3153                           ; 1 bytes @ 0x2
  3154                           
  3155     00AA                     ??_PIN_MANAGER_Initialize:	
  3156                           ; 1 bytes @ 0x2
  3157                           
  3158     00AA                     ??_GenericQueue_IsFull:	
  3159                           ; 1 bytes @ 0x2
  3160                           
  3161     00AA                     ___bmul@product:	
  3162                           ; 1 bytes @ 0x2
  3163                           
  3164     00AA                     GenericQueue_Init@element_size:	
  3165                           ; 1 bytes @ 0x2
  3166                           
  3167     00AA                     ___awmod@dividend:	
  3168                           ; 2 bytes @ 0x2
  3169                           
  3170     00AA                     memset@n:	
  3171                           ; 2 bytes @ 0x2
  3172                           
  3173                           
  3174                           ; 2 bytes @ 0x2
  3175     00AA                     	ds	1
  3176     00AB                     USBTransferOnePacket@len:
  3177     00AB                     ___bmul@multiplier:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180                           
  3181                           ; 1 bytes @ 0x3
  3182     00AB                     	ds	1
  3183     00AC                     ??_memset:
  3184     00AC                     ??_USBTransferOnePacket:	
  3185                           ; 1 bytes @ 0x4
  3186                           
  3187     00AC                     ??_PS2Keyboard_Init:	
  3188                           ; 1 bytes @ 0x4
  3189                           
  3190     00AC                     ??_GenericQueue_Init:	
  3191                           ; 1 bytes @ 0x4
  3192                           
  3193     00AC                     ??___awmod:	
  3194                           ; 1 bytes @ 0x4
  3195                           
  3196     00AC                     USBDeviceInit@p:	
  3197                           ; 1 bytes @ 0x4
  3198                           
  3199                           
  3200                           ; 2 bytes @ 0x4
  3201     00AC                     	ds	1
  3202     00AD                     ___awmod@counter:
  3203     00AD                     memset@p:	
  3204                           ; 1 bytes @ 0x5
  3205                           
  3206                           
  3207                           ; 1 bytes @ 0x5
  3208     00AD                     	ds	1
  3209     00AE                     USBDeviceInit@i_1369:
  3210     00AE                     ___awmod@sign:	
  3211                           ; 1 bytes @ 0x6
  3212                           
  3213     00AE                     memset@dest:	
  3214                           ; 1 bytes @ 0x6
  3215                           
  3216                           
  3217                           ; 1 bytes @ 0x6
  3218     00AE                     	ds	1
  3219     00AF                     ?___wmul:
  3220     00AF                     USBDeviceInit@i:	
  3221                           ; 2 bytes @ 0x7
  3222                           
  3223     00AF                     ___wmul@multiplier:	
  3224                           ; 1 bytes @ 0x7
  3225                           
  3226                           
  3227                           ; 2 bytes @ 0x7
  3228     00AF                     	ds	1
  3229     00B0                     ??_SYSTEM_Initialize:
  3230     00B0                     USBTransferOnePacket@ep:	
  3231                           ; 1 bytes @ 0x8
  3232                           
  3233                           
  3234                           ; 1 bytes @ 0x8
  3235     00B0                     	ds	1
  3236     00B1                     USBTransferOnePacket@handle:
  3237     00B1                     ___wmul@multiplicand:	
  3238                           ; 2 bytes @ 0x9
  3239                           
  3240                           
  3241                           ; 2 bytes @ 0x9
  3242     00B1                     	ds	2
  3243     00B3                     ??___wmul:
  3244     00B3                     ___wmul@product:	
  3245                           ; 1 bytes @ 0xB
  3246                           
  3247                           
  3248                           ; 2 bytes @ 0xB
  3249     00B3                     	ds	2
  3250     00B5                     ?_memcpy:
  3251     00B5                     ?_memcmp:	
  3252                           ; 2 bytes @ 0xD
  3253                           
  3254     00B5                     memcmp@vl:	
  3255                           ; 2 bytes @ 0xD
  3256                           
  3257     00B5                     memcpy@d1:	
  3258                           ; 2 bytes @ 0xD
  3259                           
  3260                           
  3261                           ; 2 bytes @ 0xD
  3262     00B5                     	ds	2
  3263     00B7                     memcmp@vr:
  3264     00B7                     memcpy@s1:	
  3265                           ; 1 bytes @ 0xF
  3266                           
  3267                           
  3268                           ; 2 bytes @ 0xF
  3269     00B7                     	ds	1
  3270     00B8                     memcmp@n:
  3271                           
  3272                           ; 2 bytes @ 0x10
  3273     00B8                     	ds	1
  3274     00B9                     memcpy@n:
  3275                           
  3276                           ; 2 bytes @ 0x11
  3277     00B9                     	ds	1
  3278     00BA                     ??_memcmp:
  3279                           
  3280                           ; 1 bytes @ 0x12
  3281     00BA                     	ds	1
  3282     00BB                     ??_memcpy:
  3283     00BB                     memcmp@l:	
  3284                           ; 1 bytes @ 0x13
  3285                           
  3286     00BB                     memcpy@d:	
  3287                           ; 2 bytes @ 0x13
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x13
  3291     00BB                     	ds	2
  3292     00BD                     memcmp@r:
  3293     00BD                     memcpy@s:	
  3294                           ; 1 bytes @ 0x15
  3295                           
  3296                           
  3297                           ; 2 bytes @ 0x15
  3298     00BD                     	ds	1
  3299     00BE                     ?_GenericQueue_Contains:
  3300     00BE                     GenericQueue_Contains@q:	
  3301                           ; 1 bytes @ 0x16
  3302                           
  3303                           
  3304                           ; 2 bytes @ 0x16
  3305     00BE                     	ds	1
  3306     00BF                     memcpy@tmp:
  3307                           
  3308                           ; 1 bytes @ 0x17
  3309     00BF                     	ds	1
  3310     00C0                     ?_GenericQueue_CopyToArray:
  3311     00C0                     ?_GenericQueue_Remove:	
  3312                           ; 1 bytes @ 0x18
  3313                           
  3314     00C0                     ?_GenericQueue_Enqueue:	
  3315                           ; 1 bytes @ 0x18
  3316                           
  3317     00C0                     ?_GenericQueue_Dequeue:	
  3318                           ; 1 bytes @ 0x18
  3319                           
  3320     00C0                     GenericQueue_Contains@item:	
  3321                           ; 1 bytes @ 0x18
  3322                           
  3323     00C0                     GenericQueue_Enqueue@q:	
  3324                           ; 1 bytes @ 0x18
  3325                           
  3326     00C0                     GenericQueue_Dequeue@q:	
  3327                           ; 2 bytes @ 0x18
  3328                           
  3329     00C0                     GenericQueue_Remove@q:	
  3330                           ; 2 bytes @ 0x18
  3331                           
  3332     00C0                     GenericQueue_CopyToArray@q:	
  3333                           ; 2 bytes @ 0x18
  3334                           
  3335                           
  3336                           ; 2 bytes @ 0x18
  3337     00C0                     	ds	1
  3338     00C1                     ??_GenericQueue_Contains:
  3339                           
  3340                           ; 1 bytes @ 0x19
  3341     00C1                     	ds	1
  3342     00C2                     GenericQueue_Dequeue@item:
  3343     00C2                     GenericQueue_Remove@item:	
  3344                           ; 1 bytes @ 0x1A
  3345                           
  3346     00C2                     GenericQueue_CopyToArray@array:	
  3347                           ; 1 bytes @ 0x1A
  3348                           
  3349     00C2                     GenericQueue_Enqueue@item:	
  3350                           ; 1 bytes @ 0x1A
  3351                           
  3352                           
  3353                           ; 2 bytes @ 0x1A
  3354     00C2                     	ds	1
  3355     00C3                     ??_GenericQueue_CopyToArray:
  3356     00C3                     ??_GenericQueue_Remove:	
  3357                           ; 1 bytes @ 0x1B
  3358                           
  3359     00C3                     ??_GenericQueue_Dequeue:	
  3360                           ; 1 bytes @ 0x1B
  3361                           
  3362                           
  3363                           ; 1 bytes @ 0x1B
  3364     00C3                     	ds	1
  3365     00C4                     ??_GenericQueue_Enqueue:
  3366                           
  3367                           ; 1 bytes @ 0x1C
  3368     00C4                     	ds	1
  3369     00C5                     GenericQueue_Contains@i:
  3370                           
  3371                           ; 1 bytes @ 0x1D
  3372     00C5                     	ds	2
  3373     00C7                     ??_PS2Keyboard_GetScanCode:
  3374     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3375                           ; 1 bytes @ 0x1F
  3376                           
  3377     00C7                     GenericQueue_Remove@i:	
  3378                           ; 1 bytes @ 0x1F
  3379                           
  3380     00C7                     GenericQueue_CopyToArray@index:	
  3381                           ; 1 bytes @ 0x1F
  3382                           
  3383                           
  3384                           ; 1 bytes @ 0x1F
  3385     00C7                     	ds	1
  3386     00C8                     PS2Keyboard_GetScanCode@ret:
  3387     00C8                     GenericQueue_Remove@j:	
  3388                           ; 1 bytes @ 0x20
  3389                           
  3390     00C8                     GenericQueue_CopyToArray@count:	
  3391                           ; 1 bytes @ 0x20
  3392                           
  3393                           
  3394                           ; 1 bytes @ 0x20
  3395     00C8                     	ds	1
  3396     00C9                     ??_APP_KeyboardUpdateState:
  3397                           
  3398                           ; 1 bytes @ 0x21
  3399     00C9                     	ds	2
  3400     00CB                     APP_KeyboardUpdateState@leds:
  3401                           
  3402                           ; 1 bytes @ 0x23
  3403     00CB                     	ds	1
  3404     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3405                           
  3406                           ; 1 bytes @ 0x24
  3407     00CC                     	ds	1
  3408     00CD                     APP_KeyboardUpdateState@usbHidCode_2916:
  3409                           
  3410                           ; 1 bytes @ 0x25
  3411     00CD                     	ds	1
  3412     00CE                     APP_KeyboardUpdateState@usbHidCode_2915:
  3413                           
  3414                           ; 1 bytes @ 0x26
  3415     00CE                     	ds	1
  3416     00CF                     APP_KeyboardUpdateState@usbHidCode_2924:
  3417                           
  3418                           ; 1 bytes @ 0x27
  3419     00CF                     	ds	1
  3420     00D0                     APP_KeyboardUpdateState@scanCode:
  3421                           
  3422                           ; 1 bytes @ 0x28
  3423     00D0                     	ds	1
  3424     00D1                     ??_APP_KeyboardTasks:
  3425                           
  3426                           ; 1 bytes @ 0x29
  3427     00D1                     	ds	2
  3428     00D3                     APP_KeyboardTasks@scanCode:
  3429                           
  3430                           ; 1 bytes @ 0x2B
  3431     00D3                     	ds	1
  3432     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3433                           
  3434                           ; 1 bytes @ 0x2C
  3435     00D4                     	ds	1
  3436     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3437                           
  3438                           ; 2 bytes @ 0x2D
  3439     00D5                     	ds	2
  3440     00D7                     APP_KeyboardTasks@i:
  3441                           
  3442                           ; 1 bytes @ 0x2F
  3443     00D7                     	ds	1
  3444     00D8                     ??_main:
  3445                           
  3446                           ; 1 bytes @ 0x30
  3447     00D8                     	ds	1
  3448     00D9                     main@scanCodeStr:
  3449                           
  3450                           ; 10 bytes @ 0x31
  3451     00D9                     	ds	10
  3452     00E3                     main@scanCodeValid:
  3453                           
  3454                           ; 1 bytes @ 0x3B
  3455     00E3                     	ds	1
  3456     00E4                     main@hndlScanCode:
  3457                           
  3458                           ; 1 bytes @ 0x3C
  3459     00E4                     	ds	1
  3460     00E5                     main@scanCode:
  3461                           
  3462                           ; 3 bytes @ 0x3D
  3463     00E5                     	ds	3
  3464                           
  3465                           	psect	cstackCOMMON
  3466     0070                     __pcstackCOMMON:
  3467     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3468     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3469                           ; 1 bytes @ 0x0
  3470                           
  3471     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3472                           ; 1 bytes @ 0x0
  3473                           
  3474     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3475                           ; 1 bytes @ 0x0
  3476                           
  3477     0070                     ?_IOCAF4_ISR:	
  3478                           ; 1 bytes @ 0x0
  3479                           
  3480     0070                     ?_IOCAF5_ISR:	
  3481                           ; 1 bytes @ 0x0
  3482                           
  3483     0070                     ?_OSCILLATOR_Initialize:	
  3484                           ; 1 bytes @ 0x0
  3485                           
  3486     0070                     ?_WDT_Initialize:	
  3487                           ; 1 bytes @ 0x0
  3488                           
  3489     0070                     ?_TMR2_Initialize:	
  3490                           ; 1 bytes @ 0x0
  3491                           
  3492     0070                     ?_EUSART_Initialize:	
  3493                           ; 1 bytes @ 0x0
  3494                           
  3495     0070                     ?_USBDeviceInit:	
  3496                           ; 1 bytes @ 0x0
  3497                           
  3498     0070                     ?_USBDeviceAttach:	
  3499                           ; 1 bytes @ 0x0
  3500                           
  3501     0070                     ?_USBDeviceTasks:	
  3502                           ; 1 bytes @ 0x0
  3503                           
  3504     0070                     ?_TMR2_ISR:	
  3505                           ; 1 bytes @ 0x0
  3506                           
  3507     0070                     ??_TMR2_ISR:	
  3508                           ; 1 bytes @ 0x0
  3509                           
  3510     0070                     ?_TMR2_DefaultInterruptHandler:	
  3511                           ; 1 bytes @ 0x0
  3512                           
  3513     0070                     ??_TMR2_DefaultInterruptHandler:	
  3514                           ; 1 bytes @ 0x0
  3515                           
  3516     0070                     ?_EUSART_Receive_ISR:	
  3517                           ; 1 bytes @ 0x0
  3518                           
  3519     0070                     ?_EUSART_Transmit_ISR:	
  3520                           ; 1 bytes @ 0x0
  3521                           
  3522     0070                     ??_EUSART_Transmit_ISR:	
  3523                           ; 1 bytes @ 0x0
  3524                           
  3525     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3526                           ; 1 bytes @ 0x0
  3527                           
  3528     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3529                           ; 1 bytes @ 0x0
  3530                           
  3531     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3532                           ; 1 bytes @ 0x0
  3533                           
  3534     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3535                           ; 1 bytes @ 0x0
  3536                           
  3537     0070                     ?_EUSART_DefaultErrorHandler:	
  3538                           ; 1 bytes @ 0x0
  3539                           
  3540     0070                     ?_EUSART_RxDataHandler:	
  3541                           ; 1 bytes @ 0x0
  3542                           
  3543     0070                     ??_EUSART_RxDataHandler:	
  3544                           ; 1 bytes @ 0x0
  3545                           
  3546     0070                     ?_USBWakeFromSuspend:	
  3547                           ; 1 bytes @ 0x0
  3548                           
  3549     0070                     ?_USBSuspend:	
  3550                           ; 1 bytes @ 0x0
  3551                           
  3552     0070                     ?_USBIncrement1msInternalTimers:	
  3553                           ; 1 bytes @ 0x0
  3554                           
  3555     0070                     ??_USBIncrement1msInternalTimers:	
  3556                           ; 1 bytes @ 0x0
  3557                           
  3558     0070                     ?_USBCtrlEPAllowStatusStage:	
  3559                           ; 1 bytes @ 0x0
  3560                           
  3561     0070                     ??_USBCtrlEPAllowStatusStage:	
  3562                           ; 1 bytes @ 0x0
  3563                           
  3564     0070                     ?_USBStallHandler:	
  3565                           ; 1 bytes @ 0x0
  3566                           
  3567     0070                     ??_USBStallHandler:	
  3568                           ; 1 bytes @ 0x0
  3569                           
  3570     0070                     ?_USBCtrlEPService:	
  3571                           ; 1 bytes @ 0x0
  3572                           
  3573     0070                     ?_USBConfigureEndpoint:	
  3574                           ; 1 bytes @ 0x0
  3575                           
  3576     0070                     ?_USBCtrlTrfTxService:	
  3577                           ; 1 bytes @ 0x0
  3578                           
  3579     0070                     ??_USBCtrlTrfTxService:	
  3580                           ; 1 bytes @ 0x0
  3581                           
  3582     0070                     ?_USBCtrlTrfSetupHandler:	
  3583                           ; 1 bytes @ 0x0
  3584                           
  3585     0070                     ?_USBCtrlTrfOutHandler:	
  3586                           ; 1 bytes @ 0x0
  3587                           
  3588     0070                     ?_USBCtrlTrfInHandler:	
  3589                           ; 1 bytes @ 0x0
  3590                           
  3591     0070                     ?_USBCheckStdRequest:	
  3592                           ; 1 bytes @ 0x0
  3593                           
  3594     0070                     ?_USBStdFeatureReqHandler:	
  3595                           ; 1 bytes @ 0x0
  3596                           
  3597     0070                     ?_USBHIDCBSetReportHandler:	
  3598                           ; 1 bytes @ 0x0
  3599                           
  3600     0070                     ??_USBHIDCBSetReportHandler:	
  3601                           ; 1 bytes @ 0x0
  3602                           
  3603     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3604                           ; 1 bytes @ 0x0
  3605                           
  3606     0070                     ?_APP_KeyboardInit:	
  3607                           ; 1 bytes @ 0x0
  3608                           
  3609     0070                     ?_SysTime_Init:	
  3610                           ; 1 bytes @ 0x0
  3611                           
  3612     0070                     ?_PS2Keyboard_Init:	
  3613                           ; 1 bytes @ 0x0
  3614                           
  3615     0070                     ?_PS2Keyboard_GetScanCode:	
  3616                           ; 1 bytes @ 0x0
  3617                           
  3618     0070                     ?_APP_KeyboardTasks:	
  3619                           ; 1 bytes @ 0x0
  3620                           
  3621     0070                     ?_APP_KeyboardUpdateState:	
  3622                           ; 1 bytes @ 0x0
  3623                           
  3624     0070                     ?_APP_KeyboardProcessOutputReport:	
  3625                           ; 1 bytes @ 0x0
  3626                           
  3627     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3628                           ; 1 bytes @ 0x0
  3629                           
  3630     0070                     ?_PS2Keyboard_GetLastCommand:	
  3631                           ; 1 bytes @ 0x0
  3632                           
  3633     0070                     ?_PS2Keyboard_SendCommand:	
  3634                           ; 1 bytes @ 0x0
  3635                           
  3636     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3637                           ; 1 bytes @ 0x0
  3638                           
  3639     0070                     ?_PS2Keyboard_DataInterrupt:	
  3640                           ; 1 bytes @ 0x0
  3641                           
  3642     0070                     ?_SysTimeInterrupt:	
  3643                           ; 1 bytes @ 0x0
  3644                           
  3645     0070                     ??_SysTimeInterrupt:	
  3646                           ; 1 bytes @ 0x0
  3647                           
  3648     0070                     ?_PIN_MANAGER_Initialize:	
  3649                           ; 1 bytes @ 0x0
  3650                           
  3651     0070                     ?_PIN_MANAGER_IOC:	
  3652                           ; 1 bytes @ 0x0
  3653                           
  3654     0070                     ?_SYSTEM_Initialize:	
  3655                           ; 1 bytes @ 0x0
  3656                           
  3657     0070                     ?_INTERRUPT_InterruptManager:	
  3658                           ; 1 bytes @ 0x0
  3659                           
  3660     0070                     ?_TMR2_StartTimer:	
  3661                           ; 1 bytes @ 0x0
  3662                           
  3663     0070                     ?_USBCtrlEPAllowDataStage:	
  3664                           ; 1 bytes @ 0x0
  3665                           
  3666     0070                     ?_USBCtrlEPServiceComplete:	
  3667                           ; 1 bytes @ 0x0
  3668                           
  3669     0070                     ?_USBCtrlTrfRxService:	
  3670                           ; 1 bytes @ 0x0
  3671                           
  3672     0070                     ?_USBStdSetCfgHandler:	
  3673                           ; 1 bytes @ 0x0
  3674                           
  3675     0070                     ?_USBStdGetDscHandler:	
  3676                           ; 1 bytes @ 0x0
  3677                           
  3678     0070                     ??_USBStdGetDscHandler:	
  3679                           ; 1 bytes @ 0x0
  3680                           
  3681     0070                     ?_USBStdGetStatusHandler:	
  3682                           ; 1 bytes @ 0x0
  3683                           
  3684     0070                     ??_USBStdGetStatusHandler:	
  3685                           ; 1 bytes @ 0x0
  3686                           
  3687     0070                     ?_USBCheckHIDRequest:	
  3688                           ; 1 bytes @ 0x0
  3689                           
  3690     0070                     ?_USBHIDCBSetReportComplete:	
  3691                           ; 1 bytes @ 0x0
  3692                           
  3693     0070                     ?i1_USBDeviceInit:	
  3694                           ; 1 bytes @ 0x0
  3695                           
  3696     0070                     ??i1_USBDeviceInit:	
  3697                           ; 1 bytes @ 0x0
  3698                           
  3699     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3700                           ; 1 bytes @ 0x0
  3701                           
  3702     0070                     ?i1_PS2Keyboard_SendCommand:	
  3703                           ; 1 bytes @ 0x0
  3704                           
  3705     0070                     ??i1_PS2Keyboard_SendCommand:	
  3706                           ; 1 bytes @ 0x0
  3707                           
  3708     0070                     ?i1_GenericQueue_Init:	
  3709                           ; 1 bytes @ 0x0
  3710                           
  3711     0070                     ?_main:	
  3712                           ; 1 bytes @ 0x0
  3713                           
  3714     0070                     ?i1_USBTransferOnePacket:	
  3715                           ; 2 bytes @ 0x0
  3716                           
  3717     0070                     ?i1_GenericQueue_IsFull:	
  3718                           ; 2 bytes @ 0x0
  3719                           
  3720     0070                     ?i1___wmul:	
  3721                           ; 2 bytes @ 0x0
  3722                           
  3723     0070                     ?i1___awmod:	
  3724                           ; 2 bytes @ 0x0
  3725                           
  3726     0070                     ?i1_memset:	
  3727                           ; 2 bytes @ 0x0
  3728                           
  3729     0070                     ?_SysTime_GetCurrentTimeMs:	
  3730                           ; 2 bytes @ 0x0
  3731                           
  3732     0070                     USBConfigureEndpoint@direction:	
  3733                           ; 4 bytes @ 0x0
  3734                           
  3735     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3736                           ; 1 bytes @ 0x0
  3737                           
  3738     0070                     i1USBTransferOnePacket@dir:	
  3739                           ; 1 bytes @ 0x0
  3740                           
  3741     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3742                           ; 1 bytes @ 0x0
  3743                           
  3744     0070                     USBStdGetStatusHandler@p:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747     0070                     i1GenericQueue_Init@q:	
  3748                           ; 2 bytes @ 0x0
  3749                           
  3750     0070                     i1GenericQueue_IsFull@q:	
  3751                           ; 2 bytes @ 0x0
  3752                           
  3753     0070                     i1___wmul@multiplier:	
  3754                           ; 2 bytes @ 0x0
  3755                           
  3756     0070                     i1___awmod@divisor:	
  3757                           ; 2 bytes @ 0x0
  3758                           
  3759     0070                     i1memset@c:	
  3760                           ; 2 bytes @ 0x0
  3761                           
  3762                           
  3763                           ; 2 bytes @ 0x0
  3764     0070                     	ds	1
  3765     0071                     ??_EUSART_Receive_ISR:
  3766     0071                     ??_EUSART_DefaultErrorHandler:	
  3767                           ; 1 bytes @ 0x1
  3768                           
  3769     0071                     ??_USBConfigureEndpoint:	
  3770                           ; 1 bytes @ 0x1
  3771                           
  3772     0071                     ??_USBHIDCBSetIdleRateHandler:	
  3773                           ; 1 bytes @ 0x1
  3774                           
  3775     0071                     ??_USBHIDCBSetReportComplete:	
  3776                           ; 1 bytes @ 0x1
  3777                           
  3778     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  3779                           ; 1 bytes @ 0x1
  3780                           
  3781     0071                     i1USBTransferOnePacket@data:	
  3782                           ; 1 bytes @ 0x1
  3783                           
  3784                           
  3785                           ; 2 bytes @ 0x1
  3786     0071                     	ds	1
  3787     0072                     ??i1_GenericQueue_IsFull:
  3788     0072                     USBCtrlTrfTxService@byteToSend:	
  3789                           ; 1 bytes @ 0x2
  3790                           
  3791     0072                     i1GenericQueue_Init@element_size:	
  3792                           ; 1 bytes @ 0x2
  3793                           
  3794     0072                     i1___wmul@multiplicand:	
  3795                           ; 2 bytes @ 0x2
  3796                           
  3797     0072                     i1___awmod@dividend:	
  3798                           ; 2 bytes @ 0x2
  3799                           
  3800     0072                     i1memset@n:	
  3801                           ; 2 bytes @ 0x2
  3802                           
  3803                           
  3804                           ; 2 bytes @ 0x2
  3805     0072                     	ds	1
  3806     0073                     ??_USBCtrlTrfInHandler:
  3807     0073                     ??_USBCtrlEPAllowDataStage:	
  3808                           ; 1 bytes @ 0x3
  3809                           
  3810     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  3811                           ; 1 bytes @ 0x3
  3812                           
  3813     0073                     i1USBTransferOnePacket@len:	
  3814                           ; 1 bytes @ 0x3
  3815                           
  3816                           
  3817                           ; 1 bytes @ 0x3
  3818     0073                     	ds	1
  3819     0074                     ??_IOCAF5_ISR:
  3820     0074                     ??_PS2Keyboard_DataInterrupt:	
  3821                           ; 1 bytes @ 0x4
  3822                           
  3823     0074                     ??_SysTime_GetCurrentTimeMs:	
  3824                           ; 1 bytes @ 0x4
  3825                           
  3826     0074                     ??_USBCtrlTrfRxService:	
  3827                           ; 1 bytes @ 0x4
  3828                           
  3829     0074                     ??_USBCheckHIDRequest:	
  3830                           ; 1 bytes @ 0x4
  3831                           
  3832     0074                     ??i1_USBTransferOnePacket:	
  3833                           ; 1 bytes @ 0x4
  3834                           
  3835     0074                     ??i1_GenericQueue_Init:	
  3836                           ; 1 bytes @ 0x4
  3837                           
  3838     0074                     ??i1___wmul:	
  3839                           ; 1 bytes @ 0x4
  3840                           
  3841     0074                     ??i1___awmod:	
  3842                           ; 1 bytes @ 0x4
  3843                           
  3844     0074                     ??i1_memset:	
  3845                           ; 1 bytes @ 0x4
  3846                           
  3847     0074                     i1USBDeviceInit@p:	
  3848                           ; 1 bytes @ 0x4
  3849                           
  3850     0074                     i1___wmul@product:	
  3851                           ; 2 bytes @ 0x4
  3852                           
  3853                           
  3854                           ; 2 bytes @ 0x4
  3855     0074                     	ds	1
  3856     0075                     USBConfigureEndpoint@EPNum:
  3857     0075                     i1___awmod@counter:	
  3858                           ; 1 bytes @ 0x5
  3859                           
  3860     0075                     i1memset@dest:	
  3861                           ; 1 bytes @ 0x5
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x5
  3865     0075                     	ds	1
  3866     0076                     ?i1_memcpy:
  3867     0076                     USBConfigureEndpoint@handle:	
  3868                           ; 2 bytes @ 0x6
  3869                           
  3870     0076                     i1USBDeviceInit@i_1369:	
  3871                           ; 1 bytes @ 0x6
  3872                           
  3873     0076                     i1___awmod@sign:	
  3874                           ; 1 bytes @ 0x6
  3875                           
  3876     0076                     i1memset@p:	
  3877                           ; 1 bytes @ 0x6
  3878                           
  3879     0076                     i1memcpy@d1:	
  3880                           ; 1 bytes @ 0x6
  3881                           
  3882                           
  3883                           ; 2 bytes @ 0x6
  3884     0076                     	ds	1
  3885     0077                     ?_USBEnableEndpoint:
  3886     0077                     ??_USBCtrlEPServiceComplete:	
  3887                           ; 1 bytes @ 0x7
  3888                           
  3889     0077                     USBEnableEndpoint@options:	
  3890                           ; 1 bytes @ 0x7
  3891                           
  3892     0077                     USBCtrlTrfInHandler@lastDTS:	
  3893                           ; 1 bytes @ 0x7
  3894                           
  3895     0077                     i1USBDeviceInit@i:	
  3896                           ; 1 bytes @ 0x7
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x7
  3900     0077                     	ds	1
  3901     0078                     ??_USBEnableEndpoint:
  3902     0078                     USBCtrlTrfRxService@i:	
  3903                           ; 1 bytes @ 0x8
  3904                           
  3905     0078                     i1USBTransferOnePacket@ep:	
  3906                           ; 1 bytes @ 0x8
  3907                           
  3908     0078                     i1memcpy@s1:	
  3909                           ; 1 bytes @ 0x8
  3910                           
  3911                           
  3912                           ; 2 bytes @ 0x8
  3913     0078                     	ds	1
  3914     0079                     USBCtrlTrfRxService@byteToRead:
  3915     0079                     i1USBTransferOnePacket@handle:	
  3916                           ; 1 bytes @ 0x9
  3917                           
  3918                           
  3919                           ; 2 bytes @ 0x9
  3920     0079                     	ds	1
  3921     007A                     ??_USBCtrlTrfOutHandler:
  3922     007A                     USBEnableEndpoint@p:	
  3923                           ; 1 bytes @ 0xA
  3924                           
  3925     007A                     i1memcpy@n:	
  3926                           ; 2 bytes @ 0xA
  3927                           
  3928                           
  3929                           ; 2 bytes @ 0xA
  3930     007A                     	ds	2
  3931     007C                     ??i1_memcpy:
  3932     007C                     USBEnableEndpoint@ep:	
  3933                           ; 1 bytes @ 0xC
  3934                           
  3935     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  3936                           ; 1 bytes @ 0xC
  3937                           
  3938                           
  3939                           ; 1 bytes @ 0xC
  3940     007C                     	ds	1
  3941     007D                     ??_USBWakeFromSuspend:
  3942     007D                     ??_USBSuspend:	
  3943                           ; 1 bytes @ 0xD
  3944                           
  3945     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  3946                           ; 1 bytes @ 0xD
  3947                           
  3948     007D                     ??_APP_KeyboardInit:	
  3949                           ; 1 bytes @ 0xD
  3950                           
  3951     007D                     ??_USBStdSetCfgHandler:	
  3952                           ; 1 bytes @ 0xD
  3953                           
  3954     007D                     PS2Keyboard_ClockInterrupt@bit:	
  3955                           ; 1 bytes @ 0xD
  3956                           
  3957                           
  3958                           ; 1 bytes @ 0xD
  3959     007D                     	ds	1
  3960     007E                     ??_IOCAF4_ISR:
  3961     007E                     ??_USBCheckStdRequest:	
  3962                           ; 1 bytes @ 0xE
  3963                           
  3964     007E                     ??_PIN_MANAGER_IOC:	
  3965                           ; 1 bytes @ 0xE
  3966                           
  3967     007E                     ??_INTERRUPT_InterruptManager:	
  3968                           ; 1 bytes @ 0xE
  3969                           
  3970                           
  3971                           	psect	cstackBANK0
  3972     0050                     __pcstackBANK0:	
  3973                           ; 1 bytes @ 0xE
  3974                           
  3975     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  3976     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  3977                           ; 1 bytes @ 0x0
  3978                           
  3979     0050                     i1memcpy@d:	
  3980                           ; 2 bytes @ 0x0
  3981                           
  3982                           
  3983                           ; 2 bytes @ 0x0
  3984     0050                     	ds	2
  3985     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  3986     0052                     i1memcpy@s:	
  3987                           ; 2 bytes @ 0x2
  3988                           
  3989                           
  3990                           ; 2 bytes @ 0x2
  3991     0052                     	ds	2
  3992     0054                     i1memcpy@tmp:
  3993     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  3994                           ; 1 bytes @ 0x4
  3995                           
  3996                           
  3997                           ; 2 bytes @ 0x4
  3998     0054                     	ds	1
  3999     0055                     ?i1_GenericQueue_Enqueue:
  4000     0055                     i1GenericQueue_Enqueue@q:	
  4001                           ; 1 bytes @ 0x5
  4002                           
  4003                           
  4004                           ; 2 bytes @ 0x5
  4005     0055                     	ds	1
  4006     0056                     ??_USBStdFeatureReqHandler:
  4007     0056                     USBStdSetCfgHandler@p:	
  4008                           ; 1 bytes @ 0x6
  4009                           
  4010                           
  4011                           ; 2 bytes @ 0x6
  4012     0056                     	ds	1
  4013     0057                     i1GenericQueue_Enqueue@item:
  4014                           
  4015                           ; 2 bytes @ 0x7
  4016     0057                     	ds	1
  4017     0058                     USBStdSetCfgHandler@i_2097:
  4018     0058                     USBStdFeatureReqHandler@pUEP:	
  4019                           ; 1 bytes @ 0x8
  4020                           
  4021                           
  4022                           ; 2 bytes @ 0x8
  4023     0058                     	ds	1
  4024     0059                     ??i1_GenericQueue_Enqueue:
  4025     0059                     USBStdSetCfgHandler@i:	
  4026                           ; 1 bytes @ 0x9
  4027                           
  4028                           
  4029                           ; 1 bytes @ 0x9
  4030     0059                     	ds	1
  4031     005A                     USBStdFeatureReqHandler@current_ep_data:
  4032                           
  4033                           ; 1 bytes @ 0xA
  4034     005A                     	ds	1
  4035     005B                     USBStdFeatureReqHandler@p:
  4036                           
  4037                           ; 2 bytes @ 0xB
  4038     005B                     	ds	1
  4039     005C                     ??_PS2Keyboard_ClockInterrupt:
  4040                           
  4041                           ; 1 bytes @ 0xC
  4042     005C                     	ds	1
  4043     005D                     ??_USBCtrlTrfSetupHandler:
  4044                           
  4045                           ; 1 bytes @ 0xD
  4046     005D                     	ds	1
  4047     005E                     ??_USBCtrlEPService:
  4048                           
  4049                           ; 1 bytes @ 0xE
  4050     005E                     	ds	1
  4051     005F                     ??_USBDeviceTasks:
  4052                           
  4053                           ; 1 bytes @ 0xF
  4054     005F                     	ds	1
  4055     0060                     USBDeviceTasks@i:
  4056                           
  4057                           ; 1 bytes @ 0x10
  4058     0060                     	ds	1
  4059                           
  4060                           	psect	maintext
  4061     13CD                     __pmaintext:	
  4062 ;;
  4063 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4064 ;;
  4065 ;; *************** function _main *****************
  4066 ;; Defined at:
  4067 ;;		line 12 in file "main.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;  scanCodeStr    10   49[BANK1 ] unsigned char [10]
  4072 ;;  scanCode        3   61[BANK1 ] struct PS2ScanCode
  4073 ;;  hndlScanCode    1   60[BANK1 ] PTR struct PS2ScanCode
  4074 ;;		 -> main@scanCode(3), NULL(0), 
  4075 ;;  scanCodeVali    1   59[BANK1 ] _Bool 
  4076 ;;  i               1    0        unsigned char 
  4077 ;;  strLen          1    0        unsigned char 
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  2  834[None  ] int 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : B1F/0
  4084 ;;		On exit  : 2/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4088 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4089 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4090 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;Total ram usage:       16 bytes
  4092 ;; Hardware stack levels required when called: 14
  4093 ;; This function calls:
  4094 ;;		_APP_KeyboardTasks
  4095 ;;		_PS2Keyboard_GetScanCode
  4096 ;;		_PS2Keyboard_Init
  4097 ;;		_SYSTEM_Initialize
  4098 ;;		_SysTime_Init
  4099 ;; This function is called by:
  4100 ;;		Startup code after reset
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104     13CD                     _main:	
  4105                           ;psect for function _main
  4106                           
  4107                           
  4108                           ;main.c: 13:     SYSTEM_Initialize();
  4109                           
  4110                           ;incstack = 0
  4111                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4112     13CD  3191  2149  3193   	fcall	_SYSTEM_Initialize
  4113                           
  4114                           ;main.c: 14:     SysTime_Init();
  4115     13D0  3190  2084  3193   	fcall	_SysTime_Init
  4116                           
  4117                           ;main.c: 15:     PS2Keyboard_Init();
  4118     13D3  3192  2223  3193   	fcall	_PS2Keyboard_Init
  4119                           
  4120                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4121     13D6  178B               	bsf	11,7	;volatile
  4122                           
  4123                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4124     13D7  170B               	bsf	11,6	;volatile
  4125                           
  4126                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4127     13D8  0023               	movlb	3	; select bank3
  4128     13D9  084E               	movf	main@F3441^(0+384),w
  4129     13DA  0021               	movlb	1	; select bank1
  4130     13DB  00E5               	movwf	main@scanCode^(0+128)
  4131     13DC  0023               	movlb	3	; select bank3
  4132     13DD  084F               	movf	(main@F3441+1)^(0+384),w
  4133     13DE  0021               	movlb	1	; select bank1
  4134     13DF  00E6               	movwf	(main@scanCode+1)^(0+128)
  4135     13E0  0023               	movlb	3	; select bank3
  4136     13E1  0850               	movf	(main@F3441+2)^(0+384),w
  4137     13E2  0021               	movlb	1	; select bank1
  4138     13E3  00E7               	movwf	(main@scanCode+2)^(0+128)
  4139                           
  4140                           ;main.c: 34:     char scanCodeStr[10] = "";
  4141     13E4  30D9               	movlw	low main@scanCodeStr
  4142     13E5  0086               	movwf	6
  4143     13E6  3000               	movlw	high main@scanCodeStr
  4144     13E7  0087               	movwf	7
  4145     13E8  300A               	movlw	10
  4146     13E9  00D8               	movwf	??_main^(0+128)
  4147     13EA  3000               	movlw	0
  4148     13EB                     u6080:
  4149     13EB  001E               	movwi fsr1++
  4150     13EC  0BD8               	decfsz	??_main^(0+128),f
  4151     13ED  2BEB               	goto	u6080
  4152     13EE                     l5955:
  4153                           
  4154                           ;main.c: 39:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4155     13EE  30E5               	movlw	(low (main@scanCode| 0))& (0+255)
  4156     13EF  3192  225A  3193   	fcall	_PS2Keyboard_GetScanCode
  4157     13F2  00E3               	movwf	main@scanCodeValid^(0+128)
  4158                           
  4159                           ;main.c: 40:         if(scanCodeValid) {
  4160     13F3  0863               	movf	main@scanCodeValid^(0+128),w
  4161     13F4  1903               	btfsc	3,2
  4162     13F5  2BF9               	goto	l5961
  4163                           
  4164                           ;main.c: 41:             hndlScanCode = &scanCode;
  4165     13F6  30E5               	movlw	(low (main@scanCode| 0))& (0+255)
  4166     13F7  00E4               	movwf	main@hndlScanCode^(0+128)
  4167                           
  4168                           ;main.c: 42:         } else {
  4169     13F8  2BFA               	goto	l5963
  4170     13F9                     l5961:
  4171                           
  4172                           ;main.c: 43:             hndlScanCode = ((void*)0);
  4173     13F9  01E4               	clrf	main@hndlScanCode^(0+128)
  4174     13FA                     l5963:
  4175                           
  4176                           ;main.c: 52:         APP_KeyboardTasks(hndlScanCode);
  4177     13FA  0864               	movf	main@hndlScanCode^(0+128),w
  4178     13FB  3182  22E2  3193   	fcall	_APP_KeyboardTasks
  4179     13FE  2BEE               	goto	l5955
  4180     13FF                     __end_of_main:
  4181                           
  4182                           	psect	text1
  4183     1084                     __ptext1:	
  4184 ;; *************** function _SysTime_Init *****************
  4185 ;; Defined at:
  4186 ;;		line 12 in file "systime.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;		None
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0, pclath, cstack
  4195 ;; Tracked objects:
  4196 ;;		On entry : 1F/0
  4197 ;;		On exit  : 1F/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;Total ram usage:        0 bytes
  4205 ;; Hardware stack levels used: 1
  4206 ;; Hardware stack levels required when called: 11
  4207 ;; This function calls:
  4208 ;;		_TMR2_SetInterruptHandler
  4209 ;;		_TMR2_StartTimer
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215     1084                     _SysTime_Init:	
  4216                           ;psect for function _SysTime_Init
  4217                           
  4218                           
  4219                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4223     1084  30CB               	movlw	low _SysTimeInterrupt
  4224     1085  0021               	movlb	1	; select bank1
  4225     1086  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4226     1087  301F               	movlw	high _SysTimeInterrupt
  4227     1088  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4228     1089  319F  27BA  3190   	fcall	_TMR2_SetInterruptHandler
  4229                           
  4230                           ;systime.c: 15:     TMR2_StartTimer();
  4231     108C  3187  27FD         	fcall	_TMR2_StartTimer
  4232     108E  0008               	return
  4233     108F                     __end_of_SysTime_Init:
  4234                           
  4235                           	psect	text2
  4236     07FD                     __ptext2:	
  4237 ;; *************** function _TMR2_StartTimer *****************
  4238 ;; Defined at:
  4239 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;		None
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;		None
  4244 ;; Return value:  Size  Location     Type
  4245 ;;                  1    wreg      void 
  4246 ;; Registers used:
  4247 ;;		None
  4248 ;; Tracked objects:
  4249 ;;		On entry : 1F/2
  4250 ;;		On exit  : 1F/0
  4251 ;;		Unchanged: 0/0
  4252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;Total ram usage:        0 bytes
  4258 ;; Hardware stack levels used: 1
  4259 ;; Hardware stack levels required when called: 10
  4260 ;; This function calls:
  4261 ;;		Nothing
  4262 ;; This function is called by:
  4263 ;;		_SysTime_Init
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267     07FD                     _TMR2_StartTimer:	
  4268                           ;psect for function _TMR2_StartTimer
  4269                           
  4270                           
  4271                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4272                           
  4273                           ;incstack = 0
  4274                           ; Regs used in _TMR2_StartTimer: []
  4275     07FD  0020               	movlb	0	; select bank0
  4276     07FE  151C               	bsf	28,2	;volatile
  4277     07FF  0008               	return
  4278     0800                     __end_of_TMR2_StartTimer:
  4279                           
  4280                           	psect	text3
  4281     1149                     __ptext3:	
  4282 ;; *************** function _SYSTEM_Initialize *****************
  4283 ;; Defined at:
  4284 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;		None
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      void 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : B1F/0
  4295 ;;		On exit  : 1F/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;Total ram usage:        0 bytes
  4303 ;; Hardware stack levels used: 1
  4304 ;; Hardware stack levels required when called: 12
  4305 ;; This function calls:
  4306 ;;		_EUSART_Initialize
  4307 ;;		_OSCILLATOR_Initialize
  4308 ;;		_PIN_MANAGER_Initialize
  4309 ;;		_TMR2_Initialize
  4310 ;;		_USBDeviceAttach
  4311 ;;		_USBDeviceInit
  4312 ;;		_WDT_Initialize
  4313 ;; This function is called by:
  4314 ;;		_main
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318     1149                     _SYSTEM_Initialize:	
  4319                           ;psect for function _SYSTEM_Initialize
  4320                           
  4321                           
  4322                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4326     1149  3193  239D  3191   	fcall	_PIN_MANAGER_Initialize
  4327                           
  4328                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4329     114C  3190  20CF  3191   	fcall	_OSCILLATOR_Initialize
  4330                           
  4331                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4332     114F  319F  2774  3191   	fcall	_WDT_Initialize
  4333                           
  4334                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4335     1152  3190  20FD  3191   	fcall	_TMR2_Initialize
  4336                           
  4337                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4338     1155  3195  2526  3191   	fcall	_EUSART_Initialize
  4339                           
  4340                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4341     1158  318E  26A1  3191   	fcall	_USBDeviceInit
  4342                           
  4343                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4344     115B  3191  21BA         	fcall	_USBDeviceAttach
  4345     115D  0008               	return
  4346     115E                     __end_of_SYSTEM_Initialize:
  4347                           
  4348                           	psect	text4
  4349     1F74                     __ptext4:	
  4350 ;; *************** function _WDT_Initialize *****************
  4351 ;; Defined at:
  4352 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4353 ;; Parameters:    Size  Location     Type
  4354 ;;		None
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;                  1    wreg      void 
  4359 ;; Registers used:
  4360 ;;		wreg
  4361 ;; Tracked objects:
  4362 ;;		On entry : 1F/1
  4363 ;;		On exit  : 1F/1
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;Total ram usage:        0 bytes
  4371 ;; Hardware stack levels used: 1
  4372 ;; Hardware stack levels required when called: 10
  4373 ;; This function calls:
  4374 ;;		Nothing
  4375 ;; This function is called by:
  4376 ;;		_SYSTEM_Initialize
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380     1F74                     _WDT_Initialize:	
  4381                           ;psect for function _WDT_Initialize
  4382                           
  4383                           
  4384                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4385                           
  4386                           ;incstack = 0
  4387                           ; Regs used in _WDT_Initialize: [wreg]
  4388     1F74  3016               	movlw	22
  4389     1F75  0097               	movwf	23	;volatile
  4390     1F76  0008               	return
  4391     1F77                     __end_of_WDT_Initialize:
  4392                           
  4393                           	psect	text5
  4394     0EA1                     __ptext5:	
  4395 ;; *************** function _USBDeviceInit *****************
  4396 ;; Defined at:
  4397 ;;		line 281 in file "usb/usb_device.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4402 ;;		 -> UEP1(1), 
  4403 ;;  i               1    6[BANK1 ] unsigned char 
  4404 ;;  i               1    7[BANK1 ] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      void 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 1F/1
  4411 ;;		On exit  : 1F/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;Total ram usage:        8 bytes
  4419 ;; Hardware stack levels used: 1
  4420 ;; Hardware stack levels required when called: 10
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_SYSTEM_Initialize
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428     0EA1                     _USBDeviceInit:	
  4429                           ;psect for function _USBDeviceInit
  4430                           
  4431                           
  4432                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4436     0EA1  1112               	bcf	18,2	;volatile
  4437                           
  4438                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4439     0EA2  003D               	movlb	29	; select bank29
  4440     0EA3  0193               	clrf	19	;volatile
  4441                           
  4442                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4443     0EA4  0190               	clrf	16	;volatile
  4444                           
  4445                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4446     0EA5  0198               	clrf	24	;volatile
  4447                           
  4448                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4449     0EA6  300E               	movlw	14
  4450     0EA7  0021               	movlb	1	; select bank1
  4451     0EA8  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4452     0EA9  3099               	movlw	153
  4453     0EAA  00AC               	movwf	USBDeviceInit@p^(0+128)
  4454     0EAB  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  4455     0EAC                     l4893:
  4456     0EAC  082C               	movf	USBDeviceInit@p^(0+128),w
  4457     0EAD  0086               	movwf	6
  4458     0EAE  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4459     0EAF  0087               	movwf	7
  4460     0EB0  0181               	clrf	1
  4461     0EB1  3001               	movlw	1
  4462     0EB2  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4463     0EB3  3000               	movlw	0
  4464     0EB4  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4465     0EB5  3001               	movlw	1
  4466     0EB6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4467     0EB7  0828               	movf	??_USBDeviceInit^(0+128),w
  4468     0EB8  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  4469     0EB9  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  4470     0EBA  1903               	btfsc	3,2
  4471     0EBB  2EAC               	goto	l4893
  4472                           
  4473                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4474     0EBC  3016               	movlw	22
  4475     0EBD  003D               	movlb	29	; select bank29
  4476     0EBE  0091               	movwf	17	;volatile
  4477     0EBF  309F               	movlw	159
  4478     0EC0  0097               	movwf	23	;volatile
  4479     0EC1  307B               	movlw	123
  4480     0EC2  0092               	movwf	18	;volatile
  4481                           
  4482                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4483     0EC3  0021               	movlb	1	; select bank1
  4484     0EC4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4485     0EC5                     l4909:
  4486                           
  4487                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4488     0EC5  082F               	movf	USBDeviceInit@i^(0+128),w
  4489     0EC6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4490     0EC7  3001               	movlw	1
  4491     0EC8                     u4245:
  4492     0EC8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4493     0EC9  3EFF               	addlw	-1
  4494     0ECA  1D03               	skipz
  4495     0ECB  2EC8               	goto	u4245
  4496     0ECC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4497     0ECD  3E20               	addlw	32
  4498     0ECE  0086               	movwf	6
  4499     0ECF  0187               	clrf	7
  4500     0ED0  3000               	movlw	0
  4501     0ED1  3FC0               	movwi [0]fsr1
  4502     0ED2  3000               	movlw	0
  4503     0ED3  3FC1               	movwi [1]fsr1
  4504     0ED4  3FC2               	movwi [2]fsr1
  4505     0ED5  3FC3               	movwi [3]fsr1
  4506                           
  4507                           ;usb/usb_device.c: 314:     }
  4508     0ED6  3001               	movlw	1
  4509     0ED7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4510     0ED8  0828               	movf	??_USBDeviceInit^(0+128),w
  4511     0ED9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4512     0EDA  3008               	movlw	8
  4513     0EDB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4514     0EDC  1C03               	skipc
  4515     0EDD  2EC5               	goto	l4909
  4516                           
  4517                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4518     0EDE  003D               	movlb	29	; select bank29
  4519     0EDF  170E               	bsf	14,6	;volatile
  4520                           
  4521                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4522     0EE0  0196               	clrf	22	;volatile
  4523                           
  4524                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4525     0EE1  120E               	bcf	14,4	;volatile
  4526                           
  4527                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4528     0EE2  130E               	bcf	14,6	;volatile
  4529     0EE3                     l4921:
  4530                           
  4531                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4532     0EE3  30F7               	movlw	247
  4533     0EE4  0021               	movlb	1	; select bank1
  4534     0EE5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4535     0EE6  0828               	movf	??_USBDeviceInit^(0+128),w
  4536     0EE7  003D               	movlb	29	; select bank29
  4537     0EE8  0590               	andwf	16,f	;volatile
  4538                           
  4539                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4540     0EE9  0021               	movlb	1	; select bank1
  4541     0EEA  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
  4542                           
  4543                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4544     0EEB  0022               	movlb	2	; select bank2
  4545     0EEC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4546                           
  4547                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4548     0EED  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4549     0EEE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4550                           
  4551                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4552     0EEF  003D               	movlb	29	; select bank29
  4553     0EF0  1990               	btfsc	16,3	;volatile
  4554     0EF1  2EE3               	goto	l4921
  4555                           
  4556                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4557     0EF2  3001               	movlw	1
  4558     0EF3  0022               	movlb	2	; select bank2
  4559     0EF4  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4560                           
  4561                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4562     0EF5  3001               	movlw	1
  4563     0EF6  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4564                           
  4565                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4566     0EF7  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4567                           
  4568                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4569     0EF8  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4570                           
  4571                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4572     0EF9  01DC               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4573                           
  4574                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4575     0EFA  0021               	movlb	1	; select bank1
  4576     0EFB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4577     0EFC                     l4943:
  4578                           
  4579                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4580     0EFC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4581     0EFD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4582     0EFE  0086               	movwf	6
  4583     0EFF  0187               	clrf	7
  4584     0F00  3000               	movlw	0
  4585     0F01  3FC0               	movwi [0]fsr1
  4586     0F02  3FC1               	movwi [1]fsr1
  4587                           
  4588                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4589     0F03  352F               	lslf	USBDeviceInit@i^(0+128),w
  4590     0F04  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4591     0F05  0086               	movwf	6
  4592     0F06  3001               	movlw	1	; select bank2/3
  4593     0F07  0087               	movwf	7
  4594     0F08  3000               	movlw	0
  4595     0F09  3FC0               	movwi [0]fsr1
  4596     0F0A  3FC1               	movwi [1]fsr1
  4597                           
  4598                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4599     0F0B  082F               	movf	USBDeviceInit@i^(0+128),w
  4600     0F0C  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4601     0F0D  0086               	movwf	6
  4602     0F0E  3001               	movlw	1	; select bank2/3
  4603     0F0F  0087               	movwf	7
  4604     0F10  0181               	clrf	1
  4605                           
  4606                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4607     0F11  082F               	movf	USBDeviceInit@i^(0+128),w
  4608     0F12  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4609     0F13  0086               	movwf	6
  4610     0F14  3001               	movlw	1	; select bank2/3
  4611     0F15  0087               	movwf	7
  4612     0F16  0181               	clrf	1
  4613                           
  4614                           ;usb/usb_device.c: 355:     }
  4615     0F17  3001               	movlw	1
  4616     0F18  00A8               	movwf	??_USBDeviceInit^(0+128)
  4617     0F19  0828               	movf	??_USBDeviceInit^(0+128),w
  4618     0F1A  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4619     0F1B  3002               	movlw	2
  4620     0F1C  022F               	subwf	USBDeviceInit@i^(0+128),w
  4621     0F1D  1C03               	skipc
  4622     0F1E  2EFC               	goto	l4943
  4623                           
  4624                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4625     0F1F  3028               	movlw	40
  4626     0F20  0020               	movlb	0	; select bank0
  4627     0F21  00E1               	movwf	_pBDTEntryIn
  4628     0F22  3000               	movlw	0
  4629     0F23  00E2               	movwf	_pBDTEntryIn+1
  4630                           
  4631                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4632     0F24  3016               	movlw	22
  4633     0F25  003D               	movlb	29	; select bank29
  4634     0F26  0098               	movwf	24	;volatile
  4635                           
  4636                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4637     0F27  3040               	movlw	64
  4638     0F28  0021               	movlb	1	; select bank1
  4639     0F29  00A8               	movwf	??_USBDeviceInit^(0+128)
  4640     0F2A  3000               	movlw	0
  4641     0F2B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4642     0F2C  30FF               	movlw	255
  4643     0F2D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4644     0F2E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4645     0F2F  307F               	movlw	127
  4646     0F30  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4647     0F31  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4648     0F32  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4649     0F33  0020               	movlb	0	; select bank0
  4650     0F34  00A2               	movwf	34	;volatile
  4651     0F35  0021               	movlb	1	; select bank1
  4652     0F36  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4653     0F37  0020               	movlb	0	; select bank0
  4654     0F38  00A3               	movwf	35	;volatile
  4655                           
  4656                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4657     0F39  3008               	movlw	8
  4658     0F3A  00A1               	movwf	33	;volatile
  4659                           
  4660                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4661     0F3B  3004               	movlw	4
  4662     0F3C  00A0               	movwf	32	;volatile
  4663                           
  4664                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4665     0F3D  17A0               	bsf	32,7	;volatile
  4666                           
  4667                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4668     0F3E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4669                           
  4670                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4671     0F3F  3000               	movlw	0
  4672     0F40  0023               	movlb	3	; select bank3
  4673     0F41  00CD               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4674     0F42  3000               	movlw	0
  4675     0F43  00CC               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4676     0F44  3000               	movlw	0
  4677     0F45  00CB               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4678     0F46  3000               	movlw	0
  4679     0F47  00CA               	movwf	_USB1msTickCount^(0+384)	;volatile
  4680                           
  4681                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4682     0F48  0022               	movlb	2	; select bank2
  4683     0F49  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  4684                           
  4685                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  4686     0F4A  0020               	movlb	0	; select bank0
  4687     0F4B  01EC               	clrf	_USBDeviceState	;volatile
  4688     0F4C  0008               	return
  4689     0F4D                     __end_of_USBDeviceInit:
  4690                           
  4691                           	psect	text6
  4692     11BA                     __ptext6:	
  4693 ;; *************** function _USBDeviceAttach *****************
  4694 ;; Defined at:
  4695 ;;		line 1356 in file "usb/usb_device.c"
  4696 ;; Parameters:    Size  Location     Type
  4697 ;;		None
  4698 ;; Auto vars:     Size  Location     Type
  4699 ;;		None
  4700 ;; Return value:  Size  Location     Type
  4701 ;;                  1    wreg      void 
  4702 ;; Registers used:
  4703 ;;		wreg, status,2, status,0
  4704 ;; Tracked objects:
  4705 ;;		On entry : 1F/0
  4706 ;;		On exit  : 1F/0
  4707 ;;		Unchanged: 0/0
  4708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4713 ;;Total ram usage:        0 bytes
  4714 ;; Hardware stack levels used: 1
  4715 ;; Hardware stack levels required when called: 10
  4716 ;; This function calls:
  4717 ;;		Nothing
  4718 ;; This function is called by:
  4719 ;;		_SYSTEM_Initialize
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723     11BA                     _USBDeviceAttach:	
  4724                           ;psect for function _USBDeviceAttach
  4725                           
  4726                           
  4727                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  4728                           
  4729                           ;incstack = 0
  4730                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  4731     11BA  086C               	movf	_USBDeviceState,w
  4732     11BB  1D03               	btfss	3,2
  4733     11BC  0008               	return
  4734                           
  4735                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  4736     11BD  003D               	movlb	29	; select bank29
  4737     11BE  018E               	clrf	14	;volatile
  4738                           
  4739                           ;usb/usb_device.c: 1367:             UIE = 0;
  4740     11BF  0192               	clrf	18	;volatile
  4741                           
  4742                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  4743     11C0  3016               	movlw	22
  4744     11C1  0091               	movwf	17	;volatile
  4745     11C2  309F               	movlw	159
  4746     11C3  0097               	movwf	23	;volatile
  4747     11C4  307B               	movlw	123
  4748     11C5  0092               	movwf	18	;volatile
  4749                           
  4750                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  4751     11C6  0021               	movlb	1	; select bank1
  4752     11C7  1512               	bsf	18,2	;volatile
  4753     11C8  170B               	bsf	11,6	;volatile
  4754     11C9  178B               	bsf	11,7	;volatile
  4755     11CA                     l541:	
  4756                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  4757                           
  4758     11CA  003D               	movlb	29	; select bank29
  4759     11CB  198E               	btfsc	14,3	;volatile
  4760     11CC  29CF               	goto	l4985
  4761     11CD  158E               	bsf	14,3	;volatile
  4762     11CE  29CA               	goto	l541
  4763     11CF                     l4985:
  4764                           
  4765                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  4766     11CF  3001               	movlw	1
  4767     11D0  0020               	movlb	0	; select bank0
  4768     11D1  00EC               	movwf	_USBDeviceState	;volatile
  4769     11D2  0008               	return
  4770     11D3                     __end_of_USBDeviceAttach:
  4771                           
  4772                           	psect	text7
  4773     10FD                     __ptext7:	
  4774 ;; *************** function _TMR2_Initialize *****************
  4775 ;; Defined at:
  4776 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;		None
  4779 ;; Auto vars:     Size  Location     Type
  4780 ;;		None
  4781 ;; Return value:  Size  Location     Type
  4782 ;;                  1    wreg      void 
  4783 ;; Registers used:
  4784 ;;		wreg, status,2, status,0, pclath, cstack
  4785 ;; Tracked objects:
  4786 ;;		On entry : 1F/1
  4787 ;;		On exit  : 1F/0
  4788 ;;		Unchanged: 0/0
  4789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4794 ;;Total ram usage:        0 bytes
  4795 ;; Hardware stack levels used: 1
  4796 ;; Hardware stack levels required when called: 11
  4797 ;; This function calls:
  4798 ;;		_TMR2_SetInterruptHandler
  4799 ;; This function is called by:
  4800 ;;		_SYSTEM_Initialize
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804     10FD                     _TMR2_Initialize:	
  4805                           ;psect for function _TMR2_Initialize
  4806                           
  4807                           
  4808                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  4809                           
  4810                           ;incstack = 0
  4811                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4812     10FD  305D               	movlw	93
  4813     10FE  0020               	movlb	0	; select bank0
  4814     10FF  009B               	movwf	27	;volatile
  4815                           
  4816                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  4817     1100  019A               	clrf	26	;volatile
  4818                           
  4819                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  4820     1101  1091               	bcf	17,1	;volatile
  4821                           
  4822                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  4823     1102  0021               	movlb	1	; select bank1
  4824     1103  1491               	bsf	17,1	;volatile
  4825                           
  4826                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  4827     1104  3003               	movlw	low _TMR2_DefaultInterruptHandler
  4828     1105  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4829     1106  3000               	movlw	high _TMR2_DefaultInterruptHandler
  4830     1107  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4831     1108  319F  27BA         	fcall	_TMR2_SetInterruptHandler
  4832                           
  4833                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  4834     110A  300F               	movlw	15
  4835     110B  0020               	movlb	0	; select bank0
  4836     110C  009C               	movwf	28	;volatile
  4837     110D  0008               	return
  4838     110E                     __end_of_TMR2_Initialize:
  4839                           
  4840                           	psect	text8
  4841     1FBA                     __ptext8:	
  4842 ;; *************** function _TMR2_SetInterruptHandler *****************
  4843 ;; Defined at:
  4844 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  4847 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;		None
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg
  4854 ;; Tracked objects:
  4855 ;;		On entry : 1F/1
  4856 ;;		On exit  : 1F/2
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4859 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4862 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;Total ram usage:        2 bytes
  4864 ;; Hardware stack levels used: 1
  4865 ;; Hardware stack levels required when called: 10
  4866 ;; This function calls:
  4867 ;;		Nothing
  4868 ;; This function is called by:
  4869 ;;		_TMR2_Initialize
  4870 ;;		_SysTime_Init
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874     1FBA                     _TMR2_SetInterruptHandler:	
  4875                           ;psect for function _TMR2_SetInterruptHandler
  4876                           
  4877                           
  4878                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  4879                           
  4880                           ;incstack = 0
  4881                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  4882     1FBA  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  4883     1FBB  0022               	movlb	2	; select bank2
  4884     1FBC  00C5               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  4885     1FBD  0021               	movlb	1	; select bank1
  4886     1FBE  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  4887     1FBF  0022               	movlb	2	; select bank2
  4888     1FC0  00C4               	movwf	_TMR2_InterruptHandler^(0+256)
  4889     1FC1  0008               	return
  4890     1FC2                     __end_of_TMR2_SetInterruptHandler:
  4891                           
  4892                           	psect	text9
  4893     139D                     __ptext9:	
  4894 ;; *************** function _PIN_MANAGER_Initialize *****************
  4895 ;; Defined at:
  4896 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  4897 ;; Parameters:    Size  Location     Type
  4898 ;;		None
  4899 ;; Auto vars:     Size  Location     Type
  4900 ;;		None
  4901 ;; Return value:  Size  Location     Type
  4902 ;;                  1    wreg      void 
  4903 ;; Registers used:
  4904 ;;		wreg, status,2, status,0, pclath, cstack
  4905 ;; Tracked objects:
  4906 ;;		On entry : B1F/0
  4907 ;;		On exit  : 1F/2
  4908 ;;		Unchanged: 0/0
  4909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;Total ram usage:        0 bytes
  4915 ;; Hardware stack levels used: 1
  4916 ;; Hardware stack levels required when called: 11
  4917 ;; This function calls:
  4918 ;;		_IOCAF4_SetInterruptHandler
  4919 ;;		_IOCAF5_SetInterruptHandler
  4920 ;; This function is called by:
  4921 ;;		_SYSTEM_Initialize
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925     139D                     _PIN_MANAGER_Initialize:	
  4926                           ;psect for function _PIN_MANAGER_Initialize
  4927                           
  4928                           
  4929                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  4930                           
  4931                           ;incstack = 0
  4932                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  4933     139D  0022               	movlb	2	; select bank2
  4934     139E  018C               	clrf	12	;volatile
  4935                           
  4936                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  4937     139F  018D               	clrf	13	;volatile
  4938                           
  4939                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  4940     13A0  018E               	clrf	14	;volatile
  4941                           
  4942                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  4943     13A1  3030               	movlw	48
  4944     13A2  0021               	movlb	1	; select bank1
  4945     13A3  008C               	movwf	12	;volatile
  4946                           
  4947                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  4948     13A4  3070               	movlw	112
  4949     13A5  008D               	movwf	13	;volatile
  4950                           
  4951                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  4952     13A6  30FF               	movlw	255
  4953     13A7  008E               	movwf	14	;volatile
  4954                           
  4955                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  4956     13A8  30CF               	movlw	207
  4957     13A9  0023               	movlb	3	; select bank3
  4958     13AA  008E               	movwf	14	;volatile
  4959                           
  4960                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  4961     13AB  018D               	clrf	13	;volatile
  4962                           
  4963                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  4964     13AC  018C               	clrf	12	;volatile
  4965                           
  4966                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  4967     13AD  0024               	movlb	4	; select bank4
  4968     13AE  018D               	clrf	13	;volatile
  4969                           
  4970                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  4971     13AF  3030               	movlw	48
  4972     13B0  008C               	movwf	12	;volatile
  4973                           
  4974                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  4975     13B1  0021               	movlb	1	; select bank1
  4976     13B2  1395               	bcf	21,7	;volatile
  4977                           
  4978                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  4979     13B3  0022               	movlb	2	; select bank2
  4980     13B4  019D               	clrf	29	;volatile
  4981                           
  4982                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  4983     13B5  0027               	movlb	7	; select bank7
  4984     13B6  1213               	bcf	19,4	;volatile
  4985                           
  4986                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  4987     13B7  1293               	bcf	19,5	;volatile
  4988                           
  4989                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  4990     13B8  1612               	bsf	18,4	;volatile
  4991                           
  4992                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  4993     13B9  1692               	bsf	18,5	;volatile
  4994                           
  4995                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  4996     13BA  1211               	bcf	17,4	;volatile
  4997                           
  4998                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  4999     13BB  1291               	bcf	17,5	;volatile
  5000                           
  5001                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5002     13BC  306D               	movlw	low _IOCAF4_DefaultInterruptHandler
  5003     13BD  0021               	movlb	1	; select bank1
  5004     13BE  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5005     13BF  301F               	movlw	high _IOCAF4_DefaultInterruptHandler
  5006     13C0  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5007     13C1  319F  2782  3193   	fcall	_IOCAF4_SetInterruptHandler
  5008                           
  5009                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5010     13C4  3002               	movlw	low _IOCAF5_DefaultInterruptHandler
  5011     13C5  0021               	movlb	1	; select bank1
  5012     13C6  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5013     13C7  3000               	movlw	high _IOCAF5_DefaultInterruptHandler
  5014     13C8  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5015     13C9  319F  278A         	fcall	_IOCAF5_SetInterruptHandler
  5016                           
  5017                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5018     13CB  158B               	bsf	11,3	;volatile
  5019     13CC  0008               	return
  5020     13CD                     __end_of_PIN_MANAGER_Initialize:
  5021                           
  5022                           	psect	text10
  5023     10CF                     __ptext10:	
  5024 ;; *************** function _OSCILLATOR_Initialize *****************
  5025 ;; Defined at:
  5026 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, status,2
  5035 ;; Tracked objects:
  5036 ;;		On entry : 1F/2
  5037 ;;		On exit  : 1F/1
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used: 1
  5046 ;; Hardware stack levels required when called: 10
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_SYSTEM_Initialize
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054     10CF                     _OSCILLATOR_Initialize:	
  5055                           ;psect for function _OSCILLATOR_Initialize
  5056                           
  5057                           
  5058                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5062     10CF  30FC               	movlw	252
  5063     10D0  0021               	movlb	1	; select bank1
  5064     10D1  0099               	movwf	25	;volatile
  5065                           
  5066                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5067     10D2  0198               	clrf	24	;volatile
  5068                           
  5069                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5070     10D3  3090               	movlw	144
  5071     10D4  0027               	movlb	7	; select bank7
  5072     10D5  009B               	movwf	27	;volatile
  5073                           
  5074                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5075     10D6  0022               	movlb	2	; select bank2
  5076     10D7  0196               	clrf	22	;volatile
  5077     10D8                     l110:	
  5078                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5079                           
  5080                           
  5081                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5082     10D8  0021               	movlb	1	; select bank1
  5083     10D9  1B1A               	btfsc	26,6	;volatile
  5084     10DA  0008               	return
  5085     10DB  28D8               	goto	l110
  5086     10DC                     __end_of_OSCILLATOR_Initialize:
  5087                           
  5088                           	psect	text11
  5089     1526                     __ptext11:	
  5090 ;; *************** function _EUSART_Initialize *****************
  5091 ;; Defined at:
  5092 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 1F/0
  5103 ;;		On exit  : 1F/1
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        0 bytes
  5111 ;; Hardware stack levels used: 1
  5112 ;; Hardware stack levels required when called: 11
  5113 ;; This function calls:
  5114 ;;		_EUSART_SetErrorHandler
  5115 ;;		_EUSART_SetFramingErrorHandler
  5116 ;;		_EUSART_SetOverrunErrorHandler
  5117 ;;		_EUSART_SetRxInterruptHandler
  5118 ;;		_EUSART_SetTxInterruptHandler
  5119 ;; This function is called by:
  5120 ;;		_SYSTEM_Initialize
  5121 ;; This function uses a non-reentrant model
  5122 ;;
  5123                           
  5124     1526                     _EUSART_Initialize:	
  5125                           ;psect for function _EUSART_Initialize
  5126                           
  5127                           
  5128                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5129                           
  5130                           ;incstack = 0
  5131                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5132     1526  0021               	movlb	1	; select bank1
  5133     1527  1291               	bcf	17,5	;volatile
  5134                           
  5135                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5136     1528  3036               	movlw	low _EUSART_Receive_ISR
  5137     1529  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5138     152A  3014               	movlw	high _EUSART_Receive_ISR
  5139     152B  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5140     152C  319F  27AA  3195   	fcall	_EUSART_SetRxInterruptHandler
  5141                           
  5142                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5143     152F  0021               	movlb	1	; select bank1
  5144     1530  1211               	bcf	17,4	;volatile
  5145                           
  5146                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5147     1531  3076               	movlw	low _EUSART_Transmit_ISR
  5148     1532  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5149     1533  3012               	movlw	high _EUSART_Transmit_ISR
  5150     1534  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5151     1535  319F  27B2  3195   	fcall	_EUSART_SetTxInterruptHandler
  5152                           
  5153                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5154     1538  3008               	movlw	8
  5155     1539  0023               	movlb	3	; select bank3
  5156     153A  009F               	movwf	31	;volatile
  5157                           
  5158                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  5159     153B  3090               	movlw	144
  5160     153C  009D               	movwf	29	;volatile
  5161                           
  5162                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5163     153D  3024               	movlw	36
  5164     153E  009E               	movwf	30	;volatile
  5165                           
  5166                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5167     153F  30E1               	movlw	225
  5168     1540  009B               	movwf	27	;volatile
  5169                           
  5170                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5171     1541  3004               	movlw	4
  5172     1542  009C               	movwf	28	;volatile
  5173                           
  5174                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5175     1543  306C               	movlw	low _EUSART_DefaultFramingErrorHandler
  5176     1544  0021               	movlb	1	; select bank1
  5177     1545  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5178     1546  301F               	movlw	high _EUSART_DefaultFramingErrorHandler
  5179     1547  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5180     1548  319F  279A  3195   	fcall	_EUSART_SetFramingErrorHandler
  5181                           
  5182                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5183     154B  3077               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5184     154C  0021               	movlb	1	; select bank1
  5185     154D  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5186     154E  301F               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5187     154F  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5188     1550  319F  27A2  3195   	fcall	_EUSART_SetOverrunErrorHandler
  5189                           
  5190                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5191     1553  306E               	movlw	low _EUSART_DefaultErrorHandler
  5192     1554  0021               	movlb	1	; select bank1
  5193     1555  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5194     1556  301F               	movlw	high _EUSART_DefaultErrorHandler
  5195     1557  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5196     1558  319F  2792         	fcall	_EUSART_SetErrorHandler
  5197                           
  5198                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5199     155A  01DF               	clrf	_eusartRxLastError^(0+256)	;volatile
  5200                           
  5201                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5202     155B  01E4               	clrf	_eusartTxHead^(0+256)	;volatile
  5203                           
  5204                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5205     155C  01E3               	clrf	_eusartTxTail^(0+256)	;volatile
  5206                           
  5207                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5208     155D  3008               	movlw	8
  5209     155E  00E2               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  5210                           
  5211                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5212     155F  0021               	movlb	1	; select bank1
  5213     1560  01EF               	clrf	_eusartRxHead^(0+128)	;volatile
  5214                           
  5215                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5216     1561  0022               	movlb	2	; select bank2
  5217     1562  01E1               	clrf	_eusartRxTail^(0+256)	;volatile
  5218                           
  5219                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5220     1563  01E0               	clrf	_eusartRxCount^(0+256)	;volatile
  5221                           
  5222                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5223     1564  0021               	movlb	1	; select bank1
  5224     1565  1691               	bsf	17,5	;volatile
  5225     1566  0008               	return
  5226     1567                     __end_of_EUSART_Initialize:
  5227                           
  5228                           	psect	text12
  5229     1FB2                     __ptext12:	
  5230 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5231 ;; Defined at:
  5232 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5233 ;; Parameters:    Size  Location     Type
  5234 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5235 ;;		 -> EUSART_Transmit_ISR(1), 
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg
  5242 ;; Tracked objects:
  5243 ;;		On entry : 1F/1
  5244 ;;		On exit  : 1F/2
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5247 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;Total ram usage:        2 bytes
  5252 ;; Hardware stack levels used: 1
  5253 ;; Hardware stack levels required when called: 10
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_EUSART_Initialize
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261     1FB2                     _EUSART_SetTxInterruptHandler:	
  5262                           ;psect for function _EUSART_SetTxInterruptHandler
  5263                           
  5264                           
  5265                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5269     1FB2  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5270     1FB3  0022               	movlb	2	; select bank2
  5271     1FB4  00C9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5272     1FB5  0021               	movlb	1	; select bank1
  5273     1FB6  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5274     1FB7  0022               	movlb	2	; select bank2
  5275     1FB8  00C8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5276     1FB9  0008               	return
  5277     1FBA                     __end_of_EUSART_SetTxInterruptHandler:
  5278                           
  5279                           	psect	text13
  5280     1FAA                     __ptext13:	
  5281 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5282 ;; Defined at:
  5283 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5286 ;;		 -> EUSART_Receive_ISR(1), 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;		None
  5289 ;; Return value:  Size  Location     Type
  5290 ;;                  1    wreg      void 
  5291 ;; Registers used:
  5292 ;;		wreg
  5293 ;; Tracked objects:
  5294 ;;		On entry : 1F/1
  5295 ;;		On exit  : 1F/2
  5296 ;;		Unchanged: 0/0
  5297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5298 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;Total ram usage:        2 bytes
  5303 ;; Hardware stack levels used: 1
  5304 ;; Hardware stack levels required when called: 10
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_EUSART_Initialize
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312     1FAA                     _EUSART_SetRxInterruptHandler:	
  5313                           ;psect for function _EUSART_SetRxInterruptHandler
  5314                           
  5315                           
  5316                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5320     1FAA  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5321     1FAB  0022               	movlb	2	; select bank2
  5322     1FAC  00C7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5323     1FAD  0021               	movlb	1	; select bank1
  5324     1FAE  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5325     1FAF  0022               	movlb	2	; select bank2
  5326     1FB0  00C6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5327     1FB1  0008               	return
  5328     1FB2                     __end_of_EUSART_SetRxInterruptHandler:
  5329                           
  5330                           	psect	text14
  5331     1FA2                     __ptext14:	
  5332 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5333 ;; Defined at:
  5334 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5337 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;		None
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  1    wreg      void 
  5342 ;; Registers used:
  5343 ;;		wreg
  5344 ;; Tracked objects:
  5345 ;;		On entry : 1F/1
  5346 ;;		On exit  : 1F/2
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5349 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;Total ram usage:        2 bytes
  5354 ;; Hardware stack levels used: 1
  5355 ;; Hardware stack levels required when called: 10
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_EUSART_Initialize
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363     1FA2                     _EUSART_SetOverrunErrorHandler:	
  5364                           ;psect for function _EUSART_SetOverrunErrorHandler
  5365                           
  5366                           
  5367                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5368                           
  5369                           ;incstack = 0
  5370                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5371     1FA2  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5372     1FA3  0022               	movlb	2	; select bank2
  5373     1FA4  00C1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5374     1FA5  0021               	movlb	1	; select bank1
  5375     1FA6  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5376     1FA7  0022               	movlb	2	; select bank2
  5377     1FA8  00C0               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5378     1FA9  0008               	return
  5379     1FAA                     __end_of_EUSART_SetOverrunErrorHandler:
  5380                           
  5381                           	psect	text15
  5382     1F9A                     __ptext15:	
  5383 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5384 ;; Defined at:
  5385 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5388 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5389 ;; Auto vars:     Size  Location     Type
  5390 ;;		None
  5391 ;; Return value:  Size  Location     Type
  5392 ;;                  1    wreg      void 
  5393 ;; Registers used:
  5394 ;;		wreg
  5395 ;; Tracked objects:
  5396 ;;		On entry : 1F/1
  5397 ;;		On exit  : 1F/2
  5398 ;;		Unchanged: 0/0
  5399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5400 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5403 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;Total ram usage:        2 bytes
  5405 ;; Hardware stack levels used: 1
  5406 ;; Hardware stack levels required when called: 10
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		_EUSART_Initialize
  5411 ;; This function uses a non-reentrant model
  5412 ;;
  5413                           
  5414     1F9A                     _EUSART_SetFramingErrorHandler:	
  5415                           ;psect for function _EUSART_SetFramingErrorHandler
  5416                           
  5417                           
  5418                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5419                           
  5420                           ;incstack = 0
  5421                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5422     1F9A  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5423     1F9B  0022               	movlb	2	; select bank2
  5424     1F9C  00C3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5425     1F9D  0021               	movlb	1	; select bank1
  5426     1F9E  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5427     1F9F  0022               	movlb	2	; select bank2
  5428     1FA0  00C2               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5429     1FA1  0008               	return
  5430     1FA2                     __end_of_EUSART_SetFramingErrorHandler:
  5431                           
  5432                           	psect	text16
  5433     1F92                     __ptext16:	
  5434 ;; *************** function _EUSART_SetErrorHandler *****************
  5435 ;; Defined at:
  5436 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5437 ;; Parameters:    Size  Location     Type
  5438 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5439 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  1    wreg      void 
  5444 ;; Registers used:
  5445 ;;		wreg
  5446 ;; Tracked objects:
  5447 ;;		On entry : 1F/1
  5448 ;;		On exit  : 1F/2
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5451 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;Total ram usage:        2 bytes
  5456 ;; Hardware stack levels used: 1
  5457 ;; Hardware stack levels required when called: 10
  5458 ;; This function calls:
  5459 ;;		Nothing
  5460 ;; This function is called by:
  5461 ;;		_EUSART_Initialize
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465     1F92                     _EUSART_SetErrorHandler:	
  5466                           ;psect for function _EUSART_SetErrorHandler
  5467                           
  5468                           
  5469                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5473     1F92  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5474     1F93  0022               	movlb	2	; select bank2
  5475     1F94  00BF               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5476     1F95  0021               	movlb	1	; select bank1
  5477     1F96  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5478     1F97  0022               	movlb	2	; select bank2
  5479     1F98  00BE               	movwf	_EUSART_ErrorHandler^(0+256)
  5480     1F99  0008               	return
  5481     1F9A                     __end_of_EUSART_SetErrorHandler:
  5482                           
  5483                           	psect	text17
  5484     1223                     __ptext17:	
  5485 ;; *************** function _PS2Keyboard_Init *****************
  5486 ;; Defined at:
  5487 ;;		line 43 in file "ps2_keyboard.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 1F/0
  5498 ;;		On exit  : 1F/2
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;Total ram usage:        0 bytes
  5506 ;; Hardware stack levels used: 1
  5507 ;; Hardware stack levels required when called: 11
  5508 ;; This function calls:
  5509 ;;		_GenericQueue_Init
  5510 ;;		_IOCAF4_SetInterruptHandler
  5511 ;;		_IOCAF5_SetInterruptHandler
  5512 ;; This function is called by:
  5513 ;;		_main
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517     1223                     _PS2Keyboard_Init:	
  5518                           ;psect for function _PS2Keyboard_Init
  5519                           
  5520                           
  5521                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5522                           
  5523                           ;incstack = 0
  5524                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5525     1223  3091               	movlw	145
  5526     1224  0021               	movlb	1	; select bank1
  5527     1225  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5528     1226  3023               	movlw	35
  5529     1227  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5530     1228  3003               	movlw	3
  5531     1229  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5532     122A  3000               	movlw	0
  5533     122B  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5534     122C  3193  230F  3192   	fcall	_GenericQueue_Init
  5535                           
  5536                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5537     122F  30F1               	movlw	low _PS2Keyboard_ClockInterrupt
  5538     1230  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5539     1231  3004               	movlw	high _PS2Keyboard_ClockInterrupt
  5540     1232  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5541     1233  319F  2782  3192   	fcall	_IOCAF4_SetInterruptHandler
  5542                           
  5543                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5544     1236  30DC               	movlw	low _PS2Keyboard_DataInterrupt
  5545     1237  0021               	movlb	1	; select bank1
  5546     1238  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5547     1239  3010               	movlw	high _PS2Keyboard_DataInterrupt
  5548     123A  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5549     123B  319F  278A         	fcall	_IOCAF5_SetInterruptHandler
  5550     123D  0008               	return
  5551     123E                     __end_of_PS2Keyboard_Init:
  5552                           
  5553                           	psect	text18
  5554     1F8A                     __ptext18:	
  5555 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5556 ;; Defined at:
  5557 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5560 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;		None
  5563 ;; Return value:  Size  Location     Type
  5564 ;;                  1    wreg      void 
  5565 ;; Registers used:
  5566 ;;		wreg
  5567 ;; Tracked objects:
  5568 ;;		On entry : 1F/1
  5569 ;;		On exit  : 1F/2
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5572 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;Total ram usage:        2 bytes
  5577 ;; Hardware stack levels used: 1
  5578 ;; Hardware stack levels required when called: 10
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_PIN_MANAGER_Initialize
  5583 ;;		_PS2Keyboard_Init
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587     1F8A                     _IOCAF5_SetInterruptHandler:	
  5588                           ;psect for function _IOCAF5_SetInterruptHandler
  5589                           
  5590                           
  5591                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5592                           
  5593                           ;incstack = 0
  5594                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5595     1F8A  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5596     1F8B  0022               	movlb	2	; select bank2
  5597     1F8C  00EB               	movwf	(_IOCAF5_InterruptHandler+1)^(0+256)
  5598     1F8D  0021               	movlb	1	; select bank1
  5599     1F8E  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5600     1F8F  0022               	movlb	2	; select bank2
  5601     1F90  00EA               	movwf	_IOCAF5_InterruptHandler^(0+256)
  5602     1F91  0008               	return
  5603     1F92                     __end_of_IOCAF5_SetInterruptHandler:
  5604                           
  5605                           	psect	text19
  5606     1F82                     __ptext19:	
  5607 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5608 ;; Defined at:
  5609 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5610 ;; Parameters:    Size  Location     Type
  5611 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5612 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;		None
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  1    wreg      void 
  5617 ;; Registers used:
  5618 ;;		wreg
  5619 ;; Tracked objects:
  5620 ;;		On entry : 1F/1
  5621 ;;		On exit  : 1F/2
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5624 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5627 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5628 ;;Total ram usage:        2 bytes
  5629 ;; Hardware stack levels used: 1
  5630 ;; Hardware stack levels required when called: 10
  5631 ;; This function calls:
  5632 ;;		Nothing
  5633 ;; This function is called by:
  5634 ;;		_PIN_MANAGER_Initialize
  5635 ;;		_PS2Keyboard_Init
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639     1F82                     _IOCAF4_SetInterruptHandler:	
  5640                           ;psect for function _IOCAF4_SetInterruptHandler
  5641                           
  5642                           
  5643                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5644                           
  5645                           ;incstack = 0
  5646                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5647     1F82  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5648     1F83  0022               	movlb	2	; select bank2
  5649     1F84  00ED               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5650     1F85  0021               	movlb	1	; select bank1
  5651     1F86  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5652     1F87  0022               	movlb	2	; select bank2
  5653     1F88  00EC               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5654     1F89  0008               	return
  5655     1F8A                     __end_of_IOCAF4_SetInterruptHandler:
  5656                           
  5657                           	psect	text20
  5658     130F                     __ptext20:	
  5659 ;; *************** function _GenericQueue_Init *****************
  5660 ;; Defined at:
  5661 ;;		line 4 in file "generic_queue.c"
  5662 ;; Parameters:    Size  Location     Type
  5663 ;;  q               2    0[BANK1 ] PTR struct .
  5664 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5665 ;;  element_size    2    2[BANK1 ] unsigned int 
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      void 
  5670 ;; Registers used:
  5671 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5672 ;; Tracked objects:
  5673 ;;		On entry : 1F/1
  5674 ;;		On exit  : 1F/1
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5677 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5680 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5681 ;;Total ram usage:        4 bytes
  5682 ;; Hardware stack levels used: 1
  5683 ;; Hardware stack levels required when called: 10
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_PS2Keyboard_Init
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691     130F                     _GenericQueue_Init:	
  5692                           ;psect for function _GenericQueue_Init
  5693                           
  5694                           
  5695                           ;generic_queue.c: 5:     q->element_size = element_size;
  5696                           
  5697                           ;incstack = 0
  5698                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  5699     130F  0828               	movf	GenericQueue_Init@q^(0+128),w
  5700     1310  3E5A               	addlw	90
  5701     1311  0086               	movwf	6
  5702     1312  3000               	movlw	0
  5703     1313  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5704     1314  0087               	movwf	7
  5705     1315  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  5706     1316  3FC0               	movwi [0]fsr1
  5707     1317  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  5708     1318  3FC1               	movwi [1]fsr1
  5709                           
  5710                           ;generic_queue.c: 6:     q->front = 0;
  5711     1319  0828               	movf	GenericQueue_Init@q^(0+128),w
  5712     131A  3E5C               	addlw	92
  5713     131B  0086               	movwf	6
  5714     131C  3000               	movlw	0
  5715     131D  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5716     131E  0087               	movwf	7
  5717     131F  0181               	clrf	1
  5718                           
  5719                           ;generic_queue.c: 7:     q->rear = 0;
  5720     1320  0828               	movf	GenericQueue_Init@q^(0+128),w
  5721     1321  3E5D               	addlw	93
  5722     1322  0086               	movwf	6
  5723     1323  3000               	movlw	0
  5724     1324  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5725     1325  0087               	movwf	7
  5726     1326  0181               	clrf	1
  5727                           
  5728                           ;generic_queue.c: 8:     q->size = 0;
  5729     1327  0828               	movf	GenericQueue_Init@q^(0+128),w
  5730     1328  3E5E               	addlw	94
  5731     1329  0086               	movwf	6
  5732     132A  3000               	movlw	0
  5733     132B  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  5734     132C  0087               	movwf	7
  5735     132D  0181               	clrf	1
  5736     132E  0008               	return
  5737     132F                     __end_of_GenericQueue_Init:
  5738                           
  5739                           	psect	text21
  5740     125A                     __ptext21:	
  5741 ;; *************** function _PS2Keyboard_GetScanCode *****************
  5742 ;; Defined at:
  5743 ;;		line 49 in file "ps2_keyboard.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  5746 ;;		 -> main@scanCode(3), 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  5749 ;;		 -> main@scanCode(3), 
  5750 ;;  ret             1   32[BANK1 ] _Bool 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      _Bool 
  5753 ;; Registers used:
  5754 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 2/1
  5757 ;;		On exit  : 1F/1
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        2 bytes
  5765 ;; Hardware stack levels used: 1
  5766 ;; Hardware stack levels required when called: 12
  5767 ;; This function calls:
  5768 ;;		_GenericQueue_Dequeue
  5769 ;;		_GenericQueue_IsEmpty
  5770 ;; This function is called by:
  5771 ;;		_main
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775     125A                     _PS2Keyboard_GetScanCode:	
  5776                           ;psect for function _PS2Keyboard_GetScanCode
  5777                           
  5778                           
  5779                           ;incstack = 0
  5780                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5781                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  5782     125A  0021               	movlb	1	; select bank1
  5783     125B  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  5784                           
  5785                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  5786     125C  3091               	movlw	145
  5787     125D  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  5788     125E  3023               	movlw	35
  5789     125F  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  5790     1260  3191  210E  3192   	fcall	_GenericQueue_IsEmpty
  5791     1263  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  5792     1264  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  5793     1265  1D03               	btfss	3,2
  5794     1266  2A73               	goto	l5461
  5795                           
  5796                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  5797     1267  3091               	movlw	145
  5798     1268  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  5799     1269  3023               	movlw	35
  5800     126A  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  5801     126B  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  5802     126C  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  5803     126D  3189  21B7  3192   	fcall	_GenericQueue_Dequeue
  5804                           
  5805                           ;ps2_keyboard.c: 53:         ret = 1;
  5806     1270  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  5807     1271  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  5808                           
  5809                           ;ps2_keyboard.c: 54:     } else {
  5810     1272  2A74               	goto	l5463
  5811     1273                     l5461:
  5812                           
  5813                           ;ps2_keyboard.c: 55:         ret = 0;
  5814     1273  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  5815     1274                     l5463:
  5816                           
  5817                           ;ps2_keyboard.c: 57:     return ret;
  5818     1274  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  5819     1275  0008               	return
  5820     1276                     __end_of_PS2Keyboard_GetScanCode:
  5821                           
  5822                           	psect	text22
  5823     09B7                     __ptext22:	
  5824 ;; *************** function _GenericQueue_Dequeue *****************
  5825 ;; Defined at:
  5826 ;;		line 27 in file "generic_queue.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  q               2   24[BANK1 ] PTR struct .
  5829 ;;		 -> keyboardScanCodeQueue(95), 
  5830 ;;  item            1   26[BANK1 ] PTR void 
  5831 ;;		 -> main@scanCode(3), 
  5832 ;; Auto vars:     Size  Location     Type
  5833 ;;		None
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : 1F/1
  5840 ;;		On exit  : 1F/1
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5843 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5845 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;Total ram usage:        7 bytes
  5848 ;; Hardware stack levels used: 1
  5849 ;; Hardware stack levels required when called: 11
  5850 ;; This function calls:
  5851 ;;		_GenericQueue_IsEmpty
  5852 ;;		___awmod
  5853 ;;		___wmul
  5854 ;;		_memcpy
  5855 ;; This function is called by:
  5856 ;;		_PS2Keyboard_GetScanCode
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860     09B7                     _GenericQueue_Dequeue:	
  5861                           ;psect for function _GenericQueue_Dequeue
  5862                           
  5863                           
  5864                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5868     09B7  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  5869     09B8  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  5870     09B9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5871     09BA  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  5872     09BB  3191  210E  3189   	fcall	_GenericQueue_IsEmpty
  5873     09BE  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  5874     09BF  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  5875     09C0  1D03               	btfss	3,2
  5876     09C1  0008               	return
  5877                           
  5878                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  5879     09C2  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  5880     09C3  00B5               	movwf	memcpy@d1^(0+128)
  5881     09C4  01B6               	clrf	(memcpy@d1+1)^(0+128)
  5882     09C5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5883     09C6  3E5C               	addlw	92
  5884     09C7  0086               	movwf	6
  5885     09C8  3000               	movlw	0
  5886     09C9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5887     09CA  0087               	movwf	7
  5888     09CB  0801               	movf	1,w
  5889     09CC  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  5890     09CD  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  5891     09CE  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  5892     09CF  00AF               	movwf	___wmul@multiplier^(0+128)
  5893     09D0  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  5894     09D1  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  5895     09D2  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5896     09D3  3E5A               	addlw	90
  5897     09D4  0086               	movwf	6
  5898     09D5  3000               	movlw	0
  5899     09D6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5900     09D7  0087               	movwf	7
  5901     09D8  3F40               	moviw [0]fsr1
  5902     09D9  00B1               	movwf	___wmul@multiplicand^(0+128)
  5903     09DA  3F41               	moviw [1]fsr1
  5904     09DB  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  5905     09DC  3192  2208  3189   	fcall	___wmul
  5906     09DF  082F               	movf	?___wmul^(0+128),w
  5907     09E0  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  5908     09E1  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  5909     09E2  0830               	movf	(?___wmul+1)^(0+128),w
  5910     09E3  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5911     09E4  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  5912     09E5  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  5913     09E6  00B7               	movwf	memcpy@s1^(0+128)
  5914     09E7  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  5915     09E8  00B8               	movwf	(memcpy@s1+1)^(0+128)
  5916     09E9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5917     09EA  3E5A               	addlw	90
  5918     09EB  0086               	movwf	6
  5919     09EC  3000               	movlw	0
  5920     09ED  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5921     09EE  0087               	movwf	7
  5922     09EF  3F40               	moviw [0]fsr1
  5923     09F0  00B9               	movwf	memcpy@n^(0+128)
  5924     09F1  3F41               	moviw [1]fsr1
  5925     09F2  00BA               	movwf	(memcpy@n+1)^(0+128)
  5926     09F3  3193  2377  3189   	fcall	_memcpy
  5927                           
  5928                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  5929     09F6  300F               	movlw	15
  5930     09F7  00A8               	movwf	___awmod@divisor^(0+128)
  5931     09F8  3000               	movlw	0
  5932     09F9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  5933     09FA  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5934     09FB  3E5C               	addlw	92
  5935     09FC  0086               	movwf	6
  5936     09FD  3000               	movlw	0
  5937     09FE  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5938     09FF  0087               	movwf	7
  5939     0A00  0801               	movf	1,w
  5940     0A01  3E01               	addlw	1
  5941     0A02  00AA               	movwf	___awmod@dividend^(0+128)
  5942     0A03  3000               	movlw	0
  5943     0A04  1803               	skipnc
  5944     0A05  3001               	movlw	1
  5945     0A06  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  5946     0A07  3195  25AC         	fcall	___awmod
  5947     0A09  0828               	movf	?___awmod^(0+128),w
  5948     0A0A  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  5949     0A0B  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5950     0A0C  3E5C               	addlw	92
  5951     0A0D  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  5952     0A0E  3000               	movlw	0
  5953     0A0F  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5954     0A10  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  5955     0A11  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  5956     0A12  0086               	movwf	6
  5957     0A13  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  5958     0A14  0087               	movwf	7
  5959     0A15  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  5960     0A16  0081               	movwf	1
  5961                           
  5962                           ;generic_queue.c: 31:         q->size--;
  5963     0A17  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  5964     0A18  3E5E               	addlw	94
  5965     0A19  0086               	movwf	6
  5966     0A1A  3000               	movlw	0
  5967     0A1B  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  5968     0A1C  0087               	movwf	7
  5969     0A1D  3001               	movlw	1
  5970     0A1E  0281               	subwf	1,f
  5971     0A1F  0008               	return
  5972     0A20                     __end_of_GenericQueue_Dequeue:
  5973                           
  5974                           	psect	text23
  5975     02E2                     __ptext23:	
  5976 ;; *************** function _APP_KeyboardTasks *****************
  5977 ;; Defined at:
  5978 ;;		line 334 in file "app_device_keyboard.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  5981 ;;		 -> main@scanCode(3), NULL(0), 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  5984 ;;		 -> main@scanCode(3), NULL(0), 
  5985 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  5986 ;;  i               1   47[BANK1 ] unsigned char 
  5987 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 1F/1
  5994 ;;		On exit  : 2/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;Total ram usage:        7 bytes
  6002 ;; Hardware stack levels used: 1
  6003 ;; Hardware stack levels required when called: 13
  6004 ;; This function calls:
  6005 ;;		_APP_KeyboardProcessOutputReport
  6006 ;;		_APP_KeyboardUpdateState
  6007 ;;		_GenericQueue_CopyToArray
  6008 ;;		_USBTransferOnePacket
  6009 ;;		_memset
  6010 ;; This function is called by:
  6011 ;;		_main
  6012 ;; This function uses a non-reentrant model
  6013 ;;
  6014                           
  6015     02E2                     _APP_KeyboardTasks:	
  6016                           ;psect for function _APP_KeyboardTasks
  6017                           
  6018                           
  6019                           ;incstack = 0
  6020                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6021                           ;APP_KeyboardTasks@scanCode stored from wreg
  6022     02E2  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6023                           
  6024                           ;app_device_keyboard.c: 335:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 336:     unsigned char i;;app_device_keyboard.c: 337:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 340:     APP_KeyboardUpdateState(scanCode);
  6025     02E3  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6026     02E4  3180  2077  3182   	fcall	_APP_KeyboardUpdateState
  6027                           
  6028                           ;app_device_keyboard.c: 345:     if (USBDeviceState < CONFIGURED_STATE) {
  6029     02E7  3020               	movlw	32
  6030     02E8  0020               	movlb	0	; select bank0
  6031     02E9  026C               	subwf	_USBDeviceState,w
  6032     02EA  1C03               	btfss	3,0
  6033     02EB  0008               	return
  6034                           
  6035                           ;app_device_keyboard.c: 353:     if (UCONbits.SUSPND == 1) {
  6036                           
  6037                           ;app_device_keyboard.c: 347:     }
  6038     02EC  003D               	movlb	29	; select bank29
  6039     02ED  188E               	btfsc	14,1	;volatile
  6040     02EE  0008               	return
  6041     02EF                     l908:	
  6042                           ;app_device_keyboard.c: 369:     }
  6043                           
  6044                           
  6045                           ;app_device_keyboard.c: 367:     while (LocalSOFCount != SOFCounter) {
  6046     02EF  0020               	movlb	0	; select bank0
  6047     02F0  0866               	movf	_SOFCounter+1,w	;volatile
  6048     02F1  0022               	movlb	2	; select bank2
  6049     02F2  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6050     02F3  1D03               	skipz
  6051     02F4  2AF9               	goto	u5845
  6052     02F5  0020               	movlb	0	; select bank0
  6053     02F6  0865               	movf	_SOFCounter,w	;volatile
  6054     02F7  0022               	movlb	2	; select bank2
  6055     02F8  0636               	xorwf	_LocalSOFCount^(0+256),w
  6056     02F9                     u5845:
  6057     02F9  1903               	btfsc	3,2
  6058     02FA  2B04               	goto	l5853
  6059                           
  6060                           ;app_device_keyboard.c: 368:         LocalSOFCount = SOFCounter;
  6061     02FB  0020               	movlb	0	; select bank0
  6062     02FC  0866               	movf	_SOFCounter+1,w	;volatile
  6063     02FD  0022               	movlb	2	; select bank2
  6064     02FE  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6065     02FF  0020               	movlb	0	; select bank0
  6066     0300  0865               	movf	_SOFCounter,w	;volatile
  6067     0301  0022               	movlb	2	; select bank2
  6068     0302  00B6               	movwf	_LocalSOFCount^(0+256)
  6069     0303  2AEF               	goto	l908
  6070     0304                     l5853:
  6071                           
  6072                           ;app_device_keyboard.c: 373:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6073     0304  0834               	movf	_OldSOFCount^(0+256),w
  6074     0305  0236               	subwf	_LocalSOFCount^(0+256),w
  6075     0306  0021               	movlb	1	; select bank1
  6076     0307  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6077     0308  0022               	movlb	2	; select bank2
  6078     0309  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6079     030A  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6080     030B  0021               	movlb	1	; select bank1
  6081     030C  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6082                           
  6083                           ;app_device_keyboard.c: 375:     if (TimeDeltaMilliseconds < 0) {
  6084     030D  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6085     030E  2B1F               	goto	l5859
  6086                           
  6087                           ;app_device_keyboard.c: 376:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6088     030F  0022               	movlb	2	; select bank2
  6089     0310  0834               	movf	_OldSOFCount^(0+256),w
  6090     0311  0236               	subwf	_LocalSOFCount^(0+256),w
  6091     0312  0021               	movlb	1	; select bank1
  6092     0313  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6093     0314  0022               	movlb	2	; select bank2
  6094     0315  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6095     0316  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6096     0317  0021               	movlb	1	; select bank1
  6097     0318  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6098     0319  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6099     031A  3EFF               	addlw	255
  6100     031B  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6101     031C  307F               	movlw	127
  6102     031D  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6103     031E  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6104     031F                     l5859:
  6105                           
  6106                           ;app_device_keyboard.c: 383:     if (TimeDeltaMilliseconds > 5000) {
  6107     031F  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6108     0320  3A80               	xorlw	128
  6109     0321  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6110     0322  3093               	movlw	147
  6111     0323  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6112     0324  1D03               	skipz
  6113     0325  2B28               	goto	u5865
  6114     0326  3089               	movlw	137
  6115     0327  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6116     0328                     u5865:
  6117     0328  1C03               	skipc
  6118     0329  2B31               	goto	l5863
  6119                           
  6120                           ;app_device_keyboard.c: 384:         OldSOFCount = LocalSOFCount - 5000;
  6121     032A  0022               	movlb	2	; select bank2
  6122     032B  0836               	movf	_LocalSOFCount^(0+256),w
  6123     032C  3E78               	addlw	120
  6124     032D  00B4               	movwf	_OldSOFCount^(0+256)
  6125     032E  30EC               	movlw	236
  6126     032F  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6127     0330  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6128     0331                     l5863:
  6129                           
  6130                           ;app_device_keyboard.c: 390:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6131     0331  302C               	movlw	44
  6132     0332  0086               	movwf	6
  6133     0333  3023               	movlw	35
  6134     0334  0087               	movwf	7
  6135     0335  0016               	moviw fsr1++
  6136     0336  0401               	iorwf	1,w
  6137     0337  1903               	btfsc	3,2
  6138     0338  2B48               	goto	l5867
  6139     0339  302C               	movlw	44
  6140     033A  0086               	movwf	6
  6141     033B  3023               	movlw	35
  6142     033C  0087               	movwf	7
  6143     033D  3F40               	moviw [0]fsr1
  6144     033E  0021               	movlb	1	; select bank1
  6145     033F  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6146     0340  3F41               	moviw [1]fsr1
  6147     0341  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6148     0342  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6149     0343  0086               	movwf	6
  6150     0344  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6151     0345  0087               	movwf	7
  6152     0346  1B81               	btfsc	1,7
  6153     0347  2BC1               	goto	l5901
  6154     0348                     l5867:
  6155                           
  6156                           ;app_device_keyboard.c: 392:         memset(&inputReport, 0, sizeof (inputReport));
  6157     0348  3000               	movlw	0
  6158     0349  0021               	movlb	1	; select bank1
  6159     034A  00A8               	movwf	memset@c^(0+128)
  6160     034B  00A9               	movwf	(memset@c+1)^(0+128)
  6161     034C  3008               	movlw	8
  6162     034D  00AA               	movwf	memset@n^(0+128)
  6163     034E  3000               	movlw	0
  6164     034F  00AB               	movwf	(memset@n^(0+128)+1)
  6165     0350  30A0               	movlw	160
  6166     0351  3191  2174  3182   	fcall	_memset
  6167                           
  6168                           ;app_device_keyboard.c: 394:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6169     0354  3030               	movlw	48
  6170     0355  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6171     0356  3023               	movlw	35
  6172     0357  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6173     0358  30A2               	movlw	162
  6174     0359  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6175     035A  3197  2739  3182   	fcall	_GenericQueue_CopyToArray
  6176                           
  6177                           ;app_device_keyboard.c: 395:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6178     035D  308F               	movlw	143
  6179     035E  0086               	movwf	6
  6180     035F  3023               	movlw	35
  6181     0360  0087               	movwf	7
  6182     0361  0801               	movf	1,w
  6183     0362  00A0               	movwf	32
  6184                           
  6185                           ;app_device_keyboard.c: 398:         needToSendNewReportPacket = 0;
  6186     0363  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6187                           
  6188                           ;app_device_keyboard.c: 399:         for (i = 0; i < sizeof (inputReport); i++) {
  6189     0364  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6190     0365                     l5879:
  6191                           
  6192                           ;app_device_keyboard.c: 400:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6193     0365  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6194     0366  3EA0               	addlw	160
  6195     0367  0086               	movwf	6
  6196     0368  0187               	clrf	7
  6197     0369  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6198     036A  3EAA               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6199     036B  0084               	movwf	4
  6200     036C  3001               	movlw	1	; select bank3/4
  6201     036D  0085               	movwf	5
  6202     036E  0800               	movf	0,w
  6203     036F  0601               	xorwf	1,w
  6204     0370  1903               	skipnz
  6205     0371  2B75               	goto	l5883
  6206                           
  6207                           ;app_device_keyboard.c: 401:                 needToSendNewReportPacket = 1;
  6208     0372  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6209     0373  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6210                           
  6211                           ;app_device_keyboard.c: 402:                 break;
  6212     0374  2B7D               	goto	l5887
  6213     0375                     l5883:
  6214                           
  6215                           ;app_device_keyboard.c: 404:         }
  6216     0375  3001               	movlw	1
  6217     0376  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6218     0377  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6219     0378  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6220     0379  3008               	movlw	8
  6221     037A  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6222     037B  1C03               	skipc
  6223     037C  2B65               	goto	l5879
  6224     037D                     l5887:
  6225                           
  6226                           ;app_device_keyboard.c: 409:         if (keyboardIdleRate != 0) {
  6227     037D  0022               	movlb	2	; select bank2
  6228     037E  0838               	movf	_keyboardIdleRate^(0+256),w
  6229     037F  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6230     0380  1903               	btfsc	3,2
  6231     0381  2B96               	goto	l5893
  6232                           
  6233                           ;app_device_keyboard.c: 411:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6234     0382  0021               	movlb	1	; select bank1
  6235     0383  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6236     0384  3A80               	xorlw	128
  6237     0385  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6238     0386  0022               	movlb	2	; select bank2
  6239     0387  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6240     0388  3A80               	xorlw	128
  6241     0389  0021               	movlb	1	; select bank1
  6242     038A  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6243     038B  1D03               	skipz
  6244     038C  2B91               	goto	u5925
  6245     038D  0022               	movlb	2	; select bank2
  6246     038E  0838               	movf	_keyboardIdleRate^(0+256),w
  6247     038F  0021               	movlb	1	; select bank1
  6248     0390  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6249     0391                     u5925:
  6250     0391  1C03               	skipc
  6251     0392  2B96               	goto	l5893
  6252                           
  6253                           ;app_device_keyboard.c: 412:                 needToSendNewReportPacket = 1;
  6254     0393  0021               	movlb	1	; select bank1
  6255     0394  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6256     0395  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6257     0396                     l5893:
  6258                           
  6259                           ;app_device_keyboard.c: 418:         if (needToSendNewReportPacket == 1) {
  6260     0396  0021               	movlb	1	; select bank1
  6261     0397  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6262     0398  1D03               	btfss	3,2
  6263     0399  2BC1               	goto	l5901
  6264                           
  6265                           ;app_device_keyboard.c: 422:             oldInputReport = inputReport;
  6266     039A  30A0               	movlw	160
  6267     039B  0086               	movwf	6
  6268     039C  3000               	movlw	0
  6269     039D  0087               	movwf	7
  6270     039E  30AA               	movlw	low _oldInputReport
  6271     039F  0084               	movwf	4
  6272     03A0  3001               	movlw	high _oldInputReport
  6273     03A1  0085               	movwf	5
  6274     03A2  3008               	movlw	8
  6275     03A3  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6276     03A4                     u5940:
  6277     03A4  0016               	moviw fsr1++
  6278     03A5  001A               	movwi fsr0++
  6279     03A6  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6280     03A7  2BA4               	goto	u5940
  6281                           
  6282                           ;app_device_keyboard.c: 425:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6283     03A8  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6284     03A9  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6285     03AA  30A0               	movlw	160
  6286     03AB  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6287     03AC  3000               	movlw	0
  6288     03AD  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6289     03AE  3008               	movlw	8
  6290     03AF  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6291     03B0  3001               	movlw	1
  6292     03B1  318C  24F0  3182   	fcall	_USBTransferOnePacket
  6293     03B4  302C               	movlw	44
  6294     03B5  0086               	movwf	6
  6295     03B6  3023               	movlw	35
  6296     03B7  0087               	movwf	7
  6297     03B8  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6298     03B9  3FC0               	movwi [0]fsr1
  6299     03BA  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6300     03BB  3FC1               	movwi [1]fsr1
  6301                           
  6302                           ;app_device_keyboard.c: 426:             OldSOFCount = LocalSOFCount;
  6303     03BC  0022               	movlb	2	; select bank2
  6304     03BD  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  6305     03BE  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6306     03BF  0836               	movf	_LocalSOFCount^(0+256),w
  6307     03C0  00B4               	movwf	_OldSOFCount^(0+256)
  6308     03C1                     l5901:
  6309                           
  6310                           ;app_device_keyboard.c: 438:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  6311     03C1  302C               	movlw	44
  6312     03C2  0086               	movwf	6
  6313     03C3  3023               	movlw	35
  6314     03C4  0087               	movwf	7
  6315     03C5  3142               	addfsr 1,2
  6316     03C6  0016               	moviw fsr1++
  6317     03C7  0401               	iorwf	1,w
  6318     03C8  1903               	btfsc	3,2
  6319     03C9  2BDA               	goto	l5905
  6320     03CA  302C               	movlw	44
  6321     03CB  0086               	movwf	6
  6322     03CC  3023               	movlw	35
  6323     03CD  0087               	movwf	7
  6324     03CE  3142               	addfsr 1,2
  6325     03CF  3F40               	moviw [0]fsr1
  6326     03D0  0021               	movlb	1	; select bank1
  6327     03D1  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6328     03D2  3F41               	moviw [1]fsr1
  6329     03D3  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6330     03D4  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6331     03D5  0086               	movwf	6
  6332     03D6  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6333     03D7  0087               	movwf	7
  6334     03D8  1B81               	btfsc	1,7
  6335     03D9  0008               	return
  6336     03DA                     l5905:
  6337                           
  6338                           ;app_device_keyboard.c: 439:         APP_KeyboardProcessOutputReport();
  6339     03DA  319F  27E9  3182   	fcall	_APP_KeyboardProcessOutputReport
  6340                           
  6341                           ;app_device_keyboard.c: 440:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  6342     03DD  0021               	movlb	1	; select bank1
  6343     03DE  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6344     03DF  3020               	movlw	32
  6345     03E0  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6346     03E1  3001               	movlw	1
  6347     03E2  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6348     03E3  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  6349     03E4  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  6350     03E5  3001               	movlw	1
  6351     03E6  318C  24F0         	fcall	_USBTransferOnePacket
  6352     03E8  302C               	movlw	44
  6353     03E9  0086               	movwf	6
  6354     03EA  3023               	movlw	35
  6355     03EB  0087               	movwf	7
  6356     03EC  3142               	addfsr 1,2
  6357     03ED  0828               	movf	?_USBTransferOnePacket^(0+128),w
  6358     03EE  3FC0               	movwi [0]fsr1
  6359     03EF  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  6360     03F0  3FC1               	movwi [1]fsr1
  6361     03F1  0008               	return
  6362     03F2                     __end_of_APP_KeyboardTasks:
  6363                           
  6364                           	psect	text24
  6365     1174                     __ptext24:	
  6366 ;; *************** function _memset *****************
  6367 ;; Defined at:
  6368 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;  dest            1    wreg     PTR void 
  6371 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6372 ;;  c               2    0[BANK1 ] int 
  6373 ;;  n               2    2[BANK1 ] unsigned int 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  dest            1    6[BANK1 ] PTR void 
  6376 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6377 ;;  p               1    5[BANK1 ] PTR unsigned char 
  6378 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  1    wreg      PTR void 
  6381 ;; Registers used:
  6382 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6383 ;; Tracked objects:
  6384 ;;		On entry : 1F/1
  6385 ;;		On exit  : 1F/1
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6388 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6389 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6390 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6391 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6392 ;;Total ram usage:        7 bytes
  6393 ;; Hardware stack levels used: 1
  6394 ;; Hardware stack levels required when called: 10
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_APP_KeyboardTasks
  6399 ;; This function uses a non-reentrant model
  6400 ;;
  6401                           
  6402     1174                     _memset:	
  6403                           ;psect for function _memset
  6404                           
  6405                           
  6406                           ;incstack = 0
  6407                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6408                           ;memset@dest stored from wreg
  6409     1174  00AE               	movwf	memset@dest^(0+128)
  6410     1175  082E               	movf	memset@dest^(0+128),w
  6411     1176  00AD               	movwf	memset@p^(0+128)
  6412     1177                     l5095:
  6413     1177  3001               	movlw	1
  6414     1178  02AA               	subwf	memset@n^(0+128),f
  6415     1179  3000               	movlw	0
  6416     117A  3BAB               	subwfb	(memset@n+1)^(0+128),f
  6417     117B  0A2A               	incf	memset@n^(0+128),w
  6418     117C  1903               	btfsc	3,2
  6419     117D  0A2B               	incf	(memset@n+1)^(0+128),w
  6420     117E  1903               	btfsc	3,2
  6421     117F  0008               	return
  6422     1180  082D               	movf	memset@p^(0+128),w
  6423     1181  0086               	movwf	6
  6424     1182  0187               	clrf	7
  6425     1183  0828               	movf	memset@c^(0+128),w
  6426     1184  0081               	movwf	1
  6427     1185  3001               	movlw	1
  6428     1186  00AC               	movwf	??_memset^(0+128)
  6429     1187  082C               	movf	??_memset^(0+128),w
  6430     1188  07AD               	addwf	memset@p^(0+128),f
  6431     1189  2977               	goto	l5095
  6432     118A                     __end_of_memset:
  6433                           
  6434                           	psect	text25
  6435     0CF0                     __ptext25:	
  6436 ;; *************** function _USBTransferOnePacket *****************
  6437 ;; Defined at:
  6438 ;;		line 999 in file "usb/usb_device.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  ep              1    wreg     unsigned char 
  6441 ;;  dir             1    0[BANK1 ] unsigned char 
  6442 ;;  data            2    1[BANK1 ] PTR unsigned char 
  6443 ;;		 -> inputReport(8), outputReport(1), 
  6444 ;;  len             1    3[BANK1 ] unsigned char 
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;  ep              1    8[BANK1 ] unsigned char 
  6447 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  6448 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  2    0[BANK1 ] PTR void 
  6451 ;; Registers used:
  6452 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6453 ;; Tracked objects:
  6454 ;;		On entry : 1F/1
  6455 ;;		On exit  : 1F/1
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6458 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;Total ram usage:       11 bytes
  6463 ;; Hardware stack levels used: 1
  6464 ;; Hardware stack levels required when called: 10
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		_APP_KeyboardTasks
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472     0CF0                     _USBTransferOnePacket:	
  6473                           ;psect for function _USBTransferOnePacket
  6474                           
  6475                           
  6476                           ;incstack = 0
  6477                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  6478                           ;USBTransferOnePacket@ep stored from wreg
  6479     0CF0  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  6480                           
  6481                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  6482     0CF1  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  6483     0CF2  1903               	btfsc	3,2
  6484     0CF3  2CFC               	goto	l5065
  6485                           
  6486                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  6487     0CF4  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6488     0CF5  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6489     0CF6  0086               	movwf	6
  6490     0CF7  0187               	clrf	7
  6491     0CF8  3F40               	moviw [0]fsr1
  6492     0CF9  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  6493     0CFA  3F41               	moviw [1]fsr1
  6494     0CFB  2D04               	goto	L1
  6495     0CFC                     l5065:	
  6496                           ;usb/usb_device.c: 1008:     }
  6497                           
  6498                           
  6499                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  6500     0CFC  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6501     0CFD  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6502     0CFE  0086               	movwf	6
  6503     0CFF  3001               	movlw	1	; select bank2/3
  6504     0D00  0087               	movwf	7
  6505     0D01  3F40               	moviw [0]fsr1
  6506     0D02  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  6507     0D03  3F41               	moviw [1]fsr1
  6508     0D04                     L1:
  6509     0D04  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  6510                           
  6511                           ;usb/usb_device.c: 1017:     if(handle == 0)
  6512     0D05  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6513     0D06  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  6514     0D07  1D03               	btfss	3,2
  6515     0D08  2D0C               	goto	l5073
  6516                           
  6517                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  6518     0D09  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  6519     0D0A  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  6520     0D0B  0008               	return
  6521     0D0C                     l5073:
  6522                           
  6523                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  6524     0D0C  30FF               	movlw	255
  6525     0D0D  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  6526     0D0E  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  6527     0D0F  307F               	movlw	127
  6528     0D10  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  6529     0D11  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  6530     0D12  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6531     0D13  0086               	movwf	6
  6532     0D14  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  6533     0D15  0087               	movwf	7
  6534     0D16  3142               	addfsr 1,2
  6535     0D17  082C               	movf	??_USBTransferOnePacket^(0+128),w
  6536     0D18  3FC0               	movwi [0]fsr1
  6537     0D19  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  6538     0D1A  3FC1               	movwi [1]fsr1
  6539                           
  6540                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  6541     0D1B  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6542     0D1C  3E01               	addlw	1
  6543     0D1D  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  6544     0D1E  3000               	movlw	0
  6545     0D1F  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  6546     0D20  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  6547     0D21  082C               	movf	??_USBTransferOnePacket^(0+128),w
  6548     0D22  0086               	movwf	6
  6549     0D23  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  6550     0D24  0087               	movwf	7
  6551     0D25  082B               	movf	USBTransferOnePacket@len^(0+128),w
  6552     0D26  0081               	movwf	1
  6553                           
  6554                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  6555     0D27  3040               	movlw	64
  6556     0D28  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  6557     0D29  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6558     0D2A  0086               	movwf	6
  6559     0D2B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  6560     0D2C  0087               	movwf	7
  6561     0D2D  082C               	movf	??_USBTransferOnePacket^(0+128),w
  6562     0D2E  0581               	andwf	1,f
  6563                           
  6564                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  6565     0D2F  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6566     0D30  0086               	movwf	6
  6567     0D31  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  6568     0D32  0087               	movwf	7
  6569     0D33  1581               	bsf	1,3
  6570                           
  6571                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  6572     0D34  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6573     0D35  0086               	movwf	6
  6574     0D36  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  6575     0D37  0087               	movwf	7
  6576     0D38  1781               	bsf	1,7
  6577                           
  6578                           ;usb/usb_device.c: 1040:     if(dir != 0)
  6579     0D39  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  6580     0D3A  1903               	btfsc	3,2
  6581     0D3B  2D53               	goto	l5083
  6582                           
  6583                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  6584     0D3C  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6585     0D3D  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6586     0D3E  0086               	movwf	6
  6587     0D3F  0187               	clrf	7
  6588     0D40  3F40               	moviw [0]fsr1
  6589     0D41  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  6590     0D42  3F41               	moviw [1]fsr1
  6591     0D43  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  6592     0D44  3004               	movlw	4
  6593     0D45  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  6594     0D46  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  6595     0D47  3000               	movlw	0
  6596     0D48  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  6597     0D49  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  6598     0D4A  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6599     0D4B  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6600     0D4C  0086               	movwf	6
  6601     0D4D  0187               	clrf	7
  6602     0D4E  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  6603     0D4F  3FC0               	movwi [0]fsr1
  6604     0D50  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  6605     0D51  3FC1               	movwi [1]fsr1
  6606                           
  6607                           ;usb/usb_device.c: 1044:     }
  6608     0D52  2D6B               	goto	l5085
  6609     0D53                     l5083:
  6610                           
  6611                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  6612     0D53  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6613     0D54  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6614     0D55  0086               	movwf	6
  6615     0D56  3001               	movlw	1	; select bank2/3
  6616     0D57  0087               	movwf	7
  6617     0D58  3F40               	moviw [0]fsr1
  6618     0D59  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  6619     0D5A  3F41               	moviw [1]fsr1
  6620     0D5B  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  6621     0D5C  3004               	movlw	4
  6622     0D5D  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  6623     0D5E  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  6624     0D5F  3000               	movlw	0
  6625     0D60  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  6626     0D61  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  6627     0D62  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  6628     0D63  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6629     0D64  0086               	movwf	6
  6630     0D65  3001               	movlw	1	; select bank2/3
  6631     0D66  0087               	movwf	7
  6632     0D67  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  6633     0D68  3FC0               	movwi [0]fsr1
  6634     0D69  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  6635     0D6A  3FC1               	movwi [1]fsr1
  6636     0D6B                     l5085:
  6637                           
  6638                           ;usb/usb_device.c: 1050:     return (void*)handle;
  6639     0D6B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  6640     0D6C  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  6641     0D6D  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  6642     0D6E  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  6643     0D6F  0008               	return
  6644     0D70                     __end_of_USBTransferOnePacket:
  6645                           
  6646                           	psect	text26
  6647     1739                     __ptext26:	
  6648 ;; *************** function _GenericQueue_CopyToArray *****************
  6649 ;; Defined at:
  6650 ;;		line 63 in file "generic_queue.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;  q               2   24[BANK1 ] PTR struct .
  6653 ;;		 -> keyboard(101), 
  6654 ;;  array           1   26[BANK1 ] PTR void 
  6655 ;;		 -> inputReport(8), 
  6656 ;; Auto vars:     Size  Location     Type
  6657 ;;  count           1   32[BANK1 ] unsigned char 
  6658 ;;  index           1   31[BANK1 ] unsigned char 
  6659 ;; Return value:  Size  Location     Type
  6660 ;;                  1    wreg      void 
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 1F/1
  6665 ;;		On exit  : 1F/1
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        9 bytes
  6673 ;; Hardware stack levels used: 1
  6674 ;; Hardware stack levels required when called: 11
  6675 ;; This function calls:
  6676 ;;		___awmod
  6677 ;;		___bmul
  6678 ;;		___wmul
  6679 ;;		_memcpy
  6680 ;; This function is called by:
  6681 ;;		_APP_KeyboardTasks
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685     1739                     _GenericQueue_CopyToArray:	
  6686                           ;psect for function _GenericQueue_CopyToArray
  6687                           
  6688                           
  6689                           ;generic_queue.c: 64:     uint8_t index = q->front;
  6690                           
  6691                           ;incstack = 0
  6692                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  6693     1739  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  6694     173A  3E5C               	addlw	92
  6695     173B  0086               	movwf	6
  6696     173C  3000               	movlw	0
  6697     173D  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6698     173E  0087               	movwf	7
  6699     173F  0801               	movf	1,w
  6700     1740  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  6701                           
  6702                           ;generic_queue.c: 65:     uint8_t count = 0;
  6703     1741  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  6704     1742                     l1172:	
  6705                           ;generic_queue.c: 72:     }
  6706                           
  6707                           ;generic_queue.c: 66:     while (count < q->size) {
  6708                           
  6709                           
  6710                           ;generic_queue.c: 66:     while (count < q->size) {
  6711     1742  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  6712     1743  3E5E               	addlw	94
  6713     1744  0086               	movwf	6
  6714     1745  3000               	movlw	0
  6715     1746  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6716     1747  0087               	movwf	7
  6717     1748  0801               	movf	1,w
  6718     1749  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  6719     174A  1803               	btfsc	3,0
  6720     174B  0008               	return
  6721                           
  6722                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  6723     174C  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  6724     174D  00A8               	movwf	___bmul@multiplicand^(0+128)
  6725     174E  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  6726     174F  3E5A               	addlw	90
  6727     1750  0086               	movwf	6
  6728     1751  3000               	movlw	0
  6729     1752  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6730     1753  0087               	movwf	7
  6731     1754  0801               	movf	1,w
  6732     1755  3190  20EC  3197   	fcall	___bmul
  6733     1758  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  6734     1759  00B5               	movwf	memcpy@d1^(0+128)
  6735     175A  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6736     175B  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  6737     175C  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  6738     175D  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  6739     175E  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  6740     175F  00AF               	movwf	___wmul@multiplier^(0+128)
  6741     1760  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  6742     1761  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6743     1762  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  6744     1763  3E5A               	addlw	90
  6745     1764  0086               	movwf	6
  6746     1765  3000               	movlw	0
  6747     1766  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6748     1767  0087               	movwf	7
  6749     1768  3F40               	moviw [0]fsr1
  6750     1769  00B1               	movwf	___wmul@multiplicand^(0+128)
  6751     176A  3F41               	moviw [1]fsr1
  6752     176B  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6753     176C  3192  2208  3197   	fcall	___wmul
  6754     176F  082F               	movf	?___wmul^(0+128),w
  6755     1770  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  6756     1771  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  6757     1772  0830               	movf	(?___wmul+1)^(0+128),w
  6758     1773  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6759     1774  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  6760     1775  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  6761     1776  00B7               	movwf	memcpy@s1^(0+128)
  6762     1777  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  6763     1778  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6764     1779  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  6765     177A  3E5A               	addlw	90
  6766     177B  0086               	movwf	6
  6767     177C  3000               	movlw	0
  6768     177D  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  6769     177E  0087               	movwf	7
  6770     177F  3F40               	moviw [0]fsr1
  6771     1780  00B9               	movwf	memcpy@n^(0+128)
  6772     1781  3F41               	moviw [1]fsr1
  6773     1782  00BA               	movwf	(memcpy@n+1)^(0+128)
  6774     1783  3193  2377  3197   	fcall	_memcpy
  6775                           
  6776                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  6777     1786  300F               	movlw	15
  6778     1787  00A8               	movwf	___awmod@divisor^(0+128)
  6779     1788  3000               	movlw	0
  6780     1789  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6781     178A  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  6782     178B  3E01               	addlw	1
  6783     178C  00AA               	movwf	___awmod@dividend^(0+128)
  6784     178D  3000               	movlw	0
  6785     178E  1803               	skipnc
  6786     178F  3001               	movlw	1
  6787     1790  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6788     1791  3195  25AC  3197   	fcall	___awmod
  6789     1794  0828               	movf	?___awmod^(0+128),w
  6790     1795  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  6791                           
  6792                           ;generic_queue.c: 71:         count++;
  6793     1796  3001               	movlw	1
  6794     1797  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  6795     1798  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  6796     1799  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  6797     179A  2F42               	goto	l1172
  6798     179B                     __end_of_GenericQueue_CopyToArray:
  6799                           
  6800                           	psect	text27
  6801     10EC                     __ptext27:	
  6802 ;; *************** function ___bmul *****************
  6803 ;; Defined at:
  6804 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;  multiplier      1    wreg     unsigned char 
  6807 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  6808 ;; Auto vars:     Size  Location     Type
  6809 ;;  multiplier      1    3[BANK1 ] unsigned char 
  6810 ;;  product         1    2[BANK1 ] unsigned char 
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1    wreg      unsigned char 
  6813 ;; Registers used:
  6814 ;;		wreg, status,2, status,0
  6815 ;; Tracked objects:
  6816 ;;		On entry : 1F/1
  6817 ;;		On exit  : 1F/1
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6820 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6821 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6822 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6823 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;Total ram usage:        4 bytes
  6825 ;; Hardware stack levels used: 1
  6826 ;; Hardware stack levels required when called: 10
  6827 ;; This function calls:
  6828 ;;		Nothing
  6829 ;; This function is called by:
  6830 ;;		_GenericQueue_CopyToArray
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834     10EC                     ___bmul:	
  6835                           ;psect for function ___bmul
  6836                           
  6837                           
  6838                           ;incstack = 0
  6839                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6840                           ;___bmul@multiplier stored from wreg
  6841     10EC  00AB               	movwf	___bmul@multiplier^(0+128)
  6842     10ED  01AA               	clrf	___bmul@product^(0+128)
  6843     10EE                     l4773:
  6844     10EE  1C2B               	btfss	___bmul@multiplier^(0+128),0
  6845     10EF  28F4               	goto	l4777
  6846     10F0  0828               	movf	___bmul@multiplicand^(0+128),w
  6847     10F1  00A9               	movwf	??___bmul^(0+128)
  6848     10F2  0829               	movf	??___bmul^(0+128),w
  6849     10F3  07AA               	addwf	___bmul@product^(0+128),f
  6850     10F4                     l4777:
  6851     10F4  1003               	clrc
  6852     10F5  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  6853     10F6  1003               	clrc
  6854     10F7  0CAB               	rrf	___bmul@multiplier^(0+128),f
  6855     10F8  082B               	movf	___bmul@multiplier^(0+128),w
  6856     10F9  1D03               	btfss	3,2
  6857     10FA  28EE               	goto	l4773
  6858     10FB  082A               	movf	___bmul@product^(0+128),w
  6859     10FC  0008               	return
  6860     10FD                     __end_of___bmul:
  6861                           
  6862                           	psect	text28
  6863     0077                     __ptext28:	
  6864 ;; *************** function _APP_KeyboardUpdateState *****************
  6865 ;; Defined at:
  6866 ;;		line 446 in file "app_device_keyboard.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6869 ;;		 -> main@scanCode(3), NULL(0), 
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  6872 ;;		 -> main@scanCode(3), NULL(0), 
  6873 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  6874 ;;  leds            1   35[BANK1 ] unsigned char 
  6875 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  6876 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  6877 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      void 
  6880 ;; Registers used:
  6881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 1F/1
  6884 ;;		On exit  : 1C/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6889 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6890 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;Total ram usage:        8 bytes
  6892 ;; Hardware stack levels used: 1
  6893 ;; Hardware stack levels required when called: 12
  6894 ;; This function calls:
  6895 ;;		_GenericQueue_Contains
  6896 ;;		_GenericQueue_Enqueue
  6897 ;;		_GenericQueue_Remove
  6898 ;;		_PS2Keyboard_GetLastCommand
  6899 ;;		_PS2Keyboard_SendCommand
  6900 ;;		_PS2USB_ScanCodeToUSBHID
  6901 ;; This function is called by:
  6902 ;;		_APP_KeyboardTasks
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906     0077                     _APP_KeyboardUpdateState:	
  6907                           ;psect for function _APP_KeyboardUpdateState
  6908                           
  6909                           
  6910                           ;incstack = 0
  6911                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6912                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  6913     0077  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  6914                           
  6915                           ;app_device_keyboard.c: 447:     if (scanCode != ((void*)0)) {
  6916     0078  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6917     0079  1903               	btfsc	3,2
  6918     007A  0008               	return
  6919                           
  6920                           ;app_device_keyboard.c: 448:         if (scanCode->isExtend) {
  6921     007B  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6922     007C  0086               	movwf	6
  6923     007D  0187               	clrf	7
  6924     007E  0801               	movf	1,w
  6925     007F  1903               	btfsc	3,2
  6926     0080  28E6               	goto	l5775
  6927                           
  6928                           ;app_device_keyboard.c: 449:             if (scanCode->isBreak) {
  6929     0081  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6930     0082  3E02               	addlw	2
  6931     0083  0086               	movwf	6
  6932     0084  0187               	clrf	7
  6933     0085  0801               	movf	1,w
  6934     0086  1903               	btfsc	3,2
  6935     0087  28B0               	goto	l5763
  6936                           
  6937                           ;app_device_keyboard.c: 450:                 if (scanCode->value == 0X14) {
  6938     0088  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6939     0089  0086               	movwf	6
  6940     008A  0187               	clrf	7
  6941     008B  3014               	movlw	20
  6942     008C  0601               	xorwf	1,w
  6943     008D  1D03               	btfss	3,2
  6944     008E  2895               	goto	l5757
  6945                           
  6946                           ;app_device_keyboard.c: 451:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  6947     008F  308F               	movlw	143
  6948     0090  0086               	movwf	6
  6949     0091  3023               	movlw	35
  6950     0092  0087               	movwf	7
  6951     0093  1201               	bcf	1,4
  6952                           
  6953                           ;app_device_keyboard.c: 452:                 } else if (scanCode->value == 0x11) {
  6954     0094  0008               	return
  6955     0095                     l5757:
  6956     0095  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6957     0096  0086               	movwf	6
  6958     0097  0187               	clrf	7
  6959     0098  3011               	movlw	17
  6960     0099  0601               	xorwf	1,w
  6961     009A  1D03               	btfss	3,2
  6962     009B  28A2               	goto	l5761
  6963                           
  6964                           ;app_device_keyboard.c: 453:                     keyboard.modifiers.bits.rightAlt = 0;
  6965     009C  308F               	movlw	143
  6966     009D  0086               	movwf	6
  6967     009E  3023               	movlw	35
  6968     009F  0087               	movwf	7
  6969     00A0  1301               	bcf	1,6
  6970                           
  6971                           ;app_device_keyboard.c: 454:                 } else {
  6972     00A1  0008               	return
  6973     00A2                     l5761:
  6974                           
  6975                           ;app_device_keyboard.c: 455:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  6976     00A2  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6977     00A3  3192  22B0  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  6978     00A6  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  6979                           
  6980                           ;app_device_keyboard.c: 456:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  6981     00A7  3030               	movlw	48
  6982     00A8  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  6983     00A9  3023               	movlw	35
  6984     00AA  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  6985     00AB  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  6986     00AC  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  6987     00AD  3185  25E6         	fcall	_GenericQueue_Remove
  6988     00AF  0008               	return
  6989     00B0                     l5763:
  6990                           
  6991                           ;app_device_keyboard.c: 459:                 if (scanCode->value == 0X14) {
  6992     00B0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  6993     00B1  0086               	movwf	6
  6994     00B2  0187               	clrf	7
  6995     00B3  3014               	movlw	20
  6996     00B4  0601               	xorwf	1,w
  6997     00B5  1D03               	btfss	3,2
  6998     00B6  28BD               	goto	l5767
  6999                           
  7000                           ;app_device_keyboard.c: 460:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7001     00B7  308F               	movlw	143
  7002     00B8  0086               	movwf	6
  7003     00B9  3023               	movlw	35
  7004     00BA  0087               	movwf	7
  7005     00BB  1601               	bsf	1,4
  7006                           
  7007                           ;app_device_keyboard.c: 461:                 } else if (scanCode->value == 0x11) {
  7008     00BC  0008               	return
  7009     00BD                     l5767:
  7010     00BD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7011     00BE  0086               	movwf	6
  7012     00BF  0187               	clrf	7
  7013     00C0  3011               	movlw	17
  7014     00C1  0601               	xorwf	1,w
  7015     00C2  1D03               	btfss	3,2
  7016     00C3  28CA               	goto	l5771
  7017                           
  7018                           ;app_device_keyboard.c: 462:                     keyboard.modifiers.bits.rightAlt = 1;
  7019     00C4  308F               	movlw	143
  7020     00C5  0086               	movwf	6
  7021     00C6  3023               	movlw	35
  7022     00C7  0087               	movwf	7
  7023     00C8  1701               	bsf	1,6
  7024                           
  7025                           ;app_device_keyboard.c: 463:                 } else {
  7026     00C9  0008               	return
  7027     00CA                     l5771:
  7028                           
  7029                           ;app_device_keyboard.c: 464:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7030     00CA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7031     00CB  3192  22B0  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7032     00CE  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2915^(0+128)
  7033                           
  7034                           ;app_device_keyboard.c: 465:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7035     00CF  3030               	movlw	48
  7036     00D0  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7037     00D1  3023               	movlw	35
  7038     00D2  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7039     00D3  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2915| 0))& (0+255)
  7040     00D4  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7041     00D5  3196  26D7  3180   	fcall	_GenericQueue_Contains
  7042     00D8  3A00               	xorlw	0
  7043     00D9  1D03               	skipz
  7044     00DA  0008               	return
  7045                           
  7046                           ;app_device_keyboard.c: 466:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7047     00DB  3030               	movlw	48
  7048     00DC  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7049     00DD  3023               	movlw	35
  7050     00DE  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7051     00DF  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2915
  7052     00E0  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7053     00E1  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2915
  7054     00E2  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7055     00E3  3188  20E6         	fcall	_GenericQueue_Enqueue
  7056                           
  7057                           ;app_device_keyboard.c: 470:         } else {
  7058                           
  7059                           ;app_device_keyboard.c: 469:             }
  7060     00E5  0008               	return
  7061     00E6                     l5775:
  7062                           
  7063                           ;app_device_keyboard.c: 471:             if (scanCode->isBreak) {
  7064     00E6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7065     00E7  3E02               	addlw	2
  7066     00E8  0086               	movwf	6
  7067     00E9  0187               	clrf	7
  7068     00EA  0801               	movf	1,w
  7069     00EB  1903               	btfsc	3,2
  7070     00EC  292F               	goto	l5795
  7071                           
  7072                           ;app_device_keyboard.c: 473:                 if (scanCode->value == 0x12) {
  7073     00ED  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7074     00EE  0086               	movwf	6
  7075     00EF  0187               	clrf	7
  7076     00F0  3012               	movlw	18
  7077     00F1  0601               	xorwf	1,w
  7078     00F2  1D03               	btfss	3,2
  7079     00F3  28FA               	goto	l5781
  7080                           
  7081                           ;app_device_keyboard.c: 474:                     keyboard.modifiers.bits.leftShift = 0;
  7082     00F4  308F               	movlw	143
  7083     00F5  0086               	movwf	6
  7084     00F6  3023               	movlw	35
  7085     00F7  0087               	movwf	7
  7086     00F8  1081               	bcf	1,1
  7087                           
  7088                           ;app_device_keyboard.c: 475:                 } else if (scanCode->value == 0X14) {
  7089     00F9  0008               	return
  7090     00FA                     l5781:
  7091     00FA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7092     00FB  0086               	movwf	6
  7093     00FC  0187               	clrf	7
  7094     00FD  3014               	movlw	20
  7095     00FE  0601               	xorwf	1,w
  7096     00FF  1D03               	btfss	3,2
  7097     0100  2907               	goto	l5785
  7098                           
  7099                           ;app_device_keyboard.c: 476:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  7100     0101  308F               	movlw	143
  7101     0102  0086               	movwf	6
  7102     0103  3023               	movlw	35
  7103     0104  0087               	movwf	7
  7104     0105  1001               	bcf	1,0
  7105                           
  7106                           ;app_device_keyboard.c: 477:                 } else if (scanCode->value == 0x11) {
  7107     0106  0008               	return
  7108     0107                     l5785:
  7109     0107  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7110     0108  0086               	movwf	6
  7111     0109  0187               	clrf	7
  7112     010A  3011               	movlw	17
  7113     010B  0601               	xorwf	1,w
  7114     010C  1D03               	btfss	3,2
  7115     010D  2914               	goto	l5789
  7116                           
  7117                           ;app_device_keyboard.c: 478:                     keyboard.modifiers.bits.leftAlt = 0;
  7118     010E  308F               	movlw	143
  7119     010F  0086               	movwf	6
  7120     0110  3023               	movlw	35
  7121     0111  0087               	movwf	7
  7122     0112  1101               	bcf	1,2
  7123                           
  7124                           ;app_device_keyboard.c: 479:                 } else if (scanCode->value == 0x59) {
  7125     0113  0008               	return
  7126     0114                     l5789:
  7127     0114  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7128     0115  0086               	movwf	6
  7129     0116  0187               	clrf	7
  7130     0117  3059               	movlw	89
  7131     0118  0601               	xorwf	1,w
  7132     0119  1D03               	btfss	3,2
  7133     011A  2921               	goto	l5793
  7134                           
  7135                           ;app_device_keyboard.c: 480:                     keyboard.modifiers.bits.rightShift = 0;
  7136     011B  308F               	movlw	143
  7137     011C  0086               	movwf	6
  7138     011D  3023               	movlw	35
  7139     011E  0087               	movwf	7
  7140     011F  1281               	bcf	1,5
  7141                           
  7142                           ;app_device_keyboard.c: 481:                 } else {
  7143     0120  0008               	return
  7144     0121                     l5793:
  7145                           
  7146                           ;app_device_keyboard.c: 482:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7147     0121  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7148     0122  3192  22B0  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7149     0125  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2916^(0+128)
  7150                           
  7151                           ;app_device_keyboard.c: 483:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7152     0126  3030               	movlw	48
  7153     0127  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7154     0128  3023               	movlw	35
  7155     0129  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7156     012A  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2916| 0))& (0+255)
  7157     012B  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7158     012C  3185  25E6         	fcall	_GenericQueue_Remove
  7159     012E  0008               	return
  7160     012F                     l5795:
  7161     012F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7162     0130  0086               	movwf	6
  7163     0131  0187               	clrf	7
  7164     0132  30FA               	movlw	250
  7165     0133  0601               	xorwf	1,w
  7166     0134  1D03               	btfss	3,2
  7167     0135  295E               	goto	l5803
  7168                           
  7169                           ;app_device_keyboard.c: 486:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7170     0136  319F  2771  3180   	fcall	_PS2Keyboard_GetLastCommand
  7171     0139  3AED               	xorlw	237
  7172     013A  1D03               	skipz
  7173     013B  0008               	return
  7174                           
  7175                           ;app_device_keyboard.c: 487:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7176     013C  3090               	movlw	144
  7177     013D  0086               	movwf	6
  7178     013E  3023               	movlw	35
  7179     013F  0087               	movwf	7
  7180     0140  0C01               	rrf	1,w
  7181     0141  0C89               	rrf	9,f
  7182     0142  3901               	andlw	1
  7183     0143  0021               	movlb	1	; select bank1
  7184     0144  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7185     0145  3090               	movlw	144
  7186     0146  0086               	movwf	6
  7187     0147  3023               	movlw	35
  7188     0148  0087               	movwf	7
  7189     0149  0C01               	rrf	1,w
  7190     014A  3901               	andlw	1
  7191     014B  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7192     014C  3002               	movlw	2
  7193     014D                     u5715:
  7194     014D  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7195     014E  0B89               	decfsz	9,f
  7196     014F  294D               	goto	u5715
  7197     0150  3090               	movlw	144
  7198     0151  0086               	movwf	6
  7199     0152  3023               	movlw	35
  7200     0153  0087               	movwf	7
  7201     0154  0801               	movf	1,w
  7202     0155  3901               	andlw	1
  7203     0156  0709               	addwf	9,w
  7204     0157  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7205     0158  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7206     0159  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7207                           
  7208                           ;app_device_keyboard.c: 490:                     PS2Keyboard_SendCommand(leds);
  7209     015A  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7210     015B  3192  223E         	fcall	_PS2Keyboard_SendCommand
  7211     015D  0008               	return
  7212     015E                     l5803:
  7213     015E  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7214     015F  0086               	movwf	6
  7215     0160  0187               	clrf	7
  7216     0161  30FC               	movlw	252
  7217     0162  0601               	xorwf	1,w
  7218     0163  1903               	btfsc	3,2
  7219     0164  0008               	return
  7220     0165  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7221     0166  0086               	movwf	6
  7222     0167  0187               	clrf	7
  7223     0168  0A01               	incf	1,w
  7224     0169  1903               	btfsc	3,2
  7225     016A  0008               	return
  7226     016B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7227     016C  0086               	movwf	6
  7228     016D  0187               	clrf	7
  7229     016E  30AA               	movlw	170
  7230     016F  0601               	xorwf	1,w
  7231     0170  1903               	btfsc	3,2
  7232     0171  0008               	return
  7233                           
  7234                           ;app_device_keyboard.c: 498:                 if (scanCode->value == 0x12) {
  7235     0172  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7236     0173  0086               	movwf	6
  7237     0174  0187               	clrf	7
  7238     0175  3012               	movlw	18
  7239     0176  0601               	xorwf	1,w
  7240     0177  1D03               	btfss	3,2
  7241     0178  297F               	goto	l5813
  7242                           
  7243                           ;app_device_keyboard.c: 499:                     keyboard.modifiers.bits.leftShift = 1;
  7244     0179  308F               	movlw	143
  7245     017A  0086               	movwf	6
  7246     017B  3023               	movlw	35
  7247     017C  0087               	movwf	7
  7248     017D  1481               	bsf	1,1
  7249                           
  7250                           ;app_device_keyboard.c: 500:                 } else if (scanCode->value == 0X14) {
  7251     017E  0008               	return
  7252     017F                     l5813:
  7253     017F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7254     0180  0086               	movwf	6
  7255     0181  0187               	clrf	7
  7256     0182  3014               	movlw	20
  7257     0183  0601               	xorwf	1,w
  7258     0184  1D03               	btfss	3,2
  7259     0185  298C               	goto	l5817
  7260                           
  7261                           ;app_device_keyboard.c: 501:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7262     0186  308F               	movlw	143
  7263     0187  0086               	movwf	6
  7264     0188  3023               	movlw	35
  7265     0189  0087               	movwf	7
  7266     018A  1401               	bsf	1,0
  7267                           
  7268                           ;app_device_keyboard.c: 502:                 } else if (scanCode->value == 0x11) {
  7269     018B  0008               	return
  7270     018C                     l5817:
  7271     018C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7272     018D  0086               	movwf	6
  7273     018E  0187               	clrf	7
  7274     018F  3011               	movlw	17
  7275     0190  0601               	xorwf	1,w
  7276     0191  1D03               	btfss	3,2
  7277     0192  2999               	goto	l5821
  7278                           
  7279                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.leftAlt = 1;
  7280     0193  308F               	movlw	143
  7281     0194  0086               	movwf	6
  7282     0195  3023               	movlw	35
  7283     0196  0087               	movwf	7
  7284     0197  1501               	bsf	1,2
  7285                           
  7286                           ;app_device_keyboard.c: 504:                 } else if (scanCode->value == 0x59) {
  7287     0198  0008               	return
  7288     0199                     l5821:
  7289     0199  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7290     019A  0086               	movwf	6
  7291     019B  0187               	clrf	7
  7292     019C  3059               	movlw	89
  7293     019D  0601               	xorwf	1,w
  7294     019E  1D03               	btfss	3,2
  7295     019F  29A6               	goto	l5825
  7296                           
  7297                           ;app_device_keyboard.c: 505:                     keyboard.modifiers.bits.rightShift = 1;
  7298     01A0  308F               	movlw	143
  7299     01A1  0086               	movwf	6
  7300     01A2  3023               	movlw	35
  7301     01A3  0087               	movwf	7
  7302     01A4  1681               	bsf	1,5
  7303                           
  7304                           ;app_device_keyboard.c: 506:                 } else {
  7305     01A5  0008               	return
  7306     01A6                     l5825:
  7307                           
  7308                           ;app_device_keyboard.c: 507:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7309     01A6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7310     01A7  3192  22B0  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7311     01AA  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2924^(0+128)
  7312                           
  7313                           ;app_device_keyboard.c: 508:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7314     01AB  3030               	movlw	48
  7315     01AC  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7316     01AD  3023               	movlw	35
  7317     01AE  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7318     01AF  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2924| 0))& (0+255)
  7319     01B0  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7320     01B1  3196  26D7  3180   	fcall	_GenericQueue_Contains
  7321     01B4  3A00               	xorlw	0
  7322     01B5  1D03               	skipz
  7323     01B6  0008               	return
  7324                           
  7325                           ;app_device_keyboard.c: 509:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7326     01B7  3030               	movlw	48
  7327     01B8  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7328     01B9  3023               	movlw	35
  7329     01BA  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7330     01BB  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2924
  7331     01BC  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7332     01BD  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2924
  7333     01BE  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7334     01BF  3188  20E6         	fcall	_GenericQueue_Enqueue
  7335     01C1  0008               	return
  7336     01C2                     __end_of_APP_KeyboardUpdateState:
  7337                           
  7338                           	psect	text29
  7339     12B0                     __ptext29:	
  7340 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  7341 ;; Defined at:
  7342 ;;		line 396 in file "ps2usb.c"
  7343 ;; Parameters:    Size  Location     Type
  7344 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7345 ;;		 -> main@scanCode(3), NULL(0), 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  7348 ;;		 -> main@scanCode(3), NULL(0), 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;                  1    wreg      unsigned char 
  7351 ;; Registers used:
  7352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7353 ;; Tracked objects:
  7354 ;;		On entry : 1F/1
  7355 ;;		On exit  : 1F/1
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;Total ram usage:        1 bytes
  7363 ;; Hardware stack levels used: 1
  7364 ;; Hardware stack levels required when called: 10
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		_APP_KeyboardUpdateState
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372     12B0                     _PS2USB_ScanCodeToUSBHID:	
  7373                           ;psect for function _PS2USB_ScanCodeToUSBHID
  7374                           
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  7378                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  7379     12B0  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  7380                           
  7381                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  7382     12B1  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7383     12B2  0086               	movwf	6
  7384     12B3  0187               	clrf	7
  7385     12B4  0801               	movf	1,w
  7386     12B5  1903               	btfsc	3,2
  7387     12B6  2AC3               	goto	l4611
  7388                           
  7389                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  7390     12B7  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7391     12B8  0086               	movwf	6
  7392     12B9  0187               	clrf	7
  7393     12BA  0801               	movf	1,w
  7394     12BB  3EF2               	addlw	low (_ps2ExtUsbMap| (0+32768))
  7395     12BC  0084               	movwf	4
  7396     12BD  3083               	movlw	high (_ps2ExtUsbMap| (0+32768))
  7397     12BE  1803               	skipnc
  7398     12BF  3E01               	addlw	1
  7399     12C0  0085               	movwf	5
  7400     12C1  0800               	movf	0,w	;code access
  7401     12C2  0008               	return
  7402     12C3                     l4611:
  7403                           
  7404                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  7405     12C3  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  7406     12C4  0086               	movwf	6
  7407     12C5  0187               	clrf	7
  7408     12C6  0801               	movf	1,w
  7409     12C7  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  7410     12C8  0084               	movwf	4
  7411     12C9  3090               	movlw	high (_ps2UsbMap| (0+32768))
  7412     12CA  1803               	skipnc
  7413     12CB  3E01               	addlw	1
  7414     12CC  0085               	movwf	5
  7415     12CD  0800               	movf	0,w	;code access
  7416     12CE  0008               	return
  7417     12CF                     __end_of_PS2USB_ScanCodeToUSBHID:
  7418                           
  7419                           	psect	text30
  7420     1F71                     __ptext30:	
  7421 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  7422 ;; Defined at:
  7423 ;;		line 75 in file "ps2_keyboard.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      unsigned char 
  7430 ;; Registers used:
  7431 ;;		wreg
  7432 ;; Tracked objects:
  7433 ;;		On entry : 1F/1
  7434 ;;		On exit  : 1F/2
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        0 bytes
  7442 ;; Hardware stack levels used: 1
  7443 ;; Hardware stack levels required when called: 10
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_APP_KeyboardUpdateState
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451     1F71                     _PS2Keyboard_GetLastCommand:	
  7452                           ;psect for function _PS2Keyboard_GetLastCommand
  7453                           
  7454                           
  7455                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  7459     1F71  0022               	movlb	2	; select bank2
  7460     1F72  084C               	movf	_keyboardCommand^(0+256),w	;volatile
  7461     1F73  0008               	return
  7462     1F74                     __end_of_PS2Keyboard_GetLastCommand:
  7463                           
  7464                           	psect	text31
  7465     05E6                     __ptext31:	
  7466 ;; *************** function _GenericQueue_Remove *****************
  7467 ;; Defined at:
  7468 ;;		line 35 in file "generic_queue.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  q               2   24[BANK1 ] PTR struct .
  7471 ;;		 -> keyboard(101), 
  7472 ;;  item            1   26[BANK1 ] PTR const void 
  7473 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2916(1), APP_KeyboardUpdateState@usbHidCode(1), 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  j               1   32[BANK1 ] unsigned char 
  7476 ;;  i               1   31[BANK1 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 1F/1
  7483 ;;		On exit  : 1F/1
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7486 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;Total ram usage:        9 bytes
  7491 ;; Hardware stack levels used: 1
  7492 ;; Hardware stack levels required when called: 11
  7493 ;; This function calls:
  7494 ;;		_GenericQueue_IsEmpty
  7495 ;;		___awmod
  7496 ;;		___wmul
  7497 ;;		_memcmp
  7498 ;;		_memcpy
  7499 ;; This function is called by:
  7500 ;;		_APP_KeyboardUpdateState
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504     05E6                     _GenericQueue_Remove:	
  7505                           ;psect for function _GenericQueue_Remove
  7506                           
  7507                           
  7508                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  7509                           
  7510                           ;incstack = 0
  7511                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7512     05E6  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  7513     05E7  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  7514     05E8  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7515     05E9  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7516     05EA  3191  210E  3185   	fcall	_GenericQueue_IsEmpty
  7517     05ED  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7518     05EE  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7519     05EF  1D03               	btfss	3,2
  7520     05F0  0008               	return
  7521                           
  7522                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  7523     05F1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7524     05F2  3E5C               	addlw	92
  7525     05F3  0086               	movwf	6
  7526     05F4  3000               	movlw	0
  7527     05F5  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7528     05F6  0087               	movwf	7
  7529     05F7  0801               	movf	1,w
  7530     05F8                     L2:
  7531     05F8  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  7532     05F9  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7533     05FA  3E5D               	addlw	93
  7534     05FB  0086               	movwf	6
  7535     05FC  3000               	movlw	0
  7536     05FD  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7537     05FE  0087               	movwf	7
  7538     05FF  0801               	movf	1,w
  7539     0600  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  7540     0601  1903               	btfsc	3,2
  7541     0602  0008               	return
  7542                           
  7543                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  7544     0603  0847               	movf	GenericQueue_Remove@i^(0+128),w
  7545     0604  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  7546     0605  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  7547     0606  0843               	movf	??_GenericQueue_Remove^(0+128),w
  7548     0607  00AF               	movwf	___wmul@multiplier^(0+128)
  7549     0608  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  7550     0609  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7551     060A  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7552     060B  3E5A               	addlw	90
  7553     060C  0086               	movwf	6
  7554     060D  3000               	movlw	0
  7555     060E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7556     060F  0087               	movwf	7
  7557     0610  3F40               	moviw [0]fsr1
  7558     0611  00B1               	movwf	___wmul@multiplicand^(0+128)
  7559     0612  3F41               	moviw [1]fsr1
  7560     0613  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7561     0614  3192  2208  3185   	fcall	___wmul
  7562     0617  082F               	movf	?___wmul^(0+128),w
  7563     0618  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  7564     0619  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  7565     061A  0830               	movf	(?___wmul+1)^(0+128),w
  7566     061B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7567     061C  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  7568     061D  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  7569     061E  00B5               	movwf	memcmp@vl^(0+128)
  7570     061F  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  7571     0620  00B6               	movwf	(memcmp@vl+1)^(0+128)
  7572     0621  0842               	movf	GenericQueue_Remove@item^(0+128),w
  7573     0622  00B7               	movwf	memcmp@vr^(0+128)
  7574     0623  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7575     0624  3E5A               	addlw	90
  7576     0625  0086               	movwf	6
  7577     0626  3000               	movlw	0
  7578     0627  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7579     0628  0087               	movwf	7
  7580     0629  3F40               	moviw [0]fsr1
  7581     062A  00B8               	movwf	memcmp@n^(0+128)
  7582     062B  3F41               	moviw [1]fsr1
  7583     062C  00B9               	movwf	(memcmp@n+1)^(0+128)
  7584     062D  3193  23FF  3185   	fcall	_memcmp
  7585     0630  0835               	movf	?_memcmp^(0+128),w
  7586     0631  0436               	iorwf	(?_memcmp+1)^(0+128),w
  7587     0632  1D03               	btfss	3,2
  7588     0633  2ECA               	goto	l4633
  7589                           
  7590                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  7591     0634  0847               	movf	GenericQueue_Remove@i^(0+128),w
  7592     0635                     L3:
  7593     0635  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  7594     0636  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7595     0637  3E5D               	addlw	93
  7596     0638  0086               	movwf	6
  7597     0639  3000               	movlw	0
  7598     063A  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7599     063B  0087               	movwf	7
  7600     063C  0801               	movf	1,w
  7601     063D  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  7602     063E  1903               	btfsc	3,2
  7603     063F  2EA0               	goto	l4629
  7604                           
  7605                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  7606     0640  0848               	movf	GenericQueue_Remove@j^(0+128),w
  7607     0641  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  7608     0642  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  7609     0643  0843               	movf	??_GenericQueue_Remove^(0+128),w
  7610     0644  00AF               	movwf	___wmul@multiplier^(0+128)
  7611     0645  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  7612     0646  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7613     0647  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7614     0648  3E5A               	addlw	90
  7615     0649  0086               	movwf	6
  7616     064A  3000               	movlw	0
  7617     064B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7618     064C  0087               	movwf	7
  7619     064D  3F40               	moviw [0]fsr1
  7620     064E  00B1               	movwf	___wmul@multiplicand^(0+128)
  7621     064F  3F41               	moviw [1]fsr1
  7622     0650  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7623     0651  3192  2208  3185   	fcall	___wmul
  7624     0654  082F               	movf	?___wmul^(0+128),w
  7625     0655  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  7626     0656  00B5               	movwf	memcpy@d1^(0+128)
  7627     0657  0830               	movf	(?___wmul+1)^(0+128),w
  7628     0658  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7629     0659  00B6               	movwf	(memcpy@d1+1)^(0+128)
  7630     065A  0848               	movf	GenericQueue_Remove@j^(0+128),w
  7631     065B  3E01               	addlw	1
  7632     065C  00AA               	movwf	___awmod@dividend^(0+128)
  7633     065D  3000               	movlw	0
  7634     065E  1803               	skipnc
  7635     065F  3001               	movlw	1
  7636     0660  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7637     0661  300F               	movlw	15
  7638     0662  00A8               	movwf	___awmod@divisor^(0+128)
  7639     0663  3000               	movlw	0
  7640     0664  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7641     0665  3195  25AC  3185   	fcall	___awmod
  7642     0668  0829               	movf	(?___awmod+1)^(0+128),w
  7643     0669  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7644     066A  0828               	movf	?___awmod^(0+128),w
  7645     066B  00AF               	movwf	___wmul@multiplier^(0+128)
  7646     066C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7647     066D  3E5A               	addlw	90
  7648     066E  0086               	movwf	6
  7649     066F  3000               	movlw	0
  7650     0670  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7651     0671  0087               	movwf	7
  7652     0672  3F40               	moviw [0]fsr1
  7653     0673  00B1               	movwf	___wmul@multiplicand^(0+128)
  7654     0674  3F41               	moviw [1]fsr1
  7655     0675  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7656     0676  3192  2208  3185   	fcall	___wmul
  7657     0679  082F               	movf	?___wmul^(0+128),w
  7658     067A  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  7659     067B  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  7660     067C  0830               	movf	(?___wmul+1)^(0+128),w
  7661     067D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7662     067E  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  7663     067F  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  7664     0680  00B7               	movwf	memcpy@s1^(0+128)
  7665     0681  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  7666     0682  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7667     0683  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7668     0684  3E5A               	addlw	90
  7669     0685  0086               	movwf	6
  7670     0686  3000               	movlw	0
  7671     0687  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7672     0688  0087               	movwf	7
  7673     0689  3F40               	moviw [0]fsr1
  7674     068A  00B9               	movwf	memcpy@n^(0+128)
  7675     068B  3F41               	moviw [1]fsr1
  7676     068C  00BA               	movwf	(memcpy@n+1)^(0+128)
  7677     068D  3193  2377  3185   	fcall	_memcpy
  7678                           
  7679                           ;generic_queue.c: 43:                 }
  7680     0690  300F               	movlw	15
  7681     0691  00A8               	movwf	___awmod@divisor^(0+128)
  7682     0692  3000               	movlw	0
  7683     0693  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7684     0694  0848               	movf	GenericQueue_Remove@j^(0+128),w
  7685     0695  3E01               	addlw	1
  7686     0696  00AA               	movwf	___awmod@dividend^(0+128)
  7687     0697  3000               	movlw	0
  7688     0698  1803               	skipnc
  7689     0699  3001               	movlw	1
  7690     069A  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7691     069B  3195  25AC  3185   	fcall	___awmod
  7692     069E  0828               	movf	?___awmod^(0+128),w
  7693     069F  2E35               	goto	L3
  7694     06A0                     l4629:
  7695                           
  7696                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  7697     06A0  300F               	movlw	15
  7698     06A1  00A8               	movwf	___awmod@divisor^(0+128)
  7699     06A2  3000               	movlw	0
  7700     06A3  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7701     06A4  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7702     06A5  3E5D               	addlw	93
  7703     06A6  0086               	movwf	6
  7704     06A7  3000               	movlw	0
  7705     06A8  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7706     06A9  0087               	movwf	7
  7707     06AA  0801               	movf	1,w
  7708     06AB  3E0E               	addlw	14
  7709     06AC  00AA               	movwf	___awmod@dividend^(0+128)
  7710     06AD  3000               	movlw	0
  7711     06AE  1803               	skipnc
  7712     06AF  3001               	movlw	1
  7713     06B0  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7714     06B1  3195  25AC         	fcall	___awmod
  7715     06B3  0828               	movf	?___awmod^(0+128),w
  7716     06B4  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  7717     06B5  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7718     06B6  3E5D               	addlw	93
  7719     06B7  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  7720     06B8  3000               	movlw	0
  7721     06B9  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7722     06BA  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  7723     06BB  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  7724     06BC  0086               	movwf	6
  7725     06BD  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  7726     06BE  0087               	movwf	7
  7727     06BF  0843               	movf	??_GenericQueue_Remove^(0+128),w
  7728     06C0  0081               	movwf	1
  7729                           
  7730                           ;generic_queue.c: 45:                 q->size--;
  7731     06C1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  7732     06C2  3E5E               	addlw	94
  7733     06C3  0086               	movwf	6
  7734     06C4  3000               	movlw	0
  7735     06C5  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  7736     06C6  0087               	movwf	7
  7737     06C7  3001               	movlw	1
  7738     06C8  0281               	subwf	1,f
  7739                           
  7740                           ;generic_queue.c: 46:                 break;
  7741     06C9  0008               	return
  7742     06CA                     l4633:
  7743                           
  7744                           ;generic_queue.c: 48:         }
  7745     06CA  300F               	movlw	15
  7746     06CB  00A8               	movwf	___awmod@divisor^(0+128)
  7747     06CC  3000               	movlw	0
  7748     06CD  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7749     06CE  0847               	movf	GenericQueue_Remove@i^(0+128),w
  7750     06CF  3E01               	addlw	1
  7751     06D0  00AA               	movwf	___awmod@dividend^(0+128)
  7752     06D1  3000               	movlw	0
  7753     06D2  1803               	skipnc
  7754     06D3  3001               	movlw	1
  7755     06D4  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7756     06D5  3195  25AC  3185   	fcall	___awmod
  7757     06D8  0828               	movf	?___awmod^(0+128),w
  7758     06D9  2DF8               	goto	L2
  7759     06DA                     __end_of_GenericQueue_Remove:
  7760                           
  7761                           	psect	text32
  7762     08E6                     __ptext32:	
  7763 ;; *************** function _GenericQueue_Enqueue *****************
  7764 ;; Defined at:
  7765 ;;		line 19 in file "generic_queue.c"
  7766 ;; Parameters:    Size  Location     Type
  7767 ;;  q               2   24[BANK1 ] PTR struct .
  7768 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  7769 ;;  item            2   26[BANK1 ] PTR const void 
  7770 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2915(1), 
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 1F/1
  7779 ;;		On exit  : 1F/1
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7782 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;Total ram usage:        7 bytes
  7787 ;; Hardware stack levels used: 1
  7788 ;; Hardware stack levels required when called: 11
  7789 ;; This function calls:
  7790 ;;		_GenericQueue_IsFull
  7791 ;;		___awmod
  7792 ;;		___wmul
  7793 ;;		_memcpy
  7794 ;; This function is called by:
  7795 ;;		_APP_KeyboardUpdateState
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799     08E6                     _GenericQueue_Enqueue:	
  7800                           ;psect for function _GenericQueue_Enqueue
  7801                           
  7802                           
  7803                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  7804                           
  7805                           ;incstack = 0
  7806                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7807     08E6  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  7808     08E7  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  7809     08E8  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7810     08E9  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  7811     08EA  3191  2135  3188   	fcall	_GenericQueue_IsFull
  7812     08ED  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  7813     08EE  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  7814     08EF  1D03               	btfss	3,2
  7815     08F0  0008               	return
  7816                           
  7817                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  7818     08F1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7819     08F2  3E5D               	addlw	93
  7820     08F3  0086               	movwf	6
  7821     08F4  3000               	movlw	0
  7822     08F5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7823     08F6  0087               	movwf	7
  7824     08F7  0801               	movf	1,w
  7825     08F8  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  7826     08F9  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  7827     08FA  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  7828     08FB  00AF               	movwf	___wmul@multiplier^(0+128)
  7829     08FC  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  7830     08FD  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7831     08FE  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7832     08FF  3E5A               	addlw	90
  7833     0900  0086               	movwf	6
  7834     0901  3000               	movlw	0
  7835     0902  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7836     0903  0087               	movwf	7
  7837     0904  3F40               	moviw [0]fsr1
  7838     0905  00B1               	movwf	___wmul@multiplicand^(0+128)
  7839     0906  3F41               	moviw [1]fsr1
  7840     0907  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7841     0908  3192  2208  3188   	fcall	___wmul
  7842     090B  082F               	movf	?___wmul^(0+128),w
  7843     090C  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  7844     090D  00B5               	movwf	memcpy@d1^(0+128)
  7845     090E  0830               	movf	(?___wmul+1)^(0+128),w
  7846     090F  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7847     0910  00B6               	movwf	(memcpy@d1+1)^(0+128)
  7848     0911  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  7849     0912  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7850     0913  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  7851     0914  00B7               	movwf	memcpy@s1^(0+128)
  7852     0915  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7853     0916  3E5A               	addlw	90
  7854     0917  0086               	movwf	6
  7855     0918  3000               	movlw	0
  7856     0919  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7857     091A  0087               	movwf	7
  7858     091B  3F40               	moviw [0]fsr1
  7859     091C  00B9               	movwf	memcpy@n^(0+128)
  7860     091D  3F41               	moviw [1]fsr1
  7861     091E  00BA               	movwf	(memcpy@n+1)^(0+128)
  7862     091F  3193  2377  3188   	fcall	_memcpy
  7863                           
  7864                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  7865     0922  300F               	movlw	15
  7866     0923  00A8               	movwf	___awmod@divisor^(0+128)
  7867     0924  3000               	movlw	0
  7868     0925  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7869     0926  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7870     0927  3E5D               	addlw	93
  7871     0928  0086               	movwf	6
  7872     0929  3000               	movlw	0
  7873     092A  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7874     092B  0087               	movwf	7
  7875     092C  0801               	movf	1,w
  7876     092D  3E01               	addlw	1
  7877     092E  00AA               	movwf	___awmod@dividend^(0+128)
  7878     092F  3000               	movlw	0
  7879     0930  1803               	skipnc
  7880     0931  3001               	movlw	1
  7881     0932  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7882     0933  3195  25AC         	fcall	___awmod
  7883     0935  0828               	movf	?___awmod^(0+128),w
  7884     0936  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  7885     0937  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7886     0938  3E5D               	addlw	93
  7887     0939  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  7888     093A  3000               	movlw	0
  7889     093B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7890     093C  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  7891     093D  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  7892     093E  0086               	movwf	6
  7893     093F  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  7894     0940  0087               	movwf	7
  7895     0941  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  7896     0942  0081               	movwf	1
  7897                           
  7898                           ;generic_queue.c: 23:         q->size++;
  7899     0943  3001               	movlw	1
  7900     0944  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  7901     0945  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  7902     0946  3E5E               	addlw	94
  7903     0947  0086               	movwf	6
  7904     0948  3000               	movlw	0
  7905     0949  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  7906     094A  0087               	movwf	7
  7907     094B  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  7908     094C  0781               	addwf	1,f
  7909     094D  0008               	return
  7910     094E                     __end_of_GenericQueue_Enqueue:
  7911                           
  7912                           	psect	text33
  7913     1377                     __ptext33:	
  7914 ;; *************** function _memcpy *****************
  7915 ;; Defined at:
  7916 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  d1              2   13[BANK1 ] PTR void 
  7919 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  7920 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  7921 ;;  s1              2   15[BANK1 ] PTR const void 
  7922 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  7923 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2915(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  7924 ;;		 -> SetupPkt(8), 
  7925 ;;  n               2   17[BANK1 ] unsigned int 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  7928 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  7929 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2915(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  7930 ;;		 -> SetupPkt(8), 
  7931 ;;  d               2   19[BANK1 ] PTR unsigned char 
  7932 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  7933 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  7934 ;;  tmp             1   23[BANK1 ] unsigned char 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  2   13[BANK1 ] PTR void 
  7937 ;; Registers used:
  7938 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7939 ;; Tracked objects:
  7940 ;;		On entry : 1F/1
  7941 ;;		On exit  : 1F/1
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7944 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;Total ram usage:       11 bytes
  7949 ;; Hardware stack levels used: 1
  7950 ;; Hardware stack levels required when called: 10
  7951 ;; This function calls:
  7952 ;;		Nothing
  7953 ;; This function is called by:
  7954 ;;		_GenericQueue_Enqueue
  7955 ;;		_GenericQueue_Dequeue
  7956 ;;		_GenericQueue_Remove
  7957 ;;		_GenericQueue_CopyToArray
  7958 ;; This function uses a non-reentrant model
  7959 ;;
  7960                           
  7961     1377                     _memcpy:	
  7962                           ;psect for function _memcpy
  7963                           
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  7967     1377  0838               	movf	(memcpy@s1+1)^(0+128),w
  7968     1378  00BE               	movwf	(memcpy@s+1)^(0+128)
  7969     1379  0837               	movf	memcpy@s1^(0+128),w
  7970     137A  00BD               	movwf	memcpy@s^(0+128)
  7971     137B  0836               	movf	(memcpy@d1+1)^(0+128),w
  7972     137C  00BC               	movwf	(memcpy@d+1)^(0+128)
  7973     137D  0835               	movf	memcpy@d1^(0+128),w
  7974     137E  00BB               	movwf	memcpy@d^(0+128)
  7975     137F                     l4367:
  7976     137F  3001               	movlw	1
  7977     1380  02B9               	subwf	memcpy@n^(0+128),f
  7978     1381  3000               	movlw	0
  7979     1382  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  7980     1383  0A39               	incf	memcpy@n^(0+128),w
  7981     1384  1903               	btfsc	3,2
  7982     1385  0A3A               	incf	(memcpy@n+1)^(0+128),w
  7983     1386  1903               	btfsc	3,2
  7984     1387  0008               	return
  7985     1388  083D               	movf	memcpy@s^(0+128),w
  7986     1389  0086               	movwf	6
  7987     138A  083E               	movf	(memcpy@s+1)^(0+128),w
  7988     138B  0087               	movwf	7
  7989     138C  0801               	movf	1,w
  7990     138D  00BF               	movwf	memcpy@tmp^(0+128)
  7991     138E  3001               	movlw	1
  7992     138F  07BD               	addwf	memcpy@s^(0+128),f
  7993     1390  3000               	movlw	0
  7994     1391  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  7995     1392  083B               	movf	memcpy@d^(0+128),w
  7996     1393  0086               	movwf	6
  7997     1394  083C               	movf	(memcpy@d+1)^(0+128),w
  7998     1395  0087               	movwf	7
  7999     1396  083F               	movf	memcpy@tmp^(0+128),w
  8000     1397  0081               	movwf	1
  8001     1398  3001               	movlw	1
  8002     1399  07BB               	addwf	memcpy@d^(0+128),f
  8003     139A  3000               	movlw	0
  8004     139B  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8005     139C  2B7F               	goto	l4367
  8006     139D                     __end_of_memcpy:
  8007                           
  8008                           	psect	text34
  8009     1135                     __ptext34:	
  8010 ;; *************** function _GenericQueue_IsFull *****************
  8011 ;; Defined at:
  8012 ;;		line 15 in file "generic_queue.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;  q               2    0[BANK1 ] PTR struct .
  8015 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8016 ;; Auto vars:     Size  Location     Type
  8017 ;;		None
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  2    0[BANK1 ] int 
  8020 ;; Registers used:
  8021 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8022 ;; Tracked objects:
  8023 ;;		On entry : 1F/1
  8024 ;;		On exit  : 1F/1
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:        4 bytes
  8032 ;; Hardware stack levels used: 1
  8033 ;; Hardware stack levels required when called: 10
  8034 ;; This function calls:
  8035 ;;		Nothing
  8036 ;; This function is called by:
  8037 ;;		_GenericQueue_Enqueue
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041     1135                     _GenericQueue_IsFull:	
  8042                           ;psect for function _GenericQueue_IsFull
  8043                           
  8044                           
  8045                           ;generic_queue.c: 16:     return (q->size == 15);
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8049     1135  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8050     1136  3E5E               	addlw	94
  8051     1137  0086               	movwf	6
  8052     1138  3000               	movlw	0
  8053     1139  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8054     113A  0087               	movwf	7
  8055     113B  300F               	movlw	15
  8056     113C  0601               	xorwf	1,w
  8057     113D  1D03               	btfss	3,2
  8058     113E  2941               	goto	u3610
  8059     113F  3001               	movlw	1
  8060     1140  2942               	goto	u3620
  8061     1141                     u3610:
  8062     1141  3000               	movlw	0
  8063     1142                     u3620:
  8064     1142  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8065     1143  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8066     1144  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8067     1145  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8068     1146  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8069     1147  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8070     1148  0008               	return
  8071     1149                     __end_of_GenericQueue_IsFull:
  8072                           
  8073                           	psect	text35
  8074     16D7                     __ptext35:	
  8075 ;; *************** function _GenericQueue_Contains *****************
  8076 ;; Defined at:
  8077 ;;		line 52 in file "generic_queue.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  q               2   22[BANK1 ] PTR struct .
  8080 ;;		 -> keyboard(101), 
  8081 ;;  item            1   24[BANK1 ] PTR const void 
  8082 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2915(1), 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  i               1   29[BANK1 ] unsigned char 
  8085 ;; Return value:  Size  Location     Type
  8086 ;;                  1    wreg      _Bool 
  8087 ;; Registers used:
  8088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8089 ;; Tracked objects:
  8090 ;;		On entry : 1F/1
  8091 ;;		On exit  : 1F/1
  8092 ;;		Unchanged: 0/0
  8093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8094 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;Total ram usage:        8 bytes
  8099 ;; Hardware stack levels used: 1
  8100 ;; Hardware stack levels required when called: 11
  8101 ;; This function calls:
  8102 ;;		_GenericQueue_IsEmpty
  8103 ;;		___awmod
  8104 ;;		___wmul
  8105 ;;		_memcmp
  8106 ;; This function is called by:
  8107 ;;		_APP_KeyboardUpdateState
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111     16D7                     _GenericQueue_Contains:	
  8112                           ;psect for function _GenericQueue_Contains
  8113                           
  8114                           
  8115                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8116                           
  8117                           ;incstack = 0
  8118                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8119     16D7  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8120     16D8  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8121     16D9  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8122     16DA  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8123     16DB  3191  210E  3196   	fcall	_GenericQueue_IsEmpty
  8124     16DE  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8125     16DF  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8126     16E0  1D03               	btfss	3,2
  8127     16E1  2F37               	goto	l4651
  8128                           
  8129                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8130     16E2  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8131     16E3  3E5C               	addlw	92
  8132     16E4  0086               	movwf	6
  8133     16E5  3000               	movlw	0
  8134     16E6  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8135     16E7  0087               	movwf	7
  8136     16E8  0801               	movf	1,w
  8137     16E9                     L4:
  8138     16E9  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8139     16EA  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8140     16EB  3E5D               	addlw	93
  8141     16EC  0086               	movwf	6
  8142     16ED  3000               	movlw	0
  8143     16EE  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8144     16EF  0087               	movwf	7
  8145     16F0  0801               	movf	1,w
  8146     16F1  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8147     16F2  1903               	btfsc	3,2
  8148     16F3  2F37               	goto	l4651
  8149                           
  8150                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8151     16F4  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8152     16F5  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8153     16F6  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8154     16F7  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8155     16F8  00AF               	movwf	___wmul@multiplier^(0+128)
  8156     16F9  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8157     16FA  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8158     16FB  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8159     16FC  3E5A               	addlw	90
  8160     16FD  0086               	movwf	6
  8161     16FE  3000               	movlw	0
  8162     16FF  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8163     1700  0087               	movwf	7
  8164     1701  3F40               	moviw [0]fsr1
  8165     1702  00B1               	movwf	___wmul@multiplicand^(0+128)
  8166     1703  3F41               	moviw [1]fsr1
  8167     1704  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8168     1705  3192  2208  3196   	fcall	___wmul
  8169     1708  082F               	movf	?___wmul^(0+128),w
  8170     1709  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8171     170A  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8172     170B  0830               	movf	(?___wmul+1)^(0+128),w
  8173     170C  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8174     170D  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8175     170E  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8176     170F  00B5               	movwf	memcmp@vl^(0+128)
  8177     1710  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8178     1711  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8179     1712  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8180     1713  00B7               	movwf	memcmp@vr^(0+128)
  8181     1714  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8182     1715  3E5A               	addlw	90
  8183     1716  0086               	movwf	6
  8184     1717  3000               	movlw	0
  8185     1718  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8186     1719  0087               	movwf	7
  8187     171A  3F40               	moviw [0]fsr1
  8188     171B  00B8               	movwf	memcmp@n^(0+128)
  8189     171C  3F41               	moviw [1]fsr1
  8190     171D  00B9               	movwf	(memcmp@n+1)^(0+128)
  8191     171E  3193  23FF  3196   	fcall	_memcmp
  8192     1721  0835               	movf	?_memcmp^(0+128),w
  8193     1722  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8194     1723  1D03               	btfss	3,2
  8195     1724  2F27               	goto	l4647
  8196                           
  8197                           ;generic_queue.c: 56:                 return 1;
  8198     1725  3001               	movlw	1
  8199     1726  0008               	return
  8200     1727                     l4647:
  8201                           
  8202                           ;generic_queue.c: 58:         }
  8203     1727  300F               	movlw	15
  8204     1728  00A8               	movwf	___awmod@divisor^(0+128)
  8205     1729  3000               	movlw	0
  8206     172A  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8207     172B  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8208     172C  3E01               	addlw	1
  8209     172D  00AA               	movwf	___awmod@dividend^(0+128)
  8210     172E  3000               	movlw	0
  8211     172F  1803               	skipnc
  8212     1730  3001               	movlw	1
  8213     1731  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8214     1732  3195  25AC  3196   	fcall	___awmod
  8215     1735  0828               	movf	?___awmod^(0+128),w
  8216     1736  2EE9               	goto	L4
  8217     1737                     l4651:
  8218                           
  8219                           ;generic_queue.c: 60:     return 0;
  8220     1737  3000               	movlw	0
  8221     1738  0008               	return
  8222     1739                     __end_of_GenericQueue_Contains:
  8223                           
  8224                           	psect	text36
  8225     13FF                     __ptext36:	
  8226 ;; *************** function _memcmp *****************
  8227 ;; Defined at:
  8228 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  vl              2   13[BANK1 ] PTR const void 
  8231 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8232 ;;  vr              1   15[BANK1 ] PTR const void 
  8233 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2916(1), APP_KeyboardUpdateState@
      +usbHidCode_2915(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8234 ;;  n               2   16[BANK1 ] unsigned int 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8237 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8238 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8239 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2916(1), APP_KeyboardUpdateState@
      +usbHidCode_2915(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8240 ;; Return value:  Size  Location     Type
  8241 ;;                  2   13[BANK1 ] int 
  8242 ;; Registers used:
  8243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8244 ;; Tracked objects:
  8245 ;;		On entry : 1F/1
  8246 ;;		On exit  : 1F/1
  8247 ;;		Unchanged: 0/0
  8248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8249 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;Total ram usage:        9 bytes
  8254 ;; Hardware stack levels used: 1
  8255 ;; Hardware stack levels required when called: 10
  8256 ;; This function calls:
  8257 ;;		Nothing
  8258 ;; This function is called by:
  8259 ;;		_GenericQueue_Remove
  8260 ;;		_GenericQueue_Contains
  8261 ;; This function uses a non-reentrant model
  8262 ;;
  8263                           
  8264     13FF                     _memcmp:	
  8265                           ;psect for function _memcmp
  8266                           
  8267                           
  8268                           ;incstack = 0
  8269                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8270     13FF  0836               	movf	(memcmp@vl+1)^(0+128),w
  8271     1400  00BC               	movwf	(memcmp@l+1)^(0+128)
  8272     1401  0835               	movf	memcmp@vl^(0+128),w
  8273     1402  00BB               	movwf	memcmp@l^(0+128)
  8274     1403  0837               	movf	memcmp@vr^(0+128),w
  8275     1404  00BD               	movwf	memcmp@r^(0+128)
  8276     1405  2C1D               	goto	l4425
  8277     1406                     l4427:
  8278     1406  083D               	movf	memcmp@r^(0+128),w
  8279     1407  0086               	movwf	6
  8280     1408  0187               	clrf	7
  8281     1409  083B               	movf	memcmp@l^(0+128),w
  8282     140A  0084               	movwf	4
  8283     140B  083C               	movf	(memcmp@l+1)^(0+128),w
  8284     140C  0085               	movwf	5
  8285     140D  0800               	movf	0,w
  8286     140E  0601               	xorwf	1,w
  8287     140F  1D03               	btfss	3,2
  8288     1410  2C21               	goto	l4429
  8289     1411  3001               	movlw	1
  8290     1412  02B8               	subwf	memcmp@n^(0+128),f
  8291     1413  3000               	movlw	0
  8292     1414  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8293     1415  3001               	movlw	1
  8294     1416  07BB               	addwf	memcmp@l^(0+128),f
  8295     1417  3000               	movlw	0
  8296     1418  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  8297     1419  3001               	movlw	1
  8298     141A  00BA               	movwf	??_memcmp^(0+128)
  8299     141B  083A               	movf	??_memcmp^(0+128),w
  8300     141C  07BD               	addwf	memcmp@r^(0+128),f
  8301     141D                     l4425:
  8302     141D  0838               	movf	memcmp@n^(0+128),w
  8303     141E  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8304     141F  1D03               	btfss	3,2
  8305     1420  2C06               	goto	l4427
  8306     1421                     l4429:
  8307     1421  0838               	movf	memcmp@n^(0+128),w
  8308     1422  0439               	iorwf	(memcmp@n+1)^(0+128),w
  8309     1423  1D03               	btfss	3,2
  8310     1424  2C28               	goto	l4433
  8311     1425  01B5               	clrf	?_memcmp^(0+128)
  8312     1426  01B6               	clrf	(?_memcmp+1)^(0+128)
  8313     1427  0008               	return
  8314     1428                     l4433:
  8315     1428  083B               	movf	memcmp@l^(0+128),w
  8316     1429  0086               	movwf	6
  8317     142A  083C               	movf	(memcmp@l+1)^(0+128),w
  8318     142B  0087               	movwf	7
  8319     142C  083D               	movf	memcmp@r^(0+128),w
  8320     142D  0084               	movwf	4
  8321     142E  0185               	clrf	5
  8322     142F  0800               	movf	0,w
  8323     1430  0201               	subwf	1,w
  8324     1431  00B5               	movwf	?_memcmp^(0+128)
  8325     1432  01B6               	clrf	(?_memcmp^(0+128)+1)
  8326     1433  1C03               	skipc
  8327     1434  03B6               	decf	(?_memcmp+1)^(0+128),f
  8328     1435  0008               	return
  8329     1436                     __end_of_memcmp:
  8330                           
  8331                           	psect	text37
  8332     1208                     __ptext37:	
  8333 ;; *************** function ___wmul *****************
  8334 ;; Defined at:
  8335 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  multiplier      2    7[BANK1 ] unsigned int 
  8338 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  product         2   11[BANK1 ] unsigned int 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  2    7[BANK1 ] unsigned int 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0
  8345 ;; Tracked objects:
  8346 ;;		On entry : 1F/1
  8347 ;;		On exit  : 1F/1
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8350 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8354 ;;Total ram usage:        6 bytes
  8355 ;; Hardware stack levels used: 1
  8356 ;; Hardware stack levels required when called: 10
  8357 ;; This function calls:
  8358 ;;		Nothing
  8359 ;; This function is called by:
  8360 ;;		_GenericQueue_Enqueue
  8361 ;;		_GenericQueue_Dequeue
  8362 ;;		_GenericQueue_Remove
  8363 ;;		_GenericQueue_Contains
  8364 ;;		_GenericQueue_CopyToArray
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368     1208                     ___wmul:	
  8369                           ;psect for function ___wmul
  8370                           
  8371                           
  8372                           ;incstack = 0
  8373                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8374     1208  01B3               	clrf	___wmul@product^(0+128)
  8375     1209  01B4               	clrf	(___wmul@product+1)^(0+128)
  8376     120A                     l4439:
  8377     120A  1C2F               	btfss	___wmul@multiplier^(0+128),0
  8378     120B  2A10               	goto	l1243
  8379     120C  0831               	movf	___wmul@multiplicand^(0+128),w
  8380     120D  07B3               	addwf	___wmul@product^(0+128),f
  8381     120E  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  8382     120F  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  8383     1210                     l1243:
  8384     1210  3001               	movlw	1
  8385     1211                     u3675:
  8386     1211  35B1               	lslf	___wmul@multiplicand^(0+128),f
  8387     1212  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  8388     1213  0B89               	decfsz	9,f
  8389     1214  2A11               	goto	u3675
  8390     1215  3001               	movlw	1
  8391     1216                     u3685:
  8392     1216  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  8393     1217  0CAF               	rrf	___wmul@multiplier^(0+128),f
  8394     1218  0B89               	decfsz	9,f
  8395     1219  2A16               	goto	u3685
  8396     121A  082F               	movf	___wmul@multiplier^(0+128),w
  8397     121B  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  8398     121C  1D03               	btfss	3,2
  8399     121D  2A0A               	goto	l4439
  8400     121E  0834               	movf	(___wmul@product+1)^(0+128),w
  8401     121F  00B0               	movwf	(?___wmul+1)^(0+128)
  8402     1220  0833               	movf	___wmul@product^(0+128),w
  8403     1221  00AF               	movwf	?___wmul^(0+128)
  8404     1222  0008               	return
  8405     1223                     __end_of___wmul:
  8406                           
  8407                           	psect	text38
  8408     15AC                     __ptext38:	
  8409 ;; *************** function ___awmod *****************
  8410 ;; Defined at:
  8411 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  8412 ;; Parameters:    Size  Location     Type
  8413 ;;  divisor         2    0[BANK1 ] int 
  8414 ;;  dividend        2    2[BANK1 ] int 
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  sign            1    6[BANK1 ] unsigned char 
  8417 ;;  counter         1    5[BANK1 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;                  2    0[BANK1 ] int 
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0
  8422 ;; Tracked objects:
  8423 ;;		On entry : 1F/1
  8424 ;;		On exit  : 1F/1
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:        7 bytes
  8432 ;; Hardware stack levels used: 1
  8433 ;; Hardware stack levels required when called: 10
  8434 ;; This function calls:
  8435 ;;		Nothing
  8436 ;; This function is called by:
  8437 ;;		_GenericQueue_Enqueue
  8438 ;;		_GenericQueue_Dequeue
  8439 ;;		_GenericQueue_Remove
  8440 ;;		_GenericQueue_Contains
  8441 ;;		_GenericQueue_CopyToArray
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445     15AC                     ___awmod:	
  8446                           ;psect for function ___awmod
  8447                           
  8448                           
  8449                           ;incstack = 0
  8450                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  8451     15AC  01AE               	clrf	___awmod@sign^(0+128)
  8452     15AD  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  8453     15AE  2DB6               	goto	l4459
  8454     15AF  09AA               	comf	___awmod@dividend^(0+128),f
  8455     15B0  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  8456     15B1  0AAA               	incf	___awmod@dividend^(0+128),f
  8457     15B2  1903               	skipnz
  8458     15B3  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  8459     15B4  01AE               	clrf	___awmod@sign^(0+128)
  8460     15B5  0AAE               	incf	___awmod@sign^(0+128),f
  8461     15B6                     l4459:
  8462     15B6  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  8463     15B7  2DBD               	goto	l4463
  8464     15B8  09A8               	comf	___awmod@divisor^(0+128),f
  8465     15B9  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  8466     15BA  0AA8               	incf	___awmod@divisor^(0+128),f
  8467     15BB  1903               	skipnz
  8468     15BC  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  8469     15BD                     l4463:
  8470     15BD  0828               	movf	___awmod@divisor^(0+128),w
  8471     15BE  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  8472     15BF  1903               	btfsc	3,2
  8473     15C0  2DE4               	goto	l4481
  8474     15C1  01AD               	clrf	___awmod@counter^(0+128)
  8475     15C2  0AAD               	incf	___awmod@counter^(0+128),f
  8476     15C3                     l4471:
  8477     15C3  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  8478     15C4  2DCF               	goto	l4473
  8479     15C5  3001               	movlw	1
  8480     15C6                     u3735:
  8481     15C6  35A8               	lslf	___awmod@divisor^(0+128),f
  8482     15C7  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  8483     15C8  0B89               	decfsz	9,f
  8484     15C9  2DC6               	goto	u3735
  8485     15CA  3001               	movlw	1
  8486     15CB  00AC               	movwf	??___awmod^(0+128)
  8487     15CC  082C               	movf	??___awmod^(0+128),w
  8488     15CD  07AD               	addwf	___awmod@counter^(0+128),f
  8489     15CE  2DC3               	goto	l4471
  8490     15CF                     l4473:
  8491     15CF  0829               	movf	(___awmod@divisor+1)^(0+128),w
  8492     15D0  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  8493     15D1  1D03               	skipz
  8494     15D2  2DD5               	goto	u3755
  8495     15D3  0828               	movf	___awmod@divisor^(0+128),w
  8496     15D4  022A               	subwf	___awmod@dividend^(0+128),w
  8497     15D5                     u3755:
  8498     15D5  1C03               	skipc
  8499     15D6  2DDB               	goto	l4477
  8500     15D7  0828               	movf	___awmod@divisor^(0+128),w
  8501     15D8  02AA               	subwf	___awmod@dividend^(0+128),f
  8502     15D9  0829               	movf	(___awmod@divisor+1)^(0+128),w
  8503     15DA  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  8504     15DB                     l4477:
  8505     15DB  3001               	movlw	1
  8506     15DC                     u3765:
  8507     15DC  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  8508     15DD  0CA8               	rrf	___awmod@divisor^(0+128),f
  8509     15DE  0B89               	decfsz	9,f
  8510     15DF  2DDC               	goto	u3765
  8511     15E0  3001               	movlw	1
  8512     15E1  02AD               	subwf	___awmod@counter^(0+128),f
  8513     15E2  1D03               	btfss	3,2
  8514     15E3  2DCF               	goto	l4473
  8515     15E4                     l4481:
  8516     15E4  082E               	movf	___awmod@sign^(0+128),w
  8517     15E5  1903               	btfsc	3,2
  8518     15E6  2DEC               	goto	l4485
  8519     15E7  09AA               	comf	___awmod@dividend^(0+128),f
  8520     15E8  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  8521     15E9  0AAA               	incf	___awmod@dividend^(0+128),f
  8522     15EA  1903               	skipnz
  8523     15EB  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  8524     15EC                     l4485:
  8525     15EC  082B               	movf	(___awmod@dividend+1)^(0+128),w
  8526     15ED  00A9               	movwf	(?___awmod+1)^(0+128)
  8527     15EE  082A               	movf	___awmod@dividend^(0+128),w
  8528     15EF  00A8               	movwf	?___awmod^(0+128)
  8529     15F0  0008               	return
  8530     15F1                     __end_of___awmod:
  8531                           
  8532                           	psect	text39
  8533     110E                     __ptext39:	
  8534 ;; *************** function _GenericQueue_IsEmpty *****************
  8535 ;; Defined at:
  8536 ;;		line 11 in file "generic_queue.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;  q               2    0[BANK1 ] PTR struct .
  8539 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;		None
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  2    0[BANK1 ] int 
  8544 ;; Registers used:
  8545 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8546 ;; Tracked objects:
  8547 ;;		On entry : 1F/1
  8548 ;;		On exit  : 1F/1
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8551 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;Total ram usage:        4 bytes
  8556 ;; Hardware stack levels used: 1
  8557 ;; Hardware stack levels required when called: 10
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_PS2Keyboard_GetScanCode
  8562 ;;		_GenericQueue_Dequeue
  8563 ;;		_GenericQueue_Remove
  8564 ;;		_GenericQueue_Contains
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568     110E                     _GenericQueue_IsEmpty:	
  8569                           ;psect for function _GenericQueue_IsEmpty
  8570                           
  8571                           
  8572                           ;generic_queue.c: 12:     return (q->size == 0);
  8573                           
  8574                           ;incstack = 0
  8575                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  8576     110E  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  8577     110F  3E5E               	addlw	94
  8578     1110  0086               	movwf	6
  8579     1111  3000               	movlw	0
  8580     1112  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  8581     1113  0087               	movwf	7
  8582     1114  0801               	movf	1,w
  8583     1115  1D03               	btfss	3,2
  8584     1116  2919               	goto	u3590
  8585     1117  3001               	movlw	1
  8586     1118  291A               	goto	u3600
  8587     1119                     u3590:
  8588     1119  3000               	movlw	0
  8589     111A                     u3600:
  8590     111A  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  8591     111B  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  8592     111C  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  8593     111D  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  8594     111E  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  8595     111F  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  8596     1120  0008               	return
  8597     1121                     __end_of_GenericQueue_IsEmpty:
  8598                           
  8599                           	psect	text40
  8600     1FE9                     __ptext40:	
  8601 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  8602 ;; Defined at:
  8603 ;;		line 517 in file "app_device_keyboard.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 1C/1
  8614 ;;		On exit  : 1F/2
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        0 bytes
  8622 ;; Hardware stack levels used: 1
  8623 ;; Hardware stack levels required when called: 11
  8624 ;; This function calls:
  8625 ;;		_PS2Keyboard_SendCommand
  8626 ;; This function is called by:
  8627 ;;		_APP_KeyboardTasks
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631     1FE9                     _APP_KeyboardProcessOutputReport:	
  8632                           ;psect for function _APP_KeyboardProcessOutputReport
  8633                           
  8634                           
  8635                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  8639     1FE9  3090               	movlw	144
  8640     1FEA  0086               	movwf	6
  8641     1FEB  3023               	movlw	35
  8642     1FEC  0087               	movwf	7
  8643     1FED  0022               	movlb	2	; select bank2
  8644     1FEE  0820               	movf	32,w	;volatile
  8645     1FEF  0081               	movwf	1
  8646                           
  8647                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
  8648     1FF0  30ED               	movlw	237
  8649     1FF1  3192  223E         	fcall	_PS2Keyboard_SendCommand
  8650     1FF3  0008               	return
  8651     1FF4                     __end_of_APP_KeyboardProcessOutputReport:
  8652                           
  8653                           	psect	text41
  8654     123E                     __ptext41:	
  8655 ;; *************** function _PS2Keyboard_SendCommand *****************
  8656 ;; Defined at:
  8657 ;;		line 60 in file "ps2_keyboard.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;  cmd             1    wreg     unsigned char 
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  cmd             1    0[BANK1 ] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;                  1    wreg      void 
  8664 ;; Registers used:
  8665 ;;		wreg, status,2
  8666 ;; Tracked objects:
  8667 ;;		On entry : 1C/1
  8668 ;;		On exit  : 1F/2
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;Total ram usage:        1 bytes
  8676 ;; Hardware stack levels used: 1
  8677 ;; Hardware stack levels required when called: 10
  8678 ;; This function calls:
  8679 ;;		Nothing
  8680 ;; This function is called by:
  8681 ;;		_APP_KeyboardUpdateState
  8682 ;;		_APP_KeyboardProcessOutputReport
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686     123E                     _PS2Keyboard_SendCommand:	
  8687                           ;psect for function _PS2Keyboard_SendCommand
  8688                           
  8689                           
  8690                           ;incstack = 0
  8691                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  8692                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  8693     123E  0021               	movlb	1	; select bank1
  8694     123F  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  8695                           
  8696                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  8697     1240  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  8698     1241  0022               	movlb	2	; select bank2
  8699     1242  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
  8700                           
  8701                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  8702     1243  138B               	bcf	11,7	;volatile
  8703     1244  0021               	movlb	1	; select bank1
  8704     1245  120C               	bcf	12,4	;volatile
  8705     1246  0022               	movlb	2	; select bank2
  8706     1247  120C               	bcf	12,4	;volatile
  8707                           
  8708                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  8709     1248  30F0               	movlw	240
  8710     1249                     u6107:
  8711     1249  3200               	nop2
  8712     124A  0B89               	decfsz	9,f
  8713     124B  2A49               	goto	u6107
  8714     124C  0021               	movlb	1	; select bank1
  8715     124D  160C               	bsf	12,4	;volatile
  8716                           
  8717                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  8718     124E  0020               	movlb	0	; select bank0
  8719     124F  01E9               	clrf	_keyboardCommandCount	;volatile
  8720                           
  8721                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  8722     1250  300C               	movlw	12
  8723     1251  0022               	movlb	2	; select bank2
  8724     1252  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
  8725                           
  8726                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  8727     1253  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  8728     1254  0021               	movlb	1	; select bank1
  8729     1255  128C               	bcf	12,5	;volatile
  8730     1256  0022               	movlb	2	; select bank2
  8731     1257  128C               	bcf	12,5	;volatile
  8732                           
  8733                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  8734     1258  178B               	bsf	11,7	;volatile
  8735     1259  0008               	return
  8736     125A                     __end_of_PS2Keyboard_SendCommand:
  8737                           
  8738                           	psect	intentry
  8739     0004                     __pintentry:	
  8740 ;; *************** function _INTERRUPT_InterruptManager *****************
  8741 ;; Defined at:
  8742 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used: 1
  8762 ;; Hardware stack levels required when called: 9
  8763 ;; This function calls:
  8764 ;;		NULL
  8765 ;;		_EUSART_Receive_ISR
  8766 ;;		_EUSART_Transmit_ISR
  8767 ;;		_PIN_MANAGER_IOC
  8768 ;;		_TMR2_ISR
  8769 ;;		_USBDeviceTasks
  8770 ;; This function is called by:
  8771 ;;		Interrupt level 1
  8772 ;; This function uses a non-reentrant model
  8773 ;;
  8774                           
  8775     0004                     _INTERRUPT_InterruptManager:
  8776                           
  8777                           ;incstack = 0
  8778     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8779                           
  8780                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8781     0005  3180               	pagesel	$
  8782                           
  8783                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  8784     0006  198B               	btfsc	11,3	;volatile
  8785     0007  1C0B               	btfss	11,0	;volatile
  8786     0008  280D               	goto	i1l141
  8787                           
  8788                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  8789     0009  319F  27DE  3180   	fcall	_PIN_MANAGER_IOC
  8790                           
  8791                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  8792     000C  283B               	goto	i1l153
  8793     000D                     i1l141:	
  8794                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  8795                           
  8796     000D  1F0B               	btfss	11,6	;volatile
  8797     000E  283B               	goto	i1l153
  8798                           
  8799                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  8800     000F  0021               	movlb	1	; select bank1
  8801     0010  1D12               	btfss	18,2	;volatile
  8802     0011  2819               	goto	i1l144
  8803     0012  0020               	movlb	0	; select bank0
  8804     0013  1D12               	btfss	18,2	;volatile
  8805     0014  2819               	goto	i1l144
  8806                           
  8807                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  8808     0015  3186  26DA  3180   	fcall	_USBDeviceTasks
  8809                           
  8810                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  8811     0018  283B               	goto	i1l153
  8812     0019                     i1l144:	
  8813                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  8814                           
  8815     0019  0021               	movlb	1	; select bank1
  8816     001A  1E11               	btfss	17,4	;volatile
  8817     001B  2826               	goto	i1l146
  8818     001C  0020               	movlb	0	; select bank0
  8819     001D  1E11               	btfss	17,4	;volatile
  8820     001E  2826               	goto	i1l146
  8821                           
  8822                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  8823     001F  0022               	movlb	2	; select bank2
  8824     0020  0849               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  8825     0021  008A               	movwf	10
  8826     0022  0848               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  8827     0023  000A               	callw
  8828     0024  3180               	pagesel	$
  8829                           
  8830                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  8831     0025  283B               	goto	i1l153
  8832     0026                     i1l146:	
  8833                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  8834                           
  8835     0026  0021               	movlb	1	; select bank1
  8836     0027  1E91               	btfss	17,5	;volatile
  8837     0028  2833               	goto	i1l148
  8838     0029  0020               	movlb	0	; select bank0
  8839     002A  1E91               	btfss	17,5	;volatile
  8840     002B  2833               	goto	i1l148
  8841                           
  8842                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  8843     002C  0022               	movlb	2	; select bank2
  8844     002D  0847               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  8845     002E  008A               	movwf	10
  8846     002F  0846               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  8847     0030  000A               	callw
  8848     0031  3180               	pagesel	$
  8849                           
  8850                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  8851     0032  283B               	goto	i1l153
  8852     0033                     i1l148:	
  8853                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  8854                           
  8855     0033  0021               	movlb	1	; select bank1
  8856     0034  1C91               	btfss	17,1	;volatile
  8857     0035  283B               	goto	i1l153
  8858     0036  0020               	movlb	0	; select bank0
  8859     0037  1C91               	btfss	17,1	;volatile
  8860     0038  283B               	goto	i1l153
  8861                           
  8862                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  8863     0039  319F  27F4         	fcall	_TMR2_ISR
  8864     003B                     i1l153:	
  8865                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  8866                           
  8867     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8868     003C  0009               	retfie
  8869     003D                     __end_of_INTERRUPT_InterruptManager:
  8870                           
  8871                           	psect	text43
  8872     06DA                     __ptext43:	
  8873 ;; *************** function _USBDeviceTasks *****************
  8874 ;; Defined at:
  8875 ;;		line 481 in file "usb/usb_device.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  i               1   16[BANK0 ] unsigned char 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  1    wreg      void 
  8882 ;; Registers used:
  8883 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8884 ;; Tracked objects:
  8885 ;;		On entry : 1F/0
  8886 ;;		On exit  : 1F/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        2 bytes
  8894 ;; Hardware stack levels used: 1
  8895 ;; Hardware stack levels required when called: 8
  8896 ;; This function calls:
  8897 ;;		_USBCtrlEPAllowStatusStage
  8898 ;;		_USBCtrlEPService
  8899 ;;		_USBIncrement1msInternalTimers
  8900 ;;		_USBStallHandler
  8901 ;;		_USBSuspend
  8902 ;;		_USBWakeFromSuspend
  8903 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  8904 ;;		i1_USBDeviceInit
  8905 ;; This function is called by:
  8906 ;;		_INTERRUPT_InterruptManager
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910     06DA                     _USBDeviceTasks:	
  8911                           ;psect for function _USBDeviceTasks
  8912                           
  8913                           
  8914                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  8915                           
  8916                           ;incstack = 0
  8917                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8918     06DA  036C               	decf	_USBDeviceState,w
  8919     06DB  1D03               	btfss	3,2
  8920     06DC  2EE6               	goto	i1l5315
  8921                           
  8922                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  8923     06DD  003D               	movlb	29	; select bank29
  8924     06DE  1A8E               	btfsc	14,5	;volatile
  8925     06DF  2EE6               	goto	i1l5315
  8926                           
  8927                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  8928     06E0  0190               	clrf	16	;volatile
  8929                           
  8930                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  8931     06E1  1412               	bsf	18,0	;volatile
  8932                           
  8933                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  8934     06E2  1612               	bsf	18,4	;volatile
  8935                           
  8936                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  8937     06E3  3002               	movlw	2
  8938     06E4  0020               	movlb	0	; select bank0
  8939     06E5  00EC               	movwf	_USBDeviceState	;volatile
  8940     06E6                     i1l5315:
  8941                           
  8942                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  8943     06E6  003D               	movlb	29	; select bank29
  8944     06E7  1910               	btfsc	16,2	;volatile
  8945     06E8  1D12               	btfss	18,2	;volatile
  8946     06E9  2EF3               	goto	i1l5323
  8947                           
  8948                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  8949     06EA  30FB               	movlw	251
  8950     06EB  0020               	movlb	0	; select bank0
  8951     06EC  00DF               	movwf	??_USBDeviceTasks
  8952     06ED  085F               	movf	??_USBDeviceTasks,w
  8953     06EE  003D               	movlb	29	; select bank29
  8954     06EF  0590               	andwf	16,f	;volatile
  8955                           
  8956                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  8957     06F0  3192  2293  3186   	fcall	_USBWakeFromSuspend
  8958     06F3                     i1l5323:
  8959                           
  8960                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  8961     06F3  003D               	movlb	29	; select bank29
  8962     06F4  1C8E               	btfss	14,1	;volatile
  8963     06F5  2EF9               	goto	i1l492
  8964                           
  8965                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  8966     06F6  0020               	movlb	0	; select bank0
  8967     06F7  1112               	bcf	18,2	;volatile
  8968                           
  8969                           ;usb/usb_device.c: 654:         return;
  8970     06F8  0008               	return
  8971     06F9                     i1l492:	
  8972                           ;usb/usb_device.c: 655:     }
  8973                           
  8974                           
  8975                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  8976     06F9  1810               	btfsc	16,0	;volatile
  8977     06FA  1C12               	btfss	18,0	;volatile
  8978     06FB  2F09               	goto	i1l5337
  8979                           
  8980                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  8981     06FC  318D  25FE  3186   	fcall	i1_USBDeviceInit
  8982                           
  8983                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  8984     06FF  0021               	movlb	1	; select bank1
  8985     0700  1512               	bsf	18,2	;volatile
  8986                           
  8987                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  8988     0701  3004               	movlw	4
  8989     0702  0020               	movlb	0	; select bank0
  8990     0703  00EC               	movwf	_USBDeviceState	;volatile
  8991                           
  8992                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  8993     0704  30FE               	movlw	254
  8994     0705  00DF               	movwf	??_USBDeviceTasks
  8995     0706  085F               	movf	??_USBDeviceTasks,w
  8996     0707  003D               	movlb	29	; select bank29
  8997     0708  0590               	andwf	16,f	;volatile
  8998     0709                     i1l5337:
  8999                           
  9000                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9001     0709  1A10               	btfsc	16,4	;volatile
  9002     070A  1E12               	btfss	18,4	;volatile
  9003     070B  2F0F               	goto	i1l5343
  9004                           
  9005                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9006     070C  3191  21A2  3186   	fcall	_USBSuspend
  9007     070F                     i1l5343:
  9008                           
  9009                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9010     070F  003D               	movlb	29	; select bank29
  9011     0710  1F10               	btfss	16,6	;volatile
  9012     0711  2F37               	goto	i1l5359
  9013                           
  9014                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9015     0712  1F12               	btfss	18,6	;volatile
  9016     0713  2F23               	goto	i1l5349
  9017                           
  9018                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9019     0714  3073               	movlw	115
  9020     0715  0020               	movlb	0	; select bank0
  9021     0716  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9022     0717  3000               	movlw	0
  9023     0718  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9024     0719  3000               	movlw	0
  9025     071A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9026     071B  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9027     071C  3001               	movlw	1
  9028     071D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9029     071E  3000               	movlw	0
  9030     071F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9031     0720  3194  24AA  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9032     0723                     i1l5349:
  9033                           
  9034                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9035     0723  30BF               	movlw	191
  9036     0724  0020               	movlb	0	; select bank0
  9037     0725  00DF               	movwf	??_USBDeviceTasks
  9038     0726  085F               	movf	??_USBDeviceTasks,w
  9039     0727  003D               	movlb	29	; select bank29
  9040     0728  0590               	andwf	16,f	;volatile
  9041                           
  9042                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9043     0729  3188  2000  3186   	fcall	_USBIncrement1msInternalTimers
  9044                           
  9045                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9046     072C  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9047     072D  1903               	btfsc	3,2
  9048     072E  2F31               	goto	i1l498
  9049                           
  9050                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9051     072F  3001               	movlw	1
  9052     0730  02DA               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9053     0731                     i1l498:	
  9054                           ;usb/usb_device.c: 742:             }
  9055                           
  9056                           
  9057                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9058     0731  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9059     0732  1D03               	btfss	3,2
  9060     0733  2F37               	goto	i1l5359
  9061                           
  9062                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9063     0734  318A  228C  3186   	fcall	_USBCtrlEPAllowStatusStage
  9064     0737                     i1l5359:
  9065                           
  9066                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9067     0737  003D               	movlb	29	; select bank29
  9068     0738  1A90               	btfsc	16,5	;volatile
  9069     0739  1E92               	btfss	18,5	;volatile
  9070     073A  2F3E               	goto	i1l5365
  9071                           
  9072                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9073     073B  3193  232F  3186   	fcall	_USBStallHandler
  9074     073E                     i1l5365:
  9075                           
  9076                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9077     073E  1890               	btfsc	16,1	;volatile
  9078     073F  1C92               	btfss	18,1	;volatile
  9079     0740  2F52               	goto	i1l5373
  9080                           
  9081                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9082     0741  30FF               	movlw	255
  9083     0742  0020               	movlb	0	; select bank0
  9084     0743  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9085     0744  307F               	movlw	127
  9086     0745  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9087     0746  3000               	movlw	0
  9088     0747  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9089     0748  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9090     0749  3001               	movlw	1
  9091     074A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9092     074B  3000               	movlw	0
  9093     074C  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9094     074D  3194  24AA  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9095                           
  9096                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9097     0750  003D               	movlb	29	; select bank29
  9098     0751  0193               	clrf	19	;volatile
  9099     0752                     i1l5373:
  9100                           
  9101                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9102     0752  3004               	movlw	4
  9103     0753  0020               	movlb	0	; select bank0
  9104     0754  026C               	subwf	_USBDeviceState,w
  9105     0755  1803               	skipnc
  9106     0756  2F59               	goto	i1l502
  9107                           
  9108                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9109     0757  1112               	bcf	18,2	;volatile
  9110                           
  9111                           ;usb/usb_device.c: 781:         return;
  9112     0758  0008               	return
  9113     0759                     i1l502:	
  9114                           ;usb/usb_device.c: 782:     }
  9115                           
  9116                           
  9117                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9118     0759  003D               	movlb	29	; select bank29
  9119     075A  1D92               	btfss	18,3	;volatile
  9120     075B  2FAA               	goto	i1l503
  9121                           
  9122                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9123     075C  0020               	movlb	0	; select bank0
  9124     075D  01E0               	clrf	USBDeviceTasks@i
  9125     075E  2FA7               	goto	i1l504
  9126     075F                     i1l5383:
  9127                           
  9128                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9129     075F  080F               	movf	15,w	;volatile
  9130     0760  0020               	movlb	0	; select bank0
  9131     0761  00ED               	movwf	_USTATcopy	;volatile
  9132                           
  9133                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9134     0762  0C6D               	rrf	_USTATcopy,w	;volatile
  9135     0763  00DF               	movwf	??_USBDeviceTasks
  9136     0764  0CDF               	rrf	??_USBDeviceTasks,f
  9137     0765  0C5F               	rrf	??_USBDeviceTasks,w
  9138     0766  390F               	andlw	15
  9139     0767  0021               	movlb	1	; select bank1
  9140     0768  00ED               	movwf	_endpoint_number^(0+128)	;volatile
  9141                           
  9142                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9143     0769  30F7               	movlw	247
  9144     076A  0020               	movlb	0	; select bank0
  9145     076B  00DF               	movwf	??_USBDeviceTasks
  9146     076C  085F               	movf	??_USBDeviceTasks,w
  9147     076D  003D               	movlb	29	; select bank29
  9148     076E  0590               	andwf	16,f	;volatile
  9149                           
  9150                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9151     076F  0020               	movlb	0	; select bank0
  9152     0770  196D               	btfsc	_USTATcopy,2	;volatile
  9153     0771  2F76               	goto	i1l5393
  9154                           
  9155                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9156     0772  0021               	movlb	1	; select bank1
  9157     0773  086D               	movf	_endpoint_number^(0+128),w	;volatile
  9158     0774  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9159     0775  2F79               	goto	L5
  9160     0776                     i1l5393:	
  9161                           ;usb/usb_device.c: 805:                 }
  9162                           
  9163                           
  9164                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9165     0776  0021               	movlb	1	; select bank1
  9166     0777  086D               	movf	_endpoint_number^(0+128),w	;volatile
  9167     0778  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9168     0779                     L5:
  9169     0779  0086               	movwf	6
  9170     077A  3001               	movlw	1	; select bank2/3
  9171     077B  0087               	movwf	7
  9172     077C  0801               	movf	1,w
  9173     077D  3901               	andlw	1
  9174     077E  0020               	movlb	0	; select bank0
  9175     077F  00DF               	movwf	??_USBDeviceTasks
  9176     0780  3001               	movlw	1
  9177     0781  06DF               	xorwf	??_USBDeviceTasks,f
  9178     0782  0801               	movf	1,w
  9179     0783  065F               	xorwf	??_USBDeviceTasks,w
  9180     0784  39FE               	andlw	-2
  9181     0785  065F               	xorwf	??_USBDeviceTasks,w
  9182     0786  0081               	movwf	1
  9183                           
  9184                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9185     0787  0021               	movlb	1	; select bank1
  9186     0788  086D               	movf	_endpoint_number^(0+128),w	;volatile
  9187     0789  1D03               	btfss	3,2
  9188     078A  2F8F               	goto	i1l5399
  9189                           
  9190                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9191     078B  3195  25F1  3186   	fcall	_USBCtrlEPService
  9192                           
  9193                           ;usb/usb_device.c: 817:                 }
  9194     078E  2F9E               	goto	i1l5401
  9195     078F                     i1l5399:
  9196                           
  9197                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9198     078F  3072               	movlw	114
  9199     0790  0020               	movlb	0	; select bank0
  9200     0791  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9201     0792  3000               	movlw	0
  9202     0793  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9203     0794  306D               	movlw	low _USTATcopy
  9204     0795  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9205     0796  3000               	movlw	high _USTATcopy
  9206     0797  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9207     0798  3000               	movlw	0
  9208     0799  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9209     079A  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9210     079B  3194  24AA  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9211     079E                     i1l5401:
  9212                           
  9213                           ;usb/usb_device.c: 827:         }
  9214     079E  3001               	movlw	1
  9215     079F  0020               	movlb	0	; select bank0
  9216     07A0  00DF               	movwf	??_USBDeviceTasks
  9217     07A1  085F               	movf	??_USBDeviceTasks,w
  9218     07A2  07E0               	addwf	USBDeviceTasks@i,f
  9219     07A3  3004               	movlw	4
  9220     07A4  0260               	subwf	USBDeviceTasks@i,w
  9221     07A5  1803               	btfsc	3,0
  9222     07A6  2FAA               	goto	i1l503
  9223     07A7                     i1l504:
  9224                           
  9225                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9226     07A7  003D               	movlb	29	; select bank29
  9227     07A8  1990               	btfsc	16,3	;volatile
  9228     07A9  2F5F               	goto	i1l5383
  9229     07AA                     i1l503:	
  9230                           ;usb/usb_device.c: 828:     }
  9231                           
  9232                           
  9233                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9234     07AA  0020               	movlb	0	; select bank0
  9235     07AB  1112               	bcf	18,2	;volatile
  9236     07AC  0008               	return
  9237     07AD                     __end_of_USBDeviceTasks:
  9238                           
  9239                           	psect	text44
  9240     0DFE                     __ptext44:	
  9241 ;; *************** function i1_USBDeviceInit *****************
  9242 ;; Defined at:
  9243 ;;		line 281 in file "usb/usb_device.c"
  9244 ;; Parameters:    Size  Location     Type
  9245 ;;		None
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;  p               2    4[COMMON] PTR unsigned char 
  9248 ;;		 -> UEP1(1), 
  9249 ;;  i               1    7[COMMON] unsigned char 
  9250 ;;  i               1    6[COMMON] unsigned char 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  1    wreg      void 
  9253 ;; Registers used:
  9254 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9255 ;; Tracked objects:
  9256 ;;		On entry : 1F/1D
  9257 ;;		On exit  : 1F/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        8 bytes
  9265 ;; Hardware stack levels used: 1
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_USBDeviceTasks
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273     0DFE                     i1_USBDeviceInit:	
  9274                           ;psect for function i1_USBDeviceInit
  9275                           
  9276                           
  9277                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9278                           
  9279                           ;incstack = 0
  9280                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9281     0DFE  0021               	movlb	1	; select bank1
  9282     0DFF  1112               	bcf	18,2	;volatile
  9283                           
  9284                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9285     0E00  003D               	movlb	29	; select bank29
  9286     0E01  0193               	clrf	19	;volatile
  9287                           
  9288                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9289     0E02  0190               	clrf	16	;volatile
  9290                           
  9291                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9292     0E03  0198               	clrf	24	;volatile
  9293                           
  9294                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  9295     0E04  300E               	movlw	14
  9296     0E05  00F5               	movwf	i1USBDeviceInit@p+1
  9297     0E06  3099               	movlw	153
  9298     0E07  00F4               	movwf	i1USBDeviceInit@p
  9299     0E08  01F6               	clrf	i1USBDeviceInit@i_1369
  9300     0E09                     i1l5213:
  9301     0E09  0874               	movf	i1USBDeviceInit@p,w
  9302     0E0A  0086               	movwf	6
  9303     0E0B  0875               	movf	i1USBDeviceInit@p+1,w
  9304     0E0C  0087               	movwf	7
  9305     0E0D  0181               	clrf	1
  9306     0E0E  3001               	movlw	1
  9307     0E0F  07F4               	addwf	i1USBDeviceInit@p,f
  9308     0E10  3000               	movlw	0
  9309     0E11  3DF5               	addwfc	i1USBDeviceInit@p+1,f
  9310     0E12  3001               	movlw	1
  9311     0E13  00F0               	movwf	??i1_USBDeviceInit
  9312     0E14  0870               	movf	??i1_USBDeviceInit,w
  9313     0E15  07F6               	addwf	i1USBDeviceInit@i_1369,f
  9314     0E16  0876               	movf	i1USBDeviceInit@i_1369,w
  9315     0E17  1903               	btfsc	3,2
  9316     0E18  2E09               	goto	i1l5213
  9317                           
  9318                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  9319     0E19  3016               	movlw	22
  9320     0E1A  0091               	movwf	17	;volatile
  9321     0E1B  309F               	movlw	159
  9322     0E1C  0097               	movwf	23	;volatile
  9323     0E1D  307B               	movlw	123
  9324     0E1E  0092               	movwf	18	;volatile
  9325                           
  9326                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  9327     0E1F  01F7               	clrf	i1USBDeviceInit@i
  9328     0E20                     i1l5229:
  9329                           
  9330                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  9331     0E20  0877               	movf	i1USBDeviceInit@i,w
  9332     0E21  00F0               	movwf	??i1_USBDeviceInit
  9333     0E22  3001               	movlw	1
  9334     0E23                     u471_25:
  9335     0E23  35F0               	lslf	??i1_USBDeviceInit,f
  9336     0E24  3EFF               	addlw	-1
  9337     0E25  1D03               	skipz
  9338     0E26  2E23               	goto	u471_25
  9339     0E27  3570               	lslf	??i1_USBDeviceInit,w
  9340     0E28  3E20               	addlw	32
  9341     0E29  0086               	movwf	6
  9342     0E2A  0187               	clrf	7
  9343     0E2B  3000               	movlw	0
  9344     0E2C  3FC0               	movwi [0]fsr1
  9345     0E2D  3000               	movlw	0
  9346     0E2E  3FC1               	movwi [1]fsr1
  9347     0E2F  3FC2               	movwi [2]fsr1
  9348     0E30  3FC3               	movwi [3]fsr1
  9349                           
  9350                           ;usb/usb_device.c: 314:     }
  9351     0E31  3001               	movlw	1
  9352     0E32  00F0               	movwf	??i1_USBDeviceInit
  9353     0E33  0870               	movf	??i1_USBDeviceInit,w
  9354     0E34  07F7               	addwf	i1USBDeviceInit@i,f
  9355     0E35  3008               	movlw	8
  9356     0E36  0277               	subwf	i1USBDeviceInit@i,w
  9357     0E37  1C03               	skipc
  9358     0E38  2E20               	goto	i1l5229
  9359                           
  9360                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  9361     0E39  170E               	bsf	14,6	;volatile
  9362                           
  9363                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  9364     0E3A  0196               	clrf	22	;volatile
  9365                           
  9366                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  9367     0E3B  120E               	bcf	14,4	;volatile
  9368                           
  9369                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  9370     0E3C  130E               	bcf	14,6	;volatile
  9371     0E3D                     i1l5241:
  9372                           
  9373                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  9374     0E3D  30F7               	movlw	247
  9375     0E3E  00F0               	movwf	??i1_USBDeviceInit
  9376     0E3F  0870               	movf	??i1_USBDeviceInit,w
  9377     0E40  0590               	andwf	16,f	;volatile
  9378                           
  9379                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  9380     0E41  0021               	movlb	1	; select bank1
  9381     0E42  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
  9382                           
  9383                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  9384     0E43  0022               	movlb	2	; select bank2
  9385     0E44  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  9386                           
  9387                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  9388     0E45  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  9389     0E46  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  9390                           
  9391                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  9392     0E47  003D               	movlb	29	; select bank29
  9393     0E48  1990               	btfsc	16,3	;volatile
  9394     0E49  2E3D               	goto	i1l5241
  9395                           
  9396                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  9397     0E4A  3001               	movlw	1
  9398     0E4B  0022               	movlb	2	; select bank2
  9399     0E4C  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  9400                           
  9401                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  9402     0E4D  3001               	movlw	1
  9403     0E4E  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  9404                           
  9405                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  9406     0E4F  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  9407                           
  9408                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  9409     0E50  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  9410                           
  9411                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  9412     0E51  01DC               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  9413                           
  9414                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  9415     0E52  01F7               	clrf	i1USBDeviceInit@i
  9416     0E53                     i1l5263:
  9417                           
  9418                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  9419     0E53  3577               	lslf	i1USBDeviceInit@i,w
  9420     0E54  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  9421     0E55  0086               	movwf	6
  9422     0E56  0187               	clrf	7
  9423     0E57  3000               	movlw	0
  9424     0E58  3FC0               	movwi [0]fsr1
  9425     0E59  3FC1               	movwi [1]fsr1
  9426                           
  9427                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  9428     0E5A  3577               	lslf	i1USBDeviceInit@i,w
  9429     0E5B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  9430     0E5C  0086               	movwf	6
  9431     0E5D  3001               	movlw	1	; select bank2/3
  9432     0E5E  0087               	movwf	7
  9433     0E5F  3000               	movlw	0
  9434     0E60  3FC0               	movwi [0]fsr1
  9435     0E61  3FC1               	movwi [1]fsr1
  9436                           
  9437                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  9438     0E62  0877               	movf	i1USBDeviceInit@i,w
  9439     0E63  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9440     0E64  0086               	movwf	6
  9441     0E65  3001               	movlw	1	; select bank2/3
  9442     0E66  0087               	movwf	7
  9443     0E67  0181               	clrf	1
  9444                           
  9445                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  9446     0E68  0877               	movf	i1USBDeviceInit@i,w
  9447     0E69  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9448     0E6A  0086               	movwf	6
  9449     0E6B  3001               	movlw	1	; select bank2/3
  9450     0E6C  0087               	movwf	7
  9451     0E6D  0181               	clrf	1
  9452                           
  9453                           ;usb/usb_device.c: 355:     }
  9454     0E6E  3001               	movlw	1
  9455     0E6F  00F0               	movwf	??i1_USBDeviceInit
  9456     0E70  0870               	movf	??i1_USBDeviceInit,w
  9457     0E71  07F7               	addwf	i1USBDeviceInit@i,f
  9458     0E72  3002               	movlw	2
  9459     0E73  0277               	subwf	i1USBDeviceInit@i,w
  9460     0E74  1C03               	skipc
  9461     0E75  2E53               	goto	i1l5263
  9462                           
  9463                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  9464     0E76  3028               	movlw	40
  9465     0E77  0020               	movlb	0	; select bank0
  9466     0E78  00E1               	movwf	_pBDTEntryIn
  9467     0E79  3000               	movlw	0
  9468     0E7A  00E2               	movwf	_pBDTEntryIn+1
  9469                           
  9470                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  9471     0E7B  3016               	movlw	22
  9472     0E7C  003D               	movlb	29	; select bank29
  9473     0E7D  0098               	movwf	24	;volatile
  9474                           
  9475                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  9476     0E7E  3040               	movlw	64
  9477     0E7F  00F0               	movwf	??i1_USBDeviceInit
  9478     0E80  3000               	movlw	0
  9479     0E81  00F1               	movwf	??i1_USBDeviceInit+1
  9480     0E82  30FF               	movlw	255
  9481     0E83  0570               	andwf	??i1_USBDeviceInit,w
  9482     0E84  00F2               	movwf	??i1_USBDeviceInit+2
  9483     0E85  307F               	movlw	127
  9484     0E86  0571               	andwf	??i1_USBDeviceInit+1,w
  9485     0E87  00F3               	movwf	??i1_USBDeviceInit+3
  9486     0E88  0872               	movf	??i1_USBDeviceInit+2,w
  9487     0E89  0020               	movlb	0	; select bank0
  9488     0E8A  00A2               	movwf	34	;volatile
  9489     0E8B  0873               	movf	??i1_USBDeviceInit+3,w
  9490     0E8C  00A3               	movwf	35	;volatile
  9491                           
  9492                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  9493     0E8D  3008               	movlw	8
  9494     0E8E  00A1               	movwf	33	;volatile
  9495                           
  9496                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  9497     0E8F  3004               	movlw	4
  9498     0E90  00A0               	movwf	32	;volatile
  9499                           
  9500                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  9501     0E91  17A0               	bsf	32,7	;volatile
  9502                           
  9503                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  9504     0E92  01EF               	clrf	_USBActiveConfiguration	;volatile
  9505                           
  9506                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  9507     0E93  3000               	movlw	0
  9508     0E94  0023               	movlb	3	; select bank3
  9509     0E95  00CD               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  9510     0E96  3000               	movlw	0
  9511     0E97  00CC               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  9512     0E98  3000               	movlw	0
  9513     0E99  00CB               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  9514     0E9A  3000               	movlw	0
  9515     0E9B  00CA               	movwf	_USB1msTickCount^(0+384)	;volatile
  9516                           
  9517                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  9518     0E9C  0022               	movlb	2	; select bank2
  9519     0E9D  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  9520                           
  9521                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  9522     0E9E  0020               	movlb	0	; select bank0
  9523     0E9F  01EC               	clrf	_USBDeviceState	;volatile
  9524     0EA0  0008               	return
  9525     0EA1                     __end_ofi1_USBDeviceInit:
  9526                           
  9527                           	psect	text45
  9528     1293                     __ptext45:	
  9529 ;; *************** function _USBWakeFromSuspend *****************
  9530 ;; Defined at:
  9531 ;;		line 2310 in file "usb/usb_device.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;		None
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;		None
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      void 
  9538 ;; Registers used:
  9539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 1F/1D
  9542 ;;		On exit  : 1F/2
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;Total ram usage:        1 bytes
  9550 ;; Hardware stack levels used: 1
  9551 ;; Hardware stack levels required when called: 4
  9552 ;; This function calls:
  9553 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9554 ;; This function is called by:
  9555 ;;		_USBDeviceTasks
  9556 ;; This function uses a non-reentrant model
  9557 ;;
  9558                           
  9559     1293                     _USBWakeFromSuspend:	
  9560                           ;psect for function _USBWakeFromSuspend
  9561                           
  9562                           
  9563                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9567     1293  0022               	movlb	2	; select bank2
  9568     1294  01DC               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  9569                           
  9570                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
  9571     1295  3074               	movlw	116
  9572     1296  0020               	movlb	0	; select bank0
  9573     1297  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9574     1298  3000               	movlw	0
  9575     1299  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9576     129A  3000               	movlw	0
  9577     129B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9578     129C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9579     129D  3000               	movlw	0
  9580     129E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9581     129F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9582     12A0  3194  24AA  3192   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9583                           
  9584                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
  9585     12A3  003D               	movlb	29	; select bank29
  9586     12A4  108E               	bcf	14,1	;volatile
  9587                           
  9588                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
  9589     12A5  1112               	bcf	18,2	;volatile
  9590     12A6                     i1l5003:	
  9591                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
  9592                           
  9593                           
  9594                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
  9595     12A6  1D10               	btfss	16,2	;volatile
  9596     12A7  2AAD               	goto	i1l5005
  9597                           
  9598                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
  9599     12A8  30FB               	movlw	251
  9600     12A9  00FD               	movwf	??_USBWakeFromSuspend
  9601     12AA  087D               	movf	??_USBWakeFromSuspend,w
  9602     12AB  0590               	andwf	16,f	;volatile
  9603     12AC  2AA6               	goto	i1l5003
  9604     12AD                     i1l5005:
  9605                           
  9606                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
  9607     12AD  0022               	movlb	2	; select bank2
  9608     12AE  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  9609     12AF  0008               	return
  9610     12B0                     __end_of_USBWakeFromSuspend:
  9611                           
  9612                           	psect	text46
  9613     11A2                     __ptext46:	
  9614 ;; *************** function _USBSuspend *****************
  9615 ;; Defined at:
  9616 ;;		line 2252 in file "usb/usb_device.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 1F/1D
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        1 bytes
  9635 ;; Hardware stack levels used: 1
  9636 ;; Hardware stack levels required when called: 4
  9637 ;; This function calls:
  9638 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9639 ;; This function is called by:
  9640 ;;		_USBDeviceTasks
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644     11A2                     _USBSuspend:	
  9645                           ;psect for function _USBSuspend
  9646                           
  9647                           
  9648                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9652     11A2  1512               	bsf	18,2	;volatile
  9653                           
  9654                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
  9655     11A3  30EF               	movlw	239
  9656     11A4  00FD               	movwf	??_USBSuspend
  9657     11A5  087D               	movf	??_USBSuspend,w
  9658     11A6  0590               	andwf	16,f	;volatile
  9659                           
  9660                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
  9661     11A7  148E               	bsf	14,1	;volatile
  9662                           
  9663                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
  9664     11A8  3001               	movlw	1
  9665     11A9  0022               	movlb	2	; select bank2
  9666     11AA  00DC               	movwf	_USBBusIsSuspended^(0+256)	;volatile
  9667                           
  9668                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
  9669     11AB  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  9670                           
  9671                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
  9672     11AC  3075               	movlw	117
  9673     11AD  0020               	movlb	0	; select bank0
  9674     11AE  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9675     11AF  3000               	movlw	0
  9676     11B0  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9677     11B1  3000               	movlw	0
  9678     11B2  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9679     11B3  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9680     11B4  3000               	movlw	0
  9681     11B5  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9682     11B6  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9683     11B7  3194  24AA         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9684     11B9  0008               	return
  9685     11BA                     __end_of_USBSuspend:
  9686                           
  9687                           	psect	text47
  9688     132F                     __ptext47:	
  9689 ;; *************** function _USBStallHandler *****************
  9690 ;; Defined at:
  9691 ;;		line 2209 in file "usb/usb_device.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;		None
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;		None
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  1    wreg      void 
  9698 ;; Registers used:
  9699 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9700 ;; Tracked objects:
  9701 ;;		On entry : 1F/1D
  9702 ;;		On exit  : 1F/1D
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;Total ram usage:        1 bytes
  9710 ;; Hardware stack levels used: 1
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_USBDeviceTasks
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718     132F                     _USBStallHandler:	
  9719                           ;psect for function _USBStallHandler
  9720                           
  9721                           
  9722                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
  9723                           
  9724                           ;incstack = 0
  9725                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  9726     132F  1C18               	btfss	24,0	;volatile
  9727     1330  2B4C               	goto	i1l5037
  9728                           
  9729                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
  9730     1331  0020               	movlb	0	; select bank0
  9731     1332  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9732     1333  0086               	movwf	6
  9733     1334  0187               	clrf	7
  9734     1335  3080               	movlw	128
  9735     1336  0601               	xorwf	1,w
  9736     1337  1D03               	btfss	3,2
  9737     1338  2B4A               	goto	i1l5035
  9738     1339  0861               	movf	_pBDTEntryIn,w
  9739     133A  0086               	movwf	6
  9740     133B  0862               	movf	_pBDTEntryIn+1,w
  9741     133C  0087               	movwf	7
  9742     133D  3084               	movlw	132
  9743     133E  0601               	xorwf	1,w
  9744     133F  1D03               	btfss	3,2
  9745     1340  2B4A               	goto	i1l5035
  9746                           
  9747                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
  9748     1341  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9749     1342  0086               	movwf	6
  9750     1343  0187               	clrf	7
  9751     1344  300C               	movlw	12
  9752     1345  0081               	movwf	1
  9753                           
  9754                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
  9755     1346  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9756     1347  0086               	movwf	6
  9757     1348  0187               	clrf	7
  9758     1349  1781               	bsf	1,7
  9759     134A                     i1l5035:
  9760                           
  9761                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
  9762     134A  003D               	movlb	29	; select bank29
  9763     134B  1018               	bcf	24,0	;volatile
  9764     134C                     i1l5037:
  9765                           
  9766                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
  9767     134C  30DF               	movlw	223
  9768     134D  00F0               	movwf	??_USBStallHandler
  9769     134E  0870               	movf	??_USBStallHandler,w
  9770     134F  0590               	andwf	16,f	;volatile
  9771     1350  0008               	return
  9772     1351                     __end_of_USBStallHandler:
  9773                           
  9774                           	psect	text48
  9775     0800                     __ptext48:	
  9776 ;; *************** function _USBIncrement1msInternalTimers *****************
  9777 ;; Defined at:
  9778 ;;		line 2998 in file "usb/usb_device.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;		None
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;		None
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0
  9787 ;; Tracked objects:
  9788 ;;		On entry : 1F/1D
  9789 ;;		On exit  : 1F/2
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9796 ;;Total ram usage:        1 bytes
  9797 ;; Hardware stack levels used: 1
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_USBDeviceTasks
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805     0800                     _USBIncrement1msInternalTimers:	
  9806                           ;psect for function _USBIncrement1msInternalTimers
  9807                           
  9808                           
  9809                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
  9813     0800  3001               	movlw	1
  9814     0801  0023               	movlb	3	; select bank3
  9815     0802  07CA               	addwf	_USB1msTickCount^(0+384),f	;volatile
  9816     0803  3000               	movlw	0
  9817     0804  3DCB               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
  9818     0805  3000               	movlw	0
  9819     0806  3DCC               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
  9820     0807  3000               	movlw	0
  9821     0808  3DCD               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
  9822                           
  9823                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
  9824     0809  0022               	movlb	2	; select bank2
  9825     080A  085C               	movf	_USBBusIsSuspended^(0+256),w	;volatile
  9826     080B  1D03               	btfss	3,2
  9827     080C  0008               	return
  9828                           
  9829                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
  9830     080D  3001               	movlw	1
  9831     080E  00F0               	movwf	??_USBIncrement1msInternalTimers
  9832     080F  0870               	movf	??_USBIncrement1msInternalTimers,w
  9833     0810  07D4               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
  9834                           
  9835                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
  9836     0811  0854               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
  9837     0812  1D03               	btfss	3,2
  9838     0813  0008               	return
  9839                           
  9840                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
  9841     0814  30FF               	movlw	255
  9842     0815  00D4               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  9843     0816  0008               	return
  9844     0817                     __end_of_USBIncrement1msInternalTimers:
  9845                           
  9846                           	psect	text49
  9847     15F1                     __ptext49:	
  9848 ;; *************** function _USBCtrlEPService *****************
  9849 ;; Defined at:
  9850 ;;		line 2379 in file "usb/usb_device.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      void 
  9857 ;; Registers used:
  9858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 1F/1
  9861 ;;		On exit  : 1D/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;Total ram usage:        1 bytes
  9869 ;; Hardware stack levels used: 1
  9870 ;; Hardware stack levels required when called: 7
  9871 ;; This function calls:
  9872 ;;		_USBCtrlTrfInHandler
  9873 ;;		_USBCtrlTrfOutHandler
  9874 ;;		_USBCtrlTrfSetupHandler
  9875 ;;		i1_memcpy
  9876 ;; This function is called by:
  9877 ;;		_USBDeviceTasks
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881     15F1                     _USBCtrlEPService:	
  9882                           ;psect for function _USBCtrlEPService
  9883                           
  9884                           
  9885                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9889     15F1  302D               	movlw	45
  9890     15F2  0022               	movlb	2	; select bank2
  9891     15F3  00DA               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
  9892                           
  9893                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
  9894     15F4  0020               	movlb	0	; select bank0
  9895     15F5  086D               	movf	_USTATcopy,w	;volatile
  9896     15F6  39FD               	andlw	253
  9897     15F7  1D03               	btfss	3,2
  9898     15F8  2E2F               	goto	i1l5057
  9899                           
  9900                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
  9901     15F9  366D               	lsrf	_USTATcopy,w	;volatile
  9902     15FA  393F               	andlw	63
  9903     15FB  00DE               	movwf	??_USBCtrlEPService
  9904     15FC  3001               	movlw	1
  9905     15FD                     u437_25:
  9906     15FD  35DE               	lslf	??_USBCtrlEPService,f
  9907     15FE  3EFF               	addlw	-1
  9908     15FF  1D03               	skipz
  9909     1600  2DFD               	goto	u437_25
  9910     1601  355E               	lslf	??_USBCtrlEPService,w
  9911     1602  3E20               	addlw	32
  9912     1603  00EB               	movwf	_pBDTEntryEP0OutCurrent
  9913                           
  9914                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
  9915     1604  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9916     1605  00E7               	movwf	_pBDTEntryEP0OutNext
  9917     1606  01E8               	clrf	_pBDTEntryEP0OutNext+1
  9918                           
  9919                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
  9920     1607  3004               	movlw	4
  9921     1608  0667               	xorwf	_pBDTEntryEP0OutNext,w
  9922     1609  00E7               	movwf	_pBDTEntryEP0OutNext
  9923     160A  3000               	movlw	0
  9924     160B  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
  9925     160C  00E8               	movwf	_pBDTEntryEP0OutNext+1
  9926                           
  9927                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
  9928     160D  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9929     160E  0086               	movwf	6
  9930     160F  0187               	clrf	7
  9931     1610  0C01               	rrf	1,w
  9932     1611  0C89               	rrf	9,f
  9933     1612  390F               	andlw	15
  9934     1613  3A0D               	xorlw	13
  9935     1614  1D03               	skipz
  9936     1615  2E2C               	goto	i1l5055
  9937                           
  9938                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
  9939     1616  3040               	movlw	64
  9940     1617  00F6               	movwf	i1memcpy@d1
  9941     1618  3000               	movlw	0
  9942     1619  00F7               	movwf	i1memcpy@d1+1
  9943     161A  086B               	movf	_pBDTEntryEP0OutCurrent,w
  9944     161B  3E02               	addlw	2
  9945     161C  0086               	movwf	6
  9946     161D  0187               	clrf	7
  9947     161E  3F40               	moviw [0]fsr1
  9948     161F  00F8               	movwf	i1memcpy@s1
  9949     1620  3F41               	moviw [1]fsr1
  9950     1621  00F9               	movwf	i1memcpy@s1+1
  9951     1622  3008               	movlw	8
  9952     1623  00FA               	movwf	i1memcpy@n
  9953     1624  3000               	movlw	0
  9954     1625  00FB               	movwf	i1memcpy@n+1
  9955     1626  3193  2351  3195   	fcall	i1_memcpy
  9956                           
  9957                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
  9958     1629  3196  2639         	fcall	_USBCtrlTrfSetupHandler
  9959                           
  9960                           ;usb/usb_device.c: 2416:         }
  9961     162B  0008               	return
  9962     162C                     i1l5055:
  9963                           
  9964                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
  9965     162C  3194  2470         	fcall	_USBCtrlTrfOutHandler
  9966     162E  0008               	return
  9967     162F                     i1l5057:
  9968     162F  30FD               	movlw	253
  9969     1630  056D               	andwf	_USTATcopy,w	;volatile
  9970     1631  00DE               	movwf	??_USBCtrlEPService
  9971     1632  3004               	movlw	4
  9972     1633  065E               	xorwf	??_USBCtrlEPService,w
  9973     1634  1D03               	btfss	3,2
  9974     1635  0008               	return
  9975                           
  9976                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
  9977     1636  318B  2377         	fcall	_USBCtrlTrfInHandler
  9978     1638  0008               	return
  9979     1639                     __end_of_USBCtrlEPService:
  9980                           
  9981                           	psect	text50
  9982     1639                     __ptext50:	
  9983 ;; *************** function _USBCtrlTrfSetupHandler *****************
  9984 ;; Defined at:
  9985 ;;		line 2472 in file "usb/usb_device.c"
  9986 ;; Parameters:    Size  Location     Type
  9987 ;;		None
  9988 ;; Auto vars:     Size  Location     Type
  9989 ;;		None
  9990 ;; Return value:  Size  Location     Type
  9991 ;;                  1    wreg      void 
  9992 ;; Registers used:
  9993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9994 ;; Tracked objects:
  9995 ;;		On entry : 1F/0
  9996 ;;		On exit  : 1D/0
  9997 ;;		Unchanged: 0/0
  9998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;Total ram usage:        1 bytes
 10004 ;; Hardware stack levels used: 1
 10005 ;; Hardware stack levels required when called: 6
 10006 ;; This function calls:
 10007 ;;		_USBCheckStdRequest
 10008 ;;		_USBCtrlEPServiceComplete
 10009 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10010 ;; This function is called by:
 10011 ;;		_USBCtrlEPService
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015     1639                     _USBCtrlTrfSetupHandler:	
 10016                           ;psect for function _USBCtrlTrfSetupHandler
 10017                           
 10018                           
 10019                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10023     1639  0021               	movlb	1	; select bank1
 10024     163A  01EE               	clrf	_shortPacketStatus^(0+128)	;volatile
 10025                           
 10026                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10027     163B  0022               	movlb	2	; select bank2
 10028     163C  01D9               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10029                           
 10030                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10031     163D  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10032                           
 10033                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10034     163E  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10035                           
 10036                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10037     163F  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10038                           
 10039                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10040     1640  0020               	movlb	0	; select bank0
 10041     1641  01EA               	clrf	_controlTransferState	;volatile
 10042                           
 10043                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10044     1642  307F               	movlw	127
 10045     1643  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10046     1644  0861               	movf	_pBDTEntryIn,w
 10047     1645  0086               	movwf	6
 10048     1646  0862               	movf	_pBDTEntryIn+1,w
 10049     1647  0087               	movwf	7
 10050     1648  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10051     1649  0581               	andwf	1,f
 10052                           
 10053                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10054     164A  3004               	movlw	4
 10055     164B  0661               	xorwf	_pBDTEntryIn,w
 10056     164C  00E1               	movwf	_pBDTEntryIn
 10057     164D  3000               	movlw	0
 10058     164E  0662               	xorwf	_pBDTEntryIn+1,w
 10059     164F  00E2               	movwf	_pBDTEntryIn+1
 10060                           
 10061                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10062     1650  307F               	movlw	127
 10063     1651  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10064     1652  0861               	movf	_pBDTEntryIn,w
 10065     1653  0086               	movwf	6
 10066     1654  0862               	movf	_pBDTEntryIn+1,w
 10067     1655  0087               	movwf	7
 10068     1656  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10069     1657  0581               	andwf	1,f
 10070                           
 10071                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10072     1658  3004               	movlw	4
 10073     1659  0661               	xorwf	_pBDTEntryIn,w
 10074     165A  00E1               	movwf	_pBDTEntryIn
 10075     165B  3000               	movlw	0
 10076     165C  0662               	xorwf	_pBDTEntryIn+1,w
 10077     165D  00E2               	movwf	_pBDTEntryIn+1
 10078                           
 10079                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10080     165E  307F               	movlw	127
 10081     165F  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10082     1660  0867               	movf	_pBDTEntryEP0OutNext,w
 10083     1661  0086               	movwf	6
 10084     1662  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10085     1663  0087               	movwf	7
 10086     1664  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10087     1665  0581               	andwf	1,f
 10088                           
 10089                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10090     1666  0021               	movlb	1	; select bank1
 10091     1667  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 10092                           
 10093                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10094     1668  01EB               	clrf	(_inPipes^(0+128)+3)	;volatile
 10095     1669  01EC               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10096                           
 10097                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10098     166A  0022               	movlb	2	; select bank2
 10099     166B  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10100                           
 10101                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10102     166C  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10103     166D  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10104                           
 10105                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10106     166E  3189  214E  3196   	fcall	_USBCheckStdRequest
 10107                           
 10108                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10109     1671  3003               	movlw	3
 10110     1672  0020               	movlb	0	; select bank0
 10111     1673  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10112     1674  3000               	movlw	0
 10113     1675  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10114     1676  3000               	movlw	0
 10115     1677  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10116     1678  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10117     1679  3000               	movlw	0
 10118     167A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10119     167B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10120     167C  3194  24AA  3196   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10121                           
 10122                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10123     167F  318D  2570         	fcall	_USBCtrlEPServiceComplete
 10124     1681  0008               	return
 10125     1682                     __end_of_USBCtrlTrfSetupHandler:
 10126                           
 10127                           	psect	text51
 10128     0D70                     __ptext51:	
 10129 ;; *************** function _USBCtrlEPServiceComplete *****************
 10130 ;; Defined at:
 10131 ;;		line 1620 in file "usb/usb_device.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  1    wreg      void 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/2
 10142 ;;		On exit  : 1D/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        4 bytes
 10150 ;; Hardware stack levels used: 1
 10151 ;; Hardware stack levels required when called: 2
 10152 ;; This function calls:
 10153 ;;		_USBCtrlEPAllowDataStage
 10154 ;;		_USBCtrlEPAllowStatusStage
 10155 ;; This function is called by:
 10156 ;;		_USBCtrlTrfSetupHandler
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160     0D70                     _USBCtrlEPServiceComplete:	
 10161                           ;psect for function _USBCtrlEPServiceComplete
 10162                           
 10163                           
 10164                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10168     0D70  003D               	movlb	29	; select bank29
 10169     0D71  120E               	bcf	14,4	;volatile
 10170                           
 10171                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10172     0D72  0021               	movlb	1	; select bank1
 10173     0D73  1BEA               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10174     0D74  2DBC               	goto	i1l566
 10175                           
 10176                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10177     0D75  0022               	movlb	2	; select bank2
 10178     0D76  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10179     0D77  2D85               	goto	i1l4271
 10180                           
 10181                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10182     0D78  3002               	movlw	2
 10183     0D79  0020               	movlb	0	; select bank0
 10184     0D7A  00EA               	movwf	_controlTransferState	;volatile
 10185                           
 10186                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10187     0D7B  0022               	movlb	2	; select bank2
 10188     0D7C  0855               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10189     0D7D  1D03               	btfss	3,2
 10190     0D7E  2D81               	goto	i1l4267
 10191                           
 10192                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10193     0D7F  3188  2017         	fcall	_USBCtrlEPAllowDataStage
 10194     0D81                     i1l4267:
 10195                           
 10196                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10197     0D81  0022               	movlb	2	; select bank2
 10198     0D82  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10199                           
 10200                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10201     0D83  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10202                           
 10203                           ;usb/usb_device.c: 1656:         }
 10204     0D84  0008               	return
 10205     0D85                     i1l4271:
 10206                           
 10207                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10208     0D85  0020               	movlb	0	; select bank0
 10209     0D86  0867               	movf	_pBDTEntryEP0OutNext,w
 10210     0D87  3E01               	addlw	1
 10211     0D88  00F7               	movwf	??_USBCtrlEPServiceComplete
 10212     0D89  3000               	movlw	0
 10213     0D8A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10214     0D8B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10215     0D8C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10216     0D8D  0086               	movwf	6
 10217     0D8E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10218     0D8F  0087               	movwf	7
 10219     0D90  3008               	movlw	8
 10220     0D91  0081               	movwf	1
 10221                           
 10222                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10223     0D92  3040               	movlw	64
 10224     0D93  00F7               	movwf	??_USBCtrlEPServiceComplete
 10225     0D94  3000               	movlw	0
 10226     0D95  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10227     0D96  30FF               	movlw	255
 10228     0D97  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10229     0D98  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10230     0D99  307F               	movlw	127
 10231     0D9A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10232     0D9B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10233     0D9C  0867               	movf	_pBDTEntryEP0OutNext,w
 10234     0D9D  0086               	movwf	6
 10235     0D9E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10236     0D9F  0087               	movwf	7
 10237     0DA0  3142               	addfsr 1,2
 10238     0DA1  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10239     0DA2  3FC0               	movwi [0]fsr1
 10240     0DA3  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10241     0DA4  3FC1               	movwi [1]fsr1
 10242                           
 10243                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10244     0DA5  0867               	movf	_pBDTEntryEP0OutNext,w
 10245     0DA6  0086               	movwf	6
 10246     0DA7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10247     0DA8  0087               	movwf	7
 10248     0DA9  300C               	movlw	12
 10249     0DAA  0081               	movwf	1
 10250                           
 10251                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10252     0DAB  0867               	movf	_pBDTEntryEP0OutNext,w
 10253     0DAC  0086               	movwf	6
 10254     0DAD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10255     0DAE  0087               	movwf	7
 10256     0DAF  1781               	bsf	1,7
 10257                           
 10258                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10259     0DB0  0861               	movf	_pBDTEntryIn,w
 10260     0DB1  0086               	movwf	6
 10261     0DB2  0862               	movf	_pBDTEntryIn+1,w
 10262     0DB3  0087               	movwf	7
 10263     0DB4  3004               	movlw	4
 10264     0DB5  0081               	movwf	1
 10265                           
 10266                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10267     0DB6  0861               	movf	_pBDTEntryIn,w
 10268     0DB7  0086               	movwf	6
 10269     0DB8  0862               	movf	_pBDTEntryIn+1,w
 10270     0DB9  0087               	movwf	7
 10271     0DBA  1781               	bsf	1,7
 10272     0DBB  0008               	return
 10273     0DBC                     i1l566:	
 10274                           ;usb/usb_device.c: 1671:     else
 10275                           
 10276                           
 10277                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10278     0DBC  0020               	movlb	0	; select bank0
 10279     0DBD  1FC0               	btfss	64,7	;volatile
 10280     0DBE  2DD1               	goto	i1l4297
 10281                           
 10282                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10283     0DBF  3001               	movlw	1
 10284     0DC0  00EA               	movwf	_controlTransferState	;volatile
 10285                           
 10286                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10287     0DC1  0022               	movlb	2	; select bank2
 10288     0DC2  0856               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10289     0DC3  1D03               	btfss	3,2
 10290     0DC4  2DC8               	goto	i1l4289
 10291                           
 10292                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10293     0DC5  3188  2017  318D   	fcall	_USBCtrlEPAllowDataStage
 10294     0DC8                     i1l4289:
 10295                           
 10296                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 10297     0DC8  0022               	movlb	2	; select bank2
 10298     0DC9  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10299                           
 10300                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 10301     0DCA  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10302                           
 10303                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 10304     0DCB  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 10305     0DCC  1D03               	btfss	3,2
 10306     0DCD  0008               	return
 10307                           
 10308                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 10309     0DCE  318A  228C         	fcall	_USBCtrlEPAllowStatusStage
 10310     0DD0  0008               	return
 10311     0DD1                     i1l4297:
 10312                           
 10313                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 10314     0DD1  3002               	movlw	2
 10315     0DD2  00EA               	movwf	_controlTransferState	;volatile
 10316                           
 10317                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 10318     0DD3  0867               	movf	_pBDTEntryEP0OutNext,w
 10319     0DD4  3E01               	addlw	1
 10320     0DD5  00F7               	movwf	??_USBCtrlEPServiceComplete
 10321     0DD6  3000               	movlw	0
 10322     0DD7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10323     0DD8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10324     0DD9  0877               	movf	??_USBCtrlEPServiceComplete,w
 10325     0DDA  0086               	movwf	6
 10326     0DDB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10327     0DDC  0087               	movwf	7
 10328     0DDD  3008               	movlw	8
 10329     0DDE  0081               	movwf	1
 10330                           
 10331                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 10332     0DDF  3040               	movlw	64
 10333     0DE0  00F7               	movwf	??_USBCtrlEPServiceComplete
 10334     0DE1  3000               	movlw	0
 10335     0DE2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10336     0DE3  30FF               	movlw	255
 10337     0DE4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10338     0DE5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10339     0DE6  307F               	movlw	127
 10340     0DE7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10341     0DE8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10342     0DE9  0867               	movf	_pBDTEntryEP0OutNext,w
 10343     0DEA  0086               	movwf	6
 10344     0DEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10345     0DEC  0087               	movwf	7
 10346     0DED  3142               	addfsr 1,2
 10347     0DEE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10348     0DEF  3FC0               	movwi [0]fsr1
 10349     0DF0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10350     0DF1  3FC1               	movwi [1]fsr1
 10351                           
 10352                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 10353     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 10354     0DF3  0086               	movwf	6
 10355     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10356     0DF5  0087               	movwf	7
 10357     0DF6  3004               	movlw	4
 10358     0DF7  0081               	movwf	1
 10359                           
 10360                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10361     0DF8  0867               	movf	_pBDTEntryEP0OutNext,w
 10362     0DF9  0086               	movwf	6
 10363     0DFA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10364     0DFB  0087               	movwf	7
 10365     0DFC  1781               	bsf	1,7
 10366     0DFD  2DC8               	goto	i1l4289
 10367     0DFE                     __end_of_USBCtrlEPServiceComplete:	
 10368                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 10369                           
 10370                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 10371                           
 10372                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 10373                           
 10374                           
 10375                           	psect	text52
 10376     0817                     __ptext52:	
 10377 ;; *************** function _USBCtrlEPAllowDataStage *****************
 10378 ;; Defined at:
 10379 ;;		line 1492 in file "usb/usb_device.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;		None
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;		None
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  1    wreg      void 
 10386 ;; Registers used:
 10387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 1F/2
 10390 ;;		On exit  : 1F/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;Total ram usage:        4 bytes
 10398 ;; Hardware stack levels used: 1
 10399 ;; Hardware stack levels required when called: 1
 10400 ;; This function calls:
 10401 ;;		_USBCtrlTrfTxService
 10402 ;; This function is called by:
 10403 ;;		_USBCtrlEPServiceComplete
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407     0817                     _USBCtrlEPAllowDataStage:	
 10408                           ;psect for function _USBCtrlEPAllowDataStage
 10409                           
 10410                           
 10411                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 10412                           
 10413                           ;incstack = 0
 10414                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10415     0817  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10416                           
 10417                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 10418     0818  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10419                           
 10420                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 10421     0819  3002               	movlw	2
 10422     081A  0020               	movlb	0	; select bank0
 10423     081B  066A               	xorwf	_controlTransferState,w	;volatile
 10424     081C  1D03               	btfss	3,2
 10425     081D  2849               	goto	i1l3975
 10426                           
 10427                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 10428     081E  0867               	movf	_pBDTEntryEP0OutNext,w
 10429     081F  3E01               	addlw	1
 10430     0820  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10431     0821  3000               	movlw	0
 10432     0822  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10433     0823  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 10434     0824  0873               	movf	??_USBCtrlEPAllowDataStage,w
 10435     0825  0086               	movwf	6
 10436     0826  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 10437     0827  0087               	movwf	7
 10438     0828  3008               	movlw	8
 10439     0829  0081               	movwf	1
 10440                           
 10441                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 10442     082A  3048               	movlw	72
 10443     082B  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10444     082C  3000               	movlw	0
 10445     082D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 10446     082E  30FF               	movlw	255
 10447     082F  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 10448     0830  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 10449     0831  307F               	movlw	127
 10450     0832  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 10451     0833  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 10452     0834  0867               	movf	_pBDTEntryEP0OutNext,w
 10453     0835  0086               	movwf	6
 10454     0836  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10455     0837  0087               	movwf	7
 10456     0838  3142               	addfsr 1,2
 10457     0839  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 10458     083A  3FC0               	movwi [0]fsr1
 10459     083B  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 10460     083C  3FC1               	movwi [1]fsr1
 10461                           
 10462                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 10463     083D  0867               	movf	_pBDTEntryEP0OutNext,w
 10464     083E  0086               	movwf	6
 10465     083F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10466     0840  0087               	movwf	7
 10467     0841  3048               	movlw	72
 10468     0842  0081               	movwf	1
 10469                           
 10470                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10471     0843  0867               	movf	_pBDTEntryEP0OutNext,w
 10472     0844  0086               	movwf	6
 10473     0845  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10474     0846  0087               	movwf	7
 10475     0847  1781               	bsf	1,7
 10476                           
 10477                           ;usb/usb_device.c: 1504:     }
 10478     0848  0008               	return
 10479     0849                     i1l3975:
 10480                           
 10481                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 10482     0849  0021               	movlb	1	; select bank1
 10483     084A  086C               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 10484     084B  0020               	movlb	0	; select bank0
 10485     084C  0247               	subwf	71,w	;volatile
 10486     084D  1D03               	skipz
 10487     084E  2853               	goto	u297_25
 10488     084F  0021               	movlb	1	; select bank1
 10489     0850  086B               	movf	(_inPipes^(0+128)+3),w	;volatile
 10490     0851  0020               	movlb	0	; select bank0
 10491     0852  0246               	subwf	70,w	;volatile
 10492     0853                     u297_25:
 10493     0853  1803               	skipnc
 10494     0854  285C               	goto	i1l3979
 10495                           
 10496                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 10497     0855  0847               	movf	71,w	;volatile
 10498     0856  0021               	movlb	1	; select bank1
 10499     0857  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 10500     0858  0020               	movlb	0	; select bank0
 10501     0859  0846               	movf	70,w	;volatile
 10502     085A  0021               	movlb	1	; select bank1
 10503     085B  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 10504     085C                     i1l3979:
 10505                           
 10506                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 10507     085C  3197  279B         	fcall	_USBCtrlTrfTxService
 10508                           
 10509                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 10510     085E  3048               	movlw	72
 10511     085F  00F3               	movwf	??_USBCtrlEPAllowDataStage
 10512     0860  3000               	movlw	0
 10513     0861  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 10514     0862  30FF               	movlw	255
 10515     0863  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 10516     0864  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 10517     0865  307F               	movlw	127
 10518     0866  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 10519     0867  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 10520     0868  0020               	movlb	0	; select bank0
 10521     0869  0861               	movf	_pBDTEntryIn,w
 10522     086A  0086               	movwf	6
 10523     086B  0862               	movf	_pBDTEntryIn+1,w
 10524     086C  0087               	movwf	7
 10525     086D  3142               	addfsr 1,2
 10526     086E  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 10527     086F  3FC0               	movwi [0]fsr1
 10528     0870  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 10529     0871  3FC1               	movwi [1]fsr1
 10530                           
 10531                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 10532     0872  0861               	movf	_pBDTEntryIn,w
 10533     0873  0086               	movwf	6
 10534     0874  0862               	movf	_pBDTEntryIn+1,w
 10535     0875  0087               	movwf	7
 10536     0876  3048               	movlw	72
 10537     0877  0081               	movwf	1
 10538                           
 10539                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 10540     0878  0861               	movf	_pBDTEntryIn,w
 10541     0879  0086               	movwf	6
 10542     087A  0862               	movf	_pBDTEntryIn+1,w
 10543     087B  0087               	movwf	7
 10544     087C  1781               	bsf	1,7
 10545     087D  0008               	return
 10546     087E                     __end_of_USBCtrlEPAllowDataStage:
 10547                           
 10548                           	psect	text53
 10549     094E                     __ptext53:	
 10550 ;; *************** function _USBCheckStdRequest *****************
 10551 ;; Defined at:
 10552 ;;		line 2693 in file "usb/usb_device.c"
 10553 ;; Parameters:    Size  Location     Type
 10554 ;;		None
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;		None
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  1    wreg      void 
 10559 ;; Registers used:
 10560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10561 ;; Tracked objects:
 10562 ;;		On entry : 1F/2
 10563 ;;		On exit  : 0/0
 10564 ;;		Unchanged: 0/0
 10565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;Total ram usage:        0 bytes
 10571 ;; Hardware stack levels used: 1
 10572 ;; Hardware stack levels required when called: 5
 10573 ;; This function calls:
 10574 ;;		_USBStdFeatureReqHandler
 10575 ;;		_USBStdGetDscHandler
 10576 ;;		_USBStdGetStatusHandler
 10577 ;;		_USBStdSetCfgHandler
 10578 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10579 ;; This function is called by:
 10580 ;;		_USBCtrlTrfSetupHandler
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584     094E                     _USBCheckStdRequest:	
 10585                           ;psect for function _USBCheckStdRequest
 10586                           
 10587                           
 10588                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10592     094E  0020               	movlb	0	; select bank0
 10593     094F  0E40               	swapf	64,w	;volatile
 10594     0950  0C89               	rrf	9,f
 10595     0951  3903               	andlw	3
 10596     0952  3A00               	xorlw	0
 10597     0953  1D03               	btfss	3,2
 10598     0954  0008               	return
 10599     0955  2993               	goto	i1l4405
 10600     0956                     i1l694:	
 10601                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 10602                           
 10603                           
 10604                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 10605     0956  0021               	movlb	1	; select bank1
 10606     0957  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 10607                           
 10608                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 10609     0958  3008               	movlw	8
 10610     0959  0020               	movlb	0	; select bank0
 10611     095A  00EC               	movwf	_USBDeviceState	;volatile
 10612                           
 10613                           ;usb/usb_device.c: 2703:             break;
 10614     095B  0008               	return
 10615     095C                     i1l4375:
 10616                           
 10617                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 10618     095C  318A  22FE         	fcall	_USBStdGetDscHandler
 10619                           
 10620                           ;usb/usb_device.c: 2706:             break;
 10621     095E  0008               	return
 10622     095F                     i1l4377:
 10623                           
 10624                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 10625     095F  318A  2220         	fcall	_USBStdSetCfgHandler
 10626                           
 10627                           ;usb/usb_device.c: 2709:             break;
 10628     0961  0008               	return
 10629     0962                     i1l4379:
 10630                           
 10631                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 10632     0962  306F               	movlw	low _USBActiveConfiguration
 10633     0963  0021               	movlb	1	; select bank1
 10634     0964  00E8               	movwf	_inPipes^(0+128)	;volatile
 10635     0965  3000               	movlw	high _USBActiveConfiguration
 10636     0966  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 10637                           
 10638                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10639     0967  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 10640                           
 10641                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 10642     0968  3001               	movlw	1
 10643     0969  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 10644                           
 10645                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 10646     096A  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 10647                           
 10648                           ;usb/usb_device.c: 2715:             break;
 10649     096B  0008               	return
 10650     096C                     i1l4387:
 10651                           
 10652                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 10653     096C  3196  2682         	fcall	_USBStdGetStatusHandler
 10654                           
 10655                           ;usb/usb_device.c: 2718:             break;
 10656     096E  0008               	return
 10657     096F                     i1l4389:
 10658                           
 10659                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 10660     096F  3181  21C2         	fcall	_USBStdFeatureReqHandler
 10661                           
 10662                           ;usb/usb_device.c: 2722:             break;
 10663     0971  0008               	return
 10664     0972                     i1l4391:
 10665                           
 10666                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 10667     0972  0844               	movf	68,w	;volatile
 10668     0973  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 10669     0974  0021               	movlb	1	; select bank1
 10670     0975  00E8               	movwf	_inPipes^(0+128)	;volatile
 10671     0976  01E9               	clrf	(_inPipes+1)^(0+128)	;volatile
 10672                           
 10673                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 10674     0977  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 10675                           
 10676                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 10677     0978  3001               	movlw	1
 10678     0979  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 10679                           
 10680                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 10681     097A  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 10682                           
 10683                           ;usb/usb_device.c: 2728:             break;
 10684     097B  0008               	return
 10685     097C                     i1l703:	
 10686                           ;usb/usb_device.c: 2729:         case 11:
 10687                           
 10688                           
 10689                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 10690     097C  0021               	movlb	1	; select bank1
 10691     097D  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 10692                           
 10693                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 10694     097E  0020               	movlb	0	; select bank0
 10695     097F  0844               	movf	68,w	;volatile
 10696     0980  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 10697     0981  0086               	movwf	6
 10698     0982  0187               	clrf	7
 10699     0983  0842               	movf	66,w	;volatile
 10700     0984  0081               	movwf	1
 10701                           
 10702                           ;usb/usb_device.c: 2732:             break;
 10703     0985  0008               	return
 10704     0986                     i1l4401:
 10705                           
 10706                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 10707     0986  3002               	movlw	2
 10708     0987  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10709     0988  3000               	movlw	0
 10710     0989  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10711     098A  3000               	movlw	0
 10712     098B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10713     098C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10714     098D  3000               	movlw	0
 10715     098E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10716     098F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10717     0990  3194  24AA         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10718                           
 10719                           ;usb/usb_device.c: 2735:             break;
 10720     0992  0008               	return
 10721     0993                     i1l4405:
 10722     0993  0841               	movf	65,w	;volatile
 10723                           
 10724                           ; Switch size 1, requested type "simple"
 10725                           ; Number of cases is 11, Range of values is 0 to 12
 10726                           ; switch strategies available:
 10727                           ; Name         Instructions Cycles
 10728                           ; direct_byte           32     6 (fixed)
 10729                           ; simple_byte           34    18 (average)
 10730                           ; jumptable            260     6 (fixed)
 10731                           ;	Chosen strategy is simple_byte
 10732     0994  3A00               	xorlw	0	; case 0
 10733     0995  1903               	skipnz
 10734     0996  296C               	goto	i1l4387
 10735     0997  3A01               	xorlw	1	; case 1
 10736     0998  1903               	skipnz
 10737     0999  296F               	goto	i1l4389
 10738     099A  3A02               	xorlw	2	; case 3
 10739     099B  1903               	skipnz
 10740     099C  296F               	goto	i1l4389
 10741     099D  3A06               	xorlw	6	; case 5
 10742     099E  1903               	skipnz
 10743     099F  2956               	goto	i1l694
 10744     09A0  3A03               	xorlw	3	; case 6
 10745     09A1  1903               	skipnz
 10746     09A2  295C               	goto	i1l4375
 10747     09A3  3A01               	xorlw	1	; case 7
 10748     09A4  1903               	skipnz
 10749     09A5  2986               	goto	i1l4401
 10750     09A6  3A0F               	xorlw	15	; case 8
 10751     09A7  1903               	skipnz
 10752     09A8  2962               	goto	i1l4379
 10753     09A9  3A01               	xorlw	1	; case 9
 10754     09AA  1903               	skipnz
 10755     09AB  295F               	goto	i1l4377
 10756     09AC  3A03               	xorlw	3	; case 10
 10757     09AD  1903               	skipnz
 10758     09AE  2972               	goto	i1l4391
 10759     09AF  3A01               	xorlw	1	; case 11
 10760     09B0  1903               	skipnz
 10761     09B1  297C               	goto	i1l703
 10762     09B2  3A07               	xorlw	7	; case 12
 10763     09B3  1903               	skipnz
 10764     09B4  29B6               	goto	i1l692
 10765     09B5  29B6               	goto	i1l692
 10766     09B6                     i1l692:
 10767     09B6  0008               	return
 10768     09B7                     __end_of_USBCheckStdRequest:
 10769                           
 10770                           	psect	text54
 10771     0A20                     __ptext54:	
 10772 ;; *************** function _USBStdSetCfgHandler *****************
 10773 ;; Defined at:
 10774 ;;		line 1972 in file "usb/usb_device.c"
 10775 ;; Parameters:    Size  Location     Type
 10776 ;;		None
 10777 ;; Auto vars:     Size  Location     Type
 10778 ;;  p               2    6[BANK0 ] PTR unsigned char 
 10779 ;;		 -> UEP1(1), 
 10780 ;;  i               1    8[BANK0 ] unsigned char 
 10781 ;;  i               1    9[BANK0 ] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  1    wreg      void 
 10784 ;; Registers used:
 10785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10786 ;; Tracked objects:
 10787 ;;		On entry : 1D/0
 10788 ;;		On exit  : 1F/0
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;Total ram usage:        5 bytes
 10796 ;; Hardware stack levels used: 1
 10797 ;; Hardware stack levels required when called: 4
 10798 ;; This function calls:
 10799 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10800 ;;		i1_memset
 10801 ;; This function is called by:
 10802 ;;		_USBCheckStdRequest
 10803 ;; This function uses a non-reentrant model
 10804 ;;
 10805                           
 10806     0A20                     _USBStdSetCfgHandler:	
 10807                           ;psect for function _USBStdSetCfgHandler
 10808                           
 10809                           
 10810                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 10811                           
 10812                           ;incstack = 0
 10813                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10814     0A20  0021               	movlb	1	; select bank1
 10815     0A21  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 10816                           
 10817                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 10818     0A22  300E               	movlw	14
 10819     0A23  0020               	movlb	0	; select bank0
 10820     0A24  00D7               	movwf	USBStdSetCfgHandler@p+1
 10821     0A25  3099               	movlw	153
 10822     0A26  00D6               	movwf	USBStdSetCfgHandler@p
 10823     0A27  01D8               	clrf	USBStdSetCfgHandler@i_2097
 10824     0A28                     i1l3995:
 10825     0A28  0856               	movf	USBStdSetCfgHandler@p,w
 10826     0A29  0086               	movwf	6
 10827     0A2A  0857               	movf	USBStdSetCfgHandler@p+1,w
 10828     0A2B  0087               	movwf	7
 10829     0A2C  0181               	clrf	1
 10830     0A2D  3001               	movlw	1
 10831     0A2E  07D6               	addwf	USBStdSetCfgHandler@p,f
 10832     0A2F  3000               	movlw	0
 10833     0A30  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 10834     0A31  3001               	movlw	1
 10835     0A32  00FD               	movwf	??_USBStdSetCfgHandler
 10836     0A33  087D               	movf	??_USBStdSetCfgHandler,w
 10837     0A34  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 10838     0A35  0858               	movf	USBStdSetCfgHandler@i_2097,w
 10839     0A36  1903               	btfsc	3,2
 10840     0A37  2A28               	goto	i1l3995
 10841                           
 10842                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 10843     0A38  3000               	movlw	0
 10844     0A39  00F0               	movwf	i1memset@c
 10845     0A3A  00F1               	movwf	i1memset@c+1
 10846     0A3B  3020               	movlw	32
 10847     0A3C  00F2               	movwf	i1memset@n
 10848     0A3D  3000               	movlw	0
 10849     0A3E  00F3               	movwf	i1memset@n+1
 10850     0A3F  3020               	movlw	32
 10851     0A40  3191  215E  318A   	fcall	i1_memset
 10852                           
 10853                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 10854     0A43  003D               	movlb	29	; select bank29
 10855     0A44  170E               	bsf	14,6	;volatile
 10856                           
 10857                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 10858     0A45  0020               	movlb	0	; select bank0
 10859     0A46  01D9               	clrf	USBStdSetCfgHandler@i
 10860     0A47                     i1l4013:
 10861                           
 10862                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 10863     0A47  0859               	movf	USBStdSetCfgHandler@i,w
 10864     0A48  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10865     0A49  0086               	movwf	6
 10866     0A4A  3001               	movlw	1	; select bank2/3
 10867     0A4B  0087               	movwf	7
 10868     0A4C  0181               	clrf	1
 10869                           
 10870                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 10871     0A4D  0859               	movf	USBStdSetCfgHandler@i,w
 10872     0A4E  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10873     0A4F  0086               	movwf	6
 10874     0A50  3001               	movlw	1	; select bank2/3
 10875     0A51  0087               	movwf	7
 10876     0A52  0181               	clrf	1
 10877                           
 10878                           ;usb/usb_device.c: 1995:  }
 10879     0A53  3001               	movlw	1
 10880     0A54  00FD               	movwf	??_USBStdSetCfgHandler
 10881     0A55  087D               	movf	??_USBStdSetCfgHandler,w
 10882     0A56  07D9               	addwf	USBStdSetCfgHandler@i,f
 10883     0A57  3002               	movlw	2
 10884     0A58  0259               	subwf	USBStdSetCfgHandler@i,w
 10885     0A59  1C03               	skipc
 10886     0A5A  2A47               	goto	i1l4013
 10887                           
 10888                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 10889     0A5B  3000               	movlw	0
 10890     0A5C  00F0               	movwf	i1memset@c
 10891     0A5D  00F1               	movwf	i1memset@c+1
 10892     0A5E  3001               	movlw	1
 10893     0A5F  00F2               	movwf	i1memset@n
 10894     0A60  3000               	movlw	0
 10895     0A61  00F3               	movwf	i1memset@n+1
 10896     0A62  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 10897     0A63  3191  215E  318A   	fcall	i1_memset
 10898                           
 10899                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 10900     0A66  003D               	movlb	29	; select bank29
 10901     0A67  130E               	bcf	14,6	;volatile
 10902                           
 10903                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10904     0A68  3028               	movlw	40
 10905     0A69  0020               	movlb	0	; select bank0
 10906     0A6A  00E1               	movwf	_pBDTEntryIn
 10907     0A6B  3000               	movlw	0
 10908     0A6C  00E2               	movwf	_pBDTEntryIn+1
 10909                           
 10910                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 10911     0A6D  3020               	movlw	32
 10912     0A6E  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10913                           
 10914                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10915     0A6F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10916     0A70  00E7               	movwf	_pBDTEntryEP0OutNext
 10917     0A71  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10918                           
 10919                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 10920     0A72  0842               	movf	66,w	;volatile
 10921     0A73  00EF               	movwf	_USBActiveConfiguration	;volatile
 10922                           
 10923                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 10924     0A74  086F               	movf	_USBActiveConfiguration,w	;volatile
 10925     0A75  1D03               	btfss	3,2
 10926     0A76  2A7A               	goto	i1l4035
 10927                           
 10928                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 10929     0A77  3010               	movlw	16
 10930     0A78  00EC               	movwf	_USBDeviceState	;volatile
 10931                           
 10932                           ;usb/usb_device.c: 2017:     }
 10933     0A79  0008               	return
 10934     0A7A                     i1l4035:
 10935                           
 10936                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 10937     0A7A  3001               	movlw	1
 10938     0A7B  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10939     0A7C  3000               	movlw	0
 10940     0A7D  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10941     0A7E  306F               	movlw	low _USBActiveConfiguration
 10942     0A7F  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10943     0A80  3000               	movlw	high _USBActiveConfiguration
 10944     0A81  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10945     0A82  3001               	movlw	1
 10946     0A83  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10947     0A84  3000               	movlw	0
 10948     0A85  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10949     0A86  3194  24AA         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10950                           
 10951                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 10952     0A88  3020               	movlw	32
 10953     0A89  0020               	movlb	0	; select bank0
 10954     0A8A  00EC               	movwf	_USBDeviceState	;volatile
 10955     0A8B  0008               	return
 10956     0A8C                     __end_of_USBStdSetCfgHandler:
 10957                           
 10958                           	psect	text55
 10959     115E                     __ptext55:	
 10960 ;; *************** function i1_memset *****************
 10961 ;; Defined at:
 10962 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 10963 ;; Parameters:    Size  Location     Type
 10964 ;;  dest            1    wreg     PTR void 
 10965 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 10966 ;;  c               2    0[COMMON] int 
 10967 ;;  n               2    2[COMMON] unsigned int 
 10968 ;; Auto vars:     Size  Location     Type
 10969 ;;  dest            1    5[COMMON] PTR void 
 10970 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 10971 ;;  p               1    6[COMMON] PTR unsigned char 
 10972 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 10973 ;; Return value:  Size  Location     Type
 10974 ;;                  2    0[COMMON] PTR void 
 10975 ;; Registers used:
 10976 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10977 ;; Tracked objects:
 10978 ;;		On entry : 1F/0
 10979 ;;		On exit  : 1F/0
 10980 ;;		Unchanged: 1F/0
 10981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10982 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;Total ram usage:        7 bytes
 10987 ;; Hardware stack levels used: 1
 10988 ;; This function calls:
 10989 ;;		Nothing
 10990 ;; This function is called by:
 10991 ;;		_USBStdSetCfgHandler
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995     115E                     i1_memset:	
 10996                           ;psect for function i1_memset
 10997                           
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11001                           ;i1memset@dest stored from wreg
 11002     115E  00F5               	movwf	i1memset@dest
 11003     115F  0875               	movf	i1memset@dest,w
 11004     1160  00F6               	movwf	i1memset@p
 11005     1161                     i1l3925:
 11006     1161  3001               	movlw	1
 11007     1162  02F2               	subwf	i1memset@n,f
 11008     1163  3000               	movlw	0
 11009     1164  3BF3               	subwfb	i1memset@n+1,f
 11010     1165  0A72               	incf	i1memset@n,w
 11011     1166  1903               	btfsc	3,2
 11012     1167  0A73               	incf	i1memset@n+1,w
 11013     1168  1903               	btfsc	3,2
 11014     1169  0008               	return
 11015     116A  0876               	movf	i1memset@p,w
 11016     116B  0086               	movwf	6
 11017     116C  0187               	clrf	7
 11018     116D  0870               	movf	i1memset@c,w
 11019     116E  0081               	movwf	1
 11020     116F  3001               	movlw	1
 11021     1170  00F4               	movwf	??i1_memset
 11022     1171  0874               	movf	??i1_memset,w
 11023     1172  07F6               	addwf	i1memset@p,f
 11024     1173  2961               	goto	i1l3925
 11025     1174                     __end_ofi1_memset:
 11026                           
 11027                           	psect	text56
 11028     1682                     __ptext56:	
 11029 ;; *************** function _USBStdGetStatusHandler *****************
 11030 ;; Defined at:
 11031 ;;		line 2133 in file "usb/usb_device.c"
 11032 ;; Parameters:    Size  Location     Type
 11033 ;;		None
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  p               2    0[COMMON] PTR struct __BDT
 11036 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 1D/0
 11043 ;;		On exit  : 1F/1
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        2 bytes
 11051 ;; Hardware stack levels used: 1
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_USBCheckStdRequest
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059     1682                     _USBStdGetStatusHandler:	
 11060                           ;psect for function _USBStdGetStatusHandler
 11061                           
 11062                           
 11063                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11064                           
 11065                           ;incstack = 0
 11066                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11067     1682  0020               	movlb	0	; select bank0
 11068     1683  01C8               	clrf	72	;volatile
 11069                           
 11070                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11071     1684  01C9               	clrf	73	;volatile
 11072                           
 11073                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11074     1685  2EC0               	goto	i1l4095
 11075     1686                     i1l631:	
 11076                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11077                           
 11078                           
 11079                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11080     1686  0021               	movlb	1	; select bank1
 11081     1687  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11082                           
 11083                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11084                           
 11085                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11086     1688  0022               	movlb	2	; select bank2
 11087     1689  035D               	decf	_RemoteWakeup^(0+256),w	;volatile
 11088     168A  1D03               	btfss	3,2
 11089     168B  2ECC               	goto	i1l634
 11090                           
 11091                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11092     168C  0020               	movlb	0	; select bank0
 11093     168D  14C8               	bsf	72,1	;volatile
 11094     168E  2ECC               	goto	i1l634
 11095     168F                     i1l635:	
 11096                           ;usb/usb_device.c: 2156:         case (0x01):
 11097                           
 11098                           
 11099                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11100     168F  0021               	movlb	1	; select bank1
 11101     1690  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11102                           
 11103                           ;usb/usb_device.c: 2158:             break;
 11104     1691  2ECC               	goto	i1l634
 11105     1692                     i1l636:	
 11106                           ;usb/usb_device.c: 2159:         case (0x02):
 11107                           
 11108                           
 11109                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11110     1692  0021               	movlb	1	; select bank1
 11111     1693  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11112                           
 11113                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11114     1694  0020               	movlb	0	; select bank0
 11115     1695  0844               	movf	68,w	;volatile
 11116     1696  390F               	andlw	15
 11117     1697  3A00               	xorlw	0
 11118     1698  1903               	skipnz
 11119     1699  2ECC               	goto	i1l634
 11120                           
 11121                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11122     169A  1BC4               	btfsc	68,7	;volatile
 11123     169B  2EA7               	goto	i1l4085
 11124                           
 11125                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11126     169C  0844               	movf	68,w	;volatile
 11127     169D  390F               	andlw	15
 11128     169E  0709               	addwf	9,w
 11129     169F  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11130     16A0  0086               	movwf	6
 11131     16A1  3001               	movlw	1	; select bank2/3
 11132     16A2  0087               	movwf	7
 11133     16A3  3F40               	moviw [0]fsr1
 11134     16A4  00F0               	movwf	USBStdGetStatusHandler@p
 11135     16A5  3F41               	moviw [1]fsr1
 11136     16A6  2EB0               	goto	L6
 11137     16A7                     i1l4085:	
 11138                           ;usb/usb_device.c: 2171:                 }
 11139                           
 11140                           
 11141                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11142     16A7  0844               	movf	68,w	;volatile
 11143     16A8  390F               	andlw	15
 11144     16A9  0709               	addwf	9,w
 11145     16AA  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11146     16AB  0086               	movwf	6
 11147     16AC  0187               	clrf	7
 11148     16AD  3F40               	moviw [0]fsr1
 11149     16AE  00F0               	movwf	USBStdGetStatusHandler@p
 11150     16AF  3F41               	moviw [1]fsr1
 11151     16B0                     L6:
 11152     16B0  00F1               	movwf	USBStdGetStatusHandler@p+1
 11153                           
 11154                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11155     16B1  0870               	movf	USBStdGetStatusHandler@p,w
 11156     16B2  0086               	movwf	6
 11157     16B3  0871               	movf	USBStdGetStatusHandler@p+1,w
 11158     16B4  0087               	movwf	7
 11159     16B5  1F81               	btfss	1,7
 11160     16B6  2ECC               	goto	i1l634
 11161     16B7  0870               	movf	USBStdGetStatusHandler@p,w
 11162     16B8  0086               	movwf	6
 11163     16B9  0871               	movf	USBStdGetStatusHandler@p+1,w
 11164     16BA  0087               	movwf	7
 11165     16BB  1D01               	btfss	1,2
 11166     16BC  2ECC               	goto	i1l634
 11167                           
 11168                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11169     16BD  3001               	movlw	1
 11170     16BE  00C8               	movwf	72	;volatile
 11171     16BF  2ECC               	goto	i1l634
 11172     16C0                     i1l4095:
 11173     16C0  0840               	movf	64,w	;volatile
 11174     16C1  391F               	andlw	31
 11175                           
 11176                           ; Switch size 1, requested type "simple"
 11177                           ; Number of cases is 3, Range of values is 0 to 2
 11178                           ; switch strategies available:
 11179                           ; Name         Instructions Cycles
 11180                           ; simple_byte           10     6 (average)
 11181                           ; direct_byte           12     6 (fixed)
 11182                           ; jumptable            260     6 (fixed)
 11183                           ;	Chosen strategy is simple_byte
 11184     16C2  3A00               	xorlw	0	; case 0
 11185     16C3  1903               	skipnz
 11186     16C4  2E86               	goto	i1l631
 11187     16C5  3A01               	xorlw	1	; case 1
 11188     16C6  1903               	skipnz
 11189     16C7  2E8F               	goto	i1l635
 11190     16C8  3A03               	xorlw	3	; case 2
 11191     16C9  1903               	skipnz
 11192     16CA  2E92               	goto	i1l636
 11193     16CB  2ECC               	goto	i1l634
 11194     16CC                     i1l634:
 11195                           
 11196                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11197     16CC  0021               	movlb	1	; select bank1
 11198     16CD  1FEA               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11199     16CE  0008               	return
 11200                           
 11201                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11202     16CF  3048               	movlw	72
 11203     16D0  00E8               	movwf	_inPipes^(0+128)	;volatile
 11204     16D1  3000               	movlw	0
 11205     16D2  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 11206                           
 11207                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11208     16D3  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11209                           
 11210                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11211     16D4  3002               	movlw	2
 11212     16D5  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11213     16D6  0008               	return
 11214     16D7                     __end_of_USBStdGetStatusHandler:
 11215                           
 11216                           	psect	text57
 11217     0AFE                     __ptext57:	
 11218 ;; *************** function _USBStdGetDscHandler *****************
 11219 ;; Defined at:
 11220 ;;		line 2047 in file "usb/usb_device.c"
 11221 ;; Parameters:    Size  Location     Type
 11222 ;;		None
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;		None
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  1    wreg      void 
 11227 ;; Registers used:
 11228 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11229 ;; Tracked objects:
 11230 ;;		On entry : 1D/0
 11231 ;;		On exit  : 1E/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;Total ram usage:        3 bytes
 11239 ;; Hardware stack levels used: 1
 11240 ;; This function calls:
 11241 ;;		Nothing
 11242 ;; This function is called by:
 11243 ;;		_USBCheckStdRequest
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247     0AFE                     _USBStdGetDscHandler:	
 11248                           ;psect for function _USBStdGetDscHandler
 11249                           
 11250                           
 11251                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11252                           
 11253                           ;incstack = 0
 11254                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11255     0AFE  3080               	movlw	128
 11256     0AFF  0020               	movlb	0	; select bank0
 11257     0B00  0640               	xorwf	64,w	;volatile
 11258     0B01  1D03               	btfss	3,2
 11259     0B02  0008               	return
 11260                           
 11261                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11262     0B03  30C0               	movlw	192
 11263     0B04  0021               	movlb	1	; select bank1
 11264     0B05  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 11265                           
 11266                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11267     0B06  2B6A               	goto	i1l4069
 11268     0B07                     i1l4043:
 11269                           
 11270                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11271     0B07  30B8               	movlw	low (_device_dsc| (0+32768))
 11272     0B08  0021               	movlb	1	; select bank1
 11273     0B09  00E8               	movwf	_inPipes^(0+128)	;volatile
 11274     0B0A  3098               	movlw	high (_device_dsc| (0+32768))
 11275     0B0B  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 11276                           
 11277                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11278     0B0C  3000               	movlw	0
 11279     0B0D  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11280     0B0E  3012               	movlw	18
 11281     0B0F  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11282                           
 11283                           ;usb/usb_device.c: 2062:                 break;
 11284     0B10  0008               	return
 11285     0B11                     i1l4047:
 11286                           
 11287                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 11288     0B11  0842               	movf	66,w	;volatile
 11289     0B12  1D03               	btfss	3,2
 11290     0B13  2B40               	goto	i1l4055
 11291                           
 11292                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11293     0B14  0842               	movf	66,w	;volatile
 11294     0B15  00F0               	movwf	??_USBStdGetDscHandler
 11295     0B16  01F1               	clrf	??_USBStdGetDscHandler+1
 11296     0B17  35F0               	lslf	??_USBStdGetDscHandler,f
 11297     0B18  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11298     0B19  30D4               	movlw	low _USB_CD_Ptr
 11299     0B1A  0770               	addwf	??_USBStdGetDscHandler,w
 11300     0B1B  0084               	movwf	4
 11301     0B1C  3018               	movlw	high _USB_CD_Ptr
 11302     0B1D  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11303     0B1E  3880               	iorlw	128
 11304     0B1F  0085               	movwf	5
 11305     0B20  3F00               	moviw [0]fsr0
 11306     0B21  0021               	movlb	1	; select bank1
 11307     0B22  00E8               	movwf	_inPipes^(0+128)	;volatile
 11308     0B23  3F01               	moviw [1]fsr0
 11309     0B24  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 11310                           
 11311                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 11312     0B25  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 11313     0B26  00F1               	movwf	??_USBStdGetDscHandler+1
 11314     0B27  0868               	movf	_inPipes^(0+128),w	;volatile
 11315     0B28  00F0               	movwf	??_USBStdGetDscHandler
 11316     0B29  3002               	movlw	2
 11317     0B2A  0770               	addwf	??_USBStdGetDscHandler,w
 11318     0B2B  0084               	movwf	4
 11319     0B2C  0871               	movf	??_USBStdGetDscHandler+1,w
 11320     0B2D  1803               	skipnc
 11321     0B2E  0A71               	incf	??_USBStdGetDscHandler+1,w
 11322     0B2F  0085               	movwf	5
 11323     0B30  0800               	movf	0,w	;code access
 11324     0B31  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11325                           
 11326                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 11327     0B32  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 11328     0B33  00F1               	movwf	??_USBStdGetDscHandler+1
 11329     0B34  0868               	movf	_inPipes^(0+128),w	;volatile
 11330     0B35  00F0               	movwf	??_USBStdGetDscHandler
 11331     0B36  3003               	movlw	3
 11332     0B37  0770               	addwf	??_USBStdGetDscHandler,w
 11333     0B38  0084               	movwf	4
 11334     0B39  0871               	movf	??_USBStdGetDscHandler+1,w
 11335     0B3A  1803               	skipnc
 11336     0B3B  0A71               	incf	??_USBStdGetDscHandler+1,w
 11337     0B3C  0085               	movwf	5
 11338     0B3D  0800               	movf	0,w	;code access
 11339     0B3E  00EC               	movwf	(_inPipes^(0+128)+4)	;volatile
 11340                           
 11341                           ;usb/usb_device.c: 2080:                 }
 11342     0B3F  0008               	return
 11343     0B40                     i1l4055:
 11344                           
 11345                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 11346     0B40  0021               	movlb	1	; select bank1
 11347     0B41  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 11348     0B42  0008               	return
 11349     0B43                     i1l4057:
 11350                           
 11351                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 11352     0B43  3003               	movlw	3
 11353     0B44  0242               	subwf	66,w	;volatile
 11354     0B45  1803               	skipnc
 11355     0B46  2B64               	goto	i1l4063
 11356                           
 11357                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 11358     0B47  0842               	movf	66,w	;volatile
 11359     0B48  00F0               	movwf	??_USBStdGetDscHandler
 11360     0B49  01F1               	clrf	??_USBStdGetDscHandler+1
 11361     0B4A  35F0               	lslf	??_USBStdGetDscHandler,f
 11362     0B4B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 11363     0B4C  30CA               	movlw	low _USB_SD_Ptr
 11364     0B4D  0770               	addwf	??_USBStdGetDscHandler,w
 11365     0B4E  0084               	movwf	4
 11366     0B4F  3018               	movlw	high _USB_SD_Ptr
 11367     0B50  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 11368     0B51  3880               	iorlw	128
 11369     0B52  0085               	movwf	5
 11370     0B53  3F00               	moviw [0]fsr0
 11371     0B54  0021               	movlb	1	; select bank1
 11372     0B55  00E8               	movwf	_inPipes^(0+128)	;volatile
 11373     0B56  3F01               	moviw [1]fsr0
 11374     0B57  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 11375                           
 11376                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 11377     0B58  0868               	movf	_inPipes^(0+128),w	;volatile
 11378     0B59  0084               	movwf	4
 11379     0B5A  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 11380     0B5B  0085               	movwf	5
 11381     0B5C  0800               	movf	0,w	;code access
 11382     0B5D  00F0               	movwf	??_USBStdGetDscHandler
 11383     0B5E  01F1               	clrf	??_USBStdGetDscHandler+1
 11384     0B5F  0870               	movf	??_USBStdGetDscHandler,w
 11385     0B60  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11386     0B61  0871               	movf	??_USBStdGetDscHandler+1,w
 11387     0B62  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11388                           
 11389                           ;usb/usb_device.c: 2096:                 }
 11390     0B63  0008               	return
 11391     0B64                     i1l4063:
 11392                           
 11393                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 11394     0B64  0021               	movlb	1	; select bank1
 11395     0B65  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 11396     0B66  0008               	return
 11397     0B67                     i1l4065:
 11398                           
 11399                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 11400     0B67  0021               	movlb	1	; select bank1
 11401     0B68  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 11402                           
 11403                           ;usb/usb_device.c: 2113:                 break;
 11404     0B69  0008               	return
 11405     0B6A                     i1l4069:
 11406     0B6A  0020               	movlb	0	; select bank0
 11407     0B6B  0843               	movf	67,w	;volatile
 11408                           
 11409                           ; Switch size 1, requested type "simple"
 11410                           ; Number of cases is 3, Range of values is 1 to 3
 11411                           ; switch strategies available:
 11412                           ; Name         Instructions Cycles
 11413                           ; simple_byte           10     6 (average)
 11414                           ; direct_byte           15     9 (fixed)
 11415                           ; jumptable            263     9 (fixed)
 11416                           ;	Chosen strategy is simple_byte
 11417     0B6C  3A01               	xorlw	1	; case 1
 11418     0B6D  1903               	skipnz
 11419     0B6E  2B07               	goto	i1l4043
 11420     0B6F  3A03               	xorlw	3	; case 2
 11421     0B70  1903               	skipnz
 11422     0B71  2B11               	goto	i1l4047
 11423     0B72  3A01               	xorlw	1	; case 3
 11424     0B73  1903               	skipnz
 11425     0B74  2B43               	goto	i1l4057
 11426     0B75  2B67               	goto	i1l4065
 11427     0B76  0008               	return
 11428     0B77                     __end_of_USBStdGetDscHandler:
 11429                           
 11430                           	psect	text58
 11431     01C2                     __ptext58:	
 11432 ;; *************** function _USBStdFeatureReqHandler *****************
 11433 ;; Defined at:
 11434 ;;		line 2761 in file "usb/usb_device.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;  p               2   11[BANK0 ] PTR struct __BDT
 11439 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11440 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 11441 ;;		 -> UEP0(1), 
 11442 ;;  current_ep_d    1   10[BANK0 ] struct .
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      void 
 11445 ;; Registers used:
 11446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 1D/0
 11449 ;;		On exit  : 1F/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;Total ram usage:        7 bytes
 11457 ;; Hardware stack levels used: 1
 11458 ;; Hardware stack levels required when called: 4
 11459 ;; This function calls:
 11460 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11461 ;; This function is called by:
 11462 ;;		_USBCheckStdRequest
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466     01C2                     _USBStdFeatureReqHandler:	
 11467                           ;psect for function _USBStdFeatureReqHandler
 11468                           
 11469                           
 11470                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 11471                           
 11472                           ;incstack = 0
 11473                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11474     01C2  0020               	movlb	0	; select bank0
 11475     01C3  0342               	decf	66,w	;volatile
 11476     01C4  1D03               	btfss	3,2
 11477     01C5  29D8               	goto	i1l4115
 11478     01C6  0840               	movf	64,w	;volatile
 11479     01C7  391F               	andlw	31
 11480     01C8  3A00               	xorlw	0
 11481     01C9  1D03               	skipz
 11482     01CA  29D8               	goto	i1l4115
 11483                           
 11484                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 11485     01CB  0021               	movlb	1	; select bank1
 11486     01CC  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11487                           
 11488                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 11489     01CD  3003               	movlw	3
 11490     01CE  0020               	movlb	0	; select bank0
 11491     01CF  0641               	xorwf	65,w	;volatile
 11492     01D0  1D03               	btfss	3,2
 11493     01D1  29D6               	goto	i1l4113
 11494                           
 11495                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 11496     01D2  3001               	movlw	1
 11497     01D3  0022               	movlb	2	; select bank2
 11498     01D4  00DD               	movwf	_RemoteWakeup^(0+256)	;volatile
 11499     01D5  29D8               	goto	i1l4115
 11500     01D6                     i1l4113:
 11501                           
 11502                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 11503     01D6  0022               	movlb	2	; select bank2
 11504     01D7  01DD               	clrf	_RemoteWakeup^(0+256)	;volatile
 11505     01D8                     i1l4115:
 11506                           
 11507                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 11508     01D8  0020               	movlb	0	; select bank0
 11509     01D9  0842               	movf	66,w	;volatile
 11510     01DA  1D03               	btfss	3,2
 11511     01DB  0008               	return
 11512     01DC  0840               	movf	64,w	;volatile
 11513     01DD  391F               	andlw	31
 11514     01DE  3A02               	xorlw	2
 11515     01DF  1D03               	skipz
 11516     01E0  0008               	return
 11517     01E1  0844               	movf	68,w	;volatile
 11518     01E2  390F               	andlw	15
 11519     01E3  3A00               	xorlw	0
 11520     01E4  1903               	skipnz
 11521     01E5  0008               	return
 11522     01E6  0844               	movf	68,w	;volatile
 11523     01E7  390F               	andlw	15
 11524     01E8  00D6               	movwf	??_USBStdFeatureReqHandler
 11525     01E9  3002               	movlw	2
 11526     01EA  0256               	subwf	??_USBStdFeatureReqHandler,w
 11527     01EB  1803               	skipnc
 11528     01EC  0008               	return
 11529     01ED  3020               	movlw	32
 11530     01EE  066C               	xorwf	_USBDeviceState,w
 11531     01EF  1D03               	btfss	3,2
 11532     01F0  0008               	return
 11533                           
 11534                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 11535     01F1  0021               	movlb	1	; select bank1
 11536     01F2  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11537                           
 11538                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 11539     01F3  0020               	movlb	0	; select bank0
 11540     01F4  1BC4               	btfsc	68,7	;volatile
 11541     01F5  2A05               	goto	i1l4129
 11542                           
 11543                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 11544     01F6  0844               	movf	68,w	;volatile
 11545     01F7  390F               	andlw	15
 11546     01F8  0709               	addwf	9,w
 11547     01F9  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11548     01FA  0086               	movwf	6
 11549     01FB  3001               	movlw	1	; select bank2/3
 11550     01FC  0087               	movwf	7
 11551     01FD  3F40               	moviw [0]fsr1
 11552     01FE  00DB               	movwf	USBStdFeatureReqHandler@p
 11553     01FF  3F41               	moviw [1]fsr1
 11554     0200  00DC               	movwf	USBStdFeatureReqHandler@p+1
 11555                           
 11556                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 11557     0201  0844               	movf	68,w	;volatile
 11558     0202  390F               	andlw	15
 11559     0203  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11560     0204  2A12               	goto	L7
 11561     0205                     i1l4129:	
 11562                           ;usb/usb_device.c: 2797:         }
 11563                           
 11564                           
 11565                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 11566     0205  0844               	movf	68,w	;volatile
 11567     0206  390F               	andlw	15
 11568     0207  0709               	addwf	9,w
 11569     0208  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11570     0209  0086               	movwf	6
 11571     020A  0187               	clrf	7
 11572     020B  3F40               	moviw [0]fsr1
 11573     020C  00DB               	movwf	USBStdFeatureReqHandler@p
 11574     020D  3F41               	moviw [1]fsr1
 11575     020E  00DC               	movwf	USBStdFeatureReqHandler@p+1
 11576                           
 11577                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 11578     020F  0844               	movf	68,w	;volatile
 11579     0210  390F               	andlw	15
 11580     0211  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11581     0212                     L7:
 11582     0212  0086               	movwf	6
 11583     0213  3001               	movlw	1	; select bank2/3
 11584     0214  0087               	movwf	7
 11585     0215  0801               	movf	1,w
 11586     0216  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 11587                           
 11588                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 11589     0217  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 11590     0218  2A23               	goto	i1l4135
 11591                           
 11592                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 11593     0219  30FB               	movlw	251
 11594     021A  00D6               	movwf	??_USBStdFeatureReqHandler
 11595     021B  30FF               	movlw	255
 11596     021C  00D7               	movwf	??_USBStdFeatureReqHandler+1
 11597     021D  085B               	movf	USBStdFeatureReqHandler@p,w
 11598     021E  0556               	andwf	??_USBStdFeatureReqHandler,w
 11599     021F  00DB               	movwf	USBStdFeatureReqHandler@p
 11600     0220  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11601     0221  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 11602     0222  2A28               	goto	L8
 11603     0223                     i1l4135:	
 11604                           ;usb/usb_device.c: 2811:             }
 11605                           
 11606                           
 11607                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 11608     0223  3004               	movlw	4
 11609     0224  045B               	iorwf	USBStdFeatureReqHandler@p,w
 11610     0225  00DB               	movwf	USBStdFeatureReqHandler@p
 11611     0226  3000               	movlw	0
 11612     0227  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 11613     0228                     L8:
 11614     0228  00DC               	movwf	USBStdFeatureReqHandler@p+1
 11615                           
 11616                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 11617     0229  1BC4               	btfsc	68,7	;volatile
 11618     022A  2A37               	goto	i1l4141
 11619                           
 11620                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 11621     022B  0844               	movf	68,w	;volatile
 11622     022C  390F               	andlw	15
 11623     022D  0709               	addwf	9,w
 11624     022E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11625     022F  0086               	movwf	6
 11626     0230  3001               	movlw	1	; select bank2/3
 11627     0231  0087               	movwf	7
 11628     0232  085B               	movf	USBStdFeatureReqHandler@p,w
 11629     0233  3FC0               	movwi [0]fsr1
 11630     0234  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11631     0235  3FC1               	movwi [1]fsr1
 11632                           
 11633                           ;usb/usb_device.c: 2823:         }
 11634     0236  2A41               	goto	i1l4143
 11635     0237                     i1l4141:
 11636                           
 11637                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 11638     0237  0844               	movf	68,w	;volatile
 11639     0238  390F               	andlw	15
 11640     0239  0709               	addwf	9,w
 11641     023A  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11642     023B  0086               	movwf	6
 11643     023C  0187               	clrf	7
 11644     023D  085B               	movf	USBStdFeatureReqHandler@p,w
 11645     023E  3FC0               	movwi [0]fsr1
 11646     023F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11647     0240  3FC1               	movwi [1]fsr1
 11648     0241                     i1l4143:
 11649                           
 11650                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 11651     0241  3003               	movlw	3
 11652     0242  0641               	xorwf	65,w	;volatile
 11653     0243  1D03               	btfss	3,2
 11654     0244  2A63               	goto	i1l4157
 11655                           
 11656                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 11657     0245  085B               	movf	USBStdFeatureReqHandler@p,w
 11658     0246  0086               	movwf	6
 11659     0247  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11660     0248  0087               	movwf	7
 11661     0249  1F81               	btfss	1,7
 11662     024A  2A58               	goto	i1l4153
 11663                           
 11664                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 11665     024B  1BC4               	btfsc	68,7	;volatile
 11666     024C  2A51               	goto	i1l4151
 11667                           
 11668                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 11669     024D  0844               	movf	68,w	;volatile
 11670     024E  390F               	andlw	15
 11671     024F  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11672     0250  2A54               	goto	L9
 11673     0251                     i1l4151:	
 11674                           ;usb/usb_device.c: 2839:                 }
 11675                           
 11676                           
 11677                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 11678     0251  0844               	movf	68,w	;volatile
 11679     0252  390F               	andlw	15
 11680     0253  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11681     0254                     L9:
 11682     0254  0086               	movwf	6
 11683     0255  3001               	movlw	1	; select bank2/3
 11684     0256  0087               	movwf	7
 11685     0257  1481               	bsf	1,1
 11686     0258                     i1l4153:
 11687                           
 11688                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 11689     0258  085B               	movf	USBStdFeatureReqHandler@p,w
 11690     0259  0086               	movwf	6
 11691     025A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11692     025B  0087               	movwf	7
 11693     025C  1501               	bsf	1,2
 11694                           
 11695                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 11696     025D  085B               	movf	USBStdFeatureReqHandler@p,w
 11697     025E  0086               	movwf	6
 11698     025F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11699     0260  0087               	movwf	7
 11700     0261  1781               	bsf	1,7
 11701                           
 11702                           ;usb/usb_device.c: 2849:         }
 11703     0262  0008               	return
 11704     0263                     i1l4157:
 11705                           
 11706                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 11707     0263  3004               	movlw	4
 11708     0264  065B               	xorwf	USBStdFeatureReqHandler@p,w
 11709     0265  00DB               	movwf	USBStdFeatureReqHandler@p
 11710     0266  3000               	movlw	0
 11711     0267  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 11712     0268  00DC               	movwf	USBStdFeatureReqHandler@p+1
 11713                           
 11714                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 11715     0269  085B               	movf	USBStdFeatureReqHandler@p,w
 11716     026A  0086               	movwf	6
 11717     026B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11718     026C  0087               	movwf	7
 11719     026D  1F81               	btfss	1,7
 11720     026E  2A8C               	goto	i1l4167
 11721                           
 11722                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 11723     026F  307F               	movlw	127
 11724     0270  00D6               	movwf	??_USBStdFeatureReqHandler
 11725     0271  085B               	movf	USBStdFeatureReqHandler@p,w
 11726     0272  0086               	movwf	6
 11727     0273  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11728     0274  0087               	movwf	7
 11729     0275  0856               	movf	??_USBStdFeatureReqHandler,w
 11730     0276  0581               	andwf	1,f
 11731                           
 11732                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 11733     0277  085B               	movf	USBStdFeatureReqHandler@p,w
 11734     0278  0086               	movwf	6
 11735     0279  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11736     027A  0087               	movwf	7
 11737     027B  1701               	bsf	1,6
 11738                           
 11739                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 11740     027C  3005               	movlw	5
 11741     027D  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11742     027E  3000               	movlw	0
 11743     027F  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11744     0280  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11745     0281  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11746     0282  085B               	movf	USBStdFeatureReqHandler@p,w
 11747     0283  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11748     0284  3002               	movlw	2
 11749     0285  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11750     0286  3000               	movlw	0
 11751     0287  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11752     0288  3194  24AA  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11753                           
 11754                           ;usb/usb_device.c: 2864:                 }
 11755     028B  2A91               	goto	i1l4169
 11756     028C                     i1l4167:
 11757                           
 11758                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 11759     028C  085B               	movf	USBStdFeatureReqHandler@p,w
 11760     028D  0086               	movwf	6
 11761     028E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11762     028F  0087               	movwf	7
 11763     0290  1701               	bsf	1,6
 11764     0291                     i1l4169:
 11765                           
 11766                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 11767     0291  3004               	movlw	4
 11768     0292  0020               	movlb	0	; select bank0
 11769     0293  065B               	xorwf	USBStdFeatureReqHandler@p,w
 11770     0294  00DB               	movwf	USBStdFeatureReqHandler@p
 11771     0295  3000               	movlw	0
 11772     0296  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 11773     0297  00DC               	movwf	USBStdFeatureReqHandler@p+1
 11774                           
 11775                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 11776     0298  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 11777     0299  2AA0               	goto	i1l728
 11778     029A  085B               	movf	USBStdFeatureReqHandler@p,w
 11779     029B  0086               	movwf	6
 11780     029C  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11781     029D  0087               	movwf	7
 11782     029E  1F81               	btfss	1,7
 11783     029F  2AC5               	goto	i1l4181
 11784     02A0                     i1l728:
 11785                           
 11786                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 11787     02A0  1BC4               	btfsc	68,7	;volatile
 11788     02A1  2AA6               	goto	i1l4177
 11789                           
 11790                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 11791     02A2  0844               	movf	68,w	;volatile
 11792     02A3  390F               	andlw	15
 11793     02A4  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11794     02A5  2AA9               	goto	L10
 11795     02A6                     i1l4177:	
 11796                           ;usb/usb_device.c: 2884:                     }
 11797                           
 11798                           
 11799                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 11800     02A6  0844               	movf	68,w	;volatile
 11801     02A7  390F               	andlw	15
 11802     02A8  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11803     02A9                     L10:
 11804     02A9  0086               	movwf	6
 11805     02AA  3001               	movlw	1	; select bank2/3
 11806     02AB  0087               	movwf	7
 11807     02AC  1081               	bcf	1,1
 11808                           
 11809                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 11810                           
 11811                           ;usb/usb_device.c: 2888:                     }
 11812     02AD  303B               	movlw	59
 11813     02AE  00D6               	movwf	??_USBStdFeatureReqHandler
 11814     02AF  085B               	movf	USBStdFeatureReqHandler@p,w
 11815     02B0  0086               	movwf	6
 11816     02B1  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11817     02B2  0087               	movwf	7
 11818     02B3  0856               	movf	??_USBStdFeatureReqHandler,w
 11819     02B4  0581               	andwf	1,f
 11820                           
 11821                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 11822     02B5  3005               	movlw	5
 11823     02B6  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11824     02B7  3000               	movlw	0
 11825     02B8  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11826     02B9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11827     02BA  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11828     02BB  085B               	movf	USBStdFeatureReqHandler@p,w
 11829     02BC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11830     02BD  3002               	movlw	2
 11831     02BE  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11832     02BF  3000               	movlw	0
 11833     02C0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11834     02C1  3194  24AA  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11835                           
 11836                           ;usb/usb_device.c: 2894:                 }
 11837     02C4  2ACD               	goto	i1l4183
 11838     02C5                     i1l4181:
 11839                           
 11840                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 11841     02C5  303B               	movlw	59
 11842     02C6  00D6               	movwf	??_USBStdFeatureReqHandler
 11843     02C7  085B               	movf	USBStdFeatureReqHandler@p,w
 11844     02C8  0086               	movwf	6
 11845     02C9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 11846     02CA  0087               	movwf	7
 11847     02CB  0856               	movf	??_USBStdFeatureReqHandler,w
 11848     02CC  0581               	andwf	1,f
 11849     02CD                     i1l4183:
 11850                           
 11851                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 11852     02CD  0020               	movlb	0	; select bank0
 11853     02CE  0844               	movf	68,w	;volatile
 11854     02CF  390F               	andlw	15
 11855     02D0  3E98               	addlw	152
 11856     02D1  00D6               	movwf	??_USBStdFeatureReqHandler
 11857     02D2  01D7               	clrf	??_USBStdFeatureReqHandler+1
 11858     02D3  300E               	movlw	14
 11859     02D4  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 11860     02D5  0856               	movf	??_USBStdFeatureReqHandler,w
 11861     02D6  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 11862     02D7  0857               	movf	??_USBStdFeatureReqHandler+1,w
 11863     02D8  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 11864                           
 11865                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 11866     02D9  30FE               	movlw	254
 11867     02DA  00D6               	movwf	??_USBStdFeatureReqHandler
 11868     02DB  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 11869     02DC  0086               	movwf	6
 11870     02DD  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 11871     02DE  0087               	movwf	7
 11872     02DF  0856               	movf	??_USBStdFeatureReqHandler,w
 11873     02E0  0581               	andwf	1,f
 11874     02E1  0008               	return
 11875     02E2                     __end_of_USBStdFeatureReqHandler:
 11876                           
 11877                           	psect	text59
 11878     14AA                     __ptext59:	
 11879 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 11880 ;; Defined at:
 11881 ;;		line 66 in file "usb/usb_events.c"
 11882 ;; Parameters:    Size  Location     Type
 11883 ;;  event           2    0[BANK0 ] enum E238
 11884 ;;  pdata           2    2[BANK0 ] PTR void 
 11885 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 11886 ;;		 -> BDT(32), 
 11887 ;;  size            2    4[BANK0 ] unsigned short 
 11888 ;; Auto vars:     Size  Location     Type
 11889 ;;		None
 11890 ;; Return value:  Size  Location     Type
 11891 ;;                  1    wreg      _Bool 
 11892 ;; Registers used:
 11893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11894 ;; Tracked objects:
 11895 ;;		On entry : 1F/0
 11896 ;;		On exit  : 0/0
 11897 ;;		Unchanged: 0/0
 11898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11899 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11902 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;Total ram usage:        6 bytes
 11904 ;; Hardware stack levels used: 1
 11905 ;; Hardware stack levels required when called: 3
 11906 ;; This function calls:
 11907 ;;		_APP_KeyboardInit
 11908 ;;		_USBCheckHIDRequest
 11909 ;; This function is called by:
 11910 ;;		_USBDeviceTasks
 11911 ;;		_USBStdSetCfgHandler
 11912 ;;		_USBSuspend
 11913 ;;		_USBWakeFromSuspend
 11914 ;;		_USBCtrlTrfSetupHandler
 11915 ;;		_USBCheckStdRequest
 11916 ;;		_USBStdFeatureReqHandler
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920     14AA                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 11921                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 11922                           
 11923                           
 11924                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11928     14AA  2CBF               	goto	i1l3861
 11929     14AB                     i1l3849:
 11930                           
 11931                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 11932     14AB  0A65               	incf	_SOFCounter,w	;volatile
 11933     14AC  307F               	movlw	127
 11934     14AD  1903               	skipnz
 11935     14AE  0666               	xorwf	_SOFCounter+1,w	;volatile
 11936     14AF  1903               	btfsc	3,2
 11937     14B0  2CB6               	goto	i1l3853
 11938                           
 11939                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 11940     14B1  3001               	movlw	1
 11941     14B2  07E5               	addwf	_SOFCounter,f	;volatile
 11942     14B3  3000               	movlw	0
 11943     14B4  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 11944                           
 11945                           ;usb/usb_events.c: 80:             }
 11946     14B5  0008               	return
 11947     14B6                     i1l3853:
 11948                           
 11949                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 11950     14B6  01E5               	clrf	_SOFCounter	;volatile
 11951     14B7  01E6               	clrf	_SOFCounter+1	;volatile
 11952     14B8  0008               	return
 11953     14B9                     i1l3855:
 11954                           
 11955                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 11956     14B9  3187  27AD         	fcall	_APP_KeyboardInit
 11957                           
 11958                           ;usb/usb_events.c: 115:             break;
 11959     14BB  0008               	return
 11960     14BC                     i1l3857:
 11961                           
 11962                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 11963     14BC  318B  23F2         	fcall	_USBCheckHIDRequest
 11964                           
 11965                           ;usb/usb_events.c: 124:             break;
 11966     14BE  0008               	return
 11967     14BF                     i1l3861:
 11968                           
 11969                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 11970                           ; Switch size 1, requested type "simple"
 11971                           ; Number of cases is 2, Range of values is 0 to 127
 11972                           ; switch strategies available:
 11973                           ; Name         Instructions Cycles
 11974                           ; simple_byte            7     4 (average)
 11975                           ; direct_byte          262     6 (fixed)
 11976                           ; jumptable            260     6 (fixed)
 11977                           ;	Chosen strategy is simple_byte
 11978     14BF  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 11979     14C0  3A00               	xorlw	0	; case 0
 11980     14C1  1903               	skipnz
 11981     14C2  2CC7               	goto	i1l6025
 11982     14C3  3A7F               	xorlw	127	; case 127
 11983     14C4  1903               	skipnz
 11984     14C5  2CE1               	goto	i1l6027
 11985     14C6  2CE6               	goto	i1l818
 11986     14C7                     i1l6025:
 11987                           
 11988                           ; Switch size 1, requested type "simple"
 11989                           ; Number of cases is 8, Range of values is 1 to 117
 11990                           ; switch strategies available:
 11991                           ; Name         Instructions Cycles
 11992                           ; simple_byte           25    13 (average)
 11993                           ; direct_byte          243     9 (fixed)
 11994                           ; jumptable            263     9 (fixed)
 11995                           ;	Chosen strategy is simple_byte
 11996     14C7  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 11997     14C8  3A01               	xorlw	1	; case 1
 11998     14C9  1903               	skipnz
 11999     14CA  2CB9               	goto	i1l3855
 12000     14CB  3A03               	xorlw	3	; case 2
 12001     14CC  1903               	skipnz
 12002     14CD  2CE6               	goto	i1l818
 12003     14CE  3A01               	xorlw	1	; case 3
 12004     14CF  1903               	skipnz
 12005     14D0  2CBC               	goto	i1l3857
 12006     14D1  3A06               	xorlw	6	; case 5
 12007     14D2  1903               	skipnz
 12008     14D3  2CE6               	goto	i1l818
 12009     14D4  3A77               	xorlw	119	; case 114
 12010     14D5  1903               	skipnz
 12011     14D6  2CE6               	goto	i1l818
 12012     14D7  3A01               	xorlw	1	; case 115
 12013     14D8  1903               	skipnz
 12014     14D9  2CAB               	goto	i1l3849
 12015     14DA  3A07               	xorlw	7	; case 116
 12016     14DB  1903               	skipnz
 12017     14DC  2CE6               	goto	i1l818
 12018     14DD  3A01               	xorlw	1	; case 117
 12019     14DE  1903               	skipnz
 12020     14DF  2CE6               	goto	i1l818
 12021     14E0  2CE6               	goto	i1l818
 12022     14E1                     i1l6027:
 12023                           
 12024                           ; Switch size 1, requested type "simple"
 12025                           ; Number of cases is 1, Range of values is 255 to 255
 12026                           ; switch strategies available:
 12027                           ; Name         Instructions Cycles
 12028                           ; simple_byte            4     3 (average)
 12029                           ; direct_byte            7     5 (fixed)
 12030                           ; jumptable            263     9 (fixed)
 12031                           ;	Chosen strategy is simple_byte
 12032     14E1  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12033     14E2  3AFF               	xorlw	255	; case 255
 12034     14E3  1903               	skipnz
 12035     14E4  2CE6               	goto	i1l818
 12036     14E5  2CE6               	goto	i1l818
 12037     14E6                     i1l818:
 12038     14E6  0008               	return
 12039     14E7                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12040                           
 12041                           	psect	text60
 12042     0BF2                     __ptext60:	
 12043 ;; *************** function _USBCheckHIDRequest *****************
 12044 ;; Defined at:
 12045 ;;		line 161 in file "usb/usb_device_hid.c"
 12046 ;; Parameters:    Size  Location     Type
 12047 ;;		None
 12048 ;; Auto vars:     Size  Location     Type
 12049 ;;		None
 12050 ;; Return value:  Size  Location     Type
 12051 ;;                  1    wreg      void 
 12052 ;; Registers used:
 12053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12054 ;; Tracked objects:
 12055 ;;		On entry : 1F/0
 12056 ;;		On exit  : 1C/0
 12057 ;;		Unchanged: 0/0
 12058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12063 ;;Total ram usage:        0 bytes
 12064 ;; Hardware stack levels used: 1
 12065 ;; Hardware stack levels required when called: 1
 12066 ;; This function calls:
 12067 ;;		_USBHIDCBSetIdleRateHandler
 12068 ;;		_USBHIDCBSetReportHandler
 12069 ;; This function is called by:
 12070 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12071 ;; This function uses a non-reentrant model
 12072 ;;
 12073                           
 12074     0BF2                     _USBCheckHIDRequest:	
 12075                           ;psect for function _USBCheckHIDRequest
 12076                           
 12077                           
 12078                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12079                           
 12080                           ;incstack = 0
 12081                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12082     0BF2  0840               	movf	64,w	;volatile
 12083     0BF3  391F               	andlw	31
 12084     0BF4  3A01               	xorlw	1
 12085     0BF5  1D03               	btfss	3,2
 12086     0BF6  0008               	return
 12087                           
 12088                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12089     0BF7  0844               	movf	68,w	;volatile
 12090     0BF8  1D03               	btfss	3,2
 12091     0BF9  0008               	return
 12092                           
 12093                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12094     0BFA  3006               	movlw	6
 12095     0BFB  0641               	xorwf	65,w	;volatile
 12096     0BFC  1903               	btfsc	3,2
 12097     0BFD  2C17               	goto	i1l3783
 12098     0BFE  2C22               	goto	i1l3785
 12099     0BFF                     i1l3771:
 12100                           
 12101                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12102     0BFF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12103     0C00  1D03               	btfss	3,2
 12104     0C01  2C22               	goto	i1l3785
 12105                           
 12106                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12107     0C02  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12108     0C03  0021               	movlb	1	; select bank1
 12109     0C04  00E8               	movwf	_inPipes^(0+128)	;volatile
 12110     0C05  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12111     0C06  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 12112     0C07  3000               	movlw	0
 12113     0C08  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12114     0C09  3009               	movlw	9
 12115     0C0A  2C13               	goto	L12
 12116     0C0B                     i1l3777:
 12117                           
 12118                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12119     0C0B  3000               	movlw	low (_hid_rpt01| (0+32768))
 12120     0C0C  0021               	movlb	1	; select bank1
 12121     0C0D  00E8               	movwf	_inPipes^(0+128)	;volatile
 12122     0C0E  3098               	movlw	high (_hid_rpt01| (0+32768))
 12123     0C0F  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 12124     0C10  3000               	movlw	0
 12125     0C11  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12126     0C12  303F               	movlw	63
 12127     0C13                     L12:
 12128     0C13  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12129     0C14  30C0               	movlw	192
 12130     0C15  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12131                           
 12132                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12133     0C16  2C22               	goto	i1l3785
 12134     0C17                     i1l3783:
 12135     0C17  0843               	movf	67,w	;volatile
 12136                           
 12137                           ; Switch size 1, requested type "simple"
 12138                           ; Number of cases is 3, Range of values is 33 to 35
 12139                           ; switch strategies available:
 12140                           ; Name         Instructions Cycles
 12141                           ; simple_byte           10     6 (average)
 12142                           ; direct_byte           15     9 (fixed)
 12143                           ; jumptable            263     9 (fixed)
 12144                           ;	Chosen strategy is simple_byte
 12145     0C18  3A21               	xorlw	33	; case 33
 12146     0C19  1903               	skipnz
 12147     0C1A  2BFF               	goto	i1l3771
 12148     0C1B  3A03               	xorlw	3	; case 34
 12149     0C1C  1903               	skipnz
 12150     0C1D  2C0B               	goto	i1l3777
 12151     0C1E  3A01               	xorlw	1	; case 35
 12152     0C1F  1903               	skipnz
 12153     0C20  2C22               	goto	i1l3785
 12154     0C21  2C22               	goto	i1l3785
 12155     0C22                     i1l3785:
 12156                           
 12157                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12158     0C22  0020               	movlb	0	; select bank0
 12159     0C23  0E40               	swapf	64,w	;volatile
 12160     0C24  0C89               	rrf	9,f
 12161     0C25  3903               	andlw	3
 12162     0C26  3A01               	xorlw	1
 12163     0C27  1D03               	btfss	3,2
 12164     0C28  0008               	return
 12165     0C29  2C5B               	goto	i1l3811
 12166     0C2A                     i1l3789:
 12167                           
 12168                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12169     0C2A  3190  20C2         	fcall	_USBHIDCBSetReportHandler
 12170                           
 12171                           ;usb/usb_device_hid.c: 225:             break;
 12172     0C2C  0008               	return
 12173     0C2D                     i1l3791:
 12174                           
 12175                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12176     0C2D  3069               	movlw	low _idle_rate
 12177     0C2E  0021               	movlb	1	; select bank1
 12178     0C2F  00E8               	movwf	_inPipes^(0+128)	;volatile
 12179     0C30  3001               	movlw	high _idle_rate
 12180     0C31  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12181     0C32  3000               	movlw	0
 12182     0C33  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12183     0C34  3001               	movlw	1
 12184     0C35  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12185     0C36  30C1               	movlw	193
 12186     0C37  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12187                           
 12188                           ;usb/usb_device_hid.c: 231:             break;
 12189     0C38  0008               	return
 12190     0C39                     i1l3797:
 12191                           
 12192                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12193     0C39  3080               	movlw	128
 12194     0C3A  0021               	movlb	1	; select bank1
 12195     0C3B  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12196                           
 12197                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12198     0C3C  0020               	movlb	0	; select bank0
 12199     0C3D  0843               	movf	67,w	;volatile
 12200     0C3E  0022               	movlb	2	; select bank2
 12201     0C3F  00E9               	movwf	_idle_rate^(0+256)
 12202                           
 12203                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12204     0C40  0869               	movf	_idle_rate^(0+256),w
 12205     0C41  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12206     0C42  0020               	movlb	0	; select bank0
 12207     0C43  0842               	movf	66,w	;volatile
 12208     0C44  3190  20B5         	fcall	_USBHIDCBSetIdleRateHandler
 12209                           
 12210                           ;usb/usb_device_hid.c: 236:             break;
 12211     0C46  0008               	return
 12212     0C47                     i1l3801:
 12213                           
 12214                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12215     0C47  3068               	movlw	low _active_protocol
 12216     0C48  0021               	movlb	1	; select bank1
 12217     0C49  00E8               	movwf	_inPipes^(0+128)	;volatile
 12218     0C4A  3001               	movlw	high _active_protocol
 12219     0C4B  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12220     0C4C  3000               	movlw	0
 12221     0C4D  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12222     0C4E  3001               	movlw	1
 12223     0C4F  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12224     0C50  3081               	movlw	129
 12225     0C51  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12226                           
 12227                           ;usb/usb_device_hid.c: 242:             break;
 12228     0C52  0008               	return
 12229     0C53                     i1l3807:
 12230                           
 12231                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12232     0C53  3080               	movlw	128
 12233     0C54  0021               	movlb	1	; select bank1
 12234     0C55  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12235                           
 12236                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12237     0C56  0020               	movlb	0	; select bank0
 12238     0C57  0842               	movf	66,w	;volatile
 12239     0C58  0022               	movlb	2	; select bank2
 12240     0C59  00E8               	movwf	_active_protocol^(0+256)
 12241                           
 12242                           ;usb/usb_device_hid.c: 246:             break;
 12243     0C5A  0008               	return
 12244     0C5B                     i1l3811:
 12245     0C5B  0841               	movf	65,w	;volatile
 12246                           
 12247                           ; Switch size 1, requested type "simple"
 12248                           ; Number of cases is 6, Range of values is 1 to 11
 12249                           ; switch strategies available:
 12250                           ; Name         Instructions Cycles
 12251                           ; simple_byte           19    10 (average)
 12252                           ; direct_byte           31     9 (fixed)
 12253                           ; jumptable            263     9 (fixed)
 12254                           ;	Chosen strategy is simple_byte
 12255     0C5C  3A01               	xorlw	1	; case 1
 12256     0C5D  1903               	skipnz
 12257     0C5E  2C6F               	goto	i1l764
 12258     0C5F  3A03               	xorlw	3	; case 2
 12259     0C60  1903               	skipnz
 12260     0C61  2C2D               	goto	i1l3791
 12261     0C62  3A01               	xorlw	1	; case 3
 12262     0C63  1903               	skipnz
 12263     0C64  2C47               	goto	i1l3801
 12264     0C65  3A0A               	xorlw	10	; case 9
 12265     0C66  1903               	skipnz
 12266     0C67  2C2A               	goto	i1l3789
 12267     0C68  3A03               	xorlw	3	; case 10
 12268     0C69  1903               	skipnz
 12269     0C6A  2C39               	goto	i1l3797
 12270     0C6B  3A01               	xorlw	1	; case 11
 12271     0C6C  1903               	skipnz
 12272     0C6D  2C53               	goto	i1l3807
 12273     0C6E  2C6F               	goto	i1l764
 12274     0C6F                     i1l764:
 12275     0C6F  0008               	return
 12276     0C70                     __end_of_USBCheckHIDRequest:
 12277                           
 12278                           	psect	text61
 12279     10C2                     __ptext61:	
 12280 ;; *************** function _USBHIDCBSetReportHandler *****************
 12281 ;; Defined at:
 12282 ;;		line 531 in file "app_device_keyboard.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;		None
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;		None
 12287 ;; Return value:  Size  Location     Type
 12288 ;;                  1    wreg      void 
 12289 ;; Registers used:
 12290 ;;		wreg
 12291 ;; Tracked objects:
 12292 ;;		On entry : 1F/0
 12293 ;;		On exit  : 1F/2
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;Total ram usage:        0 bytes
 12301 ;; Hardware stack levels used: 1
 12302 ;; This function calls:
 12303 ;;		Nothing
 12304 ;; This function is called by:
 12305 ;;		_USBCheckHIDRequest
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309     10C2                     _USBHIDCBSetReportHandler:	
 12310                           ;psect for function _USBHIDCBSetReportHandler
 12311                           
 12312                           
 12313                           ;app_device_keyboard.c: 535:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 12314                           
 12315                           ;incstack = 0
 12316                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 12317     10C2  3048               	movlw	72
 12318     10C3  0022               	movlb	2	; select bank2
 12319     10C4  00A1               	movwf	_outPipes^(0+256)	;volatile
 12320     10C5  3000               	movlw	0
 12321     10C6  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 12322     10C7  3008               	movlw	8
 12323     10C8  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 12324     10C9  301F               	movlw	high _USBHIDCBSetReportComplete
 12325     10CA  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 12326     10CB  307B               	movlw	low _USBHIDCBSetReportComplete
 12327     10CC  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 12328     10CD  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 12329     10CE  0008               	return
 12330     10CF                     __end_of_USBHIDCBSetReportHandler:
 12331                           
 12332                           	psect	text62
 12333     10B5                     __ptext62:	
 12334 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 12335 ;; Defined at:
 12336 ;;		line 542 in file "app_device_keyboard.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  reportID        1    wreg     unsigned char 
 12339 ;;  newIdleRate     1    0[COMMON] unsigned char 
 12340 ;; Auto vars:     Size  Location     Type
 12341 ;;  reportID        1    3[COMMON] unsigned char 
 12342 ;; Return value:  Size  Location     Type
 12343 ;;                  1    wreg      void 
 12344 ;; Registers used:
 12345 ;;		wreg, status,2, status,0
 12346 ;; Tracked objects:
 12347 ;;		On entry : 1F/0
 12348 ;;		On exit  : 1D/0
 12349 ;;		Unchanged: 0/0
 12350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12351 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12352 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12353 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12354 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;Total ram usage:        4 bytes
 12356 ;; Hardware stack levels used: 1
 12357 ;; This function calls:
 12358 ;;		Nothing
 12359 ;; This function is called by:
 12360 ;;		_USBCheckHIDRequest
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364     10B5                     _USBHIDCBSetIdleRateHandler:	
 12365                           ;psect for function _USBHIDCBSetIdleRateHandler
 12366                           
 12367                           
 12368                           ;incstack = 0
 12369                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 12370                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 12371     10B5  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 12372                           
 12373                           ;app_device_keyboard.c: 546:     if (reportID == 0) {
 12374     10B6  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 12375     10B7  1D03               	btfss	3,2
 12376     10B8  0008               	return
 12377                           
 12378                           ;app_device_keyboard.c: 547:         keyboardIdleRate = newIdleRate;
 12379     10B9  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 12380     10BA  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 12381     10BB  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 12382     10BC  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 12383     10BD  0022               	movlb	2	; select bank2
 12384     10BE  00B8               	movwf	_keyboardIdleRate^(0+256)
 12385     10BF  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 12386     10C0  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 12387     10C1  0008               	return
 12388     10C2                     __end_of_USBHIDCBSetIdleRateHandler:
 12389                           
 12390                           	psect	text63
 12391     07AD                     __ptext63:	
 12392 ;; *************** function _APP_KeyboardInit *****************
 12393 ;; Defined at:
 12394 ;;		line 309 in file "app_device_keyboard.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;		None
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;		None
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  1    wreg      void 
 12401 ;; Registers used:
 12402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 1F/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;Total ram usage:        0 bytes
 12413 ;; Hardware stack levels used: 1
 12414 ;; Hardware stack levels required when called: 2
 12415 ;; This function calls:
 12416 ;;		_USBEnableEndpoint
 12417 ;;		i1_GenericQueue_Init
 12418 ;;		i1_USBTransferOnePacket
 12419 ;; This function is called by:
 12420 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424     07AD                     _APP_KeyboardInit:	
 12425                           ;psect for function _APP_KeyboardInit
 12426                           
 12427                           
 12428                           ;app_device_keyboard.c: 310:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 12429                           
 12430                           ;incstack = 0
 12431                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12432     07AD  3030               	movlw	48
 12433     07AE  00F0               	movwf	i1GenericQueue_Init@q
 12434     07AF  3023               	movlw	35
 12435     07B0  00F1               	movwf	i1GenericQueue_Init@q+1
 12436     07B1  3001               	movlw	1
 12437     07B2  00F2               	movwf	i1GenericQueue_Init@element_size
 12438     07B3  3000               	movlw	0
 12439     07B4  00F3               	movwf	i1GenericQueue_Init@element_size+1
 12440     07B5  3192  22EF  3187   	fcall	i1_GenericQueue_Init
 12441                           
 12442                           ;app_device_keyboard.c: 311:     keyboard.modifiers.value = 0;
 12443     07B8  308F               	movlw	143
 12444     07B9  0086               	movwf	6
 12445     07BA  3023               	movlw	35
 12446     07BB  0087               	movwf	7
 12447     07BC  0181               	clrf	1
 12448                           
 12449                           ;app_device_keyboard.c: 312:     keyboard.leds.value = 0;
 12450     07BD  3090               	movlw	144
 12451     07BE  0086               	movwf	6
 12452     07BF  3023               	movlw	35
 12453     07C0  0087               	movwf	7
 12454     07C1  0181               	clrf	1
 12455                           
 12456                           ;app_device_keyboard.c: 315:     keyboard.lastINTransmission = 0;
 12457     07C2  302C               	movlw	44
 12458     07C3  0086               	movwf	6
 12459     07C4  3023               	movlw	35
 12460     07C5  0087               	movwf	7
 12461     07C6  3000               	movlw	0
 12462     07C7  3FC0               	movwi [0]fsr1
 12463     07C8  3FC1               	movwi [1]fsr1
 12464                           
 12465                           ;app_device_keyboard.c: 318:     keyboardIdleRate = 250;
 12466     07C9  30FA               	movlw	250
 12467     07CA  0022               	movlb	2	; select bank2
 12468     07CB  00B8               	movwf	_keyboardIdleRate^(0+256)
 12469     07CC  3000               	movlw	0
 12470     07CD  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 12471     07CE                     i1l899:	
 12472                           ;app_device_keyboard.c: 325:     }
 12473                           
 12474                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 12475                           
 12476                           
 12477                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 12478     07CE  0020               	movlb	0	; select bank0
 12479     07CF  0866               	movf	_SOFCounter+1,w	;volatile
 12480     07D0  0022               	movlb	2	; select bank2
 12481     07D1  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 12482     07D2  1D03               	skipz
 12483     07D3  2FD8               	goto	u283_25
 12484     07D4  0020               	movlb	0	; select bank0
 12485     07D5  0865               	movf	_SOFCounter,w	;volatile
 12486     07D6  0022               	movlb	2	; select bank2
 12487     07D7  0634               	xorwf	_OldSOFCount^(0+256),w
 12488     07D8                     u283_25:
 12489     07D8  1903               	btfsc	3,2
 12490     07D9  2FE3               	goto	i1l3825
 12491                           
 12492                           ;app_device_keyboard.c: 324:         OldSOFCount = SOFCounter;
 12493     07DA  0020               	movlb	0	; select bank0
 12494     07DB  0866               	movf	_SOFCounter+1,w	;volatile
 12495     07DC  0022               	movlb	2	; select bank2
 12496     07DD  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 12497     07DE  0020               	movlb	0	; select bank0
 12498     07DF  0865               	movf	_SOFCounter,w	;volatile
 12499     07E0  0022               	movlb	2	; select bank2
 12500     07E1  00B4               	movwf	_OldSOFCount^(0+256)
 12501     07E2  2FCE               	goto	i1l899
 12502     07E3                     i1l3825:
 12503                           
 12504                           ;app_device_keyboard.c: 328:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 12505     07E3  301E               	movlw	30
 12506     07E4  00F7               	movwf	USBEnableEndpoint@options
 12507     07E5  3001               	movlw	1
 12508     07E6  3192  22CF  3187   	fcall	_USBEnableEndpoint
 12509                           
 12510                           ;app_device_keyboard.c: 331:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 12511     07E9  01F0               	clrf	i1USBTransferOnePacket@dir
 12512     07EA  3020               	movlw	32
 12513     07EB  00F1               	movwf	i1USBTransferOnePacket@data
 12514     07EC  3001               	movlw	1
 12515     07ED  00F2               	movwf	i1USBTransferOnePacket@data+1
 12516     07EE  01F3               	clrf	i1USBTransferOnePacket@len
 12517     07EF  0AF3               	incf	i1USBTransferOnePacket@len,f
 12518     07F0  3001               	movlw	1
 12519     07F1  318C  2470         	fcall	i1_USBTransferOnePacket
 12520     07F3  302C               	movlw	44
 12521     07F4  0086               	movwf	6
 12522     07F5  3023               	movlw	35
 12523     07F6  0087               	movwf	7
 12524     07F7  3142               	addfsr 1,2
 12525     07F8  0870               	movf	?i1_USBTransferOnePacket,w
 12526     07F9  3FC0               	movwi [0]fsr1
 12527     07FA  0871               	movf	?i1_USBTransferOnePacket+1,w
 12528     07FB  3FC1               	movwi [1]fsr1
 12529     07FC  0008               	return
 12530     07FD                     __end_of_APP_KeyboardInit:
 12531                           
 12532                           	psect	text64
 12533     0C70                     __ptext64:	
 12534 ;; *************** function i1_USBTransferOnePacket *****************
 12535 ;; Defined at:
 12536 ;;		line 999 in file "usb/usb_device.c"
 12537 ;; Parameters:    Size  Location     Type
 12538 ;;  ep              1    wreg     unsigned char 
 12539 ;;  dir             1    0[COMMON] unsigned char 
 12540 ;;  data            2    1[COMMON] PTR unsigned char 
 12541 ;;		 -> inputReport(8), outputReport(1), 
 12542 ;;  len             1    3[COMMON] unsigned char 
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  ep              1    8[COMMON] unsigned char 
 12545 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 12546 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  2    0[COMMON] PTR void 
 12549 ;; Registers used:
 12550 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/2
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:       11 bytes
 12561 ;; Hardware stack levels used: 1
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_APP_KeyboardInit
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569     0C70                     i1_USBTransferOnePacket:	
 12570                           ;psect for function i1_USBTransferOnePacket
 12571                           
 12572                           
 12573                           ;incstack = 0
 12574                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 12575                           ;i1USBTransferOnePacket@ep stored from wreg
 12576     0C70  00F8               	movwf	i1USBTransferOnePacket@ep
 12577                           
 12578                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 12579     0C71  0870               	movf	i1USBTransferOnePacket@dir,w
 12580     0C72  1903               	btfsc	3,2
 12581     0C73  2C7C               	goto	i1l3733
 12582                           
 12583                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 12584     0C74  3578               	lslf	i1USBTransferOnePacket@ep,w
 12585     0C75  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12586     0C76  0086               	movwf	6
 12587     0C77  0187               	clrf	7
 12588     0C78  3F40               	moviw [0]fsr1
 12589     0C79  00F9               	movwf	i1USBTransferOnePacket@handle
 12590     0C7A  3F41               	moviw [1]fsr1
 12591     0C7B  2C84               	goto	L13
 12592     0C7C                     i1l3733:	
 12593                           ;usb/usb_device.c: 1008:     }
 12594                           
 12595                           
 12596                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 12597     0C7C  3578               	lslf	i1USBTransferOnePacket@ep,w
 12598     0C7D  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12599     0C7E  0086               	movwf	6
 12600     0C7F  3001               	movlw	1	; select bank2/3
 12601     0C80  0087               	movwf	7
 12602     0C81  3F40               	moviw [0]fsr1
 12603     0C82  00F9               	movwf	i1USBTransferOnePacket@handle
 12604     0C83  3F41               	moviw [1]fsr1
 12605     0C84                     L13:
 12606     0C84  00FA               	movwf	i1USBTransferOnePacket@handle+1
 12607                           
 12608                           ;usb/usb_device.c: 1017:     if(handle == 0)
 12609     0C85  0879               	movf	i1USBTransferOnePacket@handle,w
 12610     0C86  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 12611     0C87  1D03               	btfss	3,2
 12612     0C88  2C8C               	goto	i1l3741
 12613                           
 12614                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 12615     0C89  01F0               	clrf	?i1_USBTransferOnePacket
 12616     0C8A  01F1               	clrf	?i1_USBTransferOnePacket+1
 12617     0C8B  0008               	return
 12618     0C8C                     i1l3741:
 12619                           
 12620                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 12621     0C8C  30FF               	movlw	255
 12622     0C8D  0571               	andwf	i1USBTransferOnePacket@data,w
 12623     0C8E  00F4               	movwf	??i1_USBTransferOnePacket
 12624     0C8F  307F               	movlw	127
 12625     0C90  0572               	andwf	i1USBTransferOnePacket@data+1,w
 12626     0C91  00F5               	movwf	??i1_USBTransferOnePacket+1
 12627     0C92  0879               	movf	i1USBTransferOnePacket@handle,w
 12628     0C93  0086               	movwf	6
 12629     0C94  087A               	movf	i1USBTransferOnePacket@handle+1,w
 12630     0C95  0087               	movwf	7
 12631     0C96  3142               	addfsr 1,2
 12632     0C97  0874               	movf	??i1_USBTransferOnePacket,w
 12633     0C98  3FC0               	movwi [0]fsr1
 12634     0C99  0875               	movf	??i1_USBTransferOnePacket+1,w
 12635     0C9A  3FC1               	movwi [1]fsr1
 12636                           
 12637                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 12638     0C9B  0879               	movf	i1USBTransferOnePacket@handle,w
 12639     0C9C  3E01               	addlw	1
 12640     0C9D  00F4               	movwf	??i1_USBTransferOnePacket
 12641     0C9E  3000               	movlw	0
 12642     0C9F  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 12643     0CA0  00F5               	movwf	??i1_USBTransferOnePacket+1
 12644     0CA1  0874               	movf	??i1_USBTransferOnePacket,w
 12645     0CA2  0086               	movwf	6
 12646     0CA3  0875               	movf	??i1_USBTransferOnePacket+1,w
 12647     0CA4  0087               	movwf	7
 12648     0CA5  0873               	movf	i1USBTransferOnePacket@len,w
 12649     0CA6  0081               	movwf	1
 12650                           
 12651                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 12652     0CA7  3040               	movlw	64
 12653     0CA8  00F4               	movwf	??i1_USBTransferOnePacket
 12654     0CA9  0879               	movf	i1USBTransferOnePacket@handle,w
 12655     0CAA  0086               	movwf	6
 12656     0CAB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 12657     0CAC  0087               	movwf	7
 12658     0CAD  0874               	movf	??i1_USBTransferOnePacket,w
 12659     0CAE  0581               	andwf	1,f
 12660                           
 12661                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 12662     0CAF  0879               	movf	i1USBTransferOnePacket@handle,w
 12663     0CB0  0086               	movwf	6
 12664     0CB1  087A               	movf	i1USBTransferOnePacket@handle+1,w
 12665     0CB2  0087               	movwf	7
 12666     0CB3  1581               	bsf	1,3
 12667                           
 12668                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 12669     0CB4  0879               	movf	i1USBTransferOnePacket@handle,w
 12670     0CB5  0086               	movwf	6
 12671     0CB6  087A               	movf	i1USBTransferOnePacket@handle+1,w
 12672     0CB7  0087               	movwf	7
 12673     0CB8  1781               	bsf	1,7
 12674                           
 12675                           ;usb/usb_device.c: 1040:     if(dir != 0)
 12676     0CB9  0870               	movf	i1USBTransferOnePacket@dir,w
 12677     0CBA  1903               	btfsc	3,2
 12678     0CBB  2CD3               	goto	i1l3751
 12679                           
 12680                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 12681     0CBC  3578               	lslf	i1USBTransferOnePacket@ep,w
 12682     0CBD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12683     0CBE  0086               	movwf	6
 12684     0CBF  0187               	clrf	7
 12685     0CC0  3F40               	moviw [0]fsr1
 12686     0CC1  00F4               	movwf	??i1_USBTransferOnePacket
 12687     0CC2  3F41               	moviw [1]fsr1
 12688     0CC3  00F5               	movwf	??i1_USBTransferOnePacket+1
 12689     0CC4  3004               	movlw	4
 12690     0CC5  0674               	xorwf	??i1_USBTransferOnePacket,w
 12691     0CC6  00F6               	movwf	??i1_USBTransferOnePacket+2
 12692     0CC7  3000               	movlw	0
 12693     0CC8  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 12694     0CC9  00F7               	movwf	??i1_USBTransferOnePacket+3
 12695     0CCA  3578               	lslf	i1USBTransferOnePacket@ep,w
 12696     0CCB  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12697     0CCC  0086               	movwf	6
 12698     0CCD  0187               	clrf	7
 12699     0CCE  0876               	movf	??i1_USBTransferOnePacket+2,w
 12700     0CCF  3FC0               	movwi [0]fsr1
 12701     0CD0  0877               	movf	??i1_USBTransferOnePacket+3,w
 12702     0CD1  3FC1               	movwi [1]fsr1
 12703                           
 12704                           ;usb/usb_device.c: 1044:     }
 12705     0CD2  2CEB               	goto	i1l3753
 12706     0CD3                     i1l3751:
 12707                           
 12708                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 12709     0CD3  3578               	lslf	i1USBTransferOnePacket@ep,w
 12710     0CD4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12711     0CD5  0086               	movwf	6
 12712     0CD6  3001               	movlw	1	; select bank2/3
 12713     0CD7  0087               	movwf	7
 12714     0CD8  3F40               	moviw [0]fsr1
 12715     0CD9  00F4               	movwf	??i1_USBTransferOnePacket
 12716     0CDA  3F41               	moviw [1]fsr1
 12717     0CDB  00F5               	movwf	??i1_USBTransferOnePacket+1
 12718     0CDC  3004               	movlw	4
 12719     0CDD  0674               	xorwf	??i1_USBTransferOnePacket,w
 12720     0CDE  00F6               	movwf	??i1_USBTransferOnePacket+2
 12721     0CDF  3000               	movlw	0
 12722     0CE0  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 12723     0CE1  00F7               	movwf	??i1_USBTransferOnePacket+3
 12724     0CE2  3578               	lslf	i1USBTransferOnePacket@ep,w
 12725     0CE3  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12726     0CE4  0086               	movwf	6
 12727     0CE5  3001               	movlw	1	; select bank2/3
 12728     0CE6  0087               	movwf	7
 12729     0CE7  0876               	movf	??i1_USBTransferOnePacket+2,w
 12730     0CE8  3FC0               	movwi [0]fsr1
 12731     0CE9  0877               	movf	??i1_USBTransferOnePacket+3,w
 12732     0CEA  3FC1               	movwi [1]fsr1
 12733     0CEB                     i1l3753:
 12734                           
 12735                           ;usb/usb_device.c: 1050:     return (void*)handle;
 12736     0CEB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 12737     0CEC  00F1               	movwf	?i1_USBTransferOnePacket+1
 12738     0CED  0879               	movf	i1USBTransferOnePacket@handle,w
 12739     0CEE  00F0               	movwf	?i1_USBTransferOnePacket
 12740     0CEF  0008               	return
 12741     0CF0                     __end_ofi1_USBTransferOnePacket:
 12742                           
 12743                           	psect	text65
 12744     12EF                     __ptext65:	
 12745 ;; *************** function i1_GenericQueue_Init *****************
 12746 ;; Defined at:
 12747 ;;		line 4 in file "generic_queue.c"
 12748 ;; Parameters:    Size  Location     Type
 12749 ;;  q               2    0[COMMON] PTR struct .
 12750 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 12751 ;;  element_size    2    2[COMMON] unsigned int 
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;		None
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12758 ;; Tracked objects:
 12759 ;;		On entry : 1F/0
 12760 ;;		On exit  : 1F/0
 12761 ;;		Unchanged: 1F/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        4 bytes
 12768 ;; Hardware stack levels used: 1
 12769 ;; This function calls:
 12770 ;;		Nothing
 12771 ;; This function is called by:
 12772 ;;		_APP_KeyboardInit
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776     12EF                     i1_GenericQueue_Init:	
 12777                           ;psect for function i1_GenericQueue_Init
 12778                           
 12779                           
 12780                           ;generic_queue.c: 5:     q->element_size = element_size;
 12781                           
 12782                           ;incstack = 0
 12783                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 12784     12EF  0870               	movf	i1GenericQueue_Init@q,w
 12785     12F0  3E5A               	addlw	90
 12786     12F1  0086               	movwf	6
 12787     12F2  3000               	movlw	0
 12788     12F3  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 12789     12F4  0087               	movwf	7
 12790     12F5  0872               	movf	i1GenericQueue_Init@element_size,w
 12791     12F6  3FC0               	movwi [0]fsr1
 12792     12F7  0873               	movf	i1GenericQueue_Init@element_size+1,w
 12793     12F8  3FC1               	movwi [1]fsr1
 12794                           
 12795                           ;generic_queue.c: 6:     q->front = 0;
 12796     12F9  0870               	movf	i1GenericQueue_Init@q,w
 12797     12FA  3E5C               	addlw	92
 12798     12FB  0086               	movwf	6
 12799     12FC  3000               	movlw	0
 12800     12FD  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 12801     12FE  0087               	movwf	7
 12802     12FF  0181               	clrf	1
 12803                           
 12804                           ;generic_queue.c: 7:     q->rear = 0;
 12805     1300  0870               	movf	i1GenericQueue_Init@q,w
 12806     1301  3E5D               	addlw	93
 12807     1302  0086               	movwf	6
 12808     1303  3000               	movlw	0
 12809     1304  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 12810     1305  0087               	movwf	7
 12811     1306  0181               	clrf	1
 12812                           
 12813                           ;generic_queue.c: 8:     q->size = 0;
 12814     1307  0870               	movf	i1GenericQueue_Init@q,w
 12815     1308  3E5E               	addlw	94
 12816     1309  0086               	movwf	6
 12817     130A  3000               	movlw	0
 12818     130B  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 12819     130C  0087               	movwf	7
 12820     130D  0181               	clrf	1
 12821     130E  0008               	return
 12822     130F                     __end_ofi1_GenericQueue_Init:
 12823                           
 12824                           	psect	text66
 12825     12CF                     __ptext66:	
 12826 ;; *************** function _USBEnableEndpoint *****************
 12827 ;; Defined at:
 12828 ;;		line 882 in file "usb/usb_device.c"
 12829 ;; Parameters:    Size  Location     Type
 12830 ;;  ep              1    wreg     unsigned char 
 12831 ;;  options         1    7[COMMON] unsigned char 
 12832 ;; Auto vars:     Size  Location     Type
 12833 ;;  ep              1   12[COMMON] unsigned char 
 12834 ;;  p               2   10[COMMON] PTR unsigned char 
 12835 ;;		 -> UEP0(1), 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;                  1    wreg      void 
 12838 ;; Registers used:
 12839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : 1F/2
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12845 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;Total ram usage:        6 bytes
 12850 ;; Hardware stack levels used: 1
 12851 ;; Hardware stack levels required when called: 1
 12852 ;; This function calls:
 12853 ;;		_USBConfigureEndpoint
 12854 ;; This function is called by:
 12855 ;;		_APP_KeyboardInit
 12856 ;; This function uses a non-reentrant model
 12857 ;;
 12858                           
 12859     12CF                     _USBEnableEndpoint:	
 12860                           ;psect for function _USBEnableEndpoint
 12861                           
 12862                           
 12863                           ;incstack = 0
 12864                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12865                           ;USBEnableEndpoint@ep stored from wreg
 12866     12CF  00FC               	movwf	USBEnableEndpoint@ep
 12867                           
 12868                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 12869     12D0  1D77               	btfss	USBEnableEndpoint@options,2
 12870     12D1  2AD7               	goto	i1l3709
 12871                           
 12872                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 12873     12D2  01F0               	clrf	USBConfigureEndpoint@direction
 12874     12D3  087C               	movf	USBEnableEndpoint@ep,w
 12875     12D4  3194  24E7  3192   	fcall	_USBConfigureEndpoint
 12876     12D7                     i1l3709:
 12877                           
 12878                           ;usb/usb_device.c: 892:     if(options & 0x02)
 12879     12D7  1CF7               	btfss	USBEnableEndpoint@options,1
 12880     12D8  2ADE               	goto	i1l3713
 12881                           
 12882                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 12883     12D9  01F0               	clrf	USBConfigureEndpoint@direction
 12884     12DA  0AF0               	incf	USBConfigureEndpoint@direction,f
 12885     12DB  087C               	movf	USBEnableEndpoint@ep,w
 12886     12DC  3194  24E7         	fcall	_USBConfigureEndpoint
 12887     12DE                     i1l3713:
 12888                           
 12889                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 12890     12DE  087C               	movf	USBEnableEndpoint@ep,w
 12891     12DF  3E98               	addlw	152
 12892     12E0  00F8               	movwf	??_USBEnableEndpoint
 12893     12E1  01F9               	clrf	??_USBEnableEndpoint+1
 12894     12E2  300E               	movlw	14
 12895     12E3  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 12896     12E4  0878               	movf	??_USBEnableEndpoint,w
 12897     12E5  00FA               	movwf	USBEnableEndpoint@p
 12898     12E6  0879               	movf	??_USBEnableEndpoint+1,w
 12899     12E7  00FB               	movwf	USBEnableEndpoint@p+1
 12900                           
 12901                           ;usb/usb_device.c: 905:     *p = options;
 12902     12E8  087A               	movf	USBEnableEndpoint@p,w
 12903     12E9  0086               	movwf	6
 12904     12EA  087B               	movf	USBEnableEndpoint@p+1,w
 12905     12EB  0087               	movwf	7
 12906     12EC  0877               	movf	USBEnableEndpoint@options,w
 12907     12ED  0081               	movwf	1
 12908     12EE  0008               	return
 12909     12EF                     __end_of_USBEnableEndpoint:
 12910                           
 12911                           	psect	text67
 12912     14E7                     __ptext67:	
 12913 ;; *************** function _USBConfigureEndpoint *****************
 12914 ;; Defined at:
 12915 ;;		line 1547 in file "usb/usb_device.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;  EPNum           1    wreg     unsigned char 
 12918 ;;  direction       1    0[COMMON] unsigned char 
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;  EPNum           1    5[COMMON] unsigned char 
 12921 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 12922 ;;		 -> BDT(32), 
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/2
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        7 bytes
 12937 ;; Hardware stack levels used: 1
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_USBEnableEndpoint
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945     14E7                     _USBConfigureEndpoint:	
 12946                           ;psect for function _USBConfigureEndpoint
 12947                           
 12948                           
 12949                           ;incstack = 0
 12950                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 12951                           ;USBConfigureEndpoint@EPNum stored from wreg
 12952     14E7  00F5               	movwf	USBConfigureEndpoint@EPNum
 12953                           
 12954                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 12955     14E8  3020               	movlw	32
 12956     14E9  00F6               	movwf	USBConfigureEndpoint@handle
 12957                           
 12958                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 12959     14EA  0870               	movf	USBConfigureEndpoint@direction,w
 12960     14EB  00F1               	movwf	??_USBConfigureEndpoint
 12961     14EC  3001               	movlw	1
 12962     14ED                     u268_25:
 12963     14ED  35F1               	lslf	??_USBConfigureEndpoint,f
 12964     14EE  0B89               	decfsz	9,f
 12965     14EF  2CED               	goto	u268_25
 12966     14F0  0875               	movf	USBConfigureEndpoint@EPNum,w
 12967     14F1  00F2               	movwf	??_USBConfigureEndpoint+1
 12968     14F2  3001               	movlw	1
 12969     14F3                     u269_25:
 12970     14F3  35F2               	lslf	??_USBConfigureEndpoint+1,f
 12971     14F4  3EFF               	addlw	-1
 12972     14F5  1D03               	skipz
 12973     14F6  2CF3               	goto	u269_25
 12974     14F7  3572               	lslf	??_USBConfigureEndpoint+1,w
 12975     14F8  0771               	addwf	??_USBConfigureEndpoint,w
 12976     14F9  00F3               	movwf	??_USBConfigureEndpoint+2
 12977     14FA  3001               	movlw	1
 12978     14FB                     u270_25:
 12979     14FB  35F3               	lslf	??_USBConfigureEndpoint+2,f
 12980     14FC  3EFF               	addlw	-1
 12981     14FD  1D03               	skipz
 12982     14FE  2CFB               	goto	u270_25
 12983     14FF  3573               	lslf	??_USBConfigureEndpoint+2,w
 12984     1500  00F4               	movwf	??_USBConfigureEndpoint+3
 12985     1501  0874               	movf	??_USBConfigureEndpoint+3,w
 12986     1502  07F6               	addwf	USBConfigureEndpoint@handle,f
 12987                           
 12988                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 12989     1503  0876               	movf	USBConfigureEndpoint@handle,w
 12990     1504  0086               	movwf	6
 12991     1505  0187               	clrf	7
 12992     1506  1381               	bcf	1,7
 12993                           
 12994                           ;usb/usb_device.c: 1561:     if(direction == 0)
 12995     1507  0870               	movf	USBConfigureEndpoint@direction,w
 12996     1508  1D03               	btfss	3,2
 12997     1509  2D14               	goto	i1l3699
 12998                           
 12999                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13000     150A  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13001     150B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13002     150C  0086               	movwf	6
 13003     150D  3001               	movlw	1	; select bank2/3
 13004     150E  0087               	movwf	7
 13005     150F  0876               	movf	USBConfigureEndpoint@handle,w
 13006     1510  3FC0               	movwi [0]fsr1
 13007     1511  3000               	movlw	0
 13008     1512  3FC1               	movwi [1]fsr1
 13009                           
 13010                           ;usb/usb_device.c: 1564:     }
 13011     1513  2D1C               	goto	i1l3701
 13012     1514                     i1l3699:
 13013                           
 13014                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13015     1514  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13016     1515  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13017     1516  0086               	movwf	6
 13018     1517  0187               	clrf	7
 13019     1518  0876               	movf	USBConfigureEndpoint@handle,w
 13020     1519  3FC0               	movwi [0]fsr1
 13021     151A  3000               	movlw	0
 13022     151B  3FC1               	movwi [1]fsr1
 13023     151C                     i1l3701:
 13024                           
 13025                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13026     151C  0876               	movf	USBConfigureEndpoint@handle,w
 13027     151D  0086               	movwf	6
 13028     151E  0187               	clrf	7
 13029     151F  1301               	bcf	1,6
 13030                           
 13031                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13032     1520  0876               	movf	USBConfigureEndpoint@handle,w
 13033     1521  3E04               	addlw	4
 13034     1522  0086               	movwf	6
 13035     1523  0187               	clrf	7
 13036     1524  1701               	bsf	1,6
 13037     1525  0008               	return
 13038     1526                     __end_of_USBConfigureEndpoint:
 13039                           
 13040                           	psect	text68
 13041     1470                     __ptext68:	
 13042 ;; *************** function _USBCtrlTrfOutHandler *****************
 13043 ;; Defined at:
 13044 ;;		line 2545 in file "usb/usb_device.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;		None
 13047 ;; Auto vars:     Size  Location     Type
 13048 ;;		None
 13049 ;; Return value:  Size  Location     Type
 13050 ;;                  1    wreg      void 
 13051 ;; Registers used:
 13052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13053 ;; Tracked objects:
 13054 ;;		On entry : 1F/0
 13055 ;;		On exit  : 1D/0
 13056 ;;		Unchanged: 0/0
 13057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13060 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;Total ram usage:        4 bytes
 13063 ;; Hardware stack levels used: 1
 13064 ;; Hardware stack levels required when called: 4
 13065 ;; This function calls:
 13066 ;;		_USBCtrlTrfRxService
 13067 ;; This function is called by:
 13068 ;;		_USBCtrlEPService
 13069 ;; This function uses a non-reentrant model
 13070 ;;
 13071                           
 13072     1470                     _USBCtrlTrfOutHandler:	
 13073                           ;psect for function _USBCtrlTrfOutHandler
 13074                           
 13075                           
 13076                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13077                           
 13078                           ;incstack = 0
 13079                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13080     1470  3002               	movlw	2
 13081     1471  066A               	xorwf	_controlTransferState,w	;volatile
 13082     1472  1D03               	btfss	3,2
 13083     1473  2C77               	goto	i1l4551
 13084                           
 13085                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13086     1474  318F  274D         	fcall	_USBCtrlTrfRxService
 13087                           
 13088                           ;usb/usb_device.c: 2550:     }
 13089     1476  0008               	return
 13090     1477                     i1l4551:
 13091                           
 13092                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13093     1477  01EA               	clrf	_controlTransferState	;volatile
 13094                           
 13095                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13096     1478  0022               	movlb	2	; select bank2
 13097     1479  085B               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13098     147A  1D03               	btfss	3,2
 13099     147B  2CA8               	goto	i1l4563
 13100                           
 13101                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13102     147C  0020               	movlb	0	; select bank0
 13103     147D  0867               	movf	_pBDTEntryEP0OutNext,w
 13104     147E  3E01               	addlw	1
 13105     147F  00FA               	movwf	??_USBCtrlTrfOutHandler
 13106     1480  3000               	movlw	0
 13107     1481  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13108     1482  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13109     1483  087A               	movf	??_USBCtrlTrfOutHandler,w
 13110     1484  0086               	movwf	6
 13111     1485  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13112     1486  0087               	movwf	7
 13113     1487  3008               	movlw	8
 13114     1488  0081               	movwf	1
 13115                           
 13116                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13117     1489  3040               	movlw	64
 13118     148A  00FA               	movwf	??_USBCtrlTrfOutHandler
 13119     148B  3000               	movlw	0
 13120     148C  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13121     148D  30FF               	movlw	255
 13122     148E  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13123     148F  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13124     1490  307F               	movlw	127
 13125     1491  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13126     1492  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13127     1493  0867               	movf	_pBDTEntryEP0OutNext,w
 13128     1494  0086               	movwf	6
 13129     1495  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13130     1496  0087               	movwf	7
 13131     1497  3142               	addfsr 1,2
 13132     1498  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13133     1499  3FC0               	movwi [0]fsr1
 13134     149A  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13135     149B  3FC1               	movwi [1]fsr1
 13136                           
 13137                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13138     149C  0867               	movf	_pBDTEntryEP0OutNext,w
 13139     149D  0086               	movwf	6
 13140     149E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13141     149F  0087               	movwf	7
 13142     14A0  300C               	movlw	12
 13143     14A1  0081               	movwf	1
 13144                           
 13145                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13146     14A2  0867               	movf	_pBDTEntryEP0OutNext,w
 13147     14A3  0086               	movwf	6
 13148     14A4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13149     14A5  0087               	movwf	7
 13150     14A6  1781               	bsf	1,7
 13151                           
 13152                           ;usb/usb_device.c: 2568:         }
 13153     14A7  0008               	return
 13154     14A8                     i1l4563:
 13155                           
 13156                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13157     14A8  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13158     14A9  0008               	return
 13159     14AA                     __end_of_USBCtrlTrfOutHandler:
 13160                           
 13161                           	psect	text69
 13162     0F4D                     __ptext69:	
 13163 ;; *************** function _USBCtrlTrfRxService *****************
 13164 ;; Defined at:
 13165 ;;		line 1856 in file "usb/usb_device.c"
 13166 ;; Parameters:    Size  Location     Type
 13167 ;;		None
 13168 ;; Auto vars:     Size  Location     Type
 13169 ;;  byteToRead      1    9[COMMON] unsigned char 
 13170 ;;  i               1    8[COMMON] unsigned char 
 13171 ;; Return value:  Size  Location     Type
 13172 ;;                  1    wreg      void 
 13173 ;; Registers used:
 13174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13175 ;; Tracked objects:
 13176 ;;		On entry : 1F/0
 13177 ;;		On exit  : 1D/0
 13178 ;;		Unchanged: 0/0
 13179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13183 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;Total ram usage:        6 bytes
 13185 ;; Hardware stack levels used: 1
 13186 ;; Hardware stack levels required when called: 3
 13187 ;; This function calls:
 13188 ;;		_USBCtrlEPAllowStatusStage
 13189 ;;		_USBHIDCBSetReportComplete
 13190 ;; This function is called by:
 13191 ;;		_USBCtrlTrfOutHandler
 13192 ;; This function uses a non-reentrant model
 13193 ;;
 13194                           
 13195     0F4D                     _USBCtrlTrfRxService:	
 13196                           ;psect for function _USBCtrlTrfRxService
 13197                           
 13198                           
 13199                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13200                           
 13201                           ;incstack = 0
 13202                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13203     0F4D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13204     0F4E  0086               	movwf	6
 13205     0F4F  0187               	clrf	7
 13206     0F50  3F41               	moviw [1]fsr1
 13207     0F51  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13208                           
 13209                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13210     0F52  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13211     0F53  00F4               	movwf	??_USBCtrlTrfRxService
 13212     0F54  01F5               	clrf	??_USBCtrlTrfRxService+1
 13213     0F55  0875               	movf	??_USBCtrlTrfRxService+1,w
 13214     0F56  0022               	movlb	2	; select bank2
 13215     0F57  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13216     0F58  1D03               	skipz
 13217     0F59  2F5C               	goto	u351_25
 13218     0F5A  0874               	movf	??_USBCtrlTrfRxService,w
 13219     0F5B  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13220     0F5C                     u351_25:
 13221     0F5C  1803               	skipnc
 13222     0F5D  2F60               	goto	i1l594
 13223                           
 13224                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13225     0F5E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13226     0F5F  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13227     0F60                     i1l594:	
 13228                           ;usb/usb_device.c: 1872:     }
 13229                           
 13230                           
 13231                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13232     0F60  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13233     0F61  00F4               	movwf	??_USBCtrlTrfRxService
 13234     0F62  01F5               	clrf	??_USBCtrlTrfRxService+1
 13235     0F63  0874               	movf	??_USBCtrlTrfRxService,w
 13236     0F64  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13237     0F65  0875               	movf	??_USBCtrlTrfRxService+1,w
 13238     0F66  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 13239                           
 13240                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 13241     0F67  01F8               	clrf	USBCtrlTrfRxService@i
 13242     0F68                     i1l4327:
 13243     0F68  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13244     0F69  0278               	subwf	USBCtrlTrfRxService@i,w
 13245     0F6A  1803               	btfsc	3,0
 13246     0F6B  2F7E               	goto	i1l4329
 13247                           
 13248                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 13249     0F6C  0821               	movf	_outPipes^(0+256),w	;volatile
 13250     0F6D  0086               	movwf	6
 13251     0F6E  0187               	clrf	7
 13252     0F6F  0878               	movf	USBCtrlTrfRxService@i,w
 13253     0F70  3E48               	addlw	72
 13254     0F71  0084               	movwf	4
 13255     0F72  0185               	clrf	5
 13256     0F73  0800               	movf	0,w
 13257     0F74  0081               	movwf	1
 13258     0F75  3001               	movlw	1
 13259     0F76  00F4               	movwf	??_USBCtrlTrfRxService
 13260     0F77  0874               	movf	??_USBCtrlTrfRxService,w
 13261     0F78  07A1               	addwf	_outPipes^(0+256),f	;volatile
 13262                           
 13263                           ;usb/usb_device.c: 1881:     }
 13264     0F79  3001               	movlw	1
 13265     0F7A  00F4               	movwf	??_USBCtrlTrfRxService
 13266     0F7B  0874               	movf	??_USBCtrlTrfRxService,w
 13267     0F7C  07F8               	addwf	USBCtrlTrfRxService@i,f
 13268     0F7D  2F68               	goto	i1l4327
 13269     0F7E                     i1l4329:
 13270                           
 13271                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 13272     0F7E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13273     0F7F  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13274     0F80  1903               	btfsc	3,2
 13275     0F81  2FBF               	goto	i1l4341
 13276                           
 13277                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13278     0F82  0020               	movlb	0	; select bank0
 13279     0F83  0867               	movf	_pBDTEntryEP0OutNext,w
 13280     0F84  3E01               	addlw	1
 13281     0F85  00F4               	movwf	??_USBCtrlTrfRxService
 13282     0F86  3000               	movlw	0
 13283     0F87  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13284     0F88  00F5               	movwf	??_USBCtrlTrfRxService+1
 13285     0F89  0874               	movf	??_USBCtrlTrfRxService,w
 13286     0F8A  0086               	movwf	6
 13287     0F8B  0875               	movf	??_USBCtrlTrfRxService+1,w
 13288     0F8C  0087               	movwf	7
 13289     0F8D  3008               	movlw	8
 13290     0F8E  0081               	movwf	1
 13291                           
 13292                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 13293     0F8F  3048               	movlw	72
 13294     0F90  00F4               	movwf	??_USBCtrlTrfRxService
 13295     0F91  3000               	movlw	0
 13296     0F92  00F5               	movwf	??_USBCtrlTrfRxService+1
 13297     0F93  30FF               	movlw	255
 13298     0F94  0574               	andwf	??_USBCtrlTrfRxService,w
 13299     0F95  00F6               	movwf	??_USBCtrlTrfRxService+2
 13300     0F96  307F               	movlw	127
 13301     0F97  0575               	andwf	??_USBCtrlTrfRxService+1,w
 13302     0F98  00F7               	movwf	??_USBCtrlTrfRxService+3
 13303     0F99  0867               	movf	_pBDTEntryEP0OutNext,w
 13304     0F9A  0086               	movwf	6
 13305     0F9B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13306     0F9C  0087               	movwf	7
 13307     0F9D  3142               	addfsr 1,2
 13308     0F9E  0876               	movf	??_USBCtrlTrfRxService+2,w
 13309     0F9F  3FC0               	movwi [0]fsr1
 13310     0FA0  0877               	movf	??_USBCtrlTrfRxService+3,w
 13311     0FA1  3FC1               	movwi [1]fsr1
 13312                           
 13313                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 13314     0FA2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13315     0FA3  0086               	movwf	6
 13316     0FA4  0187               	clrf	7
 13317     0FA5  1B01               	btfsc	1,6
 13318     0FA6  2FB3               	goto	i1l4339
 13319                           
 13320                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 13321     0FA7  0867               	movf	_pBDTEntryEP0OutNext,w
 13322     0FA8  0086               	movwf	6
 13323     0FA9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13324     0FAA  0087               	movwf	7
 13325     0FAB  3048               	movlw	72
 13326     0FAC  0081               	movwf	1
 13327                           
 13328                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13329     0FAD  0867               	movf	_pBDTEntryEP0OutNext,w
 13330     0FAE  0086               	movwf	6
 13331     0FAF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13332     0FB0  0087               	movwf	7
 13333     0FB1  1781               	bsf	1,7
 13334                           
 13335                           ;usb/usb_device.c: 1893:         }
 13336     0FB2  0008               	return
 13337     0FB3                     i1l4339:
 13338                           
 13339                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 13340     0FB3  0867               	movf	_pBDTEntryEP0OutNext,w
 13341     0FB4  0086               	movwf	6
 13342     0FB5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13343     0FB6  0087               	movwf	7
 13344     0FB7  3008               	movlw	8
 13345     0FB8  0081               	movwf	1
 13346                           
 13347                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13348     0FB9  0867               	movf	_pBDTEntryEP0OutNext,w
 13349     0FBA  0086               	movwf	6
 13350     0FBB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13351     0FBC  0087               	movwf	7
 13352     0FBD  1781               	bsf	1,7
 13353     0FBE  0008               	return
 13354     0FBF                     i1l4341:
 13355                           
 13356                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13357     0FBF  0020               	movlb	0	; select bank0
 13358     0FC0  0867               	movf	_pBDTEntryEP0OutNext,w
 13359     0FC1  3E01               	addlw	1
 13360     0FC2  00F4               	movwf	??_USBCtrlTrfRxService
 13361     0FC3  3000               	movlw	0
 13362     0FC4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13363     0FC5  00F5               	movwf	??_USBCtrlTrfRxService+1
 13364     0FC6  0874               	movf	??_USBCtrlTrfRxService,w
 13365     0FC7  0086               	movwf	6
 13366     0FC8  0875               	movf	??_USBCtrlTrfRxService+1,w
 13367     0FC9  0087               	movwf	7
 13368     0FCA  3008               	movlw	8
 13369     0FCB  0081               	movwf	1
 13370                           
 13371                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 13372     0FCC  3040               	movlw	64
 13373     0FCD  00F4               	movwf	??_USBCtrlTrfRxService
 13374     0FCE  3000               	movlw	0
 13375     0FCF  00F5               	movwf	??_USBCtrlTrfRxService+1
 13376     0FD0  30FF               	movlw	255
 13377     0FD1  0574               	andwf	??_USBCtrlTrfRxService,w
 13378     0FD2  00F6               	movwf	??_USBCtrlTrfRxService+2
 13379     0FD3  307F               	movlw	127
 13380     0FD4  0575               	andwf	??_USBCtrlTrfRxService+1,w
 13381     0FD5  00F7               	movwf	??_USBCtrlTrfRxService+3
 13382     0FD6  0867               	movf	_pBDTEntryEP0OutNext,w
 13383     0FD7  0086               	movwf	6
 13384     0FD8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13385     0FD9  0087               	movwf	7
 13386     0FDA  3142               	addfsr 1,2
 13387     0FDB  0876               	movf	??_USBCtrlTrfRxService+2,w
 13388     0FDC  3FC0               	movwi [0]fsr1
 13389     0FDD  0877               	movf	??_USBCtrlTrfRxService+3,w
 13390     0FDE  3FC1               	movwi [1]fsr1
 13391                           
 13392                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 13393     0FDF  0867               	movf	_pBDTEntryEP0OutNext,w
 13394     0FE0  0086               	movwf	6
 13395     0FE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13396     0FE2  0087               	movwf	7
 13397     0FE3  3004               	movlw	4
 13398     0FE4  0081               	movwf	1
 13399                           
 13400                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13401     0FE5  0867               	movf	_pBDTEntryEP0OutNext,w
 13402     0FE6  0086               	movwf	6
 13403     0FE7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13404     0FE8  0087               	movwf	7
 13405     0FE9  1781               	bsf	1,7
 13406                           
 13407                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 13408     0FEA  0022               	movlb	2	; select bank2
 13409     0FEB  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 13410     0FEC  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 13411     0FED  1903               	btfsc	3,2
 13412     0FEE  2FF9               	goto	i1l4353
 13413                           
 13414                           ;usb/usb_device.c: 1919:         {
 13415     0FEF  3005               	movlw	5
 13416     0FF0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 13417     0FF1  0086               	movwf	6
 13418     0FF2  3001               	movlw	1	; select bank2/3
 13419     0FF3  0087               	movwf	7
 13420     0FF4  3F41               	moviw [1]fsr1
 13421     0FF5  008A               	movwf	10
 13422     0FF6  3F40               	moviw [0]fsr1
 13423     0FF7  000A               	callw
 13424     0FF8  318F               	pagesel	$
 13425     0FF9                     i1l4353:
 13426     0FF9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 13427                           
 13428                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 13429     0FFA  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 13430     0FFB  1D03               	btfss	3,2
 13431     0FFC  0008               	return
 13432                           
 13433                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 13434     0FFD  318A  228C         	fcall	_USBCtrlEPAllowStatusStage
 13435     0FFF  0008               	return
 13436     1000                     __end_of_USBCtrlTrfRxService:
 13437                           
 13438                           	psect	text70
 13439     0A8C                     __ptext70:	
 13440 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 13441 ;; Defined at:
 13442 ;;		line 1420 in file "usb/usb_device.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;		None
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      void 
 13449 ;; Registers used:
 13450 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/2
 13453 ;;		On exit  : 1D/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        4 bytes
 13461 ;; Hardware stack levels used: 1
 13462 ;; This function calls:
 13463 ;;		Nothing
 13464 ;; This function is called by:
 13465 ;;		_USBDeviceTasks
 13466 ;;		_USBCtrlEPServiceComplete
 13467 ;;		_USBCtrlTrfRxService
 13468 ;; This function uses a non-reentrant model
 13469 ;;
 13470                           
 13471     0A8C                     _USBCtrlEPAllowStatusStage:	
 13472                           ;psect for function _USBCtrlEPAllowStatusStage
 13473                           
 13474                           
 13475                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 13476                           
 13477                           ;incstack = 0
 13478                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 13479     0A8C  0022               	movlb	2	; select bank2
 13480     0A8D  0858               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 13481     0A8E  1D03               	btfss	3,2
 13482     0A8F  0008               	return
 13483                           
 13484                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 13485     0A90  3001               	movlw	1
 13486     0A91  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 13487                           
 13488                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 13489     0A92  0857               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 13490     0A93  1D03               	btfss	3,2
 13491     0A94  0008               	return
 13492                           
 13493                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 13494     0A95  3001               	movlw	1
 13495     0A96  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 13496                           
 13497                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 13498     0A97  3002               	movlw	2
 13499     0A98  0020               	movlb	0	; select bank0
 13500     0A99  066A               	xorwf	_controlTransferState,w	;volatile
 13501     0A9A  1D03               	btfss	3,2
 13502     0A9B  2AAE               	goto	i1l3943
 13503                           
 13504                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 13505     0A9C  0861               	movf	_pBDTEntryIn,w
 13506     0A9D  0086               	movwf	6
 13507     0A9E  0862               	movf	_pBDTEntryIn+1,w
 13508     0A9F  0087               	movwf	7
 13509     0AA0  3141               	addfsr 1,1
 13510     0AA1  0181               	clrf	1
 13511                           
 13512                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 13513     0AA2  0861               	movf	_pBDTEntryIn,w
 13514     0AA3  0086               	movwf	6
 13515     0AA4  0862               	movf	_pBDTEntryIn+1,w
 13516     0AA5  0087               	movwf	7
 13517     0AA6  3048               	movlw	72
 13518     0AA7  0081               	movwf	1
 13519                           
 13520                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 13521     0AA8  0861               	movf	_pBDTEntryIn,w
 13522     0AA9  0086               	movwf	6
 13523     0AAA  0862               	movf	_pBDTEntryIn+1,w
 13524     0AAB  0087               	movwf	7
 13525     0AAC  1781               	bsf	1,7
 13526                           
 13527                           ;usb/usb_device.c: 1441:             }
 13528     0AAD  0008               	return
 13529     0AAE                     i1l3943:
 13530     0AAE  036A               	decf	_controlTransferState,w	;volatile
 13531     0AAF  1D03               	btfss	3,2
 13532     0AB0  0008               	return
 13533                           
 13534                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 13535     0AB1  0022               	movlb	2	; select bank2
 13536     0AB2  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13537                           
 13538                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 13539     0AB3  0020               	movlb	0	; select bank0
 13540     0AB4  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 13541     0AB5  0086               	movwf	6
 13542     0AB6  0187               	clrf	7
 13543     0AB7  3008               	movlw	8
 13544     0AB8  0081               	movwf	1
 13545                           
 13546                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 13547     0AB9  3040               	movlw	64
 13548     0ABA  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 13549     0ABB  3000               	movlw	0
 13550     0ABC  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 13551     0ABD  30FF               	movlw	255
 13552     0ABE  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 13553     0ABF  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 13554     0AC0  307F               	movlw	127
 13555     0AC1  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 13556     0AC2  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 13557     0AC3  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13558     0AC4  3E02               	addlw	2
 13559     0AC5  0086               	movwf	6
 13560     0AC6  0187               	clrf	7
 13561     0AC7  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 13562     0AC8  3FC0               	movwi [0]fsr1
 13563     0AC9  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 13564     0ACA  3FC1               	movwi [1]fsr1
 13565                           
 13566                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 13567     0ACB  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13568     0ACC  0086               	movwf	6
 13569     0ACD  0187               	clrf	7
 13570     0ACE  3004               	movlw	4
 13571     0ACF  0081               	movwf	1
 13572                           
 13573                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 13574     0AD0  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13575     0AD1  0086               	movwf	6
 13576     0AD2  0187               	clrf	7
 13577     0AD3  1781               	bsf	1,7
 13578                           
 13579                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 13580     0AD4  3001               	movlw	1
 13581     0AD5  0022               	movlb	2	; select bank2
 13582     0AD6  00DB               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13583                           
 13584                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 13585     0AD7  0020               	movlb	0	; select bank0
 13586     0AD8  0867               	movf	_pBDTEntryEP0OutNext,w
 13587     0AD9  3E01               	addlw	1
 13588     0ADA  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 13589     0ADB  3000               	movlw	0
 13590     0ADC  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13591     0ADD  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 13592     0ADE  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 13593     0ADF  0086               	movwf	6
 13594     0AE0  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 13595     0AE1  0087               	movwf	7
 13596     0AE2  3008               	movlw	8
 13597     0AE3  0081               	movwf	1
 13598                           
 13599                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 13600     0AE4  3040               	movlw	64
 13601     0AE5  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 13602     0AE6  3000               	movlw	0
 13603     0AE7  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 13604     0AE8  30FF               	movlw	255
 13605     0AE9  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 13606     0AEA  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 13607     0AEB  307F               	movlw	127
 13608     0AEC  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 13609     0AED  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 13610     0AEE  0867               	movf	_pBDTEntryEP0OutNext,w
 13611     0AEF  0086               	movwf	6
 13612     0AF0  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13613     0AF1  0087               	movwf	7
 13614     0AF2  3142               	addfsr 1,2
 13615     0AF3  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 13616     0AF4  3FC0               	movwi [0]fsr1
 13617     0AF5  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 13618     0AF6  3FC1               	movwi [1]fsr1
 13619                           
 13620                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 13621     0AF7  0867               	movf	_pBDTEntryEP0OutNext,w
 13622     0AF8  0086               	movwf	6
 13623     0AF9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13624     0AFA  0087               	movwf	7
 13625     0AFB  3080               	movlw	128
 13626     0AFC  0081               	movwf	1
 13627     0AFD  0008               	return
 13628     0AFE                     __end_of_USBCtrlEPAllowStatusStage:	
 13629                           ;usb/usb_device.c: 1461:         }
 13630                           
 13631                           
 13632                           	psect	text71
 13633     0B77                     __ptext71:	
 13634 ;; *************** function _USBCtrlTrfInHandler *****************
 13635 ;; Defined at:
 13636 ;;		line 2599 in file "usb/usb_device.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;		None
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  lastDTS         1    7[COMMON] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;                  1    wreg      void 
 13643 ;; Registers used:
 13644 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 1F/0
 13647 ;;		On exit  : 1F/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13653 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13654 ;;Total ram usage:        5 bytes
 13655 ;; Hardware stack levels used: 1
 13656 ;; Hardware stack levels required when called: 3
 13657 ;; This function calls:
 13658 ;;		_USBCtrlTrfTxService
 13659 ;;		_USBHIDCBSetReportComplete
 13660 ;; This function is called by:
 13661 ;;		_USBCtrlEPService
 13662 ;; This function uses a non-reentrant model
 13663 ;;
 13664                           
 13665     0B77                     _USBCtrlTrfInHandler:	
 13666                           ;psect for function _USBCtrlTrfInHandler
 13667                           
 13668                           
 13669                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 13670                           
 13671                           ;incstack = 0
 13672                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13673     0B77  0861               	movf	_pBDTEntryIn,w
 13674     0B78  0086               	movwf	6
 13675     0B79  0862               	movf	_pBDTEntryIn+1,w
 13676     0B7A  0087               	movwf	7
 13677     0B7B  3000               	movlw	0
 13678     0B7C  1B01               	btfsc	1,6
 13679     0B7D  3001               	movlw	1
 13680     0B7E  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 13681                           
 13682                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 13683     0B7F  3004               	movlw	4
 13684     0B80  0661               	xorwf	_pBDTEntryIn,w
 13685     0B81  00E1               	movwf	_pBDTEntryIn
 13686     0B82  3000               	movlw	0
 13687     0B83  0662               	xorwf	_pBDTEntryIn+1,w
 13688     0B84  00E2               	movwf	_pBDTEntryIn+1
 13689                           
 13690                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 13691     0B85  3008               	movlw	8
 13692     0B86  066C               	xorwf	_USBDeviceState,w
 13693     0B87  1D03               	btfss	3,2
 13694     0B88  2B95               	goto	i1l4579
 13695                           
 13696                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 13697     0B89  0842               	movf	66,w	;volatile
 13698     0B8A  397F               	andlw	127
 13699     0B8B  003D               	movlb	29	; select bank29
 13700     0B8C  0096               	movwf	22	;volatile
 13701                           
 13702                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 13703     0B8D  0816               	movf	22,w
 13704     0B8E  1903               	btfsc	3,2
 13705     0B8F  2B92               	goto	i1l4577
 13706                           
 13707                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 13708     0B90  3010               	movlw	16
 13709     0B91  2B93               	goto	L14
 13710     0B92                     i1l4577:	
 13711                           ;usb/usb_device.c: 2617:         }
 13712                           
 13713                           
 13714                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 13715     0B92  3004               	movlw	4
 13716     0B93                     L14:
 13717     0B93  0020               	movlb	0	; select bank0
 13718     0B94  00EC               	movwf	_USBDeviceState	;volatile
 13719     0B95                     i1l4579:
 13720                           
 13721                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 13722     0B95  036A               	decf	_controlTransferState,w	;volatile
 13723     0B96  1D03               	btfss	3,2
 13724     0B97  2BDD               	goto	i1l680
 13725                           
 13726                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 13727     0B98  3048               	movlw	72
 13728     0B99  00F3               	movwf	??_USBCtrlTrfInHandler
 13729     0B9A  3000               	movlw	0
 13730     0B9B  00F4               	movwf	??_USBCtrlTrfInHandler+1
 13731     0B9C  30FF               	movlw	255
 13732     0B9D  0573               	andwf	??_USBCtrlTrfInHandler,w
 13733     0B9E  00F5               	movwf	??_USBCtrlTrfInHandler+2
 13734     0B9F  307F               	movlw	127
 13735     0BA0  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 13736     0BA1  00F6               	movwf	??_USBCtrlTrfInHandler+3
 13737     0BA2  0861               	movf	_pBDTEntryIn,w
 13738     0BA3  0086               	movwf	6
 13739     0BA4  0862               	movf	_pBDTEntryIn+1,w
 13740     0BA5  0087               	movwf	7
 13741     0BA6  3142               	addfsr 1,2
 13742     0BA7  0875               	movf	??_USBCtrlTrfInHandler+2,w
 13743     0BA8  3FC0               	movwi [0]fsr1
 13744     0BA9  0876               	movf	??_USBCtrlTrfInHandler+3,w
 13745     0BAA  3FC1               	movwi [1]fsr1
 13746                           
 13747                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 13748     0BAB  3197  279B  318B   	fcall	_USBCtrlTrfTxService
 13749                           
 13750                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 13751     0BAE  3002               	movlw	2
 13752     0BAF  0021               	movlb	1	; select bank1
 13753     0BB0  066E               	xorwf	_shortPacketStatus^(0+128),w	;volatile
 13754     0BB1  1D03               	btfss	3,2
 13755     0BB2  2BC0               	goto	i1l4589
 13756                           
 13757                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 13758     0BB3  0020               	movlb	0	; select bank0
 13759     0BB4  0861               	movf	_pBDTEntryIn,w
 13760     0BB5  0086               	movwf	6
 13761     0BB6  0862               	movf	_pBDTEntryIn+1,w
 13762     0BB7  0087               	movwf	7
 13763     0BB8  3004               	movlw	4
 13764     0BB9  0081               	movwf	1
 13765                           
 13766                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 13767     0BBA  0861               	movf	_pBDTEntryIn,w
 13768     0BBB  0086               	movwf	6
 13769     0BBC  0862               	movf	_pBDTEntryIn+1,w
 13770     0BBD  0087               	movwf	7
 13771     0BBE  1781               	bsf	1,7
 13772                           
 13773                           ;usb/usb_device.c: 2640:         }
 13774     0BBF  0008               	return
 13775     0BC0                     i1l4589:
 13776                           
 13777                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 13778     0BC0  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 13779     0BC1  1D03               	btfss	3,2
 13780     0BC2  2BD0               	goto	i1l4593
 13781                           
 13782                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 13783     0BC3  0020               	movlb	0	; select bank0
 13784     0BC4  0861               	movf	_pBDTEntryIn,w
 13785     0BC5  0086               	movwf	6
 13786     0BC6  0862               	movf	_pBDTEntryIn+1,w
 13787     0BC7  0087               	movwf	7
 13788     0BC8  3048               	movlw	72
 13789     0BC9  0081               	movwf	1
 13790                           
 13791                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 13792     0BCA  0861               	movf	_pBDTEntryIn,w
 13793     0BCB  0086               	movwf	6
 13794     0BCC  0862               	movf	_pBDTEntryIn+1,w
 13795     0BCD  0087               	movwf	7
 13796     0BCE  1781               	bsf	1,7
 13797                           
 13798                           ;usb/usb_device.c: 2647:             }
 13799     0BCF  0008               	return
 13800     0BD0                     i1l4593:
 13801                           
 13802                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 13803     0BD0  0020               	movlb	0	; select bank0
 13804     0BD1  0861               	movf	_pBDTEntryIn,w
 13805     0BD2  0086               	movwf	6
 13806     0BD3  0862               	movf	_pBDTEntryIn+1,w
 13807     0BD4  0087               	movwf	7
 13808     0BD5  3008               	movlw	8
 13809     0BD6  0081               	movwf	1
 13810                           
 13811                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 13812     0BD7  0861               	movf	_pBDTEntryIn,w
 13813     0BD8  0086               	movwf	6
 13814     0BD9  0862               	movf	_pBDTEntryIn+1,w
 13815     0BDA  0087               	movwf	7
 13816     0BDB  1781               	bsf	1,7
 13817     0BDC  0008               	return
 13818     0BDD                     i1l680:	
 13819                           ;usb/usb_device.c: 2655:  else
 13820                           
 13821                           
 13822                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 13823     0BDD  0022               	movlb	2	; select bank2
 13824     0BDE  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 13825     0BDF  2BEF               	goto	i1l4601
 13826                           
 13827                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 13828     0BE0  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 13829     0BE1  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 13830     0BE2  1903               	btfsc	3,2
 13831     0BE3  2BEE               	goto	i1l4599
 13832                           
 13833                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 13834     0BE4  3005               	movlw	5
 13835     0BE5  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 13836     0BE6  0086               	movwf	6
 13837     0BE7  3001               	movlw	1	; select bank2/3
 13838     0BE8  0087               	movwf	7
 13839     0BE9  3F41               	moviw [1]fsr1
 13840     0BEA  008A               	movwf	10
 13841     0BEB  3F40               	moviw [0]fsr1
 13842     0BEC  000A               	callw
 13843     0BED  318B               	pagesel	$
 13844     0BEE                     i1l4599:
 13845                           
 13846                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 13847     0BEE  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 13848     0BEF                     i1l4601:
 13849                           
 13850                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 13851     0BEF  0020               	movlb	0	; select bank0
 13852     0BF0  01EA               	clrf	_controlTransferState	;volatile
 13853     0BF1  0008               	return
 13854     0BF2                     __end_of_USBCtrlTrfInHandler:
 13855                           
 13856                           	psect	text72
 13857     1F7B                     __ptext72:	
 13858 ;; *************** function _USBHIDCBSetReportComplete *****************
 13859 ;; Defined at:
 13860 ;;		line 522 in file "app_device_keyboard.c"
 13861 ;; Parameters:    Size  Location     Type
 13862 ;;		None
 13863 ;; Auto vars:     Size  Location     Type
 13864 ;;		None
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  1    wreg      void 
 13867 ;; Registers used:
 13868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13869 ;; Tracked objects:
 13870 ;;		On entry : 1F/2
 13871 ;;		On exit  : 1F/2
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;Total ram usage:        0 bytes
 13879 ;; Hardware stack levels used: 1
 13880 ;; Hardware stack levels required when called: 2
 13881 ;; This function calls:
 13882 ;;		i1_APP_KeyboardProcessOutputReport
 13883 ;; This function is called by:
 13884 ;;		_USBHIDCBSetReportHandler
 13885 ;;		_USBCtrlTrfRxService
 13886 ;;		_USBCtrlTrfInHandler
 13887 ;; This function uses a non-reentrant model
 13888 ;;
 13889                           
 13890     1F7B                     _USBHIDCBSetReportComplete:	
 13891                           ;psect for function _USBHIDCBSetReportComplete
 13892                           
 13893                           
 13894                           ;app_device_keyboard.c: 525:     outputReport.value = CtrlTrfData[0];
 13895                           
 13896                           ;incstack = 0
 13897                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13898     1F7B  0020               	movlb	0	; select bank0
 13899     1F7C  0848               	movf	72,w	;volatile
 13900     1F7D  0022               	movlb	2	; select bank2
 13901     1F7E  00A0               	movwf	32	;volatile
 13902                           
 13903                           ;app_device_keyboard.c: 528:     APP_KeyboardProcessOutputReport();
 13904     1F7F  319F  27D4         	fcall	i1_APP_KeyboardProcessOutputReport
 13905     1F81  0008               	return
 13906     1F82                     __end_of_USBHIDCBSetReportComplete:
 13907                           
 13908                           	psect	text73
 13909     1FD4                     __ptext73:	
 13910 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 13911 ;; Defined at:
 13912 ;;		line 517 in file "app_device_keyboard.c"
 13913 ;; Parameters:    Size  Location     Type
 13914 ;;		None
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;		None
 13917 ;; Return value:  Size  Location     Type
 13918 ;;                  1    wreg      void 
 13919 ;; Registers used:
 13920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13921 ;; Tracked objects:
 13922 ;;		On entry : 1F/2
 13923 ;;		On exit  : 1F/2
 13924 ;;		Unchanged: 0/0
 13925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13930 ;;Total ram usage:        0 bytes
 13931 ;; Hardware stack levels used: 1
 13932 ;; Hardware stack levels required when called: 1
 13933 ;; This function calls:
 13934 ;;		i1_PS2Keyboard_SendCommand
 13935 ;; This function is called by:
 13936 ;;		_USBHIDCBSetReportComplete
 13937 ;; This function uses a non-reentrant model
 13938 ;;
 13939                           
 13940     1FD4                     i1_APP_KeyboardProcessOutputReport:	
 13941                           ;psect for function i1_APP_KeyboardProcessOutputReport
 13942                           
 13943                           
 13944                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
 13945                           
 13946                           ;incstack = 0
 13947                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 13948     1FD4  3090               	movlw	144
 13949     1FD5  0086               	movwf	6
 13950     1FD6  3023               	movlw	35
 13951     1FD7  0087               	movwf	7
 13952     1FD8  0820               	movf	32,w	;volatile
 13953     1FD9  0081               	movwf	1
 13954                           
 13955                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
 13956     1FDA  30ED               	movlw	237
 13957     1FDB  3191  21D3         	fcall	i1_PS2Keyboard_SendCommand
 13958     1FDD  0008               	return
 13959     1FDE                     __end_ofi1_APP_KeyboardProcessOutputReport:
 13960                           
 13961                           	psect	text74
 13962     11D3                     __ptext74:	
 13963 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 13964 ;; Defined at:
 13965 ;;		line 60 in file "ps2_keyboard.c"
 13966 ;; Parameters:    Size  Location     Type
 13967 ;;  cmd             1    wreg     unsigned char 
 13968 ;; Auto vars:     Size  Location     Type
 13969 ;;  cmd             1    0[COMMON] unsigned char 
 13970 ;; Return value:  Size  Location     Type
 13971 ;;                  1    wreg      void 
 13972 ;; Registers used:
 13973 ;;		wreg, status,2
 13974 ;; Tracked objects:
 13975 ;;		On entry : 1F/2
 13976 ;;		On exit  : 1F/2
 13977 ;;		Unchanged: 0/0
 13978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;Total ram usage:        1 bytes
 13984 ;; Hardware stack levels used: 1
 13985 ;; This function calls:
 13986 ;;		Nothing
 13987 ;; This function is called by:
 13988 ;;		i1_APP_KeyboardProcessOutputReport
 13989 ;; This function uses a non-reentrant model
 13990 ;;
 13991                           
 13992     11D3                     i1_PS2Keyboard_SendCommand:	
 13993                           ;psect for function i1_PS2Keyboard_SendCommand
 13994                           
 13995                           
 13996                           ;incstack = 0
 13997                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 13998                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 13999     11D3  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14000                           
 14001                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14002     11D4  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14003     11D5  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
 14004                           
 14005                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14006     11D6  138B               	bcf	11,7	;volatile
 14007     11D7  0021               	movlb	1	; select bank1
 14008     11D8  120C               	bcf	12,4	;volatile
 14009     11D9  0022               	movlb	2	; select bank2
 14010     11DA  120C               	bcf	12,4	;volatile
 14011                           
 14012                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14013     11DB  30F0               	movlw	240
 14014     11DC                     u611_27:
 14015     11DC  3200               	nop2
 14016     11DD  0B89               	decfsz	9,f
 14017     11DE  29DC               	goto	u611_27
 14018     11DF  0021               	movlb	1	; select bank1
 14019     11E0  160C               	bsf	12,4	;volatile
 14020                           
 14021                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14022     11E1  0020               	movlb	0	; select bank0
 14023     11E2  01E9               	clrf	_keyboardCommandCount	;volatile
 14024                           
 14025                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14026     11E3  300C               	movlw	12
 14027     11E4  0022               	movlb	2	; select bank2
 14028     11E5  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14029                           
 14030                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14031     11E6  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14032     11E7  0021               	movlb	1	; select bank1
 14033     11E8  128C               	bcf	12,5	;volatile
 14034     11E9  0022               	movlb	2	; select bank2
 14035     11EA  128C               	bcf	12,5	;volatile
 14036                           
 14037                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14038     11EB  178B               	bsf	11,7	;volatile
 14039     11EC  0008               	return
 14040     11ED                     __end_ofi1_PS2Keyboard_SendCommand:
 14041                           
 14042                           	psect	text75
 14043     179B                     __ptext75:	
 14044 ;; *************** function _USBCtrlTrfTxService *****************
 14045 ;; Defined at:
 14046 ;;		line 1775 in file "usb/usb_device.c"
 14047 ;; Parameters:    Size  Location     Type
 14048 ;;		None
 14049 ;; Auto vars:     Size  Location     Type
 14050 ;;  byteToSend      1    2[COMMON] unsigned char 
 14051 ;; Return value:  Size  Location     Type
 14052 ;;                  1    wreg      void 
 14053 ;; Registers used:
 14054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14055 ;; Tracked objects:
 14056 ;;		On entry : 1E/0
 14057 ;;		On exit  : 1C/0
 14058 ;;		Unchanged: 0/0
 14059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14062 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14063 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14064 ;;Total ram usage:        3 bytes
 14065 ;; Hardware stack levels used: 1
 14066 ;; This function calls:
 14067 ;;		Nothing
 14068 ;; This function is called by:
 14069 ;;		_USBCtrlEPAllowDataStage
 14070 ;;		_USBCtrlTrfInHandler
 14071 ;; This function uses a non-reentrant model
 14072 ;;
 14073                           
 14074     179B                     _USBCtrlTrfTxService:	
 14075                           ;psect for function _USBCtrlTrfTxService
 14076                           
 14077                           
 14078                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14079                           
 14080                           ;incstack = 0
 14081                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14082     179B  3008               	movlw	8
 14083     179C  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14084                           
 14085                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14086     179D  3000               	movlw	0
 14087     179E  0021               	movlb	1	; select bank1
 14088     179F  026C               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14089     17A0  3008               	movlw	8
 14090     17A1  1903               	skipnz
 14091     17A2  026B               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14092     17A3  1803               	skipnc
 14093     17A4  2FB1               	goto	i1l579
 14094                           
 14095                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14096     17A5  086B               	movf	(_inPipes^(0+128)+3),w	;volatile
 14097     17A6  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14098                           
 14099                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14100     17A7  086E               	movf	_shortPacketStatus^(0+128),w	;volatile
 14101     17A8  1D03               	btfss	3,2
 14102     17A9  2FAC               	goto	i1l3883
 14103                           
 14104                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14105     17AA  3001               	movlw	1
 14106     17AB  2FB0               	goto	L15
 14107     17AC                     i1l3883:	
 14108                           ;usb/usb_device.c: 1794:         }
 14109                           
 14110     17AC  036E               	decf	_shortPacketStatus^(0+128),w	;volatile
 14111     17AD  1D03               	btfss	3,2
 14112     17AE  2FB1               	goto	i1l579
 14113                           
 14114                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14115     17AF  3002               	movlw	2
 14116     17B0                     L15:
 14117     17B0  00EE               	movwf	_shortPacketStatus^(0+128)	;volatile
 14118     17B1                     i1l579:	
 14119                           ;usb/usb_device.c: 1799:     }
 14120                           
 14121                           
 14122                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14123     17B1  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14124     17B2  00F0               	movwf	??_USBCtrlTrfTxService
 14125     17B3  01F1               	clrf	??_USBCtrlTrfTxService+1
 14126     17B4  0870               	movf	??_USBCtrlTrfTxService,w
 14127     17B5  02EB               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14128     17B6  0871               	movf	??_USBCtrlTrfTxService+1,w
 14129     17B7  3BEC               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14130                           
 14131                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14132     17B8  0020               	movlb	0	; select bank0
 14133     17B9  0861               	movf	_pBDTEntryIn,w
 14134     17BA  3E01               	addlw	1
 14135     17BB  00F0               	movwf	??_USBCtrlTrfTxService
 14136     17BC  3000               	movlw	0
 14137     17BD  3D62               	addwfc	_pBDTEntryIn+1,w
 14138     17BE  00F1               	movwf	??_USBCtrlTrfTxService+1
 14139     17BF  0870               	movf	??_USBCtrlTrfTxService,w
 14140     17C0  0086               	movwf	6
 14141     17C1  0871               	movf	??_USBCtrlTrfTxService+1,w
 14142     17C2  0087               	movwf	7
 14143     17C3  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14144     17C4  0081               	movwf	1
 14145                           
 14146                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14147     17C5  3048               	movlw	72
 14148     17C6  0022               	movlb	2	; select bank2
 14149     17C7  00DE               	movwf	_pDst^(0+256)
 14150                           
 14151                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14152     17C8  0021               	movlb	1	; select bank1
 14153     17C9  1C6A               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14154     17CA  2FE2               	goto	i1l3903
 14155     17CB  2FFC               	goto	i1l3913
 14156     17CC                     i1l3895:
 14157                           
 14158                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14159     17CC  0022               	movlb	2	; select bank2
 14160     17CD  085E               	movf	_pDst^(0+256),w
 14161     17CE  0086               	movwf	6
 14162     17CF  0187               	clrf	7
 14163     17D0  0021               	movlb	1	; select bank1
 14164     17D1  0868               	movf	_inPipes^(0+128),w	;volatile
 14165     17D2  0084               	movwf	4
 14166     17D3  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 14167     17D4  0085               	movwf	5
 14168     17D5  0800               	movf	0,w	;code access
 14169     17D6  0081               	movwf	1
 14170     17D7  3001               	movlw	1
 14171     17D8  07E8               	addwf	_inPipes^(0+128),f	;volatile
 14172     17D9  3000               	movlw	0
 14173     17DA  3DE9               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14174     17DB  3001               	movlw	1
 14175     17DC  00F0               	movwf	??_USBCtrlTrfTxService
 14176     17DD  0870               	movf	??_USBCtrlTrfTxService,w
 14177     17DE  0022               	movlb	2	; select bank2
 14178     17DF  07DE               	addwf	_pDst^(0+256),f
 14179                           
 14180                           ;usb/usb_device.c: 1818:             byteToSend--;
 14181     17E0  3001               	movlw	1
 14182     17E1  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14183     17E2                     i1l3903:
 14184                           
 14185                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14186     17E2  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14187     17E3  1903               	btfsc	3,2
 14188     17E4  0008               	return
 14189     17E5  2FCC               	goto	i1l3895
 14190     17E6                     i1l3905:
 14191                           
 14192                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14193     17E6  0022               	movlb	2	; select bank2
 14194     17E7  085E               	movf	_pDst^(0+256),w
 14195     17E8  0086               	movwf	6
 14196     17E9  0187               	clrf	7
 14197     17EA  0021               	movlb	1	; select bank1
 14198     17EB  0868               	movf	_inPipes^(0+128),w	;volatile
 14199     17EC  0084               	movwf	4
 14200     17ED  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 14201     17EE  0085               	movwf	5
 14202     17EF  0800               	movf	0,w	;code access
 14203     17F0  0081               	movwf	1
 14204     17F1  3001               	movlw	1
 14205     17F2  07E8               	addwf	_inPipes^(0+128),f	;volatile
 14206     17F3  3000               	movlw	0
 14207     17F4  3DE9               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14208     17F5  3001               	movlw	1
 14209     17F6  00F0               	movwf	??_USBCtrlTrfTxService
 14210     17F7  0870               	movf	??_USBCtrlTrfTxService,w
 14211     17F8  0022               	movlb	2	; select bank2
 14212     17F9  07DE               	addwf	_pDst^(0+256),f
 14213                           
 14214                           ;usb/usb_device.c: 1826:             byteToSend--;
 14215     17FA  3001               	movlw	1
 14216     17FB  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14217     17FC                     i1l3913:
 14218                           
 14219                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14220     17FC  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14221     17FD  1903               	btfsc	3,2
 14222     17FE  0008               	return
 14223     17FF  2FE6               	goto	i1l3905
 14224     1800                     __end_of_USBCtrlTrfTxService:
 14225                           
 14226                           	psect	text76
 14227     1FF4                     __ptext76:	
 14228 ;; *************** function _TMR2_ISR *****************
 14229 ;; Defined at:
 14230 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14231 ;; Parameters:    Size  Location     Type
 14232 ;;		None
 14233 ;; Auto vars:     Size  Location     Type
 14234 ;;		None
 14235 ;; Return value:  Size  Location     Type
 14236 ;;                  1    wreg      void 
 14237 ;; Registers used:
 14238 ;;		wreg, status,2, status,0, pclath, cstack
 14239 ;; Tracked objects:
 14240 ;;		On entry : 1F/0
 14241 ;;		On exit  : 0/0
 14242 ;;		Unchanged: 0/0
 14243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14248 ;;Total ram usage:        0 bytes
 14249 ;; Hardware stack levels used: 1
 14250 ;; Hardware stack levels required when called: 1
 14251 ;; This function calls:
 14252 ;;		NULL
 14253 ;;		_SysTimeInterrupt
 14254 ;;		_TMR2_DefaultInterruptHandler
 14255 ;; This function is called by:
 14256 ;;		_INTERRUPT_InterruptManager
 14257 ;; This function uses a non-reentrant model
 14258 ;;
 14259                           
 14260     1FF4                     _TMR2_ISR:	
 14261                           ;psect for function _TMR2_ISR
 14262                           
 14263                           
 14264                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 14265                           
 14266                           ;incstack = 0
 14267                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14268     1FF4  1091               	bcf	17,1	;volatile
 14269                           
 14270                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 14271     1FF5  0022               	movlb	2	; select bank2
 14272     1FF6  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14273     1FF7  0445               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14274     1FF8  1903               	btfsc	3,2
 14275     1FF9  0008               	return
 14276                           
 14277                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 14278     1FFA  0845               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14279     1FFB  008A               	movwf	10
 14280     1FFC  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14281     1FFD  000A               	callw
 14282     1FFE  319F               	pagesel	$
 14283     1FFF  0008               	return
 14284     2000                     __end_of_TMR2_ISR:
 14285                           
 14286                           	psect	text77
 14287     1FCB                     __ptext77:	
 14288 ;; *************** function _SysTimeInterrupt *****************
 14289 ;; Defined at:
 14290 ;;		line 24 in file "systime.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;		None
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;		None
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  1    wreg      void 
 14297 ;; Registers used:
 14298 ;;		wreg
 14299 ;; Tracked objects:
 14300 ;;		On entry : 1F/2
 14301 ;;		On exit  : 1F/2
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;Total ram usage:        0 bytes
 14309 ;; Hardware stack levels used: 1
 14310 ;; This function calls:
 14311 ;;		Nothing
 14312 ;; This function is called by:
 14313 ;;		_SysTime_Init
 14314 ;;		_TMR2_ISR
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318     1FCB                     _SysTimeInterrupt:	
 14319                           ;psect for function _SysTimeInterrupt
 14320                           
 14321                           
 14322                           ;systime.c: 26:     ++timeMs;
 14323                           
 14324                           ;incstack = 0
 14325                           ; Regs used in _SysTimeInterrupt: [wreg]
 14326     1FCB  3001               	movlw	1
 14327     1FCC  07A8               	addwf	_timeMs^(0+256),f
 14328     1FCD  3000               	movlw	0
 14329     1FCE  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 14330     1FCF  3000               	movlw	0
 14331     1FD0  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 14332     1FD1  3000               	movlw	0
 14333     1FD2  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 14334     1FD3  0008               	return
 14335     1FD4                     __end_of_SysTimeInterrupt:
 14336                           
 14337                           	psect	text78
 14338     0003                     __ptext78:	
 14339 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 14340 ;; Defined at:
 14341 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;		None
 14344 ;; Auto vars:     Size  Location     Type
 14345 ;;		None
 14346 ;; Return value:  Size  Location     Type
 14347 ;;                  1    wreg      void 
 14348 ;; Registers used:
 14349 ;;		None
 14350 ;; Tracked objects:
 14351 ;;		On entry : 1F/2
 14352 ;;		On exit  : 1F/2
 14353 ;;		Unchanged: 1F/0
 14354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;Total ram usage:        0 bytes
 14360 ;; Hardware stack levels used: 1
 14361 ;; This function calls:
 14362 ;;		Nothing
 14363 ;; This function is called by:
 14364 ;;		_TMR2_Initialize
 14365 ;;		_TMR2_ISR
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369     0003                     _TMR2_DefaultInterruptHandler:	
 14370                           ;psect for function _TMR2_DefaultInterruptHandler
 14371                           
 14372                           
 14373                           ;incstack = 0
 14374                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 14375     0003  0008               	return
 14376     0004                     __end_of_TMR2_DefaultInterruptHandler:
 14377                           
 14378                           	psect	text79
 14379     1FDE                     __ptext79:	
 14380 ;; *************** function _PIN_MANAGER_IOC *****************
 14381 ;; Defined at:
 14382 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;		None
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;		None
 14387 ;; Return value:  Size  Location     Type
 14388 ;;                  1    wreg      void 
 14389 ;; Registers used:
 14390 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 1F/7
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;Total ram usage:        0 bytes
 14401 ;; Hardware stack levels used: 1
 14402 ;; Hardware stack levels required when called: 4
 14403 ;; This function calls:
 14404 ;;		_IOCAF4_ISR
 14405 ;;		_IOCAF5_ISR
 14406 ;; This function is called by:
 14407 ;;		_INTERRUPT_InterruptManager
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411     1FDE                     _PIN_MANAGER_IOC:	
 14412                           ;psect for function _PIN_MANAGER_IOC
 14413                           
 14414                           
 14415                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 14416                           
 14417                           ;incstack = 0
 14418                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14419     1FDE  0027               	movlb	7	; select bank7
 14420     1FDF  1E13               	btfss	19,4	;volatile
 14421     1FE0  2FE4               	goto	i1l5833
 14422                           
 14423                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 14424     1FE1  3190  209B  319F   	fcall	_IOCAF4_ISR
 14425     1FE4                     i1l5833:
 14426                           
 14427                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 14428     1FE4  1E93               	btfss	19,5	;volatile
 14429     1FE5  0008               	return
 14430                           
 14431                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 14432     1FE6  3190  20A8         	fcall	_IOCAF5_ISR
 14433     1FE8  0008               	return
 14434     1FE9                     __end_of_PIN_MANAGER_IOC:
 14435                           
 14436                           	psect	text80
 14437     10A8                     __ptext80:	
 14438 ;; *************** function _IOCAF5_ISR *****************
 14439 ;; Defined at:
 14440 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 14441 ;; Parameters:    Size  Location     Type
 14442 ;;		None
 14443 ;; Auto vars:     Size  Location     Type
 14444 ;;		None
 14445 ;; Return value:  Size  Location     Type
 14446 ;;                  1    wreg      void 
 14447 ;; Registers used:
 14448 ;;		wreg, status,2, status,0, pclath, cstack
 14449 ;; Tracked objects:
 14450 ;;		On entry : 1F/7
 14451 ;;		On exit  : 1F/7
 14452 ;;		Unchanged: 0/0
 14453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14458 ;;Total ram usage:        0 bytes
 14459 ;; Hardware stack levels used: 1
 14460 ;; Hardware stack levels required when called: 2
 14461 ;; This function calls:
 14462 ;;		NULL
 14463 ;;		_IOCAF5_DefaultInterruptHandler
 14464 ;;		_PS2Keyboard_DataInterrupt
 14465 ;; This function is called by:
 14466 ;;		_PIN_MANAGER_IOC
 14467 ;; This function uses a non-reentrant model
 14468 ;;
 14469                           
 14470     10A8                     _IOCAF5_ISR:	
 14471                           ;psect for function _IOCAF5_ISR
 14472                           
 14473                           
 14474                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 14475                           
 14476                           ;incstack = 0
 14477                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 14478     10A8  0022               	movlb	2	; select bank2
 14479     10A9  086A               	movf	_IOCAF5_InterruptHandler^(0+256),w
 14480     10AA  046B               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 14481     10AB  1903               	btfsc	3,2
 14482     10AC  28B2               	goto	i1l4829
 14483                           
 14484                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 14485     10AD  086B               	movf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 14486     10AE  008A               	movwf	10
 14487     10AF  086A               	movf	_IOCAF5_InterruptHandler^(0+256),w
 14488     10B0  000A               	callw
 14489     10B1  3190               	pagesel	$
 14490     10B2                     i1l4829:
 14491                           
 14492                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 14493     10B2  0027               	movlb	7	; select bank7
 14494     10B3  1293               	bcf	19,5	;volatile
 14495     10B4  0008               	return
 14496     10B5                     __end_of_IOCAF5_ISR:
 14497                           
 14498                           	psect	text81
 14499     0002                     __ptext81:	
 14500 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 14501 ;; Defined at:
 14502 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 14503 ;; Parameters:    Size  Location     Type
 14504 ;;		None
 14505 ;; Auto vars:     Size  Location     Type
 14506 ;;		None
 14507 ;; Return value:  Size  Location     Type
 14508 ;;                  1    wreg      void 
 14509 ;; Registers used:
 14510 ;;		None
 14511 ;; Tracked objects:
 14512 ;;		On entry : 1F/2
 14513 ;;		On exit  : 1F/2
 14514 ;;		Unchanged: 1F/0
 14515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14520 ;;Total ram usage:        0 bytes
 14521 ;; Hardware stack levels used: 1
 14522 ;; This function calls:
 14523 ;;		Nothing
 14524 ;; This function is called by:
 14525 ;;		_PIN_MANAGER_Initialize
 14526 ;;		_IOCAF5_ISR
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530     0002                     _IOCAF5_DefaultInterruptHandler:	
 14531                           ;psect for function _IOCAF5_DefaultInterruptHandler
 14532                           
 14533                           
 14534                           ;incstack = 0
 14535                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 14536     0002  0008               	return
 14537     0003                     __end_of_IOCAF5_DefaultInterruptHandler:
 14538                           
 14539                           	psect	text82
 14540     10DC                     __ptext82:	
 14541 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 14542 ;; Defined at:
 14543 ;;		line 79 in file "ps2_keyboard.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;		None
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;		None
 14548 ;; Return value:  Size  Location     Type
 14549 ;;                  1    wreg      void 
 14550 ;; Registers used:
 14551 ;;		wreg, status,2, status,0, pclath, cstack
 14552 ;; Tracked objects:
 14553 ;;		On entry : 1F/2
 14554 ;;		On exit  : 1F/2
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;Total ram usage:        0 bytes
 14562 ;; Hardware stack levels used: 1
 14563 ;; Hardware stack levels required when called: 1
 14564 ;; This function calls:
 14565 ;;		_SysTime_GetCurrentTimeMs
 14566 ;; This function is called by:
 14567 ;;		_PS2Keyboard_Init
 14568 ;;		_IOCAF5_ISR
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572     10DC                     _PS2Keyboard_DataInterrupt:	
 14573                           ;psect for function _PS2Keyboard_DataInterrupt
 14574                           
 14575                           
 14576                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 14577                           
 14578                           ;incstack = 0
 14579                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 14580     10DC  0853               	movf	_keyboardState^(0+256),w
 14581     10DD  1D03               	btfss	3,2
 14582     10DE  0008               	return
 14583                           
 14584                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 14585     10DF  3001               	movlw	1
 14586     10E0  00D3               	movwf	_keyboardState^(0+256)	;volatile
 14587                           
 14588                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 14589     10E1  319F  27C2         	fcall	_SysTime_GetCurrentTimeMs
 14590     10E3  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 14591     10E4  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 14592     10E5  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 14593     10E6  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 14594     10E7  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 14595     10E8  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 14596     10E9  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 14597     10EA  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 14598     10EB  0008               	return
 14599     10EC                     __end_of_PS2Keyboard_DataInterrupt:
 14600                           
 14601                           	psect	text83
 14602     109B                     __ptext83:	
 14603 ;; *************** function _IOCAF4_ISR *****************
 14604 ;; Defined at:
 14605 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 14606 ;; Parameters:    Size  Location     Type
 14607 ;;		None
 14608 ;; Auto vars:     Size  Location     Type
 14609 ;;		None
 14610 ;; Return value:  Size  Location     Type
 14611 ;;                  1    wreg      void 
 14612 ;; Registers used:
 14613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14614 ;; Tracked objects:
 14615 ;;		On entry : 1F/7
 14616 ;;		On exit  : 1F/7
 14617 ;;		Unchanged: 0/0
 14618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;Total ram usage:        0 bytes
 14624 ;; Hardware stack levels used: 1
 14625 ;; Hardware stack levels required when called: 3
 14626 ;; This function calls:
 14627 ;;		NULL
 14628 ;;		_IOCAF4_DefaultInterruptHandler
 14629 ;;		_PS2Keyboard_ClockInterrupt
 14630 ;; This function is called by:
 14631 ;;		_PIN_MANAGER_IOC
 14632 ;; This function uses a non-reentrant model
 14633 ;;
 14634                           
 14635     109B                     _IOCAF4_ISR:	
 14636                           ;psect for function _IOCAF4_ISR
 14637                           
 14638                           
 14639                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 14640                           
 14641                           ;incstack = 0
 14642                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14643     109B  0022               	movlb	2	; select bank2
 14644     109C  086C               	movf	_IOCAF4_InterruptHandler^(0+256),w
 14645     109D  046D               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 14646     109E  1903               	btfsc	3,2
 14647     109F  28A5               	goto	i1l5745
 14648                           
 14649                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 14650     10A0  086D               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 14651     10A1  008A               	movwf	10
 14652     10A2  086C               	movf	_IOCAF4_InterruptHandler^(0+256),w
 14653     10A3  000A               	callw
 14654     10A4  3190               	pagesel	$
 14655     10A5                     i1l5745:
 14656                           
 14657                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 14658     10A5  0027               	movlb	7	; select bank7
 14659     10A6  1213               	bcf	19,4	;volatile
 14660     10A7  0008               	return
 14661     10A8                     __end_of_IOCAF4_ISR:
 14662                           
 14663                           	psect	text84
 14664     1F6D                     __ptext84:	
 14665 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 14666 ;; Defined at:
 14667 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;		None
 14670 ;; Auto vars:     Size  Location     Type
 14671 ;;		None
 14672 ;; Return value:  Size  Location     Type
 14673 ;;                  1    wreg      void 
 14674 ;; Registers used:
 14675 ;;		None
 14676 ;; Tracked objects:
 14677 ;;		On entry : 1F/2
 14678 ;;		On exit  : 1F/2
 14679 ;;		Unchanged: 1F/0
 14680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;Total ram usage:        0 bytes
 14686 ;; Hardware stack levels used: 1
 14687 ;; This function calls:
 14688 ;;		Nothing
 14689 ;; This function is called by:
 14690 ;;		_PIN_MANAGER_Initialize
 14691 ;;		_IOCAF4_ISR
 14692 ;; This function uses a non-reentrant model
 14693 ;;
 14694                           
 14695     1F6D                     _IOCAF4_DefaultInterruptHandler:	
 14696                           ;psect for function _IOCAF4_DefaultInterruptHandler
 14697                           
 14698                           
 14699                           ;incstack = 0
 14700                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 14701     1F6D  0008               	return
 14702     1F6E                     __end_of_IOCAF4_DefaultInterruptHandler:
 14703                           
 14704                           	psect	text85
 14705     04F1                     __ptext85:	
 14706 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 14707 ;; Defined at:
 14708 ;;		line 86 in file "ps2_keyboard.c"
 14709 ;; Parameters:    Size  Location     Type
 14710 ;;		None
 14711 ;; Auto vars:     Size  Location     Type
 14712 ;;  bit             1   13[COMMON] _Bool 
 14713 ;;  bitPos          1   12[COMMON] unsigned char 
 14714 ;; Return value:  Size  Location     Type
 14715 ;;                  1    wreg      void 
 14716 ;; Registers used:
 14717 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14718 ;; Tracked objects:
 14719 ;;		On entry : 1F/2
 14720 ;;		On exit  : 1F/2
 14721 ;;		Unchanged: 0/0
 14722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14725 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14726 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14727 ;;Total ram usage:        6 bytes
 14728 ;; Hardware stack levels used: 1
 14729 ;; Hardware stack levels required when called: 2
 14730 ;; This function calls:
 14731 ;;		_SysTime_GetCurrentTimeMs
 14732 ;;		i1_GenericQueue_Enqueue
 14733 ;; This function is called by:
 14734 ;;		_PS2Keyboard_Init
 14735 ;;		_IOCAF4_ISR
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739     04F1                     _PS2Keyboard_ClockInterrupt:	
 14740                           ;psect for function _PS2Keyboard_ClockInterrupt
 14741                           
 14742                           
 14743                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 14744                           
 14745                           ;incstack = 0
 14746                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14747     04F1  084B               	movf	_keyboardCommandBits^(0+256),w	;volatile
 14748     04F2  1903               	btfsc	3,2
 14749     04F3  2D34               	goto	i1l5679
 14750                           
 14751                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 14752     04F4  0020               	movlb	0	; select bank0
 14753     04F5  0869               	movf	_keyboardCommandCount,w	;volatile
 14754     04F6  1903               	btfsc	3,2
 14755     04F7  2D1C               	goto	i1l5671
 14756     04F8  3009               	movlw	9
 14757     04F9  0269               	subwf	_keyboardCommandCount,w	;volatile
 14758     04FA  1803               	skipnc
 14759     04FB  2D1C               	goto	i1l5671
 14760                           
 14761                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 14762     04FC  0869               	movf	_keyboardCommandCount,w	;volatile
 14763     04FD  3EFF               	addlw	255
 14764     04FE  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 14765                           
 14766                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 14767     04FF  0022               	movlb	2	; select bank2
 14768     0500  084C               	movf	_keyboardCommand^(0+256),w	;volatile
 14769     0501  0020               	movlb	0	; select bank0
 14770     0502  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14771     0503  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 14772     0504  2D06               	goto	u540_24
 14773     0505                     u540_25:
 14774     0505  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 14775     0506                     u540_24:
 14776     0506  0B89               	decfsz	9,f
 14777     0507  2D05               	goto	u540_25
 14778     0508  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 14779     0509  2D0C               	goto	u541_20
 14780     050A  3001               	movlw	1
 14781     050B  2D0D               	goto	u542_20
 14782     050C                     u541_20:
 14783     050C  3000               	movlw	0
 14784     050D                     u542_20:
 14785     050D  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 14786                           
 14787                           ;ps2_keyboard.c: 92:             if(bit) {
 14788     050E  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 14789     050F  1903               	btfsc	3,2
 14790     0510  2D1A               	goto	i1l1073
 14791                           
 14792                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 14793     0511  0022               	movlb	2	; select bank2
 14794     0512  168C               	bsf	12,5	;volatile
 14795                           
 14796                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 14797     0513  3001               	movlw	1
 14798     0514  0020               	movlb	0	; select bank0
 14799     0515  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14800     0516  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14801     0517  0022               	movlb	2	; select bank2
 14802     0518  07CA               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 14803                           
 14804                           ;ps2_keyboard.c: 95:             } else {
 14805     0519  2D2B               	goto	i1l5677
 14806     051A                     i1l1073:	
 14807                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 14808                           
 14809     051A  0022               	movlb	2	; select bank2
 14810     051B  2D23               	goto	i1l1078
 14811     051C                     i1l5671:
 14812     051C  3009               	movlw	9
 14813     051D  0669               	xorwf	_keyboardCommandCount,w	;volatile
 14814     051E  1D03               	btfss	3,2
 14815     051F  2D25               	goto	i1l5675
 14816                           
 14817                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 14818     0520  0022               	movlb	2	; select bank2
 14819     0521  1C4A               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 14820     0522  2D2A               	goto	L16
 14821     0523                     i1l1078:	
 14822                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 14823                           
 14824     0523  128C               	bcf	12,5	;volatile
 14825     0524  2D2B               	goto	i1l5677
 14826     0525                     i1l5675:	
 14827                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 14828                           
 14829     0525  300A               	movlw	10
 14830     0526  0669               	xorwf	_keyboardCommandCount,w	;volatile
 14831     0527  1D03               	btfss	3,2
 14832     0528  2D2B               	goto	i1l5677
 14833                           
 14834                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 14835     0529  0021               	movlb	1	; select bank1
 14836     052A                     L16:
 14837     052A  168C               	bsf	12,5	;volatile
 14838     052B                     i1l5677:
 14839                           
 14840                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 14841     052B  3001               	movlw	1
 14842     052C  0020               	movlb	0	; select bank0
 14843     052D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14844     052E  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14845     052F  07E9               	addwf	_keyboardCommandCount,f	;volatile
 14846                           
 14847                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 14848     0530  3001               	movlw	1
 14849     0531  0022               	movlb	2	; select bank2
 14850     0532  02CB               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 14851                           
 14852                           ;ps2_keyboard.c: 109:     } else {
 14853     0533  0008               	return
 14854     0534                     i1l5679:
 14855                           
 14856                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 14857     0534  319F  27C2  3184   	fcall	_SysTime_GetCurrentTimeMs
 14858     0537  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 14859     0538  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 14860     0539  0020               	movlb	0	; select bank0
 14861     053A  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14862     053B  0022               	movlb	2	; select bank2
 14863     053C  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 14864     053D  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 14865     053E  0020               	movlb	0	; select bank0
 14866     053F  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 14867     0540  0022               	movlb	2	; select bank2
 14868     0541  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 14869     0542  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 14870     0543  0020               	movlb	0	; select bank0
 14871     0544  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 14872     0545  0022               	movlb	2	; select bank2
 14873     0546  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 14874     0547  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 14875     0548  0020               	movlb	0	; select bank0
 14876     0549  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 14877     054A  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 14878     054B  1D03               	btfss	3,2
 14879     054C  2D57               	goto	i1l5681
 14880     054D  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 14881     054E  1D03               	btfss	3,2
 14882     054F  2D57               	goto	i1l5681
 14883     0550  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 14884     0551  1D03               	btfss	3,2
 14885     0552  2D57               	goto	i1l5681
 14886     0553  30FA               	movlw	250
 14887     0554  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 14888     0555  1C03               	btfss	3,0
 14889     0556  2DC3               	goto	i1l5733
 14890     0557                     i1l5681:
 14891                           
 14892                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 14893     0557  3001               	movlw	1
 14894     0558  0022               	movlb	2	; select bank2
 14895     0559  00D3               	movwf	_keyboardState^(0+256)	;volatile
 14896     055A  2DC3               	goto	i1l5733
 14897     055B                     i1l5683:
 14898                           
 14899                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 14900     055B  0022               	movlb	2	; select bank2
 14901     055C  01D2               	clrf	_keyboardIndexData^(0+256)	;volatile
 14902                           
 14903                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 14904     055D  01D1               	clrf	_keyboardOnesCount^(0+256)	;volatile
 14905                           
 14906                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 14907     055E  01E5               	clrf	_keyboardScanCode^(0+256)
 14908     055F                     i1l5685:
 14909                           
 14910                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 14911     055F  3002               	movlw	2
 14912     0560  2D99               	goto	L18
 14913     0561                     i1l5687:	
 14914                           ;ps2_keyboard.c: 119:                 break;
 14915                           
 14916                           
 14917                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 14918     0561  3000               	movlw	0
 14919     0562  1A8C               	btfsc	12,5	;volatile
 14920     0563  3001               	movlw	1
 14921     0564  0022               	movlb	2	; select bank2
 14922     0565  00CF               	movwf	_keyboardData^(0+256)	;volatile
 14923                           
 14924                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 14925     0566  084F               	movf	_keyboardData^(0+256),w	;volatile
 14926     0567  0020               	movlb	0	; select bank0
 14927     0568  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14928     0569  0022               	movlb	2	; select bank2
 14929     056A  0A52               	incf	_keyboardIndexData^(0+256),w	;volatile
 14930     056B  0020               	movlb	0	; select bank0
 14931     056C  2D6E               	goto	u548_24
 14932     056D                     u548_25:
 14933     056D  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 14934     056E                     u548_24:
 14935     056E  0B89               	decfsz	9,f
 14936     056F  2D6D               	goto	u548_25
 14937     0570  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14938     0571  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 14939     0572  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 14940     0573  0022               	movlb	2	; select bank2
 14941     0574  04E5               	iorwf	_keyboardScanCode^(0+256),f
 14942                           
 14943                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 14944     0575  084F               	movf	_keyboardData^(0+256),w	;volatile
 14945     0576  0020               	movlb	0	; select bank0
 14946     0577  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14947     0578  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14948     0579  0022               	movlb	2	; select bank2
 14949     057A  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 14950                           
 14951                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 14952     057B  3001               	movlw	1
 14953     057C  0020               	movlb	0	; select bank0
 14954     057D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14955     057E  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14956     057F  0022               	movlb	2	; select bank2
 14957     0580  07D2               	addwf	_keyboardIndexData^(0+256),f	;volatile
 14958                           
 14959                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 14960     0581  3008               	movlw	8
 14961     0582  0652               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 14962     0583  1D03               	btfss	3,2
 14963     0584  2D5F               	goto	i1l5685
 14964                           
 14965                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 14966     0585  3003               	movlw	3
 14967     0586  2D99               	goto	L18
 14968     0587                     i1l5701:	
 14969                           ;ps2_keyboard.c: 127:                 } else {
 14970                           
 14971                           
 14972                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 14973     0587  3000               	movlw	0
 14974     0588  1A8C               	btfsc	12,5	;volatile
 14975     0589  3001               	movlw	1
 14976     058A  0022               	movlb	2	; select bank2
 14977     058B  00CF               	movwf	_keyboardData^(0+256)	;volatile
 14978                           
 14979                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 14980     058C  084F               	movf	_keyboardData^(0+256),w	;volatile
 14981     058D  0020               	movlb	0	; select bank0
 14982     058E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 14983     058F  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 14984     0590  0022               	movlb	2	; select bank2
 14985     0591  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 14986                           
 14987                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 14988     0592  1C51               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 14989     0593  2D96               	goto	u550_20
 14990     0594  3001               	movlw	1
 14991     0595  2D97               	goto	u551_20
 14992     0596                     u550_20:
 14993     0596  3000               	movlw	0
 14994     0597                     u551_20:
 14995     0597  00D0               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 14996                           
 14997                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 14998     0598  3004               	movlw	4
 14999     0599                     L18:
 15000     0599  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15001                           
 15002                           ;ps2_keyboard.c: 136:                 break;
 15003     059A  2DDB               	goto	i1l5735
 15004     059B                     i1l5709:
 15005                           
 15006                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15007     059B  30E0               	movlw	224
 15008     059C  0022               	movlb	2	; select bank2
 15009     059D  0665               	xorwf	_keyboardScanCode^(0+256),w
 15010     059E  1D03               	btfss	3,2
 15011     059F  2DA3               	goto	i1l5713
 15012                           
 15013                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15014     05A0  3001               	movlw	1
 15015     05A1  00CE               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15016                           
 15017                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15018     05A2  2DC0               	goto	i1l5727
 15019     05A3                     i1l5713:
 15020     05A3  30F0               	movlw	240
 15021     05A4  0665               	xorwf	_keyboardScanCode^(0+256),w
 15022     05A5  1D03               	btfss	3,2
 15023     05A6  2DAA               	goto	i1l5717
 15024                           
 15025                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15026     05A7  3001               	movlw	1
 15027     05A8  00CD               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15028                           
 15029                           ;ps2_keyboard.c: 142:                 } else {
 15030     05A9  2DC0               	goto	i1l5727
 15031     05AA                     i1l5717:
 15032                           
 15033                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15034     05AA  084D               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15035     05AB  00E7               	movwf	(_keyboardScanCode^(0+256)+2)
 15036                           
 15037                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15038     05AC  084E               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15039     05AD  00E6               	movwf	(_keyboardScanCode^(0+256)+1)
 15040                           
 15041                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15042     05AE  0850               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15043     05AF  1903               	btfsc	3,2
 15044     05B0  2DBD               	goto	i1l5723
 15045                           
 15046                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15047     05B1  3091               	movlw	145
 15048     05B2  0020               	movlb	0	; select bank0
 15049     05B3  00D5               	movwf	i1GenericQueue_Enqueue@q
 15050     05B4  3023               	movlw	35
 15051     05B5  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15052     05B6  3065               	movlw	low _keyboardScanCode
 15053     05B7  00D7               	movwf	i1GenericQueue_Enqueue@item
 15054     05B8  3001               	movlw	high _keyboardScanCode
 15055     05B9  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15056     05BA  3188  207E  3184   	fcall	i1_GenericQueue_Enqueue
 15057     05BD                     i1l5723:
 15058                           
 15059                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15060     05BD  0022               	movlb	2	; select bank2
 15061     05BE  01CD               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15062                           
 15063                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15064     05BF  01CE               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15065     05C0                     i1l5727:
 15066                           
 15067                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15068     05C0  0022               	movlb	2	; select bank2
 15069     05C1  01D3               	clrf	_keyboardState^(0+256)	;volatile
 15070                           
 15071                           ;ps2_keyboard.c: 152:                 break;
 15072     05C2  2DDB               	goto	i1l5735
 15073     05C3                     i1l5733:
 15074     05C3  0022               	movlb	2	; select bank2
 15075     05C4  0853               	movf	_keyboardState^(0+256),w	;volatile
 15076     05C5  0020               	movlb	0	; select bank0
 15077     05C6  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15078     05C7  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15079                           
 15080                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15081                           ; Switch size 1, requested type "simple"
 15082                           ; Number of cases is 1, Range of values is 0 to 0
 15083                           ; switch strategies available:
 15084                           ; Name         Instructions Cycles
 15085                           ; simple_byte            4     3 (average)
 15086                           ; direct_byte            8     6 (fixed)
 15087                           ; jumptable            260     6 (fixed)
 15088                           ;	Chosen strategy is simple_byte
 15089     05C8  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15090     05C9  3A00               	xorlw	0	; case 0
 15091     05CA  1903               	skipnz
 15092     05CB  2DCD               	goto	i1l6029
 15093     05CC  2DC0               	goto	i1l5727
 15094     05CD                     i1l6029:
 15095                           
 15096                           ; Switch size 1, requested type "simple"
 15097                           ; Number of cases is 4, Range of values is 1 to 4
 15098                           ; switch strategies available:
 15099                           ; Name         Instructions Cycles
 15100                           ; simple_byte           13     7 (average)
 15101                           ; direct_byte           17     9 (fixed)
 15102                           ; jumptable            263     9 (fixed)
 15103                           ;	Chosen strategy is simple_byte
 15104     05CD  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15105     05CE  3A01               	xorlw	1	; case 1
 15106     05CF  1903               	skipnz
 15107     05D0  2D5B               	goto	i1l5683
 15108     05D1  3A03               	xorlw	3	; case 2
 15109     05D2  1903               	skipnz
 15110     05D3  2D61               	goto	i1l5687
 15111     05D4  3A01               	xorlw	1	; case 3
 15112     05D5  1903               	skipnz
 15113     05D6  2D87               	goto	i1l5701
 15114     05D7  3A07               	xorlw	7	; case 4
 15115     05D8  1903               	skipnz
 15116     05D9  2D9B               	goto	i1l5709
 15117     05DA  2DC0               	goto	i1l5727
 15118     05DB                     i1l5735:
 15119                           
 15120                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15121     05DB  319F  27C2         	fcall	_SysTime_GetCurrentTimeMs
 15122     05DD  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15123     05DE  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15124     05DF  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15125     05E0  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15126     05E1  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15127     05E2  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15128     05E3  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15129     05E4  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15130     05E5  0008               	return
 15131     05E6                     __end_of_PS2Keyboard_ClockInterrupt:
 15132                           
 15133                           	psect	text86
 15134     087E                     __ptext86:	
 15135 ;; *************** function i1_GenericQueue_Enqueue *****************
 15136 ;; Defined at:
 15137 ;;		line 19 in file "generic_queue.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  q               2    5[BANK0 ] PTR struct .
 15140 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15141 ;;  item            2    7[BANK0 ] PTR const void 
 15142 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateState@usbHidCode_2915(1), 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;		None
 15145 ;; Return value:  Size  Location     Type
 15146 ;;                  1    wreg      void 
 15147 ;; Registers used:
 15148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15149 ;; Tracked objects:
 15150 ;;		On entry : 1F/0
 15151 ;;		On exit  : 1F/0
 15152 ;;		Unchanged: 0/0
 15153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15154 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;Total ram usage:        7 bytes
 15159 ;; Hardware stack levels used: 1
 15160 ;; Hardware stack levels required when called: 1
 15161 ;; This function calls:
 15162 ;;		i1_GenericQueue_IsFull
 15163 ;;		i1___awmod
 15164 ;;		i1___wmul
 15165 ;;		i1_memcpy
 15166 ;; This function is called by:
 15167 ;;		_PS2Keyboard_ClockInterrupt
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171     087E                     i1_GenericQueue_Enqueue:	
 15172                           ;psect for function i1_GenericQueue_Enqueue
 15173                           
 15174                           
 15175                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15176                           
 15177                           ;incstack = 0
 15178                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15179     087E  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15180     087F  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15181     0880  0855               	movf	i1GenericQueue_Enqueue@q,w
 15182     0881  00F0               	movwf	i1GenericQueue_IsFull@q
 15183     0882  3191  2121  3188   	fcall	i1_GenericQueue_IsFull
 15184     0885  0870               	movf	?i1_GenericQueue_IsFull,w
 15185     0886  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15186     0887  1D03               	btfss	3,2
 15187     0888  0008               	return
 15188                           
 15189                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15190     0889  0855               	movf	i1GenericQueue_Enqueue@q,w
 15191     088A  3E5D               	addlw	93
 15192     088B  0086               	movwf	6
 15193     088C  3000               	movlw	0
 15194     088D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15195     088E  0087               	movwf	7
 15196     088F  0801               	movf	1,w
 15197     0890  00D9               	movwf	??i1_GenericQueue_Enqueue
 15198     0891  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15199     0892  0859               	movf	??i1_GenericQueue_Enqueue,w
 15200     0893  00F0               	movwf	i1___wmul@multiplier
 15201     0894  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15202     0895  00F1               	movwf	i1___wmul@multiplier+1
 15203     0896  0855               	movf	i1GenericQueue_Enqueue@q,w
 15204     0897  3E5A               	addlw	90
 15205     0898  0086               	movwf	6
 15206     0899  3000               	movlw	0
 15207     089A  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15208     089B  0087               	movwf	7
 15209     089C  3F40               	moviw [0]fsr1
 15210     089D  00F2               	movwf	i1___wmul@multiplicand
 15211     089E  3F41               	moviw [1]fsr1
 15212     089F  00F3               	movwf	i1___wmul@multiplicand+1
 15213     08A0  3191  21ED  3188   	fcall	i1___wmul
 15214     08A3  0870               	movf	?i1___wmul,w
 15215     08A4  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15216     08A5  00F6               	movwf	i1memcpy@d1
 15217     08A6  0871               	movf	?i1___wmul+1,w
 15218     08A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15219     08A8  00F7               	movwf	i1memcpy@d1+1
 15220     08A9  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15221     08AA  00F9               	movwf	i1memcpy@s1+1
 15222     08AB  0857               	movf	i1GenericQueue_Enqueue@item,w
 15223     08AC  00F8               	movwf	i1memcpy@s1
 15224     08AD  0855               	movf	i1GenericQueue_Enqueue@q,w
 15225     08AE  3E5A               	addlw	90
 15226     08AF  0086               	movwf	6
 15227     08B0  3000               	movlw	0
 15228     08B1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15229     08B2  0087               	movwf	7
 15230     08B3  3F40               	moviw [0]fsr1
 15231     08B4  00FA               	movwf	i1memcpy@n
 15232     08B5  3F41               	moviw [1]fsr1
 15233     08B6  00FB               	movwf	i1memcpy@n+1
 15234     08B7  3193  2351  3188   	fcall	i1_memcpy
 15235                           
 15236                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 15237     08BA  300F               	movlw	15
 15238     08BB  00F0               	movwf	i1___awmod@divisor
 15239     08BC  3000               	movlw	0
 15240     08BD  00F1               	movwf	i1___awmod@divisor+1
 15241     08BE  0855               	movf	i1GenericQueue_Enqueue@q,w
 15242     08BF  3E5D               	addlw	93
 15243     08C0  0086               	movwf	6
 15244     08C1  3000               	movlw	0
 15245     08C2  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15246     08C3  0087               	movwf	7
 15247     08C4  0801               	movf	1,w
 15248     08C5  3E01               	addlw	1
 15249     08C6  00F2               	movwf	i1___awmod@dividend
 15250     08C7  3000               	movlw	0
 15251     08C8  1803               	skipnc
 15252     08C9  3001               	movlw	1
 15253     08CA  00F3               	movwf	i1___awmod@dividend+1
 15254     08CB  3195  2567         	fcall	i1___awmod
 15255     08CD  0870               	movf	?i1___awmod,w
 15256     08CE  00D9               	movwf	??i1_GenericQueue_Enqueue
 15257     08CF  0855               	movf	i1GenericQueue_Enqueue@q,w
 15258     08D0  3E5D               	addlw	93
 15259     08D1  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 15260     08D2  3000               	movlw	0
 15261     08D3  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15262     08D4  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 15263     08D5  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15264     08D6  0086               	movwf	6
 15265     08D7  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 15266     08D8  0087               	movwf	7
 15267     08D9  0859               	movf	??i1_GenericQueue_Enqueue,w
 15268     08DA  0081               	movwf	1
 15269                           
 15270                           ;generic_queue.c: 23:         q->size++;
 15271     08DB  3001               	movlw	1
 15272     08DC  00D9               	movwf	??i1_GenericQueue_Enqueue
 15273     08DD  0855               	movf	i1GenericQueue_Enqueue@q,w
 15274     08DE  3E5E               	addlw	94
 15275     08DF  0086               	movwf	6
 15276     08E0  3000               	movlw	0
 15277     08E1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15278     08E2  0087               	movwf	7
 15279     08E3  0859               	movf	??i1_GenericQueue_Enqueue,w
 15280     08E4  0781               	addwf	1,f
 15281     08E5  0008               	return
 15282     08E6                     __end_ofi1_GenericQueue_Enqueue:
 15283                           
 15284                           	psect	text87
 15285     1351                     __ptext87:	
 15286 ;; *************** function i1_memcpy *****************
 15287 ;; Defined at:
 15288 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  d1              2    6[COMMON] PTR void 
 15291 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15292 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15293 ;;  s1              2    8[COMMON] PTR const void 
 15294 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2915(1), 
 15295 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15296 ;;  n               2   10[COMMON] unsigned int 
 15297 ;; Auto vars:     Size  Location     Type
 15298 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 15299 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2924(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2915(1), 
 15300 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 15301 ;;  d               2    0[BANK0 ] PTR unsigned char 
 15302 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15303 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15304 ;;  tmp             1    4[BANK0 ] unsigned char 
 15305 ;; Return value:  Size  Location     Type
 15306 ;;                  2    6[COMMON] PTR void 
 15307 ;; Registers used:
 15308 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15309 ;; Tracked objects:
 15310 ;;		On entry : 1F/0
 15311 ;;		On exit  : 1F/0
 15312 ;;		Unchanged: 0/0
 15313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15314 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15317 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15318 ;;Total ram usage:       11 bytes
 15319 ;; Hardware stack levels used: 1
 15320 ;; This function calls:
 15321 ;;		Nothing
 15322 ;; This function is called by:
 15323 ;;		_USBCtrlEPService
 15324 ;;		i1_GenericQueue_Enqueue
 15325 ;; This function uses a non-reentrant model
 15326 ;;
 15327                           
 15328     1351                     i1_memcpy:	
 15329                           ;psect for function i1_memcpy
 15330                           
 15331                           
 15332                           ;incstack = 0
 15333                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 15334     1351  0879               	movf	i1memcpy@s1+1,w
 15335     1352  00D3               	movwf	i1memcpy@s+1
 15336     1353  0878               	movf	i1memcpy@s1,w
 15337     1354  00D2               	movwf	i1memcpy@s
 15338     1355  0877               	movf	i1memcpy@d1+1,w
 15339     1356  00D1               	movwf	i1memcpy@d+1
 15340     1357  0876               	movf	i1memcpy@d1,w
 15341     1358  00D0               	movwf	i1memcpy@d
 15342     1359                     i1l4255:
 15343     1359  3001               	movlw	1
 15344     135A  02FA               	subwf	i1memcpy@n,f
 15345     135B  3000               	movlw	0
 15346     135C  3BFB               	subwfb	i1memcpy@n+1,f
 15347     135D  0A7A               	incf	i1memcpy@n,w
 15348     135E  1903               	btfsc	3,2
 15349     135F  0A7B               	incf	i1memcpy@n+1,w
 15350     1360  1903               	btfsc	3,2
 15351     1361  0008               	return
 15352     1362  0852               	movf	i1memcpy@s,w
 15353     1363  0086               	movwf	6
 15354     1364  0853               	movf	i1memcpy@s+1,w
 15355     1365  0087               	movwf	7
 15356     1366  0801               	movf	1,w
 15357     1367  00D4               	movwf	i1memcpy@tmp
 15358     1368  3001               	movlw	1
 15359     1369  07D2               	addwf	i1memcpy@s,f
 15360     136A  3000               	movlw	0
 15361     136B  3DD3               	addwfc	i1memcpy@s+1,f
 15362     136C  0850               	movf	i1memcpy@d,w
 15363     136D  0086               	movwf	6
 15364     136E  0851               	movf	i1memcpy@d+1,w
 15365     136F  0087               	movwf	7
 15366     1370  0854               	movf	i1memcpy@tmp,w
 15367     1371  0081               	movwf	1
 15368     1372  3001               	movlw	1
 15369     1373  07D0               	addwf	i1memcpy@d,f
 15370     1374  3000               	movlw	0
 15371     1375  3DD1               	addwfc	i1memcpy@d+1,f
 15372     1376  2B59               	goto	i1l4255
 15373     1377                     __end_ofi1_memcpy:
 15374                           
 15375                           	psect	text88
 15376     11ED                     __ptext88:	
 15377 ;; *************** function i1___wmul *****************
 15378 ;; Defined at:
 15379 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 15380 ;; Parameters:    Size  Location     Type
 15381 ;;  multiplier      2    0[COMMON] unsigned int 
 15382 ;;  multiplicand    2    2[COMMON] unsigned int 
 15383 ;; Auto vars:     Size  Location     Type
 15384 ;;  product         2    4[COMMON] unsigned int 
 15385 ;; Return value:  Size  Location     Type
 15386 ;;                  2    0[COMMON] unsigned int 
 15387 ;; Registers used:
 15388 ;;		wreg, status,2, status,0
 15389 ;; Tracked objects:
 15390 ;;		On entry : 1F/0
 15391 ;;		On exit  : 1F/0
 15392 ;;		Unchanged: 1F/0
 15393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;Total ram usage:        6 bytes
 15399 ;; Hardware stack levels used: 1
 15400 ;; This function calls:
 15401 ;;		Nothing
 15402 ;; This function is called by:
 15403 ;;		i1_GenericQueue_Enqueue
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407     11ED                     i1___wmul:	
 15408                           ;psect for function i1___wmul
 15409                           
 15410                           
 15411                           ;incstack = 0
 15412                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 15413     11ED  01F4               	clrf	i1___wmul@product
 15414     11EE  01F5               	clrf	i1___wmul@product+1
 15415     11EF                     i1l4197:
 15416     11EF  1C70               	btfss	i1___wmul@multiplier,0
 15417     11F0  29F5               	goto	i1l1243
 15418     11F1  0872               	movf	i1___wmul@multiplicand,w
 15419     11F2  07F4               	addwf	i1___wmul@product,f
 15420     11F3  0873               	movf	i1___wmul@multiplicand+1,w
 15421     11F4  3DF5               	addwfc	i1___wmul@product+1,f
 15422     11F5                     i1l1243:
 15423     11F5  3001               	movlw	1
 15424     11F6                     u331_25:
 15425     11F6  35F2               	lslf	i1___wmul@multiplicand,f
 15426     11F7  0DF3               	rlf	i1___wmul@multiplicand+1,f
 15427     11F8  0B89               	decfsz	9,f
 15428     11F9  29F6               	goto	u331_25
 15429     11FA  3001               	movlw	1
 15430     11FB                     u332_25:
 15431     11FB  36F1               	lsrf	i1___wmul@multiplier+1,f
 15432     11FC  0CF0               	rrf	i1___wmul@multiplier,f
 15433     11FD  0B89               	decfsz	9,f
 15434     11FE  29FB               	goto	u332_25
 15435     11FF  0870               	movf	i1___wmul@multiplier,w
 15436     1200  0471               	iorwf	i1___wmul@multiplier+1,w
 15437     1201  1D03               	btfss	3,2
 15438     1202  29EF               	goto	i1l4197
 15439     1203  0875               	movf	i1___wmul@product+1,w
 15440     1204  00F1               	movwf	?i1___wmul+1
 15441     1205  0874               	movf	i1___wmul@product,w
 15442     1206  00F0               	movwf	?i1___wmul
 15443     1207  0008               	return
 15444     1208                     __end_ofi1___wmul:
 15445                           
 15446                           	psect	text89
 15447     1567                     __ptext89:	
 15448 ;; *************** function i1___awmod *****************
 15449 ;; Defined at:
 15450 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;  divisor         2    0[COMMON] int 
 15453 ;;  dividend        2    2[COMMON] int 
 15454 ;; Auto vars:     Size  Location     Type
 15455 ;;  sign            1    6[COMMON] unsigned char 
 15456 ;;  counter         1    5[COMMON] unsigned char 
 15457 ;; Return value:  Size  Location     Type
 15458 ;;                  2    0[COMMON] int 
 15459 ;; Registers used:
 15460 ;;		wreg, status,2, status,0
 15461 ;; Tracked objects:
 15462 ;;		On entry : 1F/0
 15463 ;;		On exit  : 1F/0
 15464 ;;		Unchanged: 1F/0
 15465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15469 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;Total ram usage:        7 bytes
 15471 ;; Hardware stack levels used: 1
 15472 ;; This function calls:
 15473 ;;		Nothing
 15474 ;; This function is called by:
 15475 ;;		i1_GenericQueue_Enqueue
 15476 ;; This function uses a non-reentrant model
 15477 ;;
 15478                           
 15479     1567                     i1___awmod:	
 15480                           ;psect for function i1___awmod
 15481                           
 15482                           
 15483                           ;incstack = 0
 15484                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 15485     1567  01F6               	clrf	i1___awmod@sign
 15486     1568  1FF3               	btfss	i1___awmod@dividend+1,7
 15487     1569  2D71               	goto	i1l4217
 15488     156A  09F2               	comf	i1___awmod@dividend,f
 15489     156B  09F3               	comf	i1___awmod@dividend+1,f
 15490     156C  0AF2               	incf	i1___awmod@dividend,f
 15491     156D  1903               	skipnz
 15492     156E  0AF3               	incf	i1___awmod@dividend+1,f
 15493     156F  01F6               	clrf	i1___awmod@sign
 15494     1570  0AF6               	incf	i1___awmod@sign,f
 15495     1571                     i1l4217:
 15496     1571  1FF1               	btfss	i1___awmod@divisor+1,7
 15497     1572  2D78               	goto	i1l4221
 15498     1573  09F0               	comf	i1___awmod@divisor,f
 15499     1574  09F1               	comf	i1___awmod@divisor+1,f
 15500     1575  0AF0               	incf	i1___awmod@divisor,f
 15501     1576  1903               	skipnz
 15502     1577  0AF1               	incf	i1___awmod@divisor+1,f
 15503     1578                     i1l4221:
 15504     1578  0870               	movf	i1___awmod@divisor,w
 15505     1579  0471               	iorwf	i1___awmod@divisor+1,w
 15506     157A  1903               	btfsc	3,2
 15507     157B  2D9F               	goto	i1l4239
 15508     157C  01F5               	clrf	i1___awmod@counter
 15509     157D  0AF5               	incf	i1___awmod@counter,f
 15510     157E                     i1l4229:
 15511     157E  1BF1               	btfsc	i1___awmod@divisor+1,7
 15512     157F  2D8A               	goto	i1l4231
 15513     1580  3001               	movlw	1
 15514     1581                     u337_25:
 15515     1581  35F0               	lslf	i1___awmod@divisor,f
 15516     1582  0DF1               	rlf	i1___awmod@divisor+1,f
 15517     1583  0B89               	decfsz	9,f
 15518     1584  2D81               	goto	u337_25
 15519     1585  3001               	movlw	1
 15520     1586  00F4               	movwf	??i1___awmod
 15521     1587  0874               	movf	??i1___awmod,w
 15522     1588  07F5               	addwf	i1___awmod@counter,f
 15523     1589  2D7E               	goto	i1l4229
 15524     158A                     i1l4231:
 15525     158A  0871               	movf	i1___awmod@divisor+1,w
 15526     158B  0273               	subwf	i1___awmod@dividend+1,w
 15527     158C  1D03               	skipz
 15528     158D  2D90               	goto	u339_25
 15529     158E  0870               	movf	i1___awmod@divisor,w
 15530     158F  0272               	subwf	i1___awmod@dividend,w
 15531     1590                     u339_25:
 15532     1590  1C03               	skipc
 15533     1591  2D96               	goto	i1l4235
 15534     1592  0870               	movf	i1___awmod@divisor,w
 15535     1593  02F2               	subwf	i1___awmod@dividend,f
 15536     1594  0871               	movf	i1___awmod@divisor+1,w
 15537     1595  3BF3               	subwfb	i1___awmod@dividend+1,f
 15538     1596                     i1l4235:
 15539     1596  3001               	movlw	1
 15540     1597                     u340_25:
 15541     1597  36F1               	lsrf	i1___awmod@divisor+1,f
 15542     1598  0CF0               	rrf	i1___awmod@divisor,f
 15543     1599  0B89               	decfsz	9,f
 15544     159A  2D97               	goto	u340_25
 15545     159B  3001               	movlw	1
 15546     159C  02F5               	subwf	i1___awmod@counter,f
 15547     159D  1D03               	btfss	3,2
 15548     159E  2D8A               	goto	i1l4231
 15549     159F                     i1l4239:
 15550     159F  0876               	movf	i1___awmod@sign,w
 15551     15A0  1903               	btfsc	3,2
 15552     15A1  2DA7               	goto	i1l4243
 15553     15A2  09F2               	comf	i1___awmod@dividend,f
 15554     15A3  09F3               	comf	i1___awmod@dividend+1,f
 15555     15A4  0AF2               	incf	i1___awmod@dividend,f
 15556     15A5  1903               	skipnz
 15557     15A6  0AF3               	incf	i1___awmod@dividend+1,f
 15558     15A7                     i1l4243:
 15559     15A7  0873               	movf	i1___awmod@dividend+1,w
 15560     15A8  00F1               	movwf	?i1___awmod+1
 15561     15A9  0872               	movf	i1___awmod@dividend,w
 15562     15AA  00F0               	movwf	?i1___awmod
 15563     15AB  0008               	return
 15564     15AC                     __end_ofi1___awmod:
 15565                           
 15566                           	psect	text90
 15567     1121                     __ptext90:	
 15568 ;; *************** function i1_GenericQueue_IsFull *****************
 15569 ;; Defined at:
 15570 ;;		line 15 in file "generic_queue.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;  q               2    0[COMMON] PTR struct .
 15573 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;		None
 15576 ;; Return value:  Size  Location     Type
 15577 ;;                  2    0[COMMON] int 
 15578 ;; Registers used:
 15579 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15580 ;; Tracked objects:
 15581 ;;		On entry : 1F/0
 15582 ;;		On exit  : 1F/0
 15583 ;;		Unchanged: 1F/0
 15584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;Total ram usage:        4 bytes
 15590 ;; Hardware stack levels used: 1
 15591 ;; This function calls:
 15592 ;;		Nothing
 15593 ;; This function is called by:
 15594 ;;		i1_GenericQueue_Enqueue
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598     1121                     i1_GenericQueue_IsFull:	
 15599                           ;psect for function i1_GenericQueue_IsFull
 15600                           
 15601                           
 15602                           ;generic_queue.c: 16:     return (q->size == 15);
 15603                           
 15604                           ;incstack = 0
 15605                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 15606     1121  0870               	movf	i1GenericQueue_IsFull@q,w
 15607     1122  3E5E               	addlw	94
 15608     1123  0086               	movwf	6
 15609     1124  3000               	movlw	0
 15610     1125  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 15611     1126  0087               	movwf	7
 15612     1127  300F               	movlw	15
 15613     1128  0601               	xorwf	1,w
 15614     1129  1D03               	btfss	3,2
 15615     112A  292D               	goto	u328_20
 15616     112B  3001               	movlw	1
 15617     112C  292E               	goto	u329_20
 15618     112D                     u328_20:
 15619     112D  3000               	movlw	0
 15620     112E                     u329_20:
 15621     112E  00F2               	movwf	??i1_GenericQueue_IsFull
 15622     112F  01F3               	clrf	??i1_GenericQueue_IsFull+1
 15623     1130  0872               	movf	??i1_GenericQueue_IsFull,w
 15624     1131  00F0               	movwf	?i1_GenericQueue_IsFull
 15625     1132  0873               	movf	??i1_GenericQueue_IsFull+1,w
 15626     1133  00F1               	movwf	?i1_GenericQueue_IsFull+1
 15627     1134  0008               	return
 15628     1135                     __end_ofi1_GenericQueue_IsFull:
 15629                           
 15630                           	psect	text91
 15631     1FC2                     __ptext91:	
 15632 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 15633 ;; Defined at:
 15634 ;;		line 19 in file "systime.c"
 15635 ;; Parameters:    Size  Location     Type
 15636 ;;		None
 15637 ;; Auto vars:     Size  Location     Type
 15638 ;;		None
 15639 ;; Return value:  Size  Location     Type
 15640 ;;                  4    0[COMMON] unsigned long 
 15641 ;; Registers used:
 15642 ;;		wreg
 15643 ;; Tracked objects:
 15644 ;;		On entry : 1F/2
 15645 ;;		On exit  : 1F/2
 15646 ;;		Unchanged: 0/0
 15647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15648 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;Total ram usage:        4 bytes
 15653 ;; Hardware stack levels used: 1
 15654 ;; This function calls:
 15655 ;;		Nothing
 15656 ;; This function is called by:
 15657 ;;		_PS2Keyboard_DataInterrupt
 15658 ;;		_PS2Keyboard_ClockInterrupt
 15659 ;; This function uses a non-reentrant model
 15660 ;;
 15661                           
 15662     1FC2                     _SysTime_GetCurrentTimeMs:	
 15663                           ;psect for function _SysTime_GetCurrentTimeMs
 15664                           
 15665                           
 15666                           ;systime.c: 21:     return timeMs;
 15667                           
 15668                           ;incstack = 0
 15669                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 15670     1FC2  082B               	movf	(_timeMs+3)^(0+256),w
 15671     1FC3  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 15672     1FC4  082A               	movf	(_timeMs+2)^(0+256),w
 15673     1FC5  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 15674     1FC6  0829               	movf	(_timeMs+1)^(0+256),w
 15675     1FC7  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 15676     1FC8  0828               	movf	_timeMs^(0+256),w
 15677     1FC9  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 15678     1FCA  0008               	return
 15679     1FCB                     __end_of_SysTime_GetCurrentTimeMs:
 15680                           
 15681                           	psect	text92
 15682     1276                     __ptext92:	
 15683 ;; *************** function _EUSART_Transmit_ISR *****************
 15684 ;; Defined at:
 15685 ;;		line 197 in file "mcc_generated_files/eusart.c"
 15686 ;; Parameters:    Size  Location     Type
 15687 ;;		None
 15688 ;; Auto vars:     Size  Location     Type
 15689 ;;		None
 15690 ;; Return value:  Size  Location     Type
 15691 ;;                  1    wreg      void 
 15692 ;; Registers used:
 15693 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15694 ;; Tracked objects:
 15695 ;;		On entry : 1F/2
 15696 ;;		On exit  : 1C/0
 15697 ;;		Unchanged: 0/0
 15698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;Total ram usage:        1 bytes
 15704 ;; Hardware stack levels used: 1
 15705 ;; This function calls:
 15706 ;;		Nothing
 15707 ;; This function is called by:
 15708 ;;		_EUSART_Initialize
 15709 ;;		_INTERRUPT_InterruptManager
 15710 ;; This function uses a non-reentrant model
 15711 ;;
 15712                           
 15713     1276                     _EUSART_Transmit_ISR:	
 15714                           ;psect for function _EUSART_Transmit_ISR
 15715                           
 15716                           
 15717                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 15718                           
 15719                           ;incstack = 0
 15720                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 15721     1276  3008               	movlw	8
 15722     1277  0262               	subwf	_eusartTxBufferRemaining^(0+256),w
 15723     1278  1803               	skipnc
 15724     1279  2A90               	goto	i1l305
 15725                           
 15726                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 15727     127A  0863               	movf	_eusartTxTail^(0+256),w
 15728     127B  3EC2               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 15729     127C  0086               	movwf	6
 15730     127D  3001               	movlw	1	; select bank3/4
 15731     127E  0087               	movwf	7
 15732     127F  0801               	movf	1,w
 15733     1280  0023               	movlb	3	; select bank3
 15734     1281  009A               	movwf	26	;volatile
 15735     1282  3001               	movlw	1
 15736     1283  00F0               	movwf	??_EUSART_Transmit_ISR
 15737     1284  0870               	movf	??_EUSART_Transmit_ISR,w
 15738     1285  0022               	movlb	2	; select bank2
 15739     1286  07E3               	addwf	_eusartTxTail^(0+256),f	;volatile
 15740                           
 15741                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 15742     1287  3008               	movlw	8
 15743     1288  0263               	subwf	_eusartTxTail^(0+256),w
 15744     1289  1803               	btfsc	3,0
 15745                           
 15746                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 15747     128A  01E3               	clrf	_eusartTxTail^(0+256)	;volatile
 15748                           
 15749                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 15750     128B  3001               	movlw	1
 15751     128C  00F0               	movwf	??_EUSART_Transmit_ISR
 15752     128D  0870               	movf	??_EUSART_Transmit_ISR,w
 15753     128E  07E2               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 15754                           
 15755                           ;mcc_generated_files/eusart.c: 209:     }
 15756     128F  0008               	return
 15757     1290                     i1l305:	
 15758                           ;mcc_generated_files/eusart.c: 210:     else
 15759                           
 15760                           
 15761                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 15762     1290  0021               	movlb	1	; select bank1
 15763     1291  1211               	bcf	17,4	;volatile
 15764     1292  0008               	return
 15765     1293                     __end_of_EUSART_Transmit_ISR:
 15766                           
 15767                           	psect	text93
 15768     1436                     __ptext93:	
 15769 ;; *************** function _EUSART_Receive_ISR *****************
 15770 ;; Defined at:
 15771 ;;		line 216 in file "mcc_generated_files/eusart.c"
 15772 ;; Parameters:    Size  Location     Type
 15773 ;;		None
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;		None
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  1    wreg      void 
 15778 ;; Registers used:
 15779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : 1F/2
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;Total ram usage:        0 bytes
 15790 ;; Hardware stack levels used: 1
 15791 ;; Hardware stack levels required when called: 2
 15792 ;; This function calls:
 15793 ;;		NULL
 15794 ;;		_EUSART_DefaultErrorHandler
 15795 ;;		_EUSART_DefaultFramingErrorHandler
 15796 ;;		_EUSART_DefaultOverrunErrorHandler
 15797 ;;		_EUSART_RxDataHandler
 15798 ;; This function is called by:
 15799 ;;		_EUSART_Initialize
 15800 ;;		_INTERRUPT_InterruptManager
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804     1436                     _EUSART_Receive_ISR:	
 15805                           ;psect for function _EUSART_Receive_ISR
 15806                           
 15807                           
 15808                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 15809                           
 15810                           ;incstack = 0
 15811                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15812     1436  0021               	movlb	1	; select bank1
 15813     1437  086F               	movf	_eusartRxHead^(0+128),w	;volatile
 15814     1438  3EB2               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15815     1439  0086               	movwf	6
 15816     143A  3001               	movlw	1	; select bank3/4
 15817     143B  0087               	movwf	7
 15818     143C  0181               	clrf	1
 15819                           
 15820                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 15821     143D  0023               	movlb	3	; select bank3
 15822     143E  1D1D               	btfss	29,2	;volatile
 15823     143F  2C4D               	goto	i1l5431
 15824                           
 15825                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 15826     1440  0021               	movlb	1	; select bank1
 15827     1441  086F               	movf	_eusartRxHead^(0+128),w	;volatile
 15828     1442  3EB2               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15829     1443  0086               	movwf	6
 15830     1444  3001               	movlw	1	; select bank3/4
 15831     1445  0087               	movwf	7
 15832     1446  1481               	bsf	1,1
 15833                           
 15834                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 15835     1447  0022               	movlb	2	; select bank2
 15836     1448  0843               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 15837     1449  008A               	movwf	10
 15838     144A  0842               	movf	_EUSART_FramingErrorHandler^(0+256),w
 15839     144B  000A               	callw
 15840     144C  3194               	pagesel	$
 15841     144D                     i1l5431:
 15842                           
 15843                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 15844     144D  0023               	movlb	3	; select bank3
 15845     144E  1C9D               	btfss	29,1	;volatile
 15846     144F  2C5D               	goto	i1l5437
 15847                           
 15848                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 15849     1450  0021               	movlb	1	; select bank1
 15850     1451  086F               	movf	_eusartRxHead^(0+128),w	;volatile
 15851     1452  3EB2               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15852     1453  0086               	movwf	6
 15853     1454  3001               	movlw	1	; select bank3/4
 15854     1455  0087               	movwf	7
 15855     1456  1501               	bsf	1,2
 15856                           
 15857                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 15858     1457  0022               	movlb	2	; select bank2
 15859     1458  0841               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 15860     1459  008A               	movwf	10
 15861     145A  0840               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 15862     145B  000A               	callw
 15863     145C  3194               	pagesel	$
 15864     145D                     i1l5437:
 15865                           
 15866                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 15867     145D  0021               	movlb	1	; select bank1
 15868     145E  086F               	movf	_eusartRxHead^(0+128),w	;volatile
 15869     145F  3EB2               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 15870     1460  0086               	movwf	6
 15871     1461  3001               	movlw	1	; select bank3/4
 15872     1462  0087               	movwf	7
 15873     1463  0801               	movf	1,w
 15874     1464  1903               	btfsc	3,2
 15875     1465  2C6D               	goto	i1l5441
 15876                           
 15877                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 15878     1466  0022               	movlb	2	; select bank2
 15879     1467  083F               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 15880     1468  008A               	movwf	10
 15881     1469  083E               	movf	_EUSART_ErrorHandler^(0+256),w
 15882     146A  000A               	callw
 15883     146B  3194               	pagesel	$
 15884                           
 15885                           ;mcc_generated_files/eusart.c: 233:     } else {
 15886     146C  0008               	return
 15887     146D                     i1l5441:
 15888                           
 15889                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 15890     146D  3191  218A         	fcall	_EUSART_RxDataHandler
 15891     146F  0008               	return
 15892     1470                     __end_of_EUSART_Receive_ISR:
 15893                           
 15894                           	psect	text94
 15895     1F77                     __ptext94:	
 15896 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 15897 ;; Defined at:
 15898 ;;		line 252 in file "mcc_generated_files/eusart.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;		None
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;		None
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  1    wreg      void 
 15905 ;; Registers used:
 15906 ;;		None
 15907 ;; Tracked objects:
 15908 ;;		On entry : 1F/2
 15909 ;;		On exit  : 1F/3
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15916 ;;Total ram usage:        0 bytes
 15917 ;; Hardware stack levels used: 1
 15918 ;; This function calls:
 15919 ;;		Nothing
 15920 ;; This function is called by:
 15921 ;;		_EUSART_Initialize
 15922 ;;		_EUSART_Receive_ISR
 15923 ;; This function uses a non-reentrant model
 15924 ;;
 15925                           
 15926     1F77                     _EUSART_DefaultOverrunErrorHandler:	
 15927                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 15928                           
 15929                           
 15930                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 15931                           
 15932                           ;incstack = 0
 15933                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 15934     1F77  0023               	movlb	3	; select bank3
 15935     1F78  121D               	bcf	29,4	;volatile
 15936                           
 15937                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 15938     1F79  161D               	bsf	29,4	;volatile
 15939     1F7A  0008               	return
 15940     1F7B                     __end_of_EUSART_DefaultOverrunErrorHandler:
 15941                           
 15942                           	psect	text95
 15943     1F6C                     __ptext95:	
 15944 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 15945 ;; Defined at:
 15946 ;;		line 250 in file "mcc_generated_files/eusart.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;		None
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;		None
 15951 ;; Return value:  Size  Location     Type
 15952 ;;                  1    wreg      void 
 15953 ;; Registers used:
 15954 ;;		None
 15955 ;; Tracked objects:
 15956 ;;		On entry : 1F/2
 15957 ;;		On exit  : 1F/2
 15958 ;;		Unchanged: 1F/0
 15959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;Total ram usage:        0 bytes
 15965 ;; Hardware stack levels used: 1
 15966 ;; This function calls:
 15967 ;;		Nothing
 15968 ;; This function is called by:
 15969 ;;		_EUSART_Initialize
 15970 ;;		_EUSART_Receive_ISR
 15971 ;; This function uses a non-reentrant model
 15972 ;;
 15973                           
 15974     1F6C                     _EUSART_DefaultFramingErrorHandler:	
 15975                           ;psect for function _EUSART_DefaultFramingErrorHandler
 15976                           
 15977                           
 15978                           ;incstack = 0
 15979                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 15980     1F6C  0008               	return
 15981     1F6D                     __end_of_EUSART_DefaultFramingErrorHandler:
 15982                           
 15983                           	psect	text96
 15984     1F6E                     __ptext96:	
 15985 ;; *************** function _EUSART_DefaultErrorHandler *****************
 15986 ;; Defined at:
 15987 ;;		line 260 in file "mcc_generated_files/eusart.c"
 15988 ;; Parameters:    Size  Location     Type
 15989 ;;		None
 15990 ;; Auto vars:     Size  Location     Type
 15991 ;;		None
 15992 ;; Return value:  Size  Location     Type
 15993 ;;                  1    wreg      void 
 15994 ;; Registers used:
 15995 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15996 ;; Tracked objects:
 15997 ;;		On entry : 1F/2
 15998 ;;		On exit  : 1F/2
 15999 ;;		Unchanged: 0/0
 16000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;Total ram usage:        0 bytes
 16006 ;; Hardware stack levels used: 1
 16007 ;; Hardware stack levels required when called: 1
 16008 ;; This function calls:
 16009 ;;		_EUSART_RxDataHandler
 16010 ;; This function is called by:
 16011 ;;		_EUSART_Initialize
 16012 ;;		_EUSART_Receive_ISR
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016     1F6E                     _EUSART_DefaultErrorHandler:	
 16017                           ;psect for function _EUSART_DefaultErrorHandler
 16018                           
 16019                           
 16020                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16021                           
 16022                           ;incstack = 0
 16023                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16024     1F6E  3191  218A         	fcall	_EUSART_RxDataHandler
 16025     1F70  0008               	return
 16026     1F71                     __end_of_EUSART_DefaultErrorHandler:
 16027                           
 16028                           	psect	text97
 16029     118A                     __ptext97:	
 16030 ;; *************** function _EUSART_RxDataHandler *****************
 16031 ;; Defined at:
 16032 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16033 ;; Parameters:    Size  Location     Type
 16034 ;;		None
 16035 ;; Auto vars:     Size  Location     Type
 16036 ;;		None
 16037 ;; Return value:  Size  Location     Type
 16038 ;;                  1    wreg      void 
 16039 ;; Registers used:
 16040 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16041 ;; Tracked objects:
 16042 ;;		On entry : 1C/1
 16043 ;;		On exit  : 1F/2
 16044 ;;		Unchanged: 0/0
 16045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;Total ram usage:        1 bytes
 16051 ;; Hardware stack levels used: 1
 16052 ;; This function calls:
 16053 ;;		Nothing
 16054 ;; This function is called by:
 16055 ;;		_EUSART_Receive_ISR
 16056 ;;		_EUSART_DefaultErrorHandler
 16057 ;; This function uses a non-reentrant model
 16058 ;;
 16059                           
 16060     118A                     _EUSART_RxDataHandler:	
 16061                           ;psect for function _EUSART_RxDataHandler
 16062                           
 16063                           
 16064                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16065                           
 16066                           ;incstack = 0
 16067                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16068     118A  0021               	movlb	1	; select bank1
 16069     118B  086F               	movf	_eusartRxHead^(0+128),w
 16070     118C  3EBA               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16071     118D  0086               	movwf	6
 16072     118E  3001               	movlw	1	; select bank3/4
 16073     118F  0087               	movwf	7
 16074     1190  0023               	movlb	3	; select bank3
 16075     1191  0819               	movf	25,w	;volatile
 16076     1192  0081               	movwf	1
 16077     1193  3001               	movlw	1
 16078     1194  00F0               	movwf	??_EUSART_RxDataHandler
 16079     1195  0870               	movf	??_EUSART_RxDataHandler,w
 16080     1196  0021               	movlb	1	; select bank1
 16081     1197  07EF               	addwf	_eusartRxHead^(0+128),f	;volatile
 16082                           
 16083                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16084     1198  3008               	movlw	8
 16085     1199  026F               	subwf	_eusartRxHead^(0+128),w
 16086     119A  1803               	btfsc	3,0
 16087                           
 16088                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16089     119B  01EF               	clrf	_eusartRxHead^(0+128)	;volatile
 16090                           
 16091                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16092     119C  3001               	movlw	1
 16093     119D  00F0               	movwf	??_EUSART_RxDataHandler
 16094     119E  0870               	movf	??_EUSART_RxDataHandler,w
 16095     119F  0022               	movlb	2	; select bank2
 16096     11A0  07E0               	addwf	_eusartRxCount^(0+256),f	;volatile
 16097     11A1  0008               	return
 16098     11A2                     __end_of_EUSART_RxDataHandler:
 16099     007E                     btemp	set	126	;btemp
 16100     007E                     int$flags	set	126
 16101     007E                     wtemp0	set	126
 16102     232C                     
 16103                           	psect	config
 16104                           
 16105                           ;Config register CONFIG1 @ 0x8007
 16106                           ;	Oscillator Selection Bits
 16107                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16108                           ;	Watchdog Timer Enable
 16109                           ;	WDTE = OFF, WDT disabled
 16110                           ;	Power-up Timer Enable
 16111                           ;	PWRTE = OFF, PWRT disabled
 16112                           ;	MCLR Pin Function Select
 16113                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16114                           ;	Flash Program Memory Code Protection
 16115                           ;	CP = OFF, Program memory code protection is disabled
 16116                           ;	Brown-out Reset Enable
 16117                           ;	BOREN = ON, Brown-out Reset enabled
 16118                           ;	Clock Out Enable
 16119                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16120                           ;	Internal/External Switchover Mode
 16121                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16122                           ;	Fail-Safe Clock Monitor Enable
 16123                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16124     8007                     	org	32775
 16125     8007  3FE4               	dw	16356
 16126                           
 16127                           ;Config register CONFIG2 @ 0x8008
 16128                           ;	Flash Memory Self-Write Protection
 16129                           ;	WRT = OFF, Write protection off
 16130                           ;	CPU System Clock Selection Bit
 16131                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16132                           ;	USB Low Speed Clock Selection bit
 16133                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16134                           ;	PLL Multiplier Selection Bit
 16135                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16136                           ;	PLL Enable Bit
 16137                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16138                           ;	Stack Overflow/Underflow Reset Enable
 16139                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16140                           ;	Brown-out Reset Voltage Selection
 16141                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16142                           ;	Low-Power Brown Out Reset
 16143                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16144                           ;	Low-Voltage Programming Enable
 16145                           ;	LVP = ON, Low-voltage programming enabled
 16146     8008                     	org	32776
 16147     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    601
    Data        0
    BSS         145
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     64      72
    BANK2            79      0      77
    BANK3            80      0      49
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2916(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2916(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2916(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2915(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2924(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2671$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2671$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[28]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   48698
                                             48 BANK1     16    16      0
                  _APP_KeyboardTasks
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    8747
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    8286
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   37281
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    8112
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   27075
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    9513
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    8476
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7803
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4412
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   0     0      0   13132
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     40      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4D       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      31      11       61.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F4      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F4      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 07 10:51:47 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1FC2  
                                   _USB_SD_Ptr 18CA                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 123E                                  _USBDeviceInit 0EA1  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0BF2  
             __end_of_USBHIDCBSetReportHandler 10CF                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l110 10D8  
                  __end_of_USBStdGetDscHandler 0B77                                            l541 11CA  
                                          l908 02EF                                            _BDT 0020  
                     _GenericQueue_CopyToArray 1739                                            _PR2 001B  
                                          _UIE 0E92                                            _UIR 0E90  
                       ??_EUSART_RxDataHandler 0070                                     _USBSuspend 11A2  
               ?_EUSART_SetFramingErrorHandler 00A8                                   ___awmod@sign 00AE  
                         USBStdSetCfgHandler@i 0059                           USBStdSetCfgHandler@p 0056  
                              _TMR2_Initialize 10FD                                            wreg 0009  
                               _USBDeviceTasks 06DA                            ?_USBCheckHIDRequest 0070  
                          _GenericQueue_IsFull 1135                                 _USBDeviceState 006C  
           __end_of_IOCAF5_SetInterruptHandler 1F92                     _IOCAF5_SetInterruptHandler 1F8A  
                            main@scanCodeValid 00E3                    ??_PS2Keyboard_DataInterrupt 0074  
                        ??_USBCtrlTrfRxService 0074                            _GenericQueue_Remove 05E6  
                     USBEnableEndpoint@options 0077                    ?_PS2Keyboard_GetLastCommand 0070  
                                         l1243 1210                                           l1172 1742  
                   USBConfigureEndpoint@handle 0076                                           l4433 1428  
                                         l4425 141D                                           l5073 0D0C  
                                         l5065 0CFC                                           l4427 1406  
                                         l4611 12C3                                           l5083 0D53  
                                         l4429 1421                                           l5085 0D6B  
                                         l4471 15C3                                           l4463 15BD  
                                         l4439 120A                                           l4367 137F  
                                         l5095 1177                                           l4473 15CF  
                                         l4481 15E4                                           l4633 06CA  
                                         l4459 15B6                                           l4651 1737  
                                         l4485 15EC                                           l4477 15DB  
                                         l4629 06A0                                           l5461 1273  
                                         l4647 1727                                           l5463 1274  
                                         l4921 0EE3                                           l5803 015E  
                                         l5821 0199                                           l5813 017F  
                                         l4773 10EE                                           l5901 03C1  
                                         l4909 0EC5                                           l4943 0EFC  
                                         l5825 01A6                                           l5817 018C  
                                         l5761 00A2                                           l4777 10F4  
                                         l5905 03DA                                           l5771 00CA  
                                         l5763 00B0                                           l5781 00FA  
                                         l5757 0095                                           l5853 0304  
                                         l4893 0EAC                                           l5767 00BD  
                                         l5775 00E6                                           l5863 0331  
                                         l5793 0121                                           l5785 0107  
                                         l4985 11CF                                           l5961 13F9  
                                         l5795 012F                                           l5883 0375  
                                         l5867 0348                                           l5859 031F  
                                         l5963 13FA                                           l5955 13EE  
                                         l5789 0114                                           l5893 0396  
                                         l5887 037D                                           l5879 0365  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u3600 111A  
                                         u3610 1141                                           u3620 1142  
                                         u4245 0EC8                                           u6107 1249  
                                         u3590 1119                                           u3735 15C6  
                                         u6080 13EB                                           u3755 15D5  
                                         u3675 1211                                           u3765 15DC  
                                         u3685 1216                                           u5715 014D  
                        ??_USBCtrlTrfTxService 0070                                           u5940 03A4  
                                         u5925 0391                                           u5845 02F9  
                                         _UCFG 0E91                                           u5865 0328  
                                         _UEP0 0E98                                           _UEP1 0E99  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
       USBStdFeatureReqHandler@current_ep_data 005A                                           _pDst 015E  
                                         _main 13CD                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                _USBDeviceAttach 11BA  
                    ?_SysTime_GetCurrentTimeMs 0070                                           btemp 007E  
                                         start 003D                                   _SysTime_Init 1084  
                         _GenericQueue_Dequeue 09B7                           _GenericQueue_IsEmpty 110E  
                         ??_USBCheckHIDRequest 0074                           ?_GenericQueue_IsFull 00A8  
                   __end_of_USBCheckStdRequest 09B7                         ??_USBCtrlTrfOutHandler 007A  
                            ___bmul@multiplier 00AB                                  _LocalSOFCount 0136  
                         _GenericQueue_Enqueue 08E6                APP_KeyboardUpdateState@scanCode 00D0  
                          USBDeviceInit@i_1369 00AE                      ??_USBStdFeatureReqHandler 0056  
                         ?_GenericQueue_Remove 00C0                       ?_APP_KeyboardUpdateState 0070  
                     GenericQueue_Dequeue@item 00C2                       ??_USBStdGetStatusHandler 0070  
                               ?_USBDeviceInit 0070                  __end_of_OSCILLATOR_Initialize 10DC  
              __end_of_PS2Keyboard_GetScanCode 1276                                          ?_main 0070  
                              __end_of___awmod 15F1                         __end_of_USBDeviceTasks 07AD  
                                        _T2CON 001C                      ?_USBCtrlEPServiceComplete 0070  
                                        i1l141 000D                                          i1l144 0019  
                                        i1l305 1290                                          i1l153 003B  
                                        i1l146 0026                                          i1l148 0033  
                                        i1l502 0759                                          i1l503 07AA  
                                        i1l504 07A7                                     i1memcpy@d1 0076  
                                        i1l631 1686                                          i1l703 097C  
                                        i1l634 16CC                                          i1l635 168F  
                                        i1l636 1692                                          i1l492 06F9  
                                        i1l566 0DBC                                          i1l680 0BDD  
                                        i1l728 02A0                                          i1l594 0F60  
                                        i1l818 14E6                                          i1l498 0731  
                                        i1l579 17B1                                          i1l764 0C6F  
                                        i1l692 09B6                                          i1l694 0956  
                                   i1memcpy@s1 0078                                          i1l899 07CE  
                                        _UADDR 0E96                                          _RCREG 0199  
                                        _RCSTA 019D                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 00E5                                          _TXSTA 019E  
                                 _outputReport 0120             __end_of_USBHIDCBSetIdleRateHandler 10C2  
                   _USBHIDCBSetIdleRateHandler 10B5                __end_of_USBCtrlEPAllowDataStage 087E  
                                        _sd000 18D0                                          _sd001 183F  
                                        _sd002 189C                               __end_of_TMR2_ISR 2000  
               ?_USBIncrement1msInternalTimers 0070                                 i1___awmod@sign 0076  
                      __end_of_PIN_MANAGER_IOC 1FE9                        _PS2USB_ScanCodeToUSBHID 12B0  
                               _WDT_Initialize 1F74                                          pclath 000A  
                             __end_ofi1___wmul 1208                                          status 0003  
                          i1___wmul@multiplier 0070                                          wtemp0 007E  
                             __end_ofi1_memcpy 1377                                _TMR2_StartTimer 07FD  
                             __end_ofi1_memset 1174                          ?_GenericQueue_Dequeue 00C0  
                        ?_GenericQueue_IsEmpty 00A8                          ??_GenericQueue_IsFull 00AA  
                         __end_of_ps2ExtUsbMap 04F1                          _GenericQueue_Contains 16D7  
              PS2USB_ScanCodeToUSBHID@scanCode 00A8                          ?_GenericQueue_Enqueue 00C0  
                        ??_GenericQueue_Remove 00C3                      _PS2Keyboard_DataInterrupt 10DC  
                              __initialization 003F                    ?_PS2Keyboard_ClockInterrupt 0070  
                                 __end_of_main 13FF                        __end_of_TMR2_Initialize 110E  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                     _TMR2_SetInterruptHandler 1FBA                                         ??_main 00D8  
                __end_ofi1_GenericQueue_IsFull 1135                                ?_USBDeviceTasks 0070  
                     ?_PS2Keyboard_SendCommand 0070                  GenericQueue_Init@element_size 00AA  
                                  ?_USBSuspend 0070                        _IOCAF4_InterruptHandler 016C  
                              i1_USBDeviceInit 0DFE                       _USBHIDCBSetReportHandler 10C2  
                       __end_of_WDT_Initialize 1F77      __end_of_EUSART_DefaultFramingErrorHandler 1F6D  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 1F6C                        __end_of_USBDeviceAttach 11D3  
                   _EUSART_OverrunErrorHandler 0140                                         _ACTCON 039B  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1FD4  
                                       i1l1073 051A                                         i1l1243 11F5  
                                       i1l1078 0523                                         i1l4013 0A47  
                                       i1l4113 01D6                                         i1l4115 01D8  
                                       i1l4043 0B07                                         i1l4035 0A7A  
                                       i1l5003 12A6                                         i1l4221 1578  
                                       i1l4141 0237                                         i1l5005 12AD  
                                       i1l4231 158A                                         i1l4151 0251  
                                       i1l4143 0241                                         i1l4135 0223  
                                       i1l4063 0B64                                         i1l4055 0B40  
                                       i1l4047 0B11                                         i1l4217 1571  
                                       i1l4153 0258                                         i1l4129 0205  
                                       i1l4065 0B67                                         i1l4057 0B43  
                                       i1l4401 0986                                         i1l4243 15A7  
                                       i1l4235 1596                                         i1l5035 134A  
                                       i1l4229 157E                                         i1l4341 0FBF  
                                       i1l3701 151C                                         i1l4181 02C5  
                                       i1l4157 0263                                         i1l4069 0B6A  
                                       i1l4085 16A7                                         i1l4405 0993  
                                       i1l5037 134C                                         i1l5213 0E09  
                                       i1l4239 159F                                         i1l4255 1359  
                                       i1l4327 0F68                                         i1l4183 02CD  
                                       i1l4167 028C                                         i1l4095 16C0  
                                       i1l4271 0D85                                         i1l5055 162C  
                                       i1l4601 0BEF                                         i1l4353 0FF9  
                                       i1l4329 0F7E                                         i1l3713 12DE  
                                       i1l3801 0C47                                         i1l6025 14C7  
                                       i1l4177 02A6                                         i1l4169 0291  
                                       i1l5057 162F                                         i1l5241 0E3D  
                                       i1l5401 079E                                         i1l4339 0FB3  
                                       i1l3811 0C5B                                         i1l6027 14E1  
                                       i1l4267 0D81                                         i1l5323 06F3  
                                       i1l5315 06E6                                         i1l4197 11EF  
                                       i1l6029 05CD                                         i1l3709 12D7  
                                       i1l3741 0C8C                                         i1l3733 0C7C  
                                       i1l5229 0E20                                         i1l5431 144D  
                                       i1l3903 17E2                                         i1l4551 1477  
                                       i1l3751 0CD3                                         i1l3807 0C53  
                                       i1l4391 0972                                         i1l4375 095C  
                                       i1l5263 0E53                                         i1l5343 070F  
                                       i1l5441 146D                                         i1l3905 17E6  
                                       i1l3913 17FC                                         i1l3753 0CEB  
                                       i1l3825 07E3                                         i1l4377 095F  
                                       i1l4289 0DC8                                         i1l4297 0DD1  
                                       i1l5337 0709                                         i1l4563 14A8  
                                       i1l3771 0BFF                                         i1l4387 096C  
                                       i1l4379 0962                                         i1l5437 145D  
                                       i1l5701 0587                                         i1l3853 14B6  
                                       i1l3861 14BF                                         i1l3925 1161  
                                       i1l4389 096F                                         i1l5373 0752  
                                       i1l5365 073E                                         i1l5349 0723  
                                       i1l3943 0AAE                                         i1l3791 0C2D  
                                       i1l3783 0C17                                         i1l3855 14B9  
                                       i1l5383 075F                                         i1l5359 0737  
                                       i1l5713 05A3                                         i1l4593 0BD0  
                                       i1l4577 0B92                                         i1l3777 0C0B  
                                       i1l3785 0C22                                         i1l3857 14BC  
                                       i1l3849 14AB                                         i1l5393 0776  
                                       i1l5723 05BD                                         i1l3883 17AC  
                                       i1l4579 0B95                                         i1l3699 1514  
                                       i1l5717 05AA                                         i1l5709 059B  
                                       i1l5733 05C3                                         i1l4829 10B2  
                                       i1l4589 0BC0                                         i1l3797 0C39  
                                       i1l3789 0C2A                                         i1l5727 05C0  
                                       i1l5735 05DB                                         i1l5671 051C  
                                       i1l3895 17CC                                         i1l4599 0BEE  
                                       i1l3975 0849                                         i1l5399 078F  
                                       i1l5681 0557                                         i1l5745 10A5  
                                       i1l5833 1FE4                                         i1l5683 055B  
                                       i1l5675 0525                                         i1l3995 0A28  
                                       i1l3979 085C                                         i1l5685 055F  
                                       i1l5677 052B                                         i1l5687 0561  
                                       i1l5679 0534                                         u331_25 11F6  
                                       u340_25 1597                                         u332_25 11FB  
                                       u270_25 14FB                                         u351_25 0F5C  
                                       u328_20 112D                                         u329_20 112E  
                                       u337_25 1581                                         u339_25 1590  
                                       u283_25 07D8                                         u611_27 11DC  
                                       u540_24 0506                                         u540_25 0505  
                                       u268_25 14ED                                         u541_20 050C  
                                       u269_25 14F3                                         u437_25 15FD  
                                       u550_20 0596                                         u542_20 050D  
                                       u551_20 0597                                         u471_25 0E23  
                                       u297_25 0853                                         _OSCCON 0099  
                                       u548_24 056E                                         u548_25 056D  
                                       _PLLRDY 04D6                                    i1memcpy@tmp 0054  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 01C2                              _shortPacketStatus 00EE  
                             _APP_KeyboardInit 07AD                                USBDeviceTasks@i 0060  
                  USBStdFeatureReqHandler@pUEP 0058                       USBTransferOnePacket@data 00A9  
                   USBCtrlTrfInHandler@lastDTS 0077                                ??_USBDeviceInit 00A8  
                                       ___bmul 10EC                                _keyboardIsBreak 014D  
                                       ___wmul 1208                                      ??___awmod 00AC  
                              _keyboardCommand 014C                              _USBEnableEndpoint 12CF  
                          _EUSART_Transmit_ISR 1276                                         _memcmp 13FF  
                                       _memcpy 1377                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 1174                                ___awmod@divisor 00A8  
                                       _timeMs 0128                                ___awmod@counter 00AD  
                           ?_USBEnableEndpoint 0077                              __end_ofi1___awmod 15AC  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 0134                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D7                        __end_of_TMR2_StartTimer 0800  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007E  
                                 ??_IOCAF5_ISR 0074                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 006A  
                PS2Keyboard_ClockInterrupt@bit 007D                              _SYSTEM_Initialize 1149  
                      __end_of__initialization 0073                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1FBA  
                 _EUSART_SetTxInterruptHandler 1FB2                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 12EF  
                                __end_of_sd000 18D4                                  __end_of_sd001 1873  
                                __end_of_sd002 18B8                            ??_SYSTEM_Initialize 00B0  
                                    ?_TMR2_ISR 0070                                _active_protocol 0168  
              __end_of_PS2Keyboard_SendCommand 125A         __end_of_IOCAF4_DefaultInterruptHandler 1F6E  
               _IOCAF4_DefaultInterruptHandler 1F6D                        __end_ofi1_USBDeviceInit 0EA1  
                  __end_of_USBCtrlTrfInHandler 0BF2                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                             __end_of_IOCAF4_ISR 10A8  
                           __end_of_IOCAF5_ISR 10B5                                      ?i1___wmul 0070  
                  __end_ofi1_GenericQueue_Init 130F                             ??_PS2Keyboard_Init 00AC  
                               _OPTION_REGbits 0095                                      ?i1_memcpy 0076  
                                    ?i1_memset 0070                           _eusartRxStatusBuffer 01B2  
                  ?_IOCAF5_SetInterruptHandler 00A8                ??_EUSART_SetOverrunErrorHandler 00AA  
                     ??_USBCtrlTrfSetupHandler 005D                        _USBTicksSinceSuspendEnd 0154  
                   ?i1_PS2Keyboard_SendCommand 0070                i1GenericQueue_Init@element_size 0072  
                                _keyboardState 0153                               ?_USBDeviceAttach 0070  
                    __end_of_SYSTEM_Initialize 115E                          ??_EUSART_Transmit_ISR 0070  
                       _USBStdGetStatusHandler 1682                     i1GenericQueue_Enqueue@item 0057  
               __end_ofi1_GenericQueue_Enqueue 08E6                                     __pbssBANK0 0061  
                                   __pbssBANK1 00E8                                     __pbssBANK2 0121  
                                   __pbssBANK3 01A0               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0061  
                      _IOCAF5_InterruptHandler 016A                            _keyboardCommandBits 014B  
             __end_of_USBCtrlEPServiceComplete 0DFE                            _keyboardCommandOnes 014A  
             PS2Keyboard_ClockInterrupt@bitPos 007C                                     __pmaintext 13CD  
            APP_KeyboardUpdateState@usbHidCode 00CC         APP_KeyboardUpdateState@usbHidCode_2915 00CE  
       APP_KeyboardUpdateState@usbHidCode_2924 00CF         APP_KeyboardUpdateState@usbHidCode_2916 00CD  
                         USBCtrlTrfRxService@i 0078                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 0148  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 18B8  
                             _USBCtrlEPService 15F1                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 013C                                     ??i1___wmul 0074  
                  __end_of_USBCtrlTrfRxService 1000                             _USBCheckStdRequest 094E  
                                _eusartRxCount 0160                              _configDescriptor1 1873  
                                   ??i1_memcpy 007C                                     ??i1_memset 0074  
                                 _ps2ExtUsbMap 03F2         APP_KeyboardTasks@TimeDeltaMilliseconds 00D5  
                  __end_of_USBCtrlTrfTxService 1800                            _USBStdSetCfgHandler 0A20  
                  ?_USBHIDCBSetIdleRateHandler 0070                               main@hndlScanCode 00E4  
                                      _OSCTUNE 0098                       ??_EUSART_SetErrorHandler 00AA  
                          ?_USBCheckStdRequest 0070                               ?_TMR2_StartTimer 0070  
                                      _UIEbits 0E92              __end_ofi1_PS2Keyboard_SendCommand 11ED  
                                      _UIRbits 0E90                          GenericQueue_Dequeue@q 00C0  
                  APP_KeyboardUpdateState@leds 00CB                                   i1memset@dest 0075  
                     ??i1_USBTransferOnePacket 0074                          GenericQueue_IsEmpty@q 00A8  
                            __end_of_ps2UsbMap 1084                ??_USBIncrement1msInternalTimers 0070  
                         ?_USBStdSetCfgHandler 0070                              _APP_KeyboardTasks 02E2  
                   ??_TMR2_SetInterruptHandler 00AA                              __end_of_hid_rpt01 183F  
                         ??_USBCheckStdRequest 007E                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 15AC                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 005F  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                             _keyboardIdleRate 0138                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 014E  
                                      __ptext1 1084                                        __ptext2 07FD  
                                      __ptext3 1149                                        __ptext4 1F74  
                                      __ptext5 0EA1                                        __ptext6 11BA  
                                      __ptext7 10FD                                        __ptext8 1FBA  
                                      __ptext9 139D                                        _inPipes 00E8  
                  _USBDeferOUTDataStagePackets 0155                            ??_APP_KeyboardTasks 00D1  
                        _OSCILLATOR_Initialize 10CF                                   ??_USBSuspend 007D  
                                    _T2CONbits 001C                               _keyboardScanCode 0165  
                             ___awmod@dividend 00AA                       ??_PIN_MANAGER_Initialize 00AA  
                                    _IOCAFbits 0393                       __end_of_APP_KeyboardInit 07FD  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                           __end_of_USB_CD_Ptr 18D6                                        clrloop0 1090  
                     _SysTime_GetCurrentTimeMs 1FC2                           end_of_initialization 0073  
                  __end_of_GenericQueue_IsFull 1149                             __end_of_USB_SD_Ptr 18D0  
                                      memcmp@l 00BB                                        memcmp@n 00B8  
                                      memcmp@r 00BD                              ?_SysTimeInterrupt 0070  
        __end_of_EUSART_SetOverrunErrorHandler 1FAA                  _EUSART_SetOverrunErrorHandler 1FA2  
                                      memcpy@d 00BB                                        memcpy@n 00B9  
                                      memcpy@s 00BD                            _pBDTEntryEP0OutNext 0067  
                  __end_of_GenericQueue_Remove 06DA                                        memset@c 00A8  
                                      memset@n 00AA                                        memset@p 00AD  
                              _USB1msTickCount 01CA                        _PS2Keyboard_GetScanCode 125A  
                     ?_USBStdFeatureReqHandler 0070                             ??_SysTimeInterrupt 0070  
                    __end_of_APP_KeyboardTasks 03F2                              _EUSART_Initialize 1526  
                        ??_USBStdSetCfgHandler 007D                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 11BA                        _USBCtrlEPAllowDataStage 0817  
                                    _RCSTAbits 019D                                     _prevTimeMs 012C  
                     _USBCtrlEPServiceComplete 0D70                          i1___wmul@multiplicand 0072  
                   _USBStatusStageEnabledFlag1 0158                     _USBStatusStageEnabledFlag2 0157  
                          ??_EUSART_Initialize 00AA                               ??_WDT_Initialize 00A8  
               ??_EUSART_SetTxInterruptHandler 00AA                             USBEnableEndpoint@p 007A  
                                    _PORTAbits 000C                          i1_GenericQueue_IsFull 1121  
                                    _TRISAbits 008C                             _BothEP0OutUOWNsSet 015B  
                    USBStdSetCfgHandler@i_2097 0058                                      i1___awmod 1567  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 130F                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006D                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 1567                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0D70                            ??_GenericQueue_Init 00AC  
                        i1USBDeviceInit@i_1369 0076                         _USBCtrlTrfSetupHandler 1639  
         __end_of_TMR2_DefaultInterruptHandler 0004                   _TMR2_DefaultInterruptHandler 0003  
                               __end_of___bmul 10FD                          __end_of_USBDeviceInit 0F4D  
        __end_of_USBIncrement1msInternalTimers 0817                  _USBIncrement1msInternalTimers 0800  
           __end_of_EUSART_DefaultErrorHandler 1F71                     _EUSART_DefaultErrorHandler 1F6E  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                    i1memcpy@s 0052                                 __end_of___wmul 1223  
                                    i1memset@c 0070                                      i1memset@n 0072  
                                    i1memset@p 0076                                 __end_of_memcmp 1436  
                               __end_of_memcpy 139D                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 118A                     ?_USBHIDCBSetReportComplete 0070  
                            _USBBusIsSuspended 015C                            start_initialization 003F  
                      _APP_KeyboardUpdateState 0077                        ?_USBStdGetStatusHandler 0070  
                USBCtrlTrfRxService@byteToRead 0079                      __end_of_GenericQueue_Init 132F  
                                   ?i1___awmod 0070                                 _oldInputReport 01AA  
 EUSART_SetRxInterruptHandler@interruptHandler 00A8   EUSART_SetTxInterruptHandler@interruptHandler 00A8  
                  ??i1_PS2Keyboard_SendCommand 0070                   __end_of_USBConfigureEndpoint 1526  
              __end_of_USBStdFeatureReqHandler 02E2                      ??_PS2Keyboard_GetScanCode 00C7  
                 ??_PS2Keyboard_GetLastCommand 00A8              __end_of_USBCtrlEPAllowStatusStage 0AFE  
                     __end_of_USBCtrlEPService 1639                                  ?_SysTime_Init 0070  
                    ??_USBCtrlEPAllowDataStage 0073                                 USBDeviceInit@i 00AF  
                               USBDeviceInit@p 00AC                 ?_EUSART_SetOverrunErrorHandler 00A8  
                       _pBDTEntryEP0OutCurrent 006B                        USBTransferOnePacket@dir 00A8  
                      USBTransferOnePacket@len 00AB                     _EUSART_FramingErrorHandler 0142  
                                     ??___bmul 00A9                                       ??___wmul 00B3  
                       _EUSART_SetErrorHandler 1F92                            _USBStdGetDscHandler 0AFE  
                           i1___awmod@dividend 0072                                       ??_memcmp 00BA  
                                     ??_memcpy 00BB                                       ??_memset 00AC  
                ?_TMR2_DefaultInterruptHandler 0070                       ?_PS2USB_ScanCodeToUSBHID 0070  
                                   memset@dest 00AE                PS2Keyboard_GetScanCode@scanCode 00C7  
                       i1_USBTransferOnePacket 0C70         __end_of_IOCAF5_DefaultInterruptHandler 0003  
               _IOCAF5_DefaultInterruptHandler 0002                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 16D7                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232C                    __end_of_EUSART_Transmit_ISR 1293  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1F82  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                      ?_GenericQueue_CopyToArray 00C0  
                         ?_USBStdGetDscHandler 0070                        _PS2Keyboard_SendCommand 123E  
    __end_ofi1_APP_KeyboardProcessOutputReport 1FDE        __end_of_APP_KeyboardProcessOutputReport 1FF4  
          ??i1_APP_KeyboardProcessOutputReport 0071             ?i1_APP_KeyboardProcessOutputReport 0070  
             ?_APP_KeyboardProcessOutputReport 0070              ??_APP_KeyboardProcessOutputReport 00A9  
            i1_APP_KeyboardProcessOutputReport 1FD4                _APP_KeyboardProcessOutputReport 1FE9  
                   __end_of_EUSART_Receive_ISR 1470                                   _keyboardData 014F  
                   __end_of_USBWakeFromSuspend 12B0               _EUSART_RxDefaultInterruptHandler 0146  
                               ??_SysTime_Init 00AA                                _USBStallHandler 132F  
                                 _pBDTEntryOut 0130                                      __pnvBANK2 016A  
                         _keyboardCommandCount 0069                   __end_of_EUSART_RxDataHandler 11A2  
                       _PIN_MANAGER_Initialize 139D                      i1_PS2Keyboard_SendCommand 11D3  
                                     ?___awmod 00A8                                      _ps2UsbMap 1000  
                 ??_PS2Keyboard_ClockInterrupt 005C                             GenericQueue_Init@q 00A8  
                                 _eusartRxHead 00EF                                   _eusartTxHead 0164  
                                    _hid_rpt01 1800                                   _eusartRxTail 0161  
                                 _eusartTxTail 0163                                      _idle_rate 0169  
                 ??_INTERRUPT_InterruptManager 007E                          _keyboardScanCodeValid 0150  
                        _keyboardScanCodeQueue 2391                      ??_APP_KeyboardUpdateState 00C9  
                      _eusartTxBufferRemaining 0162                     ??_SysTime_GetCurrentTimeMs 0074  
                         _USBTransferOnePacket 0CF0                           GenericQueue_IsFull@q 00A8  
           __end_of_IOCAF4_SetInterruptHandler 1F8A                     _IOCAF4_SetInterruptHandler 1F82  
                 __end_of_USBCtrlTrfOutHandler 14AA                              ?_APP_KeyboardInit 0070  
                                  ??i1___awmod 0074                          ??_USBStdGetDscHandler 0070  
                                  _ep_data_out 013A                  USBConfigureEndpoint@direction 0070  
                           ??_APP_KeyboardInit 007D                                 _eusartRxBuffer 01BA  
                               _eusartTxBuffer 01C2                           GenericQueue_Remove@i 00C7  
                         GenericQueue_Remove@j 00C8                           GenericQueue_Remove@q 00C0  
                               ___wmul@product 00B3                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A8                     __end_of_USBCheckHIDRequest 0C70  
                   ??_USBCtrlEPServiceComplete 0077                                      clear_ram0 108F  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 015F                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00AA                                       _PIR2bits 0012  
              __end_of_PS2USB_ScanCodeToUSBHID 12CF                                       _UEP0bits 0E98  
                                    main@F3441 01CE                                      main@F3445 01A0  
                   _USBDeferINDataStagePackets 0156      __end_of_EUSART_DefaultOverrunErrorHandler 1F7B  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 1F77                                       _TMR2_ISR 1FF4  
                                     _UCONbits 0E8E                              ??_PIN_MANAGER_IOC 007E  
                         _USBConfigureEndpoint 14E7                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 11ED  
                              main@scanCodeStr 00D9                                       i1_memcpy 1351  
                                     i1_memset 115E                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 015D                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                     ?_PS2Keyboard_DataInterrupt 0070  
                    ??_PS2Keyboard_SendCommand 00A8                        __end_of_USBStallHandler 1351  
           __end_of_PS2Keyboard_GetLastCommand 1F74                     _PS2Keyboard_GetLastCommand 1F71  
                    ?_USBHIDCBSetReportHandler 0070                               _PS2Keyboard_Init 1223  
                  ??_USBCtrlEPAllowStatusStage 0070                    __end_of_USBStdSetCfgHandler 0A8C  
                            ??_TMR2_Initialize 00AA                  __end_of_GenericQueue_Contains 1739  
                           __end_of_device_dsc 18CA                         GenericQueue_Contains@i 00C5  
                       GenericQueue_Contains@q 00BE                        ?_USBCtrlTrfSetupHandler 0070  
                      USBStdGetStatusHandler@p 0070                                      memcpy@tmp 00BF  
                       USBTransferOnePacket@ep 00B0                                       _SetupPkt 0040  
                            i1___awmod@divisor 0070                        ??_OSCILLATOR_Initialize 00A8  
                          _EUSART_ErrorHandler 013E                          ?_USBConfigureEndpoint 0070  
                            i1___awmod@counter 0075                              ??_USBDeviceAttach 00A8  
                  ?_EUSART_DefaultErrorHandler 0070                           __end_of_SysTime_Init 108F  
                  ??_USBHIDCBSetReportComplete 0071                           _EUSART_RxDataHandler 118A  
                                     __ptext10 10CF                                       __ptext11 1526  
                                     __ptext20 130F                                       __ptext12 1FB2  
                                     __ptext21 125A                                       __ptext13 1FAA  
                                     __ptext30 1F71                                       __ptext22 09B7  
                                     __ptext14 1FA2                                       __ptext31 05E6  
                                     __ptext23 02E2                                       __ptext15 1F9A  
                                     __ptext40 1FE9                                       __ptext32 08E6  
                                     __ptext24 1174                                       __ptext16 1F92  
                                     __ptext41 123E                                       __ptext33 1377  
                                     __ptext25 0CF0                                       __ptext17 1223  
                                     __ptext50 1639                                       __ptext34 1135  
                                     __ptext26 1739                                       __ptext18 1F8A  
                                     __ptext51 0D70                                       __ptext43 06DA  
                                     __ptext35 16D7                                       __ptext27 10EC  
                                     __ptext19 1F82                                       __ptext60 0BF2  
                                     __ptext52 0817                                       __ptext44 0DFE  
                                     __ptext36 13FF                                       __ptext28 0077  
                                     __ptext61 10C2                                       __ptext53 094E  
                                     __ptext45 1293                                       __ptext37 1208  
                                     __ptext29 12B0                                       __ptext70 0A8C  
                                     __ptext62 10B5                                       __ptext54 0A20  
                                     __ptext46 11A2                                       __ptext38 15AC  
                                     __ptext71 0B77                                       __ptext63 07AD  
                                     __ptext55 115E                                       __ptext47 132F  
                                     __ptext39 110E                                       __ptext80 10A8  
                                     __ptext72 1F7B                                       __ptext64 0C70  
                                     __ptext56 1682                                       __ptext48 0800  
                                     __ptext81 0002                                       __ptext73 1FD4  
                                     __ptext65 12EF                                       __ptext57 0AFE  
                                     __ptext49 15F1                                       __ptext90 1121  
                                     __ptext82 10DC                                       __ptext74 11D3  
                                     __ptext66 12CF                                       __ptext58 01C2  
                                     __ptext91 1FC2                                       __ptext83 109B  
                                     __ptext75 179B                                       __ptext67 14E7  
                                     __ptext59 14AA                                       __ptext92 1276  
                                     __ptext84 1F6D                                       __ptext76 1FF4  
                                     __ptext68 1470                                       __ptext93 1436  
                                     __ptext85 04F1                                       __ptext77 1FCB  
                                     __ptext69 0F4D                                       __ptext94 1F77  
                                     __ptext86 087E                                       __ptext78 0003  
                                     __ptext95 1F6C                                       __ptext87 1351  
                                     __ptext79 1FDE                                       __ptext96 1F6E  
                                     __ptext88 11ED                                       __ptext97 118A  
                                     __ptext89 1567                   ??_IOCAF5_SetInterruptHandler 00AA  
            __end_of_PS2Keyboard_DataInterrupt 10EC                              _keyboardIndexData 0152  
                                   _IOCAF4_ISR 109B                  GenericQueue_CopyToArray@array 00C2  
                                   _IOCAF5_ISR 10A8                  GenericQueue_CopyToArray@count 00C8  
                GenericQueue_CopyToArray@index 00C7                                       _keyboard 232C  
               __end_of_USBCtrlTrfSetupHandler 1682                              ?_USBCtrlEPService 0070  
                           ??_USBCtrlEPService 005E                        ?_EUSART_SetErrorHandler 00A8  
                          _USBCtrlTrfInHandler 0B77  EUSART_SetOverrunErrorHandler@interruptHandler 00A8  
                                  _inputReport 00A0             __end_of_PS2Keyboard_ClockInterrupt 05E6  
                   _PS2Keyboard_ClockInterrupt 04F1                              _keyboardOnesCount 0151  
                                     _outPipes 0121                           _USBCtrlTrfOutHandler 1470  
                                     int$flags 007E                            i1_GenericQueue_Init 12EF  
                      ?i1_USBTransferOnePacket 0070               __end_of_GenericQueue_CopyToArray 179B  
                    _USBCtrlEPAllowStatusStage 0A8C                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072          __end_of_EUSART_SetFramingErrorHandler 1FA2  
                _EUSART_SetFramingErrorHandler 1F9A                         ??_USBTransferOnePacket 00AC  
             __end_of_SysTime_GetCurrentTimeMs 1FCB                   __end_of_GenericQueue_Dequeue 0A20  
                 __end_of_GenericQueue_IsEmpty 1121                      _USBDeferStatusStagePacket 0159  
                             i1USBDeviceInit@i 0077                               i1USBDeviceInit@p 0074  
                                   _INTCONbits 000B                   __end_of_GenericQueue_Enqueue 094E  
                         ?_USBCtrlTrfInHandler 0070                                       memcmp@vl 00B5  
                                     memcmp@vr 00B7                          ?_EUSART_RxDataHandler 0070  
                                     memcpy@d1 00B5                                       memcpy@s1 00B7  
                USBCtrlTrfTxService@byteToSend 0072                                 __pstringtext10 18D0  
                 ??_USBHIDCBSetIdleRateHandler 0071                               ?_USBStallHandler 0070  
                         ?i1_GenericQueue_Init 0070                       USBStdFeatureReqHandler@p 005B  
                                     intlevel1 0000        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 14E7  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 14AA                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1F9A  
                    _USBHIDCBSetReportComplete 1F7B           __end_of_EUSART_SetRxInterruptHandler 1FB2  
                 _EUSART_SetRxInterruptHandler 1FAA                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0CF0  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 1436                            _USBCtrlTrfRxService 0F4D  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 1293  
                             _SysTimeInterrupt 1FCB                        _USBStdFeatureReqHandler 01C2  
                   PS2Keyboard_GetScanCode@ret 00C8                            _USBCtrlTrfTxService 179B  
                                __pstringtext1 03F2                                  __pstringtext2 1000  
                                __pstringtext3 18CA                                  __pstringtext4 18D4  
                                __pstringtext5 1800                                  __pstringtext6 183F  
                                __pstringtext7 1873                                  __pstringtext8 189C  
                                __pstringtext9 18B8                            ?_EUSART_Receive_ISR 0070  
                          ?_USBWakeFromSuspend 0070                          ??_USBCtrlTrfInHandler 0073  
                        _USBAlternateInterface 006E                       ?_PS2Keyboard_GetScanCode 0070  
                  ?_IOCAF4_SetInterruptHandler 00A8          USBHIDCBSetIdleRateHandler@newIdleRate 0070  
                          USBEnableEndpoint@ep 007C                                _endpoint_number 00ED  
                        ??i1_GenericQueue_Init 0074                           ?_USBCtrlTrfRxService 0070  
                                  ?_IOCAF4_ISR 0070                                    ?_IOCAF5_ISR 0070  
               __end_of_PIN_MANAGER_Initialize 13CD                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 0065  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 015A                                _PIN_MANAGER_IOC 1FDE  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 0144  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00D4                         i1_GenericQueue_Enqueue 087E  
                                   _USB_CD_Ptr 18D4  
