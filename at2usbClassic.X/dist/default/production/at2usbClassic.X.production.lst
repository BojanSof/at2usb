

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon May 06 22:59:15 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     5                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	stringtext11,global,class=STRCODE,delta=2,noexec
    16                           	psect	stringtext12,global,class=STRCODE,delta=2,noexec
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2,group=3
    30                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    35                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    36                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text10,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text11,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2,group=3
    66                           	psect	text38,local,class=CODE,merge=1,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2,group=3
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text50,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,delta=2
   132                           	psect	text104,local,class=CODE,merge=1,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,merge=1,delta=2
   137                           	psect	text109,local,class=CODE,merge=1,delta=2
   138                           	psect	text110,local,class=CODE,merge=1,delta=2
   139                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   140                           	dabs	1,0x620,48
   141                           	dabs	1,0x5C1,47
   142                           	dabs	1,0x5A0,33
   143                           	dabs	1,0x52C,68
   144                           	dabs	1,0x20,32,_BDT
   145                           	dabs	1,0x48,8,_CtrlTrfData
   146                           	dabs	1,0x40,8,_SetupPkt
   147                           	dabs	1,0xA0,8,_inputReport
   148                           	dabs	1,0x120,1,_outputReport
   149                           	dabs	1,0x232C,0,_keyboard
   150                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   151                           	dabs	1,0x7E,2
   152     0000                     
   153                           ; Generated 07/09/2023 GMT
   154                           ; 
   155                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   156                           ; All rights reserved.
   157                           ; 
   158                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   159                           ; 
   160                           ; Redistribution and use in source and binary forms, with or without modification, are
   161                           ; permitted provided that the following conditions are met:
   162                           ; 
   163                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   164                           ;        conditions and the following disclaimer.
   165                           ; 
   166                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   167                           ;        of conditions and the following disclaimer in the documentation and/or other
   168                           ;        materials provided with the distribution. Publication is not required when
   169                           ;        this file is used in an embedded application.
   170                           ; 
   171                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   172                           ;        software without specific prior written permission.
   173                           ; 
   174                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   175                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   176                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   177                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   178                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   179                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   180                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   181                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   182                           ; 
   183                           ; 
   184                           ; Code-generator required, PIC16F1459 Definitions
   185                           ; 
   186                           ; SFR Addresses
   187     0000                     	;# 
   188     0001                     	;# 
   189     0002                     	;# 
   190     0003                     	;# 
   191     0004                     	;# 
   192     0005                     	;# 
   193     0006                     	;# 
   194     0007                     	;# 
   195     0008                     	;# 
   196     0009                     	;# 
   197     000A                     	;# 
   198     000B                     	;# 
   199     000C                     	;# 
   200     000D                     	;# 
   201     000E                     	;# 
   202     0011                     	;# 
   203     0012                     	;# 
   204     0015                     	;# 
   205     0016                     	;# 
   206     0016                     	;# 
   207     0017                     	;# 
   208     0018                     	;# 
   209     0019                     	;# 
   210     001A                     	;# 
   211     001B                     	;# 
   212     001C                     	;# 
   213     008C                     	;# 
   214     008D                     	;# 
   215     008E                     	;# 
   216     0091                     	;# 
   217     0092                     	;# 
   218     0095                     	;# 
   219     0096                     	;# 
   220     0097                     	;# 
   221     0098                     	;# 
   222     0099                     	;# 
   223     009A                     	;# 
   224     009B                     	;# 
   225     009B                     	;# 
   226     009C                     	;# 
   227     009D                     	;# 
   228     009E                     	;# 
   229     009F                     	;# 
   230     010C                     	;# 
   231     010D                     	;# 
   232     010E                     	;# 
   233     0111                     	;# 
   234     0112                     	;# 
   235     0113                     	;# 
   236     0114                     	;# 
   237     0115                     	;# 
   238     0116                     	;# 
   239     0117                     	;# 
   240     0118                     	;# 
   241     0119                     	;# 
   242     011D                     	;# 
   243     018C                     	;# 
   244     018D                     	;# 
   245     018E                     	;# 
   246     0191                     	;# 
   247     0191                     	;# 
   248     0192                     	;# 
   249     0193                     	;# 
   250     0193                     	;# 
   251     0194                     	;# 
   252     0195                     	;# 
   253     0196                     	;# 
   254     0197                     	;# 
   255     0199                     	;# 
   256     019A                     	;# 
   257     019B                     	;# 
   258     019B                     	;# 
   259     019C                     	;# 
   260     019D                     	;# 
   261     019E                     	;# 
   262     019F                     	;# 
   263     020C                     	;# 
   264     020D                     	;# 
   265     0211                     	;# 
   266     0211                     	;# 
   267     0212                     	;# 
   268     0212                     	;# 
   269     0213                     	;# 
   270     0213                     	;# 
   271     0214                     	;# 
   272     0214                     	;# 
   273     0215                     	;# 
   274     0215                     	;# 
   275     0215                     	;# 
   276     0216                     	;# 
   277     0216                     	;# 
   278     0217                     	;# 
   279     0217                     	;# 
   280     0391                     	;# 
   281     0392                     	;# 
   282     0393                     	;# 
   283     0394                     	;# 
   284     0395                     	;# 
   285     0396                     	;# 
   286     039A                     	;# 
   287     039B                     	;# 
   288     0611                     	;# 
   289     0612                     	;# 
   290     0613                     	;# 
   291     0613                     	;# 
   292     0614                     	;# 
   293     0615                     	;# 
   294     0616                     	;# 
   295     0616                     	;# 
   296     0691                     	;# 
   297     0692                     	;# 
   298     0693                     	;# 
   299     0694                     	;# 
   300     0695                     	;# 
   301     0E8E                     	;# 
   302     0E8F                     	;# 
   303     0E90                     	;# 
   304     0E91                     	;# 
   305     0E92                     	;# 
   306     0E93                     	;# 
   307     0E94                     	;# 
   308     0E94                     	;# 
   309     0E95                     	;# 
   310     0E96                     	;# 
   311     0E97                     	;# 
   312     0E98                     	;# 
   313     0E99                     	;# 
   314     0E9A                     	;# 
   315     0E9B                     	;# 
   316     0E9C                     	;# 
   317     0E9D                     	;# 
   318     0E9E                     	;# 
   319     0E9F                     	;# 
   320     0FE4                     	;# 
   321     0FE5                     	;# 
   322     0FE6                     	;# 
   323     0FE7                     	;# 
   324     0FE8                     	;# 
   325     0FE9                     	;# 
   326     0FEA                     	;# 
   327     0FEB                     	;# 
   328     0FED                     	;# 
   329     0FEE                     	;# 
   330     0FEF                     	;# 
   331     0000                     	;# 
   332     0001                     	;# 
   333     0002                     	;# 
   334     0003                     	;# 
   335     0004                     	;# 
   336     0005                     	;# 
   337     0006                     	;# 
   338     0007                     	;# 
   339     0008                     	;# 
   340     0009                     	;# 
   341     000A                     	;# 
   342     000B                     	;# 
   343     000C                     	;# 
   344     000D                     	;# 
   345     000E                     	;# 
   346     0011                     	;# 
   347     0012                     	;# 
   348     0015                     	;# 
   349     0016                     	;# 
   350     0016                     	;# 
   351     0017                     	;# 
   352     0018                     	;# 
   353     0019                     	;# 
   354     001A                     	;# 
   355     001B                     	;# 
   356     001C                     	;# 
   357     008C                     	;# 
   358     008D                     	;# 
   359     008E                     	;# 
   360     0091                     	;# 
   361     0092                     	;# 
   362     0095                     	;# 
   363     0096                     	;# 
   364     0097                     	;# 
   365     0098                     	;# 
   366     0099                     	;# 
   367     009A                     	;# 
   368     009B                     	;# 
   369     009B                     	;# 
   370     009C                     	;# 
   371     009D                     	;# 
   372     009E                     	;# 
   373     009F                     	;# 
   374     010C                     	;# 
   375     010D                     	;# 
   376     010E                     	;# 
   377     0111                     	;# 
   378     0112                     	;# 
   379     0113                     	;# 
   380     0114                     	;# 
   381     0115                     	;# 
   382     0116                     	;# 
   383     0117                     	;# 
   384     0118                     	;# 
   385     0119                     	;# 
   386     011D                     	;# 
   387     018C                     	;# 
   388     018D                     	;# 
   389     018E                     	;# 
   390     0191                     	;# 
   391     0191                     	;# 
   392     0192                     	;# 
   393     0193                     	;# 
   394     0193                     	;# 
   395     0194                     	;# 
   396     0195                     	;# 
   397     0196                     	;# 
   398     0197                     	;# 
   399     0199                     	;# 
   400     019A                     	;# 
   401     019B                     	;# 
   402     019B                     	;# 
   403     019C                     	;# 
   404     019D                     	;# 
   405     019E                     	;# 
   406     019F                     	;# 
   407     020C                     	;# 
   408     020D                     	;# 
   409     0211                     	;# 
   410     0211                     	;# 
   411     0212                     	;# 
   412     0212                     	;# 
   413     0213                     	;# 
   414     0213                     	;# 
   415     0214                     	;# 
   416     0214                     	;# 
   417     0215                     	;# 
   418     0215                     	;# 
   419     0215                     	;# 
   420     0216                     	;# 
   421     0216                     	;# 
   422     0217                     	;# 
   423     0217                     	;# 
   424     0391                     	;# 
   425     0392                     	;# 
   426     0393                     	;# 
   427     0394                     	;# 
   428     0395                     	;# 
   429     0396                     	;# 
   430     039A                     	;# 
   431     039B                     	;# 
   432     0611                     	;# 
   433     0612                     	;# 
   434     0613                     	;# 
   435     0613                     	;# 
   436     0614                     	;# 
   437     0615                     	;# 
   438     0616                     	;# 
   439     0616                     	;# 
   440     0691                     	;# 
   441     0692                     	;# 
   442     0693                     	;# 
   443     0694                     	;# 
   444     0695                     	;# 
   445     0E8E                     	;# 
   446     0E8F                     	;# 
   447     0E90                     	;# 
   448     0E91                     	;# 
   449     0E92                     	;# 
   450     0E93                     	;# 
   451     0E94                     	;# 
   452     0E94                     	;# 
   453     0E95                     	;# 
   454     0E96                     	;# 
   455     0E97                     	;# 
   456     0E98                     	;# 
   457     0E99                     	;# 
   458     0E9A                     	;# 
   459     0E9B                     	;# 
   460     0E9C                     	;# 
   461     0E9D                     	;# 
   462     0E9E                     	;# 
   463     0E9F                     	;# 
   464     0FE4                     	;# 
   465     0FE5                     	;# 
   466     0FE6                     	;# 
   467     0FE7                     	;# 
   468     0FE8                     	;# 
   469     0FE9                     	;# 
   470     0FEA                     	;# 
   471     0FEB                     	;# 
   472     0FED                     	;# 
   473     0FEE                     	;# 
   474     0FEF                     	;# 
   475     0000                     	;# 
   476     0001                     	;# 
   477     0002                     	;# 
   478     0003                     	;# 
   479     0004                     	;# 
   480     0005                     	;# 
   481     0006                     	;# 
   482     0007                     	;# 
   483     0008                     	;# 
   484     0009                     	;# 
   485     000A                     	;# 
   486     000B                     	;# 
   487     000C                     	;# 
   488     000D                     	;# 
   489     000E                     	;# 
   490     0011                     	;# 
   491     0012                     	;# 
   492     0015                     	;# 
   493     0016                     	;# 
   494     0016                     	;# 
   495     0017                     	;# 
   496     0018                     	;# 
   497     0019                     	;# 
   498     001A                     	;# 
   499     001B                     	;# 
   500     001C                     	;# 
   501     008C                     	;# 
   502     008D                     	;# 
   503     008E                     	;# 
   504     0091                     	;# 
   505     0092                     	;# 
   506     0095                     	;# 
   507     0096                     	;# 
   508     0097                     	;# 
   509     0098                     	;# 
   510     0099                     	;# 
   511     009A                     	;# 
   512     009B                     	;# 
   513     009B                     	;# 
   514     009C                     	;# 
   515     009D                     	;# 
   516     009E                     	;# 
   517     009F                     	;# 
   518     010C                     	;# 
   519     010D                     	;# 
   520     010E                     	;# 
   521     0111                     	;# 
   522     0112                     	;# 
   523     0113                     	;# 
   524     0114                     	;# 
   525     0115                     	;# 
   526     0116                     	;# 
   527     0117                     	;# 
   528     0118                     	;# 
   529     0119                     	;# 
   530     011D                     	;# 
   531     018C                     	;# 
   532     018D                     	;# 
   533     018E                     	;# 
   534     0191                     	;# 
   535     0191                     	;# 
   536     0192                     	;# 
   537     0193                     	;# 
   538     0193                     	;# 
   539     0194                     	;# 
   540     0195                     	;# 
   541     0196                     	;# 
   542     0197                     	;# 
   543     0199                     	;# 
   544     019A                     	;# 
   545     019B                     	;# 
   546     019B                     	;# 
   547     019C                     	;# 
   548     019D                     	;# 
   549     019E                     	;# 
   550     019F                     	;# 
   551     020C                     	;# 
   552     020D                     	;# 
   553     0211                     	;# 
   554     0211                     	;# 
   555     0212                     	;# 
   556     0212                     	;# 
   557     0213                     	;# 
   558     0213                     	;# 
   559     0214                     	;# 
   560     0214                     	;# 
   561     0215                     	;# 
   562     0215                     	;# 
   563     0215                     	;# 
   564     0216                     	;# 
   565     0216                     	;# 
   566     0217                     	;# 
   567     0217                     	;# 
   568     0391                     	;# 
   569     0392                     	;# 
   570     0393                     	;# 
   571     0394                     	;# 
   572     0395                     	;# 
   573     0396                     	;# 
   574     039A                     	;# 
   575     039B                     	;# 
   576     0611                     	;# 
   577     0612                     	;# 
   578     0613                     	;# 
   579     0613                     	;# 
   580     0614                     	;# 
   581     0615                     	;# 
   582     0616                     	;# 
   583     0616                     	;# 
   584     0691                     	;# 
   585     0692                     	;# 
   586     0693                     	;# 
   587     0694                     	;# 
   588     0695                     	;# 
   589     0E8E                     	;# 
   590     0E8F                     	;# 
   591     0E90                     	;# 
   592     0E91                     	;# 
   593     0E92                     	;# 
   594     0E93                     	;# 
   595     0E94                     	;# 
   596     0E94                     	;# 
   597     0E95                     	;# 
   598     0E96                     	;# 
   599     0E97                     	;# 
   600     0E98                     	;# 
   601     0E99                     	;# 
   602     0E9A                     	;# 
   603     0E9B                     	;# 
   604     0E9C                     	;# 
   605     0E9D                     	;# 
   606     0E9E                     	;# 
   607     0E9F                     	;# 
   608     0FE4                     	;# 
   609     0FE5                     	;# 
   610     0FE6                     	;# 
   611     0FE7                     	;# 
   612     0FE8                     	;# 
   613     0FE9                     	;# 
   614     0FEA                     	;# 
   615     0FEB                     	;# 
   616     0FED                     	;# 
   617     0FEE                     	;# 
   618     0FEF                     	;# 
   619     0000                     	;# 
   620     0001                     	;# 
   621     0002                     	;# 
   622     0003                     	;# 
   623     0004                     	;# 
   624     0005                     	;# 
   625     0006                     	;# 
   626     0007                     	;# 
   627     0008                     	;# 
   628     0009                     	;# 
   629     000A                     	;# 
   630     000B                     	;# 
   631     000C                     	;# 
   632     000D                     	;# 
   633     000E                     	;# 
   634     0011                     	;# 
   635     0012                     	;# 
   636     0015                     	;# 
   637     0016                     	;# 
   638     0016                     	;# 
   639     0017                     	;# 
   640     0018                     	;# 
   641     0019                     	;# 
   642     001A                     	;# 
   643     001B                     	;# 
   644     001C                     	;# 
   645     008C                     	;# 
   646     008D                     	;# 
   647     008E                     	;# 
   648     0091                     	;# 
   649     0092                     	;# 
   650     0095                     	;# 
   651     0096                     	;# 
   652     0097                     	;# 
   653     0098                     	;# 
   654     0099                     	;# 
   655     009A                     	;# 
   656     009B                     	;# 
   657     009B                     	;# 
   658     009C                     	;# 
   659     009D                     	;# 
   660     009E                     	;# 
   661     009F                     	;# 
   662     010C                     	;# 
   663     010D                     	;# 
   664     010E                     	;# 
   665     0111                     	;# 
   666     0112                     	;# 
   667     0113                     	;# 
   668     0114                     	;# 
   669     0115                     	;# 
   670     0116                     	;# 
   671     0117                     	;# 
   672     0118                     	;# 
   673     0119                     	;# 
   674     011D                     	;# 
   675     018C                     	;# 
   676     018D                     	;# 
   677     018E                     	;# 
   678     0191                     	;# 
   679     0191                     	;# 
   680     0192                     	;# 
   681     0193                     	;# 
   682     0193                     	;# 
   683     0194                     	;# 
   684     0195                     	;# 
   685     0196                     	;# 
   686     0197                     	;# 
   687     0199                     	;# 
   688     019A                     	;# 
   689     019B                     	;# 
   690     019B                     	;# 
   691     019C                     	;# 
   692     019D                     	;# 
   693     019E                     	;# 
   694     019F                     	;# 
   695     020C                     	;# 
   696     020D                     	;# 
   697     0211                     	;# 
   698     0211                     	;# 
   699     0212                     	;# 
   700     0212                     	;# 
   701     0213                     	;# 
   702     0213                     	;# 
   703     0214                     	;# 
   704     0214                     	;# 
   705     0215                     	;# 
   706     0215                     	;# 
   707     0215                     	;# 
   708     0216                     	;# 
   709     0216                     	;# 
   710     0217                     	;# 
   711     0217                     	;# 
   712     0391                     	;# 
   713     0392                     	;# 
   714     0393                     	;# 
   715     0394                     	;# 
   716     0395                     	;# 
   717     0396                     	;# 
   718     039A                     	;# 
   719     039B                     	;# 
   720     0611                     	;# 
   721     0612                     	;# 
   722     0613                     	;# 
   723     0613                     	;# 
   724     0614                     	;# 
   725     0615                     	;# 
   726     0616                     	;# 
   727     0616                     	;# 
   728     0691                     	;# 
   729     0692                     	;# 
   730     0693                     	;# 
   731     0694                     	;# 
   732     0695                     	;# 
   733     0E8E                     	;# 
   734     0E8F                     	;# 
   735     0E90                     	;# 
   736     0E91                     	;# 
   737     0E92                     	;# 
   738     0E93                     	;# 
   739     0E94                     	;# 
   740     0E94                     	;# 
   741     0E95                     	;# 
   742     0E96                     	;# 
   743     0E97                     	;# 
   744     0E98                     	;# 
   745     0E99                     	;# 
   746     0E9A                     	;# 
   747     0E9B                     	;# 
   748     0E9C                     	;# 
   749     0E9D                     	;# 
   750     0E9E                     	;# 
   751     0E9F                     	;# 
   752     0FE4                     	;# 
   753     0FE5                     	;# 
   754     0FE6                     	;# 
   755     0FE7                     	;# 
   756     0FE8                     	;# 
   757     0FE9                     	;# 
   758     0FEA                     	;# 
   759     0FEB                     	;# 
   760     0FED                     	;# 
   761     0FEE                     	;# 
   762     0FEF                     	;# 
   763     0000                     	;# 
   764     0001                     	;# 
   765     0002                     	;# 
   766     0003                     	;# 
   767     0004                     	;# 
   768     0005                     	;# 
   769     0006                     	;# 
   770     0007                     	;# 
   771     0008                     	;# 
   772     0009                     	;# 
   773     000A                     	;# 
   774     000B                     	;# 
   775     000C                     	;# 
   776     000D                     	;# 
   777     000E                     	;# 
   778     0011                     	;# 
   779     0012                     	;# 
   780     0015                     	;# 
   781     0016                     	;# 
   782     0016                     	;# 
   783     0017                     	;# 
   784     0018                     	;# 
   785     0019                     	;# 
   786     001A                     	;# 
   787     001B                     	;# 
   788     001C                     	;# 
   789     008C                     	;# 
   790     008D                     	;# 
   791     008E                     	;# 
   792     0091                     	;# 
   793     0092                     	;# 
   794     0095                     	;# 
   795     0096                     	;# 
   796     0097                     	;# 
   797     0098                     	;# 
   798     0099                     	;# 
   799     009A                     	;# 
   800     009B                     	;# 
   801     009B                     	;# 
   802     009C                     	;# 
   803     009D                     	;# 
   804     009E                     	;# 
   805     009F                     	;# 
   806     010C                     	;# 
   807     010D                     	;# 
   808     010E                     	;# 
   809     0111                     	;# 
   810     0112                     	;# 
   811     0113                     	;# 
   812     0114                     	;# 
   813     0115                     	;# 
   814     0116                     	;# 
   815     0117                     	;# 
   816     0118                     	;# 
   817     0119                     	;# 
   818     011D                     	;# 
   819     018C                     	;# 
   820     018D                     	;# 
   821     018E                     	;# 
   822     0191                     	;# 
   823     0191                     	;# 
   824     0192                     	;# 
   825     0193                     	;# 
   826     0193                     	;# 
   827     0194                     	;# 
   828     0195                     	;# 
   829     0196                     	;# 
   830     0197                     	;# 
   831     0199                     	;# 
   832     019A                     	;# 
   833     019B                     	;# 
   834     019B                     	;# 
   835     019C                     	;# 
   836     019D                     	;# 
   837     019E                     	;# 
   838     019F                     	;# 
   839     020C                     	;# 
   840     020D                     	;# 
   841     0211                     	;# 
   842     0211                     	;# 
   843     0212                     	;# 
   844     0212                     	;# 
   845     0213                     	;# 
   846     0213                     	;# 
   847     0214                     	;# 
   848     0214                     	;# 
   849     0215                     	;# 
   850     0215                     	;# 
   851     0215                     	;# 
   852     0216                     	;# 
   853     0216                     	;# 
   854     0217                     	;# 
   855     0217                     	;# 
   856     0391                     	;# 
   857     0392                     	;# 
   858     0393                     	;# 
   859     0394                     	;# 
   860     0395                     	;# 
   861     0396                     	;# 
   862     039A                     	;# 
   863     039B                     	;# 
   864     0611                     	;# 
   865     0612                     	;# 
   866     0613                     	;# 
   867     0613                     	;# 
   868     0614                     	;# 
   869     0615                     	;# 
   870     0616                     	;# 
   871     0616                     	;# 
   872     0691                     	;# 
   873     0692                     	;# 
   874     0693                     	;# 
   875     0694                     	;# 
   876     0695                     	;# 
   877     0E8E                     	;# 
   878     0E8F                     	;# 
   879     0E90                     	;# 
   880     0E91                     	;# 
   881     0E92                     	;# 
   882     0E93                     	;# 
   883     0E94                     	;# 
   884     0E94                     	;# 
   885     0E95                     	;# 
   886     0E96                     	;# 
   887     0E97                     	;# 
   888     0E98                     	;# 
   889     0E99                     	;# 
   890     0E9A                     	;# 
   891     0E9B                     	;# 
   892     0E9C                     	;# 
   893     0E9D                     	;# 
   894     0E9E                     	;# 
   895     0E9F                     	;# 
   896     0FE4                     	;# 
   897     0FE5                     	;# 
   898     0FE6                     	;# 
   899     0FE7                     	;# 
   900     0FE8                     	;# 
   901     0FE9                     	;# 
   902     0FEA                     	;# 
   903     0FEB                     	;# 
   904     0FED                     	;# 
   905     0FEE                     	;# 
   906     0FEF                     	;# 
   907     0000                     	;# 
   908     0001                     	;# 
   909     0002                     	;# 
   910     0003                     	;# 
   911     0004                     	;# 
   912     0005                     	;# 
   913     0006                     	;# 
   914     0007                     	;# 
   915     0008                     	;# 
   916     0009                     	;# 
   917     000A                     	;# 
   918     000B                     	;# 
   919     000C                     	;# 
   920     000D                     	;# 
   921     000E                     	;# 
   922     0011                     	;# 
   923     0012                     	;# 
   924     0015                     	;# 
   925     0016                     	;# 
   926     0016                     	;# 
   927     0017                     	;# 
   928     0018                     	;# 
   929     0019                     	;# 
   930     001A                     	;# 
   931     001B                     	;# 
   932     001C                     	;# 
   933     008C                     	;# 
   934     008D                     	;# 
   935     008E                     	;# 
   936     0091                     	;# 
   937     0092                     	;# 
   938     0095                     	;# 
   939     0096                     	;# 
   940     0097                     	;# 
   941     0098                     	;# 
   942     0099                     	;# 
   943     009A                     	;# 
   944     009B                     	;# 
   945     009B                     	;# 
   946     009C                     	;# 
   947     009D                     	;# 
   948     009E                     	;# 
   949     009F                     	;# 
   950     010C                     	;# 
   951     010D                     	;# 
   952     010E                     	;# 
   953     0111                     	;# 
   954     0112                     	;# 
   955     0113                     	;# 
   956     0114                     	;# 
   957     0115                     	;# 
   958     0116                     	;# 
   959     0117                     	;# 
   960     0118                     	;# 
   961     0119                     	;# 
   962     011D                     	;# 
   963     018C                     	;# 
   964     018D                     	;# 
   965     018E                     	;# 
   966     0191                     	;# 
   967     0191                     	;# 
   968     0192                     	;# 
   969     0193                     	;# 
   970     0193                     	;# 
   971     0194                     	;# 
   972     0195                     	;# 
   973     0196                     	;# 
   974     0197                     	;# 
   975     0199                     	;# 
   976     019A                     	;# 
   977     019B                     	;# 
   978     019B                     	;# 
   979     019C                     	;# 
   980     019D                     	;# 
   981     019E                     	;# 
   982     019F                     	;# 
   983     020C                     	;# 
   984     020D                     	;# 
   985     0211                     	;# 
   986     0211                     	;# 
   987     0212                     	;# 
   988     0212                     	;# 
   989     0213                     	;# 
   990     0213                     	;# 
   991     0214                     	;# 
   992     0214                     	;# 
   993     0215                     	;# 
   994     0215                     	;# 
   995     0215                     	;# 
   996     0216                     	;# 
   997     0216                     	;# 
   998     0217                     	;# 
   999     0217                     	;# 
  1000     0391                     	;# 
  1001     0392                     	;# 
  1002     0393                     	;# 
  1003     0394                     	;# 
  1004     0395                     	;# 
  1005     0396                     	;# 
  1006     039A                     	;# 
  1007     039B                     	;# 
  1008     0611                     	;# 
  1009     0612                     	;# 
  1010     0613                     	;# 
  1011     0613                     	;# 
  1012     0614                     	;# 
  1013     0615                     	;# 
  1014     0616                     	;# 
  1015     0616                     	;# 
  1016     0691                     	;# 
  1017     0692                     	;# 
  1018     0693                     	;# 
  1019     0694                     	;# 
  1020     0695                     	;# 
  1021     0E8E                     	;# 
  1022     0E8F                     	;# 
  1023     0E90                     	;# 
  1024     0E91                     	;# 
  1025     0E92                     	;# 
  1026     0E93                     	;# 
  1027     0E94                     	;# 
  1028     0E94                     	;# 
  1029     0E95                     	;# 
  1030     0E96                     	;# 
  1031     0E97                     	;# 
  1032     0E98                     	;# 
  1033     0E99                     	;# 
  1034     0E9A                     	;# 
  1035     0E9B                     	;# 
  1036     0E9C                     	;# 
  1037     0E9D                     	;# 
  1038     0E9E                     	;# 
  1039     0E9F                     	;# 
  1040     0FE4                     	;# 
  1041     0FE5                     	;# 
  1042     0FE6                     	;# 
  1043     0FE7                     	;# 
  1044     0FE8                     	;# 
  1045     0FE9                     	;# 
  1046     0FEA                     	;# 
  1047     0FEB                     	;# 
  1048     0FED                     	;# 
  1049     0FEE                     	;# 
  1050     0FEF                     	;# 
  1051     0000                     	;# 
  1052     0001                     	;# 
  1053     0002                     	;# 
  1054     0003                     	;# 
  1055     0004                     	;# 
  1056     0005                     	;# 
  1057     0006                     	;# 
  1058     0007                     	;# 
  1059     0008                     	;# 
  1060     0009                     	;# 
  1061     000A                     	;# 
  1062     000B                     	;# 
  1063     000C                     	;# 
  1064     000D                     	;# 
  1065     000E                     	;# 
  1066     0011                     	;# 
  1067     0012                     	;# 
  1068     0015                     	;# 
  1069     0016                     	;# 
  1070     0016                     	;# 
  1071     0017                     	;# 
  1072     0018                     	;# 
  1073     0019                     	;# 
  1074     001A                     	;# 
  1075     001B                     	;# 
  1076     001C                     	;# 
  1077     008C                     	;# 
  1078     008D                     	;# 
  1079     008E                     	;# 
  1080     0091                     	;# 
  1081     0092                     	;# 
  1082     0095                     	;# 
  1083     0096                     	;# 
  1084     0097                     	;# 
  1085     0098                     	;# 
  1086     0099                     	;# 
  1087     009A                     	;# 
  1088     009B                     	;# 
  1089     009B                     	;# 
  1090     009C                     	;# 
  1091     009D                     	;# 
  1092     009E                     	;# 
  1093     009F                     	;# 
  1094     010C                     	;# 
  1095     010D                     	;# 
  1096     010E                     	;# 
  1097     0111                     	;# 
  1098     0112                     	;# 
  1099     0113                     	;# 
  1100     0114                     	;# 
  1101     0115                     	;# 
  1102     0116                     	;# 
  1103     0117                     	;# 
  1104     0118                     	;# 
  1105     0119                     	;# 
  1106     011D                     	;# 
  1107     018C                     	;# 
  1108     018D                     	;# 
  1109     018E                     	;# 
  1110     0191                     	;# 
  1111     0191                     	;# 
  1112     0192                     	;# 
  1113     0193                     	;# 
  1114     0193                     	;# 
  1115     0194                     	;# 
  1116     0195                     	;# 
  1117     0196                     	;# 
  1118     0197                     	;# 
  1119     0199                     	;# 
  1120     019A                     	;# 
  1121     019B                     	;# 
  1122     019B                     	;# 
  1123     019C                     	;# 
  1124     019D                     	;# 
  1125     019E                     	;# 
  1126     019F                     	;# 
  1127     020C                     	;# 
  1128     020D                     	;# 
  1129     0211                     	;# 
  1130     0211                     	;# 
  1131     0212                     	;# 
  1132     0212                     	;# 
  1133     0213                     	;# 
  1134     0213                     	;# 
  1135     0214                     	;# 
  1136     0214                     	;# 
  1137     0215                     	;# 
  1138     0215                     	;# 
  1139     0215                     	;# 
  1140     0216                     	;# 
  1141     0216                     	;# 
  1142     0217                     	;# 
  1143     0217                     	;# 
  1144     0391                     	;# 
  1145     0392                     	;# 
  1146     0393                     	;# 
  1147     0394                     	;# 
  1148     0395                     	;# 
  1149     0396                     	;# 
  1150     039A                     	;# 
  1151     039B                     	;# 
  1152     0611                     	;# 
  1153     0612                     	;# 
  1154     0613                     	;# 
  1155     0613                     	;# 
  1156     0614                     	;# 
  1157     0615                     	;# 
  1158     0616                     	;# 
  1159     0616                     	;# 
  1160     0691                     	;# 
  1161     0692                     	;# 
  1162     0693                     	;# 
  1163     0694                     	;# 
  1164     0695                     	;# 
  1165     0E8E                     	;# 
  1166     0E8F                     	;# 
  1167     0E90                     	;# 
  1168     0E91                     	;# 
  1169     0E92                     	;# 
  1170     0E93                     	;# 
  1171     0E94                     	;# 
  1172     0E94                     	;# 
  1173     0E95                     	;# 
  1174     0E96                     	;# 
  1175     0E97                     	;# 
  1176     0E98                     	;# 
  1177     0E99                     	;# 
  1178     0E9A                     	;# 
  1179     0E9B                     	;# 
  1180     0E9C                     	;# 
  1181     0E9D                     	;# 
  1182     0E9E                     	;# 
  1183     0E9F                     	;# 
  1184     0FE4                     	;# 
  1185     0FE5                     	;# 
  1186     0FE6                     	;# 
  1187     0FE7                     	;# 
  1188     0FE8                     	;# 
  1189     0FE9                     	;# 
  1190     0FEA                     	;# 
  1191     0FEB                     	;# 
  1192     0FED                     	;# 
  1193     0FEE                     	;# 
  1194     0FEF                     	;# 
  1195     0000                     	;# 
  1196     0001                     	;# 
  1197     0002                     	;# 
  1198     0003                     	;# 
  1199     0004                     	;# 
  1200     0005                     	;# 
  1201     0006                     	;# 
  1202     0007                     	;# 
  1203     0008                     	;# 
  1204     0009                     	;# 
  1205     000A                     	;# 
  1206     000B                     	;# 
  1207     000C                     	;# 
  1208     000D                     	;# 
  1209     000E                     	;# 
  1210     0011                     	;# 
  1211     0012                     	;# 
  1212     0015                     	;# 
  1213     0016                     	;# 
  1214     0016                     	;# 
  1215     0017                     	;# 
  1216     0018                     	;# 
  1217     0019                     	;# 
  1218     001A                     	;# 
  1219     001B                     	;# 
  1220     001C                     	;# 
  1221     008C                     	;# 
  1222     008D                     	;# 
  1223     008E                     	;# 
  1224     0091                     	;# 
  1225     0092                     	;# 
  1226     0095                     	;# 
  1227     0096                     	;# 
  1228     0097                     	;# 
  1229     0098                     	;# 
  1230     0099                     	;# 
  1231     009A                     	;# 
  1232     009B                     	;# 
  1233     009B                     	;# 
  1234     009C                     	;# 
  1235     009D                     	;# 
  1236     009E                     	;# 
  1237     009F                     	;# 
  1238     010C                     	;# 
  1239     010D                     	;# 
  1240     010E                     	;# 
  1241     0111                     	;# 
  1242     0112                     	;# 
  1243     0113                     	;# 
  1244     0114                     	;# 
  1245     0115                     	;# 
  1246     0116                     	;# 
  1247     0117                     	;# 
  1248     0118                     	;# 
  1249     0119                     	;# 
  1250     011D                     	;# 
  1251     018C                     	;# 
  1252     018D                     	;# 
  1253     018E                     	;# 
  1254     0191                     	;# 
  1255     0191                     	;# 
  1256     0192                     	;# 
  1257     0193                     	;# 
  1258     0193                     	;# 
  1259     0194                     	;# 
  1260     0195                     	;# 
  1261     0196                     	;# 
  1262     0197                     	;# 
  1263     0199                     	;# 
  1264     019A                     	;# 
  1265     019B                     	;# 
  1266     019B                     	;# 
  1267     019C                     	;# 
  1268     019D                     	;# 
  1269     019E                     	;# 
  1270     019F                     	;# 
  1271     020C                     	;# 
  1272     020D                     	;# 
  1273     0211                     	;# 
  1274     0211                     	;# 
  1275     0212                     	;# 
  1276     0212                     	;# 
  1277     0213                     	;# 
  1278     0213                     	;# 
  1279     0214                     	;# 
  1280     0214                     	;# 
  1281     0215                     	;# 
  1282     0215                     	;# 
  1283     0215                     	;# 
  1284     0216                     	;# 
  1285     0216                     	;# 
  1286     0217                     	;# 
  1287     0217                     	;# 
  1288     0391                     	;# 
  1289     0392                     	;# 
  1290     0393                     	;# 
  1291     0394                     	;# 
  1292     0395                     	;# 
  1293     0396                     	;# 
  1294     039A                     	;# 
  1295     039B                     	;# 
  1296     0611                     	;# 
  1297     0612                     	;# 
  1298     0613                     	;# 
  1299     0613                     	;# 
  1300     0614                     	;# 
  1301     0615                     	;# 
  1302     0616                     	;# 
  1303     0616                     	;# 
  1304     0691                     	;# 
  1305     0692                     	;# 
  1306     0693                     	;# 
  1307     0694                     	;# 
  1308     0695                     	;# 
  1309     0E8E                     	;# 
  1310     0E8F                     	;# 
  1311     0E90                     	;# 
  1312     0E91                     	;# 
  1313     0E92                     	;# 
  1314     0E93                     	;# 
  1315     0E94                     	;# 
  1316     0E94                     	;# 
  1317     0E95                     	;# 
  1318     0E96                     	;# 
  1319     0E97                     	;# 
  1320     0E98                     	;# 
  1321     0E99                     	;# 
  1322     0E9A                     	;# 
  1323     0E9B                     	;# 
  1324     0E9C                     	;# 
  1325     0E9D                     	;# 
  1326     0E9E                     	;# 
  1327     0E9F                     	;# 
  1328     0FE4                     	;# 
  1329     0FE5                     	;# 
  1330     0FE6                     	;# 
  1331     0FE7                     	;# 
  1332     0FE8                     	;# 
  1333     0FE9                     	;# 
  1334     0FEA                     	;# 
  1335     0FEB                     	;# 
  1336     0FED                     	;# 
  1337     0FEE                     	;# 
  1338     0FEF                     	;# 
  1339     0000                     	;# 
  1340     0001                     	;# 
  1341     0002                     	;# 
  1342     0003                     	;# 
  1343     0004                     	;# 
  1344     0005                     	;# 
  1345     0006                     	;# 
  1346     0007                     	;# 
  1347     0008                     	;# 
  1348     0009                     	;# 
  1349     000A                     	;# 
  1350     000B                     	;# 
  1351     000C                     	;# 
  1352     000D                     	;# 
  1353     000E                     	;# 
  1354     0011                     	;# 
  1355     0012                     	;# 
  1356     0015                     	;# 
  1357     0016                     	;# 
  1358     0016                     	;# 
  1359     0017                     	;# 
  1360     0018                     	;# 
  1361     0019                     	;# 
  1362     001A                     	;# 
  1363     001B                     	;# 
  1364     001C                     	;# 
  1365     008C                     	;# 
  1366     008D                     	;# 
  1367     008E                     	;# 
  1368     0091                     	;# 
  1369     0092                     	;# 
  1370     0095                     	;# 
  1371     0096                     	;# 
  1372     0097                     	;# 
  1373     0098                     	;# 
  1374     0099                     	;# 
  1375     009A                     	;# 
  1376     009B                     	;# 
  1377     009B                     	;# 
  1378     009C                     	;# 
  1379     009D                     	;# 
  1380     009E                     	;# 
  1381     009F                     	;# 
  1382     010C                     	;# 
  1383     010D                     	;# 
  1384     010E                     	;# 
  1385     0111                     	;# 
  1386     0112                     	;# 
  1387     0113                     	;# 
  1388     0114                     	;# 
  1389     0115                     	;# 
  1390     0116                     	;# 
  1391     0117                     	;# 
  1392     0118                     	;# 
  1393     0119                     	;# 
  1394     011D                     	;# 
  1395     018C                     	;# 
  1396     018D                     	;# 
  1397     018E                     	;# 
  1398     0191                     	;# 
  1399     0191                     	;# 
  1400     0192                     	;# 
  1401     0193                     	;# 
  1402     0193                     	;# 
  1403     0194                     	;# 
  1404     0195                     	;# 
  1405     0196                     	;# 
  1406     0197                     	;# 
  1407     0199                     	;# 
  1408     019A                     	;# 
  1409     019B                     	;# 
  1410     019B                     	;# 
  1411     019C                     	;# 
  1412     019D                     	;# 
  1413     019E                     	;# 
  1414     019F                     	;# 
  1415     020C                     	;# 
  1416     020D                     	;# 
  1417     0211                     	;# 
  1418     0211                     	;# 
  1419     0212                     	;# 
  1420     0212                     	;# 
  1421     0213                     	;# 
  1422     0213                     	;# 
  1423     0214                     	;# 
  1424     0214                     	;# 
  1425     0215                     	;# 
  1426     0215                     	;# 
  1427     0215                     	;# 
  1428     0216                     	;# 
  1429     0216                     	;# 
  1430     0217                     	;# 
  1431     0217                     	;# 
  1432     0391                     	;# 
  1433     0392                     	;# 
  1434     0393                     	;# 
  1435     0394                     	;# 
  1436     0395                     	;# 
  1437     0396                     	;# 
  1438     039A                     	;# 
  1439     039B                     	;# 
  1440     0611                     	;# 
  1441     0612                     	;# 
  1442     0613                     	;# 
  1443     0613                     	;# 
  1444     0614                     	;# 
  1445     0615                     	;# 
  1446     0616                     	;# 
  1447     0616                     	;# 
  1448     0691                     	;# 
  1449     0692                     	;# 
  1450     0693                     	;# 
  1451     0694                     	;# 
  1452     0695                     	;# 
  1453     0E8E                     	;# 
  1454     0E8F                     	;# 
  1455     0E90                     	;# 
  1456     0E91                     	;# 
  1457     0E92                     	;# 
  1458     0E93                     	;# 
  1459     0E94                     	;# 
  1460     0E94                     	;# 
  1461     0E95                     	;# 
  1462     0E96                     	;# 
  1463     0E97                     	;# 
  1464     0E98                     	;# 
  1465     0E99                     	;# 
  1466     0E9A                     	;# 
  1467     0E9B                     	;# 
  1468     0E9C                     	;# 
  1469     0E9D                     	;# 
  1470     0E9E                     	;# 
  1471     0E9F                     	;# 
  1472     0FE4                     	;# 
  1473     0FE5                     	;# 
  1474     0FE6                     	;# 
  1475     0FE7                     	;# 
  1476     0FE8                     	;# 
  1477     0FE9                     	;# 
  1478     0FEA                     	;# 
  1479     0FEB                     	;# 
  1480     0FED                     	;# 
  1481     0FEE                     	;# 
  1482     0FEF                     	;# 
  1483     0000                     	;# 
  1484     0001                     	;# 
  1485     0002                     	;# 
  1486     0003                     	;# 
  1487     0004                     	;# 
  1488     0005                     	;# 
  1489     0006                     	;# 
  1490     0007                     	;# 
  1491     0008                     	;# 
  1492     0009                     	;# 
  1493     000A                     	;# 
  1494     000B                     	;# 
  1495     000C                     	;# 
  1496     000D                     	;# 
  1497     000E                     	;# 
  1498     0011                     	;# 
  1499     0012                     	;# 
  1500     0015                     	;# 
  1501     0016                     	;# 
  1502     0016                     	;# 
  1503     0017                     	;# 
  1504     0018                     	;# 
  1505     0019                     	;# 
  1506     001A                     	;# 
  1507     001B                     	;# 
  1508     001C                     	;# 
  1509     008C                     	;# 
  1510     008D                     	;# 
  1511     008E                     	;# 
  1512     0091                     	;# 
  1513     0092                     	;# 
  1514     0095                     	;# 
  1515     0096                     	;# 
  1516     0097                     	;# 
  1517     0098                     	;# 
  1518     0099                     	;# 
  1519     009A                     	;# 
  1520     009B                     	;# 
  1521     009B                     	;# 
  1522     009C                     	;# 
  1523     009D                     	;# 
  1524     009E                     	;# 
  1525     009F                     	;# 
  1526     010C                     	;# 
  1527     010D                     	;# 
  1528     010E                     	;# 
  1529     0111                     	;# 
  1530     0112                     	;# 
  1531     0113                     	;# 
  1532     0114                     	;# 
  1533     0115                     	;# 
  1534     0116                     	;# 
  1535     0117                     	;# 
  1536     0118                     	;# 
  1537     0119                     	;# 
  1538     011D                     	;# 
  1539     018C                     	;# 
  1540     018D                     	;# 
  1541     018E                     	;# 
  1542     0191                     	;# 
  1543     0191                     	;# 
  1544     0192                     	;# 
  1545     0193                     	;# 
  1546     0193                     	;# 
  1547     0194                     	;# 
  1548     0195                     	;# 
  1549     0196                     	;# 
  1550     0197                     	;# 
  1551     0199                     	;# 
  1552     019A                     	;# 
  1553     019B                     	;# 
  1554     019B                     	;# 
  1555     019C                     	;# 
  1556     019D                     	;# 
  1557     019E                     	;# 
  1558     019F                     	;# 
  1559     020C                     	;# 
  1560     020D                     	;# 
  1561     0211                     	;# 
  1562     0211                     	;# 
  1563     0212                     	;# 
  1564     0212                     	;# 
  1565     0213                     	;# 
  1566     0213                     	;# 
  1567     0214                     	;# 
  1568     0214                     	;# 
  1569     0215                     	;# 
  1570     0215                     	;# 
  1571     0215                     	;# 
  1572     0216                     	;# 
  1573     0216                     	;# 
  1574     0217                     	;# 
  1575     0217                     	;# 
  1576     0391                     	;# 
  1577     0392                     	;# 
  1578     0393                     	;# 
  1579     0394                     	;# 
  1580     0395                     	;# 
  1581     0396                     	;# 
  1582     039A                     	;# 
  1583     039B                     	;# 
  1584     0611                     	;# 
  1585     0612                     	;# 
  1586     0613                     	;# 
  1587     0613                     	;# 
  1588     0614                     	;# 
  1589     0615                     	;# 
  1590     0616                     	;# 
  1591     0616                     	;# 
  1592     0691                     	;# 
  1593     0692                     	;# 
  1594     0693                     	;# 
  1595     0694                     	;# 
  1596     0695                     	;# 
  1597     0E8E                     	;# 
  1598     0E8F                     	;# 
  1599     0E90                     	;# 
  1600     0E91                     	;# 
  1601     0E92                     	;# 
  1602     0E93                     	;# 
  1603     0E94                     	;# 
  1604     0E94                     	;# 
  1605     0E95                     	;# 
  1606     0E96                     	;# 
  1607     0E97                     	;# 
  1608     0E98                     	;# 
  1609     0E99                     	;# 
  1610     0E9A                     	;# 
  1611     0E9B                     	;# 
  1612     0E9C                     	;# 
  1613     0E9D                     	;# 
  1614     0E9E                     	;# 
  1615     0E9F                     	;# 
  1616     0FE4                     	;# 
  1617     0FE5                     	;# 
  1618     0FE6                     	;# 
  1619     0FE7                     	;# 
  1620     0FE8                     	;# 
  1621     0FE9                     	;# 
  1622     0FEA                     	;# 
  1623     0FEB                     	;# 
  1624     0FED                     	;# 
  1625     0FEE                     	;# 
  1626     0FEF                     	;# 
  1627     0000                     	;# 
  1628     0001                     	;# 
  1629     0002                     	;# 
  1630     0003                     	;# 
  1631     0004                     	;# 
  1632     0005                     	;# 
  1633     0006                     	;# 
  1634     0007                     	;# 
  1635     0008                     	;# 
  1636     0009                     	;# 
  1637     000A                     	;# 
  1638     000B                     	;# 
  1639     000C                     	;# 
  1640     000D                     	;# 
  1641     000E                     	;# 
  1642     0011                     	;# 
  1643     0012                     	;# 
  1644     0015                     	;# 
  1645     0016                     	;# 
  1646     0016                     	;# 
  1647     0017                     	;# 
  1648     0018                     	;# 
  1649     0019                     	;# 
  1650     001A                     	;# 
  1651     001B                     	;# 
  1652     001C                     	;# 
  1653     008C                     	;# 
  1654     008D                     	;# 
  1655     008E                     	;# 
  1656     0091                     	;# 
  1657     0092                     	;# 
  1658     0095                     	;# 
  1659     0096                     	;# 
  1660     0097                     	;# 
  1661     0098                     	;# 
  1662     0099                     	;# 
  1663     009A                     	;# 
  1664     009B                     	;# 
  1665     009B                     	;# 
  1666     009C                     	;# 
  1667     009D                     	;# 
  1668     009E                     	;# 
  1669     009F                     	;# 
  1670     010C                     	;# 
  1671     010D                     	;# 
  1672     010E                     	;# 
  1673     0111                     	;# 
  1674     0112                     	;# 
  1675     0113                     	;# 
  1676     0114                     	;# 
  1677     0115                     	;# 
  1678     0116                     	;# 
  1679     0117                     	;# 
  1680     0118                     	;# 
  1681     0119                     	;# 
  1682     011D                     	;# 
  1683     018C                     	;# 
  1684     018D                     	;# 
  1685     018E                     	;# 
  1686     0191                     	;# 
  1687     0191                     	;# 
  1688     0192                     	;# 
  1689     0193                     	;# 
  1690     0193                     	;# 
  1691     0194                     	;# 
  1692     0195                     	;# 
  1693     0196                     	;# 
  1694     0197                     	;# 
  1695     0199                     	;# 
  1696     019A                     	;# 
  1697     019B                     	;# 
  1698     019B                     	;# 
  1699     019C                     	;# 
  1700     019D                     	;# 
  1701     019E                     	;# 
  1702     019F                     	;# 
  1703     020C                     	;# 
  1704     020D                     	;# 
  1705     0211                     	;# 
  1706     0211                     	;# 
  1707     0212                     	;# 
  1708     0212                     	;# 
  1709     0213                     	;# 
  1710     0213                     	;# 
  1711     0214                     	;# 
  1712     0214                     	;# 
  1713     0215                     	;# 
  1714     0215                     	;# 
  1715     0215                     	;# 
  1716     0216                     	;# 
  1717     0216                     	;# 
  1718     0217                     	;# 
  1719     0217                     	;# 
  1720     0391                     	;# 
  1721     0392                     	;# 
  1722     0393                     	;# 
  1723     0394                     	;# 
  1724     0395                     	;# 
  1725     0396                     	;# 
  1726     039A                     	;# 
  1727     039B                     	;# 
  1728     0611                     	;# 
  1729     0612                     	;# 
  1730     0613                     	;# 
  1731     0613                     	;# 
  1732     0614                     	;# 
  1733     0615                     	;# 
  1734     0616                     	;# 
  1735     0616                     	;# 
  1736     0691                     	;# 
  1737     0692                     	;# 
  1738     0693                     	;# 
  1739     0694                     	;# 
  1740     0695                     	;# 
  1741     0E8E                     	;# 
  1742     0E8F                     	;# 
  1743     0E90                     	;# 
  1744     0E91                     	;# 
  1745     0E92                     	;# 
  1746     0E93                     	;# 
  1747     0E94                     	;# 
  1748     0E94                     	;# 
  1749     0E95                     	;# 
  1750     0E96                     	;# 
  1751     0E97                     	;# 
  1752     0E98                     	;# 
  1753     0E99                     	;# 
  1754     0E9A                     	;# 
  1755     0E9B                     	;# 
  1756     0E9C                     	;# 
  1757     0E9D                     	;# 
  1758     0E9E                     	;# 
  1759     0E9F                     	;# 
  1760     0FE4                     	;# 
  1761     0FE5                     	;# 
  1762     0FE6                     	;# 
  1763     0FE7                     	;# 
  1764     0FE8                     	;# 
  1765     0FE9                     	;# 
  1766     0FEA                     	;# 
  1767     0FEB                     	;# 
  1768     0FED                     	;# 
  1769     0FEE                     	;# 
  1770     0FEF                     	;# 
  1771     0000                     	;# 
  1772     0001                     	;# 
  1773     0002                     	;# 
  1774     0003                     	;# 
  1775     0004                     	;# 
  1776     0005                     	;# 
  1777     0006                     	;# 
  1778     0007                     	;# 
  1779     0008                     	;# 
  1780     0009                     	;# 
  1781     000A                     	;# 
  1782     000B                     	;# 
  1783     000C                     	;# 
  1784     000D                     	;# 
  1785     000E                     	;# 
  1786     0011                     	;# 
  1787     0012                     	;# 
  1788     0015                     	;# 
  1789     0016                     	;# 
  1790     0016                     	;# 
  1791     0017                     	;# 
  1792     0018                     	;# 
  1793     0019                     	;# 
  1794     001A                     	;# 
  1795     001B                     	;# 
  1796     001C                     	;# 
  1797     008C                     	;# 
  1798     008D                     	;# 
  1799     008E                     	;# 
  1800     0091                     	;# 
  1801     0092                     	;# 
  1802     0095                     	;# 
  1803     0096                     	;# 
  1804     0097                     	;# 
  1805     0098                     	;# 
  1806     0099                     	;# 
  1807     009A                     	;# 
  1808     009B                     	;# 
  1809     009B                     	;# 
  1810     009C                     	;# 
  1811     009D                     	;# 
  1812     009E                     	;# 
  1813     009F                     	;# 
  1814     010C                     	;# 
  1815     010D                     	;# 
  1816     010E                     	;# 
  1817     0111                     	;# 
  1818     0112                     	;# 
  1819     0113                     	;# 
  1820     0114                     	;# 
  1821     0115                     	;# 
  1822     0116                     	;# 
  1823     0117                     	;# 
  1824     0118                     	;# 
  1825     0119                     	;# 
  1826     011D                     	;# 
  1827     018C                     	;# 
  1828     018D                     	;# 
  1829     018E                     	;# 
  1830     0191                     	;# 
  1831     0191                     	;# 
  1832     0192                     	;# 
  1833     0193                     	;# 
  1834     0193                     	;# 
  1835     0194                     	;# 
  1836     0195                     	;# 
  1837     0196                     	;# 
  1838     0197                     	;# 
  1839     0199                     	;# 
  1840     019A                     	;# 
  1841     019B                     	;# 
  1842     019B                     	;# 
  1843     019C                     	;# 
  1844     019D                     	;# 
  1845     019E                     	;# 
  1846     019F                     	;# 
  1847     020C                     	;# 
  1848     020D                     	;# 
  1849     0211                     	;# 
  1850     0211                     	;# 
  1851     0212                     	;# 
  1852     0212                     	;# 
  1853     0213                     	;# 
  1854     0213                     	;# 
  1855     0214                     	;# 
  1856     0214                     	;# 
  1857     0215                     	;# 
  1858     0215                     	;# 
  1859     0215                     	;# 
  1860     0216                     	;# 
  1861     0216                     	;# 
  1862     0217                     	;# 
  1863     0217                     	;# 
  1864     0391                     	;# 
  1865     0392                     	;# 
  1866     0393                     	;# 
  1867     0394                     	;# 
  1868     0395                     	;# 
  1869     0396                     	;# 
  1870     039A                     	;# 
  1871     039B                     	;# 
  1872     0611                     	;# 
  1873     0612                     	;# 
  1874     0613                     	;# 
  1875     0613                     	;# 
  1876     0614                     	;# 
  1877     0615                     	;# 
  1878     0616                     	;# 
  1879     0616                     	;# 
  1880     0691                     	;# 
  1881     0692                     	;# 
  1882     0693                     	;# 
  1883     0694                     	;# 
  1884     0695                     	;# 
  1885     0E8E                     	;# 
  1886     0E8F                     	;# 
  1887     0E90                     	;# 
  1888     0E91                     	;# 
  1889     0E92                     	;# 
  1890     0E93                     	;# 
  1891     0E94                     	;# 
  1892     0E94                     	;# 
  1893     0E95                     	;# 
  1894     0E96                     	;# 
  1895     0E97                     	;# 
  1896     0E98                     	;# 
  1897     0E99                     	;# 
  1898     0E9A                     	;# 
  1899     0E9B                     	;# 
  1900     0E9C                     	;# 
  1901     0E9D                     	;# 
  1902     0E9E                     	;# 
  1903     0E9F                     	;# 
  1904     0FE4                     	;# 
  1905     0FE5                     	;# 
  1906     0FE6                     	;# 
  1907     0FE7                     	;# 
  1908     0FE8                     	;# 
  1909     0FE9                     	;# 
  1910     0FEA                     	;# 
  1911     0FEB                     	;# 
  1912     0FED                     	;# 
  1913     0FEE                     	;# 
  1914     0FEF                     	;# 
  1915     0000                     	;# 
  1916     0001                     	;# 
  1917     0002                     	;# 
  1918     0003                     	;# 
  1919     0004                     	;# 
  1920     0005                     	;# 
  1921     0006                     	;# 
  1922     0007                     	;# 
  1923     0008                     	;# 
  1924     0009                     	;# 
  1925     000A                     	;# 
  1926     000B                     	;# 
  1927     000C                     	;# 
  1928     000D                     	;# 
  1929     000E                     	;# 
  1930     0011                     	;# 
  1931     0012                     	;# 
  1932     0015                     	;# 
  1933     0016                     	;# 
  1934     0016                     	;# 
  1935     0017                     	;# 
  1936     0018                     	;# 
  1937     0019                     	;# 
  1938     001A                     	;# 
  1939     001B                     	;# 
  1940     001C                     	;# 
  1941     008C                     	;# 
  1942     008D                     	;# 
  1943     008E                     	;# 
  1944     0091                     	;# 
  1945     0092                     	;# 
  1946     0095                     	;# 
  1947     0096                     	;# 
  1948     0097                     	;# 
  1949     0098                     	;# 
  1950     0099                     	;# 
  1951     009A                     	;# 
  1952     009B                     	;# 
  1953     009B                     	;# 
  1954     009C                     	;# 
  1955     009D                     	;# 
  1956     009E                     	;# 
  1957     009F                     	;# 
  1958     010C                     	;# 
  1959     010D                     	;# 
  1960     010E                     	;# 
  1961     0111                     	;# 
  1962     0112                     	;# 
  1963     0113                     	;# 
  1964     0114                     	;# 
  1965     0115                     	;# 
  1966     0116                     	;# 
  1967     0117                     	;# 
  1968     0118                     	;# 
  1969     0119                     	;# 
  1970     011D                     	;# 
  1971     018C                     	;# 
  1972     018D                     	;# 
  1973     018E                     	;# 
  1974     0191                     	;# 
  1975     0191                     	;# 
  1976     0192                     	;# 
  1977     0193                     	;# 
  1978     0193                     	;# 
  1979     0194                     	;# 
  1980     0195                     	;# 
  1981     0196                     	;# 
  1982     0197                     	;# 
  1983     0199                     	;# 
  1984     019A                     	;# 
  1985     019B                     	;# 
  1986     019B                     	;# 
  1987     019C                     	;# 
  1988     019D                     	;# 
  1989     019E                     	;# 
  1990     019F                     	;# 
  1991     020C                     	;# 
  1992     020D                     	;# 
  1993     0211                     	;# 
  1994     0211                     	;# 
  1995     0212                     	;# 
  1996     0212                     	;# 
  1997     0213                     	;# 
  1998     0213                     	;# 
  1999     0214                     	;# 
  2000     0214                     	;# 
  2001     0215                     	;# 
  2002     0215                     	;# 
  2003     0215                     	;# 
  2004     0216                     	;# 
  2005     0216                     	;# 
  2006     0217                     	;# 
  2007     0217                     	;# 
  2008     0391                     	;# 
  2009     0392                     	;# 
  2010     0393                     	;# 
  2011     0394                     	;# 
  2012     0395                     	;# 
  2013     0396                     	;# 
  2014     039A                     	;# 
  2015     039B                     	;# 
  2016     0611                     	;# 
  2017     0612                     	;# 
  2018     0613                     	;# 
  2019     0613                     	;# 
  2020     0614                     	;# 
  2021     0615                     	;# 
  2022     0616                     	;# 
  2023     0616                     	;# 
  2024     0691                     	;# 
  2025     0692                     	;# 
  2026     0693                     	;# 
  2027     0694                     	;# 
  2028     0695                     	;# 
  2029     0E8E                     	;# 
  2030     0E8F                     	;# 
  2031     0E90                     	;# 
  2032     0E91                     	;# 
  2033     0E92                     	;# 
  2034     0E93                     	;# 
  2035     0E94                     	;# 
  2036     0E94                     	;# 
  2037     0E95                     	;# 
  2038     0E96                     	;# 
  2039     0E97                     	;# 
  2040     0E98                     	;# 
  2041     0E99                     	;# 
  2042     0E9A                     	;# 
  2043     0E9B                     	;# 
  2044     0E9C                     	;# 
  2045     0E9D                     	;# 
  2046     0E9E                     	;# 
  2047     0E9F                     	;# 
  2048     0FE4                     	;# 
  2049     0FE5                     	;# 
  2050     0FE6                     	;# 
  2051     0FE7                     	;# 
  2052     0FE8                     	;# 
  2053     0FE9                     	;# 
  2054     0FEA                     	;# 
  2055     0FEB                     	;# 
  2056     0FED                     	;# 
  2057     0FEE                     	;# 
  2058     0FEF                     	;_keyboard
  2059                           
  2060                           	psect	stringtext1
  2061     046B                     __pstringtext1:
  2062     046B                     _ps2ExtUsbMap:
  2063     046B  3400               	retlw	0
  2064     046C  3400               	retlw	0
  2065     046D  3400               	retlw	0
  2066     046E  3400               	retlw	0
  2067     046F  3400               	retlw	0
  2068     0470  3400               	retlw	0
  2069     0471  3400               	retlw	0
  2070     0472  3400               	retlw	0
  2071     0473  3400               	retlw	0
  2072     0474  3400               	retlw	0
  2073     0475  3400               	retlw	0
  2074     0476  3400               	retlw	0
  2075     0477  3400               	retlw	0
  2076     0478  3400               	retlw	0
  2077     0479  3400               	retlw	0
  2078     047A  3400               	retlw	0
  2079     047B  3400               	retlw	0
  2080     047C  34E6               	retlw	230
  2081     047D  3400               	retlw	0
  2082     047E  3400               	retlw	0
  2083     047F  34E4               	retlw	228
  2084     0480  3400               	retlw	0
  2085     0481  3400               	retlw	0
  2086     0482  3400               	retlw	0
  2087     0483  3400               	retlw	0
  2088     0484  3400               	retlw	0
  2089     0485  3400               	retlw	0
  2090     0486  3400               	retlw	0
  2091     0487  3400               	retlw	0
  2092     0488  3400               	retlw	0
  2093     0489  3400               	retlw	0
  2094     048A  34E3               	retlw	227
  2095     048B  3400               	retlw	0
  2096     048C  3400               	retlw	0
  2097     048D  3400               	retlw	0
  2098     048E  3400               	retlw	0
  2099     048F  3400               	retlw	0
  2100     0490  3400               	retlw	0
  2101     0491  3400               	retlw	0
  2102     0492  34E7               	retlw	231
  2103     0493  3400               	retlw	0
  2104     0494  3400               	retlw	0
  2105     0495  3400               	retlw	0
  2106     0496  3400               	retlw	0
  2107     0497  3400               	retlw	0
  2108     0498  3400               	retlw	0
  2109     0499  3400               	retlw	0
  2110     049A  3465               	retlw	101
  2111     049B  3400               	retlw	0
  2112     049C  3400               	retlw	0
  2113     049D  3400               	retlw	0
  2114     049E  3400               	retlw	0
  2115     049F  3400               	retlw	0
  2116     04A0  3400               	retlw	0
  2117     04A1  3400               	retlw	0
  2118     04A2  3400               	retlw	0
  2119     04A3  3400               	retlw	0
  2120     04A4  3400               	retlw	0
  2121     04A5  3400               	retlw	0
  2122     04A6  3400               	retlw	0
  2123     04A7  3400               	retlw	0
  2124     04A8  3400               	retlw	0
  2125     04A9  3400               	retlw	0
  2126     04AA  3400               	retlw	0
  2127     04AB  3400               	retlw	0
  2128     04AC  3400               	retlw	0
  2129     04AD  3400               	retlw	0
  2130     04AE  3400               	retlw	0
  2131     04AF  3400               	retlw	0
  2132     04B0  3400               	retlw	0
  2133     04B1  3400               	retlw	0
  2134     04B2  3400               	retlw	0
  2135     04B3  3400               	retlw	0
  2136     04B4  3400               	retlw	0
  2137     04B5  3454               	retlw	84
  2138     04B6  3400               	retlw	0
  2139     04B7  3400               	retlw	0
  2140     04B8  3400               	retlw	0
  2141     04B9  3400               	retlw	0
  2142     04BA  3400               	retlw	0
  2143     04BB  3400               	retlw	0
  2144     04BC  3400               	retlw	0
  2145     04BD  3400               	retlw	0
  2146     04BE  3400               	retlw	0
  2147     04BF  3400               	retlw	0
  2148     04C0  3400               	retlw	0
  2149     04C1  3400               	retlw	0
  2150     04C2  3400               	retlw	0
  2151     04C3  3400               	retlw	0
  2152     04C4  3400               	retlw	0
  2153     04C5  3458               	retlw	88
  2154     04C6  3400               	retlw	0
  2155     04C7  3400               	retlw	0
  2156     04C8  3400               	retlw	0
  2157     04C9  3400               	retlw	0
  2158     04CA  3400               	retlw	0
  2159     04CB  3400               	retlw	0
  2160     04CC  3400               	retlw	0
  2161     04CD  3400               	retlw	0
  2162     04CE  3400               	retlw	0
  2163     04CF  3400               	retlw	0
  2164     04D0  3400               	retlw	0
  2165     04D1  3400               	retlw	0
  2166     04D2  3400               	retlw	0
  2167     04D3  3400               	retlw	0
  2168     04D4  344D               	retlw	77
  2169     04D5  3400               	retlw	0
  2170     04D6  3450               	retlw	80
  2171     04D7  344A               	retlw	74
  2172     04D8  3400               	retlw	0
  2173     04D9  3400               	retlw	0
  2174     04DA  3400               	retlw	0
  2175     04DB  3449               	retlw	73
  2176     04DC  344C               	retlw	76
  2177     04DD  3451               	retlw	81
  2178     04DE  3400               	retlw	0
  2179     04DF  344F               	retlw	79
  2180     04E0  3452               	retlw	82
  2181     04E1  3400               	retlw	0
  2182     04E2  3400               	retlw	0
  2183     04E3  3400               	retlw	0
  2184     04E4  3400               	retlw	0
  2185     04E5  344E               	retlw	78
  2186     04E6  3400               	retlw	0
  2187     04E7  3446               	retlw	70
  2188     04E8  344B               	retlw	75
  2189     04E9  3400               	retlw	0
  2190     04EA  3400               	retlw	0
  2191     04EB  3400               	retlw	0
  2192     04EC  3400               	retlw	0
  2193     04ED  3400               	retlw	0
  2194     04EE  3400               	retlw	0
  2195     04EF  3400               	retlw	0
  2196     04F0  3400               	retlw	0
  2197     04F1  3400               	retlw	0
  2198     04F2  3400               	retlw	0
  2199     04F3  3400               	retlw	0
  2200     04F4  3400               	retlw	0
  2201     04F5  3400               	retlw	0
  2202     04F6  3400               	retlw	0
  2203     04F7  3400               	retlw	0
  2204     04F8  3400               	retlw	0
  2205     04F9  3400               	retlw	0
  2206     04FA  3400               	retlw	0
  2207     04FB  3400               	retlw	0
  2208     04FC  3400               	retlw	0
  2209     04FD  3400               	retlw	0
  2210     04FE  3400               	retlw	0
  2211     04FF  3400               	retlw	0
  2212     0500  3400               	retlw	0
  2213     0501  3400               	retlw	0
  2214     0502  3400               	retlw	0
  2215     0503  3400               	retlw	0
  2216     0504  3400               	retlw	0
  2217     0505  3400               	retlw	0
  2218     0506  3400               	retlw	0
  2219     0507  3400               	retlw	0
  2220     0508  3400               	retlw	0
  2221     0509  3400               	retlw	0
  2222     050A  3400               	retlw	0
  2223     050B  3400               	retlw	0
  2224     050C  3400               	retlw	0
  2225     050D  3400               	retlw	0
  2226     050E  3400               	retlw	0
  2227     050F  3400               	retlw	0
  2228     0510  3400               	retlw	0
  2229     0511  3400               	retlw	0
  2230     0512  3400               	retlw	0
  2231     0513  3400               	retlw	0
  2232     0514  3400               	retlw	0
  2233     0515  3400               	retlw	0
  2234     0516  3400               	retlw	0
  2235     0517  3400               	retlw	0
  2236     0518  3400               	retlw	0
  2237     0519  3400               	retlw	0
  2238     051A  3400               	retlw	0
  2239     051B  3400               	retlw	0
  2240     051C  3400               	retlw	0
  2241     051D  3400               	retlw	0
  2242     051E  3400               	retlw	0
  2243     051F  3400               	retlw	0
  2244     0520  3400               	retlw	0
  2245     0521  3400               	retlw	0
  2246     0522  3400               	retlw	0
  2247     0523  3400               	retlw	0
  2248     0524  3400               	retlw	0
  2249     0525  3400               	retlw	0
  2250     0526  3400               	retlw	0
  2251     0527  3400               	retlw	0
  2252     0528  3400               	retlw	0
  2253     0529  3400               	retlw	0
  2254     052A  3400               	retlw	0
  2255     052B  3400               	retlw	0
  2256     052C  3400               	retlw	0
  2257     052D  3400               	retlw	0
  2258     052E  3400               	retlw	0
  2259     052F  3400               	retlw	0
  2260     0530  3400               	retlw	0
  2261     0531  3400               	retlw	0
  2262     0532  3400               	retlw	0
  2263     0533  3400               	retlw	0
  2264     0534  3400               	retlw	0
  2265     0535  3400               	retlw	0
  2266     0536  3400               	retlw	0
  2267     0537  3400               	retlw	0
  2268     0538  3400               	retlw	0
  2269     0539  3400               	retlw	0
  2270     053A  3400               	retlw	0
  2271     053B  3400               	retlw	0
  2272     053C  3400               	retlw	0
  2273     053D  3400               	retlw	0
  2274     053E  3400               	retlw	0
  2275     053F  3400               	retlw	0
  2276     0540  3400               	retlw	0
  2277     0541  3400               	retlw	0
  2278     0542  3400               	retlw	0
  2279     0543  3400               	retlw	0
  2280     0544  3400               	retlw	0
  2281     0545  3400               	retlw	0
  2282     0546  3400               	retlw	0
  2283     0547  3400               	retlw	0
  2284     0548  3400               	retlw	0
  2285     0549  3400               	retlw	0
  2286     054A  3400               	retlw	0
  2287     054B  3400               	retlw	0
  2288     054C  3400               	retlw	0
  2289     054D  3400               	retlw	0
  2290     054E  3400               	retlw	0
  2291     054F  3400               	retlw	0
  2292     0550  3400               	retlw	0
  2293     0551  3400               	retlw	0
  2294     0552  3400               	retlw	0
  2295     0553  3400               	retlw	0
  2296     0554  3400               	retlw	0
  2297     0555  3400               	retlw	0
  2298     0556  3400               	retlw	0
  2299     0557  3400               	retlw	0
  2300     0558  3400               	retlw	0
  2301     0559  3400               	retlw	0
  2302     055A  3400               	retlw	0
  2303     055B  3400               	retlw	0
  2304     055C  3400               	retlw	0
  2305     055D  3400               	retlw	0
  2306     055E  3400               	retlw	0
  2307     055F  3400               	retlw	0
  2308     0560  3400               	retlw	0
  2309     0561  3400               	retlw	0
  2310     0562  3400               	retlw	0
  2311     0563  3400               	retlw	0
  2312     0564  3400               	retlw	0
  2313     0565  3400               	retlw	0
  2314     0566  3400               	retlw	0
  2315     0567  3400               	retlw	0
  2316     0568  3400               	retlw	0
  2317     0569  3400               	retlw	0
  2318     056A                     __end_of_ps2ExtUsbMap:
  2319                           
  2320                           	psect	stringtext2
  2321     1000                     __pstringtext2:
  2322     1000                     _ps2UsbMap:
  2323     1000  3400               	retlw	0
  2324     1001  3442               	retlw	66
  2325     1002  3400               	retlw	0
  2326     1003  343E               	retlw	62
  2327     1004  343C               	retlw	60
  2328     1005  343A               	retlw	58
  2329     1006  343B               	retlw	59
  2330     1007  3445               	retlw	69
  2331     1008  3400               	retlw	0
  2332     1009  3443               	retlw	67
  2333     100A  3441               	retlw	65
  2334     100B  343F               	retlw	63
  2335     100C  343D               	retlw	61
  2336     100D  342B               	retlw	43
  2337     100E  3435               	retlw	53
  2338     100F  3400               	retlw	0
  2339     1010  3400               	retlw	0
  2340     1011  34E2               	retlw	226
  2341     1012  34E1               	retlw	225
  2342     1013  3400               	retlw	0
  2343     1014  34E0               	retlw	224
  2344     1015  3414               	retlw	20
  2345     1016  341E               	retlw	30
  2346     1017  3400               	retlw	0
  2347     1018  3400               	retlw	0
  2348     1019  3400               	retlw	0
  2349     101A  341D               	retlw	29
  2350     101B  3416               	retlw	22
  2351     101C  3404               	retlw	4
  2352     101D  341A               	retlw	26
  2353     101E  341F               	retlw	31
  2354     101F  3400               	retlw	0
  2355     1020  3400               	retlw	0
  2356     1021  3406               	retlw	6
  2357     1022  341B               	retlw	27
  2358     1023  3407               	retlw	7
  2359     1024  3408               	retlw	8
  2360     1025  3421               	retlw	33
  2361     1026  3420               	retlw	32
  2362     1027  3400               	retlw	0
  2363     1028  3400               	retlw	0
  2364     1029  342C               	retlw	44
  2365     102A  3419               	retlw	25
  2366     102B  3409               	retlw	9
  2367     102C  3417               	retlw	23
  2368     102D  3415               	retlw	21
  2369     102E  3422               	retlw	34
  2370     102F  3400               	retlw	0
  2371     1030  3400               	retlw	0
  2372     1031  3411               	retlw	17
  2373     1032  3405               	retlw	5
  2374     1033  340B               	retlw	11
  2375     1034  340A               	retlw	10
  2376     1035  341C               	retlw	28
  2377     1036  3423               	retlw	35
  2378     1037  3400               	retlw	0
  2379     1038  3400               	retlw	0
  2380     1039  3400               	retlw	0
  2381     103A  3410               	retlw	16
  2382     103B  340D               	retlw	13
  2383     103C  3418               	retlw	24
  2384     103D  3424               	retlw	36
  2385     103E  3425               	retlw	37
  2386     103F  3400               	retlw	0
  2387     1040  3400               	retlw	0
  2388     1041  3436               	retlw	54
  2389     1042  340E               	retlw	14
  2390     1043  340C               	retlw	12
  2391     1044  3412               	retlw	18
  2392     1045  3427               	retlw	39
  2393     1046  3426               	retlw	38
  2394     1047  3400               	retlw	0
  2395     1048  3400               	retlw	0
  2396     1049  3437               	retlw	55
  2397     104A  3438               	retlw	56
  2398     104B  340F               	retlw	15
  2399     104C  3433               	retlw	51
  2400     104D  3413               	retlw	19
  2401     104E  342D               	retlw	45
  2402     104F  3400               	retlw	0
  2403     1050  3400               	retlw	0
  2404     1051  3400               	retlw	0
  2405     1052  3434               	retlw	52
  2406     1053  3400               	retlw	0
  2407     1054  342F               	retlw	47
  2408     1055  342E               	retlw	46
  2409     1056  3400               	retlw	0
  2410     1057  3400               	retlw	0
  2411     1058  3439               	retlw	57
  2412     1059  34E5               	retlw	229
  2413     105A  3428               	retlw	40
  2414     105B  3430               	retlw	48
  2415     105C  3400               	retlw	0
  2416     105D  3431               	retlw	49
  2417     105E  3400               	retlw	0
  2418     105F  3400               	retlw	0
  2419     1060  3400               	retlw	0
  2420     1061  3400               	retlw	0
  2421     1062  3400               	retlw	0
  2422     1063  3400               	retlw	0
  2423     1064  3400               	retlw	0
  2424     1065  3400               	retlw	0
  2425     1066  342A               	retlw	42
  2426     1067  3400               	retlw	0
  2427     1068  3400               	retlw	0
  2428     1069  341E               	retlw	30
  2429     106A  3400               	retlw	0
  2430     106B  3421               	retlw	33
  2431     106C  3424               	retlw	36
  2432     106D  3400               	retlw	0
  2433     106E  3400               	retlw	0
  2434     106F  3400               	retlw	0
  2435     1070  3427               	retlw	39
  2436     1071  3437               	retlw	55
  2437     1072  341F               	retlw	31
  2438     1073  3422               	retlw	34
  2439     1074  3423               	retlw	35
  2440     1075  3425               	retlw	37
  2441     1076  3429               	retlw	41
  2442     1077  3453               	retlw	83
  2443     1078  3444               	retlw	68
  2444     1079  342E               	retlw	46
  2445     107A  3420               	retlw	32
  2446     107B  342D               	retlw	45
  2447     107C  3425               	retlw	37
  2448     107D  3426               	retlw	38
  2449     107E  3400               	retlw	0
  2450     107F  3400               	retlw	0
  2451     1080  3400               	retlw	0
  2452     1081  3400               	retlw	0
  2453     1082  3400               	retlw	0
  2454     1083  3440               	retlw	64
  2455     1084                     __end_of_ps2UsbMap:
  2456                           
  2457                           	psect	stringtext3
  2458     18D3                     __pstringtext3:
  2459     18D3                     _USB_SD_Ptr:
  2460     18D3  34D9               	retlw	low (_sd000| (0+32768))
  2461     18D4  3498               	retlw	high (_sd000| (0+32768))
  2462     18D5  343F               	retlw	low (_sd001| (0+32768))
  2463     18D6  3498               	retlw	high (_sd001| (0+32768))
  2464     18D7  349C               	retlw	low (_sd002| (0+32768))
  2465     18D8  3498               	retlw	high (_sd002| (0+32768))
  2466     18D9                     __end_of_USB_SD_Ptr:
  2467                           
  2468                           	psect	stringtext4
  2469     18DD                     __pstringtext4:
  2470     18DD                     _USB_CD_Ptr:
  2471     18DD  3473               	retlw	low (_configDescriptor1| (0+32768))
  2472     18DE  3498               	retlw	high (_configDescriptor1| (0+32768))
  2473     18DF                     __end_of_USB_CD_Ptr:
  2474                           
  2475                           	psect	stringtext5
  2476     1800                     __pstringtext5:
  2477     1800                     _hid_rpt01:
  2478     1800  3405               	retlw	5
  2479     1801  3401               	retlw	1
  2480     1802  3409               	retlw	9
  2481     1803  3406               	retlw	6
  2482     1804  34A1               	retlw	161
  2483     1805  3401               	retlw	1
  2484     1806  3405               	retlw	5
  2485     1807  3407               	retlw	7
  2486     1808  3419               	retlw	25
  2487     1809  34E0               	retlw	224
  2488     180A  3429               	retlw	41
  2489     180B  34E7               	retlw	231
  2490     180C  3415               	retlw	21
  2491     180D  3400               	retlw	0
  2492     180E  3425               	retlw	37
  2493     180F  3401               	retlw	1
  2494     1810  3475               	retlw	117
  2495     1811  3401               	retlw	1
  2496     1812  3495               	retlw	149
  2497     1813  3408               	retlw	8
  2498     1814  3481               	retlw	129
  2499     1815  3402               	retlw	2
  2500     1816  3495               	retlw	149
  2501     1817  3401               	retlw	1
  2502     1818  3475               	retlw	117
  2503     1819  3408               	retlw	8
  2504     181A  3481               	retlw	129
  2505     181B  3403               	retlw	3
  2506     181C  3495               	retlw	149
  2507     181D  3405               	retlw	5
  2508     181E  3475               	retlw	117
  2509     181F  3401               	retlw	1
  2510     1820  3405               	retlw	5
  2511     1821  3408               	retlw	8
  2512     1822  3419               	retlw	25
  2513     1823  3401               	retlw	1
  2514     1824  3429               	retlw	41
  2515     1825  3405               	retlw	5
  2516     1826  3491               	retlw	145
  2517     1827  3402               	retlw	2
  2518     1828  3495               	retlw	149
  2519     1829  3401               	retlw	1
  2520     182A  3475               	retlw	117
  2521     182B  3403               	retlw	3
  2522     182C  3491               	retlw	145
  2523     182D  3403               	retlw	3
  2524     182E  3495               	retlw	149
  2525     182F  3406               	retlw	6
  2526     1830  3475               	retlw	117
  2527     1831  3408               	retlw	8
  2528     1832  3415               	retlw	21
  2529     1833  3400               	retlw	0
  2530     1834  3425               	retlw	37
  2531     1835  3465               	retlw	101
  2532     1836  3405               	retlw	5
  2533     1837  3407               	retlw	7
  2534     1838  3419               	retlw	25
  2535     1839  3400               	retlw	0
  2536     183A  3429               	retlw	41
  2537     183B  3465               	retlw	101
  2538     183C  3481               	retlw	129
  2539     183D  3400               	retlw	0
  2540     183E  34C0               	retlw	192
  2541     183F                     __end_of_hid_rpt01:
  2542                           
  2543                           	psect	stringtext6
  2544     183F                     __pstringtext6:
  2545     183F                     _sd001:
  2546     183F  3434               	retlw	52
  2547     1840  3403               	retlw	3
  2548     1841  344D               	retlw	77
  2549     1842  3400               	retlw	0
  2550     1843  3469               	retlw	105
  2551     1844  3400               	retlw	0
  2552     1845  3463               	retlw	99
  2553     1846  3400               	retlw	0
  2554     1847  3472               	retlw	114
  2555     1848  3400               	retlw	0
  2556     1849  346F               	retlw	111
  2557     184A  3400               	retlw	0
  2558     184B  3463               	retlw	99
  2559     184C  3400               	retlw	0
  2560     184D  3468               	retlw	104
  2561     184E  3400               	retlw	0
  2562     184F  3469               	retlw	105
  2563     1850  3400               	retlw	0
  2564     1851  3470               	retlw	112
  2565     1852  3400               	retlw	0
  2566     1853  3420               	retlw	32
  2567     1854  3400               	retlw	0
  2568     1855  3454               	retlw	84
  2569     1856  3400               	retlw	0
  2570     1857  3465               	retlw	101
  2571     1858  3400               	retlw	0
  2572     1859  3463               	retlw	99
  2573     185A  3400               	retlw	0
  2574     185B  3468               	retlw	104
  2575     185C  3400               	retlw	0
  2576     185D  346E               	retlw	110
  2577     185E  3400               	retlw	0
  2578     185F  346F               	retlw	111
  2579     1860  3400               	retlw	0
  2580     1861  346C               	retlw	108
  2581     1862  3400               	retlw	0
  2582     1863  346F               	retlw	111
  2583     1864  3400               	retlw	0
  2584     1865  3467               	retlw	103
  2585     1866  3400               	retlw	0
  2586     1867  3479               	retlw	121
  2587     1868  3400               	retlw	0
  2588     1869  3420               	retlw	32
  2589     186A  3400               	retlw	0
  2590     186B  3449               	retlw	73
  2591     186C  3400               	retlw	0
  2592     186D  346E               	retlw	110
  2593     186E  3400               	retlw	0
  2594     186F  3463               	retlw	99
  2595     1870  3400               	retlw	0
  2596     1871  342E               	retlw	46
  2597     1872  3400               	retlw	0
  2598     1873                     __end_of_sd001:
  2599                           
  2600                           	psect	stringtext7
  2601     1873                     __pstringtext7:
  2602     1873                     _configDescriptor1:
  2603     1873  3409               	retlw	9
  2604     1874  3402               	retlw	2
  2605     1875  3429               	retlw	41
  2606     1876  3400               	retlw	0
  2607     1877  3401               	retlw	1
  2608     1878  3401               	retlw	1
  2609     1879  3400               	retlw	0
  2610     187A  34C0               	retlw	192
  2611     187B  3432               	retlw	50
  2612     187C  3409               	retlw	9
  2613     187D  3404               	retlw	4
  2614     187E  3400               	retlw	0
  2615     187F  3400               	retlw	0
  2616     1880  3402               	retlw	2
  2617     1881  3403               	retlw	3
  2618     1882  3401               	retlw	1
  2619     1883  3401               	retlw	1
  2620     1884  3400               	retlw	0
  2621     1885  3409               	retlw	9
  2622     1886  3421               	retlw	33
  2623     1887  3411               	retlw	17
  2624     1888  3401               	retlw	1
  2625     1889  3400               	retlw	0
  2626     188A  3401               	retlw	1
  2627     188B  3422               	retlw	34
  2628     188C  343F               	retlw	63
  2629     188D  3400               	retlw	0
  2630     188E  3407               	retlw	7
  2631     188F  3405               	retlw	5
  2632     1890  3481               	retlw	129
  2633     1891  3403               	retlw	3
  2634     1892  3408               	retlw	8
  2635     1893  3400               	retlw	0
  2636     1894  3401               	retlw	1
  2637     1895  3407               	retlw	7
  2638     1896  3405               	retlw	5
  2639     1897  3401               	retlw	1
  2640     1898  3403               	retlw	3
  2641     1899  3408               	retlw	8
  2642     189A  3400               	retlw	0
  2643     189B  3401               	retlw	1
  2644     189C                     __end_of_configDescriptor1:
  2645                           
  2646                           	psect	stringtext8
  2647     189C                     __pstringtext8:
  2648     189C                     _sd002:
  2649     189C  341C               	retlw	28
  2650     189D  3403               	retlw	3
  2651     189E  344B               	retlw	75
  2652     189F  3400               	retlw	0
  2653     18A0  3465               	retlw	101
  2654     18A1  3400               	retlw	0
  2655     18A2  3479               	retlw	121
  2656     18A3  3400               	retlw	0
  2657     18A4  3462               	retlw	98
  2658     18A5  3400               	retlw	0
  2659     18A6  346F               	retlw	111
  2660     18A7  3400               	retlw	0
  2661     18A8  3461               	retlw	97
  2662     18A9  3400               	retlw	0
  2663     18AA  3472               	retlw	114
  2664     18AB  3400               	retlw	0
  2665     18AC  3464               	retlw	100
  2666     18AD  3400               	retlw	0
  2667     18AE  3420               	retlw	32
  2668     18AF  3400               	retlw	0
  2669     18B0  3444               	retlw	68
  2670     18B1  3400               	retlw	0
  2671     18B2  3465               	retlw	101
  2672     18B3  3400               	retlw	0
  2673     18B4  346D               	retlw	109
  2674     18B5  3400               	retlw	0
  2675     18B6  346F               	retlw	111
  2676     18B7  3400               	retlw	0
  2677     18B8                     __end_of_sd002:
  2678                           
  2679                           	psect	stringtext9
  2680     18B8                     __pstringtext9:
  2681     18B8                     _device_dsc:
  2682     18B8  3412               	retlw	18
  2683     18B9  3401               	retlw	1
  2684     18BA  3400               	retlw	0
  2685     18BB  3402               	retlw	2
  2686     18BC  3400               	retlw	0
  2687     18BD  3400               	retlw	0
  2688     18BE  3400               	retlw	0
  2689     18BF  3408               	retlw	8
  2690     18C0  34D8               	retlw	216
  2691     18C1  3404               	retlw	4
  2692     18C2  3455               	retlw	85
  2693     18C3  3400               	retlw	0
  2694     18C4  3401               	retlw	1
  2695     18C5  3400               	retlw	0
  2696     18C6  3401               	retlw	1
  2697     18C7  3402               	retlw	2
  2698     18C8  3400               	retlw	0
  2699     18C9  3401               	retlw	1
  2700     18CA                     __end_of_device_dsc:
  2701                           
  2702                           	psect	stringtext10
  2703     18D9                     __pstringtext10:
  2704     18D9                     _sd000:
  2705     18D9  3404               	retlw	4
  2706     18DA  3403               	retlw	3
  2707     18DB  3409               	retlw	9
  2708     18DC  3404               	retlw	4
  2709     18DD                     __end_of_sd000:
  2710                           
  2711                           	psect	nvBANK3
  2712     01E9                     __pnvBANK3:
  2713     01E9                     _IOCAF5_InterruptHandler:
  2714     01E9                     	ds	2
  2715     01EB                     _IOCAF4_InterruptHandler:
  2716     01EB                     	ds	2
  2717     000C                     _PORTAbits	set	12
  2718     001C                     _T2CONbits	set	28
  2719     001C                     _T2CON	set	28
  2720     001A                     _TMR2	set	26
  2721     001B                     _PR2	set	27
  2722     0011                     _PIR1bits	set	17
  2723     0012                     _PIR2bits	set	18
  2724     000B                     _INTCONbits	set	11
  2725     008C                     _TRISAbits	set	140
  2726     0091                     _PIE1bits	set	145
  2727     0092                     _PIE2bits	set	146
  2728     0097                     _WDTCON	set	151
  2729     0098                     _OSCTUNE	set	152
  2730     0099                     _OSCCON	set	153
  2731     0095                     _OPTION_REGbits	set	149
  2732     008E                     _TRISC	set	142
  2733     008D                     _TRISB	set	141
  2734     008C                     _TRISA	set	140
  2735     04D6                     _PLLRDY	set	1238
  2736     010C                     _LATAbits	set	268
  2737     0116                     _BORCON	set	278
  2738     011D                     _APFCON	set	285
  2739     010E                     _LATC	set	270
  2740     010D                     _LATB	set	269
  2741     010C                     _LATA	set	268
  2742     0199                     _RCREG	set	409
  2743     019D                     _RCSTAbits	set	413
  2744     019A                     _TXREG	set	410
  2745     019C                     _SPBRGH	set	412
  2746     019B                     _SPBRGL	set	411
  2747     019E                     _TXSTA	set	414
  2748     019D                     _RCSTA	set	413
  2749     019F                     _BAUDCON	set	415
  2750     018C                     _ANSELA	set	396
  2751     018D                     _ANSELB	set	397
  2752     018E                     _ANSELC	set	398
  2753     020C                     _WPUA	set	524
  2754     020D                     _WPUB	set	525
  2755     039B                     _ACTCON	set	923
  2756     0391                     _IOCAPbits	set	913
  2757     0392                     _IOCANbits	set	914
  2758     0393                     _IOCAFbits	set	915
  2759     0E98                     _UEP0bits	set	3736
  2760     0E8E                     _UCON	set	3726
  2761     0E8F                     _USTAT	set	3727
  2762     0E92                     _UIEbits	set	3730
  2763     0E90                     _UIRbits	set	3728
  2764     0E96                     _UADDR	set	3734
  2765     0E8E                     _UCONbits	set	3726
  2766     0E92                     _UIE	set	3730
  2767     0E97                     _UEIE	set	3735
  2768     0E91                     _UCFG	set	3729
  2769     0E90                     _UIR	set	3728
  2770     0E93                     _UEIR	set	3731
  2771     0E99                     _UEP1	set	3737
  2772     0E98                     _UEP0	set	3736
  2773                           
  2774                           	psect	stringtext11
  2775     18CA                     __pstringtext11:
  2776     18CA                     STR_1:
  2777     18CA  3425               	retlw	37	;'%'
  2778     18CB  3463               	retlw	99	;'c'
  2779     18CC  3425               	retlw	37	;'%'
  2780     18CD  3430               	retlw	48	;'0'
  2781     18CE  3432               	retlw	50	;'2'
  2782     18CF  3458               	retlw	88	;'X'
  2783     18D0  340D               	retlw	13
  2784     18D1  340A               	retlw	10
  2785     18D2  3400               	retlw	0
  2786                           
  2787                           	psect	stringtext12
  2788     0000                     __pstringtext12:
  2789                           
  2790                           	psect	cinit
  2791     003F                     start_initialization:	
  2792                           ; #config settings
  2793                           
  2794     003F                     __initialization:	;BIGRAM
  2795                           
  2796                           ; Clear objects allocated to BIGRAM
  2797     003F  302C               	movlw	low (0+9004)
  2798     0040  0084               	movwf	4
  2799     0041  3023               	movlw	high (0+9004)
  2800     0042  0085               	movwf	5
  2801     0043  30C4               	movlw	196
  2802     0044  00FE               	movwf	btemp
  2803     0045  3000               	movlw	0
  2804     0046  00FF               	movwf	btemp+1
  2805     0047  319B  2372  3180   	fcall	clear_ram0
  2806                           
  2807                           ; Clear objects allocated to BANK0
  2808     004A  3061               	movlw	low __pbssBANK0
  2809     004B  0084               	movwf	4
  2810     004C  3000               	movlw	high __pbssBANK0
  2811     004D  0085               	movwf	5
  2812     004E  300F               	movlw	15
  2813     004F  00FE               	movwf	btemp
  2814     0050  3000               	movlw	0
  2815     0051  00FF               	movwf	btemp+1
  2816     0052  319B  2372  3180   	fcall	clear_ram0
  2817                           
  2818                           ; Clear objects allocated to BANK1
  2819     0055  0021               	movlb	1	; select bank1
  2820     0056  01EB               	clrf	__pbssBANK1& (0+127)
  2821     0057  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  2822     0058  01ED               	clrf	(__pbssBANK1+2)& (0+127)
  2823     0059  01EE               	clrf	(__pbssBANK1+3)& (0+127)
  2824     005A  01EF               	clrf	(__pbssBANK1+4)& (0+127)
  2825                           
  2826                           ; Clear objects allocated to BANK2
  2827     005B  3021               	movlw	low __pbssBANK2
  2828     005C  0084               	movwf	4
  2829     005D  3001               	movlw	high __pbssBANK2
  2830     005E  0085               	movwf	5
  2831     005F  302B               	movlw	43
  2832     0060  00FE               	movwf	btemp
  2833     0061  3000               	movlw	0
  2834     0062  00FF               	movwf	btemp+1
  2835     0063  319B  2372  3180   	fcall	clear_ram0
  2836                           
  2837                           ; Clear objects allocated to BANK3
  2838     0066  30A0               	movlw	low __pbssBANK3
  2839     0067  0084               	movwf	4
  2840     0068  3001               	movlw	high __pbssBANK3
  2841     0069  0085               	movwf	5
  2842     006A  3049               	movlw	73
  2843     006B  00FE               	movwf	btemp
  2844     006C  3000               	movlw	0
  2845     006D  00FF               	movwf	btemp+1
  2846     006E  319B  2372  3180   	fcall	clear_ram0
  2847                           
  2848                           ; Clear objects allocated to BANK4
  2849     0071  3020               	movlw	low __pbssBANK4
  2850     0072  0084               	movwf	4
  2851     0073  3002               	movlw	high __pbssBANK4
  2852     0074  0085               	movwf	5
  2853     0075  3032               	movlw	50
  2854     0076  00FE               	movwf	btemp
  2855     0077  3000               	movlw	0
  2856     0078  00FF               	movwf	btemp+1
  2857     0079  319B  2372         	fcall	clear_ram0
  2858     007B                     end_of_initialization:	
  2859                           ;End of C runtime variable initialization code
  2860                           
  2861     007B                     __end_of__initialization:
  2862     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2863     007C  0020               	movlb	0
  2864     007D  318B  2B2B         	ljmp	_main	;jump to C main() function
  2865                           
  2866                           	psect	bssBANK0
  2867     0061                     __pbssBANK0:
  2868     0061                     _pBDTEntryIn:
  2869     0061                     	ds	4
  2870     0065                     _SOFCounter:
  2871     0065                     	ds	2
  2872     0067                     _pBDTEntryEP0OutNext:
  2873     0067                     	ds	2
  2874     0069                     _keyboardCommandCount:
  2875     0069                     	ds	1
  2876     006A                     _controlTransferState:
  2877     006A                     	ds	1
  2878     006B                     _pBDTEntryEP0OutCurrent:
  2879     006B                     	ds	1
  2880     006C                     _USBDeviceState:
  2881     006C                     	ds	1
  2882     006D                     _eusartRxHead:
  2883     006D                     	ds	1
  2884     006E                     _USTATcopy:
  2885     006E                     	ds	1
  2886     006F                     _USBActiveConfiguration:
  2887     006F                     	ds	1
  2888                           
  2889                           	psect	bssBANK1
  2890     00EB                     __pbssBANK1:
  2891     00EB                     _inPipes:
  2892     00EB                     	ds	5
  2893                           
  2894                           	psect	bssBANK2
  2895     0121                     __pbssBANK2:
  2896     0121                     _outPipes:
  2897     0121                     	ds	7
  2898     0128                     _pBDTEntryOut:
  2899     0128                     	ds	4
  2900     012C                     _width:
  2901     012C                     	ds	2
  2902     012E                     _LocalSOFCount:
  2903     012E                     	ds	2
  2904     0130                     _ep_data_out:
  2905     0130                     	ds	2
  2906     0132                     _ep_data_in:
  2907     0132                     	ds	2
  2908     0134                     _flags:
  2909     0134                     	ds	1
  2910     0135                     _keyboardCommand:
  2911     0135                     	ds	1
  2912     0136                     _keyboardData:
  2913     0136                     	ds	1
  2914     0137                     _keyboardOnesCount:
  2915     0137                     	ds	1
  2916     0138                     _keyboardIndexData:
  2917     0138                     	ds	1
  2918     0139                     _keyboardState:
  2919     0139                     	ds	1
  2920     013A                     _USBTicksSinceSuspendEnd:
  2921     013A                     	ds	1
  2922     013B                     _USBDeferOUTDataStagePackets:
  2923     013B                     	ds	1
  2924     013C                     _USBDeferINDataStagePackets:
  2925     013C                     	ds	1
  2926     013D                     _USBStatusStageEnabledFlag2:
  2927     013D                     	ds	1
  2928     013E                     _USBStatusStageEnabledFlag1:
  2929     013E                     	ds	1
  2930     013F                     _USBDeferStatusStagePacket:
  2931     013F                     	ds	1
  2932     0140                     _USBStatusStageTimeoutCounter:
  2933     0140                     	ds	1
  2934     0141                     _BothEP0OutUOWNsSet:
  2935     0141                     	ds	1
  2936     0142                     _endpoint_number:
  2937     0142                     	ds	1
  2938     0143                     _USBBusIsSuspended:
  2939     0143                     	ds	1
  2940     0144                     _RemoteWakeup:
  2941     0144                     	ds	1
  2942     0145                     _pDst:
  2943     0145                     	ds	1
  2944     0146                     _shortPacketStatus:
  2945     0146                     	ds	1
  2946     0147                     _eusartTxBufferRemaining:
  2947     0147                     	ds	1
  2948     0148                     _eusartTxTail:
  2949     0148                     	ds	1
  2950     0149                     _eusartTxHead:
  2951     0149                     	ds	1
  2952     014A                     _idle_rate:
  2953     014A                     	ds	1
  2954     014B                     _USBAlternateInterface:
  2955     014B                     	ds	1
  2956                           
  2957                           	psect	bssBANK3
  2958     01A0                     __pbssBANK3:
  2959     01A0                     _eusartRxStatusBuffer:
  2960     01A0                     	ds	8
  2961     01A8                     _eusartRxBuffer:
  2962     01A8                     	ds	8
  2963     01B0                     _eusartTxBuffer:
  2964     01B0                     	ds	8
  2965     01B8                     _timeMs:
  2966     01B8                     	ds	4
  2967     01BC                     _prevTimeMs:
  2968     01BC                     	ds	4
  2969     01C0                     _USB1msTickCount:
  2970     01C0                     	ds	4
  2971     01C4                     main@F3441:
  2972     01C4                     	ds	3
  2973     01C7                     _nout:
  2974     01C7                     	ds	2
  2975     01C9                     _prec:
  2976     01C9                     	ds	2
  2977     01CB                     _errno:
  2978     01CB                     	ds	2
  2979     01CD                     _OldSOFCount:
  2980     01CD                     	ds	2
  2981     01CF                     _keyboardIdleRate:
  2982     01CF                     	ds	2
  2983     01D1                     _EUSART_ErrorHandler:
  2984     01D1                     	ds	2
  2985     01D3                     _EUSART_OverrunErrorHandler:
  2986     01D3                     	ds	2
  2987     01D5                     _EUSART_FramingErrorHandler:
  2988     01D5                     	ds	2
  2989     01D7                     _TMR2_InterruptHandler:
  2990     01D7                     	ds	2
  2991     01D9                     _EUSART_RxDefaultInterruptHandler:
  2992     01D9                     	ds	2
  2993     01DB                     _EUSART_TxDefaultInterruptHandler:
  2994     01DB                     	ds	2
  2995     01DD                     _keyboardCommandOnes:
  2996     01DD                     	ds	1
  2997     01DE                     _keyboardCommandBits:
  2998     01DE                     	ds	1
  2999     01DF                     _keyboardIsBreak:
  3000     01DF                     	ds	1
  3001     01E0                     _keyboardIsExtend:
  3002     01E0                     	ds	1
  3003     01E1                     _keyboardScanCodeValid:
  3004     01E1                     	ds	1
  3005     01E2                     _eusartRxLastError:
  3006     01E2                     	ds	1
  3007     01E3                     _eusartRxCount:
  3008     01E3                     	ds	1
  3009     01E4                     _eusartRxTail:
  3010     01E4                     	ds	1
  3011     01E5                     _keyboardScanCode:
  3012     01E5                     	ds	3
  3013     01E8                     _active_protocol:
  3014     01E8                     	ds	1
  3015                           
  3016                           	psect	bssBANK4
  3017     0220                     __pbssBANK4:
  3018     0220                     main@F3445:
  3019     0220                     	ds	10
  3020     022A                     _oldInputReport:
  3021     022A                     	ds	8
  3022     0232                     _dbuf:
  3023     0232                     	ds	32
  3024                           
  3025                           	psect	clrtext
  3026     1B72                     clear_ram0:	
  3027                           ;	Called with FSR0 containing the base address, and
  3028                           ;	btemp/btemp+1 has the size to clear
  3029                           
  3030     1B72  0064               	clrwdt	;clear the watchdog before getting into this loop
  3031     1B73                     clrloop0:
  3032     1B73  0180               	clrf	0	;clear RAM location pointed to by FSR
  3033     1B74  3101               	addfsr 0,1
  3034     1B75  3001               	movlw	1
  3035     1B76  02FE               	subwf	126,f
  3036     1B77  3000               	movlw	0
  3037     1B78  3BFF               	subwfb	127,f
  3038     1B79  087F               	movf	127,w
  3039     1B7A  047E               	iorwf	126,w
  3040     1B7B  1903               	btfsc	3,2
  3041     1B7C  3400               	retlw	0	;all done for this memory range, return
  3042     1B7D  2B73               	goto	clrloop0	;have we reached the end yet?
  3043                           
  3044                           	psect	cstackBANK2
  3045     014C                     __pcstackBANK2:
  3046     014C                     _snprintf$3634:
  3047                           
  3048                           ; 2 bytes @ 0x0
  3049     014C                     	ds	2
  3050     014E                     snprintf@s:
  3051                           
  3052                           ; 1 bytes @ 0x2
  3053     014E                     	ds	1
  3054     014F                     snprintf@ap:
  3055                           
  3056                           ; 1 bytes @ 0x3
  3057     014F                     	ds	1
  3058     0150                     snprintf@cnt:
  3059                           
  3060                           ; 2 bytes @ 0x4
  3061     0150                     	ds	2
  3062     0152                     snprintf@f:
  3063                           
  3064                           ; 11 bytes @ 0x6
  3065     0152                     	ds	11
  3066     015D                     main@scanCodeStr:
  3067                           
  3068                           ; 10 bytes @ 0x11
  3069     015D                     	ds	10
  3070     0167                     _main$2651:
  3071                           
  3072                           ; 2 bytes @ 0x1B
  3073     0167                     	ds	2
  3074     0169                     main@scanCodeValid:
  3075                           
  3076                           ; 1 bytes @ 0x1D
  3077     0169                     	ds	1
  3078     016A                     main@strLen:
  3079                           
  3080                           ; 1 bytes @ 0x1E
  3081     016A                     	ds	1
  3082     016B                     main@i:
  3083                           
  3084                           ; 1 bytes @ 0x1F
  3085     016B                     	ds	1
  3086     016C                     main@hndlScanCode:
  3087                           
  3088                           ; 1 bytes @ 0x20
  3089     016C                     	ds	1
  3090     016D                     main@scanCode:
  3091                           
  3092                           ; 3 bytes @ 0x21
  3093     016D                     	ds	3
  3094                           
  3095                           	psect	cstackBANK1
  3096     00A8                     __pcstackBANK1:
  3097     00A8                     ?_IOCAF4_SetInterruptHandler:
  3098     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101     00A8                     ??_OSCILLATOR_Initialize:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104     00A8                     ??_WDT_Initialize:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107     00A8                     ??_USBDeviceInit:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110     00A8                     ??_USBDeviceAttach:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113     00A8                     ?_TMR2_SetInterruptHandler:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128     00A8                     ?_EUSART_SetErrorHandler:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131     00A8                     ?_GenericQueue_Init:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140     00A8                     ??_PS2Keyboard_SendCommand:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143     00A8                     ??_putch:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146     00A8                     ??_TMR2_StartTimer:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149     00A8                     ??_EUSART_is_tx_ready:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152     00A8                     ??_EUSART_Write:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155     00A8                     ?___bmul:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158     00A8                     ?_memset:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161     00A8                     ?_USBTransferOnePacket:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164     00A8                     ?_GenericQueue_IsEmpty:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167     00A8                     ?_fputc:	
  3168                           ; 2 bytes @ 0x0
  3169                           
  3170     00A8                     ?_strlen:	
  3171                           ; 2 bytes @ 0x0
  3172                           
  3173     00A8                     ?_GenericQueue_IsFull:	
  3174                           ; 2 bytes @ 0x0
  3175                           
  3176     00A8                     ?___awmod:	
  3177                           ; 2 bytes @ 0x0
  3178                           
  3179     00A8                     USBTransferOnePacket@dir:	
  3180                           ; 2 bytes @ 0x0
  3181                           
  3182     00A8                     PS2Keyboard_SendCommand@cmd:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188     00A8                     ___bmul@multiplicand:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3195                           ; 2 bytes @ 0x0
  3196                           
  3197     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3210                           ; 2 bytes @ 0x0
  3211                           
  3212     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3213                           ; 2 bytes @ 0x0
  3214                           
  3215     00A8                     GenericQueue_Init@q:	
  3216                           ; 2 bytes @ 0x0
  3217                           
  3218     00A8                     GenericQueue_IsEmpty@q:	
  3219                           ; 2 bytes @ 0x0
  3220                           
  3221     00A8                     GenericQueue_IsFull@q:	
  3222                           ; 2 bytes @ 0x0
  3223                           
  3224     00A8                     ___awmod@divisor:	
  3225                           ; 2 bytes @ 0x0
  3226                           
  3227     00A8                     memset@dest:	
  3228                           ; 2 bytes @ 0x0
  3229                           
  3230     00A8                     fputc@c:	
  3231                           ; 2 bytes @ 0x0
  3232                           
  3233                           
  3234                           ; 2 bytes @ 0x0
  3235     00A8                     	ds	1
  3236     00A9                     ??_APP_KeyboardProcessOutputReport:
  3237     00A9                     ??___bmul:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240     00A9                     EUSART_Write@txData:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243     00A9                     USBTransferOnePacket@data:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246                           
  3247                           ; 2 bytes @ 0x1
  3248     00A9                     	ds	1
  3249     00AA                     ??_IOCAF4_SetInterruptHandler:
  3250     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3251                           ; 1 bytes @ 0x2
  3252                           
  3253     00AA                     ??_TMR2_Initialize:	
  3254                           ; 1 bytes @ 0x2
  3255                           
  3256     00AA                     ??_EUSART_Initialize:	
  3257                           ; 1 bytes @ 0x2
  3258                           
  3259     00AA                     ??_TMR2_SetInterruptHandler:	
  3260                           ; 1 bytes @ 0x2
  3261                           
  3262     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3263                           ; 1 bytes @ 0x2
  3264                           
  3265     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3266                           ; 1 bytes @ 0x2
  3267                           
  3268     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3269                           ; 1 bytes @ 0x2
  3270                           
  3271     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3272                           ; 1 bytes @ 0x2
  3273                           
  3274     00AA                     ??_EUSART_SetErrorHandler:	
  3275                           ; 1 bytes @ 0x2
  3276                           
  3277     00AA                     ??_SysTime_Init:	
  3278                           ; 1 bytes @ 0x2
  3279                           
  3280     00AA                     ??_GenericQueue_IsEmpty:	
  3281                           ; 1 bytes @ 0x2
  3282                           
  3283     00AA                     ??_strlen:	
  3284                           ; 1 bytes @ 0x2
  3285                           
  3286     00AA                     ??_PIN_MANAGER_Initialize:	
  3287                           ; 1 bytes @ 0x2
  3288                           
  3289     00AA                     ??_GenericQueue_IsFull:	
  3290                           ; 1 bytes @ 0x2
  3291                           
  3292     00AA                     ___bmul@product:	
  3293                           ; 1 bytes @ 0x2
  3294                           
  3295     00AA                     fputc@fp:	
  3296                           ; 1 bytes @ 0x2
  3297                           
  3298     00AA                     GenericQueue_Init@element_size:	
  3299                           ; 1 bytes @ 0x2
  3300                           
  3301     00AA                     ___awmod@dividend:	
  3302                           ; 2 bytes @ 0x2
  3303                           
  3304     00AA                     memset@c:	
  3305                           ; 2 bytes @ 0x2
  3306                           
  3307                           
  3308                           ; 2 bytes @ 0x2
  3309     00AA                     	ds	1
  3310     00AB                     ??_fputc:
  3311     00AB                     USBTransferOnePacket@len:	
  3312                           ; 1 bytes @ 0x3
  3313                           
  3314     00AB                     ___bmul@multiplier:	
  3315                           ; 1 bytes @ 0x3
  3316                           
  3317     00AB                     strlen@a:	
  3318                           ; 1 bytes @ 0x3
  3319                           
  3320                           
  3321                           ; 1 bytes @ 0x3
  3322     00AB                     	ds	1
  3323     00AC                     ??_USBTransferOnePacket:
  3324     00AC                     ??_PS2Keyboard_Init:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327     00AC                     ??_GenericQueue_Init:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330     00AC                     ??___awmod:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333     00AC                     strlen@s:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336     00AC                     USBDeviceInit@p:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339     00AC                     memset@n:	
  3340                           ; 2 bytes @ 0x4
  3341                           
  3342                           
  3343                           ; 2 bytes @ 0x4
  3344     00AC                     	ds	1
  3345     00AD                     ___awmod@counter:
  3346                           
  3347                           ; 1 bytes @ 0x5
  3348     00AD                     	ds	1
  3349     00AE                     ??_memset:
  3350     00AE                     USBDeviceInit@i_1369:	
  3351                           ; 1 bytes @ 0x6
  3352                           
  3353     00AE                     ___awmod@sign:	
  3354                           ; 1 bytes @ 0x6
  3355                           
  3356     00AE                     memset@p:	
  3357                           ; 1 bytes @ 0x6
  3358                           
  3359                           
  3360                           ; 2 bytes @ 0x6
  3361     00AE                     	ds	1
  3362     00AF                     ?___wmul:
  3363     00AF                     USBDeviceInit@i:	
  3364                           ; 2 bytes @ 0x7
  3365                           
  3366     00AF                     ___wmul@multiplier:	
  3367                           ; 1 bytes @ 0x7
  3368                           
  3369                           
  3370                           ; 2 bytes @ 0x7
  3371     00AF                     	ds	1
  3372     00B0                     ??_SYSTEM_Initialize:
  3373     00B0                     ?_fputs:	
  3374                           ; 1 bytes @ 0x8
  3375                           
  3376     00B0                     ?_ctoa:	
  3377                           ; 2 bytes @ 0x8
  3378                           
  3379     00B0                     USBTransferOnePacket@ep:	
  3380                           ; 2 bytes @ 0x8
  3381                           
  3382     00B0                     ctoa@c:	
  3383                           ; 1 bytes @ 0x8
  3384                           
  3385     00B0                     fputs@fp:	
  3386                           ; 1 bytes @ 0x8
  3387                           
  3388                           
  3389                           ; 1 bytes @ 0x8
  3390     00B0                     	ds	1
  3391     00B1                     ??_fputs:
  3392     00B1                     USBTransferOnePacket@handle:	
  3393                           ; 1 bytes @ 0x9
  3394                           
  3395     00B1                     ___wmul@multiplicand:	
  3396                           ; 2 bytes @ 0x9
  3397                           
  3398                           
  3399                           ; 2 bytes @ 0x9
  3400     00B1                     	ds	1
  3401     00B2                     ??_ctoa:
  3402                           
  3403                           ; 1 bytes @ 0xA
  3404     00B2                     	ds	1
  3405     00B3                     ??___wmul:
  3406     00B3                     fputs@c:	
  3407                           ; 1 bytes @ 0xB
  3408                           
  3409     00B3                     ___wmul@product:	
  3410                           ; 1 bytes @ 0xB
  3411                           
  3412                           
  3413                           ; 2 bytes @ 0xB
  3414     00B3                     	ds	1
  3415     00B4                     ctoa@l:
  3416     00B4                     fputs@i:	
  3417                           ; 2 bytes @ 0xC
  3418                           
  3419                           
  3420                           ; 2 bytes @ 0xC
  3421     00B4                     	ds	1
  3422     00B5                     ?_memcpy:
  3423     00B5                     ?_memcmp:	
  3424                           ; 2 bytes @ 0xD
  3425                           
  3426     00B5                     ?_read_prec_or_width:	
  3427                           ; 2 bytes @ 0xD
  3428                           
  3429     00B5                     read_prec_or_width@ap:	
  3430                           ; 2 bytes @ 0xD
  3431                           
  3432     00B5                     memcmp@vl:	
  3433                           ; 1 bytes @ 0xD
  3434                           
  3435     00B5                     memcpy@d1:	
  3436                           ; 2 bytes @ 0xD
  3437                           
  3438                           
  3439                           ; 2 bytes @ 0xD
  3440     00B5                     	ds	1
  3441     00B6                     fputs@s:
  3442     00B6                     ctoa@w:	
  3443                           ; 1 bytes @ 0xE
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0xE
  3447     00B6                     	ds	1
  3448     00B7                     ??_read_prec_or_width:
  3449     00B7                     ?_pad:	
  3450                           ; 1 bytes @ 0xF
  3451                           
  3452     00B7                     memcmp@vr:	
  3453                           ; 2 bytes @ 0xF
  3454                           
  3455     00B7                     pad@buf:	
  3456                           ; 1 bytes @ 0xF
  3457                           
  3458     00B7                     memcpy@s1:	
  3459                           ; 1 bytes @ 0xF
  3460                           
  3461                           
  3462                           ; 2 bytes @ 0xF
  3463     00B7                     	ds	1
  3464     00B8                     ctoa@fp:
  3465     00B8                     memcmp@n:	
  3466                           ; 1 bytes @ 0x10
  3467                           
  3468     00B8                     pad@p:	
  3469                           ; 2 bytes @ 0x10
  3470                           
  3471                           
  3472                           ; 2 bytes @ 0x10
  3473     00B8                     	ds	1
  3474     00B9                     memcpy@n:
  3475                           
  3476                           ; 2 bytes @ 0x11
  3477     00B9                     	ds	1
  3478     00BA                     ??_memcmp:
  3479     00BA                     ??_pad:	
  3480                           ; 1 bytes @ 0x12
  3481                           
  3482     00BA                     read_prec_or_width@c:	
  3483                           ; 1 bytes @ 0x12
  3484                           
  3485                           
  3486                           ; 1 bytes @ 0x12
  3487     00BA                     	ds	1
  3488     00BB                     ??_memcpy:
  3489     00BB                     memcmp@l:	
  3490                           ; 1 bytes @ 0x13
  3491                           
  3492     00BB                     memcpy@d:	
  3493                           ; 2 bytes @ 0x13
  3494                           
  3495     00BB                     pad@i:	
  3496                           ; 2 bytes @ 0x13
  3497                           
  3498     00BB                     read_prec_or_width@n:	
  3499                           ; 2 bytes @ 0x13
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x13
  3503     00BB                     	ds	2
  3504     00BD                     memcmp@r:
  3505     00BD                     pad@fp:	
  3506                           ; 1 bytes @ 0x15
  3507                           
  3508     00BD                     read_prec_or_width@fmt:	
  3509                           ; 1 bytes @ 0x15
  3510                           
  3511     00BD                     memcpy@s:	
  3512                           ; 1 bytes @ 0x15
  3513                           
  3514                           
  3515                           ; 2 bytes @ 0x15
  3516     00BD                     	ds	1
  3517     00BE                     ?_GenericQueue_Contains:
  3518     00BE                     ?_xtoa:	
  3519                           ; 1 bytes @ 0x16
  3520                           
  3521     00BE                     GenericQueue_Contains@q:	
  3522                           ; 2 bytes @ 0x16
  3523                           
  3524     00BE                     xtoa@d:	
  3525                           ; 2 bytes @ 0x16
  3526                           
  3527                           
  3528                           ; 2 bytes @ 0x16
  3529     00BE                     	ds	1
  3530     00BF                     memcpy@tmp:
  3531                           
  3532                           ; 1 bytes @ 0x17
  3533     00BF                     	ds	1
  3534     00C0                     ?_GenericQueue_CopyToArray:
  3535     00C0                     ?_GenericQueue_Remove:	
  3536                           ; 1 bytes @ 0x18
  3537                           
  3538     00C0                     ?_GenericQueue_Enqueue:	
  3539                           ; 1 bytes @ 0x18
  3540                           
  3541     00C0                     ?_GenericQueue_Dequeue:	
  3542                           ; 1 bytes @ 0x18
  3543                           
  3544     00C0                     ??_xtoa:	
  3545                           ; 1 bytes @ 0x18
  3546                           
  3547     00C0                     GenericQueue_Contains@item:	
  3548                           ; 1 bytes @ 0x18
  3549                           
  3550     00C0                     GenericQueue_Enqueue@q:	
  3551                           ; 1 bytes @ 0x18
  3552                           
  3553     00C0                     GenericQueue_Dequeue@q:	
  3554                           ; 2 bytes @ 0x18
  3555                           
  3556     00C0                     GenericQueue_Remove@q:	
  3557                           ; 2 bytes @ 0x18
  3558                           
  3559     00C0                     GenericQueue_CopyToArray@q:	
  3560                           ; 2 bytes @ 0x18
  3561                           
  3562                           
  3563                           ; 2 bytes @ 0x18
  3564     00C0                     	ds	1
  3565     00C1                     ??_GenericQueue_Contains:
  3566     00C1                     xtoa@fp:	
  3567                           ; 1 bytes @ 0x19
  3568                           
  3569                           
  3570                           ; 1 bytes @ 0x19
  3571     00C1                     	ds	1
  3572     00C2                     GenericQueue_Dequeue@item:
  3573     00C2                     GenericQueue_Remove@item:	
  3574                           ; 1 bytes @ 0x1A
  3575                           
  3576     00C2                     GenericQueue_CopyToArray@array:	
  3577                           ; 1 bytes @ 0x1A
  3578                           
  3579     00C2                     xtoa@p:	
  3580                           ; 1 bytes @ 0x1A
  3581                           
  3582     00C2                     GenericQueue_Enqueue@item:	
  3583                           ; 1 bytes @ 0x1A
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x1A
  3587     00C2                     	ds	1
  3588     00C3                     ??_GenericQueue_CopyToArray:
  3589     00C3                     ??_GenericQueue_Remove:	
  3590                           ; 1 bytes @ 0x1B
  3591                           
  3592     00C3                     ??_GenericQueue_Dequeue:	
  3593                           ; 1 bytes @ 0x1B
  3594                           
  3595     00C3                     xtoa@w:	
  3596                           ; 1 bytes @ 0x1B
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x1B
  3600     00C3                     	ds	1
  3601     00C4                     ??_GenericQueue_Enqueue:
  3602                           
  3603                           ; 1 bytes @ 0x1C
  3604     00C4                     	ds	1
  3605     00C5                     GenericQueue_Contains@i:
  3606     00C5                     xtoa@c:	
  3607                           ; 1 bytes @ 0x1D
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0x1D
  3611     00C5                     	ds	1
  3612     00C6                     xtoa@i:
  3613                           
  3614                           ; 2 bytes @ 0x1E
  3615     00C6                     	ds	1
  3616     00C7                     ??_PS2Keyboard_GetScanCode:
  3617     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3618                           ; 1 bytes @ 0x1F
  3619                           
  3620     00C7                     GenericQueue_Remove@i:	
  3621                           ; 1 bytes @ 0x1F
  3622                           
  3623     00C7                     GenericQueue_CopyToArray@index:	
  3624                           ; 1 bytes @ 0x1F
  3625                           
  3626                           
  3627                           ; 1 bytes @ 0x1F
  3628     00C7                     	ds	1
  3629     00C8                     ?_vfpfcnvrt:
  3630     00C8                     PS2Keyboard_GetScanCode@ret:	
  3631                           ; 2 bytes @ 0x20
  3632                           
  3633     00C8                     GenericQueue_Remove@j:	
  3634                           ; 1 bytes @ 0x20
  3635                           
  3636     00C8                     GenericQueue_CopyToArray@count:	
  3637                           ; 1 bytes @ 0x20
  3638                           
  3639     00C8                     vfpfcnvrt@fmt:	
  3640                           ; 1 bytes @ 0x20
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0x20
  3644     00C8                     	ds	1
  3645     00C9                     ??_APP_KeyboardUpdateState:
  3646     00C9                     vfpfcnvrt@ap:	
  3647                           ; 1 bytes @ 0x21
  3648                           
  3649                           
  3650                           ; 1 bytes @ 0x21
  3651     00C9                     	ds	1
  3652     00CA                     ??_vfpfcnvrt:
  3653                           
  3654                           ; 1 bytes @ 0x22
  3655     00CA                     	ds	1
  3656     00CB                     APP_KeyboardUpdateState@leds:
  3657                           
  3658                           ; 1 bytes @ 0x23
  3659     00CB                     	ds	1
  3660     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3661                           
  3662                           ; 1 bytes @ 0x24
  3663     00CC                     	ds	1
  3664     00CD                     APP_KeyboardUpdateState@usbHidCode_2929:
  3665                           
  3666                           ; 1 bytes @ 0x25
  3667     00CD                     	ds	1
  3668     00CE                     APP_KeyboardUpdateState@usbHidCode_2928:
  3669     00CE                     vfpfcnvrt@convarg:	
  3670                           ; 1 bytes @ 0x26
  3671                           
  3672                           
  3673                           ; 4 bytes @ 0x26
  3674     00CE                     	ds	1
  3675     00CF                     APP_KeyboardUpdateState@usbHidCode_2937:
  3676                           
  3677                           ; 1 bytes @ 0x27
  3678     00CF                     	ds	1
  3679     00D0                     APP_KeyboardUpdateState@scanCode:
  3680                           
  3681                           ; 1 bytes @ 0x28
  3682     00D0                     	ds	1
  3683     00D1                     ??_APP_KeyboardTasks:
  3684                           
  3685                           ; 1 bytes @ 0x29
  3686     00D1                     	ds	1
  3687     00D2                     vfpfcnvrt@c:
  3688                           
  3689                           ; 1 bytes @ 0x2A
  3690     00D2                     	ds	1
  3691     00D3                     APP_KeyboardTasks@scanCode:
  3692     00D3                     vfpfcnvrt@done:	
  3693                           ; 1 bytes @ 0x2B
  3694                           
  3695                           
  3696                           ; 1 bytes @ 0x2B
  3697     00D3                     	ds	1
  3698     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3699     00D4                     vfpfcnvrt@cp:	
  3700                           ; 1 bytes @ 0x2C
  3701                           
  3702                           
  3703                           ; 2 bytes @ 0x2C
  3704     00D4                     	ds	1
  3705     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3706                           
  3707                           ; 2 bytes @ 0x2D
  3708     00D5                     	ds	1
  3709     00D6                     vfpfcnvrt@fp:
  3710                           
  3711                           ; 1 bytes @ 0x2E
  3712     00D6                     	ds	1
  3713     00D7                     ?_vfprintf:
  3714     00D7                     APP_KeyboardTasks@i:	
  3715                           ; 2 bytes @ 0x2F
  3716                           
  3717     00D7                     vfprintf@fmt:	
  3718                           ; 1 bytes @ 0x2F
  3719                           
  3720                           
  3721                           ; 2 bytes @ 0x2F
  3722     00D7                     	ds	2
  3723     00D9                     vfprintf@ap:
  3724                           
  3725                           ; 1 bytes @ 0x31
  3726     00D9                     	ds	1
  3727     00DA                     ??_vfprintf:
  3728                           
  3729                           ; 1 bytes @ 0x32
  3730     00DA                     	ds	1
  3731     00DB                     vfprintf@fp:
  3732                           
  3733                           ; 1 bytes @ 0x33
  3734     00DB                     	ds	1
  3735     00DC                     vfprintf@cfmt:
  3736                           
  3737                           ; 2 bytes @ 0x34
  3738     00DC                     	ds	2
  3739     00DE                     ?_snprintf:
  3740     00DE                     snprintf@n:	
  3741                           ; 2 bytes @ 0x36
  3742                           
  3743                           
  3744                           ; 2 bytes @ 0x36
  3745     00DE                     	ds	2
  3746     00E0                     snprintf@fmt:
  3747                           
  3748                           ; 2 bytes @ 0x38
  3749     00E0                     	ds	6
  3750     00E6                     ??_snprintf:
  3751                           
  3752                           ; 1 bytes @ 0x3E
  3753     00E6                     	ds	3
  3754     00E9                     ??_main:
  3755                           
  3756                           ; 1 bytes @ 0x41
  3757     00E9                     	ds	2
  3758                           
  3759                           	psect	cstackCOMMON
  3760     0070                     __pcstackCOMMON:
  3761     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3762     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3766                           ; 1 bytes @ 0x0
  3767                           
  3768     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3769                           ; 1 bytes @ 0x0
  3770                           
  3771     0070                     ?_IOCAF4_ISR:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774     0070                     ?_IOCAF5_ISR:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777     0070                     ?_OSCILLATOR_Initialize:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780     0070                     ?_WDT_Initialize:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783     0070                     ?_TMR2_Initialize:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786     0070                     ?_EUSART_Initialize:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789     0070                     ?_USBDeviceInit:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792     0070                     ?_USBDeviceAttach:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795     0070                     ?_USBDeviceTasks:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798     0070                     ?_TMR2_ISR:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801     0070                     ??_TMR2_ISR:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804     0070                     ?_TMR2_DefaultInterruptHandler:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807     0070                     ??_TMR2_DefaultInterruptHandler:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810     0070                     ?_EUSART_Receive_ISR:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813     0070                     ?_EUSART_Transmit_ISR:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816     0070                     ??_EUSART_Transmit_ISR:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831     0070                     ?_EUSART_DefaultErrorHandler:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834     0070                     ?_EUSART_RxDataHandler:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837     0070                     ??_EUSART_RxDataHandler:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840     0070                     ?_USBWakeFromSuspend:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843     0070                     ?_USBSuspend:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846     0070                     ?_USBIncrement1msInternalTimers:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849     0070                     ??_USBIncrement1msInternalTimers:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852     0070                     ?_USBCtrlEPAllowStatusStage:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855     0070                     ??_USBCtrlEPAllowStatusStage:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858     0070                     ?_USBStallHandler:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861     0070                     ??_USBStallHandler:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864     0070                     ?_USBCtrlEPService:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867     0070                     ?_USBConfigureEndpoint:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870     0070                     ?_USBCtrlTrfTxService:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873     0070                     ??_USBCtrlTrfTxService:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876     0070                     ?_USBCtrlTrfSetupHandler:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879     0070                     ?_USBCtrlTrfOutHandler:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882     0070                     ?_USBCtrlTrfInHandler:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885     0070                     ?_USBCheckStdRequest:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888     0070                     ?_USBStdFeatureReqHandler:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891     0070                     ?_USBHIDCBSetReportHandler:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894     0070                     ??_USBHIDCBSetReportHandler:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900     0070                     ?_APP_KeyboardInit:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903     0070                     ?_SysTime_Init:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906     0070                     ?_PS2Keyboard_Init:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909     0070                     ?_PS2Keyboard_GetScanCode:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912     0070                     ?_APP_KeyboardTasks:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915     0070                     ?_APP_KeyboardUpdateState:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918     0070                     ?_APP_KeyboardProcessOutputReport:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924     0070                     ?_PS2Keyboard_GetLastCommand:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927     0070                     ?_PS2Keyboard_SendCommand:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933     0070                     ?_PS2Keyboard_DataInterrupt:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936     0070                     ?_SysTimeInterrupt:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939     0070                     ??_SysTimeInterrupt:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942     0070                     ?_putch:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945     0070                     ?_PIN_MANAGER_Initialize:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948     0070                     ?_PIN_MANAGER_IOC:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951     0070                     ?_SYSTEM_Initialize:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954     0070                     ?_INTERRUPT_InterruptManager:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957     0070                     ?_TMR2_StartTimer:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960     0070                     ?_EUSART_is_tx_ready:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963     0070                     ?_EUSART_Write:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966     0070                     ?_USBCtrlEPAllowDataStage:	
  3967                           ; 1 bytes @ 0x0
  3968                           
  3969     0070                     ?_USBCtrlEPServiceComplete:	
  3970                           ; 1 bytes @ 0x0
  3971                           
  3972     0070                     ?_USBCtrlTrfRxService:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975     0070                     ?_USBStdSetCfgHandler:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978     0070                     ?_USBStdGetDscHandler:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981     0070                     ??_USBStdGetDscHandler:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984     0070                     ?_USBStdGetStatusHandler:	
  3985                           ; 1 bytes @ 0x0
  3986                           
  3987     0070                     ??_USBStdGetStatusHandler:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990     0070                     ?_USBCheckHIDRequest:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993     0070                     ?_USBHIDCBSetReportComplete:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996     0070                     ?i1_USBDeviceInit:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999     0070                     ??i1_USBDeviceInit:	
  4000                           ; 1 bytes @ 0x0
  4001                           
  4002     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  4003                           ; 1 bytes @ 0x0
  4004                           
  4005     0070                     ?i1_PS2Keyboard_SendCommand:	
  4006                           ; 1 bytes @ 0x0
  4007                           
  4008     0070                     ??i1_PS2Keyboard_SendCommand:	
  4009                           ; 1 bytes @ 0x0
  4010                           
  4011     0070                     ?i1_GenericQueue_Init:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014     0070                     ?_main:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017     0070                     ?i1_USBTransferOnePacket:	
  4018                           ; 2 bytes @ 0x0
  4019                           
  4020     0070                     ?i1_GenericQueue_IsFull:	
  4021                           ; 2 bytes @ 0x0
  4022                           
  4023     0070                     ?i1___wmul:	
  4024                           ; 2 bytes @ 0x0
  4025                           
  4026     0070                     ?i1___awmod:	
  4027                           ; 2 bytes @ 0x0
  4028                           
  4029     0070                     ?i1_memset:	
  4030                           ; 2 bytes @ 0x0
  4031                           
  4032     0070                     ?_SysTime_GetCurrentTimeMs:	
  4033                           ; 2 bytes @ 0x0
  4034                           
  4035     0070                     USBConfigureEndpoint@direction:	
  4036                           ; 4 bytes @ 0x0
  4037                           
  4038     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041     0070                     putch@c:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044     0070                     i1USBTransferOnePacket@dir:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047     0070                     i1PS2Keyboard_SendCommand@cmd:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050     0070                     USBStdGetStatusHandler@p:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053     0070                     i1GenericQueue_Init@q:	
  4054                           ; 2 bytes @ 0x0
  4055                           
  4056     0070                     i1GenericQueue_IsFull@q:	
  4057                           ; 2 bytes @ 0x0
  4058                           
  4059     0070                     i1___wmul@multiplier:	
  4060                           ; 2 bytes @ 0x0
  4061                           
  4062     0070                     i1___awmod@divisor:	
  4063                           ; 2 bytes @ 0x0
  4064                           
  4065     0070                     i1memset@dest:	
  4066                           ; 2 bytes @ 0x0
  4067                           
  4068                           
  4069                           ; 2 bytes @ 0x0
  4070     0070                     	ds	1
  4071     0071                     ??_EUSART_Receive_ISR:
  4072     0071                     ??_EUSART_DefaultErrorHandler:	
  4073                           ; 1 bytes @ 0x1
  4074                           
  4075     0071                     ??_USBConfigureEndpoint:	
  4076                           ; 1 bytes @ 0x1
  4077                           
  4078     0071                     ??_USBHIDCBSetIdleRateHandler:	
  4079                           ; 1 bytes @ 0x1
  4080                           
  4081     0071                     ??_USBHIDCBSetReportComplete:	
  4082                           ; 1 bytes @ 0x1
  4083                           
  4084     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  4085                           ; 1 bytes @ 0x1
  4086                           
  4087     0071                     i1USBTransferOnePacket@data:	
  4088                           ; 1 bytes @ 0x1
  4089                           
  4090                           
  4091                           ; 2 bytes @ 0x1
  4092     0071                     	ds	1
  4093     0072                     ??i1_GenericQueue_IsFull:
  4094     0072                     USBCtrlTrfTxService@byteToSend:	
  4095                           ; 1 bytes @ 0x2
  4096                           
  4097     0072                     i1GenericQueue_Init@element_size:	
  4098                           ; 1 bytes @ 0x2
  4099                           
  4100     0072                     i1___wmul@multiplicand:	
  4101                           ; 2 bytes @ 0x2
  4102                           
  4103     0072                     i1___awmod@dividend:	
  4104                           ; 2 bytes @ 0x2
  4105                           
  4106     0072                     i1memset@c:	
  4107                           ; 2 bytes @ 0x2
  4108                           
  4109                           
  4110                           ; 2 bytes @ 0x2
  4111     0072                     	ds	1
  4112     0073                     ??_USBCtrlTrfInHandler:
  4113     0073                     ??_USBCtrlEPAllowDataStage:	
  4114                           ; 1 bytes @ 0x3
  4115                           
  4116     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  4117                           ; 1 bytes @ 0x3
  4118                           
  4119     0073                     i1USBTransferOnePacket@len:	
  4120                           ; 1 bytes @ 0x3
  4121                           
  4122                           
  4123                           ; 1 bytes @ 0x3
  4124     0073                     	ds	1
  4125     0074                     ??_IOCAF5_ISR:
  4126     0074                     ??_PS2Keyboard_DataInterrupt:	
  4127                           ; 1 bytes @ 0x4
  4128                           
  4129     0074                     ??_SysTime_GetCurrentTimeMs:	
  4130                           ; 1 bytes @ 0x4
  4131                           
  4132     0074                     ??_USBCtrlTrfRxService:	
  4133                           ; 1 bytes @ 0x4
  4134                           
  4135     0074                     ??_USBCheckHIDRequest:	
  4136                           ; 1 bytes @ 0x4
  4137                           
  4138     0074                     ??i1_USBTransferOnePacket:	
  4139                           ; 1 bytes @ 0x4
  4140                           
  4141     0074                     ??i1_GenericQueue_Init:	
  4142                           ; 1 bytes @ 0x4
  4143                           
  4144     0074                     ??i1___wmul:	
  4145                           ; 1 bytes @ 0x4
  4146                           
  4147     0074                     ??i1___awmod:	
  4148                           ; 1 bytes @ 0x4
  4149                           
  4150     0074                     i1USBDeviceInit@p:	
  4151                           ; 1 bytes @ 0x4
  4152                           
  4153     0074                     i1___wmul@product:	
  4154                           ; 2 bytes @ 0x4
  4155                           
  4156     0074                     i1memset@n:	
  4157                           ; 2 bytes @ 0x4
  4158                           
  4159                           
  4160                           ; 2 bytes @ 0x4
  4161     0074                     	ds	1
  4162     0075                     USBConfigureEndpoint@EPNum:
  4163     0075                     i1___awmod@counter:	
  4164                           ; 1 bytes @ 0x5
  4165                           
  4166                           
  4167                           ; 1 bytes @ 0x5
  4168     0075                     	ds	1
  4169     0076                     ??i1_memset:
  4170     0076                     ?i1_memcpy:	
  4171                           ; 1 bytes @ 0x6
  4172                           
  4173     0076                     USBConfigureEndpoint@handle:	
  4174                           ; 2 bytes @ 0x6
  4175                           
  4176     0076                     i1USBDeviceInit@i_1369:	
  4177                           ; 1 bytes @ 0x6
  4178                           
  4179     0076                     i1___awmod@sign:	
  4180                           ; 1 bytes @ 0x6
  4181                           
  4182     0076                     i1memcpy@d1:	
  4183                           ; 1 bytes @ 0x6
  4184                           
  4185     0076                     i1memset@p:	
  4186                           ; 2 bytes @ 0x6
  4187                           
  4188                           
  4189                           ; 2 bytes @ 0x6
  4190     0076                     	ds	1
  4191     0077                     ?_USBEnableEndpoint:
  4192     0077                     ??_USBCtrlEPServiceComplete:	
  4193                           ; 1 bytes @ 0x7
  4194                           
  4195     0077                     USBEnableEndpoint@options:	
  4196                           ; 1 bytes @ 0x7
  4197                           
  4198     0077                     USBCtrlTrfInHandler@lastDTS:	
  4199                           ; 1 bytes @ 0x7
  4200                           
  4201     0077                     i1USBDeviceInit@i:	
  4202                           ; 1 bytes @ 0x7
  4203                           
  4204                           
  4205                           ; 1 bytes @ 0x7
  4206     0077                     	ds	1
  4207     0078                     ??_USBEnableEndpoint:
  4208     0078                     USBCtrlTrfRxService@i:	
  4209                           ; 1 bytes @ 0x8
  4210                           
  4211     0078                     i1USBTransferOnePacket@ep:	
  4212                           ; 1 bytes @ 0x8
  4213                           
  4214     0078                     i1memcpy@s1:	
  4215                           ; 1 bytes @ 0x8
  4216                           
  4217                           
  4218                           ; 2 bytes @ 0x8
  4219     0078                     	ds	1
  4220     0079                     USBCtrlTrfRxService@byteToRead:
  4221     0079                     i1USBTransferOnePacket@handle:	
  4222                           ; 1 bytes @ 0x9
  4223                           
  4224                           
  4225                           ; 2 bytes @ 0x9
  4226     0079                     	ds	1
  4227     007A                     ??_USBCtrlTrfOutHandler:
  4228     007A                     USBEnableEndpoint@p:	
  4229                           ; 1 bytes @ 0xA
  4230                           
  4231     007A                     i1memcpy@n:	
  4232                           ; 2 bytes @ 0xA
  4233                           
  4234                           
  4235                           ; 2 bytes @ 0xA
  4236     007A                     	ds	2
  4237     007C                     ??i1_memcpy:
  4238     007C                     USBEnableEndpoint@ep:	
  4239                           ; 1 bytes @ 0xC
  4240                           
  4241     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4242                           ; 1 bytes @ 0xC
  4243                           
  4244                           
  4245                           ; 1 bytes @ 0xC
  4246     007C                     	ds	1
  4247     007D                     ??_USBWakeFromSuspend:
  4248     007D                     ??_USBSuspend:	
  4249                           ; 1 bytes @ 0xD
  4250                           
  4251     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4252                           ; 1 bytes @ 0xD
  4253                           
  4254     007D                     ??_APP_KeyboardInit:	
  4255                           ; 1 bytes @ 0xD
  4256                           
  4257     007D                     ??_USBStdSetCfgHandler:	
  4258                           ; 1 bytes @ 0xD
  4259                           
  4260     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4261                           ; 1 bytes @ 0xD
  4262                           
  4263                           
  4264                           ; 1 bytes @ 0xD
  4265     007D                     	ds	1
  4266     007E                     ??_IOCAF4_ISR:
  4267     007E                     ??_USBCheckStdRequest:	
  4268                           ; 1 bytes @ 0xE
  4269                           
  4270     007E                     ??_PIN_MANAGER_IOC:	
  4271                           ; 1 bytes @ 0xE
  4272                           
  4273     007E                     ??_INTERRUPT_InterruptManager:	
  4274                           ; 1 bytes @ 0xE
  4275                           
  4276                           
  4277                           	psect	cstackBANK0
  4278     0050                     __pcstackBANK0:	
  4279                           ; 1 bytes @ 0xE
  4280                           
  4281     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4282     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4283                           ; 1 bytes @ 0x0
  4284                           
  4285     0050                     i1memcpy@d:	
  4286                           ; 2 bytes @ 0x0
  4287                           
  4288                           
  4289                           ; 2 bytes @ 0x0
  4290     0050                     	ds	2
  4291     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4292     0052                     i1memcpy@s:	
  4293                           ; 2 bytes @ 0x2
  4294                           
  4295                           
  4296                           ; 2 bytes @ 0x2
  4297     0052                     	ds	2
  4298     0054                     i1memcpy@tmp:
  4299     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4300                           ; 1 bytes @ 0x4
  4301                           
  4302                           
  4303                           ; 2 bytes @ 0x4
  4304     0054                     	ds	1
  4305     0055                     ?i1_GenericQueue_Enqueue:
  4306     0055                     i1GenericQueue_Enqueue@q:	
  4307                           ; 1 bytes @ 0x5
  4308                           
  4309                           
  4310                           ; 2 bytes @ 0x5
  4311     0055                     	ds	1
  4312     0056                     ??_USBStdFeatureReqHandler:
  4313     0056                     USBStdSetCfgHandler@p:	
  4314                           ; 1 bytes @ 0x6
  4315                           
  4316                           
  4317                           ; 2 bytes @ 0x6
  4318     0056                     	ds	1
  4319     0057                     i1GenericQueue_Enqueue@item:
  4320                           
  4321                           ; 2 bytes @ 0x7
  4322     0057                     	ds	1
  4323     0058                     USBStdSetCfgHandler@i_2097:
  4324     0058                     USBStdFeatureReqHandler@pUEP:	
  4325                           ; 1 bytes @ 0x8
  4326                           
  4327                           
  4328                           ; 2 bytes @ 0x8
  4329     0058                     	ds	1
  4330     0059                     ??i1_GenericQueue_Enqueue:
  4331     0059                     USBStdSetCfgHandler@i:	
  4332                           ; 1 bytes @ 0x9
  4333                           
  4334                           
  4335                           ; 1 bytes @ 0x9
  4336     0059                     	ds	1
  4337     005A                     USBStdFeatureReqHandler@current_ep_data:
  4338                           
  4339                           ; 1 bytes @ 0xA
  4340     005A                     	ds	1
  4341     005B                     USBStdFeatureReqHandler@p:
  4342                           
  4343                           ; 2 bytes @ 0xB
  4344     005B                     	ds	1
  4345     005C                     ??_PS2Keyboard_ClockInterrupt:
  4346                           
  4347                           ; 1 bytes @ 0xC
  4348     005C                     	ds	1
  4349     005D                     ??_USBCtrlTrfSetupHandler:
  4350                           
  4351                           ; 1 bytes @ 0xD
  4352     005D                     	ds	1
  4353     005E                     ??_USBCtrlEPService:
  4354                           
  4355                           ; 1 bytes @ 0xE
  4356     005E                     	ds	1
  4357     005F                     ??_USBDeviceTasks:
  4358                           
  4359                           ; 1 bytes @ 0xF
  4360     005F                     	ds	1
  4361     0060                     USBDeviceTasks@i:
  4362                           
  4363                           ; 1 bytes @ 0x10
  4364     0060                     	ds	1
  4365                           
  4366                           	psect	maintext
  4367     0B2B                     __pmaintext:	
  4368 ;;
  4369 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4370 ;;
  4371 ;; *************** function _main *****************
  4372 ;; Defined at:
  4373 ;;		line 12 in file "main.c"
  4374 ;; Parameters:    Size  Location     Type
  4375 ;;		None
  4376 ;; Auto vars:     Size  Location     Type
  4377 ;;  scanCodeStr    10   17[BANK2 ] unsigned char [10]
  4378 ;;  scanCode        3   33[BANK2 ] struct PS2ScanCode
  4379 ;;  hndlScanCode    1   32[BANK2 ] PTR struct PS2ScanCode
  4380 ;;		 -> main@scanCode(3), NULL(0), 
  4381 ;;  i               1   31[BANK2 ] unsigned char 
  4382 ;;  strLen          1   30[BANK2 ] unsigned char 
  4383 ;;  scanCodeVali    1   29[BANK2 ] _Bool 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  2  840[None  ] int 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : B1F/0
  4390 ;;		On exit  : 2/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4394 ;;      Locals:         0       0       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4395 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4396 ;;      Totals:         0       0       2      19       0       0       0       0       0       0       0       0       
      +0       0
  4397 ;;Total ram usage:       21 bytes
  4398 ;; Hardware stack levels required when called: 18
  4399 ;; This function calls:
  4400 ;;		_APP_KeyboardTasks
  4401 ;;		_EUSART_Write
  4402 ;;		_EUSART_is_tx_ready
  4403 ;;		_PS2Keyboard_GetScanCode
  4404 ;;		_PS2Keyboard_Init
  4405 ;;		_SYSTEM_Initialize
  4406 ;;		_SysTime_Init
  4407 ;;		_snprintf
  4408 ;; This function is called by:
  4409 ;;		Startup code after reset
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413     0B2B                     _main:	
  4414                           ;psect for function _main
  4415                           
  4416                           
  4417                           ;main.c: 13:     SYSTEM_Initialize();
  4418                           
  4419                           ;incstack = 0
  4420 ;; hardware stack exceeded
  4421                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4422     0B2B  319C  2419  318B   	fcall	_SYSTEM_Initialize
  4423                           
  4424                           ;main.c: 14:     SysTime_Init();
  4425     0B2E  319B  235B  318B   	fcall	_SysTime_Init
  4426                           
  4427                           ;main.c: 15:     PS2Keyboard_Init();
  4428     0B31  319D  2524  318B   	fcall	_PS2Keyboard_Init
  4429                           
  4430                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4431     0B34  178B               	bsf	11,7	;volatile
  4432                           
  4433                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4434     0B35  170B               	bsf	11,6	;volatile
  4435                           
  4436                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4437     0B36  0844               	movf	main@F3441^(0+384),w
  4438     0B37  0022               	movlb	2	; select bank2
  4439     0B38  00ED               	movwf	main@scanCode^(0+256)
  4440     0B39  0023               	movlb	3	; select bank3
  4441     0B3A  0845               	movf	(main@F3441+1)^(0+384),w
  4442     0B3B  0022               	movlb	2	; select bank2
  4443     0B3C  00EE               	movwf	(main@scanCode+1)^(0+256)
  4444     0B3D  0023               	movlb	3	; select bank3
  4445     0B3E  0846               	movf	(main@F3441+2)^(0+384),w
  4446     0B3F  0022               	movlb	2	; select bank2
  4447     0B40  00EF               	movwf	(main@scanCode+2)^(0+256)
  4448                           
  4449                           ;main.c: 34:     char scanCodeStr[10] = "";
  4450     0B41  305D               	movlw	low main@scanCodeStr
  4451     0B42  0086               	movwf	6
  4452     0B43  3001               	movlw	high main@scanCodeStr
  4453     0B44  0087               	movwf	7
  4454     0B45  300A               	movlw	10
  4455     0B46  0021               	movlb	1	; select bank1
  4456     0B47  00E9               	movwf	??_main^(0+128)
  4457     0B48  3000               	movlw	0
  4458     0B49                     u7330:
  4459     0B49  001E               	movwi fsr1++
  4460     0B4A  0BE9               	decfsz	??_main^(0+128),f
  4461     0B4B  2B49               	goto	u7330
  4462     0B4C                     l7042:
  4463                           
  4464                           ;main.c: 39:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4465     0B4C  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4466     0B4D  319D  255B  318B   	fcall	_PS2Keyboard_GetScanCode
  4467     0B50  0022               	movlb	2	; select bank2
  4468     0B51  00E9               	movwf	main@scanCodeValid^(0+256)
  4469                           
  4470                           ;main.c: 40:         if(scanCodeValid) {
  4471     0B52  0869               	movf	main@scanCodeValid^(0+256),w
  4472     0B53  1903               	btfsc	3,2
  4473     0B54  2B58               	goto	l7048
  4474                           
  4475                           ;main.c: 41:             hndlScanCode = &scanCode;
  4476     0B55  306D               	movlw	(low (main@scanCode| (0+256)))& (0+255)
  4477     0B56  00EC               	movwf	main@hndlScanCode^(0+256)
  4478                           
  4479                           ;main.c: 42:         } else {
  4480     0B57  2B59               	goto	l7050
  4481     0B58                     l7048:
  4482                           
  4483                           ;main.c: 43:             hndlScanCode = ((void*)0);
  4484     0B58  01EC               	clrf	main@hndlScanCode^(0+256)
  4485     0B59                     l7050:
  4486                           
  4487                           ;main.c: 45:         if(hndlScanCode != ((void*)0)) {
  4488     0B59  086C               	movf	main@hndlScanCode^(0+256),w
  4489     0B5A  1903               	btfsc	3,2
  4490     0B5B  2BA9               	goto	l7070
  4491                           
  4492                           ;main.c: 46:             strLen = snprintf(scanCodeStr, sizeof(scanCodeStr), "%c%02X\r\n
      +                          ", hndlScanCode->isBreak ? 'b' : ' ', hndlScanCode->value);
  4493     0B5C  086C               	movf	main@hndlScanCode^(0+256),w
  4494     0B5D  3E02               	addlw	2
  4495     0B5E  0086               	movwf	6
  4496     0B5F  3001               	movlw	1	; select bank2/3
  4497     0B60  0087               	movwf	7
  4498     0B61  0801               	movf	1,w
  4499     0B62  1D03               	btfss	3,2
  4500     0B63  2B66               	goto	l7056
  4501     0B64  3020               	movlw	32
  4502     0B65  2B67               	goto	L1
  4503     0B66                     l7056:
  4504     0B66  3062               	movlw	98
  4505     0B67                     L1:
  4506     0B67  00E7               	movwf	_main$2651^(0+256)
  4507     0B68  3000               	movlw	0
  4508     0B69  00E8               	movwf	(_main$2651^(0+256)+1)
  4509     0B6A  300A               	movlw	10
  4510     0B6B  0021               	movlb	1	; select bank1
  4511     0B6C  00DE               	movwf	snprintf@n^(0+128)
  4512     0B6D  3000               	movlw	0
  4513     0B6E  00DF               	movwf	(snprintf@n^(0+128)+1)
  4514     0B6F  30CA               	movlw	low (STR_1| (0+32768))
  4515     0B70  00E0               	movwf	snprintf@fmt^(0+128)
  4516     0B71  3098               	movlw	high (STR_1| (0+32768))
  4517     0B72  00E1               	movwf	(snprintf@fmt^(0+128)+1)
  4518     0B73  0022               	movlb	2	; select bank2
  4519     0B74  0868               	movf	(_main$2651+1)^(0+256),w
  4520     0B75  0021               	movlb	1	; select bank1
  4521     0B76  00E3               	movwf	((?_snprintf+1)^(0+128)+4)
  4522     0B77  0022               	movlb	2	; select bank2
  4523     0B78  0867               	movf	_main$2651^(0+256),w
  4524     0B79  0021               	movlb	1	; select bank1
  4525     0B7A  00E2               	movwf	(?_snprintf^(0+128)+4)
  4526     0B7B  0022               	movlb	2	; select bank2
  4527     0B7C  086C               	movf	main@hndlScanCode^(0+256),w
  4528     0B7D  0086               	movwf	6
  4529     0B7E  3001               	movlw	1	; select bank2/3
  4530     0B7F  0087               	movwf	7
  4531     0B80  0801               	movf	1,w
  4532     0B81  0021               	movlb	1	; select bank1
  4533     0B82  00E9               	movwf	??_main^(0+128)
  4534     0B83  01EA               	clrf	(??_main^(0+128)+1)
  4535     0B84  0869               	movf	??_main^(0+128),w
  4536     0B85  00E4               	movwf	(?_snprintf^(0+128)+6)
  4537     0B86  086A               	movf	(??_main+1)^(0+128),w
  4538     0B87  00E5               	movwf	((?_snprintf+1)^(0+128)+6)
  4539     0B88  305D               	movlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4540     0B89  318B  23AE  318B   	fcall	_snprintf
  4541     0B8C  085E               	movf	?_snprintf^(0+128),w
  4542     0B8D  0022               	movlb	2	; select bank2
  4543     0B8E  00EA               	movwf	main@strLen^(0+256)
  4544                           
  4545                           ;main.c: 47:             for(i = 0; i < strLen; i++) {
  4546     0B8F  01EB               	clrf	main@i^(0+256)
  4547     0B90                     l7068:
  4548     0B90  086A               	movf	main@strLen^(0+256),w
  4549     0B91  026B               	subwf	main@i^(0+256),w
  4550     0B92  1803               	btfsc	3,0
  4551     0B93  2BA9               	goto	l7070
  4552     0B94                     l7062:
  4553     0B94  319A  22E0  318B   	fcall	_EUSART_is_tx_ready
  4554     0B97  3A00               	xorlw	0
  4555     0B98  1903               	skipnz
  4556     0B99  2B94               	goto	l7062
  4557                           
  4558                           ;main.c: 49:                 EUSART_Write((uint8_t)scanCodeStr[i]);
  4559     0B9A  086B               	movf	main@i^(0+256),w
  4560     0B9B  3E5D               	addlw	(low (main@scanCodeStr| (0+256)))& (0+255)
  4561     0B9C  0086               	movwf	6
  4562     0B9D  3001               	movlw	1	; select bank2/3
  4563     0B9E  0087               	movwf	7
  4564     0B9F  0801               	movf	1,w
  4565     0BA0  319E  2677  318B   	fcall	_EUSART_Write
  4566                           
  4567                           ;main.c: 50:             }
  4568     0BA3  3001               	movlw	1
  4569     0BA4  00E9               	movwf	??_main^(0+128)
  4570     0BA5  0869               	movf	??_main^(0+128),w
  4571     0BA6  0022               	movlb	2	; select bank2
  4572     0BA7  07EB               	addwf	main@i^(0+256),f
  4573     0BA8  2B90               	goto	l7068
  4574     0BA9                     l7070:
  4575                           
  4576                           ;main.c: 52:         APP_KeyboardTasks(hndlScanCode);
  4577     0BA9  086C               	movf	main@hndlScanCode^(0+256),w
  4578     0BAA  3183  234C  318B   	fcall	_APP_KeyboardTasks
  4579     0BAD  2B4C               	goto	l7042
  4580     0BAE                     __end_of_main:
  4581                           
  4582                           	psect	text1
  4583     0BAE                     __ptext1:	
  4584 ;; *************** function _snprintf *****************
  4585 ;; Defined at:
  4586 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_snprintf.c"
  4587 ;; Parameters:    Size  Location     Type
  4588 ;;  s               1    wreg     PTR unsigned char 
  4589 ;;		 -> main@scanCodeStr(10), 
  4590 ;;  n               2   54[BANK1 ] unsigned int 
  4591 ;;  fmt             2   56[BANK1 ] PTR const unsigned char 
  4592 ;;		 -> STR_1(9), 
  4593 ;; Auto vars:     Size  Location     Type
  4594 ;;  s               1    2[BANK2 ] PTR unsigned char 
  4595 ;;		 -> main@scanCodeStr(10), 
  4596 ;;  f              11    6[BANK2 ] struct _IO_FILE
  4597 ;;  cnt             2    4[BANK2 ] int 
  4598 ;;  ap              1    3[BANK2 ] PTR void [1]
  4599 ;;		 -> ?_snprintf(2), 
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  2   54[BANK1 ] int 
  4602 ;; Registers used:
  4603 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4604 ;; Tracked objects:
  4605 ;;		On entry : 1F/1
  4606 ;;		On exit  : 1F/1
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4609 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Locals:         0       0       0      17       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Totals:         0       0      11      17       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;Total ram usage:       28 bytes
  4614 ;; Hardware stack levels used: 1
  4615 ;; Hardware stack levels required when called: 17
  4616 ;; This function calls:
  4617 ;;		_vfprintf
  4618 ;; This function is called by:
  4619 ;;		_main
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623     0BAE                     _snprintf:	
  4624                           ;psect for function _snprintf
  4625                           
  4626                           
  4627                           ;incstack = 0
  4628 ;; hardware stack exceeded
  4629                           ; Regs used in _snprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4630                           ;snprintf@s stored from wreg
  4631     0BAE  0022               	movlb	2	; select bank2
  4632     0BAF  00CE               	movwf	snprintf@s^(0+256)
  4633     0BB0  3080               	movlw	128
  4634     0BB1  0021               	movlb	1	; select bank1
  4635     0BB2  025F               	subwf	(snprintf@n+1)^(0+128),w
  4636     0BB3  3000               	movlw	0
  4637     0BB4  1903               	skipnz
  4638     0BB5  025E               	subwf	snprintf@n^(0+128),w
  4639     0BB6  1C03               	skipc
  4640     0BB7  2BC3               	goto	l6234
  4641     0BB8  304B               	movlw	75
  4642     0BB9  0023               	movlb	3	; select bank3
  4643     0BBA  00CB               	movwf	_errno^(0+384)
  4644     0BBB  3000               	movlw	0
  4645     0BBC  00CC               	movwf	(_errno^(0+384)+1)
  4646     0BBD  30FF               	movlw	255
  4647     0BBE  0021               	movlb	1	; select bank1
  4648     0BBF  00DE               	movwf	?_snprintf^(0+128)
  4649     0BC0  30FF               	movlw	255
  4650     0BC1  00DF               	movwf	(?_snprintf^(0+128)+1)
  4651     0BC2  0008               	return
  4652     0BC3                     l6234:
  4653     0BC3  30E2               	movlw	(low ((?_snprintf| 0+4)))& (0+255)
  4654     0BC4  0022               	movlb	2	; select bank2
  4655     0BC5  00CF               	movwf	snprintf@ap^(0+256)
  4656     0BC6  084E               	movf	snprintf@s^(0+256),w
  4657     0BC7  00D2               	movwf	snprintf@f^(0+256)
  4658     0BC8  3000               	movlw	0
  4659     0BC9  0021               	movlb	1	; select bank1
  4660     0BCA  025F               	subwf	(snprintf@n+1)^(0+128),w
  4661     0BCB  3002               	movlw	2
  4662     0BCC  1903               	skipnz
  4663     0BCD  025E               	subwf	snprintf@n^(0+128),w
  4664     0BCE  1C03               	skipc
  4665     0BCF  2BDC               	goto	l6240
  4666     0BD0  085E               	movf	snprintf@n^(0+128),w
  4667     0BD1  3EFF               	addlw	255
  4668     0BD2  0022               	movlb	2	; select bank2
  4669     0BD3  00DB               	movwf	(snprintf@f^(0+256)+9)
  4670     0BD4  30FF               	movlw	255
  4671     0BD5  0021               	movlb	1	; select bank1
  4672     0BD6  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4673     0BD7  0022               	movlb	2	; select bank2
  4674     0BD8  00DC               	movwf	((snprintf@f+1)^(0+256)+9)
  4675     0BD9  01D4               	clrf	(snprintf@f^(0+256)+2)
  4676     0BDA  01D5               	clrf	((snprintf@f+1)^(0+256)+2)
  4677     0BDB  2BE5               	goto	l6242
  4678     0BDC                     l6240:
  4679     0BDC  3001               	movlw	1
  4680     0BDD  0022               	movlb	2	; select bank2
  4681     0BDE  00DB               	movwf	(snprintf@f^(0+256)+9)
  4682     0BDF  3000               	movlw	0
  4683     0BE0  00DC               	movwf	(snprintf@f^(0+256)+10)
  4684     0BE1  3001               	movlw	1
  4685     0BE2  00D4               	movwf	(snprintf@f^(0+256)+2)
  4686     0BE3  3000               	movlw	0
  4687     0BE4  00D5               	movwf	(snprintf@f^(0+256)+3)
  4688     0BE5                     l6242:
  4689     0BE5  0021               	movlb	1	; select bank1
  4690     0BE6  0861               	movf	(snprintf@fmt+1)^(0+128),w
  4691     0BE7  00D8               	movwf	(vfprintf@fmt+1)^(0+128)
  4692     0BE8  0860               	movf	snprintf@fmt^(0+128),w
  4693     0BE9  00D7               	movwf	vfprintf@fmt^(0+128)
  4694     0BEA  304F               	movlw	(low (snprintf@ap| (0+256)))& (0+255)
  4695     0BEB  00D9               	movwf	vfprintf@ap^(0+128)
  4696     0BEC  3052               	movlw	(low (snprintf@f| (0+256)))& (0+255)
  4697     0BED  3190  2084  318B   	fcall	_vfprintf
  4698     0BF0  0858               	movf	(?_vfprintf+1)^(0+128),w
  4699     0BF1  0022               	movlb	2	; select bank2
  4700     0BF2  00D1               	movwf	(snprintf@cnt+1)^(0+256)
  4701     0BF3  0021               	movlb	1	; select bank1
  4702     0BF4  0857               	movf	?_vfprintf^(0+128),w
  4703     0BF5  0022               	movlb	2	; select bank2
  4704     0BF6  00D0               	movwf	snprintf@cnt^(0+256)
  4705     0BF7  0021               	movlb	1	; select bank1
  4706     0BF8  085E               	movf	snprintf@n^(0+128),w
  4707     0BF9  045F               	iorwf	(snprintf@n+1)^(0+128),w
  4708     0BFA  1903               	btfsc	3,2
  4709     0BFB  2C2E               	goto	l6256
  4710     0BFC  0022               	movlb	2	; select bank2
  4711     0BFD  1BD1               	btfsc	(snprintf@cnt+1)^(0+256),7
  4712     0BFE  2C2E               	goto	l6256
  4713     0BFF  0021               	movlb	1	; select bank1
  4714     0C00  085E               	movf	snprintf@n^(0+128),w
  4715     0C01  3EFF               	addlw	255
  4716     0C02  00E6               	movwf	??_snprintf^(0+128)
  4717     0C03  30FF               	movlw	255
  4718     0C04  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4719     0C05  00E7               	movwf	(??_snprintf+1)^(0+128)
  4720     0C06  0022               	movlb	2	; select bank2
  4721     0C07  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4722     0C08  3A80               	xorlw	128
  4723     0C09  0021               	movlb	1	; select bank1
  4724     0C0A  00E8               	movwf	(??_snprintf+2)^(0+128)
  4725     0C0B  0867               	movf	(??_snprintf+1)^(0+128),w
  4726     0C0C  3A80               	xorlw	128
  4727     0C0D  0268               	subwf	(??_snprintf+2)^(0+128),w
  4728     0C0E  1D03               	skipz
  4729     0C0F  2C13               	goto	u5925
  4730     0C10  0866               	movf	??_snprintf^(0+128),w
  4731     0C11  0022               	movlb	2	; select bank2
  4732     0C12  0250               	subwf	snprintf@cnt^(0+256),w
  4733     0C13                     u5925:
  4734     0C13  1C03               	skipc
  4735     0C14  2C20               	goto	l6252
  4736     0C15  0021               	movlb	1	; select bank1
  4737     0C16  085E               	movf	snprintf@n^(0+128),w
  4738     0C17  3EFF               	addlw	255
  4739     0C18  0022               	movlb	2	; select bank2
  4740     0C19  00CC               	movwf	_snprintf$3634^(0+256)
  4741     0C1A  30FF               	movlw	255
  4742     0C1B  0021               	movlb	1	; select bank1
  4743     0C1C  3D5F               	addwfc	(snprintf@n+1)^(0+128),w
  4744     0C1D  0022               	movlb	2	; select bank2
  4745     0C1E  00CD               	movwf	(_snprintf$3634+1)^(0+256)
  4746     0C1F  2C25               	goto	l6254
  4747     0C20                     l6252:
  4748     0C20  0022               	movlb	2	; select bank2
  4749     0C21  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4750     0C22  00CD               	movwf	(_snprintf$3634+1)^(0+256)
  4751     0C23  0850               	movf	snprintf@cnt^(0+256),w
  4752     0C24  00CC               	movwf	_snprintf$3634^(0+256)
  4753     0C25                     l6254:
  4754     0C25  084C               	movf	_snprintf$3634^(0+256),w
  4755     0C26  074E               	addwf	snprintf@s^(0+256),w
  4756     0C27  0021               	movlb	1	; select bank1
  4757     0C28  00E6               	movwf	??_snprintf^(0+128)
  4758     0C29  0866               	movf	??_snprintf^(0+128),w
  4759     0C2A  0086               	movwf	6
  4760     0C2B  3001               	movlw	1	; select bank2/3
  4761     0C2C  0087               	movwf	7
  4762     0C2D  0181               	clrf	1
  4763     0C2E                     l6256:
  4764     0C2E  0022               	movlb	2	; select bank2
  4765     0C2F  0851               	movf	(snprintf@cnt+1)^(0+256),w
  4766     0C30  0021               	movlb	1	; select bank1
  4767     0C31  00DF               	movwf	(?_snprintf+1)^(0+128)
  4768     0C32  0022               	movlb	2	; select bank2
  4769     0C33  0850               	movf	snprintf@cnt^(0+256),w
  4770     0C34  0021               	movlb	1	; select bank1
  4771     0C35  00DE               	movwf	?_snprintf^(0+128)
  4772     0C36  0008               	return
  4773     0C37                     __end_of_snprintf:
  4774                           
  4775                           	psect	text2
  4776     1084                     __ptext2:	
  4777 ;; *************** function _vfprintf *****************
  4778 ;; Defined at:
  4779 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;  fp              1    wreg     PTR struct _IO_FILE
  4782 ;;		 -> snprintf@f(11), 
  4783 ;;  fmt             2   47[BANK1 ] PTR const unsigned char 
  4784 ;;		 -> STR_1(9), 
  4785 ;;  ap              1   49[BANK1 ] PTR PTR void 
  4786 ;;		 -> snprintf@ap(1), 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  fp              1   51[BANK1 ] PTR struct _IO_FILE
  4789 ;;		 -> snprintf@f(11), 
  4790 ;;  cfmt            2   52[BANK1 ] PTR unsigned char 
  4791 ;;		 -> STR_1(9), 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;                  2   47[BANK1 ] int 
  4794 ;; Registers used:
  4795 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 1F/1
  4798 ;;		On exit  : 1F/1
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4801 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;Total ram usage:        7 bytes
  4806 ;; Hardware stack levels used: 1
  4807 ;; Hardware stack levels required when called: 16
  4808 ;; This function calls:
  4809 ;;		_vfpfcnvrt
  4810 ;; This function is called by:
  4811 ;;		_snprintf
  4812 ;; This function uses a non-reentrant model
  4813 ;;
  4814                           
  4815     1084                     _vfprintf:	
  4816                           ;psect for function _vfprintf
  4817                           
  4818                           
  4819                           ;incstack = 0
  4820 ;; hardware stack exceeded
  4821                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4822                           ;vfprintf@fp stored from wreg
  4823     1084  00DB               	movwf	vfprintf@fp^(0+128)
  4824                           
  4825                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4826     1085  0858               	movf	(vfprintf@fmt+1)^(0+128),w
  4827     1086  00DD               	movwf	(vfprintf@cfmt+1)^(0+128)
  4828     1087  0857               	movf	vfprintf@fmt^(0+128),w
  4829     1088  00DC               	movwf	vfprintf@cfmt^(0+128)
  4830                           
  4831                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1824:     nout = 
      +                          0;
  4832     1089  0023               	movlb	3	; select bank3
  4833     108A  01C7               	clrf	_nout^(0+384)
  4834     108B  01C8               	clrf	(_nout+1)^(0+384)
  4835     108C                     l5936:	
  4836                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4837                           
  4838                           
  4839                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4840     108C  0021               	movlb	1	; select bank1
  4841     108D  085C               	movf	vfprintf@cfmt^(0+128),w
  4842     108E  0084               	movwf	4
  4843     108F  085D               	movf	(vfprintf@cfmt+1)^(0+128),w
  4844     1090  0085               	movwf	5
  4845     1091  0012               	moviw fsr0++
  4846     1092  1903               	btfsc	3,2
  4847     1093  28A4               	goto	l5938
  4848                           
  4849                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1828:         nou
      +                          t +=
  4850     1094  30DC               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4851     1095  00C8               	movwf	vfpfcnvrt@fmt^(0+128)
  4852     1096  0859               	movf	vfprintf@ap^(0+128),w
  4853     1097  00C9               	movwf	vfpfcnvrt@ap^(0+128)
  4854     1098  085B               	movf	vfprintf@fp^(0+128),w
  4855     1099  3185  256A  3190   	fcall	_vfpfcnvrt
  4856     109C  0848               	movf	?_vfpfcnvrt^(0+128),w
  4857     109D  0023               	movlb	3	; select bank3
  4858     109E  07C7               	addwf	_nout^(0+384),f
  4859     109F  0021               	movlb	1	; select bank1
  4860     10A0  0849               	movf	(?_vfpfcnvrt+1)^(0+128),w
  4861     10A1  0023               	movlb	3	; select bank3
  4862     10A2  3DC8               	addwfc	(_nout+1)^(0+384),f
  4863     10A3  288C               	goto	l5936
  4864     10A4                     l5938:
  4865                           
  4866                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1833:     return 
      +                          nout;
  4867     10A4  0023               	movlb	3	; select bank3
  4868     10A5  0848               	movf	(_nout+1)^(0+384),w
  4869     10A6  0021               	movlb	1	; select bank1
  4870     10A7  00D8               	movwf	(?_vfprintf+1)^(0+128)
  4871     10A8  0023               	movlb	3	; select bank3
  4872     10A9  0847               	movf	_nout^(0+384),w
  4873     10AA  0021               	movlb	1	; select bank1
  4874     10AB  00D7               	movwf	?_vfprintf^(0+128)
  4875     10AC  0008               	return
  4876     10AD                     __end_of_vfprintf:
  4877                           
  4878                           	psect	text3
  4879     056A                     __ptext3:	
  4880 ;; *************** function _vfpfcnvrt *****************
  4881 ;; Defined at:
  4882 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  fp              1    wreg     PTR struct _IO_FILE
  4885 ;;		 -> snprintf@f(11), 
  4886 ;;  fmt             1   32[BANK1 ] PTR PTR unsigned char 
  4887 ;;		 -> vfprintf@cfmt(2), 
  4888 ;;  ap              1   33[BANK1 ] PTR PTR void 
  4889 ;;		 -> snprintf@ap(1), 
  4890 ;; Auto vars:     Size  Location     Type
  4891 ;;  fp              1   46[BANK1 ] PTR struct _IO_FILE
  4892 ;;		 -> snprintf@f(11), 
  4893 ;;  convarg         4   38[BANK1 ] struct .
  4894 ;;  cp              2   44[BANK1 ] PTR unsigned char 
  4895 ;;		 -> STR_1(9), 
  4896 ;;  done            1   43[BANK1 ] _Bool 
  4897 ;;  c               1   42[BANK1 ] unsigned char 
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  2   32[BANK1 ] int 
  4900 ;; Registers used:
  4901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 1F/1
  4904 ;;		On exit  : 1F/1
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:       15 bytes
  4912 ;; Hardware stack levels used: 1
  4913 ;; Hardware stack levels required when called: 15
  4914 ;; This function calls:
  4915 ;;		_ctoa
  4916 ;;		_fputc
  4917 ;;		_read_prec_or_width
  4918 ;;		_xtoa
  4919 ;; This function is called by:
  4920 ;;		_vfprintf
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924     056A                     _vfpfcnvrt:	
  4925                           ;psect for function _vfpfcnvrt
  4926                           
  4927                           
  4928                           ;incstack = 0
  4929 ;; hardware stack exceeded
  4930                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4931                           ;vfpfcnvrt@fp stored from wreg
  4932     056A  00D6               	movwf	vfpfcnvrt@fp^(0+128)
  4933                           
  4934                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4935     056B  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4936     056C  0086               	movwf	6
  4937     056D  0187               	clrf	7
  4938     056E  3F40               	moviw [0]fsr1
  4939     056F  00CA               	movwf	??_vfpfcnvrt^(0+128)
  4940     0570  3F41               	moviw [1]fsr1
  4941     0571  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  4942     0572  084A               	movf	??_vfpfcnvrt^(0+128),w
  4943     0573  0084               	movwf	4
  4944     0574  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  4945     0575  0085               	movwf	5
  4946     0576  0012               	moviw fsr0++
  4947     0577  3A25               	xorlw	37
  4948     0578  1D03               	btfss	3,2
  4949     0579  2E40               	goto	l5486
  4950                           
  4951                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4952     057A  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4953     057B  0086               	movwf	6
  4954     057C  0187               	clrf	7
  4955     057D  3001               	movlw	1
  4956     057E  0781               	addwf	1,f
  4957     057F  3141               	addfsr 1,1
  4958     0580  1803               	skipnc
  4959     0581  0A81               	incf	1,f
  4960                           
  4961                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4962     0582  0022               	movlb	2	; select bank2
  4963     0583  01AC               	clrf	_width^(0+256)
  4964     0584  01AD               	clrf	(_width+1)^(0+256)
  4965     0585  1003               	clrc
  4966     0586  3000               	movlw	0
  4967     0587  1803               	btfsc	3,0
  4968     0588  3001               	movlw	1
  4969     0589  00B4               	movwf	_flags^(0+256)
  4970                           
  4971                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4972     058A  30FF               	movlw	255
  4973     058B  0023               	movlb	3	; select bank3
  4974     058C  00C9               	movwf	_prec^(0+384)
  4975     058D  30FF               	movlw	255
  4976     058E  00CA               	movwf	(_prec^(0+384)+1)
  4977                           
  4978                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  4979     058F  0021               	movlb	1	; select bank1
  4980     0590  01D3               	clrf	vfpfcnvrt@done^(0+128)
  4981                           
  4982                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  4983     0591  2DA0               	goto	l5444
  4984     0592                     l1873:	
  4985                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  4986                           
  4987                           
  4988                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  4989     0592  0022               	movlb	2	; select bank2
  4990     0593  14B4               	bsf	_flags^(0+256),1
  4991                           
  4992                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  4993     0594  0021               	movlb	1	; select bank1
  4994     0595  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  4995     0596  0086               	movwf	6
  4996     0597  0187               	clrf	7
  4997     0598  3001               	movlw	1
  4998     0599  0781               	addwf	1,f
  4999     059A  3141               	addfsr 1,1
  5000     059B  1803               	skipnc
  5001     059C  0A81               	incf	1,f
  5002                           
  5003                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  5004     059D  2DA0               	goto	l5444
  5005     059E                     l1875:	
  5006                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  5007                           
  5008                           
  5009                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  5010     059E  01D3               	clrf	vfpfcnvrt@done^(0+128)
  5011     059F  0AD3               	incf	vfpfcnvrt@done^(0+128),f
  5012     05A0                     l5444:	
  5013                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  5014                           
  5015                           
  5016                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  5017     05A0  0853               	movf	vfpfcnvrt@done^(0+128),w
  5018     05A1  1D03               	btfss	3,2
  5019     05A2  2DB4               	goto	l5446
  5020     05A3  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5021     05A4  0086               	movwf	6
  5022     05A5  0187               	clrf	7
  5023     05A6  3F40               	moviw [0]fsr1
  5024     05A7  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5025     05A8  3F41               	moviw [1]fsr1
  5026     05A9  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5027     05AA  084A               	movf	??_vfpfcnvrt^(0+128),w
  5028     05AB  0084               	movwf	4
  5029     05AC  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5030     05AD  0085               	movwf	5
  5031     05AE  0800               	movf	0,w	;code access
  5032                           
  5033                           ; Switch size 1, requested type "simple"
  5034                           ; Number of cases is 1, Range of values is 48 to 48
  5035                           ; switch strategies available:
  5036                           ; Name         Instructions Cycles
  5037                           ; simple_byte            4     3 (average)
  5038                           ; direct_byte           11     9 (fixed)
  5039                           ; jumptable            263     9 (fixed)
  5040                           ;	Chosen strategy is simple_byte
  5041     05AF  3A30               	xorlw	48	; case 48
  5042     05B0  1903               	skipnz
  5043     05B1  2D92               	goto	l1873
  5044     05B2  2D9E               	goto	l1875
  5045     05B3  2DA0               	goto	l5444
  5046     05B4                     l5446:
  5047                           
  5048                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  5049     05B4  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5050     05B5  00B5               	movwf	read_prec_or_width@ap^(0+128)
  5051     05B6  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5052     05B7  3193  2330  3185   	fcall	_read_prec_or_width
  5053     05BA  0836               	movf	(?_read_prec_or_width+1)^(0+128),w
  5054     05BB  0022               	movlb	2	; select bank2
  5055     05BC  00AD               	movwf	(_width+1)^(0+256)
  5056     05BD  0021               	movlb	1	; select bank1
  5057     05BE  0835               	movf	?_read_prec_or_width^(0+128),w
  5058     05BF  0022               	movlb	2	; select bank2
  5059     05C0  00AC               	movwf	_width^(0+256)
  5060                           
  5061                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  5062     05C1  1FAD               	btfss	(_width+1)^(0+256),7
  5063     05C2  2DC9               	goto	l5454
  5064                           
  5065                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  5066     05C3  1434               	bsf	_flags^(0+256),0
  5067                           
  5068                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  5069     05C4  09AC               	comf	_width^(0+256),f
  5070     05C5  09AD               	comf	(_width+1)^(0+256),f
  5071     05C6  0AAC               	incf	_width^(0+256),f
  5072     05C7  1903               	skipnz
  5073     05C8  0AAD               	incf	(_width+1)^(0+256),f
  5074     05C9                     l5454:
  5075                           
  5076                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1273:         if 
      +                          ((*fmt)[0] == 'c') {
  5077     05C9  0021               	movlb	1	; select bank1
  5078     05CA  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5079     05CB  0086               	movwf	6
  5080     05CC  0187               	clrf	7
  5081     05CD  3F40               	moviw [0]fsr1
  5082     05CE  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5083     05CF  3F41               	moviw [1]fsr1
  5084     05D0  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5085     05D1  084A               	movf	??_vfpfcnvrt^(0+128),w
  5086     05D2  0084               	movwf	4
  5087     05D3  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5088     05D4  0085               	movwf	5
  5089     05D5  0012               	moviw fsr0++
  5090     05D6  3A63               	xorlw	99
  5091     05D7  1D03               	btfss	3,2
  5092     05D8  2DF6               	goto	l5464
  5093                           
  5094                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1274:            
      +                           ++*fmt;
  5095     05D9  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5096     05DA  0086               	movwf	6
  5097     05DB  0187               	clrf	7
  5098     05DC  3001               	movlw	1
  5099     05DD  0781               	addwf	1,f
  5100     05DE  3141               	addfsr 1,1
  5101     05DF  1803               	skipnc
  5102     05E0  0A81               	incf	1,f
  5103                           
  5104                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1275:            
      +                           c = (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  5105     05E1  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5106     05E2  0086               	movwf	6
  5107     05E3  3001               	movlw	1	; select bank2/3
  5108     05E4  0087               	movwf	7
  5109     05E5  0801               	movf	1,w
  5110     05E6  0084               	movwf	4
  5111     05E7  0185               	clrf	5
  5112     05E8  3002               	movlw	2
  5113     05E9  0781               	addwf	1,f
  5114     05EA  0800               	movf	0,w
  5115     05EB  00D2               	movwf	vfpfcnvrt@c^(0+128)
  5116                           
  5117                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1284:            
      +                           return (int) ctoa(fp, c);
  5118     05EC  0852               	movf	vfpfcnvrt@c^(0+128),w
  5119     05ED  00B0               	movwf	ctoa@c^(0+128)
  5120     05EE  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5121     05EF  3193  238B         	fcall	_ctoa
  5122     05F1  0831               	movf	(?_ctoa+1)^(0+128),w
  5123     05F2  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5124     05F3  0830               	movf	?_ctoa^(0+128),w
  5125     05F4  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5126     05F5  0008               	return
  5127     05F6                     l5464:
  5128                           
  5129                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1439:   if (0
  5130     05F6  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5131     05F7  0086               	movwf	6
  5132     05F8  0187               	clrf	7
  5133     05F9  3F40               	moviw [0]fsr1
  5134     05FA  00D4               	movwf	vfpfcnvrt@cp^(0+128)
  5135     05FB  3F41               	moviw [1]fsr1
  5136     05FC  00D5               	movwf	(vfpfcnvrt@cp+1)^(0+128)
  5137     05FD  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5138     05FE  0084               	movwf	4
  5139     05FF  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5140     0600  0085               	movwf	5
  5141     0601  0012               	moviw fsr0++
  5142     0602  3A58               	xorlw	88
  5143     0603  1D03               	btfss	3,2
  5144     0604  2E35               	goto	l5480
  5145                           
  5146                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  5147     0605  0849               	movf	vfpfcnvrt@ap^(0+128),w
  5148     0606  0086               	movwf	6
  5149     0607  3001               	movlw	1	; select bank2/3
  5150     0608  0087               	movwf	7
  5151     0609  0801               	movf	1,w
  5152     060A  0084               	movwf	4
  5153     060B  0185               	clrf	5
  5154     060C  3002               	movlw	2
  5155     060D  0781               	addwf	1,f
  5156     060E  3F00               	moviw [0]fsr0
  5157     060F  00CE               	movwf	vfpfcnvrt@convarg^(0+128)
  5158     0610  3F01               	moviw [1]fsr0
  5159     0611  00CF               	movwf	(vfpfcnvrt@convarg+1)^(0+128)
  5160                           
  5161                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  5162     0612  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5163     0613  3E01               	addlw	1
  5164     0614  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5165     0615  3000               	movlw	0
  5166     0616  3D55               	addwfc	(vfpfcnvrt@cp+1)^(0+128),w
  5167     0617  00CB               	movwf	(??_vfpfcnvrt+1)^(0+128)
  5168     0618  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5169     0619  0086               	movwf	6
  5170     061A  0187               	clrf	7
  5171     061B  084A               	movf	??_vfpfcnvrt^(0+128),w
  5172     061C  3FC0               	movwi [0]fsr1
  5173     061D  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5174     061E  3FC1               	movwi [1]fsr1
  5175                           
  5176                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  5177     061F  2E2C               	goto	l5478
  5178     0620                     l5472:
  5179                           
  5180                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1586:      return
      +                           (int) xtoa(fp,convarg.uint);
  5181     0620  084F               	movf	(vfpfcnvrt@convarg+1)^(0+128),w
  5182     0621  00BF               	movwf	(xtoa@d+1)^(0+128)
  5183     0622  084E               	movf	vfpfcnvrt@convarg^(0+128),w
  5184     0623  00BE               	movwf	xtoa@d^(0+128)
  5185     0624  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5186     0625  3197  2723         	fcall	_xtoa
  5187     0627  083F               	movf	(?_xtoa+1)^(0+128),w
  5188     0628  00C9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  5189     0629  083E               	movf	?_xtoa^(0+128),w
  5190     062A  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5191     062B  0008               	return
  5192     062C                     l5478:
  5193     062C  0854               	movf	vfpfcnvrt@cp^(0+128),w
  5194     062D  0084               	movwf	4
  5195     062E  0855               	movf	(vfpfcnvrt@cp+1)^(0+128),w
  5196     062F  0085               	movwf	5
  5197     0630  0800               	movf	0,w	;code access
  5198                           
  5199                           ; Switch size 1, requested type "simple"
  5200                           ; Number of cases is 1, Range of values is 88 to 88
  5201                           ; switch strategies available:
  5202                           ; Name         Instructions Cycles
  5203                           ; simple_byte            4     3 (average)
  5204                           ; direct_byte           11     9 (fixed)
  5205                           ; jumptable            263     9 (fixed)
  5206                           ;	Chosen strategy is simple_byte
  5207     0631  3A58               	xorlw	88	; case 88
  5208     0632  1903               	skipnz
  5209     0633  2E20               	goto	l5472
  5210     0634  2E35               	goto	l5480
  5211     0635                     l5480:
  5212                           
  5213                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  5214     0635  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5215     0636  0086               	movwf	6
  5216     0637  0187               	clrf	7
  5217     0638  3001               	movlw	1
  5218     0639  0781               	addwf	1,f
  5219     063A  3141               	addfsr 1,1
  5220     063B  1803               	skipnc
  5221     063C  0A81               	incf	1,f
  5222                           
  5223                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1807:         ret
      +                          urn (int) 0;
  5224     063D  01C8               	clrf	?_vfpfcnvrt^(0+128)
  5225     063E  01C9               	clrf	(?_vfpfcnvrt+1)^(0+128)
  5226     063F  0008               	return
  5227     0640                     l5486:
  5228                           
  5229                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  5230     0640  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5231     0641  0086               	movwf	6
  5232     0642  0187               	clrf	7
  5233     0643  3F40               	moviw [0]fsr1
  5234     0644  00CA               	movwf	??_vfpfcnvrt^(0+128)
  5235     0645  3F41               	moviw [1]fsr1
  5236     0646  00CB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  5237     0647  084A               	movf	??_vfpfcnvrt^(0+128),w
  5238     0648  0084               	movwf	4
  5239     0649  084B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  5240     064A  0085               	movwf	5
  5241     064B  0800               	movf	0,w	;code access
  5242     064C  00CC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  5243     064D  01CD               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  5244     064E  084C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  5245     064F  00A8               	movwf	fputc@c^(0+128)
  5246     0650  084D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  5247     0651  00A9               	movwf	(fputc@c+1)^(0+128)
  5248     0652  0856               	movf	vfpfcnvrt@fp^(0+128),w
  5249     0653  00AA               	movwf	fputc@fp^(0+128)
  5250     0654  3192  228D         	fcall	_fputc
  5251                           
  5252                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1812:     ++*fmt;
  5253     0656  0021               	movlb	1	; select bank1
  5254     0657  0848               	movf	vfpfcnvrt@fmt^(0+128),w
  5255     0658  0086               	movwf	6
  5256     0659  0187               	clrf	7
  5257     065A  3001               	movlw	1
  5258     065B  0781               	addwf	1,f
  5259     065C  3141               	addfsr 1,1
  5260     065D  1803               	skipnc
  5261     065E  0A81               	incf	1,f
  5262                           
  5263                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1813:     return 
      +                          (int) 1;
  5264     065F  3001               	movlw	1
  5265     0660  00C8               	movwf	?_vfpfcnvrt^(0+128)
  5266     0661  3000               	movlw	0
  5267     0662  00C9               	movwf	(?_vfpfcnvrt^(0+128)+1)
  5268     0663  0008               	return
  5269     0664                     __end_of_vfpfcnvrt:
  5270                           
  5271                           	psect	text4
  5272     1723                     __ptext4:	
  5273 ;; *************** function _xtoa *****************
  5274 ;; Defined at:
  5275 ;;		line 1055 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  fp              1    wreg     PTR struct _IO_FILE
  5278 ;;		 -> snprintf@f(11), 
  5279 ;;  d               2   22[BANK1 ] unsigned int 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  fp              1   25[BANK1 ] PTR struct _IO_FILE
  5282 ;;		 -> snprintf@f(11), 
  5283 ;;  i               2   30[BANK1 ] int 
  5284 ;;  w               2   27[BANK1 ] int 
  5285 ;;  c               1   29[BANK1 ] unsigned char 
  5286 ;;  p               1   26[BANK1 ] _Bool 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  2   22[BANK1 ] int 
  5289 ;; Registers used:
  5290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 1F/1
  5293 ;;		On exit  : 1F/1
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5296 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5298 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5299 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0
  5300 ;;Total ram usage:       10 bytes
  5301 ;; Hardware stack levels used: 1
  5302 ;; Hardware stack levels required when called: 14
  5303 ;; This function calls:
  5304 ;;		_pad
  5305 ;; This function is called by:
  5306 ;;		_vfpfcnvrt
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310     1723                     _xtoa:	
  5311                           ;psect for function _xtoa
  5312                           
  5313                           
  5314                           ;incstack = 0
  5315 ;; hardware stack exceeded
  5316                           ; Regs used in _xtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5317                           ;xtoa@fp stored from wreg
  5318     1723  00C1               	movwf	xtoa@fp^(0+128)
  5319                           
  5320                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1055: static int 
      +                          xtoa(FILE *fp, vfpf_uint_t d);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\commo
      +                          n\doprnt.c: 1058: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 1059:  char c;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1
      +                          063:     int i, w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c:
      +                           1067:  _Bool p = 1;
  5321     1724  01C2               	clrf	xtoa@p^(0+128)
  5322     1725  0AC2               	incf	xtoa@p^(0+128),f
  5323                           
  5324                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1082:     w = wid
      +                          th;
  5325     1726  0022               	movlb	2	; select bank2
  5326     1727  082D               	movf	(_width+1)^(0+256),w
  5327     1728  0021               	movlb	1	; select bank1
  5328     1729  00C4               	movwf	(xtoa@w+1)^(0+128)
  5329     172A  0022               	movlb	2	; select bank2
  5330     172B  082C               	movf	_width^(0+256),w
  5331     172C  0021               	movlb	1	; select bank1
  5332     172D  00C3               	movwf	xtoa@w^(0+128)
  5333                           
  5334                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1095:     i = siz
      +                          eof(dbuf) - 1;
  5335     172E  301F               	movlw	31
  5336     172F  00C6               	movwf	xtoa@i^(0+128)
  5337     1730  3000               	movlw	0
  5338     1731  00C7               	movwf	(xtoa@i^(0+128)+1)
  5339                           
  5340                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1096:     dbuf[i]
      +                           = '\0';
  5341     1732  0024               	movlb	4	; select bank4
  5342     1733  01D1               	clrf	(_dbuf^(0+512)+31)
  5343                           
  5344                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5345     1734  2F5C               	goto	l5100
  5346     1735                     l5082:
  5347                           
  5348                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1106:     )) {;C:
      +                          \Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1107:         --i;
  5349     1735  30FF               	movlw	255
  5350     1736  0021               	movlb	1	; select bank1
  5351     1737  07C6               	addwf	xtoa@i^(0+128),f
  5352     1738  30FF               	movlw	255
  5353     1739  3DC7               	addwfc	(xtoa@i+1)^(0+128),f
  5354                           
  5355                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1108:         c =
      +                           d & 0x0f;
  5356     173A  083E               	movf	xtoa@d^(0+128),w
  5357     173B  390F               	andlw	15
  5358     173C  00C5               	movwf	xtoa@c^(0+128)
  5359                           
  5360                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1109:   if (c < 1
      +                          0) {
  5361     173D  300A               	movlw	10
  5362     173E  0245               	subwf	xtoa@c^(0+128),w
  5363     173F  1803               	skipnc
  5364     1740  2F43               	goto	l5090
  5365                           
  5366                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1110:    c += '0'
      +                          ;
  5367     1741  3030               	movlw	48
  5368     1742  2F44               	goto	L2
  5369     1743                     l5090:	
  5370                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1111:   }
  5371                           
  5372                           
  5373                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1118:    c += 'A'
      +                           - 10;
  5374     1743  3037               	movlw	55
  5375     1744                     L2:
  5376     1744  00C0               	movwf	??_xtoa^(0+128)
  5377     1745  0840               	movf	??_xtoa^(0+128),w
  5378     1746  07C5               	addwf	xtoa@c^(0+128),f
  5379                           
  5380                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1121:   dbuf[i] =
      +                           c;
  5381     1747  0846               	movf	xtoa@i^(0+128),w
  5382     1748  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5383     1749  0086               	movwf	6
  5384     174A  3002               	movlw	2	; select bank4/5
  5385     174B  0087               	movwf	7
  5386     174C  0845               	movf	xtoa@c^(0+128),w
  5387     174D  0081               	movwf	1
  5388                           
  5389                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1125:   p = 0;
  5390     174E  01C2               	clrf	xtoa@p^(0+128)
  5391                           
  5392                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1127:         --w
      +                          ;
  5393     174F  30FF               	movlw	255
  5394     1750  07C3               	addwf	xtoa@w^(0+128),f
  5395     1751  30FF               	movlw	255
  5396     1752  3DC4               	addwfc	(xtoa@w+1)^(0+128),f
  5397                           
  5398                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1128:         d =
      +                           d >> 4;
  5399     1753  0E3E               	swapf	xtoa@d^(0+128),w
  5400     1754  390F               	andlw	15
  5401     1755  00BE               	movwf	xtoa@d^(0+128)
  5402     1756  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5403     1757  39F0               	andlw	240
  5404     1758  04BE               	iorwf	xtoa@d^(0+128),f
  5405     1759  0E3F               	swapf	(xtoa@d+1)^(0+128),w
  5406     175A  390F               	andlw	15
  5407     175B  00BF               	movwf	(xtoa@d^(0+128)+1)
  5408     175C                     l5100:
  5409                           
  5410                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1097:     while (
      +                          !(i < 2) && (d != 0
  5411     175C  0021               	movlb	1	; select bank1
  5412     175D  0847               	movf	(xtoa@i+1)^(0+128),w
  5413     175E  3A80               	xorlw	128
  5414     175F  00C0               	movwf	??_xtoa^(0+128)
  5415     1760  3080               	movlw	128
  5416     1761  0240               	subwf	??_xtoa^(0+128),w
  5417     1762  1D03               	skipz
  5418     1763  2F66               	goto	u4405
  5419     1764  3002               	movlw	2
  5420     1765  0246               	subwf	xtoa@i^(0+128),w
  5421     1766                     u4405:
  5422     1766  1C03               	skipc
  5423     1767  2F7E               	goto	l5110
  5424     1768  0021               	movlb	1	; select bank1
  5425     1769  083E               	movf	xtoa@d^(0+128),w
  5426     176A  043F               	iorwf	(xtoa@d+1)^(0+128),w
  5427     176B  1D03               	btfss	3,2
  5428     176C  2F35               	goto	l5082
  5429     176D  0842               	movf	xtoa@p^(0+128),w
  5430     176E  1D03               	btfss	3,2
  5431     176F  2F35               	goto	l5082
  5432     1770  0844               	movf	(xtoa@w+1)^(0+128),w
  5433     1771  3A80               	xorlw	128
  5434     1772  00C0               	movwf	??_xtoa^(0+128)
  5435     1773  3080               	movlw	128
  5436     1774  0240               	subwf	??_xtoa^(0+128),w
  5437     1775  1D03               	skipz
  5438     1776  2F79               	goto	u4435
  5439     1777  3001               	movlw	1
  5440     1778  0243               	subwf	xtoa@w^(0+128),w
  5441     1779                     u4435:
  5442     1779  1C03               	skipc
  5443     177A  2F7E               	goto	l5110
  5444     177B  0022               	movlb	2	; select bank2
  5445     177C  18B4               	btfsc	_flags^(0+256),1
  5446     177D  2F35               	goto	l5082
  5447     177E                     l5110:
  5448                           
  5449                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1152:     return 
      +                          (int) pad(fp, &dbuf[i], w);
  5450     177E  0021               	movlb	1	; select bank1
  5451     177F  0846               	movf	xtoa@i^(0+128),w
  5452     1780  3E32               	addlw	(low (_dbuf| (0+512)))& (0+255)
  5453     1781  00B7               	movwf	pad@buf^(0+128)
  5454     1782  0844               	movf	(xtoa@w+1)^(0+128),w
  5455     1783  00B9               	movwf	(pad@p+1)^(0+128)
  5456     1784  0843               	movf	xtoa@w^(0+128),w
  5457     1785  00B8               	movwf	pad@p^(0+128)
  5458     1786  0841               	movf	xtoa@fp^(0+128),w
  5459     1787  3191  212D         	fcall	_pad
  5460     1789  0838               	movf	(?_pad+1)^(0+128),w
  5461     178A  00BF               	movwf	(?_xtoa+1)^(0+128)
  5462     178B  0837               	movf	?_pad^(0+128),w
  5463     178C  00BE               	movwf	?_xtoa^(0+128)
  5464     178D  0008               	return
  5465     178E                     __end_of_xtoa:
  5466                           
  5467                           	psect	text5
  5468     112D                     __ptext5:	
  5469 ;; *************** function _pad *****************
  5470 ;; Defined at:
  5471 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5472 ;; Parameters:    Size  Location     Type
  5473 ;;  fp              1    wreg     PTR struct _IO_FILE
  5474 ;;		 -> snprintf@f(11), 
  5475 ;;  buf             1   15[BANK1 ] PTR unsigned char 
  5476 ;;		 -> dbuf(32), 
  5477 ;;  p               2   16[BANK1 ] int 
  5478 ;; Auto vars:     Size  Location     Type
  5479 ;;  fp              1   21[BANK1 ] PTR struct _IO_FILE
  5480 ;;		 -> snprintf@f(11), 
  5481 ;;  i               2   19[BANK1 ] int 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  2   15[BANK1 ] int 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 1F/1
  5488 ;;		On exit  : 1F/1
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5491 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5493 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5494 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5495 ;;Total ram usage:        7 bytes
  5496 ;; Hardware stack levels used: 1
  5497 ;; Hardware stack levels required when called: 13
  5498 ;; This function calls:
  5499 ;;		_fputc
  5500 ;;		_fputs
  5501 ;;		_strlen
  5502 ;; This function is called by:
  5503 ;;		_xtoa
  5504 ;; This function uses a non-reentrant model
  5505 ;;
  5506                           
  5507     112D                     _pad:	
  5508                           ;psect for function _pad
  5509                           
  5510                           
  5511                           ;incstack = 0
  5512 ;; hardware stack exceeded
  5513                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5514                           ;pad@fp stored from wreg
  5515     112D  00BD               	movwf	pad@fp^(0+128)
  5516                           
  5517                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 193: static int p
      +                          ad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c
      +                          : 195:     int i;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 
      +                          199:     if (flags & (1 << 0)) {
  5518     112E  0022               	movlb	2	; select bank2
  5519     112F  1C34               	btfss	_flags^(0+256),0
  5520     1130  2938               	goto	l4748
  5521                           
  5522                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  5523     1131  0021               	movlb	1	; select bank1
  5524     1132  083D               	movf	pad@fp^(0+128),w
  5525     1133  00B0               	movwf	fputs@fp^(0+128)
  5526     1134  0837               	movf	pad@buf^(0+128),w
  5527     1135  319E  2612  3191   	fcall	_fputs
  5528     1138                     l4748:
  5529                           
  5530                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  5531     1138  0021               	movlb	1	; select bank1
  5532     1139  1FB9               	btfss	(pad@p+1)^(0+128),7
  5533     113A  293D               	goto	l1825
  5534                           
  5535                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  5536     113B  01B8               	clrf	pad@p^(0+128)
  5537     113C  01B9               	clrf	(pad@p+1)^(0+128)
  5538     113D                     l1825:	
  5539                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 207:  }
  5540                           
  5541                           
  5542                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  5543     113D  01BB               	clrf	pad@i^(0+128)
  5544     113E  01BC               	clrf	(pad@i+1)^(0+128)
  5545     113F                     l4756:	
  5546                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5547                           
  5548                           
  5549                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  5550     113F  083C               	movf	(pad@i+1)^(0+128),w
  5551     1140  3A80               	xorlw	128
  5552     1141  00BA               	movwf	??_pad^(0+128)
  5553     1142  0839               	movf	(pad@p+1)^(0+128),w
  5554     1143  3A80               	xorlw	128
  5555     1144  023A               	subwf	??_pad^(0+128),w
  5556     1145  1D03               	skipz
  5557     1146  2949               	goto	u3855
  5558     1147  0838               	movf	pad@p^(0+128),w
  5559     1148  023B               	subwf	pad@i^(0+128),w
  5560     1149                     u3855:
  5561     1149  1803               	btfsc	3,0
  5562     114A  295B               	goto	l1828
  5563                           
  5564                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  5565     114B  3020               	movlw	32
  5566     114C  0021               	movlb	1	; select bank1
  5567     114D  00A8               	movwf	fputc@c^(0+128)
  5568     114E  3000               	movlw	0
  5569     114F  00A9               	movwf	(fputc@c^(0+128)+1)
  5570     1150  083D               	movf	pad@fp^(0+128),w
  5571     1151  00AA               	movwf	fputc@fp^(0+128)
  5572     1152  3192  228D  3191   	fcall	_fputc
  5573                           
  5574                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 211:         ++i;
  5575     1155  3001               	movlw	1
  5576     1156  0021               	movlb	1	; select bank1
  5577     1157  07BB               	addwf	pad@i^(0+128),f
  5578     1158  3000               	movlw	0
  5579     1159  3DBC               	addwfc	(pad@i+1)^(0+128),f
  5580     115A  293F               	goto	l4756
  5581     115B                     l1828:
  5582                           
  5583                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  5584     115B  0022               	movlb	2	; select bank2
  5585     115C  1834               	btfsc	_flags^(0+256),0
  5586     115D  2965               	goto	l4760
  5587                           
  5588                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  5589     115E  0021               	movlb	1	; select bank1
  5590     115F  083D               	movf	pad@fp^(0+128),w
  5591     1160  00B0               	movwf	fputs@fp^(0+128)
  5592     1161  0837               	movf	pad@buf^(0+128),w
  5593     1162  319E  2612  3191   	fcall	_fputs
  5594     1165                     l4760:
  5595                           
  5596                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 224:     return (
      +                          int)(strlen(buf) + (size_t)p);
  5597     1165  0021               	movlb	1	; select bank1
  5598     1166  0837               	movf	pad@buf^(0+128),w
  5599     1167  319C  242E         	fcall	_strlen
  5600     1169  0838               	movf	pad@p^(0+128),w
  5601     116A  0728               	addwf	?_strlen^(0+128),w
  5602     116B  00B7               	movwf	?_pad^(0+128)
  5603     116C  0839               	movf	(pad@p+1)^(0+128),w
  5604     116D  3D29               	addwfc	(?_strlen+1)^(0+128),w
  5605     116E  00B8               	movwf	(?_pad+1)^(0+128)
  5606     116F  0008               	return
  5607     1170                     __end_of_pad:
  5608                           
  5609                           	psect	text6
  5610     1C2E                     __ptext6:	
  5611 ;; *************** function _strlen *****************
  5612 ;; Defined at:
  5613 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\strlen.c"
  5614 ;; Parameters:    Size  Location     Type
  5615 ;;  s               1    wreg     PTR const unsigned char 
  5616 ;;		 -> dbuf(32), 
  5617 ;; Auto vars:     Size  Location     Type
  5618 ;;  s               1    4[BANK1 ] PTR const unsigned char 
  5619 ;;		 -> dbuf(32), 
  5620 ;;  a               1    3[BANK1 ] PTR const unsigned char 
  5621 ;;		 -> dbuf(32), 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  2    0[BANK1 ] unsigned int 
  5624 ;; Registers used:
  5625 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5626 ;; Tracked objects:
  5627 ;;		On entry : 1F/1
  5628 ;;		On exit  : 1F/1
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        5 bytes
  5636 ;; Hardware stack levels used: 1
  5637 ;; Hardware stack levels required when called: 10
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_pad
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645     1C2E                     _strlen:	
  5646                           ;psect for function _strlen
  5647                           
  5648                           
  5649                           ;incstack = 0
  5650                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  5651                           ;strlen@s stored from wreg
  5652     1C2E  00AC               	movwf	strlen@s^(0+128)
  5653     1C2F  082C               	movf	strlen@s^(0+128),w
  5654     1C30  00AB               	movwf	strlen@a^(0+128)
  5655     1C31                     l4448:
  5656     1C31  082C               	movf	strlen@s^(0+128),w
  5657     1C32  0086               	movwf	6
  5658     1C33  3002               	movlw	2	; select bank4/5
  5659     1C34  0087               	movwf	7
  5660     1C35  0801               	movf	1,w
  5661     1C36  1903               	btfsc	3,2
  5662     1C37  2C3D               	goto	l4450
  5663     1C38  3001               	movlw	1
  5664     1C39  00AA               	movwf	??_strlen^(0+128)
  5665     1C3A  082A               	movf	??_strlen^(0+128),w
  5666     1C3B  07AC               	addwf	strlen@s^(0+128),f
  5667     1C3C  2C31               	goto	l4448
  5668     1C3D                     l4450:
  5669     1C3D  082B               	movf	strlen@a^(0+128),w
  5670     1C3E  022C               	subwf	strlen@s^(0+128),w
  5671     1C3F  00A8               	movwf	?_strlen^(0+128)
  5672     1C40  01A9               	clrf	(?_strlen+1)^(0+128)
  5673     1C41  1BA8               	btfsc	?_strlen^(0+128),7
  5674     1C42  03A9               	decf	(?_strlen+1)^(0+128),f
  5675     1C43  0008               	return
  5676     1C44                     __end_of_strlen:
  5677                           
  5678                           	psect	text7
  5679     1E12                     __ptext7:	
  5680 ;; *************** function _fputs *****************
  5681 ;; Defined at:
  5682 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputs.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  s               1    wreg     PTR const unsigned char 
  5685 ;;		 -> dbuf(32), 
  5686 ;;  fp              1    8[BANK1 ] PTR struct _IO_FILE
  5687 ;;		 -> snprintf@f(11), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  s               1   14[BANK1 ] PTR const unsigned char 
  5690 ;;		 -> dbuf(32), 
  5691 ;;  i               2   12[BANK1 ] int 
  5692 ;;  c               1   11[BANK1 ] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  2    8[BANK1 ] int 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 1F/1
  5699 ;;		On exit  : 1F/1
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5702 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5703 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;Total ram usage:        7 bytes
  5707 ;; Hardware stack levels used: 1
  5708 ;; Hardware stack levels required when called: 12
  5709 ;; This function calls:
  5710 ;;		_fputc
  5711 ;; This function is called by:
  5712 ;;		_pad
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716     1E12                     _fputs:	
  5717                           ;psect for function _fputs
  5718                           
  5719                           
  5720                           ;incstack = 0
  5721 ;; hardware stack exceeded
  5722                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5723                           ;fputs@s stored from wreg
  5724     1E12  00B6               	movwf	fputs@s^(0+128)
  5725     1E13  01B4               	clrf	fputs@i^(0+128)
  5726     1E14  01B5               	clrf	(fputs@i+1)^(0+128)
  5727     1E15                     l4442:
  5728     1E15  0834               	movf	fputs@i^(0+128),w
  5729     1E16  0736               	addwf	fputs@s^(0+128),w
  5730     1E17  00B1               	movwf	??_fputs^(0+128)
  5731     1E18  0831               	movf	??_fputs^(0+128),w
  5732     1E19  0086               	movwf	6
  5733     1E1A  3002               	movlw	2	; select bank4/5
  5734     1E1B  0087               	movwf	7
  5735     1E1C  0801               	movf	1,w
  5736     1E1D  00B3               	movwf	fputs@c^(0+128)
  5737     1E1E  0833               	movf	fputs@c^(0+128),w
  5738     1E1F  1903               	btfsc	3,2
  5739     1E20  0008               	return
  5740     1E21  0833               	movf	fputs@c^(0+128),w
  5741     1E22  00B1               	movwf	??_fputs^(0+128)
  5742     1E23  01B2               	clrf	(??_fputs^(0+128)+1)
  5743     1E24  0831               	movf	??_fputs^(0+128),w
  5744     1E25  00A8               	movwf	fputc@c^(0+128)
  5745     1E26  0832               	movf	(??_fputs+1)^(0+128),w
  5746     1E27  00A9               	movwf	(fputc@c+1)^(0+128)
  5747     1E28  0830               	movf	fputs@fp^(0+128),w
  5748     1E29  00AA               	movwf	fputc@fp^(0+128)
  5749     1E2A  3192  228D  319E   	fcall	_fputc
  5750     1E2D  3001               	movlw	1
  5751     1E2E  0021               	movlb	1	; select bank1
  5752     1E2F  07B4               	addwf	fputs@i^(0+128),f
  5753     1E30  3000               	movlw	0
  5754     1E31  3DB5               	addwfc	(fputs@i+1)^(0+128),f
  5755     1E32  2E15               	goto	l4442
  5756     1E33                     __end_of_fputs:
  5757                           
  5758                           	psect	text8
  5759     1330                     __ptext8:	
  5760 ;; *************** function _read_prec_or_width *****************
  5761 ;; Defined at:
  5762 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  fmt             1    wreg     PTR PTR const unsigned c
  5765 ;;		 -> vfprintf@cfmt(2), 
  5766 ;;  ap              1   13[BANK1 ] PTR PTR void [1]
  5767 ;;		 -> snprintf@ap(1), 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  fmt             1   21[BANK1 ] PTR PTR const unsigned c
  5770 ;;		 -> vfprintf@cfmt(2), 
  5771 ;;  c               1   18[BANK1 ] unsigned char 
  5772 ;;  n               2   19[BANK1 ] int 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  2   13[BANK1 ] int 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 1F/1
  5779 ;;		On exit  : 1F/1
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5782 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5784 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5785 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5786 ;;Total ram usage:        9 bytes
  5787 ;; Hardware stack levels used: 1
  5788 ;; Hardware stack levels required when called: 11
  5789 ;; This function calls:
  5790 ;;		___wmul
  5791 ;; This function is called by:
  5792 ;;		_vfpfcnvrt
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796     1330                     _read_prec_or_width:	
  5797                           ;psect for function _read_prec_or_width
  5798                           
  5799                           
  5800                           ;incstack = 0
  5801                           ; Regs used in _read_prec_or_width: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5802                           ;read_prec_or_width@fmt stored from wreg
  5803     1330  00BD               	movwf	read_prec_or_width@fmt^(0+128)
  5804                           
  5805                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  5806     1331  01BB               	clrf	read_prec_or_width@n^(0+128)
  5807     1332  01BC               	clrf	(read_prec_or_width@n+1)^(0+128)
  5808                           
  5809                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  5810     1333  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5811     1334  0086               	movwf	6
  5812     1335  0187               	clrf	7
  5813     1336  3F40               	moviw [0]fsr1
  5814     1337  00B7               	movwf	??_read_prec_or_width^(0+128)
  5815     1338  3F41               	moviw [1]fsr1
  5816     1339  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5817     133A  0837               	movf	??_read_prec_or_width^(0+128),w
  5818     133B  0084               	movwf	4
  5819     133C  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5820     133D  0085               	movwf	5
  5821     133E  0012               	moviw fsr0++
  5822     133F  3A2A               	xorlw	42
  5823     1340  1D03               	btfss	3,2
  5824     1341  2B74               	goto	l5126
  5825                           
  5826                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  5827     1342  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5828     1343  0086               	movwf	6
  5829     1344  0187               	clrf	7
  5830     1345  3001               	movlw	1
  5831     1346  0781               	addwf	1,f
  5832     1347  3141               	addfsr 1,1
  5833     1348  1803               	skipnc
  5834     1349  0A81               	incf	1,f
  5835                           
  5836                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  5837     134A  0835               	movf	read_prec_or_width@ap^(0+128),w
  5838     134B  0086               	movwf	6
  5839     134C  3001               	movlw	1	; select bank2/3
  5840     134D  0087               	movwf	7
  5841     134E  0801               	movf	1,w
  5842     134F  0084               	movwf	4
  5843     1350  0185               	clrf	5
  5844     1351  3002               	movlw	2
  5845     1352  0781               	addwf	1,f
  5846     1353  3F00               	moviw [0]fsr0
  5847     1354  00BB               	movwf	read_prec_or_width@n^(0+128)
  5848     1355  3F01               	moviw [1]fsr0
  5849     1356  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5850                           
  5851                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  5852     1357  2B86               	goto	l5128
  5853     1358                     l5122:
  5854                           
  5855                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  5856     1358  083A               	movf	read_prec_or_width@c^(0+128),w
  5857     1359  00B7               	movwf	??_read_prec_or_width^(0+128)
  5858     135A  01B8               	clrf	(??_read_prec_or_width^(0+128)+1)
  5859     135B  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5860     135C  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  5861     135D  083B               	movf	read_prec_or_width@n^(0+128),w
  5862     135E  00AF               	movwf	___wmul@multiplier^(0+128)
  5863     135F  300A               	movlw	10
  5864     1360  00B1               	movwf	___wmul@multiplicand^(0+128)
  5865     1361  3000               	movlw	0
  5866     1362  00B2               	movwf	(___wmul@multiplicand^(0+128)+1)
  5867     1363  319D  2509  3193   	fcall	___wmul
  5868     1366  0837               	movf	??_read_prec_or_width^(0+128),w
  5869     1367  072F               	addwf	?___wmul^(0+128),w
  5870     1368  00BB               	movwf	read_prec_or_width@n^(0+128)
  5871     1369  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5872     136A  3D30               	addwfc	(?___wmul+1)^(0+128),w
  5873     136B  00BC               	movwf	(read_prec_or_width@n+1)^(0+128)
  5874                           
  5875                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  5876     136C  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5877     136D  0086               	movwf	6
  5878     136E  0187               	clrf	7
  5879     136F  3001               	movlw	1
  5880     1370  0781               	addwf	1,f
  5881     1371  3141               	addfsr 1,1
  5882     1372  1803               	skipnc
  5883     1373  0A81               	incf	1,f
  5884     1374                     l5126:
  5885                           
  5886                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  5887     1374  083D               	movf	read_prec_or_width@fmt^(0+128),w
  5888     1375  0086               	movwf	6
  5889     1376  0187               	clrf	7
  5890     1377  3F40               	moviw [0]fsr1
  5891     1378  00B7               	movwf	??_read_prec_or_width^(0+128)
  5892     1379  3F41               	moviw [1]fsr1
  5893     137A  00B8               	movwf	(??_read_prec_or_width^(0+128)+1)
  5894     137B  0837               	movf	??_read_prec_or_width^(0+128),w
  5895     137C  0084               	movwf	4
  5896     137D  0838               	movf	(??_read_prec_or_width+1)^(0+128),w
  5897     137E  0085               	movwf	5
  5898     137F  0800               	movf	0,w	;code access
  5899     1380  3ED0               	addlw	208
  5900     1381  00BA               	movwf	read_prec_or_width@c^(0+128)
  5901     1382  300A               	movlw	10
  5902     1383  023A               	subwf	read_prec_or_width@c^(0+128),w
  5903     1384  1C03               	skipc
  5904     1385  2B58               	goto	l5122
  5905     1386                     l5128:
  5906                           
  5907                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  5908     1386  083C               	movf	(read_prec_or_width@n+1)^(0+128),w
  5909     1387  00B6               	movwf	(?_read_prec_or_width+1)^(0+128)
  5910     1388  083B               	movf	read_prec_or_width@n^(0+128),w
  5911     1389  00B5               	movwf	?_read_prec_or_width^(0+128)
  5912     138A  0008               	return
  5913     138B                     __end_of_read_prec_or_width:
  5914                           
  5915                           	psect	text9
  5916     138B                     __ptext9:	
  5917 ;; *************** function _ctoa *****************
  5918 ;; Defined at:
  5919 ;;		line 476 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  fp              1    wreg     PTR struct _IO_FILE
  5922 ;;		 -> snprintf@f(11), 
  5923 ;;  c               1    8[BANK1 ] unsigned char 
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;  fp              1   16[BANK1 ] PTR struct _IO_FILE
  5926 ;;		 -> snprintf@f(11), 
  5927 ;;  w               2   14[BANK1 ] int 
  5928 ;;  l               2   12[BANK1 ] int 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  2    8[BANK1 ] int 
  5931 ;; Registers used:
  5932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 1F/1
  5935 ;;		On exit  : 1F/1
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5938 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;Total ram usage:        9 bytes
  5943 ;; Hardware stack levels used: 1
  5944 ;; Hardware stack levels required when called: 12
  5945 ;; This function calls:
  5946 ;;		_fputc
  5947 ;; This function is called by:
  5948 ;;		_vfpfcnvrt
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952     138B                     _ctoa:	
  5953                           ;psect for function _ctoa
  5954                           
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _ctoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5958                           ;ctoa@fp stored from wreg
  5959     138B  00B8               	movwf	ctoa@fp^(0+128)
  5960                           
  5961                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 476: static int c
      +                          toa(FILE *fp, char c);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt
      +                          .c: 477: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 478:   
      +                            int l,w;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 481:   
      +                            w = width ? width - 1 : width;
  5962     138C  0022               	movlb	2	; select bank2
  5963     138D  082C               	movf	_width^(0+256),w
  5964     138E  042D               	iorwf	(_width+1)^(0+256),w
  5965     138F  1D03               	btfss	3,2
  5966     1390  2B99               	goto	l5052
  5967     1391  082D               	movf	(_width+1)^(0+256),w
  5968     1392  0021               	movlb	1	; select bank1
  5969     1393  00B7               	movwf	(ctoa@w+1)^(0+128)
  5970     1394  0022               	movlb	2	; select bank2
  5971     1395  082C               	movf	_width^(0+256),w
  5972     1396  0021               	movlb	1	; select bank1
  5973     1397  00B6               	movwf	ctoa@w^(0+128)
  5974     1398  2BA2               	goto	l5054
  5975     1399                     l5052:
  5976     1399  082C               	movf	_width^(0+256),w
  5977     139A  3EFF               	addlw	255
  5978     139B  0021               	movlb	1	; select bank1
  5979     139C  00B6               	movwf	ctoa@w^(0+128)
  5980     139D  30FF               	movlw	255
  5981     139E  0022               	movlb	2	; select bank2
  5982     139F  3D2D               	addwfc	(_width+1)^(0+256),w
  5983     13A0  0021               	movlb	1	; select bank1
  5984     13A1  00B7               	movwf	(ctoa@w+1)^(0+128)
  5985     13A2                     l5054:
  5986                           
  5987                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 485:     if (flag
      +                          s & (1 << 0)) {
  5988     13A2  0022               	movlb	2	; select bank2
  5989     13A3  1C34               	btfss	_flags^(0+256),0
  5990     13A4  2BB2               	goto	l5058
  5991                           
  5992                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 486:         fput
      +                          c(c, fp);
  5993     13A5  0021               	movlb	1	; select bank1
  5994     13A6  0830               	movf	ctoa@c^(0+128),w
  5995     13A7  00B2               	movwf	??_ctoa^(0+128)
  5996     13A8  01B3               	clrf	(??_ctoa^(0+128)+1)
  5997     13A9  0832               	movf	??_ctoa^(0+128),w
  5998     13AA  00A8               	movwf	fputc@c^(0+128)
  5999     13AB  0833               	movf	(??_ctoa+1)^(0+128),w
  6000     13AC  00A9               	movwf	(fputc@c+1)^(0+128)
  6001     13AD  0838               	movf	ctoa@fp^(0+128),w
  6002     13AE  00AA               	movwf	fputc@fp^(0+128)
  6003     13AF  3192  228D  3193   	fcall	_fputc
  6004     13B2                     l5058:
  6005                           
  6006                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 491:     w = (w <
      +                           0) ? 0 : w;
  6007     13B2  0021               	movlb	1	; select bank1
  6008     13B3  1FB7               	btfss	(ctoa@w+1)^(0+128),7
  6009     13B4  2BB7               	goto	l1841
  6010     13B5  01B6               	clrf	ctoa@w^(0+128)
  6011     13B6  01B7               	clrf	(ctoa@w+1)^(0+128)
  6012     13B7                     l1841:
  6013                           
  6014                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 492:     l = 0;
  6015     13B7  01B4               	clrf	ctoa@l^(0+128)
  6016     13B8  01B5               	clrf	(ctoa@l+1)^(0+128)
  6017     13B9                     l5068:	
  6018                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  6019                           
  6020                           
  6021                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 493:     while (l
      +                           < w) {
  6022     13B9  0835               	movf	(ctoa@l+1)^(0+128),w
  6023     13BA  3A80               	xorlw	128
  6024     13BB  00B2               	movwf	??_ctoa^(0+128)
  6025     13BC  0837               	movf	(ctoa@w+1)^(0+128),w
  6026     13BD  3A80               	xorlw	128
  6027     13BE  0232               	subwf	??_ctoa^(0+128),w
  6028     13BF  1D03               	skipz
  6029     13C0  2BC3               	goto	u4375
  6030     13C1  0836               	movf	ctoa@w^(0+128),w
  6031     13C2  0234               	subwf	ctoa@l^(0+128),w
  6032     13C3                     u4375:
  6033     13C3  1803               	btfsc	3,0
  6034     13C4  2BD5               	goto	l1844
  6035                           
  6036                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 494:         fput
      +                          c(' ', fp);
  6037     13C5  3020               	movlw	32
  6038     13C6  0021               	movlb	1	; select bank1
  6039     13C7  00A8               	movwf	fputc@c^(0+128)
  6040     13C8  3000               	movlw	0
  6041     13C9  00A9               	movwf	(fputc@c^(0+128)+1)
  6042     13CA  0838               	movf	ctoa@fp^(0+128),w
  6043     13CB  00AA               	movwf	fputc@fp^(0+128)
  6044     13CC  3192  228D  3193   	fcall	_fputc
  6045                           
  6046                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 495:         ++l;
  6047     13CF  3001               	movlw	1
  6048     13D0  0021               	movlb	1	; select bank1
  6049     13D1  07B4               	addwf	ctoa@l^(0+128),f
  6050     13D2  3000               	movlw	0
  6051     13D3  3DB5               	addwfc	(ctoa@l+1)^(0+128),f
  6052     13D4  2BB9               	goto	l5068
  6053     13D5                     l1844:
  6054                           
  6055                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 499:     if (!(fl
      +                          ags & (1 << 0))) {
  6056     13D5  0022               	movlb	2	; select bank2
  6057     13D6  1834               	btfsc	_flags^(0+256),0
  6058     13D7  2BE4               	goto	l5072
  6059                           
  6060                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 501:         fput
      +                          c(c, fp);
  6061     13D8  0021               	movlb	1	; select bank1
  6062     13D9  0830               	movf	ctoa@c^(0+128),w
  6063     13DA  00B2               	movwf	??_ctoa^(0+128)
  6064     13DB  01B3               	clrf	(??_ctoa^(0+128)+1)
  6065     13DC  0832               	movf	??_ctoa^(0+128),w
  6066     13DD  00A8               	movwf	fputc@c^(0+128)
  6067     13DE  0833               	movf	(??_ctoa+1)^(0+128),w
  6068     13DF  00A9               	movwf	(fputc@c+1)^(0+128)
  6069     13E0  0838               	movf	ctoa@fp^(0+128),w
  6070     13E1  00AA               	movwf	fputc@fp^(0+128)
  6071     13E2  3192  228D         	fcall	_fputc
  6072     13E4                     l5072:
  6073                           
  6074                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 507:     return l
      +                          +1;
  6075     13E4  0021               	movlb	1	; select bank1
  6076     13E5  0834               	movf	ctoa@l^(0+128),w
  6077     13E6  3E01               	addlw	1
  6078     13E7  00B0               	movwf	?_ctoa^(0+128)
  6079     13E8  3000               	movlw	0
  6080     13E9  3D35               	addwfc	(ctoa@l+1)^(0+128),w
  6081     13EA  00B1               	movwf	(?_ctoa+1)^(0+128)
  6082     13EB  0008               	return
  6083     13EC                     __end_of_ctoa:
  6084                           
  6085                           	psect	text10
  6086     128D                     __ptext10:	
  6087 ;; *************** function _fputc *****************
  6088 ;; Defined at:
  6089 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  c               2    0[BANK1 ] int 
  6092 ;;  fp              1    2[BANK1 ] PTR struct _IO_FILE
  6093 ;;		 -> snprintf@f(11), 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;		None
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  2    0[BANK1 ] int 
  6098 ;; Registers used:
  6099 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6100 ;; Tracked objects:
  6101 ;;		On entry : 1F/1
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        8 bytes
  6110 ;; Hardware stack levels used: 1
  6111 ;; Hardware stack levels required when called: 11
  6112 ;; This function calls:
  6113 ;;		_putch
  6114 ;; This function is called by:
  6115 ;;		_pad
  6116 ;;		_ctoa
  6117 ;;		_vfpfcnvrt
  6118 ;;		_fputs
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122     128D                     _fputc:	
  6123                           ;psect for function _fputc
  6124                           
  6125                           
  6126                           ;incstack = 0
  6127 ;; hardware stack exceeded
  6128                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6129     128D  082A               	movf	fputc@fp^(0+128),w
  6130     128E  1D03               	btfss	3,2
  6131     128F  082A               	movf	fputc@fp^(0+128),w
  6132     1290  1D03               	btfss	3,2
  6133     1291  2A96               	goto	l4338
  6134     1292  0828               	movf	fputc@c^(0+128),w
  6135     1293  3180  2003         	fcall	_putch
  6136     1295  0008               	return
  6137     1296                     l4338:
  6138     1296  082A               	movf	fputc@fp^(0+128),w
  6139     1297  3E09               	addlw	9
  6140     1298  0086               	movwf	6
  6141     1299  3001               	movlw	1	; select bank2/3
  6142     129A  0087               	movwf	7
  6143     129B  0016               	moviw fsr1++
  6144     129C  0401               	iorwf	1,w
  6145     129D  1903               	btfsc	3,2
  6146     129E  2ABD               	goto	l4342
  6147     129F  082A               	movf	fputc@fp^(0+128),w
  6148     12A0  3E09               	addlw	9
  6149     12A1  0086               	movwf	6
  6150     12A2  3001               	movlw	1	; select bank2/3
  6151     12A3  0087               	movwf	7
  6152     12A4  3F40               	moviw [0]fsr1
  6153     12A5  00AB               	movwf	??_fputc^(0+128)
  6154     12A6  3F41               	moviw [1]fsr1
  6155     12A7  00AC               	movwf	(??_fputc^(0+128)+1)
  6156     12A8  082A               	movf	fputc@fp^(0+128),w
  6157     12A9  3E02               	addlw	2
  6158     12AA  0086               	movwf	6
  6159     12AB  3001               	movlw	1	; select bank2/3
  6160     12AC  0087               	movwf	7
  6161     12AD  3F40               	moviw [0]fsr1
  6162     12AE  00AD               	movwf	(??_fputc+2)^(0+128)
  6163     12AF  3F41               	moviw [1]fsr1
  6164     12B0  00AE               	movwf	((??_fputc+2)^(0+128)+1)
  6165     12B1  082E               	movf	(??_fputc+3)^(0+128),w
  6166     12B2  3A80               	xorlw	128
  6167     12B3  00AF               	movwf	(??_fputc+4)^(0+128)
  6168     12B4  082C               	movf	(??_fputc+1)^(0+128),w
  6169     12B5  3A80               	xorlw	128
  6170     12B6  022F               	subwf	(??_fputc+4)^(0+128),w
  6171     12B7  1D03               	skipz
  6172     12B8  2ABB               	goto	u3325
  6173     12B9  082B               	movf	??_fputc^(0+128),w
  6174     12BA  022D               	subwf	(??_fputc+2)^(0+128),w
  6175     12BB                     u3325:
  6176     12BB  1803               	skipnc
  6177     12BC  0008               	return
  6178     12BD                     l4342:
  6179     12BD  0021               	movlb	1	; select bank1
  6180     12BE  082A               	movf	fputc@fp^(0+128),w
  6181     12BF  0086               	movwf	6
  6182     12C0  3001               	movlw	1	; select bank2/3
  6183     12C1  0087               	movwf	7
  6184     12C2  082A               	movf	fputc@fp^(0+128),w
  6185     12C3  3E02               	addlw	2
  6186     12C4  0084               	movwf	4
  6187     12C5  3001               	movlw	1	; select bank2/3
  6188     12C6  0085               	movwf	5
  6189     12C7  0800               	movf	0,w
  6190     12C8  0701               	addwf	1,w
  6191     12C9  00AB               	movwf	??_fputc^(0+128)
  6192     12CA  082B               	movf	??_fputc^(0+128),w
  6193     12CB  0086               	movwf	6
  6194     12CC  3001               	movlw	1	; select bank2/3
  6195     12CD  0087               	movwf	7
  6196     12CE  0828               	movf	fputc@c^(0+128),w
  6197     12CF  0081               	movwf	1
  6198     12D0  082A               	movf	fputc@fp^(0+128),w
  6199     12D1  3E02               	addlw	2
  6200     12D2  0086               	movwf	6
  6201     12D3  3001               	movlw	1	; select bank2/3
  6202     12D4  0087               	movwf	7
  6203     12D5  3001               	movlw	1
  6204     12D6  0781               	addwf	1,f
  6205     12D7  3141               	addfsr 1,1
  6206     12D8  1803               	skipnc
  6207     12D9  0A81               	incf	1,f
  6208     12DA  0008               	return
  6209     12DB                     __end_of_fputc:
  6210                           
  6211                           	psect	text11
  6212     0003                     __ptext11:	
  6213 ;; *************** function _putch *****************
  6214 ;; Defined at:
  6215 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  c               1    wreg     unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  c               1    0[COMMON] unsigned char 
  6220 ;; Return value:  Size  Location     Type
  6221 ;;                  1    wreg      void 
  6222 ;; Registers used:
  6223 ;;		wreg
  6224 ;; Tracked objects:
  6225 ;;		On entry : 1F/1
  6226 ;;		On exit  : 1F/1
  6227 ;;		Unchanged: 1F/0
  6228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;Total ram usage:        0 bytes
  6234 ;; Hardware stack levels used: 1
  6235 ;; Hardware stack levels required when called: 10
  6236 ;; This function calls:
  6237 ;;		Nothing
  6238 ;; This function is called by:
  6239 ;;		_fputc
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243     0003                     _putch:	
  6244                           ;psect for function _putch
  6245                           
  6246                           
  6247                           ;incstack = 0
  6248 ;; hardware stack exceeded
  6249                           ; Regs used in _putch: [wreg]
  6250     0003  0008               	return
  6251     0004                     __end_of_putch:
  6252                           
  6253                           	psect	text12
  6254     1B5B                     __ptext12:	
  6255 ;; *************** function _SysTime_Init *****************
  6256 ;; Defined at:
  6257 ;;		line 12 in file "systime.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;		None
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;		None
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      void 
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0, pclath, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 1F/0
  6268 ;;		On exit  : 1F/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6275 ;;Total ram usage:        0 bytes
  6276 ;; Hardware stack levels used: 1
  6277 ;; Hardware stack levels required when called: 11
  6278 ;; This function calls:
  6279 ;;		_TMR2_SetInterruptHandler
  6280 ;;		_TMR2_StartTimer
  6281 ;; This function is called by:
  6282 ;;		_main
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286     1B5B                     _SysTime_Init:	
  6287                           ;psect for function _SysTime_Init
  6288                           
  6289                           
  6290                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  6291                           
  6292                           ;incstack = 0
  6293                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  6294     1B5B  3028               	movlw	low _SysTimeInterrupt
  6295     1B5C  0021               	movlb	1	; select bank1
  6296     1B5D  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6297     1B5E  301B               	movlw	high _SysTimeInterrupt
  6298     1B5F  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6299     1B60  319B  2320  319B   	fcall	_TMR2_SetInterruptHandler
  6300                           
  6301                           ;systime.c: 15:     TMR2_StartTimer();
  6302     1B63  319A  22D6         	fcall	_TMR2_StartTimer
  6303     1B65  0008               	return
  6304     1B66                     __end_of_SysTime_Init:
  6305                           
  6306                           	psect	text13
  6307     1AD6                     __ptext13:	
  6308 ;; *************** function _TMR2_StartTimer *****************
  6309 ;; Defined at:
  6310 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;		None
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;		None
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		None
  6319 ;; Tracked objects:
  6320 ;;		On entry : 1F/3
  6321 ;;		On exit  : 1F/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;Total ram usage:        0 bytes
  6329 ;; Hardware stack levels used: 1
  6330 ;; Hardware stack levels required when called: 10
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_SysTime_Init
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338     1AD6                     _TMR2_StartTimer:	
  6339                           ;psect for function _TMR2_StartTimer
  6340                           
  6341                           
  6342                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in _TMR2_StartTimer: []
  6346     1AD6  0020               	movlb	0	; select bank0
  6347     1AD7  151C               	bsf	28,2	;volatile
  6348     1AD8  0008               	return
  6349     1AD9                     __end_of_TMR2_StartTimer:
  6350                           
  6351                           	psect	text14
  6352     1C19                     __ptext14:	
  6353 ;; *************** function _SYSTEM_Initialize *****************
  6354 ;; Defined at:
  6355 ;;		line 49 in file "mcc_generated_files/mcc.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : B1F/0
  6366 ;;		On exit  : 1F/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used: 1
  6375 ;; Hardware stack levels required when called: 12
  6376 ;; This function calls:
  6377 ;;		_EUSART_Initialize
  6378 ;;		_OSCILLATOR_Initialize
  6379 ;;		_PIN_MANAGER_Initialize
  6380 ;;		_TMR2_Initialize
  6381 ;;		_USBDeviceAttach
  6382 ;;		_USBDeviceInit
  6383 ;;		_WDT_Initialize
  6384 ;; This function is called by:
  6385 ;;		_main
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389     1C19                     _SYSTEM_Initialize:	
  6390                           ;psect for function _SYSTEM_Initialize
  6391                           
  6392                           
  6393                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6397     1C19  319E  26E8  319C   	fcall	_PIN_MANAGER_Initialize
  6398                           
  6399                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  6400     1C1C  319B  23B2  319C   	fcall	_OSCILLATOR_Initialize
  6401                           
  6402                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  6403     1C1F  319A  22D3  319C   	fcall	_WDT_Initialize
  6404                           
  6405                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  6406     1C22  319B  23E1  319C   	fcall	_TMR2_Initialize
  6407                           
  6408                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  6409     1C25  3190  20EC  319C   	fcall	_EUSART_Initialize
  6410                           
  6411                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  6412     1C28  318C  24DA  319C   	fcall	_USBDeviceInit
  6413                           
  6414                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  6415     1C2B  319C  24BB         	fcall	_USBDeviceAttach
  6416     1C2D  0008               	return
  6417     1C2E                     __end_of_SYSTEM_Initialize:
  6418                           
  6419                           	psect	text15
  6420     1AD3                     __ptext15:	
  6421 ;; *************** function _WDT_Initialize *****************
  6422 ;; Defined at:
  6423 ;;		line 76 in file "mcc_generated_files/mcc.c"
  6424 ;; Parameters:    Size  Location     Type
  6425 ;;		None
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;		None
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  1    wreg      void 
  6430 ;; Registers used:
  6431 ;;		wreg
  6432 ;; Tracked objects:
  6433 ;;		On entry : 1F/1
  6434 ;;		On exit  : 1F/1
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6441 ;;Total ram usage:        0 bytes
  6442 ;; Hardware stack levels used: 1
  6443 ;; Hardware stack levels required when called: 10
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_SYSTEM_Initialize
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451     1AD3                     _WDT_Initialize:	
  6452                           ;psect for function _WDT_Initialize
  6453                           
  6454                           
  6455                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  6456                           
  6457                           ;incstack = 0
  6458                           ; Regs used in _WDT_Initialize: [wreg]
  6459     1AD3  3016               	movlw	22
  6460     1AD4  0097               	movwf	23	;volatile
  6461     1AD5  0008               	return
  6462     1AD6                     __end_of_WDT_Initialize:
  6463                           
  6464                           	psect	text16
  6465     0CDA                     __ptext16:	
  6466 ;; *************** function _USBDeviceInit *****************
  6467 ;; Defined at:
  6468 ;;		line 281 in file "usb/usb_device.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;		None
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  p               2    4[BANK1 ] PTR unsigned char 
  6473 ;;		 -> UEP1(1), 
  6474 ;;  i               1    6[BANK1 ] unsigned char 
  6475 ;;  i               1    7[BANK1 ] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6480 ;; Tracked objects:
  6481 ;;		On entry : 1F/1
  6482 ;;		On exit  : 1F/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;Total ram usage:        8 bytes
  6490 ;; Hardware stack levels used: 1
  6491 ;; Hardware stack levels required when called: 10
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_SYSTEM_Initialize
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499     0CDA                     _USBDeviceInit:	
  6500                           ;psect for function _USBDeviceInit
  6501                           
  6502                           
  6503                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  6507     0CDA  1112               	bcf	18,2	;volatile
  6508                           
  6509                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  6510     0CDB  003D               	movlb	29	; select bank29
  6511     0CDC  0193               	clrf	19	;volatile
  6512                           
  6513                           ;usb/usb_device.c: 295:     {UIR = 0;};
  6514     0CDD  0190               	clrf	16	;volatile
  6515                           
  6516                           ;usb/usb_device.c: 298:     UEP0 = 0;
  6517     0CDE  0198               	clrf	24	;volatile
  6518                           
  6519                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  6520     0CDF  300E               	movlw	14
  6521     0CE0  0021               	movlb	1	; select bank1
  6522     0CE1  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  6523     0CE2  3099               	movlw	153
  6524     0CE3  00AC               	movwf	USBDeviceInit@p^(0+128)
  6525     0CE4  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  6526     0CE5                     l5602:
  6527     0CE5  082C               	movf	USBDeviceInit@p^(0+128),w
  6528     0CE6  0086               	movwf	6
  6529     0CE7  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  6530     0CE8  0087               	movwf	7
  6531     0CE9  0181               	clrf	1
  6532     0CEA  3001               	movlw	1
  6533     0CEB  07AC               	addwf	USBDeviceInit@p^(0+128),f
  6534     0CEC  3000               	movlw	0
  6535     0CED  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  6536     0CEE  3001               	movlw	1
  6537     0CEF  00A8               	movwf	??_USBDeviceInit^(0+128)
  6538     0CF0  0828               	movf	??_USBDeviceInit^(0+128),w
  6539     0CF1  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  6540     0CF2  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  6541     0CF3  1903               	btfsc	3,2
  6542     0CF4  2CE5               	goto	l5602
  6543                           
  6544                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  6545     0CF5  3016               	movlw	22
  6546     0CF6  003D               	movlb	29	; select bank29
  6547     0CF7  0091               	movwf	17	;volatile
  6548     0CF8  309F               	movlw	159
  6549     0CF9  0097               	movwf	23	;volatile
  6550     0CFA  307B               	movlw	123
  6551     0CFB  0092               	movwf	18	;volatile
  6552                           
  6553                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  6554     0CFC  0021               	movlb	1	; select bank1
  6555     0CFD  01AF               	clrf	USBDeviceInit@i^(0+128)
  6556     0CFE                     l5618:
  6557                           
  6558                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  6559     0CFE  082F               	movf	USBDeviceInit@i^(0+128),w
  6560     0CFF  00A8               	movwf	??_USBDeviceInit^(0+128)
  6561     0D00  3001               	movlw	1
  6562     0D01                     u4975:
  6563     0D01  35A8               	lslf	??_USBDeviceInit^(0+128),f
  6564     0D02  3EFF               	addlw	-1
  6565     0D03  1D03               	skipz
  6566     0D04  2D01               	goto	u4975
  6567     0D05  3528               	lslf	??_USBDeviceInit^(0+128),w
  6568     0D06  3E20               	addlw	32
  6569     0D07  0086               	movwf	6
  6570     0D08  0187               	clrf	7
  6571     0D09  3000               	movlw	0
  6572     0D0A  3FC0               	movwi [0]fsr1
  6573     0D0B  3000               	movlw	0
  6574     0D0C  3FC1               	movwi [1]fsr1
  6575     0D0D  3FC2               	movwi [2]fsr1
  6576     0D0E  3FC3               	movwi [3]fsr1
  6577                           
  6578                           ;usb/usb_device.c: 314:     }
  6579     0D0F  3001               	movlw	1
  6580     0D10  00A8               	movwf	??_USBDeviceInit^(0+128)
  6581     0D11  0828               	movf	??_USBDeviceInit^(0+128),w
  6582     0D12  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6583     0D13  3008               	movlw	8
  6584     0D14  022F               	subwf	USBDeviceInit@i^(0+128),w
  6585     0D15  1C03               	skipc
  6586     0D16  2CFE               	goto	l5618
  6587                           
  6588                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  6589     0D17  003D               	movlb	29	; select bank29
  6590     0D18  170E               	bsf	14,6	;volatile
  6591                           
  6592                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  6593     0D19  0196               	clrf	22	;volatile
  6594                           
  6595                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  6596     0D1A  120E               	bcf	14,4	;volatile
  6597                           
  6598                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  6599     0D1B  130E               	bcf	14,6	;volatile
  6600     0D1C                     l5630:
  6601                           
  6602                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  6603     0D1C  30F7               	movlw	247
  6604     0D1D  0021               	movlb	1	; select bank1
  6605     0D1E  00A8               	movwf	??_USBDeviceInit^(0+128)
  6606     0D1F  0828               	movf	??_USBDeviceInit^(0+128),w
  6607     0D20  003D               	movlb	29	; select bank29
  6608     0D21  0590               	andwf	16,f	;volatile
  6609                           
  6610                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  6611     0D22  0021               	movlb	1	; select bank1
  6612     0D23  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
  6613                           
  6614                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  6615     0D24  0022               	movlb	2	; select bank2
  6616     0D25  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  6617                           
  6618                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  6619     0D26  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  6620     0D27  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  6621                           
  6622                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  6623     0D28  003D               	movlb	29	; select bank29
  6624     0D29  1990               	btfsc	16,3	;volatile
  6625     0D2A  2D1C               	goto	l5630
  6626                           
  6627                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  6628     0D2B  3001               	movlw	1
  6629     0D2C  0022               	movlb	2	; select bank2
  6630     0D2D  00BE               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  6631                           
  6632                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  6633     0D2E  3001               	movlw	1
  6634     0D2F  00BD               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  6635                           
  6636                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  6637     0D30  01BC               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  6638                           
  6639                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  6640     0D31  01BB               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  6641                           
  6642                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  6643     0D32  01C3               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  6644                           
  6645                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  6646     0D33  0021               	movlb	1	; select bank1
  6647     0D34  01AF               	clrf	USBDeviceInit@i^(0+128)
  6648     0D35                     l5652:
  6649                           
  6650                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  6651     0D35  352F               	lslf	USBDeviceInit@i^(0+128),w
  6652     0D36  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  6653     0D37  0086               	movwf	6
  6654     0D38  0187               	clrf	7
  6655     0D39  3000               	movlw	0
  6656     0D3A  3FC0               	movwi [0]fsr1
  6657     0D3B  3FC1               	movwi [1]fsr1
  6658                           
  6659                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  6660     0D3C  352F               	lslf	USBDeviceInit@i^(0+128),w
  6661     0D3D  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  6662     0D3E  0086               	movwf	6
  6663     0D3F  3001               	movlw	1	; select bank2/3
  6664     0D40  0087               	movwf	7
  6665     0D41  3000               	movlw	0
  6666     0D42  3FC0               	movwi [0]fsr1
  6667     0D43  3FC1               	movwi [1]fsr1
  6668                           
  6669                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  6670     0D44  082F               	movf	USBDeviceInit@i^(0+128),w
  6671     0D45  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  6672     0D46  0086               	movwf	6
  6673     0D47  3001               	movlw	1	; select bank2/3
  6674     0D48  0087               	movwf	7
  6675     0D49  0181               	clrf	1
  6676                           
  6677                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  6678     0D4A  082F               	movf	USBDeviceInit@i^(0+128),w
  6679     0D4B  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  6680     0D4C  0086               	movwf	6
  6681     0D4D  3001               	movlw	1	; select bank2/3
  6682     0D4E  0087               	movwf	7
  6683     0D4F  0181               	clrf	1
  6684                           
  6685                           ;usb/usb_device.c: 355:     }
  6686     0D50  3001               	movlw	1
  6687     0D51  00A8               	movwf	??_USBDeviceInit^(0+128)
  6688     0D52  0828               	movf	??_USBDeviceInit^(0+128),w
  6689     0D53  07AF               	addwf	USBDeviceInit@i^(0+128),f
  6690     0D54  3002               	movlw	2
  6691     0D55  022F               	subwf	USBDeviceInit@i^(0+128),w
  6692     0D56  1C03               	skipc
  6693     0D57  2D35               	goto	l5652
  6694                           
  6695                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  6696     0D58  3028               	movlw	40
  6697     0D59  0020               	movlb	0	; select bank0
  6698     0D5A  00E1               	movwf	_pBDTEntryIn
  6699     0D5B  3000               	movlw	0
  6700     0D5C  00E2               	movwf	_pBDTEntryIn+1
  6701                           
  6702                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  6703     0D5D  3016               	movlw	22
  6704     0D5E  003D               	movlb	29	; select bank29
  6705     0D5F  0098               	movwf	24	;volatile
  6706                           
  6707                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  6708     0D60  3040               	movlw	64
  6709     0D61  0021               	movlb	1	; select bank1
  6710     0D62  00A8               	movwf	??_USBDeviceInit^(0+128)
  6711     0D63  3000               	movlw	0
  6712     0D64  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  6713     0D65  30FF               	movlw	255
  6714     0D66  0528               	andwf	??_USBDeviceInit^(0+128),w
  6715     0D67  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  6716     0D68  307F               	movlw	127
  6717     0D69  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  6718     0D6A  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  6719     0D6B  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  6720     0D6C  0020               	movlb	0	; select bank0
  6721     0D6D  00A2               	movwf	34	;volatile
  6722     0D6E  0021               	movlb	1	; select bank1
  6723     0D6F  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  6724     0D70  0020               	movlb	0	; select bank0
  6725     0D71  00A3               	movwf	35	;volatile
  6726                           
  6727                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  6728     0D72  3008               	movlw	8
  6729     0D73  00A1               	movwf	33	;volatile
  6730                           
  6731                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  6732     0D74  3004               	movlw	4
  6733     0D75  00A0               	movwf	32	;volatile
  6734                           
  6735                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  6736     0D76  17A0               	bsf	32,7	;volatile
  6737                           
  6738                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  6739     0D77  01EF               	clrf	_USBActiveConfiguration	;volatile
  6740                           
  6741                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  6742     0D78  3000               	movlw	0
  6743     0D79  0023               	movlb	3	; select bank3
  6744     0D7A  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  6745     0D7B  3000               	movlw	0
  6746     0D7C  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  6747     0D7D  3000               	movlw	0
  6748     0D7E  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  6749     0D7F  3000               	movlw	0
  6750     0D80  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  6751                           
  6752                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  6753     0D81  0022               	movlb	2	; select bank2
  6754     0D82  01BA               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  6755                           
  6756                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  6757     0D83  0020               	movlb	0	; select bank0
  6758     0D84  01EC               	clrf	_USBDeviceState	;volatile
  6759     0D85  0008               	return
  6760     0D86                     __end_of_USBDeviceInit:
  6761                           
  6762                           	psect	text17
  6763     1CBB                     __ptext17:	
  6764 ;; *************** function _USBDeviceAttach *****************
  6765 ;; Defined at:
  6766 ;;		line 1356 in file "usb/usb_device.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;                  1    wreg      void 
  6773 ;; Registers used:
  6774 ;;		wreg, status,2, status,0
  6775 ;; Tracked objects:
  6776 ;;		On entry : 1F/0
  6777 ;;		On exit  : 1F/0
  6778 ;;		Unchanged: 0/0
  6779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used: 1
  6786 ;; Hardware stack levels required when called: 10
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		_SYSTEM_Initialize
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794     1CBB                     _USBDeviceAttach:	
  6795                           ;psect for function _USBDeviceAttach
  6796                           
  6797                           
  6798                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  6802     1CBB  086C               	movf	_USBDeviceState,w
  6803     1CBC  1D03               	btfss	3,2
  6804     1CBD  0008               	return
  6805                           
  6806                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  6807     1CBE  003D               	movlb	29	; select bank29
  6808     1CBF  018E               	clrf	14	;volatile
  6809                           
  6810                           ;usb/usb_device.c: 1367:             UIE = 0;
  6811     1CC0  0192               	clrf	18	;volatile
  6812                           
  6813                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  6814     1CC1  3016               	movlw	22
  6815     1CC2  0091               	movwf	17	;volatile
  6816     1CC3  309F               	movlw	159
  6817     1CC4  0097               	movwf	23	;volatile
  6818     1CC5  307B               	movlw	123
  6819     1CC6  0092               	movwf	18	;volatile
  6820                           
  6821                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  6822     1CC7  0021               	movlb	1	; select bank1
  6823     1CC8  1512               	bsf	18,2	;volatile
  6824     1CC9  170B               	bsf	11,6	;volatile
  6825     1CCA  178B               	bsf	11,7	;volatile
  6826     1CCB                     l541:	
  6827                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  6828                           
  6829     1CCB  003D               	movlb	29	; select bank29
  6830     1CCC  198E               	btfsc	14,3	;volatile
  6831     1CCD  2CD0               	goto	l5694
  6832     1CCE  158E               	bsf	14,3	;volatile
  6833     1CCF  2CCB               	goto	l541
  6834     1CD0                     l5694:
  6835                           
  6836                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  6837     1CD0  3001               	movlw	1
  6838     1CD1  0020               	movlb	0	; select bank0
  6839     1CD2  00EC               	movwf	_USBDeviceState	;volatile
  6840     1CD3  0008               	return
  6841     1CD4                     __end_of_USBDeviceAttach:
  6842                           
  6843                           	psect	text18
  6844     1BE1                     __ptext18:	
  6845 ;; *************** function _TMR2_Initialize *****************
  6846 ;; Defined at:
  6847 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, pclath, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 1F/1
  6858 ;;		On exit  : 1F/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used: 1
  6867 ;; Hardware stack levels required when called: 11
  6868 ;; This function calls:
  6869 ;;		_TMR2_SetInterruptHandler
  6870 ;; This function is called by:
  6871 ;;		_SYSTEM_Initialize
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875     1BE1                     _TMR2_Initialize:	
  6876                           ;psect for function _TMR2_Initialize
  6877                           
  6878                           
  6879                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  6880                           
  6881                           ;incstack = 0
  6882                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6883     1BE1  305D               	movlw	93
  6884     1BE2  0020               	movlb	0	; select bank0
  6885     1BE3  009B               	movwf	27	;volatile
  6886                           
  6887                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  6888     1BE4  019A               	clrf	26	;volatile
  6889                           
  6890                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  6891     1BE5  1091               	bcf	17,1	;volatile
  6892                           
  6893                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  6894     1BE6  0021               	movlb	1	; select bank1
  6895     1BE7  1491               	bsf	17,1	;volatile
  6896                           
  6897                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  6898     1BE8  3002               	movlw	low _TMR2_DefaultInterruptHandler
  6899     1BE9  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  6900     1BEA  3000               	movlw	high _TMR2_DefaultInterruptHandler
  6901     1BEB  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  6902     1BEC  319B  2320         	fcall	_TMR2_SetInterruptHandler
  6903                           
  6904                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  6905     1BEE  300F               	movlw	15
  6906     1BEF  0020               	movlb	0	; select bank0
  6907     1BF0  009C               	movwf	28	;volatile
  6908     1BF1  0008               	return
  6909     1BF2                     __end_of_TMR2_Initialize:
  6910                           
  6911                           	psect	text19
  6912     1B20                     __ptext19:	
  6913 ;; *************** function _TMR2_SetInterruptHandler *****************
  6914 ;; Defined at:
  6915 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  6918 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		wreg
  6925 ;; Tracked objects:
  6926 ;;		On entry : 1F/1
  6927 ;;		On exit  : 1F/3
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6930 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;Total ram usage:        2 bytes
  6935 ;; Hardware stack levels used: 1
  6936 ;; Hardware stack levels required when called: 10
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_TMR2_Initialize
  6941 ;;		_SysTime_Init
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945     1B20                     _TMR2_SetInterruptHandler:	
  6946                           ;psect for function _TMR2_SetInterruptHandler
  6947                           
  6948                           
  6949                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  6950                           
  6951                           ;incstack = 0
  6952                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  6953     1B20  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  6954     1B21  0023               	movlb	3	; select bank3
  6955     1B22  00D8               	movwf	(_TMR2_InterruptHandler+1)^(0+384)
  6956     1B23  0021               	movlb	1	; select bank1
  6957     1B24  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  6958     1B25  0023               	movlb	3	; select bank3
  6959     1B26  00D7               	movwf	_TMR2_InterruptHandler^(0+384)
  6960     1B27  0008               	return
  6961     1B28                     __end_of_TMR2_SetInterruptHandler:
  6962                           
  6963                           	psect	text20
  6964     1EE8                     __ptext20:	
  6965 ;; *************** function _PIN_MANAGER_Initialize *****************
  6966 ;; Defined at:
  6967 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg, status,2, status,0, pclath, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : B1F/0
  6978 ;;		On exit  : 1F/3
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used: 1
  6987 ;; Hardware stack levels required when called: 11
  6988 ;; This function calls:
  6989 ;;		_IOCAF4_SetInterruptHandler
  6990 ;;		_IOCAF5_SetInterruptHandler
  6991 ;; This function is called by:
  6992 ;;		_SYSTEM_Initialize
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996     1EE8                     _PIN_MANAGER_Initialize:	
  6997                           ;psect for function _PIN_MANAGER_Initialize
  6998                           
  6999                           
  7000                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  7001                           
  7002                           ;incstack = 0
  7003                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7004     1EE8  0022               	movlb	2	; select bank2
  7005     1EE9  018C               	clrf	12	;volatile
  7006                           
  7007                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  7008     1EEA  018D               	clrf	13	;volatile
  7009                           
  7010                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  7011     1EEB  018E               	clrf	14	;volatile
  7012                           
  7013                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  7014     1EEC  3030               	movlw	48
  7015     1EED  0021               	movlb	1	; select bank1
  7016     1EEE  008C               	movwf	12	;volatile
  7017                           
  7018                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  7019     1EEF  3070               	movlw	112
  7020     1EF0  008D               	movwf	13	;volatile
  7021                           
  7022                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  7023     1EF1  30FF               	movlw	255
  7024     1EF2  008E               	movwf	14	;volatile
  7025                           
  7026                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  7027     1EF3  30CF               	movlw	207
  7028     1EF4  0023               	movlb	3	; select bank3
  7029     1EF5  008E               	movwf	14	;volatile
  7030                           
  7031                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  7032     1EF6  018D               	clrf	13	;volatile
  7033                           
  7034                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  7035     1EF7  018C               	clrf	12	;volatile
  7036                           
  7037                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  7038     1EF8  0024               	movlb	4	; select bank4
  7039     1EF9  018D               	clrf	13	;volatile
  7040                           
  7041                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  7042     1EFA  3030               	movlw	48
  7043     1EFB  008C               	movwf	12	;volatile
  7044                           
  7045                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  7046     1EFC  0021               	movlb	1	; select bank1
  7047     1EFD  1395               	bcf	21,7	;volatile
  7048                           
  7049                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  7050     1EFE  0022               	movlb	2	; select bank2
  7051     1EFF  019D               	clrf	29	;volatile
  7052                           
  7053                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  7054     1F00  0027               	movlb	7	; select bank7
  7055     1F01  1213               	bcf	19,4	;volatile
  7056                           
  7057                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  7058     1F02  1293               	bcf	19,5	;volatile
  7059                           
  7060                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  7061     1F03  1612               	bsf	18,4	;volatile
  7062                           
  7063                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  7064     1F04  1692               	bsf	18,5	;volatile
  7065                           
  7066                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  7067     1F05  1211               	bcf	17,4	;volatile
  7068                           
  7069                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  7070     1F06  1291               	bcf	17,5	;volatile
  7071                           
  7072                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  7073     1F07  30C8               	movlw	low _IOCAF4_DefaultInterruptHandler
  7074     1F08  0021               	movlb	1	; select bank1
  7075     1F09  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7076     1F0A  301A               	movlw	high _IOCAF4_DefaultInterruptHandler
  7077     1F0B  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7078     1F0C  319A  22E8  319E   	fcall	_IOCAF4_SetInterruptHandler
  7079                           
  7080                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  7081     1F0F  30C9               	movlw	low _IOCAF5_DefaultInterruptHandler
  7082     1F10  0021               	movlb	1	; select bank1
  7083     1F11  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7084     1F12  301A               	movlw	high _IOCAF5_DefaultInterruptHandler
  7085     1F13  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7086     1F14  319A  22F0         	fcall	_IOCAF5_SetInterruptHandler
  7087                           
  7088                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  7089     1F16  158B               	bsf	11,3	;volatile
  7090     1F17  0008               	return
  7091     1F18                     __end_of_PIN_MANAGER_Initialize:
  7092                           
  7093                           	psect	text21
  7094     1BB2                     __ptext21:	
  7095 ;; *************** function _OSCILLATOR_Initialize *****************
  7096 ;; Defined at:
  7097 ;;		line 60 in file "mcc_generated_files/mcc.c"
  7098 ;; Parameters:    Size  Location     Type
  7099 ;;		None
  7100 ;; Auto vars:     Size  Location     Type
  7101 ;;		None
  7102 ;; Return value:  Size  Location     Type
  7103 ;;                  1    wreg      void 
  7104 ;; Registers used:
  7105 ;;		wreg, status,2
  7106 ;; Tracked objects:
  7107 ;;		On entry : 1F/3
  7108 ;;		On exit  : 1F/1
  7109 ;;		Unchanged: 0/0
  7110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7115 ;;Total ram usage:        0 bytes
  7116 ;; Hardware stack levels used: 1
  7117 ;; Hardware stack levels required when called: 10
  7118 ;; This function calls:
  7119 ;;		Nothing
  7120 ;; This function is called by:
  7121 ;;		_SYSTEM_Initialize
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125     1BB2                     _OSCILLATOR_Initialize:	
  7126                           ;psect for function _OSCILLATOR_Initialize
  7127                           
  7128                           
  7129                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  7130                           
  7131                           ;incstack = 0
  7132                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7133     1BB2  30FC               	movlw	252
  7134     1BB3  0021               	movlb	1	; select bank1
  7135     1BB4  0099               	movwf	25	;volatile
  7136                           
  7137                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  7138     1BB5  0198               	clrf	24	;volatile
  7139                           
  7140                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  7141     1BB6  3090               	movlw	144
  7142     1BB7  0027               	movlb	7	; select bank7
  7143     1BB8  009B               	movwf	27	;volatile
  7144                           
  7145                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  7146     1BB9  0022               	movlb	2	; select bank2
  7147     1BBA  0196               	clrf	22	;volatile
  7148     1BBB                     l110:	
  7149                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  7150                           
  7151                           
  7152                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  7153     1BBB  0021               	movlb	1	; select bank1
  7154     1BBC  1B1A               	btfsc	26,6	;volatile
  7155     1BBD  0008               	return
  7156     1BBE  2BBB               	goto	l110
  7157     1BBF                     __end_of_OSCILLATOR_Initialize:
  7158                           
  7159                           	psect	text22
  7160     10EC                     __ptext22:	
  7161 ;; *************** function _EUSART_Initialize *****************
  7162 ;; Defined at:
  7163 ;;		line 88 in file "mcc_generated_files/eusart.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0, pclath, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 1F/0
  7174 ;;		On exit  : 1F/1
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used: 1
  7183 ;; Hardware stack levels required when called: 11
  7184 ;; This function calls:
  7185 ;;		_EUSART_SetErrorHandler
  7186 ;;		_EUSART_SetFramingErrorHandler
  7187 ;;		_EUSART_SetOverrunErrorHandler
  7188 ;;		_EUSART_SetRxInterruptHandler
  7189 ;;		_EUSART_SetTxInterruptHandler
  7190 ;; This function is called by:
  7191 ;;		_SYSTEM_Initialize
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195     10EC                     _EUSART_Initialize:	
  7196                           ;psect for function _EUSART_Initialize
  7197                           
  7198                           
  7199                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  7200                           
  7201                           ;incstack = 0
  7202                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7203     10EC  0021               	movlb	1	; select bank1
  7204     10ED  1291               	bcf	17,5	;volatile
  7205                           
  7206                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  7207     10EE  304F               	movlw	low _EUSART_Receive_ISR
  7208     10EF  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  7209     10F0  301F               	movlw	high _EUSART_Receive_ISR
  7210     10F1  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  7211     10F2  319B  2310  3190   	fcall	_EUSART_SetRxInterruptHandler
  7212                           
  7213                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  7214     10F5  0021               	movlb	1	; select bank1
  7215     10F6  1211               	bcf	17,4	;volatile
  7216                           
  7217                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  7218     10F7  3094               	movlw	low _EUSART_Transmit_ISR
  7219     10F8  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  7220     10F9  301D               	movlw	high _EUSART_Transmit_ISR
  7221     10FA  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  7222     10FB  319B  2318  3190   	fcall	_EUSART_SetTxInterruptHandler
  7223                           
  7224                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  7225     10FE  3008               	movlw	8
  7226     10FF  009F               	movwf	31	;volatile
  7227                           
  7228                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  7229     1100  3090               	movlw	144
  7230     1101  009D               	movwf	29	;volatile
  7231                           
  7232                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  7233     1102  3024               	movlw	36
  7234     1103  009E               	movwf	30	;volatile
  7235                           
  7236                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  7237     1104  30E1               	movlw	225
  7238     1105  009B               	movwf	27	;volatile
  7239                           
  7240                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  7241     1106  3004               	movlw	4
  7242     1107  009C               	movwf	28	;volatile
  7243                           
  7244                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  7245     1108  30C7               	movlw	low _EUSART_DefaultFramingErrorHandler
  7246     1109  0021               	movlb	1	; select bank1
  7247     110A  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  7248     110B  301A               	movlw	high _EUSART_DefaultFramingErrorHandler
  7249     110C  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  7250     110D  319B  2300  3190   	fcall	_EUSART_SetFramingErrorHandler
  7251                           
  7252                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  7253     1110  30CD               	movlw	low _EUSART_DefaultOverrunErrorHandler
  7254     1111  0021               	movlb	1	; select bank1
  7255     1112  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  7256     1113  301A               	movlw	high _EUSART_DefaultOverrunErrorHandler
  7257     1114  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  7258     1115  319B  2308  3190   	fcall	_EUSART_SetOverrunErrorHandler
  7259                           
  7260                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  7261     1118  30CA               	movlw	low _EUSART_DefaultErrorHandler
  7262     1119  0021               	movlb	1	; select bank1
  7263     111A  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  7264     111B  301A               	movlw	high _EUSART_DefaultErrorHandler
  7265     111C  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  7266     111D  319A  22F8         	fcall	_EUSART_SetErrorHandler
  7267                           
  7268                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  7269     111F  01E2               	clrf	_eusartRxLastError^(0+384)	;volatile
  7270                           
  7271                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  7272     1120  0022               	movlb	2	; select bank2
  7273     1121  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  7274                           
  7275                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  7276     1122  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
  7277                           
  7278                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  7279     1123  3008               	movlw	8
  7280     1124  00C7               	movwf	_eusartTxBufferRemaining^(0+256)	;volatile
  7281                           
  7282                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  7283     1125  0020               	movlb	0	; select bank0
  7284     1126  01ED               	clrf	_eusartRxHead	;volatile
  7285                           
  7286                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  7287     1127  0023               	movlb	3	; select bank3
  7288     1128  01E4               	clrf	_eusartRxTail^(0+384)	;volatile
  7289                           
  7290                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  7291     1129  01E3               	clrf	_eusartRxCount^(0+384)	;volatile
  7292                           
  7293                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  7294     112A  0021               	movlb	1	; select bank1
  7295     112B  1691               	bsf	17,5	;volatile
  7296     112C  0008               	return
  7297     112D                     __end_of_EUSART_Initialize:
  7298                           
  7299                           	psect	text23
  7300     1B18                     __ptext23:	
  7301 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  7302 ;; Defined at:
  7303 ;;		line 276 in file "mcc_generated_files/eusart.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7306 ;;		 -> EUSART_Transmit_ISR(1), 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;		None
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      void 
  7311 ;; Registers used:
  7312 ;;		wreg
  7313 ;; Tracked objects:
  7314 ;;		On entry : 1F/1
  7315 ;;		On exit  : 1F/3
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7318 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7321 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7322 ;;Total ram usage:        2 bytes
  7323 ;; Hardware stack levels used: 1
  7324 ;; Hardware stack levels required when called: 10
  7325 ;; This function calls:
  7326 ;;		Nothing
  7327 ;; This function is called by:
  7328 ;;		_EUSART_Initialize
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332     1B18                     _EUSART_SetTxInterruptHandler:	
  7333                           ;psect for function _EUSART_SetTxInterruptHandler
  7334                           
  7335                           
  7336                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  7337                           
  7338                           ;incstack = 0
  7339                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  7340     1B18  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  7341     1B19  0023               	movlb	3	; select bank3
  7342     1B1A  00DC               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384)
  7343     1B1B  0021               	movlb	1	; select bank1
  7344     1B1C  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  7345     1B1D  0023               	movlb	3	; select bank3
  7346     1B1E  00DB               	movwf	_EUSART_TxDefaultInterruptHandler^(0+384)
  7347     1B1F  0008               	return
  7348     1B20                     __end_of_EUSART_SetTxInterruptHandler:
  7349                           
  7350                           	psect	text24
  7351     1B10                     __ptext24:	
  7352 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  7353 ;; Defined at:
  7354 ;;		line 280 in file "mcc_generated_files/eusart.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7357 ;;		 -> EUSART_Receive_ISR(1), 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;		None
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  1    wreg      void 
  7362 ;; Registers used:
  7363 ;;		wreg
  7364 ;; Tracked objects:
  7365 ;;		On entry : 1F/1
  7366 ;;		On exit  : 1F/3
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7369 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7372 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;Total ram usage:        2 bytes
  7374 ;; Hardware stack levels used: 1
  7375 ;; Hardware stack levels required when called: 10
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_EUSART_Initialize
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383     1B10                     _EUSART_SetRxInterruptHandler:	
  7384                           ;psect for function _EUSART_SetRxInterruptHandler
  7385                           
  7386                           
  7387                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  7388                           
  7389                           ;incstack = 0
  7390                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  7391     1B10  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  7392     1B11  0023               	movlb	3	; select bank3
  7393     1B12  00DA               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384)
  7394     1B13  0021               	movlb	1	; select bank1
  7395     1B14  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  7396     1B15  0023               	movlb	3	; select bank3
  7397     1B16  00D9               	movwf	_EUSART_RxDefaultInterruptHandler^(0+384)
  7398     1B17  0008               	return
  7399     1B18                     __end_of_EUSART_SetRxInterruptHandler:
  7400                           
  7401                           	psect	text25
  7402     1B08                     __ptext25:	
  7403 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  7404 ;; Defined at:
  7405 ;;		line 268 in file "mcc_generated_files/eusart.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7408 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  7409 ;; Auto vars:     Size  Location     Type
  7410 ;;		None
  7411 ;; Return value:  Size  Location     Type
  7412 ;;                  1    wreg      void 
  7413 ;; Registers used:
  7414 ;;		wreg
  7415 ;; Tracked objects:
  7416 ;;		On entry : 1F/1
  7417 ;;		On exit  : 1F/3
  7418 ;;		Unchanged: 0/0
  7419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7420 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;Total ram usage:        2 bytes
  7425 ;; Hardware stack levels used: 1
  7426 ;; Hardware stack levels required when called: 10
  7427 ;; This function calls:
  7428 ;;		Nothing
  7429 ;; This function is called by:
  7430 ;;		_EUSART_Initialize
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434     1B08                     _EUSART_SetOverrunErrorHandler:	
  7435                           ;psect for function _EUSART_SetOverrunErrorHandler
  7436                           
  7437                           
  7438                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  7442     1B08  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  7443     1B09  0023               	movlb	3	; select bank3
  7444     1B0A  00D4               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
  7445     1B0B  0021               	movlb	1	; select bank1
  7446     1B0C  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  7447     1B0D  0023               	movlb	3	; select bank3
  7448     1B0E  00D3               	movwf	_EUSART_OverrunErrorHandler^(0+384)
  7449     1B0F  0008               	return
  7450     1B10                     __end_of_EUSART_SetOverrunErrorHandler:
  7451                           
  7452                           	psect	text26
  7453     1B00                     __ptext26:	
  7454 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  7455 ;; Defined at:
  7456 ;;		line 264 in file "mcc_generated_files/eusart.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7459 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1    wreg      void 
  7464 ;; Registers used:
  7465 ;;		wreg
  7466 ;; Tracked objects:
  7467 ;;		On entry : 1F/1
  7468 ;;		On exit  : 1F/3
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7471 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7474 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7475 ;;Total ram usage:        2 bytes
  7476 ;; Hardware stack levels used: 1
  7477 ;; Hardware stack levels required when called: 10
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_EUSART_Initialize
  7482 ;; This function uses a non-reentrant model
  7483 ;;
  7484                           
  7485     1B00                     _EUSART_SetFramingErrorHandler:	
  7486                           ;psect for function _EUSART_SetFramingErrorHandler
  7487                           
  7488                           
  7489                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  7490                           
  7491                           ;incstack = 0
  7492                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  7493     1B00  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  7494     1B01  0023               	movlb	3	; select bank3
  7495     1B02  00D6               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  7496     1B03  0021               	movlb	1	; select bank1
  7497     1B04  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  7498     1B05  0023               	movlb	3	; select bank3
  7499     1B06  00D5               	movwf	_EUSART_FramingErrorHandler^(0+384)
  7500     1B07  0008               	return
  7501     1B08                     __end_of_EUSART_SetFramingErrorHandler:
  7502                           
  7503                           	psect	text27
  7504     1AF8                     __ptext27:	
  7505 ;; *************** function _EUSART_SetErrorHandler *****************
  7506 ;; Defined at:
  7507 ;;		line 272 in file "mcc_generated_files/eusart.c"
  7508 ;; Parameters:    Size  Location     Type
  7509 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  7510 ;;		 -> EUSART_DefaultErrorHandler(1), 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg
  7517 ;; Tracked objects:
  7518 ;;		On entry : 1F/1
  7519 ;;		On exit  : 1F/3
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7522 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;Total ram usage:        2 bytes
  7527 ;; Hardware stack levels used: 1
  7528 ;; Hardware stack levels required when called: 10
  7529 ;; This function calls:
  7530 ;;		Nothing
  7531 ;; This function is called by:
  7532 ;;		_EUSART_Initialize
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536     1AF8                     _EUSART_SetErrorHandler:	
  7537                           ;psect for function _EUSART_SetErrorHandler
  7538                           
  7539                           
  7540                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  7544     1AF8  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  7545     1AF9  0023               	movlb	3	; select bank3
  7546     1AFA  00D2               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
  7547     1AFB  0021               	movlb	1	; select bank1
  7548     1AFC  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  7549     1AFD  0023               	movlb	3	; select bank3
  7550     1AFE  00D1               	movwf	_EUSART_ErrorHandler^(0+384)
  7551     1AFF  0008               	return
  7552     1B00                     __end_of_EUSART_SetErrorHandler:
  7553                           
  7554                           	psect	text28
  7555     1D24                     __ptext28:	
  7556 ;; *************** function _PS2Keyboard_Init *****************
  7557 ;; Defined at:
  7558 ;;		line 43 in file "ps2_keyboard.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;		None
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 1F/0
  7569 ;;		On exit  : 1F/3
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7576 ;;Total ram usage:        0 bytes
  7577 ;; Hardware stack levels used: 1
  7578 ;; Hardware stack levels required when called: 11
  7579 ;; This function calls:
  7580 ;;		_GenericQueue_Init
  7581 ;;		_IOCAF4_SetInterruptHandler
  7582 ;;		_IOCAF5_SetInterruptHandler
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588     1D24                     _PS2Keyboard_Init:	
  7589                           ;psect for function _PS2Keyboard_Init
  7590                           
  7591                           
  7592                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7596     1D24  3091               	movlw	145
  7597     1D25  0021               	movlb	1	; select bank1
  7598     1D26  00A8               	movwf	GenericQueue_Init@q^(0+128)
  7599     1D27  3023               	movlw	35
  7600     1D28  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  7601     1D29  3003               	movlw	3
  7602     1D2A  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  7603     1D2B  3000               	movlw	0
  7604     1D2C  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  7605     1D2D  319D  25F2  319D   	fcall	_GenericQueue_Init
  7606                           
  7607                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  7608     1D30  3064               	movlw	low _PS2Keyboard_ClockInterrupt
  7609     1D31  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  7610     1D32  3006               	movlw	high _PS2Keyboard_ClockInterrupt
  7611     1D33  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7612     1D34  319A  22E8  319D   	fcall	_IOCAF4_SetInterruptHandler
  7613                           
  7614                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  7615     1D37  30BF               	movlw	low _PS2Keyboard_DataInterrupt
  7616     1D38  0021               	movlb	1	; select bank1
  7617     1D39  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  7618     1D3A  301B               	movlw	high _PS2Keyboard_DataInterrupt
  7619     1D3B  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  7620     1D3C  319A  22F0         	fcall	_IOCAF5_SetInterruptHandler
  7621     1D3E  0008               	return
  7622     1D3F                     __end_of_PS2Keyboard_Init:
  7623                           
  7624                           	psect	text29
  7625     1AF0                     __ptext29:	
  7626 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  7627 ;; Defined at:
  7628 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7631 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;		None
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg
  7638 ;; Tracked objects:
  7639 ;;		On entry : 1F/1
  7640 ;;		On exit  : 1F/3
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7643 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;Total ram usage:        2 bytes
  7648 ;; Hardware stack levels used: 1
  7649 ;; Hardware stack levels required when called: 10
  7650 ;; This function calls:
  7651 ;;		Nothing
  7652 ;; This function is called by:
  7653 ;;		_PIN_MANAGER_Initialize
  7654 ;;		_PS2Keyboard_Init
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658     1AF0                     _IOCAF5_SetInterruptHandler:	
  7659                           ;psect for function _IOCAF5_SetInterruptHandler
  7660                           
  7661                           
  7662                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  7663                           
  7664                           ;incstack = 0
  7665                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  7666     1AF0  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7667     1AF1  0023               	movlb	3	; select bank3
  7668     1AF2  00EA               	movwf	(_IOCAF5_InterruptHandler+1)^(0+384)
  7669     1AF3  0021               	movlb	1	; select bank1
  7670     1AF4  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  7671     1AF5  0023               	movlb	3	; select bank3
  7672     1AF6  00E9               	movwf	_IOCAF5_InterruptHandler^(0+384)
  7673     1AF7  0008               	return
  7674     1AF8                     __end_of_IOCAF5_SetInterruptHandler:
  7675                           
  7676                           	psect	text30
  7677     1AE8                     __ptext30:	
  7678 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  7679 ;; Defined at:
  7680 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  7681 ;; Parameters:    Size  Location     Type
  7682 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  7683 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;                  1    wreg      void 
  7688 ;; Registers used:
  7689 ;;		wreg
  7690 ;; Tracked objects:
  7691 ;;		On entry : 1F/1
  7692 ;;		On exit  : 1F/3
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7695 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7698 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7699 ;;Total ram usage:        2 bytes
  7700 ;; Hardware stack levels used: 1
  7701 ;; Hardware stack levels required when called: 10
  7702 ;; This function calls:
  7703 ;;		Nothing
  7704 ;; This function is called by:
  7705 ;;		_PIN_MANAGER_Initialize
  7706 ;;		_PS2Keyboard_Init
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710     1AE8                     _IOCAF4_SetInterruptHandler:	
  7711                           ;psect for function _IOCAF4_SetInterruptHandler
  7712                           
  7713                           
  7714                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  7715                           
  7716                           ;incstack = 0
  7717                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  7718     1AE8  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  7719     1AE9  0023               	movlb	3	; select bank3
  7720     1AEA  00EC               	movwf	(_IOCAF4_InterruptHandler+1)^(0+384)
  7721     1AEB  0021               	movlb	1	; select bank1
  7722     1AEC  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  7723     1AED  0023               	movlb	3	; select bank3
  7724     1AEE  00EB               	movwf	_IOCAF4_InterruptHandler^(0+384)
  7725     1AEF  0008               	return
  7726     1AF0                     __end_of_IOCAF4_SetInterruptHandler:
  7727                           
  7728                           	psect	text31
  7729     1DF2                     __ptext31:	
  7730 ;; *************** function _GenericQueue_Init *****************
  7731 ;; Defined at:
  7732 ;;		line 4 in file "generic_queue.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  q               2    0[BANK1 ] PTR struct .
  7735 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  7736 ;;  element_size    2    2[BANK1 ] unsigned int 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;		None
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 1F/1
  7745 ;;		On exit  : 1F/1
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7748 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;Total ram usage:        4 bytes
  7753 ;; Hardware stack levels used: 1
  7754 ;; Hardware stack levels required when called: 10
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_PS2Keyboard_Init
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762     1DF2                     _GenericQueue_Init:	
  7763                           ;psect for function _GenericQueue_Init
  7764                           
  7765                           
  7766                           ;generic_queue.c: 5:     q->element_size = element_size;
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  7770     1DF2  0828               	movf	GenericQueue_Init@q^(0+128),w
  7771     1DF3  3E5A               	addlw	90
  7772     1DF4  0086               	movwf	6
  7773     1DF5  3000               	movlw	0
  7774     1DF6  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7775     1DF7  0087               	movwf	7
  7776     1DF8  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  7777     1DF9  3FC0               	movwi [0]fsr1
  7778     1DFA  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  7779     1DFB  3FC1               	movwi [1]fsr1
  7780                           
  7781                           ;generic_queue.c: 6:     q->front = 0;
  7782     1DFC  0828               	movf	GenericQueue_Init@q^(0+128),w
  7783     1DFD  3E5C               	addlw	92
  7784     1DFE  0086               	movwf	6
  7785     1DFF  3000               	movlw	0
  7786     1E00  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7787     1E01  0087               	movwf	7
  7788     1E02  0181               	clrf	1
  7789                           
  7790                           ;generic_queue.c: 7:     q->rear = 0;
  7791     1E03  0828               	movf	GenericQueue_Init@q^(0+128),w
  7792     1E04  3E5D               	addlw	93
  7793     1E05  0086               	movwf	6
  7794     1E06  3000               	movlw	0
  7795     1E07  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7796     1E08  0087               	movwf	7
  7797     1E09  0181               	clrf	1
  7798                           
  7799                           ;generic_queue.c: 8:     q->size = 0;
  7800     1E0A  0828               	movf	GenericQueue_Init@q^(0+128),w
  7801     1E0B  3E5E               	addlw	94
  7802     1E0C  0086               	movwf	6
  7803     1E0D  3000               	movlw	0
  7804     1E0E  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  7805     1E0F  0087               	movwf	7
  7806     1E10  0181               	clrf	1
  7807     1E11  0008               	return
  7808     1E12                     __end_of_GenericQueue_Init:
  7809                           
  7810                           	psect	text32
  7811     1D5B                     __ptext32:	
  7812 ;; *************** function _PS2Keyboard_GetScanCode *****************
  7813 ;; Defined at:
  7814 ;;		line 49 in file "ps2_keyboard.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  7817 ;;		 -> main@scanCode(3), 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  7820 ;;		 -> main@scanCode(3), 
  7821 ;;  ret             1   32[BANK1 ] _Bool 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      _Bool 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 2/1
  7828 ;;		On exit  : 1F/1
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used: 1
  7837 ;; Hardware stack levels required when called: 12
  7838 ;; This function calls:
  7839 ;;		_GenericQueue_Dequeue
  7840 ;;		_GenericQueue_IsEmpty
  7841 ;; This function is called by:
  7842 ;;		_main
  7843 ;; This function uses a non-reentrant model
  7844 ;;
  7845                           
  7846     1D5B                     _PS2Keyboard_GetScanCode:	
  7847                           ;psect for function _PS2Keyboard_GetScanCode
  7848                           
  7849                           
  7850                           ;incstack = 0
  7851                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7852                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  7853     1D5B  0021               	movlb	1	; select bank1
  7854     1D5C  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  7855                           
  7856                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  7857     1D5D  3091               	movlw	145
  7858     1D5E  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7859     1D5F  3023               	movlw	35
  7860     1D60  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  7861     1D61  319B  23F2  319D   	fcall	_GenericQueue_IsEmpty
  7862     1D64  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7863     1D65  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7864     1D66  1D03               	btfss	3,2
  7865     1D67  2D74               	goto	l6222
  7866                           
  7867                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  7868     1D68  3091               	movlw	145
  7869     1D69  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  7870     1D6A  3023               	movlw	35
  7871     1D6B  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  7872     1D6C  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  7873     1D6D  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  7874     1D6E  3196  264E  319D   	fcall	_GenericQueue_Dequeue
  7875                           
  7876                           ;ps2_keyboard.c: 53:         ret = 1;
  7877     1D71  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7878     1D72  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  7879                           
  7880                           ;ps2_keyboard.c: 54:     } else {
  7881     1D73  2D75               	goto	l6224
  7882     1D74                     l6222:
  7883                           
  7884                           ;ps2_keyboard.c: 55:         ret = 0;
  7885     1D74  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  7886     1D75                     l6224:
  7887                           
  7888                           ;ps2_keyboard.c: 57:     return ret;
  7889     1D75  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  7890     1D76  0008               	return
  7891     1D77                     __end_of_PS2Keyboard_GetScanCode:
  7892                           
  7893                           	psect	text33
  7894     164E                     __ptext33:	
  7895 ;; *************** function _GenericQueue_Dequeue *****************
  7896 ;; Defined at:
  7897 ;;		line 27 in file "generic_queue.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  q               2   24[BANK1 ] PTR struct .
  7900 ;;		 -> keyboardScanCodeQueue(95), 
  7901 ;;  item            1   26[BANK1 ] PTR void 
  7902 ;;		 -> main@scanCode(3), 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;		None
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      void 
  7907 ;; Registers used:
  7908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 1F/1
  7911 ;;		On exit  : 1F/1
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:        7 bytes
  7919 ;; Hardware stack levels used: 1
  7920 ;; Hardware stack levels required when called: 11
  7921 ;; This function calls:
  7922 ;;		_GenericQueue_IsEmpty
  7923 ;;		___awmod
  7924 ;;		___wmul
  7925 ;;		_memcpy
  7926 ;; This function is called by:
  7927 ;;		_PS2Keyboard_GetScanCode
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931     164E                     _GenericQueue_Dequeue:	
  7932                           ;psect for function _GenericQueue_Dequeue
  7933                           
  7934                           
  7935                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  7936                           
  7937                           ;incstack = 0
  7938                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7939     164E  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  7940     164F  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  7941     1650  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7942     1651  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  7943     1652  319B  23F2  3196   	fcall	_GenericQueue_IsEmpty
  7944     1655  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  7945     1656  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  7946     1657  1D03               	btfss	3,2
  7947     1658  0008               	return
  7948                           
  7949                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  7950     1659  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  7951     165A  00B5               	movwf	memcpy@d1^(0+128)
  7952     165B  3001               	movlw	1
  7953     165C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  7954     165D  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7955     165E  3E5C               	addlw	92
  7956     165F  0086               	movwf	6
  7957     1660  3000               	movlw	0
  7958     1661  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7959     1662  0087               	movwf	7
  7960     1663  0801               	movf	1,w
  7961     1664  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  7962     1665  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  7963     1666  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  7964     1667  00AF               	movwf	___wmul@multiplier^(0+128)
  7965     1668  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  7966     1669  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7967     166A  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7968     166B  3E5A               	addlw	90
  7969     166C  0086               	movwf	6
  7970     166D  3000               	movlw	0
  7971     166E  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7972     166F  0087               	movwf	7
  7973     1670  3F40               	moviw [0]fsr1
  7974     1671  00B1               	movwf	___wmul@multiplicand^(0+128)
  7975     1672  3F41               	moviw [1]fsr1
  7976     1673  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7977     1674  319D  2509  3196   	fcall	___wmul
  7978     1677  082F               	movf	?___wmul^(0+128),w
  7979     1678  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  7980     1679  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  7981     167A  0830               	movf	(?___wmul+1)^(0+128),w
  7982     167B  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7983     167C  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  7984     167D  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  7985     167E  00B7               	movwf	memcpy@s1^(0+128)
  7986     167F  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  7987     1680  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7988     1681  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  7989     1682  3E5A               	addlw	90
  7990     1683  0086               	movwf	6
  7991     1684  3000               	movlw	0
  7992     1685  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  7993     1686  0087               	movwf	7
  7994     1687  3F40               	moviw [0]fsr1
  7995     1688  00B9               	movwf	memcpy@n^(0+128)
  7996     1689  3F41               	moviw [1]fsr1
  7997     168A  00BA               	movwf	(memcpy@n+1)^(0+128)
  7998     168B  319E  26C2  3196   	fcall	_memcpy
  7999                           
  8000                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  8001     168E  300F               	movlw	15
  8002     168F  00A8               	movwf	___awmod@divisor^(0+128)
  8003     1690  3000               	movlw	0
  8004     1691  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8005     1692  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  8006     1693  3E5C               	addlw	92
  8007     1694  0086               	movwf	6
  8008     1695  3000               	movlw	0
  8009     1696  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  8010     1697  0087               	movwf	7
  8011     1698  0801               	movf	1,w
  8012     1699  3E01               	addlw	1
  8013     169A  00AA               	movwf	___awmod@dividend^(0+128)
  8014     169B  3000               	movlw	0
  8015     169C  1803               	skipnc
  8016     169D  3001               	movlw	1
  8017     169E  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8018     169F  3191  21B5         	fcall	___awmod
  8019     16A1  0828               	movf	?___awmod^(0+128),w
  8020     16A2  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  8021     16A3  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  8022     16A4  3E5C               	addlw	92
  8023     16A5  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  8024     16A6  3000               	movlw	0
  8025     16A7  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  8026     16A8  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  8027     16A9  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  8028     16AA  0086               	movwf	6
  8029     16AB  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  8030     16AC  0087               	movwf	7
  8031     16AD  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  8032     16AE  0081               	movwf	1
  8033                           
  8034                           ;generic_queue.c: 31:         q->size--;
  8035     16AF  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  8036     16B0  3E5E               	addlw	94
  8037     16B1  0086               	movwf	6
  8038     16B2  3000               	movlw	0
  8039     16B3  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  8040     16B4  0087               	movwf	7
  8041     16B5  3001               	movlw	1
  8042     16B6  0281               	subwf	1,f
  8043     16B7  0008               	return
  8044     16B8                     __end_of_GenericQueue_Dequeue:
  8045                           
  8046                           	psect	text34
  8047     1AE0                     __ptext34:	
  8048 ;; *************** function _EUSART_is_tx_ready *****************
  8049 ;; Defined at:
  8050 ;;		line 132 in file "mcc_generated_files/eusart.c"
  8051 ;; Parameters:    Size  Location     Type
  8052 ;;		None
  8053 ;; Auto vars:     Size  Location     Type
  8054 ;;		None
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      _Bool 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 1D/2
  8061 ;;		On exit  : 1F/2
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        0 bytes
  8069 ;; Hardware stack levels used: 1
  8070 ;; Hardware stack levels required when called: 10
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_main
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078     1AE0                     _EUSART_is_tx_ready:	
  8079                           ;psect for function _EUSART_is_tx_ready
  8080                           
  8081                           
  8082                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  8083                           
  8084                           ;incstack = 0
  8085                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  8086     1AE0  0022               	movlb	2	; select bank2
  8087     1AE1  0847               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  8088     1AE2  1903               	btfsc	3,2
  8089     1AE3  2AE6               	goto	u5770
  8090     1AE4  3001               	movlw	1
  8091     1AE5  0008               	return
  8092     1AE6                     u5770:
  8093     1AE6  3000               	movlw	0
  8094     1AE7  0008               	return
  8095     1AE8                     __end_of_EUSART_is_tx_ready:
  8096                           
  8097                           	psect	text35
  8098     1E77                     __ptext35:	
  8099 ;; *************** function _EUSART_Write *****************
  8100 ;; Defined at:
  8101 ;;		line 173 in file "mcc_generated_files/eusart.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;  txData          1    wreg     unsigned char 
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  txData          1    1[BANK1 ] unsigned char 
  8106 ;; Return value:  Size  Location     Type
  8107 ;;                  1    wreg      void 
  8108 ;; Registers used:
  8109 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8110 ;; Tracked objects:
  8111 ;;		On entry : 1F/2
  8112 ;;		On exit  : 1F/1
  8113 ;;		Unchanged: 0/0
  8114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8118 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8119 ;;Total ram usage:        2 bytes
  8120 ;; Hardware stack levels used: 1
  8121 ;; Hardware stack levels required when called: 10
  8122 ;; This function calls:
  8123 ;;		Nothing
  8124 ;; This function is called by:
  8125 ;;		_main
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129     1E77                     _EUSART_Write:	
  8130                           ;psect for function _EUSART_Write
  8131                           
  8132                           
  8133                           ;incstack = 0
  8134                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  8135                           ;EUSART_Write@txData stored from wreg
  8136     1E77  0021               	movlb	1	; select bank1
  8137     1E78  00A9               	movwf	EUSART_Write@txData^(0+128)
  8138     1E79                     l6156:	
  8139                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  8140                           
  8141                           
  8142                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  8143     1E79  0022               	movlb	2	; select bank2
  8144     1E7A  0847               	movf	_eusartTxBufferRemaining^(0+256),w	;volatile
  8145     1E7B  1903               	btfsc	3,2
  8146     1E7C  2E79               	goto	l6156
  8147                           
  8148                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  8149     1E7D  0021               	movlb	1	; select bank1
  8150     1E7E  1A11               	btfsc	17,4	;volatile
  8151     1E7F  2E84               	goto	l299
  8152                           
  8153                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  8154     1E80  0829               	movf	EUSART_Write@txData^(0+128),w
  8155     1E81  0023               	movlb	3	; select bank3
  8156     1E82  009A               	movwf	26	;volatile
  8157                           
  8158                           ;mcc_generated_files/eusart.c: 182:     }
  8159     1E83  2E99               	goto	l6170
  8160     1E84                     l299:	
  8161                           ;mcc_generated_files/eusart.c: 183:     else
  8162                           
  8163                           
  8164                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  8165     1E84  1211               	bcf	17,4	;volatile
  8166                           
  8167                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  8168     1E85  0022               	movlb	2	; select bank2
  8169     1E86  0849               	movf	_eusartTxHead^(0+256),w
  8170     1E87  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  8171     1E88  0086               	movwf	6
  8172     1E89  3001               	movlw	1	; select bank3/4
  8173     1E8A  0087               	movwf	7
  8174     1E8B  0021               	movlb	1	; select bank1
  8175     1E8C  0829               	movf	EUSART_Write@txData^(0+128),w
  8176     1E8D  0081               	movwf	1
  8177     1E8E  3001               	movlw	1
  8178     1E8F  00A8               	movwf	??_EUSART_Write^(0+128)
  8179     1E90  0828               	movf	??_EUSART_Write^(0+128),w
  8180     1E91  0022               	movlb	2	; select bank2
  8181     1E92  07C9               	addwf	_eusartTxHead^(0+256),f	;volatile
  8182                           
  8183                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  8184     1E93  3008               	movlw	8
  8185     1E94  0249               	subwf	_eusartTxHead^(0+256),w
  8186     1E95  1803               	btfsc	3,0
  8187                           
  8188                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  8189     1E96  01C9               	clrf	_eusartTxHead^(0+256)	;volatile
  8190                           
  8191                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  8192     1E97  3001               	movlw	1
  8193     1E98  02C7               	subwf	_eusartTxBufferRemaining^(0+256),f	;volatile
  8194     1E99                     l6170:
  8195                           
  8196                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  8197     1E99  0021               	movlb	1	; select bank1
  8198     1E9A  1611               	bsf	17,4	;volatile
  8199     1E9B  0008               	return
  8200     1E9C                     __end_of_EUSART_Write:
  8201                           
  8202                           	psect	text36
  8203     034C                     __ptext36:	
  8204 ;; *************** function _APP_KeyboardTasks *****************
  8205 ;; Defined at:
  8206 ;;		line 333 in file "app_device_keyboard.c"
  8207 ;; Parameters:    Size  Location     Type
  8208 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8209 ;;		 -> main@scanCode(3), NULL(0), 
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  8212 ;;		 -> main@scanCode(3), NULL(0), 
  8213 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  8214 ;;  i               1   47[BANK1 ] unsigned char 
  8215 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      void 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 1F/2
  8222 ;;		On exit  : 2/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        7 bytes
  8230 ;; Hardware stack levels used: 1
  8231 ;; Hardware stack levels required when called: 13
  8232 ;; This function calls:
  8233 ;;		_APP_KeyboardProcessOutputReport
  8234 ;;		_APP_KeyboardUpdateState
  8235 ;;		_GenericQueue_CopyToArray
  8236 ;;		_USBTransferOnePacket
  8237 ;;		_memset
  8238 ;; This function is called by:
  8239 ;;		_main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243     034C                     _APP_KeyboardTasks:	
  8244                           ;psect for function _APP_KeyboardTasks
  8245                           
  8246                           
  8247                           ;incstack = 0
  8248                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8249                           ;APP_KeyboardTasks@scanCode stored from wreg
  8250     034C  0021               	movlb	1	; select bank1
  8251     034D  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  8252                           
  8253                           ;app_device_keyboard.c: 334:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 335:     unsigned char i;;app_device_keyboard.c: 336:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 339:     APP_KeyboardUpdateState(scanCode);
  8254     034E  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  8255     034F  3180  207F  3183   	fcall	_APP_KeyboardUpdateState
  8256                           
  8257                           ;app_device_keyboard.c: 344:     if (USBDeviceState < CONFIGURED_STATE) {
  8258     0352  3020               	movlw	32
  8259     0353  0020               	movlb	0	; select bank0
  8260     0354  026C               	subwf	_USBDeviceState,w
  8261     0355  1C03               	btfss	3,0
  8262     0356  0008               	return
  8263                           
  8264                           ;app_device_keyboard.c: 352:     if (UCONbits.SUSPND == 1) {
  8265                           
  8266                           ;app_device_keyboard.c: 346:     }
  8267     0357  003D               	movlb	29	; select bank29
  8268     0358  188E               	btfsc	14,1	;volatile
  8269     0359  0008               	return
  8270     035A                     l925:	
  8271                           ;app_device_keyboard.c: 368:     }
  8272                           
  8273                           
  8274                           ;app_device_keyboard.c: 366:     while (LocalSOFCount != SOFCounter) {
  8275     035A  0020               	movlb	0	; select bank0
  8276     035B  0866               	movf	_SOFCounter+1,w	;volatile
  8277     035C  0022               	movlb	2	; select bank2
  8278     035D  062F               	xorwf	(_LocalSOFCount+1)^(0+256),w
  8279     035E  1D03               	skipz
  8280     035F  2B64               	goto	u7095
  8281     0360  0020               	movlb	0	; select bank0
  8282     0361  0865               	movf	_SOFCounter,w	;volatile
  8283     0362  0022               	movlb	2	; select bank2
  8284     0363  062E               	xorwf	_LocalSOFCount^(0+256),w
  8285     0364                     u7095:
  8286     0364  1903               	btfsc	3,2
  8287     0365  2B6F               	goto	l6940
  8288                           
  8289                           ;app_device_keyboard.c: 367:         LocalSOFCount = SOFCounter;
  8290     0366  0020               	movlb	0	; select bank0
  8291     0367  0866               	movf	_SOFCounter+1,w	;volatile
  8292     0368  0022               	movlb	2	; select bank2
  8293     0369  00AF               	movwf	(_LocalSOFCount+1)^(0+256)
  8294     036A  0020               	movlb	0	; select bank0
  8295     036B  0865               	movf	_SOFCounter,w	;volatile
  8296     036C  0022               	movlb	2	; select bank2
  8297     036D  00AE               	movwf	_LocalSOFCount^(0+256)
  8298     036E  2B5A               	goto	l925
  8299     036F                     l6940:
  8300                           
  8301                           ;app_device_keyboard.c: 372:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  8302     036F  0023               	movlb	3	; select bank3
  8303     0370  084D               	movf	_OldSOFCount^(0+384),w
  8304     0371  0022               	movlb	2	; select bank2
  8305     0372  022E               	subwf	_LocalSOFCount^(0+256),w
  8306     0373  0021               	movlb	1	; select bank1
  8307     0374  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8308     0375  0023               	movlb	3	; select bank3
  8309     0376  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8310     0377  0022               	movlb	2	; select bank2
  8311     0378  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8312     0379  0021               	movlb	1	; select bank1
  8313     037A  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8314                           
  8315                           ;app_device_keyboard.c: 374:     if (TimeDeltaMilliseconds < 0) {
  8316     037B  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  8317     037C  2B8F               	goto	l6946
  8318                           
  8319                           ;app_device_keyboard.c: 375:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  8320     037D  0023               	movlb	3	; select bank3
  8321     037E  084D               	movf	_OldSOFCount^(0+384),w
  8322     037F  0022               	movlb	2	; select bank2
  8323     0380  022E               	subwf	_LocalSOFCount^(0+256),w
  8324     0381  0021               	movlb	1	; select bank1
  8325     0382  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8326     0383  0023               	movlb	3	; select bank3
  8327     0384  084E               	movf	(_OldSOFCount+1)^(0+384),w
  8328     0385  0022               	movlb	2	; select bank2
  8329     0386  3B2F               	subwfb	(_LocalSOFCount+1)^(0+256),w
  8330     0387  0021               	movlb	1	; select bank1
  8331     0388  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  8332     0389  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  8333     038A  3EFF               	addlw	255
  8334     038B  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  8335     038C  307F               	movlw	127
  8336     038D  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  8337     038E  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  8338     038F                     l6946:
  8339                           
  8340                           ;app_device_keyboard.c: 382:     if (TimeDeltaMilliseconds > 5000) {
  8341     038F  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8342     0390  3A80               	xorlw	128
  8343     0391  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8344     0392  3093               	movlw	147
  8345     0393  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  8346     0394  1D03               	skipz
  8347     0395  2B98               	goto	u7115
  8348     0396  3089               	movlw	137
  8349     0397  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8350     0398                     u7115:
  8351     0398  1C03               	skipc
  8352     0399  2BA4               	goto	l6950
  8353                           
  8354                           ;app_device_keyboard.c: 383:         OldSOFCount = LocalSOFCount - 5000;
  8355     039A  0022               	movlb	2	; select bank2
  8356     039B  082E               	movf	_LocalSOFCount^(0+256),w
  8357     039C  3E78               	addlw	120
  8358     039D  0023               	movlb	3	; select bank3
  8359     039E  00CD               	movwf	_OldSOFCount^(0+384)
  8360     039F  30EC               	movlw	236
  8361     03A0  0022               	movlb	2	; select bank2
  8362     03A1  3D2F               	addwfc	(_LocalSOFCount+1)^(0+256),w
  8363     03A2  0023               	movlb	3	; select bank3
  8364     03A3  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8365     03A4                     l6950:
  8366                           
  8367                           ;app_device_keyboard.c: 389:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  8368     03A4  302C               	movlw	44
  8369     03A5  0086               	movwf	6
  8370     03A6  3023               	movlw	35
  8371     03A7  0087               	movwf	7
  8372     03A8  0016               	moviw fsr1++
  8373     03A9  0401               	iorwf	1,w
  8374     03AA  1903               	btfsc	3,2
  8375     03AB  2BBB               	goto	l6954
  8376     03AC  302C               	movlw	44
  8377     03AD  0086               	movwf	6
  8378     03AE  3023               	movlw	35
  8379     03AF  0087               	movwf	7
  8380     03B0  3F40               	moviw [0]fsr1
  8381     03B1  0021               	movlb	1	; select bank1
  8382     03B2  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8383     03B3  3F41               	moviw [1]fsr1
  8384     03B4  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8385     03B5  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  8386     03B6  0086               	movwf	6
  8387     03B7  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8388     03B8  0087               	movwf	7
  8389     03B9  1B81               	btfsc	1,7
  8390     03BA  2C3A               	goto	l6988
  8391     03BB                     l6954:
  8392                           
  8393                           ;app_device_keyboard.c: 391:         memset(&inputReport, 0, sizeof (inputReport));
  8394     03BB  30A0               	movlw	160
  8395     03BC  0021               	movlb	1	; select bank1
  8396     03BD  00A8               	movwf	memset@dest^(0+128)
  8397     03BE  3000               	movlw	0
  8398     03BF  00A9               	movwf	(memset@dest+1)^(0+128)
  8399     03C0  3000               	movlw	0
  8400     03C1  00AA               	movwf	memset@c^(0+128)
  8401     03C2  00AB               	movwf	(memset@c+1)^(0+128)
  8402     03C3  3008               	movlw	8
  8403     03C4  00AC               	movwf	memset@n^(0+128)
  8404     03C5  3000               	movlw	0
  8405     03C6  00AD               	movwf	(memset@n^(0+128)+1)
  8406     03C7  319C  24A3  3183   	fcall	_memset
  8407                           
  8408                           ;app_device_keyboard.c: 393:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  8409     03CA  3030               	movlw	48
  8410     03CB  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  8411     03CC  3023               	movlw	35
  8412     03CD  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  8413     03CE  30A2               	movlw	162
  8414     03CF  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  8415     03D0  3194  244E  3183   	fcall	_GenericQueue_CopyToArray
  8416                           
  8417                           ;app_device_keyboard.c: 394:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  8418     03D3  308F               	movlw	143
  8419     03D4  0086               	movwf	6
  8420     03D5  3023               	movlw	35
  8421     03D6  0087               	movwf	7
  8422     03D7  0801               	movf	1,w
  8423     03D8  00A0               	movwf	32
  8424                           
  8425                           ;app_device_keyboard.c: 397:         needToSendNewReportPacket = 0;
  8426     03D9  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8427                           
  8428                           ;app_device_keyboard.c: 398:         for (i = 0; i < sizeof (inputReport); i++) {
  8429     03DA  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  8430     03DB                     l6966:
  8431                           
  8432                           ;app_device_keyboard.c: 399:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  8433     03DB  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  8434     03DC  3EA0               	addlw	160
  8435     03DD  0086               	movwf	6
  8436     03DE  0187               	clrf	7
  8437     03DF  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  8438     03E0  3E2A               	addlw	(low (_oldInputReport| (0+512)))& (0+255)
  8439     03E1  0084               	movwf	4
  8440     03E2  3002               	movlw	2	; select bank4/5
  8441     03E3  0085               	movwf	5
  8442     03E4  0800               	movf	0,w
  8443     03E5  0601               	xorwf	1,w
  8444     03E6  1903               	skipnz
  8445     03E7  2BEB               	goto	l6970
  8446                           
  8447                           ;app_device_keyboard.c: 400:                 needToSendNewReportPacket = 1;
  8448     03E8  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8449     03E9  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8450                           
  8451                           ;app_device_keyboard.c: 401:                 break;
  8452     03EA  2BF3               	goto	l6974
  8453     03EB                     l6970:
  8454                           
  8455                           ;app_device_keyboard.c: 403:         }
  8456     03EB  3001               	movlw	1
  8457     03EC  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8458     03ED  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  8459     03EE  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  8460     03EF  3008               	movlw	8
  8461     03F0  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  8462     03F1  1C03               	skipc
  8463     03F2  2BDB               	goto	l6966
  8464     03F3                     l6974:
  8465                           
  8466                           ;app_device_keyboard.c: 408:         if (keyboardIdleRate != 0) {
  8467     03F3  0023               	movlb	3	; select bank3
  8468     03F4  084F               	movf	_keyboardIdleRate^(0+384),w
  8469     03F5  0450               	iorwf	(_keyboardIdleRate+1)^(0+384),w
  8470     03F6  1903               	btfsc	3,2
  8471     03F7  2C0C               	goto	l6980
  8472                           
  8473                           ;app_device_keyboard.c: 410:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  8474     03F8  0021               	movlb	1	; select bank1
  8475     03F9  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  8476     03FA  3A80               	xorlw	128
  8477     03FB  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8478     03FC  0023               	movlb	3	; select bank3
  8479     03FD  0850               	movf	(_keyboardIdleRate+1)^(0+384),w
  8480     03FE  3A80               	xorlw	128
  8481     03FF  0021               	movlb	1	; select bank1
  8482     0400  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  8483     0401  1D03               	skipz
  8484     0402  2C07               	goto	u7175
  8485     0403  0023               	movlb	3	; select bank3
  8486     0404  084F               	movf	_keyboardIdleRate^(0+384),w
  8487     0405  0021               	movlb	1	; select bank1
  8488     0406  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  8489     0407                     u7175:
  8490     0407  1C03               	skipc
  8491     0408  2C0C               	goto	l6980
  8492                           
  8493                           ;app_device_keyboard.c: 411:                 needToSendNewReportPacket = 1;
  8494     0409  0021               	movlb	1	; select bank1
  8495     040A  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  8496     040B  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  8497     040C                     l6980:
  8498                           
  8499                           ;app_device_keyboard.c: 417:         if (needToSendNewReportPacket == 1) {
  8500     040C  0021               	movlb	1	; select bank1
  8501     040D  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  8502     040E  1D03               	btfss	3,2
  8503     040F  2C3A               	goto	l6988
  8504                           
  8505                           ;app_device_keyboard.c: 421:             oldInputReport = inputReport;
  8506     0410  30A0               	movlw	160
  8507     0411  0086               	movwf	6
  8508     0412  3000               	movlw	0
  8509     0413  0087               	movwf	7
  8510     0414  302A               	movlw	low _oldInputReport
  8511     0415  0084               	movwf	4
  8512     0416  3002               	movlw	high _oldInputReport
  8513     0417  0085               	movwf	5
  8514     0418  3008               	movlw	8
  8515     0419  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8516     041A                     u7190:
  8517     041A  0016               	moviw fsr1++
  8518     041B  001A               	movwi fsr0++
  8519     041C  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  8520     041D  2C1A               	goto	u7190
  8521                           
  8522                           ;app_device_keyboard.c: 424:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  8523     041E  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8524     041F  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  8525     0420  30A0               	movlw	160
  8526     0421  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8527     0422  3000               	movlw	0
  8528     0423  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8529     0424  3008               	movlw	8
  8530     0425  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  8531     0426  3001               	movlw	1
  8532     0427  318A  22AB  3183   	fcall	_USBTransferOnePacket
  8533     042A  302C               	movlw	44
  8534     042B  0086               	movwf	6
  8535     042C  3023               	movlw	35
  8536     042D  0087               	movwf	7
  8537     042E  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8538     042F  3FC0               	movwi [0]fsr1
  8539     0430  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8540     0431  3FC1               	movwi [1]fsr1
  8541                           
  8542                           ;app_device_keyboard.c: 425:             OldSOFCount = LocalSOFCount;
  8543     0432  0022               	movlb	2	; select bank2
  8544     0433  082F               	movf	(_LocalSOFCount+1)^(0+256),w
  8545     0434  0023               	movlb	3	; select bank3
  8546     0435  00CE               	movwf	(_OldSOFCount+1)^(0+384)
  8547     0436  0022               	movlb	2	; select bank2
  8548     0437  082E               	movf	_LocalSOFCount^(0+256),w
  8549     0438  0023               	movlb	3	; select bank3
  8550     0439  00CD               	movwf	_OldSOFCount^(0+384)
  8551     043A                     l6988:
  8552                           
  8553                           ;app_device_keyboard.c: 437:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  8554     043A  302C               	movlw	44
  8555     043B  0086               	movwf	6
  8556     043C  3023               	movlw	35
  8557     043D  0087               	movwf	7
  8558     043E  3142               	addfsr 1,2
  8559     043F  0016               	moviw fsr1++
  8560     0440  0401               	iorwf	1,w
  8561     0441  1903               	btfsc	3,2
  8562     0442  2C53               	goto	l6992
  8563     0443  302C               	movlw	44
  8564     0444  0086               	movwf	6
  8565     0445  3023               	movlw	35
  8566     0446  0087               	movwf	7
  8567     0447  3142               	addfsr 1,2
  8568     0448  3F40               	moviw [0]fsr1
  8569     0449  0021               	movlb	1	; select bank1
  8570     044A  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  8571     044B  3F41               	moviw [1]fsr1
  8572     044C  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  8573     044D  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  8574     044E  0086               	movwf	6
  8575     044F  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  8576     0450  0087               	movwf	7
  8577     0451  1B81               	btfsc	1,7
  8578     0452  0008               	return
  8579     0453                     l6992:
  8580                           
  8581                           ;app_device_keyboard.c: 438:         APP_KeyboardProcessOutputReport();
  8582     0453  319B  2350  3183   	fcall	_APP_KeyboardProcessOutputReport
  8583                           
  8584                           ;app_device_keyboard.c: 439:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  8585     0456  0021               	movlb	1	; select bank1
  8586     0457  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  8587     0458  3020               	movlw	32
  8588     0459  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  8589     045A  3001               	movlw	1
  8590     045B  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  8591     045C  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  8592     045D  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  8593     045E  3001               	movlw	1
  8594     045F  318A  22AB         	fcall	_USBTransferOnePacket
  8595     0461  302C               	movlw	44
  8596     0462  0086               	movwf	6
  8597     0463  3023               	movlw	35
  8598     0464  0087               	movwf	7
  8599     0465  3142               	addfsr 1,2
  8600     0466  0828               	movf	?_USBTransferOnePacket^(0+128),w
  8601     0467  3FC0               	movwi [0]fsr1
  8602     0468  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  8603     0469  3FC1               	movwi [1]fsr1
  8604     046A  0008               	return
  8605     046B                     __end_of_APP_KeyboardTasks:
  8606                           
  8607                           	psect	text37
  8608     1CA3                     __ptext37:	
  8609 ;; *************** function _memset *****************
  8610 ;; Defined at:
  8611 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  dest            2    0[BANK1 ] PTR void 
  8614 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8615 ;;  c               2    2[BANK1 ] int 
  8616 ;;  n               2    4[BANK1 ] unsigned int 
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;  p               2    6[BANK1 ] PTR unsigned char 
  8619 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  8620 ;; Return value:  Size  Location     Type
  8621 ;;                  2    0[BANK1 ] PTR void 
  8622 ;; Registers used:
  8623 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8624 ;; Tracked objects:
  8625 ;;		On entry : 1F/1
  8626 ;;		On exit  : 1F/1
  8627 ;;		Unchanged: 0/0
  8628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8629 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8630 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;Total ram usage:        8 bytes
  8634 ;; Hardware stack levels used: 1
  8635 ;; Hardware stack levels required when called: 10
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		_APP_KeyboardTasks
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643     1CA3                     _memset:	
  8644                           ;psect for function _memset
  8645                           
  8646                           
  8647                           ;incstack = 0
  8648                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8649     1CA3  0829               	movf	(memset@dest+1)^(0+128),w
  8650     1CA4  00AF               	movwf	(memset@p+1)^(0+128)
  8651     1CA5  0828               	movf	memset@dest^(0+128),w
  8652     1CA6  00AE               	movwf	memset@p^(0+128)
  8653     1CA7                     l6712:
  8654     1CA7  3001               	movlw	1
  8655     1CA8  02AC               	subwf	memset@n^(0+128),f
  8656     1CA9  3000               	movlw	0
  8657     1CAA  3BAD               	subwfb	(memset@n+1)^(0+128),f
  8658     1CAB  0A2C               	incf	memset@n^(0+128),w
  8659     1CAC  1903               	btfsc	3,2
  8660     1CAD  0A2D               	incf	(memset@n+1)^(0+128),w
  8661     1CAE  1903               	btfsc	3,2
  8662     1CAF  0008               	return
  8663     1CB0  082E               	movf	memset@p^(0+128),w
  8664     1CB1  0086               	movwf	6
  8665     1CB2  082F               	movf	(memset@p+1)^(0+128),w
  8666     1CB3  0087               	movwf	7
  8667     1CB4  082A               	movf	memset@c^(0+128),w
  8668     1CB5  0081               	movwf	1
  8669     1CB6  3001               	movlw	1
  8670     1CB7  07AE               	addwf	memset@p^(0+128),f
  8671     1CB8  3000               	movlw	0
  8672     1CB9  3DAF               	addwfc	(memset@p+1)^(0+128),f
  8673     1CBA  2CA7               	goto	l6712
  8674     1CBB                     __end_of_memset:
  8675                           
  8676                           	psect	text38
  8677     0AAB                     __ptext38:	
  8678 ;; *************** function _USBTransferOnePacket *****************
  8679 ;; Defined at:
  8680 ;;		line 999 in file "usb/usb_device.c"
  8681 ;; Parameters:    Size  Location     Type
  8682 ;;  ep              1    wreg     unsigned char 
  8683 ;;  dir             1    0[BANK1 ] unsigned char 
  8684 ;;  data            2    1[BANK1 ] PTR unsigned char 
  8685 ;;		 -> inputReport(8), outputReport(1), 
  8686 ;;  len             1    3[BANK1 ] unsigned char 
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;  ep              1    8[BANK1 ] unsigned char 
  8689 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  8690 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  2    0[BANK1 ] PTR void 
  8693 ;; Registers used:
  8694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8695 ;; Tracked objects:
  8696 ;;		On entry : 1F/1
  8697 ;;		On exit  : 1F/1
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8700 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8703 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;Total ram usage:       11 bytes
  8705 ;; Hardware stack levels used: 1
  8706 ;; Hardware stack levels required when called: 10
  8707 ;; This function calls:
  8708 ;;		Nothing
  8709 ;; This function is called by:
  8710 ;;		_APP_KeyboardTasks
  8711 ;; This function uses a non-reentrant model
  8712 ;;
  8713                           
  8714     0AAB                     _USBTransferOnePacket:	
  8715                           ;psect for function _USBTransferOnePacket
  8716                           
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  8720                           ;USBTransferOnePacket@ep stored from wreg
  8721     0AAB  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  8722                           
  8723                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  8724     0AAC  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  8725     0AAD  1903               	btfsc	3,2
  8726     0AAE  2AB7               	goto	l5774
  8727                           
  8728                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  8729     0AAF  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8730     0AB0  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  8731     0AB1  0086               	movwf	6
  8732     0AB2  0187               	clrf	7
  8733     0AB3  3F40               	moviw [0]fsr1
  8734     0AB4  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  8735     0AB5  3F41               	moviw [1]fsr1
  8736     0AB6  2ABF               	goto	L3
  8737     0AB7                     l5774:	
  8738                           ;usb/usb_device.c: 1008:     }
  8739                           
  8740                           
  8741                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  8742     0AB7  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8743     0AB8  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  8744     0AB9  0086               	movwf	6
  8745     0ABA  3001               	movlw	1	; select bank2/3
  8746     0ABB  0087               	movwf	7
  8747     0ABC  3F40               	moviw [0]fsr1
  8748     0ABD  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  8749     0ABE  3F41               	moviw [1]fsr1
  8750     0ABF                     L3:
  8751     0ABF  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  8752                           
  8753                           ;usb/usb_device.c: 1017:     if(handle == 0)
  8754     0AC0  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8755     0AC1  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  8756     0AC2  1D03               	btfss	3,2
  8757     0AC3  2AC7               	goto	l5782
  8758                           
  8759                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  8760     0AC4  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  8761     0AC5  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  8762     0AC6  0008               	return
  8763     0AC7                     l5782:
  8764                           
  8765                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  8766     0AC7  30FF               	movlw	255
  8767     0AC8  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  8768     0AC9  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  8769     0ACA  307F               	movlw	127
  8770     0ACB  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  8771     0ACC  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  8772     0ACD  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8773     0ACE  0086               	movwf	6
  8774     0ACF  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  8775     0AD0  0087               	movwf	7
  8776     0AD1  3142               	addfsr 1,2
  8777     0AD2  082C               	movf	??_USBTransferOnePacket^(0+128),w
  8778     0AD3  3FC0               	movwi [0]fsr1
  8779     0AD4  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  8780     0AD5  3FC1               	movwi [1]fsr1
  8781                           
  8782                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  8783     0AD6  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8784     0AD7  3E01               	addlw	1
  8785     0AD8  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  8786     0AD9  3000               	movlw	0
  8787     0ADA  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  8788     0ADB  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  8789     0ADC  082C               	movf	??_USBTransferOnePacket^(0+128),w
  8790     0ADD  0086               	movwf	6
  8791     0ADE  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  8792     0ADF  0087               	movwf	7
  8793     0AE0  082B               	movf	USBTransferOnePacket@len^(0+128),w
  8794     0AE1  0081               	movwf	1
  8795                           
  8796                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  8797     0AE2  3040               	movlw	64
  8798     0AE3  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  8799     0AE4  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8800     0AE5  0086               	movwf	6
  8801     0AE6  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  8802     0AE7  0087               	movwf	7
  8803     0AE8  082C               	movf	??_USBTransferOnePacket^(0+128),w
  8804     0AE9  0581               	andwf	1,f
  8805                           
  8806                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  8807     0AEA  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8808     0AEB  0086               	movwf	6
  8809     0AEC  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  8810     0AED  0087               	movwf	7
  8811     0AEE  1581               	bsf	1,3
  8812                           
  8813                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  8814     0AEF  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8815     0AF0  0086               	movwf	6
  8816     0AF1  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  8817     0AF2  0087               	movwf	7
  8818     0AF3  1781               	bsf	1,7
  8819                           
  8820                           ;usb/usb_device.c: 1040:     if(dir != 0)
  8821     0AF4  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  8822     0AF5  1903               	btfsc	3,2
  8823     0AF6  2B0E               	goto	l5792
  8824                           
  8825                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  8826     0AF7  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8827     0AF8  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  8828     0AF9  0086               	movwf	6
  8829     0AFA  0187               	clrf	7
  8830     0AFB  3F40               	moviw [0]fsr1
  8831     0AFC  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  8832     0AFD  3F41               	moviw [1]fsr1
  8833     0AFE  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  8834     0AFF  3004               	movlw	4
  8835     0B00  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  8836     0B01  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  8837     0B02  3000               	movlw	0
  8838     0B03  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  8839     0B04  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  8840     0B05  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8841     0B06  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  8842     0B07  0086               	movwf	6
  8843     0B08  0187               	clrf	7
  8844     0B09  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  8845     0B0A  3FC0               	movwi [0]fsr1
  8846     0B0B  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  8847     0B0C  3FC1               	movwi [1]fsr1
  8848                           
  8849                           ;usb/usb_device.c: 1044:     }
  8850     0B0D  2B26               	goto	l5794
  8851     0B0E                     l5792:
  8852                           
  8853                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  8854     0B0E  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8855     0B0F  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  8856     0B10  0086               	movwf	6
  8857     0B11  3001               	movlw	1	; select bank2/3
  8858     0B12  0087               	movwf	7
  8859     0B13  3F40               	moviw [0]fsr1
  8860     0B14  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  8861     0B15  3F41               	moviw [1]fsr1
  8862     0B16  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  8863     0B17  3004               	movlw	4
  8864     0B18  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  8865     0B19  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  8866     0B1A  3000               	movlw	0
  8867     0B1B  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  8868     0B1C  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  8869     0B1D  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  8870     0B1E  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  8871     0B1F  0086               	movwf	6
  8872     0B20  3001               	movlw	1	; select bank2/3
  8873     0B21  0087               	movwf	7
  8874     0B22  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  8875     0B23  3FC0               	movwi [0]fsr1
  8876     0B24  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  8877     0B25  3FC1               	movwi [1]fsr1
  8878     0B26                     l5794:
  8879                           
  8880                           ;usb/usb_device.c: 1050:     return (void*)handle;
  8881     0B26  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  8882     0B27  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  8883     0B28  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  8884     0B29  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  8885     0B2A  0008               	return
  8886     0B2B                     __end_of_USBTransferOnePacket:
  8887                           
  8888                           	psect	text39
  8889     144E                     __ptext39:	
  8890 ;; *************** function _GenericQueue_CopyToArray *****************
  8891 ;; Defined at:
  8892 ;;		line 63 in file "generic_queue.c"
  8893 ;; Parameters:    Size  Location     Type
  8894 ;;  q               2   24[BANK1 ] PTR struct .
  8895 ;;		 -> keyboard(101), 
  8896 ;;  array           1   26[BANK1 ] PTR void 
  8897 ;;		 -> inputReport(8), 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;  count           1   32[BANK1 ] unsigned char 
  8900 ;;  index           1   31[BANK1 ] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : 1F/1
  8907 ;;		On exit  : 1F/1
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8910 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;Total ram usage:        9 bytes
  8915 ;; Hardware stack levels used: 1
  8916 ;; Hardware stack levels required when called: 11
  8917 ;; This function calls:
  8918 ;;		___awmod
  8919 ;;		___bmul
  8920 ;;		___wmul
  8921 ;;		_memcpy
  8922 ;; This function is called by:
  8923 ;;		_APP_KeyboardTasks
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927     144E                     _GenericQueue_CopyToArray:	
  8928                           ;psect for function _GenericQueue_CopyToArray
  8929                           
  8930                           
  8931                           ;generic_queue.c: 64:     uint8_t index = q->front;
  8932                           
  8933                           ;incstack = 0
  8934                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  8935     144E  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  8936     144F  3E5C               	addlw	92
  8937     1450  0086               	movwf	6
  8938     1451  3000               	movlw	0
  8939     1452  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  8940     1453  0087               	movwf	7
  8941     1454  0801               	movf	1,w
  8942     1455  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  8943                           
  8944                           ;generic_queue.c: 65:     uint8_t count = 0;
  8945     1456  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  8946     1457                     l1235:	
  8947                           ;generic_queue.c: 72:     }
  8948                           
  8949                           ;generic_queue.c: 66:     while (count < q->size) {
  8950                           
  8951                           
  8952                           ;generic_queue.c: 66:     while (count < q->size) {
  8953     1457  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  8954     1458  3E5E               	addlw	94
  8955     1459  0086               	movwf	6
  8956     145A  3000               	movlw	0
  8957     145B  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  8958     145C  0087               	movwf	7
  8959     145D  0801               	movf	1,w
  8960     145E  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  8961     145F  1803               	btfsc	3,0
  8962     1460  0008               	return
  8963                           
  8964                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  8965     1461  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  8966     1462  00A8               	movwf	___bmul@multiplicand^(0+128)
  8967     1463  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  8968     1464  3E5A               	addlw	90
  8969     1465  0086               	movwf	6
  8970     1466  3000               	movlw	0
  8971     1467  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  8972     1468  0087               	movwf	7
  8973     1469  0801               	movf	1,w
  8974     146A  319B  23D0  3194   	fcall	___bmul
  8975     146D  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  8976     146E  00B5               	movwf	memcpy@d1^(0+128)
  8977     146F  01B6               	clrf	(memcpy@d1+1)^(0+128)
  8978     1470  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  8979     1471  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  8980     1472  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  8981     1473  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  8982     1474  00AF               	movwf	___wmul@multiplier^(0+128)
  8983     1475  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  8984     1476  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8985     1477  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  8986     1478  3E5A               	addlw	90
  8987     1479  0086               	movwf	6
  8988     147A  3000               	movlw	0
  8989     147B  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  8990     147C  0087               	movwf	7
  8991     147D  3F40               	moviw [0]fsr1
  8992     147E  00B1               	movwf	___wmul@multiplicand^(0+128)
  8993     147F  3F41               	moviw [1]fsr1
  8994     1480  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8995     1481  319D  2509  3194   	fcall	___wmul
  8996     1484  082F               	movf	?___wmul^(0+128),w
  8997     1485  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  8998     1486  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  8999     1487  0830               	movf	(?___wmul+1)^(0+128),w
  9000     1488  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9001     1489  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  9002     148A  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  9003     148B  00B7               	movwf	memcpy@s1^(0+128)
  9004     148C  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  9005     148D  00B8               	movwf	(memcpy@s1+1)^(0+128)
  9006     148E  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  9007     148F  3E5A               	addlw	90
  9008     1490  0086               	movwf	6
  9009     1491  3000               	movlw	0
  9010     1492  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  9011     1493  0087               	movwf	7
  9012     1494  3F40               	moviw [0]fsr1
  9013     1495  00B9               	movwf	memcpy@n^(0+128)
  9014     1496  3F41               	moviw [1]fsr1
  9015     1497  00BA               	movwf	(memcpy@n+1)^(0+128)
  9016     1498  319E  26C2  3194   	fcall	_memcpy
  9017                           
  9018                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  9019     149B  300F               	movlw	15
  9020     149C  00A8               	movwf	___awmod@divisor^(0+128)
  9021     149D  3000               	movlw	0
  9022     149E  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  9023     149F  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  9024     14A0  3E01               	addlw	1
  9025     14A1  00AA               	movwf	___awmod@dividend^(0+128)
  9026     14A2  3000               	movlw	0
  9027     14A3  1803               	skipnc
  9028     14A4  3001               	movlw	1
  9029     14A5  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  9030     14A6  3191  21B5  3194   	fcall	___awmod
  9031     14A9  0828               	movf	?___awmod^(0+128),w
  9032     14AA  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  9033                           
  9034                           ;generic_queue.c: 71:         count++;
  9035     14AB  3001               	movlw	1
  9036     14AC  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  9037     14AD  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  9038     14AE  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  9039     14AF  2C57               	goto	l1235
  9040     14B0                     __end_of_GenericQueue_CopyToArray:
  9041                           
  9042                           	psect	text40
  9043     1BD0                     __ptext40:	
  9044 ;; *************** function ___bmul *****************
  9045 ;; Defined at:
  9046 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;  multiplier      1    wreg     unsigned char 
  9049 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;  multiplier      1    3[BANK1 ] unsigned char 
  9052 ;;  product         1    2[BANK1 ] unsigned char 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      unsigned char 
  9055 ;; Registers used:
  9056 ;;		wreg, status,2, status,0
  9057 ;; Tracked objects:
  9058 ;;		On entry : 1F/1
  9059 ;;		On exit  : 1F/1
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9062 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;Total ram usage:        4 bytes
  9067 ;; Hardware stack levels used: 1
  9068 ;; Hardware stack levels required when called: 10
  9069 ;; This function calls:
  9070 ;;		Nothing
  9071 ;; This function is called by:
  9072 ;;		_GenericQueue_CopyToArray
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076     1BD0                     ___bmul:	
  9077                           ;psect for function ___bmul
  9078                           
  9079                           
  9080                           ;incstack = 0
  9081                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  9082                           ;___bmul@multiplier stored from wreg
  9083     1BD0  00AB               	movwf	___bmul@multiplier^(0+128)
  9084     1BD1  01AA               	clrf	___bmul@product^(0+128)
  9085     1BD2                     l5416:
  9086     1BD2  1C2B               	btfss	___bmul@multiplier^(0+128),0
  9087     1BD3  2BD8               	goto	l5420
  9088     1BD4  0828               	movf	___bmul@multiplicand^(0+128),w
  9089     1BD5  00A9               	movwf	??___bmul^(0+128)
  9090     1BD6  0829               	movf	??___bmul^(0+128),w
  9091     1BD7  07AA               	addwf	___bmul@product^(0+128),f
  9092     1BD8                     l5420:
  9093     1BD8  1003               	clrc
  9094     1BD9  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  9095     1BDA  1003               	clrc
  9096     1BDB  0CAB               	rrf	___bmul@multiplier^(0+128),f
  9097     1BDC  082B               	movf	___bmul@multiplier^(0+128),w
  9098     1BDD  1D03               	btfss	3,2
  9099     1BDE  2BD2               	goto	l5416
  9100     1BDF  082A               	movf	___bmul@product^(0+128),w
  9101     1BE0  0008               	return
  9102     1BE1                     __end_of___bmul:
  9103                           
  9104                           	psect	text41
  9105     007F                     __ptext41:	
  9106 ;; *************** function _APP_KeyboardUpdateState *****************
  9107 ;; Defined at:
  9108 ;;		line 445 in file "app_device_keyboard.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  9111 ;;		 -> main@scanCode(3), NULL(0), 
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  9114 ;;		 -> main@scanCode(3), NULL(0), 
  9115 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  9116 ;;  leds            1   35[BANK1 ] unsigned char 
  9117 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  9118 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  9119 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  1    wreg      void 
  9122 ;; Registers used:
  9123 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 1F/1
  9126 ;;		On exit  : 1C/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;Total ram usage:        8 bytes
  9134 ;; Hardware stack levels used: 1
  9135 ;; Hardware stack levels required when called: 12
  9136 ;; This function calls:
  9137 ;;		_GenericQueue_Contains
  9138 ;;		_GenericQueue_Enqueue
  9139 ;;		_GenericQueue_Remove
  9140 ;;		_PS2Keyboard_GetLastCommand
  9141 ;;		_PS2Keyboard_SendCommand
  9142 ;;		_PS2USB_ScanCodeToUSBHID
  9143 ;; This function is called by:
  9144 ;;		_APP_KeyboardTasks
  9145 ;; This function uses a non-reentrant model
  9146 ;;
  9147                           
  9148     007F                     _APP_KeyboardUpdateState:	
  9149                           ;psect for function _APP_KeyboardUpdateState
  9150                           
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9154                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  9155     007F  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  9156                           
  9157                           ;app_device_keyboard.c: 446:     if (scanCode != ((void*)0)) {
  9158     0080  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9159     0081  1903               	btfsc	3,2
  9160     0082  0008               	return
  9161                           
  9162                           ;app_device_keyboard.c: 447:         if (scanCode->isExtend) {
  9163     0083  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9164     0084  0086               	movwf	6
  9165     0085  3001               	movlw	1	; select bank2/3
  9166     0086  0087               	movwf	7
  9167     0087  0801               	movf	1,w
  9168     0088  1903               	btfsc	3,2
  9169     0089  28F4               	goto	l6742
  9170                           
  9171                           ;app_device_keyboard.c: 448:             if (scanCode->isBreak) {
  9172     008A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9173     008B  3E02               	addlw	2
  9174     008C  0086               	movwf	6
  9175     008D  3001               	movlw	1	; select bank2/3
  9176     008E  0087               	movwf	7
  9177     008F  0801               	movf	1,w
  9178     0090  1903               	btfsc	3,2
  9179     0091  28BC               	goto	l6730
  9180                           
  9181                           ;app_device_keyboard.c: 449:                 if (scanCode->value == 0X14) {
  9182     0092  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9183     0093  0086               	movwf	6
  9184     0094  3001               	movlw	1	; select bank2/3
  9185     0095  0087               	movwf	7
  9186     0096  3014               	movlw	20
  9187     0097  0601               	xorwf	1,w
  9188     0098  1D03               	btfss	3,2
  9189     0099  28A0               	goto	l6724
  9190                           
  9191                           ;app_device_keyboard.c: 450:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  9192     009A  308F               	movlw	143
  9193     009B  0086               	movwf	6
  9194     009C  3023               	movlw	35
  9195     009D  0087               	movwf	7
  9196     009E  1201               	bcf	1,4
  9197                           
  9198                           ;app_device_keyboard.c: 451:                 } else if (scanCode->value == 0x11) {
  9199     009F  0008               	return
  9200     00A0                     l6724:
  9201     00A0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9202     00A1  0086               	movwf	6
  9203     00A2  3001               	movlw	1	; select bank2/3
  9204     00A3  0087               	movwf	7
  9205     00A4  3011               	movlw	17
  9206     00A5  0601               	xorwf	1,w
  9207     00A6  1D03               	btfss	3,2
  9208     00A7  28AE               	goto	l6728
  9209                           
  9210                           ;app_device_keyboard.c: 452:                     keyboard.modifiers.bits.rightAlt = 0;
  9211     00A8  308F               	movlw	143
  9212     00A9  0086               	movwf	6
  9213     00AA  3023               	movlw	35
  9214     00AB  0087               	movwf	7
  9215     00AC  1301               	bcf	1,6
  9216                           
  9217                           ;app_device_keyboard.c: 453:                 } else {
  9218     00AD  0008               	return
  9219     00AE                     l6728:
  9220                           
  9221                           ;app_device_keyboard.c: 454:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  9222     00AE  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9223     00AF  319E  2655  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  9224     00B2  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  9225                           
  9226                           ;app_device_keyboard.c: 455:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  9227     00B3  3030               	movlw	48
  9228     00B4  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  9229     00B5  3023               	movlw	35
  9230     00B6  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  9231     00B7  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  9232     00B8  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  9233     00B9  318F  270C         	fcall	_GenericQueue_Remove
  9234     00BB  0008               	return
  9235     00BC                     l6730:
  9236                           
  9237                           ;app_device_keyboard.c: 458:                 if (scanCode->value == 0X14) {
  9238     00BC  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9239     00BD  0086               	movwf	6
  9240     00BE  3001               	movlw	1	; select bank2/3
  9241     00BF  0087               	movwf	7
  9242     00C0  3014               	movlw	20
  9243     00C1  0601               	xorwf	1,w
  9244     00C2  1D03               	btfss	3,2
  9245     00C3  28CA               	goto	l6734
  9246                           
  9247                           ;app_device_keyboard.c: 459:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  9248     00C4  308F               	movlw	143
  9249     00C5  0086               	movwf	6
  9250     00C6  3023               	movlw	35
  9251     00C7  0087               	movwf	7
  9252     00C8  1601               	bsf	1,4
  9253                           
  9254                           ;app_device_keyboard.c: 460:                 } else if (scanCode->value == 0x11) {
  9255     00C9  0008               	return
  9256     00CA                     l6734:
  9257     00CA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9258     00CB  0086               	movwf	6
  9259     00CC  3001               	movlw	1	; select bank2/3
  9260     00CD  0087               	movwf	7
  9261     00CE  3011               	movlw	17
  9262     00CF  0601               	xorwf	1,w
  9263     00D0  1D03               	btfss	3,2
  9264     00D1  28D8               	goto	l6738
  9265                           
  9266                           ;app_device_keyboard.c: 461:                     keyboard.modifiers.bits.rightAlt = 1;
  9267     00D2  308F               	movlw	143
  9268     00D3  0086               	movwf	6
  9269     00D4  3023               	movlw	35
  9270     00D5  0087               	movwf	7
  9271     00D6  1701               	bsf	1,6
  9272                           
  9273                           ;app_device_keyboard.c: 462:                 } else {
  9274     00D7  0008               	return
  9275     00D8                     l6738:
  9276                           
  9277                           ;app_device_keyboard.c: 463:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  9278     00D8  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9279     00D9  319E  2655  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  9280     00DC  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2928^(0+128)
  9281                           
  9282                           ;app_device_keyboard.c: 464:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  9283     00DD  3030               	movlw	48
  9284     00DE  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  9285     00DF  3023               	movlw	35
  9286     00E0  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  9287     00E1  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2928| 0))& (0+255)
  9288     00E2  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  9289     00E3  3193  23EC  3180   	fcall	_GenericQueue_Contains
  9290     00E6  3A00               	xorlw	0
  9291     00E7  1D03               	skipz
  9292     00E8  0008               	return
  9293                           
  9294                           ;app_device_keyboard.c: 465:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  9295     00E9  3030               	movlw	48
  9296     00EA  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  9297     00EB  3023               	movlw	35
  9298     00EC  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  9299     00ED  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2928
  9300     00EE  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  9301     00EF  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2928
  9302     00F0  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  9303     00F1  3195  25E6         	fcall	_GenericQueue_Enqueue
  9304                           
  9305                           ;app_device_keyboard.c: 469:         } else {
  9306                           
  9307                           ;app_device_keyboard.c: 468:             }
  9308     00F3  0008               	return
  9309     00F4                     l6742:
  9310                           
  9311                           ;app_device_keyboard.c: 470:             if (scanCode->isBreak) {
  9312     00F4  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9313     00F5  3E02               	addlw	2
  9314     00F6  0086               	movwf	6
  9315     00F7  3001               	movlw	1	; select bank2/3
  9316     00F8  0087               	movwf	7
  9317     00F9  0801               	movf	1,w
  9318     00FA  1903               	btfsc	3,2
  9319     00FB  2942               	goto	l6762
  9320                           
  9321                           ;app_device_keyboard.c: 472:                 if (scanCode->value == 0x12) {
  9322     00FC  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9323     00FD  0086               	movwf	6
  9324     00FE  3001               	movlw	1	; select bank2/3
  9325     00FF  0087               	movwf	7
  9326     0100  3012               	movlw	18
  9327     0101  0601               	xorwf	1,w
  9328     0102  1D03               	btfss	3,2
  9329     0103  290A               	goto	l6748
  9330                           
  9331                           ;app_device_keyboard.c: 473:                     keyboard.modifiers.bits.leftShift = 0;
  9332     0104  308F               	movlw	143
  9333     0105  0086               	movwf	6
  9334     0106  3023               	movlw	35
  9335     0107  0087               	movwf	7
  9336     0108  1081               	bcf	1,1
  9337                           
  9338                           ;app_device_keyboard.c: 474:                 } else if (scanCode->value == 0X14) {
  9339     0109  0008               	return
  9340     010A                     l6748:
  9341     010A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9342     010B  0086               	movwf	6
  9343     010C  3001               	movlw	1	; select bank2/3
  9344     010D  0087               	movwf	7
  9345     010E  3014               	movlw	20
  9346     010F  0601               	xorwf	1,w
  9347     0110  1D03               	btfss	3,2
  9348     0111  2918               	goto	l6752
  9349                           
  9350                           ;app_device_keyboard.c: 475:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  9351     0112  308F               	movlw	143
  9352     0113  0086               	movwf	6
  9353     0114  3023               	movlw	35
  9354     0115  0087               	movwf	7
  9355     0116  1001               	bcf	1,0
  9356                           
  9357                           ;app_device_keyboard.c: 476:                 } else if (scanCode->value == 0x11) {
  9358     0117  0008               	return
  9359     0118                     l6752:
  9360     0118  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9361     0119  0086               	movwf	6
  9362     011A  3001               	movlw	1	; select bank2/3
  9363     011B  0087               	movwf	7
  9364     011C  3011               	movlw	17
  9365     011D  0601               	xorwf	1,w
  9366     011E  1D03               	btfss	3,2
  9367     011F  2926               	goto	l6756
  9368                           
  9369                           ;app_device_keyboard.c: 477:                     keyboard.modifiers.bits.leftAlt = 0;
  9370     0120  308F               	movlw	143
  9371     0121  0086               	movwf	6
  9372     0122  3023               	movlw	35
  9373     0123  0087               	movwf	7
  9374     0124  1101               	bcf	1,2
  9375                           
  9376                           ;app_device_keyboard.c: 478:                 } else if (scanCode->value == 0x59) {
  9377     0125  0008               	return
  9378     0126                     l6756:
  9379     0126  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9380     0127  0086               	movwf	6
  9381     0128  3001               	movlw	1	; select bank2/3
  9382     0129  0087               	movwf	7
  9383     012A  3059               	movlw	89
  9384     012B  0601               	xorwf	1,w
  9385     012C  1D03               	btfss	3,2
  9386     012D  2934               	goto	l6760
  9387                           
  9388                           ;app_device_keyboard.c: 479:                     keyboard.modifiers.bits.rightShift = 0;
  9389     012E  308F               	movlw	143
  9390     012F  0086               	movwf	6
  9391     0130  3023               	movlw	35
  9392     0131  0087               	movwf	7
  9393     0132  1281               	bcf	1,5
  9394                           
  9395                           ;app_device_keyboard.c: 480:                 } else {
  9396     0133  0008               	return
  9397     0134                     l6760:
  9398                           
  9399                           ;app_device_keyboard.c: 481:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  9400     0134  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9401     0135  319E  2655  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  9402     0138  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2929^(0+128)
  9403                           
  9404                           ;app_device_keyboard.c: 482:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  9405     0139  3030               	movlw	48
  9406     013A  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  9407     013B  3023               	movlw	35
  9408     013C  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  9409     013D  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2929| 0))& (0+255)
  9410     013E  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  9411     013F  318F  270C         	fcall	_GenericQueue_Remove
  9412     0141  0008               	return
  9413     0142                     l6762:
  9414     0142  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9415     0143  0086               	movwf	6
  9416     0144  3001               	movlw	1	; select bank2/3
  9417     0145  0087               	movwf	7
  9418     0146  30FA               	movlw	250
  9419     0147  0601               	xorwf	1,w
  9420     0148  1D03               	btfss	3,2
  9421     0149  2972               	goto	l6770
  9422                           
  9423                           ;app_device_keyboard.c: 485:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  9424     014A  319A  22D0  3180   	fcall	_PS2Keyboard_GetLastCommand
  9425     014D  3AED               	xorlw	237
  9426     014E  1D03               	skipz
  9427     014F  0008               	return
  9428                           
  9429                           ;app_device_keyboard.c: 486:                     uint8_t leds = keyboard.leds.bits.numLo
      +                          ck << 1
  9430     0150  3090               	movlw	144
  9431     0151  0086               	movwf	6
  9432     0152  3023               	movlw	35
  9433     0153  0087               	movwf	7
  9434     0154  0C01               	rrf	1,w
  9435     0155  0C89               	rrf	9,f
  9436     0156  3901               	andlw	1
  9437     0157  0021               	movlb	1	; select bank1
  9438     0158  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  9439     0159  3090               	movlw	144
  9440     015A  0086               	movwf	6
  9441     015B  3023               	movlw	35
  9442     015C  0087               	movwf	7
  9443     015D  0C01               	rrf	1,w
  9444     015E  3901               	andlw	1
  9445     015F  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  9446     0160  3002               	movlw	2
  9447     0161                     u6715:
  9448     0161  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  9449     0162  0B89               	decfsz	9,f
  9450     0163  2961               	goto	u6715
  9451     0164  3090               	movlw	144
  9452     0165  0086               	movwf	6
  9453     0166  3023               	movlw	35
  9454     0167  0087               	movwf	7
  9455     0168  0801               	movf	1,w
  9456     0169  3901               	andlw	1
  9457     016A  0709               	addwf	9,w
  9458     016B  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  9459     016C  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  9460     016D  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  9461                           
  9462                           ;app_device_keyboard.c: 489:                     PS2Keyboard_SendCommand(leds);
  9463     016E  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  9464     016F  319D  253F         	fcall	_PS2Keyboard_SendCommand
  9465     0171  0008               	return
  9466     0172                     l6770:
  9467     0172  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9468     0173  0086               	movwf	6
  9469     0174  3001               	movlw	1	; select bank2/3
  9470     0175  0087               	movwf	7
  9471     0176  30FC               	movlw	252
  9472     0177  0601               	xorwf	1,w
  9473     0178  1903               	btfsc	3,2
  9474     0179  0008               	return
  9475     017A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9476     017B  0086               	movwf	6
  9477     017C  3001               	movlw	1	; select bank2/3
  9478     017D  0087               	movwf	7
  9479     017E  0A01               	incf	1,w
  9480     017F  1903               	btfsc	3,2
  9481     0180  0008               	return
  9482                           
  9483                           ;app_device_keyboard.c: 496:                 if (scanCode->value == 0x12) {
  9484     0181  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9485     0182  0086               	movwf	6
  9486     0183  3001               	movlw	1	; select bank2/3
  9487     0184  0087               	movwf	7
  9488     0185  3012               	movlw	18
  9489     0186  0601               	xorwf	1,w
  9490     0187  1D03               	btfss	3,2
  9491     0188  298F               	goto	l6778
  9492                           
  9493                           ;app_device_keyboard.c: 497:                     keyboard.modifiers.bits.leftShift = 1;
  9494     0189  308F               	movlw	143
  9495     018A  0086               	movwf	6
  9496     018B  3023               	movlw	35
  9497     018C  0087               	movwf	7
  9498     018D  1481               	bsf	1,1
  9499                           
  9500                           ;app_device_keyboard.c: 498:                 } else if (scanCode->value == 0X14) {
  9501     018E  0008               	return
  9502     018F                     l6778:
  9503     018F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9504     0190  0086               	movwf	6
  9505     0191  3001               	movlw	1	; select bank2/3
  9506     0192  0087               	movwf	7
  9507     0193  3014               	movlw	20
  9508     0194  0601               	xorwf	1,w
  9509     0195  1D03               	btfss	3,2
  9510     0196  299D               	goto	l6782
  9511                           
  9512                           ;app_device_keyboard.c: 499:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  9513     0197  308F               	movlw	143
  9514     0198  0086               	movwf	6
  9515     0199  3023               	movlw	35
  9516     019A  0087               	movwf	7
  9517     019B  1401               	bsf	1,0
  9518                           
  9519                           ;app_device_keyboard.c: 500:                 } else if (scanCode->value == 0x11) {
  9520     019C  0008               	return
  9521     019D                     l6782:
  9522     019D  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9523     019E  0086               	movwf	6
  9524     019F  3001               	movlw	1	; select bank2/3
  9525     01A0  0087               	movwf	7
  9526     01A1  3011               	movlw	17
  9527     01A2  0601               	xorwf	1,w
  9528     01A3  1D03               	btfss	3,2
  9529     01A4  29AB               	goto	l6786
  9530                           
  9531                           ;app_device_keyboard.c: 501:                     keyboard.modifiers.bits.leftAlt = 1;
  9532     01A5  308F               	movlw	143
  9533     01A6  0086               	movwf	6
  9534     01A7  3023               	movlw	35
  9535     01A8  0087               	movwf	7
  9536     01A9  1501               	bsf	1,2
  9537                           
  9538                           ;app_device_keyboard.c: 502:                 } else if (scanCode->value == 0x59) {
  9539     01AA  0008               	return
  9540     01AB                     l6786:
  9541     01AB  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9542     01AC  0086               	movwf	6
  9543     01AD  3001               	movlw	1	; select bank2/3
  9544     01AE  0087               	movwf	7
  9545     01AF  3059               	movlw	89
  9546     01B0  0601               	xorwf	1,w
  9547     01B1  1D03               	btfss	3,2
  9548     01B2  29B9               	goto	l6790
  9549                           
  9550                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.rightShift = 1;
  9551     01B3  308F               	movlw	143
  9552     01B4  0086               	movwf	6
  9553     01B5  3023               	movlw	35
  9554     01B6  0087               	movwf	7
  9555     01B7  1681               	bsf	1,5
  9556                           
  9557                           ;app_device_keyboard.c: 504:                 } else {
  9558     01B8  0008               	return
  9559     01B9                     l6790:
  9560                           
  9561                           ;app_device_keyboard.c: 505:                     if (scanCode->value == 0x77) {
  9562     01B9  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9563     01BA  0086               	movwf	6
  9564     01BB  3001               	movlw	1	; select bank2/3
  9565     01BC  0087               	movwf	7
  9566     01BD  3077               	movlw	119
  9567     01BE  0601               	xorwf	1,w
  9568     01BF  1D03               	btfss	3,2
  9569     01C0  29D3               	goto	l6796
  9570                           
  9571                           ;app_device_keyboard.c: 506:                         keyboard.leds.bits.numLock = keyboa
      +                          rd.leds.bits.numLock == 1 ? 0 : 1;
  9572     01C1  3090               	movlw	144
  9573     01C2  0086               	movwf	6
  9574     01C3  3023               	movlw	35
  9575     01C4  0087               	movwf	7
  9576     01C5  1003               	clrc
  9577     01C6  1C01               	btfss	1,0
  9578     01C7  1403               	setc
  9579     01C8  3000               	movlw	0
  9580     01C9  3D09               	addwfc	9,w
  9581     01CA  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  9582     01CB  3090               	movlw	144
  9583     01CC  0086               	movwf	6
  9584     01CD  3023               	movlw	35
  9585     01CE  0087               	movwf	7
  9586     01CF  0801               	movf	1,w
  9587     01D0  0649               	xorwf	??_APP_KeyboardUpdateState^(0+128),w
  9588     01D1  39FE               	andlw	-2
  9589     01D2  2A09               	goto	L4
  9590     01D3                     l6796:	
  9591                           ;app_device_keyboard.c: 508:                     } else if(scanCode->value == 0x58) {
  9592                           
  9593                           ;app_device_keyboard.c: 507:                         PS2Keyboard_SendCommand(0xED);
  9594                           
  9595     01D3  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9596     01D4  0086               	movwf	6
  9597     01D5  3001               	movlw	1	; select bank2/3
  9598     01D6  0087               	movwf	7
  9599     01D7  3058               	movlw	88
  9600     01D8  0601               	xorwf	1,w
  9601     01D9  1D03               	btfss	3,2
  9602     01DA  29EE               	goto	l6802
  9603                           
  9604                           ;app_device_keyboard.c: 509:                         keyboard.leds.bits.capsLock = keybo
      +                          ard.leds.bits.capsLock == 1 ? 0 : 1;
  9605     01DB  3090               	movlw	144
  9606     01DC  0086               	movwf	6
  9607     01DD  3023               	movlw	35
  9608     01DE  0087               	movwf	7
  9609     01DF  1003               	clrc
  9610     01E0  1C81               	btfss	1,1
  9611     01E1  1403               	setc
  9612     01E2  3000               	movlw	0
  9613     01E3  3D09               	addwfc	9,w
  9614     01E4  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  9615     01E5  3090               	movlw	144
  9616     01E6  0086               	movwf	6
  9617     01E7  3023               	movlw	35
  9618     01E8  0087               	movwf	7
  9619     01E9  0DC9               	rlf	??_APP_KeyboardUpdateState^(0+128),f
  9620     01EA  0801               	movf	1,w
  9621     01EB  0649               	xorwf	??_APP_KeyboardUpdateState^(0+128),w
  9622     01EC  39FD               	andlw	-3
  9623     01ED  2A09               	goto	L4
  9624     01EE                     l6802:	
  9625                           ;app_device_keyboard.c: 511:                     } else if(scanCode->value == 0x7E) {
  9626                           
  9627                           ;app_device_keyboard.c: 510:                         PS2Keyboard_SendCommand(0xED);
  9628                           
  9629     01EE  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9630     01EF  0086               	movwf	6
  9631     01F0  3001               	movlw	1	; select bank2/3
  9632     01F1  0087               	movwf	7
  9633     01F2  307E               	movlw	126
  9634     01F3  0601               	xorwf	1,w
  9635     01F4  1D03               	btfss	3,2
  9636     01F5  2A0F               	goto	l6808
  9637                           
  9638                           ;app_device_keyboard.c: 512:                         keyboard.leds.bits.scrollLock = key
      +                          board.leds.bits.scrollLock == 1 ? 0 : 1;
  9639     01F6  3090               	movlw	144
  9640     01F7  0086               	movwf	6
  9641     01F8  3023               	movlw	35
  9642     01F9  0087               	movwf	7
  9643     01FA  1003               	clrc
  9644     01FB  1D01               	btfss	1,2
  9645     01FC  1403               	setc
  9646     01FD  3000               	movlw	0
  9647     01FE  3D09               	addwfc	9,w
  9648     01FF  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  9649     0200  3090               	movlw	144
  9650     0201  0086               	movwf	6
  9651     0202  3023               	movlw	35
  9652     0203  0087               	movwf	7
  9653     0204  0DC9               	rlf	??_APP_KeyboardUpdateState^(0+128),f
  9654     0205  0DC9               	rlf	??_APP_KeyboardUpdateState^(0+128),f
  9655     0206  0801               	movf	1,w
  9656     0207  0649               	xorwf	??_APP_KeyboardUpdateState^(0+128),w
  9657     0208  39FB               	andlw	-5
  9658     0209                     L4:
  9659     0209  0649               	xorwf	??_APP_KeyboardUpdateState^(0+128),w
  9660     020A  0081               	movwf	1
  9661                           
  9662                           ;app_device_keyboard.c: 513:                         PS2Keyboard_SendCommand(0xED);
  9663     020B  30ED               	movlw	237
  9664     020C  319D  253F  3180   	fcall	_PS2Keyboard_SendCommand
  9665     020F                     l6808:
  9666                           
  9667                           ;app_device_keyboard.c: 515:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  9668     020F  0021               	movlb	1	; select bank1
  9669     0210  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  9670     0211  319E  2655  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  9671     0214  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2937^(0+128)
  9672                           
  9673                           ;app_device_keyboard.c: 516:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  9674     0215  3030               	movlw	48
  9675     0216  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  9676     0217  3023               	movlw	35
  9677     0218  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  9678     0219  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2937| 0))& (0+255)
  9679     021A  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  9680     021B  3193  23EC  3180   	fcall	_GenericQueue_Contains
  9681     021E  3A00               	xorlw	0
  9682     021F  1D03               	skipz
  9683     0220  0008               	return
  9684                           
  9685                           ;app_device_keyboard.c: 517:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  9686     0221  3030               	movlw	48
  9687     0222  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  9688     0223  3023               	movlw	35
  9689     0224  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  9690     0225  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2937
  9691     0226  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  9692     0227  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2937
  9693     0228  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  9694     0229  3195  25E6         	fcall	_GenericQueue_Enqueue
  9695     022B  0008               	return
  9696     022C                     __end_of_APP_KeyboardUpdateState:
  9697                           
  9698                           	psect	text42
  9699     1E55                     __ptext42:	
  9700 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  9701 ;; Defined at:
  9702 ;;		line 396 in file "ps2usb.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  9705 ;;		 -> main@scanCode(3), NULL(0), 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  9708 ;;		 -> main@scanCode(3), NULL(0), 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  1    wreg      unsigned char 
  9711 ;; Registers used:
  9712 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9713 ;; Tracked objects:
  9714 ;;		On entry : 1F/1
  9715 ;;		On exit  : 1F/1
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used: 1
  9724 ;; Hardware stack levels required when called: 10
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_APP_KeyboardUpdateState
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732     1E55                     _PS2USB_ScanCodeToUSBHID:	
  9733                           ;psect for function _PS2USB_ScanCodeToUSBHID
  9734                           
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  9738                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  9739     1E55  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  9740                           
  9741                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  9742     1E56  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9743     1E57  0086               	movwf	6
  9744     1E58  3001               	movlw	1	; select bank2/3
  9745     1E59  0087               	movwf	7
  9746     1E5A  0801               	movf	1,w
  9747     1E5B  1903               	btfsc	3,2
  9748     1E5C  2E6A               	goto	l5254
  9749                           
  9750                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  9751     1E5D  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9752     1E5E  0086               	movwf	6
  9753     1E5F  3001               	movlw	1	; select bank2/3
  9754     1E60  0087               	movwf	7
  9755     1E61  0801               	movf	1,w
  9756     1E62  3E6B               	addlw	low (_ps2ExtUsbMap| (0+32768))
  9757     1E63  0084               	movwf	4
  9758     1E64  3084               	movlw	high (_ps2ExtUsbMap| (0+32768))
  9759     1E65  1803               	skipnc
  9760     1E66  3E01               	addlw	1
  9761     1E67  0085               	movwf	5
  9762     1E68  0800               	movf	0,w	;code access
  9763     1E69  0008               	return
  9764     1E6A                     l5254:
  9765                           
  9766                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  9767     1E6A  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  9768     1E6B  0086               	movwf	6
  9769     1E6C  3001               	movlw	1	; select bank2/3
  9770     1E6D  0087               	movwf	7
  9771     1E6E  0801               	movf	1,w
  9772     1E6F  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  9773     1E70  0084               	movwf	4
  9774     1E71  3090               	movlw	high (_ps2UsbMap| (0+32768))
  9775     1E72  1803               	skipnc
  9776     1E73  3E01               	addlw	1
  9777     1E74  0085               	movwf	5
  9778     1E75  0800               	movf	0,w	;code access
  9779     1E76  0008               	return
  9780     1E77                     __end_of_PS2USB_ScanCodeToUSBHID:
  9781                           
  9782                           	psect	text43
  9783     1AD0                     __ptext43:	
  9784 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  9785 ;; Defined at:
  9786 ;;		line 75 in file "ps2_keyboard.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;		None
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;		None
  9791 ;; Return value:  Size  Location     Type
  9792 ;;                  1    wreg      unsigned char 
  9793 ;; Registers used:
  9794 ;;		wreg
  9795 ;; Tracked objects:
  9796 ;;		On entry : 1F/1
  9797 ;;		On exit  : 1F/2
  9798 ;;		Unchanged: 0/0
  9799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;Total ram usage:        0 bytes
  9805 ;; Hardware stack levels used: 1
  9806 ;; Hardware stack levels required when called: 10
  9807 ;; This function calls:
  9808 ;;		Nothing
  9809 ;; This function is called by:
  9810 ;;		_APP_KeyboardUpdateState
  9811 ;; This function uses a non-reentrant model
  9812 ;;
  9813                           
  9814     1AD0                     _PS2Keyboard_GetLastCommand:	
  9815                           ;psect for function _PS2Keyboard_GetLastCommand
  9816                           
  9817                           
  9818                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  9819                           
  9820                           ;incstack = 0
  9821                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  9822     1AD0  0022               	movlb	2	; select bank2
  9823     1AD1  0835               	movf	_keyboardCommand^(0+256),w	;volatile
  9824     1AD2  0008               	return
  9825     1AD3                     __end_of_PS2Keyboard_GetLastCommand:
  9826                           
  9827                           	psect	text44
  9828     0F0C                     __ptext44:	
  9829 ;; *************** function _GenericQueue_Remove *****************
  9830 ;; Defined at:
  9831 ;;		line 35 in file "generic_queue.c"
  9832 ;; Parameters:    Size  Location     Type
  9833 ;;  q               2   24[BANK1 ] PTR struct .
  9834 ;;		 -> keyboard(101), 
  9835 ;;  item            1   26[BANK1 ] PTR const void 
  9836 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@usbHidCode(1), 
  9837 ;; Auto vars:     Size  Location     Type
  9838 ;;  j               1   32[BANK1 ] unsigned char 
  9839 ;;  i               1   31[BANK1 ] unsigned char 
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 1F/1
  9846 ;;		On exit  : 1F/1
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9849 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;Total ram usage:        9 bytes
  9854 ;; Hardware stack levels used: 1
  9855 ;; Hardware stack levels required when called: 11
  9856 ;; This function calls:
  9857 ;;		_GenericQueue_IsEmpty
  9858 ;;		___awmod
  9859 ;;		___wmul
  9860 ;;		_memcmp
  9861 ;;		_memcpy
  9862 ;; This function is called by:
  9863 ;;		_APP_KeyboardUpdateState
  9864 ;; This function uses a non-reentrant model
  9865 ;;
  9866                           
  9867     0F0C                     _GenericQueue_Remove:	
  9868                           ;psect for function _GenericQueue_Remove
  9869                           
  9870                           
  9871                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  9872                           
  9873                           ;incstack = 0
  9874                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9875     0F0C  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  9876     0F0D  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  9877     0F0E  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9878     0F0F  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  9879     0F10  319B  23F2  318F   	fcall	_GenericQueue_IsEmpty
  9880     0F13  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  9881     0F14  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  9882     0F15  1D03               	btfss	3,2
  9883     0F16  0008               	return
  9884                           
  9885                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  9886     0F17  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9887     0F18  3E5C               	addlw	92
  9888     0F19  0086               	movwf	6
  9889     0F1A  3000               	movlw	0
  9890     0F1B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9891     0F1C  0087               	movwf	7
  9892     0F1D  0801               	movf	1,w
  9893     0F1E                     L5:
  9894     0F1E  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  9895     0F1F  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9896     0F20  3E5D               	addlw	93
  9897     0F21  0086               	movwf	6
  9898     0F22  3000               	movlw	0
  9899     0F23  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9900     0F24  0087               	movwf	7
  9901     0F25  0801               	movf	1,w
  9902     0F26  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  9903     0F27  1903               	btfsc	3,2
  9904     0F28  0008               	return
  9905                           
  9906                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  9907     0F29  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9908     0F2A  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9909     0F2B  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9910     0F2C  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9911     0F2D  00AF               	movwf	___wmul@multiplier^(0+128)
  9912     0F2E  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9913     0F2F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9914     0F30  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9915     0F31  3E5A               	addlw	90
  9916     0F32  0086               	movwf	6
  9917     0F33  3000               	movlw	0
  9918     0F34  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9919     0F35  0087               	movwf	7
  9920     0F36  3F40               	moviw [0]fsr1
  9921     0F37  00B1               	movwf	___wmul@multiplicand^(0+128)
  9922     0F38  3F41               	moviw [1]fsr1
  9923     0F39  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9924     0F3A  319D  2509  318F   	fcall	___wmul
  9925     0F3D  082F               	movf	?___wmul^(0+128),w
  9926     0F3E  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9927     0F3F  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  9928     0F40  0830               	movf	(?___wmul+1)^(0+128),w
  9929     0F41  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9930     0F42  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  9931     0F43  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  9932     0F44  00B5               	movwf	memcmp@vl^(0+128)
  9933     0F45  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  9934     0F46  00B6               	movwf	(memcmp@vl+1)^(0+128)
  9935     0F47  0842               	movf	GenericQueue_Remove@item^(0+128),w
  9936     0F48  00B7               	movwf	memcmp@vr^(0+128)
  9937     0F49  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9938     0F4A  3E5A               	addlw	90
  9939     0F4B  0086               	movwf	6
  9940     0F4C  3000               	movlw	0
  9941     0F4D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9942     0F4E  0087               	movwf	7
  9943     0F4F  3F40               	moviw [0]fsr1
  9944     0F50  00B8               	movwf	memcmp@n^(0+128)
  9945     0F51  3F41               	moviw [1]fsr1
  9946     0F52  00B9               	movwf	(memcmp@n+1)^(0+128)
  9947     0F53  319F  2718  318F   	fcall	_memcmp
  9948     0F56  0835               	movf	?_memcmp^(0+128),w
  9949     0F57  0436               	iorwf	(?_memcmp+1)^(0+128),w
  9950     0F58  1D03               	btfss	3,2
  9951     0F59  2FF0               	goto	l5276
  9952                           
  9953                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  9954     0F5A  0847               	movf	GenericQueue_Remove@i^(0+128),w
  9955     0F5B                     L6:
  9956     0F5B  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  9957     0F5C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9958     0F5D  3E5D               	addlw	93
  9959     0F5E  0086               	movwf	6
  9960     0F5F  3000               	movlw	0
  9961     0F60  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9962     0F61  0087               	movwf	7
  9963     0F62  0801               	movf	1,w
  9964     0F63  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  9965     0F64  1903               	btfsc	3,2
  9966     0F65  2FC6               	goto	l5272
  9967                           
  9968                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  9969     0F66  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9970     0F67  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  9971     0F68  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  9972     0F69  0843               	movf	??_GenericQueue_Remove^(0+128),w
  9973     0F6A  00AF               	movwf	___wmul@multiplier^(0+128)
  9974     0F6B  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  9975     0F6C  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  9976     0F6D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  9977     0F6E  3E5A               	addlw	90
  9978     0F6F  0086               	movwf	6
  9979     0F70  3000               	movlw	0
  9980     0F71  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9981     0F72  0087               	movwf	7
  9982     0F73  3F40               	moviw [0]fsr1
  9983     0F74  00B1               	movwf	___wmul@multiplicand^(0+128)
  9984     0F75  3F41               	moviw [1]fsr1
  9985     0F76  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  9986     0F77  319D  2509  318F   	fcall	___wmul
  9987     0F7A  082F               	movf	?___wmul^(0+128),w
  9988     0F7B  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  9989     0F7C  00B5               	movwf	memcpy@d1^(0+128)
  9990     0F7D  0830               	movf	(?___wmul+1)^(0+128),w
  9991     0F7E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  9992     0F7F  00B6               	movwf	(memcpy@d1+1)^(0+128)
  9993     0F80  0848               	movf	GenericQueue_Remove@j^(0+128),w
  9994     0F81  3E01               	addlw	1
  9995     0F82  00AA               	movwf	___awmod@dividend^(0+128)
  9996     0F83  3000               	movlw	0
  9997     0F84  1803               	skipnc
  9998     0F85  3001               	movlw	1
  9999     0F86  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10000     0F87  300F               	movlw	15
 10001     0F88  00A8               	movwf	___awmod@divisor^(0+128)
 10002     0F89  3000               	movlw	0
 10003     0F8A  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10004     0F8B  3191  21B5  318F   	fcall	___awmod
 10005     0F8E  0829               	movf	(?___awmod+1)^(0+128),w
 10006     0F8F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
 10007     0F90  0828               	movf	?___awmod^(0+128),w
 10008     0F91  00AF               	movwf	___wmul@multiplier^(0+128)
 10009     0F92  0840               	movf	GenericQueue_Remove@q^(0+128),w
 10010     0F93  3E5A               	addlw	90
 10011     0F94  0086               	movwf	6
 10012     0F95  3000               	movlw	0
 10013     0F96  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10014     0F97  0087               	movwf	7
 10015     0F98  3F40               	moviw [0]fsr1
 10016     0F99  00B1               	movwf	___wmul@multiplicand^(0+128)
 10017     0F9A  3F41               	moviw [1]fsr1
 10018     0F9B  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
 10019     0F9C  319D  2509  318F   	fcall	___wmul
 10020     0F9F  082F               	movf	?___wmul^(0+128),w
 10021     0FA0  0740               	addwf	GenericQueue_Remove@q^(0+128),w
 10022     0FA1  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
 10023     0FA2  0830               	movf	(?___wmul+1)^(0+128),w
 10024     0FA3  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10025     0FA4  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
 10026     0FA5  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
 10027     0FA6  00B7               	movwf	memcpy@s1^(0+128)
 10028     0FA7  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
 10029     0FA8  00B8               	movwf	(memcpy@s1+1)^(0+128)
 10030     0FA9  0840               	movf	GenericQueue_Remove@q^(0+128),w
 10031     0FAA  3E5A               	addlw	90
 10032     0FAB  0086               	movwf	6
 10033     0FAC  3000               	movlw	0
 10034     0FAD  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10035     0FAE  0087               	movwf	7
 10036     0FAF  3F40               	moviw [0]fsr1
 10037     0FB0  00B9               	movwf	memcpy@n^(0+128)
 10038     0FB1  3F41               	moviw [1]fsr1
 10039     0FB2  00BA               	movwf	(memcpy@n+1)^(0+128)
 10040     0FB3  319E  26C2  318F   	fcall	_memcpy
 10041                           
 10042                           ;generic_queue.c: 43:                 }
 10043     0FB6  300F               	movlw	15
 10044     0FB7  00A8               	movwf	___awmod@divisor^(0+128)
 10045     0FB8  3000               	movlw	0
 10046     0FB9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10047     0FBA  0848               	movf	GenericQueue_Remove@j^(0+128),w
 10048     0FBB  3E01               	addlw	1
 10049     0FBC  00AA               	movwf	___awmod@dividend^(0+128)
 10050     0FBD  3000               	movlw	0
 10051     0FBE  1803               	skipnc
 10052     0FBF  3001               	movlw	1
 10053     0FC0  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10054     0FC1  3191  21B5  318F   	fcall	___awmod
 10055     0FC4  0828               	movf	?___awmod^(0+128),w
 10056     0FC5  2F5B               	goto	L6
 10057     0FC6                     l5272:
 10058                           
 10059                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
 10060     0FC6  300F               	movlw	15
 10061     0FC7  00A8               	movwf	___awmod@divisor^(0+128)
 10062     0FC8  3000               	movlw	0
 10063     0FC9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10064     0FCA  0840               	movf	GenericQueue_Remove@q^(0+128),w
 10065     0FCB  3E5D               	addlw	93
 10066     0FCC  0086               	movwf	6
 10067     0FCD  3000               	movlw	0
 10068     0FCE  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10069     0FCF  0087               	movwf	7
 10070     0FD0  0801               	movf	1,w
 10071     0FD1  3E0E               	addlw	14
 10072     0FD2  00AA               	movwf	___awmod@dividend^(0+128)
 10073     0FD3  3000               	movlw	0
 10074     0FD4  1803               	skipnc
 10075     0FD5  3001               	movlw	1
 10076     0FD6  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10077     0FD7  3191  21B5         	fcall	___awmod
 10078     0FD9  0828               	movf	?___awmod^(0+128),w
 10079     0FDA  00C3               	movwf	??_GenericQueue_Remove^(0+128)
 10080     0FDB  0840               	movf	GenericQueue_Remove@q^(0+128),w
 10081     0FDC  3E5D               	addlw	93
 10082     0FDD  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
 10083     0FDE  3000               	movlw	0
 10084     0FDF  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10085     0FE0  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
 10086     0FE1  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
 10087     0FE2  0086               	movwf	6
 10088     0FE3  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
 10089     0FE4  0087               	movwf	7
 10090     0FE5  0843               	movf	??_GenericQueue_Remove^(0+128),w
 10091     0FE6  0081               	movwf	1
 10092                           
 10093                           ;generic_queue.c: 45:                 q->size--;
 10094     0FE7  0840               	movf	GenericQueue_Remove@q^(0+128),w
 10095     0FE8  3E5E               	addlw	94
 10096     0FE9  0086               	movwf	6
 10097     0FEA  3000               	movlw	0
 10098     0FEB  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
 10099     0FEC  0087               	movwf	7
 10100     0FED  3001               	movlw	1
 10101     0FEE  0281               	subwf	1,f
 10102                           
 10103                           ;generic_queue.c: 46:                 break;
 10104     0FEF  0008               	return
 10105     0FF0                     l5276:
 10106                           
 10107                           ;generic_queue.c: 48:         }
 10108     0FF0  300F               	movlw	15
 10109     0FF1  00A8               	movwf	___awmod@divisor^(0+128)
 10110     0FF2  3000               	movlw	0
 10111     0FF3  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10112     0FF4  0847               	movf	GenericQueue_Remove@i^(0+128),w
 10113     0FF5  3E01               	addlw	1
 10114     0FF6  00AA               	movwf	___awmod@dividend^(0+128)
 10115     0FF7  3000               	movlw	0
 10116     0FF8  1803               	skipnc
 10117     0FF9  3001               	movlw	1
 10118     0FFA  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10119     0FFB  3191  21B5  318F   	fcall	___awmod
 10120     0FFE  0828               	movf	?___awmod^(0+128),w
 10121     0FFF  2F1E               	goto	L5
 10122     1000                     __end_of_GenericQueue_Remove:
 10123                           
 10124                           	psect	text45
 10125     15E6                     __ptext45:	
 10126 ;; *************** function _GenericQueue_Enqueue *****************
 10127 ;; Defined at:
 10128 ;;		line 19 in file "generic_queue.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;  q               2   24[BANK1 ] PTR struct .
 10131 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 10132 ;;  item            2   26[BANK1 ] PTR const void 
 10133 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  1    wreg      void 
 10138 ;; Registers used:
 10139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10140 ;; Tracked objects:
 10141 ;;		On entry : 1F/1
 10142 ;;		On exit  : 1F/1
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        7 bytes
 10150 ;; Hardware stack levels used: 1
 10151 ;; Hardware stack levels required when called: 11
 10152 ;; This function calls:
 10153 ;;		_GenericQueue_IsFull
 10154 ;;		___awmod
 10155 ;;		___wmul
 10156 ;;		_memcpy
 10157 ;; This function is called by:
 10158 ;;		_APP_KeyboardUpdateState
 10159 ;; This function uses a non-reentrant model
 10160 ;;
 10161                           
 10162     15E6                     _GenericQueue_Enqueue:	
 10163                           ;psect for function _GenericQueue_Enqueue
 10164                           
 10165                           
 10166                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 10167                           
 10168                           ;incstack = 0
 10169                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10170     15E6  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
 10171     15E7  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
 10172     15E8  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10173     15E9  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
 10174     15EA  3187  27EC  3195   	fcall	_GenericQueue_IsFull
 10175     15ED  0828               	movf	?_GenericQueue_IsFull^(0+128),w
 10176     15EE  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
 10177     15EF  1D03               	btfss	3,2
 10178     15F0  0008               	return
 10179                           
 10180                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 10181     15F1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10182     15F2  3E5D               	addlw	93
 10183     15F3  0086               	movwf	6
 10184     15F4  3000               	movlw	0
 10185     15F5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10186     15F6  0087               	movwf	7
 10187     15F7  0801               	movf	1,w
 10188     15F8  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
 10189     15F9  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
 10190     15FA  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
 10191     15FB  00AF               	movwf	___wmul@multiplier^(0+128)
 10192     15FC  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
 10193     15FD  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
 10194     15FE  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10195     15FF  3E5A               	addlw	90
 10196     1600  0086               	movwf	6
 10197     1601  3000               	movlw	0
 10198     1602  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10199     1603  0087               	movwf	7
 10200     1604  3F40               	moviw [0]fsr1
 10201     1605  00B1               	movwf	___wmul@multiplicand^(0+128)
 10202     1606  3F41               	moviw [1]fsr1
 10203     1607  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
 10204     1608  319D  2509  3195   	fcall	___wmul
 10205     160B  082F               	movf	?___wmul^(0+128),w
 10206     160C  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
 10207     160D  00B5               	movwf	memcpy@d1^(0+128)
 10208     160E  0830               	movf	(?___wmul+1)^(0+128),w
 10209     160F  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10210     1610  00B6               	movwf	(memcpy@d1+1)^(0+128)
 10211     1611  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
 10212     1612  00B8               	movwf	(memcpy@s1+1)^(0+128)
 10213     1613  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
 10214     1614  00B7               	movwf	memcpy@s1^(0+128)
 10215     1615  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10216     1616  3E5A               	addlw	90
 10217     1617  0086               	movwf	6
 10218     1618  3000               	movlw	0
 10219     1619  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10220     161A  0087               	movwf	7
 10221     161B  3F40               	moviw [0]fsr1
 10222     161C  00B9               	movwf	memcpy@n^(0+128)
 10223     161D  3F41               	moviw [1]fsr1
 10224     161E  00BA               	movwf	(memcpy@n+1)^(0+128)
 10225     161F  319E  26C2  3195   	fcall	_memcpy
 10226                           
 10227                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 10228     1622  300F               	movlw	15
 10229     1623  00A8               	movwf	___awmod@divisor^(0+128)
 10230     1624  3000               	movlw	0
 10231     1625  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10232     1626  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10233     1627  3E5D               	addlw	93
 10234     1628  0086               	movwf	6
 10235     1629  3000               	movlw	0
 10236     162A  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10237     162B  0087               	movwf	7
 10238     162C  0801               	movf	1,w
 10239     162D  3E01               	addlw	1
 10240     162E  00AA               	movwf	___awmod@dividend^(0+128)
 10241     162F  3000               	movlw	0
 10242     1630  1803               	skipnc
 10243     1631  3001               	movlw	1
 10244     1632  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10245     1633  3191  21B5         	fcall	___awmod
 10246     1635  0828               	movf	?___awmod^(0+128),w
 10247     1636  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
 10248     1637  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10249     1638  3E5D               	addlw	93
 10250     1639  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
 10251     163A  3000               	movlw	0
 10252     163B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10253     163C  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
 10254     163D  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
 10255     163E  0086               	movwf	6
 10256     163F  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
 10257     1640  0087               	movwf	7
 10258     1641  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
 10259     1642  0081               	movwf	1
 10260                           
 10261                           ;generic_queue.c: 23:         q->size++;
 10262     1643  3001               	movlw	1
 10263     1644  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
 10264     1645  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
 10265     1646  3E5E               	addlw	94
 10266     1647  0086               	movwf	6
 10267     1648  3000               	movlw	0
 10268     1649  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
 10269     164A  0087               	movwf	7
 10270     164B  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
 10271     164C  0781               	addwf	1,f
 10272     164D  0008               	return
 10273     164E                     __end_of_GenericQueue_Enqueue:
 10274                           
 10275                           	psect	text46
 10276     1EC2                     __ptext46:	
 10277 ;; *************** function _memcpy *****************
 10278 ;; Defined at:
 10279 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 10280 ;; Parameters:    Size  Location     Type
 10281 ;;  d1              2   13[BANK1 ] PTR void 
 10282 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 10283 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 10284 ;;  s1              2   15[BANK1 ] PTR const void 
 10285 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
 10286 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), keyboard(101), CtrlTrfDa
      +ta(8), 
 10287 ;;		 -> SetupPkt(8), 
 10288 ;;  n               2   17[BANK1 ] unsigned int 
 10289 ;; Auto vars:     Size  Location     Type
 10290 ;;  s               2   21[BANK1 ] PTR const unsigned char 
 10291 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
 10292 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), keyboard(101), CtrlTrfDa
      +ta(8), 
 10293 ;;		 -> SetupPkt(8), 
 10294 ;;  d               2   19[BANK1 ] PTR unsigned char 
 10295 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 10296 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 10297 ;;  tmp             1   23[BANK1 ] unsigned char 
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  2   13[BANK1 ] PTR void 
 10300 ;; Registers used:
 10301 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10302 ;; Tracked objects:
 10303 ;;		On entry : 1F/1
 10304 ;;		On exit  : 1F/1
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:       11 bytes
 10312 ;; Hardware stack levels used: 1
 10313 ;; Hardware stack levels required when called: 10
 10314 ;; This function calls:
 10315 ;;		Nothing
 10316 ;; This function is called by:
 10317 ;;		_GenericQueue_Enqueue
 10318 ;;		_GenericQueue_Dequeue
 10319 ;;		_GenericQueue_Remove
 10320 ;;		_GenericQueue_CopyToArray
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324     1EC2                     _memcpy:	
 10325                           ;psect for function _memcpy
 10326                           
 10327                           
 10328                           ;incstack = 0
 10329                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 10330     1EC2  0838               	movf	(memcpy@s1+1)^(0+128),w
 10331     1EC3  00BE               	movwf	(memcpy@s+1)^(0+128)
 10332     1EC4  0837               	movf	memcpy@s1^(0+128),w
 10333     1EC5  00BD               	movwf	memcpy@s^(0+128)
 10334     1EC6  0836               	movf	(memcpy@d1+1)^(0+128),w
 10335     1EC7  00BC               	movwf	(memcpy@d+1)^(0+128)
 10336     1EC8  0835               	movf	memcpy@d1^(0+128),w
 10337     1EC9  00BB               	movwf	memcpy@d^(0+128)
 10338     1ECA                     l4940:
 10339     1ECA  3001               	movlw	1
 10340     1ECB  02B9               	subwf	memcpy@n^(0+128),f
 10341     1ECC  3000               	movlw	0
 10342     1ECD  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
 10343     1ECE  0A39               	incf	memcpy@n^(0+128),w
 10344     1ECF  1903               	btfsc	3,2
 10345     1ED0  0A3A               	incf	(memcpy@n+1)^(0+128),w
 10346     1ED1  1903               	btfsc	3,2
 10347     1ED2  0008               	return
 10348     1ED3  083D               	movf	memcpy@s^(0+128),w
 10349     1ED4  0086               	movwf	6
 10350     1ED5  083E               	movf	(memcpy@s+1)^(0+128),w
 10351     1ED6  0087               	movwf	7
 10352     1ED7  0801               	movf	1,w
 10353     1ED8  00BF               	movwf	memcpy@tmp^(0+128)
 10354     1ED9  3001               	movlw	1
 10355     1EDA  07BD               	addwf	memcpy@s^(0+128),f
 10356     1EDB  3000               	movlw	0
 10357     1EDC  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
 10358     1EDD  083B               	movf	memcpy@d^(0+128),w
 10359     1EDE  0086               	movwf	6
 10360     1EDF  083C               	movf	(memcpy@d+1)^(0+128),w
 10361     1EE0  0087               	movwf	7
 10362     1EE1  083F               	movf	memcpy@tmp^(0+128),w
 10363     1EE2  0081               	movwf	1
 10364     1EE3  3001               	movlw	1
 10365     1EE4  07BB               	addwf	memcpy@d^(0+128),f
 10366     1EE5  3000               	movlw	0
 10367     1EE6  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
 10368     1EE7  2ECA               	goto	l4940
 10369     1EE8                     __end_of_memcpy:
 10370                           
 10371                           	psect	text47
 10372     07EC                     __ptext47:	
 10373 ;; *************** function _GenericQueue_IsFull *****************
 10374 ;; Defined at:
 10375 ;;		line 15 in file "generic_queue.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;  q               2    0[BANK1 ] PTR struct .
 10378 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;		None
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  2    0[BANK1 ] int 
 10383 ;; Registers used:
 10384 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10385 ;; Tracked objects:
 10386 ;;		On entry : 1F/1
 10387 ;;		On exit  : 1F/1
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10390 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10392 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10393 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;Total ram usage:        4 bytes
 10395 ;; Hardware stack levels used: 1
 10396 ;; Hardware stack levels required when called: 10
 10397 ;; This function calls:
 10398 ;;		Nothing
 10399 ;; This function is called by:
 10400 ;;		_GenericQueue_Enqueue
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404     07EC                     _GenericQueue_IsFull:	
 10405                           ;psect for function _GenericQueue_IsFull
 10406                           
 10407                           
 10408                           ;generic_queue.c: 16:     return (q->size == 15);
 10409                           
 10410                           ;incstack = 0
 10411                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 10412     07EC  0828               	movf	GenericQueue_IsFull@q^(0+128),w
 10413     07ED  3E5E               	addlw	94
 10414     07EE  0086               	movwf	6
 10415     07EF  3000               	movlw	0
 10416     07F0  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
 10417     07F1  0087               	movwf	7
 10418     07F2  300F               	movlw	15
 10419     07F3  0601               	xorwf	1,w
 10420     07F4  1D03               	btfss	3,2
 10421     07F5  2FF8               	goto	u4200
 10422     07F6  3001               	movlw	1
 10423     07F7  2FF9               	goto	u4210
 10424     07F8                     u4200:
 10425     07F8  3000               	movlw	0
 10426     07F9                     u4210:
 10427     07F9  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
 10428     07FA  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
 10429     07FB  082A               	movf	??_GenericQueue_IsFull^(0+128),w
 10430     07FC  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
 10431     07FD  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
 10432     07FE  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
 10433     07FF  0008               	return
 10434     0800                     __end_of_GenericQueue_IsFull:
 10435                           
 10436                           	psect	text48
 10437     13EC                     __ptext48:	
 10438 ;; *************** function _GenericQueue_Contains *****************
 10439 ;; Defined at:
 10440 ;;		line 52 in file "generic_queue.c"
 10441 ;; Parameters:    Size  Location     Type
 10442 ;;  q               2   22[BANK1 ] PTR struct .
 10443 ;;		 -> keyboard(101), 
 10444 ;;  item            1   24[BANK1 ] PTR const void 
 10445 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
 10446 ;; Auto vars:     Size  Location     Type
 10447 ;;  i               1   29[BANK1 ] unsigned char 
 10448 ;; Return value:  Size  Location     Type
 10449 ;;                  1    wreg      _Bool 
 10450 ;; Registers used:
 10451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10452 ;; Tracked objects:
 10453 ;;		On entry : 1F/1
 10454 ;;		On exit  : 1F/1
 10455 ;;		Unchanged: 0/0
 10456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10457 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10460 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;Total ram usage:        8 bytes
 10462 ;; Hardware stack levels used: 1
 10463 ;; Hardware stack levels required when called: 11
 10464 ;; This function calls:
 10465 ;;		_GenericQueue_IsEmpty
 10466 ;;		___awmod
 10467 ;;		___wmul
 10468 ;;		_memcmp
 10469 ;; This function is called by:
 10470 ;;		_APP_KeyboardUpdateState
 10471 ;; This function uses a non-reentrant model
 10472 ;;
 10473                           
 10474     13EC                     _GenericQueue_Contains:	
 10475                           ;psect for function _GenericQueue_Contains
 10476                           
 10477                           
 10478                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
 10479                           
 10480                           ;incstack = 0
 10481                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10482     13EC  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
 10483     13ED  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
 10484     13EE  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10485     13EF  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
 10486     13F0  319B  23F2  3193   	fcall	_GenericQueue_IsEmpty
 10487     13F3  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
 10488     13F4  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
 10489     13F5  1D03               	btfss	3,2
 10490     13F6  2C4C               	goto	l5294
 10491                           
 10492                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
 10493     13F7  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10494     13F8  3E5C               	addlw	92
 10495     13F9  0086               	movwf	6
 10496     13FA  3000               	movlw	0
 10497     13FB  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10498     13FC  0087               	movwf	7
 10499     13FD  0801               	movf	1,w
 10500     13FE                     L7:
 10501     13FE  00C5               	movwf	GenericQueue_Contains@i^(0+128)
 10502     13FF  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10503     1400  3E5D               	addlw	93
 10504     1401  0086               	movwf	6
 10505     1402  3000               	movlw	0
 10506     1403  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10507     1404  0087               	movwf	7
 10508     1405  0801               	movf	1,w
 10509     1406  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
 10510     1407  1903               	btfsc	3,2
 10511     1408  2C4C               	goto	l5294
 10512                           
 10513                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
 10514     1409  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10515     140A  00C1               	movwf	??_GenericQueue_Contains^(0+128)
 10516     140B  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
 10517     140C  0841               	movf	??_GenericQueue_Contains^(0+128),w
 10518     140D  00AF               	movwf	___wmul@multiplier^(0+128)
 10519     140E  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
 10520     140F  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
 10521     1410  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10522     1411  3E5A               	addlw	90
 10523     1412  0086               	movwf	6
 10524     1413  3000               	movlw	0
 10525     1414  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10526     1415  0087               	movwf	7
 10527     1416  3F40               	moviw [0]fsr1
 10528     1417  00B1               	movwf	___wmul@multiplicand^(0+128)
 10529     1418  3F41               	moviw [1]fsr1
 10530     1419  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
 10531     141A  319D  2509  3193   	fcall	___wmul
 10532     141D  082F               	movf	?___wmul^(0+128),w
 10533     141E  073E               	addwf	GenericQueue_Contains@q^(0+128),w
 10534     141F  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
 10535     1420  0830               	movf	(?___wmul+1)^(0+128),w
 10536     1421  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10537     1422  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
 10538     1423  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
 10539     1424  00B5               	movwf	memcmp@vl^(0+128)
 10540     1425  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
 10541     1426  00B6               	movwf	(memcmp@vl+1)^(0+128)
 10542     1427  0840               	movf	GenericQueue_Contains@item^(0+128),w
 10543     1428  00B7               	movwf	memcmp@vr^(0+128)
 10544     1429  083E               	movf	GenericQueue_Contains@q^(0+128),w
 10545     142A  3E5A               	addlw	90
 10546     142B  0086               	movwf	6
 10547     142C  3000               	movlw	0
 10548     142D  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
 10549     142E  0087               	movwf	7
 10550     142F  3F40               	moviw [0]fsr1
 10551     1430  00B8               	movwf	memcmp@n^(0+128)
 10552     1431  3F41               	moviw [1]fsr1
 10553     1432  00B9               	movwf	(memcmp@n+1)^(0+128)
 10554     1433  319F  2718  3193   	fcall	_memcmp
 10555     1436  0835               	movf	?_memcmp^(0+128),w
 10556     1437  0436               	iorwf	(?_memcmp+1)^(0+128),w
 10557     1438  1D03               	btfss	3,2
 10558     1439  2C3C               	goto	l5290
 10559                           
 10560                           ;generic_queue.c: 56:                 return 1;
 10561     143A  3001               	movlw	1
 10562     143B  0008               	return
 10563     143C                     l5290:
 10564                           
 10565                           ;generic_queue.c: 58:         }
 10566     143C  300F               	movlw	15
 10567     143D  00A8               	movwf	___awmod@divisor^(0+128)
 10568     143E  3000               	movlw	0
 10569     143F  00A9               	movwf	(___awmod@divisor^(0+128)+1)
 10570     1440  0845               	movf	GenericQueue_Contains@i^(0+128),w
 10571     1441  3E01               	addlw	1
 10572     1442  00AA               	movwf	___awmod@dividend^(0+128)
 10573     1443  3000               	movlw	0
 10574     1444  1803               	skipnc
 10575     1445  3001               	movlw	1
 10576     1446  00AB               	movwf	(___awmod@dividend^(0+128)+1)
 10577     1447  3191  21B5  3193   	fcall	___awmod
 10578     144A  0828               	movf	?___awmod^(0+128),w
 10579     144B  2BFE               	goto	L7
 10580     144C                     l5294:
 10581                           
 10582                           ;generic_queue.c: 60:     return 0;
 10583     144C  3000               	movlw	0
 10584     144D  0008               	return
 10585     144E                     __end_of_GenericQueue_Contains:
 10586                           
 10587                           	psect	text49
 10588     1F18                     __ptext49:	
 10589 ;; *************** function _memcmp *****************
 10590 ;; Defined at:
 10591 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;  vl              2   13[BANK1 ] PTR const void 
 10594 ;;		 -> keyboard$buffer(90), keyboard(101), 
 10595 ;;  vr              1   15[BANK1 ] PTR const void 
 10596 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@
      +usbHidCode_2928(1), APP_KeyboardUpdateState@usbHidCode(1), 
 10597 ;;  n               2   16[BANK1 ] unsigned int 
 10598 ;; Auto vars:     Size  Location     Type
 10599 ;;  l               2   19[BANK1 ] PTR const unsigned char 
 10600 ;;		 -> keyboard$buffer(90), keyboard(101), 
 10601 ;;  r               1   21[BANK1 ] PTR const unsigned char 
 10602 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@
      +usbHidCode_2928(1), APP_KeyboardUpdateState@usbHidCode(1), 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  2   13[BANK1 ] int 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10607 ;; Tracked objects:
 10608 ;;		On entry : 1F/1
 10609 ;;		On exit  : 1F/1
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10612 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;Total ram usage:        9 bytes
 10617 ;; Hardware stack levels used: 1
 10618 ;; Hardware stack levels required when called: 10
 10619 ;; This function calls:
 10620 ;;		Nothing
 10621 ;; This function is called by:
 10622 ;;		_GenericQueue_Remove
 10623 ;;		_GenericQueue_Contains
 10624 ;; This function uses a non-reentrant model
 10625 ;;
 10626                           
 10627     1F18                     _memcmp:	
 10628                           ;psect for function _memcmp
 10629                           
 10630                           
 10631                           ;incstack = 0
 10632                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
 10633     1F18  0836               	movf	(memcmp@vl+1)^(0+128),w
 10634     1F19  00BC               	movwf	(memcmp@l+1)^(0+128)
 10635     1F1A  0835               	movf	memcmp@vl^(0+128),w
 10636     1F1B  00BB               	movwf	memcmp@l^(0+128)
 10637     1F1C  0837               	movf	memcmp@vr^(0+128),w
 10638     1F1D  00BD               	movwf	memcmp@r^(0+128)
 10639     1F1E  2F36               	goto	l4998
 10640     1F1F                     l5000:
 10641     1F1F  083D               	movf	memcmp@r^(0+128),w
 10642     1F20  0086               	movwf	6
 10643     1F21  0187               	clrf	7
 10644     1F22  083B               	movf	memcmp@l^(0+128),w
 10645     1F23  0084               	movwf	4
 10646     1F24  083C               	movf	(memcmp@l+1)^(0+128),w
 10647     1F25  0085               	movwf	5
 10648     1F26  0800               	movf	0,w
 10649     1F27  0601               	xorwf	1,w
 10650     1F28  1D03               	btfss	3,2
 10651     1F29  2F3A               	goto	l5002
 10652     1F2A  3001               	movlw	1
 10653     1F2B  02B8               	subwf	memcmp@n^(0+128),f
 10654     1F2C  3000               	movlw	0
 10655     1F2D  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
 10656     1F2E  3001               	movlw	1
 10657     1F2F  07BB               	addwf	memcmp@l^(0+128),f
 10658     1F30  3000               	movlw	0
 10659     1F31  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
 10660     1F32  3001               	movlw	1
 10661     1F33  00BA               	movwf	??_memcmp^(0+128)
 10662     1F34  083A               	movf	??_memcmp^(0+128),w
 10663     1F35  07BD               	addwf	memcmp@r^(0+128),f
 10664     1F36                     l4998:
 10665     1F36  0838               	movf	memcmp@n^(0+128),w
 10666     1F37  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10667     1F38  1D03               	btfss	3,2
 10668     1F39  2F1F               	goto	l5000
 10669     1F3A                     l5002:
 10670     1F3A  0838               	movf	memcmp@n^(0+128),w
 10671     1F3B  0439               	iorwf	(memcmp@n+1)^(0+128),w
 10672     1F3C  1D03               	btfss	3,2
 10673     1F3D  2F41               	goto	l5006
 10674     1F3E  01B5               	clrf	?_memcmp^(0+128)
 10675     1F3F  01B6               	clrf	(?_memcmp+1)^(0+128)
 10676     1F40  0008               	return
 10677     1F41                     l5006:
 10678     1F41  083B               	movf	memcmp@l^(0+128),w
 10679     1F42  0086               	movwf	6
 10680     1F43  083C               	movf	(memcmp@l+1)^(0+128),w
 10681     1F44  0087               	movwf	7
 10682     1F45  083D               	movf	memcmp@r^(0+128),w
 10683     1F46  0084               	movwf	4
 10684     1F47  0185               	clrf	5
 10685     1F48  0800               	movf	0,w
 10686     1F49  0201               	subwf	1,w
 10687     1F4A  00B5               	movwf	?_memcmp^(0+128)
 10688     1F4B  01B6               	clrf	(?_memcmp^(0+128)+1)
 10689     1F4C  1C03               	skipc
 10690     1F4D  03B6               	decf	(?_memcmp+1)^(0+128),f
 10691     1F4E  0008               	return
 10692     1F4F                     __end_of_memcmp:
 10693                           
 10694                           	psect	text50
 10695     1D09                     __ptext50:	
 10696 ;; *************** function ___wmul *****************
 10697 ;; Defined at:
 10698 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  multiplier      2    7[BANK1 ] unsigned int 
 10701 ;;  multiplicand    2    9[BANK1 ] unsigned int 
 10702 ;; Auto vars:     Size  Location     Type
 10703 ;;  product         2   11[BANK1 ] unsigned int 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  2    7[BANK1 ] unsigned int 
 10706 ;; Registers used:
 10707 ;;		wreg, status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 1F/1
 10710 ;;		On exit  : 1F/1
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10713 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;Total ram usage:        6 bytes
 10718 ;; Hardware stack levels used: 1
 10719 ;; Hardware stack levels required when called: 10
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_GenericQueue_Enqueue
 10724 ;;		_GenericQueue_Dequeue
 10725 ;;		_GenericQueue_Remove
 10726 ;;		_GenericQueue_Contains
 10727 ;;		_GenericQueue_CopyToArray
 10728 ;;		_read_prec_or_width
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732     1D09                     ___wmul:	
 10733                           ;psect for function ___wmul
 10734                           
 10735                           
 10736                           ;incstack = 0
 10737                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10738     1D09  01B3               	clrf	___wmul@product^(0+128)
 10739     1D0A  01B4               	clrf	(___wmul@product+1)^(0+128)
 10740     1D0B                     l4732:
 10741     1D0B  1C2F               	btfss	___wmul@multiplier^(0+128),0
 10742     1D0C  2D11               	goto	l1306
 10743     1D0D  0831               	movf	___wmul@multiplicand^(0+128),w
 10744     1D0E  07B3               	addwf	___wmul@product^(0+128),f
 10745     1D0F  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
 10746     1D10  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
 10747     1D11                     l1306:
 10748     1D11  3001               	movlw	1
 10749     1D12                     u3805:
 10750     1D12  35B1               	lslf	___wmul@multiplicand^(0+128),f
 10751     1D13  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
 10752     1D14  0B89               	decfsz	9,f
 10753     1D15  2D12               	goto	u3805
 10754     1D16  3001               	movlw	1
 10755     1D17                     u3815:
 10756     1D17  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
 10757     1D18  0CAF               	rrf	___wmul@multiplier^(0+128),f
 10758     1D19  0B89               	decfsz	9,f
 10759     1D1A  2D17               	goto	u3815
 10760     1D1B  082F               	movf	___wmul@multiplier^(0+128),w
 10761     1D1C  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
 10762     1D1D  1D03               	btfss	3,2
 10763     1D1E  2D0B               	goto	l4732
 10764     1D1F  0834               	movf	(___wmul@product+1)^(0+128),w
 10765     1D20  00B0               	movwf	(?___wmul+1)^(0+128)
 10766     1D21  0833               	movf	___wmul@product^(0+128),w
 10767     1D22  00AF               	movwf	?___wmul^(0+128)
 10768     1D23  0008               	return
 10769     1D24                     __end_of___wmul:
 10770                           
 10771                           	psect	text51
 10772     11B5                     __ptext51:	
 10773 ;; *************** function ___awmod *****************
 10774 ;; Defined at:
 10775 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;  divisor         2    0[BANK1 ] int 
 10778 ;;  dividend        2    2[BANK1 ] int 
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  sign            1    6[BANK1 ] unsigned char 
 10781 ;;  counter         1    5[BANK1 ] unsigned char 
 10782 ;; Return value:  Size  Location     Type
 10783 ;;                  2    0[BANK1 ] int 
 10784 ;; Registers used:
 10785 ;;		wreg, status,2, status,0
 10786 ;; Tracked objects:
 10787 ;;		On entry : 1F/1
 10788 ;;		On exit  : 1F/1
 10789 ;;		Unchanged: 0/0
 10790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10791 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;Total ram usage:        7 bytes
 10796 ;; Hardware stack levels used: 1
 10797 ;; Hardware stack levels required when called: 10
 10798 ;; This function calls:
 10799 ;;		Nothing
 10800 ;; This function is called by:
 10801 ;;		_GenericQueue_Enqueue
 10802 ;;		_GenericQueue_Dequeue
 10803 ;;		_GenericQueue_Remove
 10804 ;;		_GenericQueue_Contains
 10805 ;;		_GenericQueue_CopyToArray
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809     11B5                     ___awmod:	
 10810                           ;psect for function ___awmod
 10811                           
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10815     11B5  01AE               	clrf	___awmod@sign^(0+128)
 10816     11B6  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
 10817     11B7  29BF               	goto	l5018
 10818     11B8  09AA               	comf	___awmod@dividend^(0+128),f
 10819     11B9  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10820     11BA  0AAA               	incf	___awmod@dividend^(0+128),f
 10821     11BB  1903               	skipnz
 10822     11BC  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10823     11BD  01AE               	clrf	___awmod@sign^(0+128)
 10824     11BE  0AAE               	incf	___awmod@sign^(0+128),f
 10825     11BF                     l5018:
 10826     11BF  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
 10827     11C0  29C6               	goto	l5022
 10828     11C1  09A8               	comf	___awmod@divisor^(0+128),f
 10829     11C2  09A9               	comf	(___awmod@divisor+1)^(0+128),f
 10830     11C3  0AA8               	incf	___awmod@divisor^(0+128),f
 10831     11C4  1903               	skipnz
 10832     11C5  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
 10833     11C6                     l5022:
 10834     11C6  0828               	movf	___awmod@divisor^(0+128),w
 10835     11C7  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
 10836     11C8  1903               	btfsc	3,2
 10837     11C9  29ED               	goto	l5040
 10838     11CA  01AD               	clrf	___awmod@counter^(0+128)
 10839     11CB  0AAD               	incf	___awmod@counter^(0+128),f
 10840     11CC                     l5030:
 10841     11CC  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
 10842     11CD  29D8               	goto	l5032
 10843     11CE  3001               	movlw	1
 10844     11CF                     u4285:
 10845     11CF  35A8               	lslf	___awmod@divisor^(0+128),f
 10846     11D0  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
 10847     11D1  0B89               	decfsz	9,f
 10848     11D2  29CF               	goto	u4285
 10849     11D3  3001               	movlw	1
 10850     11D4  00AC               	movwf	??___awmod^(0+128)
 10851     11D5  082C               	movf	??___awmod^(0+128),w
 10852     11D6  07AD               	addwf	___awmod@counter^(0+128),f
 10853     11D7  29CC               	goto	l5030
 10854     11D8                     l5032:
 10855     11D8  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10856     11D9  022B               	subwf	(___awmod@dividend+1)^(0+128),w
 10857     11DA  1D03               	skipz
 10858     11DB  29DE               	goto	u4305
 10859     11DC  0828               	movf	___awmod@divisor^(0+128),w
 10860     11DD  022A               	subwf	___awmod@dividend^(0+128),w
 10861     11DE                     u4305:
 10862     11DE  1C03               	skipc
 10863     11DF  29E4               	goto	l5036
 10864     11E0  0828               	movf	___awmod@divisor^(0+128),w
 10865     11E1  02AA               	subwf	___awmod@dividend^(0+128),f
 10866     11E2  0829               	movf	(___awmod@divisor+1)^(0+128),w
 10867     11E3  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
 10868     11E4                     l5036:
 10869     11E4  3001               	movlw	1
 10870     11E5                     u4315:
 10871     11E5  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
 10872     11E6  0CA8               	rrf	___awmod@divisor^(0+128),f
 10873     11E7  0B89               	decfsz	9,f
 10874     11E8  29E5               	goto	u4315
 10875     11E9  3001               	movlw	1
 10876     11EA  02AD               	subwf	___awmod@counter^(0+128),f
 10877     11EB  1D03               	btfss	3,2
 10878     11EC  29D8               	goto	l5032
 10879     11ED                     l5040:
 10880     11ED  082E               	movf	___awmod@sign^(0+128),w
 10881     11EE  1903               	btfsc	3,2
 10882     11EF  29F5               	goto	l5044
 10883     11F0  09AA               	comf	___awmod@dividend^(0+128),f
 10884     11F1  09AB               	comf	(___awmod@dividend+1)^(0+128),f
 10885     11F2  0AAA               	incf	___awmod@dividend^(0+128),f
 10886     11F3  1903               	skipnz
 10887     11F4  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
 10888     11F5                     l5044:
 10889     11F5  082B               	movf	(___awmod@dividend+1)^(0+128),w
 10890     11F6  00A9               	movwf	(?___awmod+1)^(0+128)
 10891     11F7  082A               	movf	___awmod@dividend^(0+128),w
 10892     11F8  00A8               	movwf	?___awmod^(0+128)
 10893     11F9  0008               	return
 10894     11FA                     __end_of___awmod:
 10895                           
 10896                           	psect	text52
 10897     1BF2                     __ptext52:	
 10898 ;; *************** function _GenericQueue_IsEmpty *****************
 10899 ;; Defined at:
 10900 ;;		line 11 in file "generic_queue.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;  q               2    0[BANK1 ] PTR struct .
 10903 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;		None
 10906 ;; Return value:  Size  Location     Type
 10907 ;;                  2    0[BANK1 ] int 
 10908 ;; Registers used:
 10909 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10910 ;; Tracked objects:
 10911 ;;		On entry : 1F/1
 10912 ;;		On exit  : 1F/1
 10913 ;;		Unchanged: 0/0
 10914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10915 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;Total ram usage:        4 bytes
 10920 ;; Hardware stack levels used: 1
 10921 ;; Hardware stack levels required when called: 10
 10922 ;; This function calls:
 10923 ;;		Nothing
 10924 ;; This function is called by:
 10925 ;;		_PS2Keyboard_GetScanCode
 10926 ;;		_GenericQueue_Dequeue
 10927 ;;		_GenericQueue_Remove
 10928 ;;		_GenericQueue_Contains
 10929 ;; This function uses a non-reentrant model
 10930 ;;
 10931                           
 10932     1BF2                     _GenericQueue_IsEmpty:	
 10933                           ;psect for function _GenericQueue_IsEmpty
 10934                           
 10935                           
 10936                           ;generic_queue.c: 12:     return (q->size == 0);
 10937                           
 10938                           ;incstack = 0
 10939                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
 10940     1BF2  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
 10941     1BF3  3E5E               	addlw	94
 10942     1BF4  0086               	movwf	6
 10943     1BF5  3000               	movlw	0
 10944     1BF6  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
 10945     1BF7  0087               	movwf	7
 10946     1BF8  0801               	movf	1,w
 10947     1BF9  1D03               	btfss	3,2
 10948     1BFA  2BFD               	goto	u4180
 10949     1BFB  3001               	movlw	1
 10950     1BFC  2BFE               	goto	u4190
 10951     1BFD                     u4180:
 10952     1BFD  3000               	movlw	0
 10953     1BFE                     u4190:
 10954     1BFE  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
 10955     1BFF  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
 10956     1C00  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
 10957     1C01  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
 10958     1C02  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
 10959     1C03  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
 10960     1C04  0008               	return
 10961     1C05                     __end_of_GenericQueue_IsEmpty:
 10962                           
 10963                           	psect	text53
 10964     1B50                     __ptext53:	
 10965 ;; *************** function _APP_KeyboardProcessOutputReport *****************
 10966 ;; Defined at:
 10967 ;;		line 525 in file "app_device_keyboard.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 1D/1
 10978 ;;		On exit  : 1F/2
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        0 bytes
 10986 ;; Hardware stack levels used: 1
 10987 ;; Hardware stack levels required when called: 11
 10988 ;; This function calls:
 10989 ;;		_PS2Keyboard_SendCommand
 10990 ;; This function is called by:
 10991 ;;		_APP_KeyboardTasks
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995     1B50                     _APP_KeyboardProcessOutputReport:	
 10996                           ;psect for function _APP_KeyboardProcessOutputReport
 10997                           
 10998                           
 10999                           ;app_device_keyboard.c: 526:     keyboard.leds.value = outputReport.value;
 11000                           
 11001                           ;incstack = 0
 11002                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 11003     1B50  3090               	movlw	144
 11004     1B51  0086               	movwf	6
 11005     1B52  3023               	movlw	35
 11006     1B53  0087               	movwf	7
 11007     1B54  0022               	movlb	2	; select bank2
 11008     1B55  0820               	movf	32,w	;volatile
 11009     1B56  0081               	movwf	1
 11010                           
 11011                           ;app_device_keyboard.c: 527:     PS2Keyboard_SendCommand(0xED);
 11012     1B57  30ED               	movlw	237
 11013     1B58  319D  253F         	fcall	_PS2Keyboard_SendCommand
 11014     1B5A  0008               	return
 11015     1B5B                     __end_of_APP_KeyboardProcessOutputReport:
 11016                           
 11017                           	psect	text54
 11018     1D3F                     __ptext54:	
 11019 ;; *************** function _PS2Keyboard_SendCommand *****************
 11020 ;; Defined at:
 11021 ;;		line 60 in file "ps2_keyboard.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;  cmd             1    wreg     unsigned char 
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  cmd             1    0[BANK1 ] unsigned char 
 11026 ;; Return value:  Size  Location     Type
 11027 ;;                  1    wreg      void 
 11028 ;; Registers used:
 11029 ;;		wreg, status,2
 11030 ;; Tracked objects:
 11031 ;;		On entry : 1C/1
 11032 ;;		On exit  : 1F/2
 11033 ;;		Unchanged: 0/0
 11034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;Total ram usage:        1 bytes
 11040 ;; Hardware stack levels used: 1
 11041 ;; Hardware stack levels required when called: 10
 11042 ;; This function calls:
 11043 ;;		Nothing
 11044 ;; This function is called by:
 11045 ;;		_APP_KeyboardUpdateState
 11046 ;;		_APP_KeyboardProcessOutputReport
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050     1D3F                     _PS2Keyboard_SendCommand:	
 11051                           ;psect for function _PS2Keyboard_SendCommand
 11052                           
 11053                           
 11054                           ;incstack = 0
 11055                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
 11056                           ;PS2Keyboard_SendCommand@cmd stored from wreg
 11057     1D3F  0021               	movlb	1	; select bank1
 11058     1D40  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
 11059                           
 11060                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 11061     1D41  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
 11062     1D42  0022               	movlb	2	; select bank2
 11063     1D43  00B5               	movwf	_keyboardCommand^(0+256)	;volatile
 11064                           
 11065                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 11066     1D44  138B               	bcf	11,7	;volatile
 11067     1D45  0021               	movlb	1	; select bank1
 11068     1D46  120C               	bcf	12,4	;volatile
 11069     1D47  0022               	movlb	2	; select bank2
 11070     1D48  120C               	bcf	12,4	;volatile
 11071                           
 11072                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 11073     1D49  30F0               	movlw	240
 11074     1D4A                     u7397:
 11075     1D4A  3200               	nop2
 11076     1D4B  0B89               	decfsz	9,f
 11077     1D4C  2D4A               	goto	u7397
 11078     1D4D  0021               	movlb	1	; select bank1
 11079     1D4E  160C               	bsf	12,4	;volatile
 11080                           
 11081                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 11082     1D4F  0020               	movlb	0	; select bank0
 11083     1D50  01E9               	clrf	_keyboardCommandCount	;volatile
 11084                           
 11085                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 11086     1D51  300C               	movlw	12
 11087     1D52  0023               	movlb	3	; select bank3
 11088     1D53  00DE               	movwf	_keyboardCommandBits^(0+384)	;volatile
 11089                           
 11090                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 11091     1D54  01DD               	clrf	_keyboardCommandOnes^(0+384)	;volatile
 11092     1D55  0021               	movlb	1	; select bank1
 11093     1D56  128C               	bcf	12,5	;volatile
 11094     1D57  0022               	movlb	2	; select bank2
 11095     1D58  128C               	bcf	12,5	;volatile
 11096                           
 11097                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 11098     1D59  178B               	bsf	11,7	;volatile
 11099     1D5A  0008               	return
 11100     1D5B                     __end_of_PS2Keyboard_SendCommand:
 11101                           
 11102                           	psect	intentry
 11103     0004                     __pintentry:	
 11104 ;; *************** function _INTERRUPT_InterruptManager *****************
 11105 ;; Defined at:
 11106 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;		None
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;		None
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      void 
 11113 ;; Registers used:
 11114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;Total ram usage:        0 bytes
 11125 ;; Hardware stack levels used: 1
 11126 ;; Hardware stack levels required when called: 9
 11127 ;; This function calls:
 11128 ;;		NULL
 11129 ;;		_EUSART_Receive_ISR
 11130 ;;		_EUSART_Transmit_ISR
 11131 ;;		_PIN_MANAGER_IOC
 11132 ;;		_TMR2_ISR
 11133 ;;		_USBDeviceTasks
 11134 ;; This function is called by:
 11135 ;;		Interrupt level 1
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139     0004                     _INTERRUPT_InterruptManager:
 11140                           
 11141                           ;incstack = 0
 11142 ;; hardware stack exceeded
 11143     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11144                           
 11145                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11146     0005  3180               	pagesel	$
 11147                           
 11148                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
 11149     0006  198B               	btfsc	11,3	;volatile
 11150     0007  1C0B               	btfss	11,0	;volatile
 11151     0008  280D               	goto	i1l141
 11152                           
 11153                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 11154     0009  319B  2345  3180   	fcall	_PIN_MANAGER_IOC
 11155                           
 11156                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11157     000C  283B               	goto	i1l153
 11158     000D                     i1l141:	
 11159                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 11160                           
 11161     000D  1F0B               	btfss	11,6	;volatile
 11162     000E  283B               	goto	i1l153
 11163                           
 11164                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
 11165     000F  0021               	movlb	1	; select bank1
 11166     0010  1D12               	btfss	18,2	;volatile
 11167     0011  2819               	goto	i1l144
 11168     0012  0020               	movlb	0	; select bank0
 11169     0013  1D12               	btfss	18,2	;volatile
 11170     0014  2819               	goto	i1l144
 11171                           
 11172                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
 11173     0015  318E  2639  3180   	fcall	_USBDeviceTasks
 11174                           
 11175                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 11176     0018  283B               	goto	i1l153
 11177     0019                     i1l144:	
 11178                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
 11179                           
 11180     0019  0021               	movlb	1	; select bank1
 11181     001A  1E11               	btfss	17,4	;volatile
 11182     001B  2826               	goto	i1l146
 11183     001C  0020               	movlb	0	; select bank0
 11184     001D  1E11               	btfss	17,4	;volatile
 11185     001E  2826               	goto	i1l146
 11186                           
 11187                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
 11188     001F  0023               	movlb	3	; select bank3
 11189     0020  085C               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+384),w
 11190     0021  008A               	movwf	10
 11191     0022  085B               	movf	_EUSART_TxDefaultInterruptHandler^(0+384),w
 11192     0023  000A               	callw
 11193     0024  3180               	pagesel	$
 11194                           
 11195                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11196     0025  283B               	goto	i1l153
 11197     0026                     i1l146:	
 11198                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 11199                           
 11200     0026  0021               	movlb	1	; select bank1
 11201     0027  1E91               	btfss	17,5	;volatile
 11202     0028  2833               	goto	i1l148
 11203     0029  0020               	movlb	0	; select bank0
 11204     002A  1E91               	btfss	17,5	;volatile
 11205     002B  2833               	goto	i1l148
 11206                           
 11207                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
 11208     002C  0023               	movlb	3	; select bank3
 11209     002D  085A               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384),w
 11210     002E  008A               	movwf	10
 11211     002F  0859               	movf	_EUSART_RxDefaultInterruptHandler^(0+384),w
 11212     0030  000A               	callw
 11213     0031  3180               	pagesel	$
 11214                           
 11215                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 11216     0032  283B               	goto	i1l153
 11217     0033                     i1l148:	
 11218                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
 11219                           
 11220     0033  0021               	movlb	1	; select bank1
 11221     0034  1C91               	btfss	17,1	;volatile
 11222     0035  283B               	goto	i1l153
 11223     0036  0020               	movlb	0	; select bank0
 11224     0037  1C91               	btfss	17,1	;volatile
 11225     0038  283B               	goto	i1l153
 11226                           
 11227                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
 11228     0039  319B  2366         	fcall	_TMR2_ISR
 11229     003B                     i1l153:	
 11230                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 11231                           
 11232     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11233     003C  0009               	retfie
 11234     003D                     __end_of_INTERRUPT_InterruptManager:
 11235                           
 11236                           	psect	text56
 11237     0E39                     __ptext56:	
 11238 ;; *************** function _USBDeviceTasks *****************
 11239 ;; Defined at:
 11240 ;;		line 481 in file "usb/usb_device.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;		None
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;  i               1   16[BANK0 ] unsigned char 
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  1    wreg      void 
 11247 ;; Registers used:
 11248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11249 ;; Tracked objects:
 11250 ;;		On entry : 1F/0
 11251 ;;		On exit  : 1F/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;Total ram usage:        2 bytes
 11259 ;; Hardware stack levels used: 1
 11260 ;; Hardware stack levels required when called: 8
 11261 ;; This function calls:
 11262 ;;		_USBCtrlEPAllowStatusStage
 11263 ;;		_USBCtrlEPService
 11264 ;;		_USBIncrement1msInternalTimers
 11265 ;;		_USBStallHandler
 11266 ;;		_USBSuspend
 11267 ;;		_USBWakeFromSuspend
 11268 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11269 ;;		i1_USBDeviceInit
 11270 ;; This function is called by:
 11271 ;;		_INTERRUPT_InterruptManager
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275     0E39                     _USBDeviceTasks:	
 11276                           ;psect for function _USBDeviceTasks
 11277                           
 11278                           
 11279                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
 11280                           
 11281                           ;incstack = 0
 11282 ;; hardware stack exceeded
 11283                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11284     0E39  036C               	decf	_USBDeviceState,w
 11285     0E3A  1D03               	btfss	3,2
 11286     0E3B  2E45               	goto	i1l6834
 11287                           
 11288                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
 11289     0E3C  003D               	movlb	29	; select bank29
 11290     0E3D  1A8E               	btfsc	14,5	;volatile
 11291     0E3E  2E45               	goto	i1l6834
 11292                           
 11293                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
 11294     0E3F  0190               	clrf	16	;volatile
 11295                           
 11296                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
 11297     0E40  1412               	bsf	18,0	;volatile
 11298                           
 11299                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
 11300     0E41  1612               	bsf	18,4	;volatile
 11301                           
 11302                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
 11303     0E42  3002               	movlw	2
 11304     0E43  0020               	movlb	0	; select bank0
 11305     0E44  00EC               	movwf	_USBDeviceState	;volatile
 11306     0E45                     i1l6834:
 11307                           
 11308                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
 11309     0E45  003D               	movlb	29	; select bank29
 11310     0E46  1910               	btfsc	16,2	;volatile
 11311     0E47  1D12               	btfss	18,2	;volatile
 11312     0E48  2E52               	goto	i1l6842
 11313                           
 11314                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
 11315     0E49  30FB               	movlw	251
 11316     0E4A  0020               	movlb	0	; select bank0
 11317     0E4B  00DF               	movwf	??_USBDeviceTasks
 11318     0E4C  085F               	movf	??_USBDeviceTasks,w
 11319     0E4D  003D               	movlb	29	; select bank29
 11320     0E4E  0590               	andwf	16,f	;volatile
 11321                           
 11322                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
 11323     0E4F  319D  2577  318E   	fcall	_USBWakeFromSuspend
 11324     0E52                     i1l6842:
 11325                           
 11326                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
 11327     0E52  003D               	movlb	29	; select bank29
 11328     0E53  1C8E               	btfss	14,1	;volatile
 11329     0E54  2E58               	goto	i1l492
 11330                           
 11331                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
 11332     0E55  0020               	movlb	0	; select bank0
 11333     0E56  1112               	bcf	18,2	;volatile
 11334                           
 11335                           ;usb/usb_device.c: 654:         return;
 11336     0E57  0008               	return
 11337     0E58                     i1l492:	
 11338                           ;usb/usb_device.c: 655:     }
 11339                           
 11340                           
 11341                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
 11342     0E58  1810               	btfsc	16,0	;volatile
 11343     0E59  1C12               	btfss	18,0	;volatile
 11344     0E5A  2E68               	goto	i1l6856
 11345                           
 11346                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
 11347     0E5B  318C  2437  318E   	fcall	i1_USBDeviceInit
 11348                           
 11349                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
 11350     0E5E  0021               	movlb	1	; select bank1
 11351     0E5F  1512               	bsf	18,2	;volatile
 11352                           
 11353                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
 11354     0E60  3004               	movlw	4
 11355     0E61  0020               	movlb	0	; select bank0
 11356     0E62  00EC               	movwf	_USBDeviceState	;volatile
 11357                           
 11358                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
 11359     0E63  30FE               	movlw	254
 11360     0E64  00DF               	movwf	??_USBDeviceTasks
 11361     0E65  085F               	movf	??_USBDeviceTasks,w
 11362     0E66  003D               	movlb	29	; select bank29
 11363     0E67  0590               	andwf	16,f	;volatile
 11364     0E68                     i1l6856:
 11365                           
 11366                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
 11367     0E68  1A10               	btfsc	16,4	;volatile
 11368     0E69  1E12               	btfss	18,4	;volatile
 11369     0E6A  2E6E               	goto	i1l6862
 11370                           
 11371                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
 11372     0E6B  319C  248B  318E   	fcall	_USBSuspend
 11373     0E6E                     i1l6862:
 11374                           
 11375                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
 11376     0E6E  003D               	movlb	29	; select bank29
 11377     0E6F  1F10               	btfss	16,6	;volatile
 11378     0E70  2E96               	goto	i1l6878
 11379                           
 11380                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
 11381     0E71  1F12               	btfss	18,6	;volatile
 11382     0E72  2E82               	goto	i1l6868
 11383                           
 11384                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
 11385     0E73  3073               	movlw	115
 11386     0E74  0020               	movlb	0	; select bank0
 11387     0E75  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11388     0E76  3000               	movlw	0
 11389     0E77  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11390     0E78  3000               	movlw	0
 11391     0E79  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11392     0E7A  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11393     0E7B  3001               	movlw	1
 11394     0E7C  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11395     0E7D  3000               	movlw	0
 11396     0E7E  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11397     0E7F  319F  27C3  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11398     0E82                     i1l6868:
 11399                           
 11400                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
 11401     0E82  30BF               	movlw	191
 11402     0E83  0020               	movlb	0	; select bank0
 11403     0E84  00DF               	movwf	??_USBDeviceTasks
 11404     0E85  085F               	movf	??_USBDeviceTasks,w
 11405     0E86  003D               	movlb	29	; select bank29
 11406     0E87  0590               	andwf	16,f	;volatile
 11407                           
 11408                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
 11409     0E88  319C  2444  318E   	fcall	_USBIncrement1msInternalTimers
 11410                           
 11411                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
 11412     0E8B  0840               	movf	_USBStatusStageTimeoutCounter^(0+256),w
 11413     0E8C  1903               	btfsc	3,2
 11414     0E8D  2E90               	goto	i1l498
 11415                           
 11416                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
 11417     0E8E  3001               	movlw	1
 11418     0E8F  02C0               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
 11419     0E90                     i1l498:	
 11420                           ;usb/usb_device.c: 742:             }
 11421                           
 11422                           
 11423                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
 11424     0E90  0840               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
 11425     0E91  1D03               	btfss	3,2
 11426     0E92  2E96               	goto	i1l6878
 11427                           
 11428                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
 11429     0E93  3197  278E  318E   	fcall	_USBCtrlEPAllowStatusStage
 11430     0E96                     i1l6878:
 11431                           
 11432                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
 11433     0E96  003D               	movlb	29	; select bank29
 11434     0E97  1A90               	btfsc	16,5	;volatile
 11435     0E98  1E92               	btfss	18,5	;volatile
 11436     0E99  2E9D               	goto	i1l6884
 11437                           
 11438                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
 11439     0E9A  319E  2633  318E   	fcall	_USBStallHandler
 11440     0E9D                     i1l6884:
 11441                           
 11442                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
 11443     0E9D  1890               	btfsc	16,1	;volatile
 11444     0E9E  1C92               	btfss	18,1	;volatile
 11445     0E9F  2EB1               	goto	i1l6892
 11446                           
 11447                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
 11448     0EA0  30FF               	movlw	255
 11449     0EA1  0020               	movlb	0	; select bank0
 11450     0EA2  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11451     0EA3  307F               	movlw	127
 11452     0EA4  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11453     0EA5  3000               	movlw	0
 11454     0EA6  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11455     0EA7  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11456     0EA8  3001               	movlw	1
 11457     0EA9  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11458     0EAA  3000               	movlw	0
 11459     0EAB  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11460     0EAC  319F  27C3  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11461                           
 11462                           ;usb/usb_device.c: 763:         {UEIR = 0;};
 11463     0EAF  003D               	movlb	29	; select bank29
 11464     0EB0  0193               	clrf	19	;volatile
 11465     0EB1                     i1l6892:
 11466                           
 11467                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
 11468     0EB1  3004               	movlw	4
 11469     0EB2  0020               	movlb	0	; select bank0
 11470     0EB3  026C               	subwf	_USBDeviceState,w
 11471     0EB4  1803               	skipnc
 11472     0EB5  2EB8               	goto	i1l502
 11473                           
 11474                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
 11475     0EB6  1112               	bcf	18,2	;volatile
 11476                           
 11477                           ;usb/usb_device.c: 781:         return;
 11478     0EB7  0008               	return
 11479     0EB8                     i1l502:	
 11480                           ;usb/usb_device.c: 782:     }
 11481                           
 11482                           
 11483                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
 11484     0EB8  003D               	movlb	29	; select bank29
 11485     0EB9  1D92               	btfss	18,3	;volatile
 11486     0EBA  2F09               	goto	i1l503
 11487                           
 11488                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
 11489     0EBB  0020               	movlb	0	; select bank0
 11490     0EBC  01E0               	clrf	USBDeviceTasks@i
 11491     0EBD  2F06               	goto	i1l504
 11492     0EBE                     i1l6902:
 11493                           
 11494                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
 11495     0EBE  080F               	movf	15,w	;volatile
 11496     0EBF  0020               	movlb	0	; select bank0
 11497     0EC0  00EE               	movwf	_USTATcopy	;volatile
 11498                           
 11499                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
 11500     0EC1  0C6E               	rrf	_USTATcopy,w	;volatile
 11501     0EC2  00DF               	movwf	??_USBDeviceTasks
 11502     0EC3  0CDF               	rrf	??_USBDeviceTasks,f
 11503     0EC4  0C5F               	rrf	??_USBDeviceTasks,w
 11504     0EC5  390F               	andlw	15
 11505     0EC6  0022               	movlb	2	; select bank2
 11506     0EC7  00C2               	movwf	_endpoint_number^(0+256)	;volatile
 11507                           
 11508                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
 11509     0EC8  30F7               	movlw	247
 11510     0EC9  0020               	movlb	0	; select bank0
 11511     0ECA  00DF               	movwf	??_USBDeviceTasks
 11512     0ECB  085F               	movf	??_USBDeviceTasks,w
 11513     0ECC  003D               	movlb	29	; select bank29
 11514     0ECD  0590               	andwf	16,f	;volatile
 11515                           
 11516                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
 11517     0ECE  0020               	movlb	0	; select bank0
 11518     0ECF  196E               	btfsc	_USTATcopy,2	;volatile
 11519     0ED0  2ED5               	goto	i1l6912
 11520                           
 11521                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
 11522     0ED1  0022               	movlb	2	; select bank2
 11523     0ED2  0842               	movf	_endpoint_number^(0+256),w	;volatile
 11524     0ED3  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11525     0ED4  2ED8               	goto	L8
 11526     0ED5                     i1l6912:	
 11527                           ;usb/usb_device.c: 805:                 }
 11528                           
 11529                           
 11530                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
 11531     0ED5  0022               	movlb	2	; select bank2
 11532     0ED6  0842               	movf	_endpoint_number^(0+256),w	;volatile
 11533     0ED7  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11534     0ED8                     L8:
 11535     0ED8  0086               	movwf	6
 11536     0ED9  3001               	movlw	1	; select bank2/3
 11537     0EDA  0087               	movwf	7
 11538     0EDB  0801               	movf	1,w
 11539     0EDC  3901               	andlw	1
 11540     0EDD  0020               	movlb	0	; select bank0
 11541     0EDE  00DF               	movwf	??_USBDeviceTasks
 11542     0EDF  3001               	movlw	1
 11543     0EE0  06DF               	xorwf	??_USBDeviceTasks,f
 11544     0EE1  0801               	movf	1,w
 11545     0EE2  065F               	xorwf	??_USBDeviceTasks,w
 11546     0EE3  39FE               	andlw	-2
 11547     0EE4  065F               	xorwf	??_USBDeviceTasks,w
 11548     0EE5  0081               	movwf	1
 11549                           
 11550                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
 11551     0EE6  0022               	movlb	2	; select bank2
 11552     0EE7  0842               	movf	_endpoint_number^(0+256),w	;volatile
 11553     0EE8  1D03               	btfss	3,2
 11554     0EE9  2EEE               	goto	i1l6918
 11555                           
 11556                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
 11557     0EEA  3188  2000  318E   	fcall	_USBCtrlEPService
 11558                           
 11559                           ;usb/usb_device.c: 817:                 }
 11560     0EED  2EFD               	goto	i1l6920
 11561     0EEE                     i1l6918:
 11562                           
 11563                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
 11564     0EEE  3072               	movlw	114
 11565     0EEF  0020               	movlb	0	; select bank0
 11566     0EF0  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11567     0EF1  3000               	movlw	0
 11568     0EF2  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11569     0EF3  306E               	movlw	low _USTATcopy
 11570     0EF4  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11571     0EF5  3000               	movlw	high _USTATcopy
 11572     0EF6  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11573     0EF7  3000               	movlw	0
 11574     0EF8  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11575     0EF9  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11576     0EFA  319F  27C3  318E   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11577     0EFD                     i1l6920:
 11578                           
 11579                           ;usb/usb_device.c: 827:         }
 11580     0EFD  3001               	movlw	1
 11581     0EFE  0020               	movlb	0	; select bank0
 11582     0EFF  00DF               	movwf	??_USBDeviceTasks
 11583     0F00  085F               	movf	??_USBDeviceTasks,w
 11584     0F01  07E0               	addwf	USBDeviceTasks@i,f
 11585     0F02  3004               	movlw	4
 11586     0F03  0260               	subwf	USBDeviceTasks@i,w
 11587     0F04  1803               	btfsc	3,0
 11588     0F05  2F09               	goto	i1l503
 11589     0F06                     i1l504:
 11590                           
 11591                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
 11592     0F06  003D               	movlb	29	; select bank29
 11593     0F07  1990               	btfsc	16,3	;volatile
 11594     0F08  2EBE               	goto	i1l6902
 11595     0F09                     i1l503:	
 11596                           ;usb/usb_device.c: 828:     }
 11597                           
 11598                           
 11599                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
 11600     0F09  0020               	movlb	0	; select bank0
 11601     0F0A  1112               	bcf	18,2	;volatile
 11602     0F0B  0008               	return
 11603     0F0C                     __end_of_USBDeviceTasks:
 11604                           
 11605                           	psect	text57
 11606     0C37                     __ptext57:	
 11607 ;; *************** function i1_USBDeviceInit *****************
 11608 ;; Defined at:
 11609 ;;		line 281 in file "usb/usb_device.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;		None
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  p               2    4[COMMON] PTR unsigned char 
 11614 ;;		 -> UEP1(1), 
 11615 ;;  i               1    7[COMMON] unsigned char 
 11616 ;;  i               1    6[COMMON] unsigned char 
 11617 ;; Return value:  Size  Location     Type
 11618 ;;                  1    wreg      void 
 11619 ;; Registers used:
 11620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11621 ;; Tracked objects:
 11622 ;;		On entry : 1F/1D
 11623 ;;		On exit  : 1F/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;Total ram usage:        8 bytes
 11631 ;; Hardware stack levels used: 1
 11632 ;; This function calls:
 11633 ;;		Nothing
 11634 ;; This function is called by:
 11635 ;;		_USBDeviceTasks
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639     0C37                     i1_USBDeviceInit:	
 11640                           ;psect for function i1_USBDeviceInit
 11641                           
 11642                           
 11643                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
 11644                           
 11645                           ;incstack = 0
 11646                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
 11647     0C37  0021               	movlb	1	; select bank1
 11648     0C38  1112               	bcf	18,2	;volatile
 11649                           
 11650                           ;usb/usb_device.c: 292:     {UEIR = 0;};
 11651     0C39  003D               	movlb	29	; select bank29
 11652     0C3A  0193               	clrf	19	;volatile
 11653                           
 11654                           ;usb/usb_device.c: 295:     {UIR = 0;};
 11655     0C3B  0190               	clrf	16	;volatile
 11656                           
 11657                           ;usb/usb_device.c: 298:     UEP0 = 0;
 11658     0C3C  0198               	clrf	24	;volatile
 11659                           
 11660                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
 11661     0C3D  300E               	movlw	14
 11662     0C3E  00F5               	movwf	i1USBDeviceInit@p+1
 11663     0C3F  3099               	movlw	153
 11664     0C40  00F4               	movwf	i1USBDeviceInit@p
 11665     0C41  01F6               	clrf	i1USBDeviceInit@i_1369
 11666     0C42                     i1l5952:
 11667     0C42  0874               	movf	i1USBDeviceInit@p,w
 11668     0C43  0086               	movwf	6
 11669     0C44  0875               	movf	i1USBDeviceInit@p+1,w
 11670     0C45  0087               	movwf	7
 11671     0C46  0181               	clrf	1
 11672     0C47  3001               	movlw	1
 11673     0C48  07F4               	addwf	i1USBDeviceInit@p,f
 11674     0C49  3000               	movlw	0
 11675     0C4A  3DF5               	addwfc	i1USBDeviceInit@p+1,f
 11676     0C4B  3001               	movlw	1
 11677     0C4C  00F0               	movwf	??i1_USBDeviceInit
 11678     0C4D  0870               	movf	??i1_USBDeviceInit,w
 11679     0C4E  07F6               	addwf	i1USBDeviceInit@i_1369,f
 11680     0C4F  0876               	movf	i1USBDeviceInit@i_1369,w
 11681     0C50  1903               	btfsc	3,2
 11682     0C51  2C42               	goto	i1l5952
 11683                           
 11684                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
 11685     0C52  3016               	movlw	22
 11686     0C53  0091               	movwf	17	;volatile
 11687     0C54  309F               	movlw	159
 11688     0C55  0097               	movwf	23	;volatile
 11689     0C56  307B               	movlw	123
 11690     0C57  0092               	movwf	18	;volatile
 11691                           
 11692                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 11693     0C58  01F7               	clrf	i1USBDeviceInit@i
 11694     0C59                     i1l5968:
 11695                           
 11696                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 11697     0C59  0877               	movf	i1USBDeviceInit@i,w
 11698     0C5A  00F0               	movwf	??i1_USBDeviceInit
 11699     0C5B  3001               	movlw	1
 11700     0C5C                     u547_25:
 11701     0C5C  35F0               	lslf	??i1_USBDeviceInit,f
 11702     0C5D  3EFF               	addlw	-1
 11703     0C5E  1D03               	skipz
 11704     0C5F  2C5C               	goto	u547_25
 11705     0C60  3570               	lslf	??i1_USBDeviceInit,w
 11706     0C61  3E20               	addlw	32
 11707     0C62  0086               	movwf	6
 11708     0C63  0187               	clrf	7
 11709     0C64  3000               	movlw	0
 11710     0C65  3FC0               	movwi [0]fsr1
 11711     0C66  3000               	movlw	0
 11712     0C67  3FC1               	movwi [1]fsr1
 11713     0C68  3FC2               	movwi [2]fsr1
 11714     0C69  3FC3               	movwi [3]fsr1
 11715                           
 11716                           ;usb/usb_device.c: 314:     }
 11717     0C6A  3001               	movlw	1
 11718     0C6B  00F0               	movwf	??i1_USBDeviceInit
 11719     0C6C  0870               	movf	??i1_USBDeviceInit,w
 11720     0C6D  07F7               	addwf	i1USBDeviceInit@i,f
 11721     0C6E  3008               	movlw	8
 11722     0C6F  0277               	subwf	i1USBDeviceInit@i,w
 11723     0C70  1C03               	skipc
 11724     0C71  2C59               	goto	i1l5968
 11725                           
 11726                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 11727     0C72  170E               	bsf	14,6	;volatile
 11728                           
 11729                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 11730     0C73  0196               	clrf	22	;volatile
 11731                           
 11732                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 11733     0C74  120E               	bcf	14,4	;volatile
 11734                           
 11735                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 11736     0C75  130E               	bcf	14,6	;volatile
 11737     0C76                     i1l5980:
 11738                           
 11739                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 11740     0C76  30F7               	movlw	247
 11741     0C77  00F0               	movwf	??i1_USBDeviceInit
 11742     0C78  0870               	movf	??i1_USBDeviceInit,w
 11743     0C79  0590               	andwf	16,f	;volatile
 11744                           
 11745                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 11746     0C7A  0021               	movlb	1	; select bank1
 11747     0C7B  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 11748                           
 11749                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 11750     0C7C  0022               	movlb	2	; select bank2
 11751     0C7D  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 11752                           
 11753                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 11754     0C7E  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 11755     0C7F  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 11756                           
 11757                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 11758     0C80  003D               	movlb	29	; select bank29
 11759     0C81  1990               	btfsc	16,3	;volatile
 11760     0C82  2C76               	goto	i1l5980
 11761                           
 11762                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 11763     0C83  3001               	movlw	1
 11764     0C84  0022               	movlb	2	; select bank2
 11765     0C85  00BE               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11766                           
 11767                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 11768     0C86  3001               	movlw	1
 11769     0C87  00BD               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11770                           
 11771                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 11772     0C88  01BC               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11773                           
 11774                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 11775     0C89  01BB               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11776                           
 11777                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 11778     0C8A  01C3               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11779                           
 11780                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 11781     0C8B  01F7               	clrf	i1USBDeviceInit@i
 11782     0C8C                     i1l6002:
 11783                           
 11784                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 11785     0C8C  3577               	lslf	i1USBDeviceInit@i,w
 11786     0C8D  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11787     0C8E  0086               	movwf	6
 11788     0C8F  0187               	clrf	7
 11789     0C90  3000               	movlw	0
 11790     0C91  3FC0               	movwi [0]fsr1
 11791     0C92  3FC1               	movwi [1]fsr1
 11792                           
 11793                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 11794     0C93  3577               	lslf	i1USBDeviceInit@i,w
 11795     0C94  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11796     0C95  0086               	movwf	6
 11797     0C96  3001               	movlw	1	; select bank2/3
 11798     0C97  0087               	movwf	7
 11799     0C98  3000               	movlw	0
 11800     0C99  3FC0               	movwi [0]fsr1
 11801     0C9A  3FC1               	movwi [1]fsr1
 11802                           
 11803                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 11804     0C9B  0877               	movf	i1USBDeviceInit@i,w
 11805     0C9C  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11806     0C9D  0086               	movwf	6
 11807     0C9E  3001               	movlw	1	; select bank2/3
 11808     0C9F  0087               	movwf	7
 11809     0CA0  0181               	clrf	1
 11810                           
 11811                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 11812     0CA1  0877               	movf	i1USBDeviceInit@i,w
 11813     0CA2  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11814     0CA3  0086               	movwf	6
 11815     0CA4  3001               	movlw	1	; select bank2/3
 11816     0CA5  0087               	movwf	7
 11817     0CA6  0181               	clrf	1
 11818                           
 11819                           ;usb/usb_device.c: 355:     }
 11820     0CA7  3001               	movlw	1
 11821     0CA8  00F0               	movwf	??i1_USBDeviceInit
 11822     0CA9  0870               	movf	??i1_USBDeviceInit,w
 11823     0CAA  07F7               	addwf	i1USBDeviceInit@i,f
 11824     0CAB  3002               	movlw	2
 11825     0CAC  0277               	subwf	i1USBDeviceInit@i,w
 11826     0CAD  1C03               	skipc
 11827     0CAE  2C8C               	goto	i1l6002
 11828                           
 11829                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11830     0CAF  3028               	movlw	40
 11831     0CB0  0020               	movlb	0	; select bank0
 11832     0CB1  00E1               	movwf	_pBDTEntryIn
 11833     0CB2  3000               	movlw	0
 11834     0CB3  00E2               	movwf	_pBDTEntryIn+1
 11835                           
 11836                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 11837     0CB4  3016               	movlw	22
 11838     0CB5  003D               	movlb	29	; select bank29
 11839     0CB6  0098               	movwf	24	;volatile
 11840                           
 11841                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 11842     0CB7  3040               	movlw	64
 11843     0CB8  00F0               	movwf	??i1_USBDeviceInit
 11844     0CB9  3000               	movlw	0
 11845     0CBA  00F1               	movwf	??i1_USBDeviceInit+1
 11846     0CBB  30FF               	movlw	255
 11847     0CBC  0570               	andwf	??i1_USBDeviceInit,w
 11848     0CBD  00F2               	movwf	??i1_USBDeviceInit+2
 11849     0CBE  307F               	movlw	127
 11850     0CBF  0571               	andwf	??i1_USBDeviceInit+1,w
 11851     0CC0  00F3               	movwf	??i1_USBDeviceInit+3
 11852     0CC1  0872               	movf	??i1_USBDeviceInit+2,w
 11853     0CC2  0020               	movlb	0	; select bank0
 11854     0CC3  00A2               	movwf	34	;volatile
 11855     0CC4  0873               	movf	??i1_USBDeviceInit+3,w
 11856     0CC5  00A3               	movwf	35	;volatile
 11857                           
 11858                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 11859     0CC6  3008               	movlw	8
 11860     0CC7  00A1               	movwf	33	;volatile
 11861                           
 11862                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 11863     0CC8  3004               	movlw	4
 11864     0CC9  00A0               	movwf	32	;volatile
 11865                           
 11866                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 11867     0CCA  17A0               	bsf	32,7	;volatile
 11868                           
 11869                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 11870     0CCB  01EF               	clrf	_USBActiveConfiguration	;volatile
 11871                           
 11872                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 11873     0CCC  3000               	movlw	0
 11874     0CCD  0023               	movlb	3	; select bank3
 11875     0CCE  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 11876     0CCF  3000               	movlw	0
 11877     0CD0  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 11878     0CD1  3000               	movlw	0
 11879     0CD2  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 11880     0CD3  3000               	movlw	0
 11881     0CD4  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 11882                           
 11883                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 11884     0CD5  0022               	movlb	2	; select bank2
 11885     0CD6  01BA               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11886                           
 11887                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 11888     0CD7  0020               	movlb	0	; select bank0
 11889     0CD8  01EC               	clrf	_USBDeviceState	;volatile
 11890     0CD9  0008               	return
 11891     0CDA                     __end_ofi1_USBDeviceInit:
 11892                           
 11893                           	psect	text58
 11894     1D77                     __ptext58:	
 11895 ;; *************** function _USBWakeFromSuspend *****************
 11896 ;; Defined at:
 11897 ;;		line 2310 in file "usb/usb_device.c"
 11898 ;; Parameters:    Size  Location     Type
 11899 ;;		None
 11900 ;; Auto vars:     Size  Location     Type
 11901 ;;		None
 11902 ;; Return value:  Size  Location     Type
 11903 ;;                  1    wreg      void 
 11904 ;; Registers used:
 11905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11906 ;; Tracked objects:
 11907 ;;		On entry : 1F/1D
 11908 ;;		On exit  : 1F/2
 11909 ;;		Unchanged: 0/0
 11910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11913 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11914 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11915 ;;Total ram usage:        1 bytes
 11916 ;; Hardware stack levels used: 1
 11917 ;; Hardware stack levels required when called: 4
 11918 ;; This function calls:
 11919 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11920 ;; This function is called by:
 11921 ;;		_USBDeviceTasks
 11922 ;; This function uses a non-reentrant model
 11923 ;;
 11924                           
 11925     1D77                     _USBWakeFromSuspend:	
 11926                           ;psect for function _USBWakeFromSuspend
 11927                           
 11928                           
 11929                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 11930                           
 11931                           ;incstack = 0
 11932                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11933     1D77  0022               	movlb	2	; select bank2
 11934     1D78  01C3               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 11935                           
 11936                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 11937     1D79  3074               	movlw	116
 11938     1D7A  0020               	movlb	0	; select bank0
 11939     1D7B  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11940     1D7C  3000               	movlw	0
 11941     1D7D  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11942     1D7E  3000               	movlw	0
 11943     1D7F  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11944     1D80  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11945     1D81  3000               	movlw	0
 11946     1D82  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11947     1D83  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11948     1D84  319F  27C3  319D   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11949                           
 11950                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 11951     1D87  003D               	movlb	29	; select bank29
 11952     1D88  108E               	bcf	14,1	;volatile
 11953                           
 11954                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 11955     1D89  1112               	bcf	18,2	;volatile
 11956     1D8A                     i1l5712:	
 11957                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11958                           
 11959                           
 11960                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 11961     1D8A  1D10               	btfss	16,2	;volatile
 11962     1D8B  2D91               	goto	i1l5714
 11963                           
 11964                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 11965     1D8C  30FB               	movlw	251
 11966     1D8D  00FD               	movwf	??_USBWakeFromSuspend
 11967     1D8E  087D               	movf	??_USBWakeFromSuspend,w
 11968     1D8F  0590               	andwf	16,f	;volatile
 11969     1D90  2D8A               	goto	i1l5712
 11970     1D91                     i1l5714:
 11971                           
 11972                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 11973     1D91  0022               	movlb	2	; select bank2
 11974     1D92  01BA               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 11975     1D93  0008               	return
 11976     1D94                     __end_of_USBWakeFromSuspend:
 11977                           
 11978                           	psect	text59
 11979     1C8B                     __ptext59:	
 11980 ;; *************** function _USBSuspend *****************
 11981 ;; Defined at:
 11982 ;;		line 2252 in file "usb/usb_device.c"
 11983 ;; Parameters:    Size  Location     Type
 11984 ;;		None
 11985 ;; Auto vars:     Size  Location     Type
 11986 ;;		None
 11987 ;; Return value:  Size  Location     Type
 11988 ;;                  1    wreg      void 
 11989 ;; Registers used:
 11990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11991 ;; Tracked objects:
 11992 ;;		On entry : 1F/1D
 11993 ;;		On exit  : 0/0
 11994 ;;		Unchanged: 0/0
 11995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;Total ram usage:        1 bytes
 12001 ;; Hardware stack levels used: 1
 12002 ;; Hardware stack levels required when called: 4
 12003 ;; This function calls:
 12004 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12005 ;; This function is called by:
 12006 ;;		_USBDeviceTasks
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010     1C8B                     _USBSuspend:	
 12011                           ;psect for function _USBSuspend
 12012                           
 12013                           
 12014                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12018     1C8B  1512               	bsf	18,2	;volatile
 12019                           
 12020                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 12021     1C8C  30EF               	movlw	239
 12022     1C8D  00FD               	movwf	??_USBSuspend
 12023     1C8E  087D               	movf	??_USBSuspend,w
 12024     1C8F  0590               	andwf	16,f	;volatile
 12025                           
 12026                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 12027     1C90  148E               	bsf	14,1	;volatile
 12028                           
 12029                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 12030     1C91  3001               	movlw	1
 12031     1C92  0022               	movlb	2	; select bank2
 12032     1C93  00C3               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 12033                           
 12034                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 12035     1C94  01BA               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 12036                           
 12037                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 12038     1C95  3075               	movlw	117
 12039     1C96  0020               	movlb	0	; select bank0
 12040     1C97  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12041     1C98  3000               	movlw	0
 12042     1C99  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12043     1C9A  3000               	movlw	0
 12044     1C9B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12045     1C9C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12046     1C9D  3000               	movlw	0
 12047     1C9E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12048     1C9F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12049     1CA0  319F  27C3         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12050     1CA2  0008               	return
 12051     1CA3                     __end_of_USBSuspend:
 12052                           
 12053                           	psect	text60
 12054     1E33                     __ptext60:	
 12055 ;; *************** function _USBStallHandler *****************
 12056 ;; Defined at:
 12057 ;;		line 2209 in file "usb/usb_device.c"
 12058 ;; Parameters:    Size  Location     Type
 12059 ;;		None
 12060 ;; Auto vars:     Size  Location     Type
 12061 ;;		None
 12062 ;; Return value:  Size  Location     Type
 12063 ;;                  1    wreg      void 
 12064 ;; Registers used:
 12065 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12066 ;; Tracked objects:
 12067 ;;		On entry : 1F/1D
 12068 ;;		On exit  : 1F/1D
 12069 ;;		Unchanged: 0/0
 12070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12075 ;;Total ram usage:        1 bytes
 12076 ;; Hardware stack levels used: 1
 12077 ;; This function calls:
 12078 ;;		Nothing
 12079 ;; This function is called by:
 12080 ;;		_USBDeviceTasks
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084     1E33                     _USBStallHandler:	
 12085                           ;psect for function _USBStallHandler
 12086                           
 12087                           
 12088                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 12089                           
 12090                           ;incstack = 0
 12091                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 12092     1E33  1C18               	btfss	24,0	;volatile
 12093     1E34  2E50               	goto	i1l5746
 12094                           
 12095                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 12096     1E35  0020               	movlb	0	; select bank0
 12097     1E36  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12098     1E37  0086               	movwf	6
 12099     1E38  0187               	clrf	7
 12100     1E39  3080               	movlw	128
 12101     1E3A  0601               	xorwf	1,w
 12102     1E3B  1D03               	btfss	3,2
 12103     1E3C  2E4E               	goto	i1l5744
 12104     1E3D  0861               	movf	_pBDTEntryIn,w
 12105     1E3E  0086               	movwf	6
 12106     1E3F  0862               	movf	_pBDTEntryIn+1,w
 12107     1E40  0087               	movwf	7
 12108     1E41  3084               	movlw	132
 12109     1E42  0601               	xorwf	1,w
 12110     1E43  1D03               	btfss	3,2
 12111     1E44  2E4E               	goto	i1l5744
 12112                           
 12113                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 12114     1E45  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12115     1E46  0086               	movwf	6
 12116     1E47  0187               	clrf	7
 12117     1E48  300C               	movlw	12
 12118     1E49  0081               	movwf	1
 12119                           
 12120                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 12121     1E4A  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12122     1E4B  0086               	movwf	6
 12123     1E4C  0187               	clrf	7
 12124     1E4D  1781               	bsf	1,7
 12125     1E4E                     i1l5744:
 12126                           
 12127                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 12128     1E4E  003D               	movlb	29	; select bank29
 12129     1E4F  1018               	bcf	24,0	;volatile
 12130     1E50                     i1l5746:
 12131                           
 12132                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 12133     1E50  30DF               	movlw	223
 12134     1E51  00F0               	movwf	??_USBStallHandler
 12135     1E52  0870               	movf	??_USBStallHandler,w
 12136     1E53  0590               	andwf	16,f	;volatile
 12137     1E54  0008               	return
 12138     1E55                     __end_of_USBStallHandler:
 12139                           
 12140                           	psect	text61
 12141     1C44                     __ptext61:	
 12142 ;; *************** function _USBIncrement1msInternalTimers *****************
 12143 ;; Defined at:
 12144 ;;		line 2998 in file "usb/usb_device.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;		None
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;		None
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  1    wreg      void 
 12151 ;; Registers used:
 12152 ;;		wreg, status,2, status,0
 12153 ;; Tracked objects:
 12154 ;;		On entry : 1F/1D
 12155 ;;		On exit  : 1F/2
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;Total ram usage:        1 bytes
 12163 ;; Hardware stack levels used: 1
 12164 ;; This function calls:
 12165 ;;		Nothing
 12166 ;; This function is called by:
 12167 ;;		_USBDeviceTasks
 12168 ;; This function uses a non-reentrant model
 12169 ;;
 12170                           
 12171     1C44                     _USBIncrement1msInternalTimers:	
 12172                           ;psect for function _USBIncrement1msInternalTimers
 12173                           
 12174                           
 12175                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 12176                           
 12177                           ;incstack = 0
 12178                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 12179     1C44  3001               	movlw	1
 12180     1C45  0023               	movlb	3	; select bank3
 12181     1C46  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 12182     1C47  3000               	movlw	0
 12183     1C48  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 12184     1C49  3000               	movlw	0
 12185     1C4A  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 12186     1C4B  3000               	movlw	0
 12187     1C4C  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 12188                           
 12189                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 12190     1C4D  0022               	movlb	2	; select bank2
 12191     1C4E  0843               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 12192     1C4F  1D03               	btfss	3,2
 12193     1C50  0008               	return
 12194                           
 12195                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 12196     1C51  3001               	movlw	1
 12197     1C52  00F0               	movwf	??_USBIncrement1msInternalTimers
 12198     1C53  0870               	movf	??_USBIncrement1msInternalTimers,w
 12199     1C54  07BA               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 12200                           
 12201                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 12202     1C55  083A               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 12203     1C56  1D03               	btfss	3,2
 12204     1C57  0008               	return
 12205                           
 12206                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 12207     1C58  30FF               	movlw	255
 12208     1C59  00BA               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 12209     1C5A  0008               	return
 12210     1C5B                     __end_of_USBIncrement1msInternalTimers:
 12211                           
 12212                           	psect	text62
 12213     0800                     __ptext62:	
 12214 ;; *************** function _USBCtrlEPService *****************
 12215 ;; Defined at:
 12216 ;;		line 2379 in file "usb/usb_device.c"
 12217 ;; Parameters:    Size  Location     Type
 12218 ;;		None
 12219 ;; Auto vars:     Size  Location     Type
 12220 ;;		None
 12221 ;; Return value:  Size  Location     Type
 12222 ;;                  1    wreg      void 
 12223 ;; Registers used:
 12224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12225 ;; Tracked objects:
 12226 ;;		On entry : 1F/2
 12227 ;;		On exit  : 1D/0
 12228 ;;		Unchanged: 0/0
 12229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;Total ram usage:        1 bytes
 12235 ;; Hardware stack levels used: 1
 12236 ;; Hardware stack levels required when called: 7
 12237 ;; This function calls:
 12238 ;;		_USBCtrlTrfInHandler
 12239 ;;		_USBCtrlTrfOutHandler
 12240 ;;		_USBCtrlTrfSetupHandler
 12241 ;;		i1_memcpy
 12242 ;; This function is called by:
 12243 ;;		_USBDeviceTasks
 12244 ;; This function uses a non-reentrant model
 12245 ;;
 12246                           
 12247     0800                     _USBCtrlEPService:	
 12248                           ;psect for function _USBCtrlEPService
 12249                           
 12250                           
 12251                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 12252                           
 12253                           ;incstack = 0
 12254 ;; hardware stack exceeded
 12255                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12256     0800  302D               	movlw	45
 12257     0801  00C0               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 12258                           
 12259                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 12260     0802  0020               	movlb	0	; select bank0
 12261     0803  086E               	movf	_USTATcopy,w	;volatile
 12262     0804  39FD               	andlw	253
 12263     0805  1D03               	btfss	3,2
 12264     0806  283D               	goto	i1l6702
 12265                           
 12266                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 12267     0807  366E               	lsrf	_USTATcopy,w	;volatile
 12268     0808  393F               	andlw	63
 12269     0809  00DE               	movwf	??_USBCtrlEPService
 12270     080A  3001               	movlw	1
 12271     080B                     u652_25:
 12272     080B  35DE               	lslf	??_USBCtrlEPService,f
 12273     080C  3EFF               	addlw	-1
 12274     080D  1D03               	skipz
 12275     080E  280B               	goto	u652_25
 12276     080F  355E               	lslf	??_USBCtrlEPService,w
 12277     0810  3E20               	addlw	32
 12278     0811  00EB               	movwf	_pBDTEntryEP0OutCurrent
 12279                           
 12280                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 12281     0812  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12282     0813  00E7               	movwf	_pBDTEntryEP0OutNext
 12283     0814  01E8               	clrf	_pBDTEntryEP0OutNext+1
 12284                           
 12285                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 12286     0815  3004               	movlw	4
 12287     0816  0667               	xorwf	_pBDTEntryEP0OutNext,w
 12288     0817  00E7               	movwf	_pBDTEntryEP0OutNext
 12289     0818  3000               	movlw	0
 12290     0819  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 12291     081A  00E8               	movwf	_pBDTEntryEP0OutNext+1
 12292                           
 12293                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 12294     081B  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12295     081C  0086               	movwf	6
 12296     081D  0187               	clrf	7
 12297     081E  0C01               	rrf	1,w
 12298     081F  0C89               	rrf	9,f
 12299     0820  390F               	andlw	15
 12300     0821  3A0D               	xorlw	13
 12301     0822  1D03               	skipz
 12302     0823  283A               	goto	i1l6700
 12303                           
 12304                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 12305     0824  3040               	movlw	64
 12306     0825  00F6               	movwf	i1memcpy@d1
 12307     0826  3000               	movlw	0
 12308     0827  00F7               	movwf	i1memcpy@d1+1
 12309     0828  086B               	movf	_pBDTEntryEP0OutCurrent,w
 12310     0829  3E02               	addlw	2
 12311     082A  0086               	movwf	6
 12312     082B  0187               	clrf	7
 12313     082C  3F40               	moviw [0]fsr1
 12314     082D  00F8               	movwf	i1memcpy@s1
 12315     082E  3F41               	moviw [1]fsr1
 12316     082F  00F9               	movwf	i1memcpy@s1+1
 12317     0830  3008               	movlw	8
 12318     0831  00FA               	movwf	i1memcpy@n
 12319     0832  3000               	movlw	0
 12320     0833  00FB               	movwf	i1memcpy@n+1
 12321     0834  319E  269C  3188   	fcall	i1_memcpy
 12322                           
 12323                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 12324     0837  3191  21FA         	fcall	_USBCtrlTrfSetupHandler
 12325                           
 12326                           ;usb/usb_device.c: 2416:         }
 12327     0839  0008               	return
 12328     083A                     i1l6700:
 12329                           
 12330                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 12331     083A  319F  2789         	fcall	_USBCtrlTrfOutHandler
 12332     083C  0008               	return
 12333     083D                     i1l6702:
 12334     083D  30FD               	movlw	253
 12335     083E  056E               	andwf	_USTATcopy,w	;volatile
 12336     083F  00DE               	movwf	??_USBCtrlEPService
 12337     0840  3004               	movlw	4
 12338     0841  065E               	xorwf	??_USBCtrlEPService,w
 12339     0842  1D03               	btfss	3,2
 12340     0843  0008               	return
 12341                           
 12342                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 12343     0844  3189  2132         	fcall	_USBCtrlTrfInHandler
 12344     0846  0008               	return
 12345     0847                     __end_of_USBCtrlEPService:
 12346                           
 12347                           	psect	text63
 12348     11FA                     __ptext63:	
 12349 ;; *************** function _USBCtrlTrfSetupHandler *****************
 12350 ;; Defined at:
 12351 ;;		line 2472 in file "usb/usb_device.c"
 12352 ;; Parameters:    Size  Location     Type
 12353 ;;		None
 12354 ;; Auto vars:     Size  Location     Type
 12355 ;;		None
 12356 ;; Return value:  Size  Location     Type
 12357 ;;                  1    wreg      void 
 12358 ;; Registers used:
 12359 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12360 ;; Tracked objects:
 12361 ;;		On entry : 1F/0
 12362 ;;		On exit  : 1D/0
 12363 ;;		Unchanged: 0/0
 12364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12367 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;Total ram usage:        1 bytes
 12370 ;; Hardware stack levels used: 1
 12371 ;; Hardware stack levels required when called: 6
 12372 ;; This function calls:
 12373 ;;		_USBCheckStdRequest
 12374 ;;		_USBCtrlEPServiceComplete
 12375 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12376 ;; This function is called by:
 12377 ;;		_USBCtrlEPService
 12378 ;; This function uses a non-reentrant model
 12379 ;;
 12380                           
 12381     11FA                     _USBCtrlTrfSetupHandler:	
 12382                           ;psect for function _USBCtrlTrfSetupHandler
 12383                           
 12384                           
 12385                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 12386                           
 12387                           ;incstack = 0
 12388 ;; hardware stack exceeded
 12389                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12390     11FA  0022               	movlb	2	; select bank2
 12391     11FB  01C6               	clrf	_shortPacketStatus^(0+256)	;volatile
 12392                           
 12393                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 12394     11FC  01BF               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 12395                           
 12396                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 12397     11FD  01BC               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 12398                           
 12399                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 12400     11FE  01BB               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 12401                           
 12402                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 12403     11FF  01C1               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 12404                           
 12405                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 12406     1200  0020               	movlb	0	; select bank0
 12407     1201  01EA               	clrf	_controlTransferState	;volatile
 12408                           
 12409                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 12410     1202  307F               	movlw	127
 12411     1203  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12412     1204  0861               	movf	_pBDTEntryIn,w
 12413     1205  0086               	movwf	6
 12414     1206  0862               	movf	_pBDTEntryIn+1,w
 12415     1207  0087               	movwf	7
 12416     1208  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12417     1209  0581               	andwf	1,f
 12418                           
 12419                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12420     120A  3004               	movlw	4
 12421     120B  0661               	xorwf	_pBDTEntryIn,w
 12422     120C  00E1               	movwf	_pBDTEntryIn
 12423     120D  3000               	movlw	0
 12424     120E  0662               	xorwf	_pBDTEntryIn+1,w
 12425     120F  00E2               	movwf	_pBDTEntryIn+1
 12426                           
 12427                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 12428     1210  307F               	movlw	127
 12429     1211  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12430     1212  0861               	movf	_pBDTEntryIn,w
 12431     1213  0086               	movwf	6
 12432     1214  0862               	movf	_pBDTEntryIn+1,w
 12433     1215  0087               	movwf	7
 12434     1216  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12435     1217  0581               	andwf	1,f
 12436                           
 12437                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 12438     1218  3004               	movlw	4
 12439     1219  0661               	xorwf	_pBDTEntryIn,w
 12440     121A  00E1               	movwf	_pBDTEntryIn
 12441     121B  3000               	movlw	0
 12442     121C  0662               	xorwf	_pBDTEntryIn+1,w
 12443     121D  00E2               	movwf	_pBDTEntryIn+1
 12444                           
 12445                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 12446     121E  307F               	movlw	127
 12447     121F  00DD               	movwf	??_USBCtrlTrfSetupHandler
 12448     1220  0867               	movf	_pBDTEntryEP0OutNext,w
 12449     1221  0086               	movwf	6
 12450     1222  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12451     1223  0087               	movwf	7
 12452     1224  085D               	movf	??_USBCtrlTrfSetupHandler,w
 12453     1225  0581               	andwf	1,f
 12454                           
 12455                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 12456     1226  0021               	movlb	1	; select bank1
 12457     1227  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 12458                           
 12459                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 12460     1228  01EE               	clrf	(_inPipes^(0+128)+3)	;volatile
 12461     1229  01EF               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 12462                           
 12463                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 12464     122A  0022               	movlb	2	; select bank2
 12465     122B  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 12466                           
 12467                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 12468     122C  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 12469     122D  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 12470                           
 12471                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 12472     122E  3196  26B8  3191   	fcall	_USBCheckStdRequest
 12473                           
 12474                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 12475     1231  3003               	movlw	3
 12476     1232  0020               	movlb	0	; select bank0
 12477     1233  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12478     1234  3000               	movlw	0
 12479     1235  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12480     1236  3000               	movlw	0
 12481     1237  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12482     1238  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12483     1239  3000               	movlw	0
 12484     123A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12485     123B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12486     123C  319F  27C3  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12487                           
 12488                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 12489     123F  3187  275E         	fcall	_USBCtrlEPServiceComplete
 12490     1241  0008               	return
 12491     1242                     __end_of_USBCtrlTrfSetupHandler:
 12492                           
 12493                           	psect	text64
 12494     075E                     __ptext64:	
 12495 ;; *************** function _USBCtrlEPServiceComplete *****************
 12496 ;; Defined at:
 12497 ;;		line 1620 in file "usb/usb_device.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;		None
 12500 ;; Auto vars:     Size  Location     Type
 12501 ;;		None
 12502 ;; Return value:  Size  Location     Type
 12503 ;;                  1    wreg      void 
 12504 ;; Registers used:
 12505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12506 ;; Tracked objects:
 12507 ;;		On entry : 0/2
 12508 ;;		On exit  : 1D/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;Total ram usage:        4 bytes
 12516 ;; Hardware stack levels used: 1
 12517 ;; Hardware stack levels required when called: 2
 12518 ;; This function calls:
 12519 ;;		_USBCtrlEPAllowDataStage
 12520 ;;		_USBCtrlEPAllowStatusStage
 12521 ;; This function is called by:
 12522 ;;		_USBCtrlTrfSetupHandler
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526     075E                     _USBCtrlEPServiceComplete:	
 12527                           ;psect for function _USBCtrlEPServiceComplete
 12528                           
 12529                           
 12530                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 12531                           
 12532                           ;incstack = 0
 12533                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12534     075E  003D               	movlb	29	; select bank29
 12535     075F  120E               	bcf	14,4	;volatile
 12536                           
 12537                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 12538     0760  0021               	movlb	1	; select bank1
 12539     0761  1BED               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 12540     0762  2FAA               	goto	i1l566
 12541                           
 12542                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 12543     0763  0022               	movlb	2	; select bank2
 12544     0764  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 12545     0765  2F73               	goto	i1l4844
 12546                           
 12547                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 12548     0766  3002               	movlw	2
 12549     0767  0020               	movlb	0	; select bank0
 12550     0768  00EA               	movwf	_controlTransferState	;volatile
 12551                           
 12552                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 12553     0769  0022               	movlb	2	; select bank2
 12554     076A  083B               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 12555     076B  1D03               	btfss	3,2
 12556     076C  2F6F               	goto	i1l4840
 12557                           
 12558                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 12559     076D  3195  2517         	fcall	_USBCtrlEPAllowDataStage
 12560     076F                     i1l4840:
 12561                           
 12562                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 12563     076F  0022               	movlb	2	; select bank2
 12564     0770  01BD               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12565                           
 12566                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 12567     0771  01BE               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12568                           
 12569                           ;usb/usb_device.c: 1656:         }
 12570     0772  0008               	return
 12571     0773                     i1l4844:
 12572                           
 12573                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 12574     0773  0020               	movlb	0	; select bank0
 12575     0774  0867               	movf	_pBDTEntryEP0OutNext,w
 12576     0775  3E01               	addlw	1
 12577     0776  00F7               	movwf	??_USBCtrlEPServiceComplete
 12578     0777  3000               	movlw	0
 12579     0778  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12580     0779  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12581     077A  0877               	movf	??_USBCtrlEPServiceComplete,w
 12582     077B  0086               	movwf	6
 12583     077C  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12584     077D  0087               	movwf	7
 12585     077E  3008               	movlw	8
 12586     077F  0081               	movwf	1
 12587                           
 12588                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 12589     0780  3040               	movlw	64
 12590     0781  00F7               	movwf	??_USBCtrlEPServiceComplete
 12591     0782  3000               	movlw	0
 12592     0783  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12593     0784  30FF               	movlw	255
 12594     0785  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12595     0786  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12596     0787  307F               	movlw	127
 12597     0788  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12598     0789  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12599     078A  0867               	movf	_pBDTEntryEP0OutNext,w
 12600     078B  0086               	movwf	6
 12601     078C  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12602     078D  0087               	movwf	7
 12603     078E  3142               	addfsr 1,2
 12604     078F  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12605     0790  3FC0               	movwi [0]fsr1
 12606     0791  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12607     0792  3FC1               	movwi [1]fsr1
 12608                           
 12609                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 12610     0793  0867               	movf	_pBDTEntryEP0OutNext,w
 12611     0794  0086               	movwf	6
 12612     0795  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12613     0796  0087               	movwf	7
 12614     0797  300C               	movlw	12
 12615     0798  0081               	movwf	1
 12616                           
 12617                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12618     0799  0867               	movf	_pBDTEntryEP0OutNext,w
 12619     079A  0086               	movwf	6
 12620     079B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12621     079C  0087               	movwf	7
 12622     079D  1781               	bsf	1,7
 12623                           
 12624                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 12625     079E  0861               	movf	_pBDTEntryIn,w
 12626     079F  0086               	movwf	6
 12627     07A0  0862               	movf	_pBDTEntryIn+1,w
 12628     07A1  0087               	movwf	7
 12629     07A2  3004               	movlw	4
 12630     07A3  0081               	movwf	1
 12631                           
 12632                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 12633     07A4  0861               	movf	_pBDTEntryIn,w
 12634     07A5  0086               	movwf	6
 12635     07A6  0862               	movf	_pBDTEntryIn+1,w
 12636     07A7  0087               	movwf	7
 12637     07A8  1781               	bsf	1,7
 12638     07A9  0008               	return
 12639     07AA                     i1l566:	
 12640                           ;usb/usb_device.c: 1671:     else
 12641                           
 12642                           
 12643                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 12644     07AA  0020               	movlb	0	; select bank0
 12645     07AB  1FC0               	btfss	64,7	;volatile
 12646     07AC  2FBF               	goto	i1l4870
 12647                           
 12648                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 12649     07AD  3001               	movlw	1
 12650     07AE  00EA               	movwf	_controlTransferState	;volatile
 12651                           
 12652                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 12653     07AF  0022               	movlb	2	; select bank2
 12654     07B0  083C               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 12655     07B1  1D03               	btfss	3,2
 12656     07B2  2FB6               	goto	i1l4862
 12657                           
 12658                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 12659     07B3  3195  2517  3187   	fcall	_USBCtrlEPAllowDataStage
 12660     07B6                     i1l4862:
 12661                           
 12662                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 12663     07B6  0022               	movlb	2	; select bank2
 12664     07B7  01BD               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 12665                           
 12666                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 12667     07B8  01BE               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 12668                           
 12669                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 12670     07B9  083F               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 12671     07BA  1D03               	btfss	3,2
 12672     07BB  0008               	return
 12673                           
 12674                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 12675     07BC  3197  278E         	fcall	_USBCtrlEPAllowStatusStage
 12676     07BE  0008               	return
 12677     07BF                     i1l4870:
 12678                           
 12679                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 12680     07BF  3002               	movlw	2
 12681     07C0  00EA               	movwf	_controlTransferState	;volatile
 12682                           
 12683                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 12684     07C1  0867               	movf	_pBDTEntryEP0OutNext,w
 12685     07C2  3E01               	addlw	1
 12686     07C3  00F7               	movwf	??_USBCtrlEPServiceComplete
 12687     07C4  3000               	movlw	0
 12688     07C5  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12689     07C6  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12690     07C7  0877               	movf	??_USBCtrlEPServiceComplete,w
 12691     07C8  0086               	movwf	6
 12692     07C9  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 12693     07CA  0087               	movwf	7
 12694     07CB  3008               	movlw	8
 12695     07CC  0081               	movwf	1
 12696                           
 12697                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 12698     07CD  3040               	movlw	64
 12699     07CE  00F7               	movwf	??_USBCtrlEPServiceComplete
 12700     07CF  3000               	movlw	0
 12701     07D0  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 12702     07D1  30FF               	movlw	255
 12703     07D2  0577               	andwf	??_USBCtrlEPServiceComplete,w
 12704     07D3  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 12705     07D4  307F               	movlw	127
 12706     07D5  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 12707     07D6  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 12708     07D7  0867               	movf	_pBDTEntryEP0OutNext,w
 12709     07D8  0086               	movwf	6
 12710     07D9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12711     07DA  0087               	movwf	7
 12712     07DB  3142               	addfsr 1,2
 12713     07DC  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 12714     07DD  3FC0               	movwi [0]fsr1
 12715     07DE  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 12716     07DF  3FC1               	movwi [1]fsr1
 12717                           
 12718                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 12719     07E0  0867               	movf	_pBDTEntryEP0OutNext,w
 12720     07E1  0086               	movwf	6
 12721     07E2  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12722     07E3  0087               	movwf	7
 12723     07E4  3004               	movlw	4
 12724     07E5  0081               	movwf	1
 12725                           
 12726                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12727     07E6  0867               	movf	_pBDTEntryEP0OutNext,w
 12728     07E7  0086               	movwf	6
 12729     07E8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12730     07E9  0087               	movwf	7
 12731     07EA  1781               	bsf	1,7
 12732     07EB  2FB6               	goto	i1l4862
 12733     07EC                     __end_of_USBCtrlEPServiceComplete:	
 12734                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 12735                           
 12736                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 12737                           
 12738                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 12739                           
 12740                           
 12741                           	psect	text65
 12742     1517                     __ptext65:	
 12743 ;; *************** function _USBCtrlEPAllowDataStage *****************
 12744 ;; Defined at:
 12745 ;;		line 1492 in file "usb/usb_device.c"
 12746 ;; Parameters:    Size  Location     Type
 12747 ;;		None
 12748 ;; Auto vars:     Size  Location     Type
 12749 ;;		None
 12750 ;; Return value:  Size  Location     Type
 12751 ;;                  1    wreg      void 
 12752 ;; Registers used:
 12753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12754 ;; Tracked objects:
 12755 ;;		On entry : 1F/2
 12756 ;;		On exit  : 1F/0
 12757 ;;		Unchanged: 0/0
 12758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;Total ram usage:        4 bytes
 12764 ;; Hardware stack levels used: 1
 12765 ;; Hardware stack levels required when called: 1
 12766 ;; This function calls:
 12767 ;;		_USBCtrlTrfTxService
 12768 ;; This function is called by:
 12769 ;;		_USBCtrlEPServiceComplete
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773     1517                     _USBCtrlEPAllowDataStage:	
 12774                           ;psect for function _USBCtrlEPAllowDataStage
 12775                           
 12776                           
 12777                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 12778                           
 12779                           ;incstack = 0
 12780                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12781     1517  01BC               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 12782                           
 12783                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 12784     1518  01BB               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 12785                           
 12786                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 12787     1519  3002               	movlw	2
 12788     151A  0020               	movlb	0	; select bank0
 12789     151B  066A               	xorwf	_controlTransferState,w	;volatile
 12790     151C  1D03               	btfss	3,2
 12791     151D  2D49               	goto	i1l4514
 12792                           
 12793                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 12794     151E  0867               	movf	_pBDTEntryEP0OutNext,w
 12795     151F  3E01               	addlw	1
 12796     1520  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12797     1521  3000               	movlw	0
 12798     1522  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 12799     1523  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12800     1524  0873               	movf	??_USBCtrlEPAllowDataStage,w
 12801     1525  0086               	movwf	6
 12802     1526  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 12803     1527  0087               	movwf	7
 12804     1528  3008               	movlw	8
 12805     1529  0081               	movwf	1
 12806                           
 12807                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 12808     152A  3048               	movlw	72
 12809     152B  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12810     152C  3000               	movlw	0
 12811     152D  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12812     152E  30FF               	movlw	255
 12813     152F  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12814     1530  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12815     1531  307F               	movlw	127
 12816     1532  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12817     1533  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12818     1534  0867               	movf	_pBDTEntryEP0OutNext,w
 12819     1535  0086               	movwf	6
 12820     1536  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12821     1537  0087               	movwf	7
 12822     1538  3142               	addfsr 1,2
 12823     1539  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12824     153A  3FC0               	movwi [0]fsr1
 12825     153B  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12826     153C  3FC1               	movwi [1]fsr1
 12827                           
 12828                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 12829     153D  0867               	movf	_pBDTEntryEP0OutNext,w
 12830     153E  0086               	movwf	6
 12831     153F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12832     1540  0087               	movwf	7
 12833     1541  3048               	movlw	72
 12834     1542  0081               	movwf	1
 12835                           
 12836                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 12837     1543  0867               	movf	_pBDTEntryEP0OutNext,w
 12838     1544  0086               	movwf	6
 12839     1545  0868               	movf	_pBDTEntryEP0OutNext+1,w
 12840     1546  0087               	movwf	7
 12841     1547  1781               	bsf	1,7
 12842                           
 12843                           ;usb/usb_device.c: 1504:     }
 12844     1548  0008               	return
 12845     1549                     i1l4514:
 12846                           
 12847                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 12848     1549  0021               	movlb	1	; select bank1
 12849     154A  086F               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 12850     154B  0020               	movlb	0	; select bank0
 12851     154C  0247               	subwf	71,w	;volatile
 12852     154D  1D03               	skipz
 12853     154E  2D53               	goto	u348_25
 12854     154F  0021               	movlb	1	; select bank1
 12855     1550  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 12856     1551  0020               	movlb	0	; select bank0
 12857     1552  0246               	subwf	70,w	;volatile
 12858     1553                     u348_25:
 12859     1553  1803               	skipnc
 12860     1554  2D5C               	goto	i1l4518
 12861                           
 12862                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 12863     1555  0847               	movf	71,w	;volatile
 12864     1556  0021               	movlb	1	; select bank1
 12865     1557  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12866     1558  0020               	movlb	0	; select bank0
 12867     1559  0846               	movf	70,w	;volatile
 12868     155A  0021               	movlb	1	; select bank1
 12869     155B  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 12870     155C                     i1l4518:
 12871                           
 12872                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 12873     155C  3194  24B0         	fcall	_USBCtrlTrfTxService
 12874                           
 12875                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 12876     155E  3048               	movlw	72
 12877     155F  00F3               	movwf	??_USBCtrlEPAllowDataStage
 12878     1560  3000               	movlw	0
 12879     1561  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 12880     1562  30FF               	movlw	255
 12881     1563  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 12882     1564  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 12883     1565  307F               	movlw	127
 12884     1566  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 12885     1567  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 12886     1568  0020               	movlb	0	; select bank0
 12887     1569  0861               	movf	_pBDTEntryIn,w
 12888     156A  0086               	movwf	6
 12889     156B  0862               	movf	_pBDTEntryIn+1,w
 12890     156C  0087               	movwf	7
 12891     156D  3142               	addfsr 1,2
 12892     156E  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 12893     156F  3FC0               	movwi [0]fsr1
 12894     1570  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 12895     1571  3FC1               	movwi [1]fsr1
 12896                           
 12897                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 12898     1572  0861               	movf	_pBDTEntryIn,w
 12899     1573  0086               	movwf	6
 12900     1574  0862               	movf	_pBDTEntryIn+1,w
 12901     1575  0087               	movwf	7
 12902     1576  3048               	movlw	72
 12903     1577  0081               	movwf	1
 12904                           
 12905                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 12906     1578  0861               	movf	_pBDTEntryIn,w
 12907     1579  0086               	movwf	6
 12908     157A  0862               	movf	_pBDTEntryIn+1,w
 12909     157B  0087               	movwf	7
 12910     157C  1781               	bsf	1,7
 12911     157D  0008               	return
 12912     157E                     __end_of_USBCtrlEPAllowDataStage:
 12913                           
 12914                           	psect	text66
 12915     16B8                     __ptext66:	
 12916 ;; *************** function _USBCheckStdRequest *****************
 12917 ;; Defined at:
 12918 ;;		line 2693 in file "usb/usb_device.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;		None
 12921 ;; Auto vars:     Size  Location     Type
 12922 ;;		None
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12927 ;; Tracked objects:
 12928 ;;		On entry : 1F/2
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        0 bytes
 12937 ;; Hardware stack levels used: 1
 12938 ;; Hardware stack levels required when called: 5
 12939 ;; This function calls:
 12940 ;;		_USBStdFeatureReqHandler
 12941 ;;		_USBStdGetDscHandler
 12942 ;;		_USBStdGetStatusHandler
 12943 ;;		_USBStdSetCfgHandler
 12944 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12945 ;; This function is called by:
 12946 ;;		_USBCtrlTrfSetupHandler
 12947 ;; This function uses a non-reentrant model
 12948 ;;
 12949                           
 12950     16B8                     _USBCheckStdRequest:	
 12951                           ;psect for function _USBCheckStdRequest
 12952                           
 12953                           
 12954                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 12955                           
 12956                           ;incstack = 0
 12957 ;; hardware stack exceeded
 12958                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12959     16B8  0020               	movlb	0	; select bank0
 12960     16B9  0E40               	swapf	64,w	;volatile
 12961     16BA  0C89               	rrf	9,f
 12962     16BB  3903               	andlw	3
 12963     16BC  3A00               	xorlw	0
 12964     16BD  1D03               	btfss	3,2
 12965     16BE  0008               	return
 12966     16BF  2EFF               	goto	i1l6558
 12967     16C0                     i1l694:	
 12968                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 12969                           
 12970                           
 12971                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 12972     16C0  0021               	movlb	1	; select bank1
 12973     16C1  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12974                           
 12975                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 12976     16C2  3008               	movlw	8
 12977     16C3  0020               	movlb	0	; select bank0
 12978     16C4  00EC               	movwf	_USBDeviceState	;volatile
 12979                           
 12980                           ;usb/usb_device.c: 2703:             break;
 12981     16C5  0008               	return
 12982     16C6                     i1l6528:
 12983                           
 12984                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 12985     16C6  3188  20B9         	fcall	_USBStdGetDscHandler
 12986                           
 12987                           ;usb/usb_device.c: 2706:             break;
 12988     16C8  0008               	return
 12989     16C9                     i1l6530:
 12990                           
 12991                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 12992     16C9  3188  2047         	fcall	_USBStdSetCfgHandler
 12993                           
 12994                           ;usb/usb_device.c: 2709:             break;
 12995     16CB  0008               	return
 12996     16CC                     i1l6532:
 12997                           
 12998                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 12999     16CC  306F               	movlw	low _USBActiveConfiguration
 13000     16CD  0021               	movlb	1	; select bank1
 13001     16CE  00EB               	movwf	_inPipes^(0+128)	;volatile
 13002     16CF  3000               	movlw	high _USBActiveConfiguration
 13003     16D0  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13004                           
 13005                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13006     16D1  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 13007                           
 13008                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 13009     16D2  3001               	movlw	1
 13010     16D3  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13011                           
 13012                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 13013     16D4  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13014                           
 13015                           ;usb/usb_device.c: 2715:             break;
 13016     16D5  0008               	return
 13017     16D6                     i1l6540:
 13018                           
 13019                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 13020     16D6  3192  22DB         	fcall	_USBStdGetStatusHandler
 13021                           
 13022                           ;usb/usb_device.c: 2718:             break;
 13023     16D8  0008               	return
 13024     16D9                     i1l6542:
 13025                           
 13026                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 13027     16D9  3182  222C         	fcall	_USBStdFeatureReqHandler
 13028                           
 13029                           ;usb/usb_device.c: 2722:             break;
 13030     16DB  0008               	return
 13031     16DC                     i1l6544:
 13032                           
 13033                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 13034     16DC  0844               	movf	68,w	;volatile
 13035     16DD  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 13036     16DE  0021               	movlb	1	; select bank1
 13037     16DF  00EB               	movwf	_inPipes^(0+128)	;volatile
 13038     16E0  3001               	movlw	1
 13039     16E1  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13040                           
 13041                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13042     16E2  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 13043                           
 13044                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 13045     16E3  3001               	movlw	1
 13046     16E4  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13047                           
 13048                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 13049     16E5  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13050                           
 13051                           ;usb/usb_device.c: 2728:             break;
 13052     16E6  0008               	return
 13053     16E7                     i1l703:	
 13054                           ;usb/usb_device.c: 2729:         case 11:
 13055                           
 13056                           
 13057                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 13058     16E7  0021               	movlb	1	; select bank1
 13059     16E8  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13060                           
 13061                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 13062     16E9  0020               	movlb	0	; select bank0
 13063     16EA  0844               	movf	68,w	;volatile
 13064     16EB  3E4B               	addlw	(low (_USBAlternateInterface| (0+256)))& (0+255)
 13065     16EC  0086               	movwf	6
 13066     16ED  3001               	movlw	1	; select bank2/3
 13067     16EE  0087               	movwf	7
 13068     16EF  0842               	movf	66,w	;volatile
 13069     16F0  0081               	movwf	1
 13070                           
 13071                           ;usb/usb_device.c: 2732:             break;
 13072     16F1  0008               	return
 13073     16F2                     i1l6554:
 13074                           
 13075                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 13076     16F2  3002               	movlw	2
 13077     16F3  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13078     16F4  3000               	movlw	0
 13079     16F5  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13080     16F6  3000               	movlw	0
 13081     16F7  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13082     16F8  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13083     16F9  3000               	movlw	0
 13084     16FA  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13085     16FB  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13086     16FC  319F  27C3         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13087                           
 13088                           ;usb/usb_device.c: 2735:             break;
 13089     16FE  0008               	return
 13090     16FF                     i1l6558:
 13091     16FF  0841               	movf	65,w	;volatile
 13092                           
 13093                           ; Switch size 1, requested type "simple"
 13094                           ; Number of cases is 11, Range of values is 0 to 12
 13095                           ; switch strategies available:
 13096                           ; Name         Instructions Cycles
 13097                           ; direct_byte           32     6 (fixed)
 13098                           ; simple_byte           34    18 (average)
 13099                           ; jumptable            260     6 (fixed)
 13100                           ;	Chosen strategy is simple_byte
 13101     1700  3A00               	xorlw	0	; case 0
 13102     1701  1903               	skipnz
 13103     1702  2ED6               	goto	i1l6540
 13104     1703  3A01               	xorlw	1	; case 1
 13105     1704  1903               	skipnz
 13106     1705  2ED9               	goto	i1l6542
 13107     1706  3A02               	xorlw	2	; case 3
 13108     1707  1903               	skipnz
 13109     1708  2ED9               	goto	i1l6542
 13110     1709  3A06               	xorlw	6	; case 5
 13111     170A  1903               	skipnz
 13112     170B  2EC0               	goto	i1l694
 13113     170C  3A03               	xorlw	3	; case 6
 13114     170D  1903               	skipnz
 13115     170E  2EC6               	goto	i1l6528
 13116     170F  3A01               	xorlw	1	; case 7
 13117     1710  1903               	skipnz
 13118     1711  2EF2               	goto	i1l6554
 13119     1712  3A0F               	xorlw	15	; case 8
 13120     1713  1903               	skipnz
 13121     1714  2ECC               	goto	i1l6532
 13122     1715  3A01               	xorlw	1	; case 9
 13123     1716  1903               	skipnz
 13124     1717  2EC9               	goto	i1l6530
 13125     1718  3A03               	xorlw	3	; case 10
 13126     1719  1903               	skipnz
 13127     171A  2EDC               	goto	i1l6544
 13128     171B  3A01               	xorlw	1	; case 11
 13129     171C  1903               	skipnz
 13130     171D  2EE7               	goto	i1l703
 13131     171E  3A07               	xorlw	7	; case 12
 13132     171F  1903               	skipnz
 13133     1720  2F22               	goto	i1l692
 13134     1721  2F22               	goto	i1l692
 13135     1722                     i1l692:
 13136     1722  0008               	return
 13137     1723                     __end_of_USBCheckStdRequest:
 13138                           
 13139                           	psect	text67
 13140     0847                     __ptext67:	
 13141 ;; *************** function _USBStdSetCfgHandler *****************
 13142 ;; Defined at:
 13143 ;;		line 1972 in file "usb/usb_device.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;		None
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  p               2    6[BANK0 ] PTR unsigned char 
 13148 ;;		 -> UEP1(1), 
 13149 ;;  i               1    8[BANK0 ] unsigned char 
 13150 ;;  i               1    9[BANK0 ] unsigned char 
 13151 ;; Return value:  Size  Location     Type
 13152 ;;                  1    wreg      void 
 13153 ;; Registers used:
 13154 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13155 ;; Tracked objects:
 13156 ;;		On entry : 1D/0
 13157 ;;		On exit  : 1F/0
 13158 ;;		Unchanged: 0/0
 13159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;Total ram usage:        5 bytes
 13165 ;; Hardware stack levels used: 1
 13166 ;; Hardware stack levels required when called: 4
 13167 ;; This function calls:
 13168 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13169 ;;		i1_memset
 13170 ;; This function is called by:
 13171 ;;		_USBCheckStdRequest
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175     0847                     _USBStdSetCfgHandler:	
 13176                           ;psect for function _USBStdSetCfgHandler
 13177                           
 13178                           
 13179                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 13180                           
 13181                           ;incstack = 0
 13182 ;; hardware stack exceeded
 13183                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13184     0847  0021               	movlb	1	; select bank1
 13185     0848  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13186                           
 13187                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 13188     0849  300E               	movlw	14
 13189     084A  0020               	movlb	0	; select bank0
 13190     084B  00D7               	movwf	USBStdSetCfgHandler@p+1
 13191     084C  3099               	movlw	153
 13192     084D  00D6               	movwf	USBStdSetCfgHandler@p
 13193     084E  01D8               	clrf	USBStdSetCfgHandler@i_2097
 13194     084F                     i1l6478:
 13195     084F  0856               	movf	USBStdSetCfgHandler@p,w
 13196     0850  0086               	movwf	6
 13197     0851  0857               	movf	USBStdSetCfgHandler@p+1,w
 13198     0852  0087               	movwf	7
 13199     0853  0181               	clrf	1
 13200     0854  3001               	movlw	1
 13201     0855  07D6               	addwf	USBStdSetCfgHandler@p,f
 13202     0856  3000               	movlw	0
 13203     0857  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 13204     0858  3001               	movlw	1
 13205     0859  00FD               	movwf	??_USBStdSetCfgHandler
 13206     085A  087D               	movf	??_USBStdSetCfgHandler,w
 13207     085B  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 13208     085C  0858               	movf	USBStdSetCfgHandler@i_2097,w
 13209     085D  1903               	btfsc	3,2
 13210     085E  284F               	goto	i1l6478
 13211                           
 13212                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 13213     085F  3020               	movlw	32
 13214     0860  00F0               	movwf	i1memset@dest
 13215     0861  3000               	movlw	0
 13216     0862  00F1               	movwf	i1memset@dest+1
 13217     0863  3000               	movlw	0
 13218     0864  00F2               	movwf	i1memset@c
 13219     0865  00F3               	movwf	i1memset@c+1
 13220     0866  3020               	movlw	32
 13221     0867  00F4               	movwf	i1memset@n
 13222     0868  3000               	movlw	0
 13223     0869  00F5               	movwf	i1memset@n+1
 13224     086A  319C  2473  3188   	fcall	i1_memset
 13225                           
 13226                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 13227     086D  003D               	movlb	29	; select bank29
 13228     086E  170E               	bsf	14,6	;volatile
 13229                           
 13230                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 13231     086F  0020               	movlb	0	; select bank0
 13232     0870  01D9               	clrf	USBStdSetCfgHandler@i
 13233     0871                     i1l6496:
 13234                           
 13235                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 13236     0871  0859               	movf	USBStdSetCfgHandler@i,w
 13237     0872  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13238     0873  0086               	movwf	6
 13239     0874  3001               	movlw	1	; select bank2/3
 13240     0875  0087               	movwf	7
 13241     0876  0181               	clrf	1
 13242                           
 13243                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 13244     0877  0859               	movf	USBStdSetCfgHandler@i,w
 13245     0878  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13246     0879  0086               	movwf	6
 13247     087A  3001               	movlw	1	; select bank2/3
 13248     087B  0087               	movwf	7
 13249     087C  0181               	clrf	1
 13250                           
 13251                           ;usb/usb_device.c: 1995:  }
 13252     087D  3001               	movlw	1
 13253     087E  00FD               	movwf	??_USBStdSetCfgHandler
 13254     087F  087D               	movf	??_USBStdSetCfgHandler,w
 13255     0880  07D9               	addwf	USBStdSetCfgHandler@i,f
 13256     0881  3002               	movlw	2
 13257     0882  0259               	subwf	USBStdSetCfgHandler@i,w
 13258     0883  1C03               	skipc
 13259     0884  2871               	goto	i1l6496
 13260                           
 13261                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 13262     0885  304B               	movlw	low _USBAlternateInterface
 13263     0886  00F0               	movwf	i1memset@dest
 13264     0887  3001               	movlw	high _USBAlternateInterface
 13265     0888  00F1               	movwf	i1memset@dest+1
 13266     0889  3000               	movlw	0
 13267     088A  00F2               	movwf	i1memset@c
 13268     088B  00F3               	movwf	i1memset@c+1
 13269     088C  3001               	movlw	1
 13270     088D  00F4               	movwf	i1memset@n
 13271     088E  3000               	movlw	0
 13272     088F  00F5               	movwf	i1memset@n+1
 13273     0890  319C  2473  3188   	fcall	i1_memset
 13274                           
 13275                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 13276     0893  003D               	movlb	29	; select bank29
 13277     0894  130E               	bcf	14,6	;volatile
 13278                           
 13279                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 13280     0895  3028               	movlw	40
 13281     0896  0020               	movlb	0	; select bank0
 13282     0897  00E1               	movwf	_pBDTEntryIn
 13283     0898  3000               	movlw	0
 13284     0899  00E2               	movwf	_pBDTEntryIn+1
 13285                           
 13286                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 13287     089A  3020               	movlw	32
 13288     089B  00EB               	movwf	_pBDTEntryEP0OutCurrent
 13289                           
 13290                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 13291     089C  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13292     089D  00E7               	movwf	_pBDTEntryEP0OutNext
 13293     089E  01E8               	clrf	_pBDTEntryEP0OutNext+1
 13294                           
 13295                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 13296     089F  0842               	movf	66,w	;volatile
 13297     08A0  00EF               	movwf	_USBActiveConfiguration	;volatile
 13298                           
 13299                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 13300     08A1  086F               	movf	_USBActiveConfiguration,w	;volatile
 13301     08A2  1D03               	btfss	3,2
 13302     08A3  28A7               	goto	i1l6518
 13303                           
 13304                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 13305     08A4  3010               	movlw	16
 13306     08A5  00EC               	movwf	_USBDeviceState	;volatile
 13307                           
 13308                           ;usb/usb_device.c: 2017:     }
 13309     08A6  0008               	return
 13310     08A7                     i1l6518:
 13311                           
 13312                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 13313     08A7  3001               	movlw	1
 13314     08A8  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 13315     08A9  3000               	movlw	0
 13316     08AA  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 13317     08AB  306F               	movlw	low _USBActiveConfiguration
 13318     08AC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 13319     08AD  3000               	movlw	high _USBActiveConfiguration
 13320     08AE  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 13321     08AF  3001               	movlw	1
 13322     08B0  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 13323     08B1  3000               	movlw	0
 13324     08B2  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 13325     08B3  319F  27C3         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 13326                           
 13327                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 13328     08B5  3020               	movlw	32
 13329     08B6  0020               	movlb	0	; select bank0
 13330     08B7  00EC               	movwf	_USBDeviceState	;volatile
 13331     08B8  0008               	return
 13332     08B9                     __end_of_USBStdSetCfgHandler:
 13333                           
 13334                           	psect	text68
 13335     1C73                     __ptext68:	
 13336 ;; *************** function i1_memset *****************
 13337 ;; Defined at:
 13338 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 13339 ;; Parameters:    Size  Location     Type
 13340 ;;  dest            2    0[COMMON] PTR void 
 13341 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 13342 ;;  c               2    2[COMMON] int 
 13343 ;;  n               2    4[COMMON] unsigned int 
 13344 ;; Auto vars:     Size  Location     Type
 13345 ;;  p               2    6[COMMON] PTR unsigned char 
 13346 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 13347 ;; Return value:  Size  Location     Type
 13348 ;;                  2    0[COMMON] PTR void 
 13349 ;; Registers used:
 13350 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13351 ;; Tracked objects:
 13352 ;;		On entry : 1F/0
 13353 ;;		On exit  : 1F/0
 13354 ;;		Unchanged: 1F/0
 13355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13356 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13357 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13359 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13360 ;;Total ram usage:        8 bytes
 13361 ;; Hardware stack levels used: 1
 13362 ;; This function calls:
 13363 ;;		Nothing
 13364 ;; This function is called by:
 13365 ;;		_USBStdSetCfgHandler
 13366 ;; This function uses a non-reentrant model
 13367 ;;
 13368                           
 13369     1C73                     i1_memset:	
 13370                           ;psect for function i1_memset
 13371                           
 13372                           
 13373                           ;incstack = 0
 13374                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 13375     1C73  0871               	movf	i1memset@dest+1,w
 13376     1C74  00F7               	movwf	i1memset@p+1
 13377     1C75  0870               	movf	i1memset@dest,w
 13378     1C76  00F6               	movwf	i1memset@p
 13379     1C77                     i1l6468:
 13380     1C77  3001               	movlw	1
 13381     1C78  02F4               	subwf	i1memset@n,f
 13382     1C79  3000               	movlw	0
 13383     1C7A  3BF5               	subwfb	i1memset@n+1,f
 13384     1C7B  0A74               	incf	i1memset@n,w
 13385     1C7C  1903               	btfsc	3,2
 13386     1C7D  0A75               	incf	i1memset@n+1,w
 13387     1C7E  1903               	btfsc	3,2
 13388     1C7F  0008               	return
 13389     1C80  0876               	movf	i1memset@p,w
 13390     1C81  0086               	movwf	6
 13391     1C82  0877               	movf	i1memset@p+1,w
 13392     1C83  0087               	movwf	7
 13393     1C84  0872               	movf	i1memset@c,w
 13394     1C85  0081               	movwf	1
 13395     1C86  3001               	movlw	1
 13396     1C87  07F6               	addwf	i1memset@p,f
 13397     1C88  3000               	movlw	0
 13398     1C89  3DF7               	addwfc	i1memset@p+1,f
 13399     1C8A  2C77               	goto	i1l6468
 13400     1C8B                     __end_ofi1_memset:
 13401                           
 13402                           	psect	text69
 13403     12DB                     __ptext69:	
 13404 ;; *************** function _USBStdGetStatusHandler *****************
 13405 ;; Defined at:
 13406 ;;		line 2133 in file "usb/usb_device.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;		None
 13409 ;; Auto vars:     Size  Location     Type
 13410 ;;  p               2    0[COMMON] PTR struct __BDT
 13411 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13412 ;; Return value:  Size  Location     Type
 13413 ;;                  1    wreg      void 
 13414 ;; Registers used:
 13415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 13416 ;; Tracked objects:
 13417 ;;		On entry : 1D/0
 13418 ;;		On exit  : 1F/1
 13419 ;;		Unchanged: 0/0
 13420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;Total ram usage:        2 bytes
 13426 ;; Hardware stack levels used: 1
 13427 ;; This function calls:
 13428 ;;		Nothing
 13429 ;; This function is called by:
 13430 ;;		_USBCheckStdRequest
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434     12DB                     _USBStdGetStatusHandler:	
 13435                           ;psect for function _USBStdGetStatusHandler
 13436                           
 13437                           
 13438                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 13439                           
 13440                           ;incstack = 0
 13441                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 13442     12DB  0020               	movlb	0	; select bank0
 13443     12DC  01C8               	clrf	72	;volatile
 13444                           
 13445                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 13446     12DD  01C9               	clrf	73	;volatile
 13447                           
 13448                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 13449     12DE  2B19               	goto	i1l4634
 13450     12DF                     i1l631:	
 13451                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 13452                           
 13453                           
 13454                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 13455     12DF  0021               	movlb	1	; select bank1
 13456     12E0  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13457                           
 13458                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 13459                           
 13460                           ;usb/usb_device.c: 2146:             if(0 == 1)
 13461     12E1  0022               	movlb	2	; select bank2
 13462     12E2  0344               	decf	_RemoteWakeup^(0+256),w	;volatile
 13463     12E3  1D03               	btfss	3,2
 13464     12E4  2B25               	goto	i1l634
 13465                           
 13466                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 13467     12E5  0020               	movlb	0	; select bank0
 13468     12E6  14C8               	bsf	72,1	;volatile
 13469     12E7  2B25               	goto	i1l634
 13470     12E8                     i1l635:	
 13471                           ;usb/usb_device.c: 2156:         case (0x01):
 13472                           
 13473                           
 13474                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 13475     12E8  0021               	movlb	1	; select bank1
 13476     12E9  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13477                           
 13478                           ;usb/usb_device.c: 2158:             break;
 13479     12EA  2B25               	goto	i1l634
 13480     12EB                     i1l636:	
 13481                           ;usb/usb_device.c: 2159:         case (0x02):
 13482                           
 13483                           
 13484                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 13485     12EB  0021               	movlb	1	; select bank1
 13486     12EC  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13487                           
 13488                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 13489     12ED  0020               	movlb	0	; select bank0
 13490     12EE  0844               	movf	68,w	;volatile
 13491     12EF  390F               	andlw	15
 13492     12F0  3A00               	xorlw	0
 13493     12F1  1903               	skipnz
 13494     12F2  2B25               	goto	i1l634
 13495                           
 13496                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 13497     12F3  1BC4               	btfsc	68,7	;volatile
 13498     12F4  2B00               	goto	i1l4624
 13499                           
 13500                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 13501     12F5  0844               	movf	68,w	;volatile
 13502     12F6  390F               	andlw	15
 13503     12F7  0709               	addwf	9,w
 13504     12F8  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13505     12F9  0086               	movwf	6
 13506     12FA  3001               	movlw	1	; select bank2/3
 13507     12FB  0087               	movwf	7
 13508     12FC  3F40               	moviw [0]fsr1
 13509     12FD  00F0               	movwf	USBStdGetStatusHandler@p
 13510     12FE  3F41               	moviw [1]fsr1
 13511     12FF  2B09               	goto	L9
 13512     1300                     i1l4624:	
 13513                           ;usb/usb_device.c: 2171:                 }
 13514                           
 13515                           
 13516                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 13517     1300  0844               	movf	68,w	;volatile
 13518     1301  390F               	andlw	15
 13519     1302  0709               	addwf	9,w
 13520     1303  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13521     1304  0086               	movwf	6
 13522     1305  0187               	clrf	7
 13523     1306  3F40               	moviw [0]fsr1
 13524     1307  00F0               	movwf	USBStdGetStatusHandler@p
 13525     1308  3F41               	moviw [1]fsr1
 13526     1309                     L9:
 13527     1309  00F1               	movwf	USBStdGetStatusHandler@p+1
 13528                           
 13529                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 13530     130A  0870               	movf	USBStdGetStatusHandler@p,w
 13531     130B  0086               	movwf	6
 13532     130C  0871               	movf	USBStdGetStatusHandler@p+1,w
 13533     130D  0087               	movwf	7
 13534     130E  1F81               	btfss	1,7
 13535     130F  2B25               	goto	i1l634
 13536     1310  0870               	movf	USBStdGetStatusHandler@p,w
 13537     1311  0086               	movwf	6
 13538     1312  0871               	movf	USBStdGetStatusHandler@p+1,w
 13539     1313  0087               	movwf	7
 13540     1314  1D01               	btfss	1,2
 13541     1315  2B25               	goto	i1l634
 13542                           
 13543                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 13544     1316  3001               	movlw	1
 13545     1317  00C8               	movwf	72	;volatile
 13546     1318  2B25               	goto	i1l634
 13547     1319                     i1l4634:
 13548     1319  0840               	movf	64,w	;volatile
 13549     131A  391F               	andlw	31
 13550                           
 13551                           ; Switch size 1, requested type "simple"
 13552                           ; Number of cases is 3, Range of values is 0 to 2
 13553                           ; switch strategies available:
 13554                           ; Name         Instructions Cycles
 13555                           ; simple_byte           10     6 (average)
 13556                           ; direct_byte           12     6 (fixed)
 13557                           ; jumptable            260     6 (fixed)
 13558                           ;	Chosen strategy is simple_byte
 13559     131B  3A00               	xorlw	0	; case 0
 13560     131C  1903               	skipnz
 13561     131D  2ADF               	goto	i1l631
 13562     131E  3A01               	xorlw	1	; case 1
 13563     131F  1903               	skipnz
 13564     1320  2AE8               	goto	i1l635
 13565     1321  3A03               	xorlw	3	; case 2
 13566     1322  1903               	skipnz
 13567     1323  2AEB               	goto	i1l636
 13568     1324  2B25               	goto	i1l634
 13569     1325                     i1l634:
 13570                           
 13571                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 13572     1325  0021               	movlb	1	; select bank1
 13573     1326  1FED               	btfss	(_inPipes^(0+128)+2),7	;volatile
 13574     1327  0008               	return
 13575                           
 13576                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 13577     1328  3048               	movlw	72
 13578     1329  00EB               	movwf	_inPipes^(0+128)	;volatile
 13579     132A  3000               	movlw	0
 13580     132B  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13581                           
 13582                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 13583     132C  146D               	bsf	(_inPipes^(0+128)+2),0	;volatile
 13584                           
 13585                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 13586     132D  3002               	movlw	2
 13587     132E  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13588     132F  0008               	return
 13589     1330                     __end_of_USBStdGetStatusHandler:
 13590                           
 13591                           	psect	text70
 13592     08B9                     __ptext70:	
 13593 ;; *************** function _USBStdGetDscHandler *****************
 13594 ;; Defined at:
 13595 ;;		line 2047 in file "usb/usb_device.c"
 13596 ;; Parameters:    Size  Location     Type
 13597 ;;		None
 13598 ;; Auto vars:     Size  Location     Type
 13599 ;;		None
 13600 ;; Return value:  Size  Location     Type
 13601 ;;                  1    wreg      void 
 13602 ;; Registers used:
 13603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 13604 ;; Tracked objects:
 13605 ;;		On entry : 1D/0
 13606 ;;		On exit  : 1E/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13611 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13612 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;Total ram usage:        3 bytes
 13614 ;; Hardware stack levels used: 1
 13615 ;; This function calls:
 13616 ;;		Nothing
 13617 ;; This function is called by:
 13618 ;;		_USBCheckStdRequest
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622     08B9                     _USBStdGetDscHandler:	
 13623                           ;psect for function _USBStdGetDscHandler
 13624                           
 13625                           
 13626                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 13627                           
 13628                           ;incstack = 0
 13629                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 13630     08B9  3080               	movlw	128
 13631     08BA  0020               	movlb	0	; select bank0
 13632     08BB  0640               	xorwf	64,w	;volatile
 13633     08BC  1D03               	btfss	3,2
 13634     08BD  0008               	return
 13635                           
 13636                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 13637     08BE  30C0               	movlw	192
 13638     08BF  0021               	movlb	1	; select bank1
 13639     08C0  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 13640                           
 13641                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 13642     08C1  2925               	goto	i1l4608
 13643     08C2                     i1l4582:
 13644                           
 13645                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 13646     08C2  30B8               	movlw	low (_device_dsc| (0+32768))
 13647     08C3  0021               	movlb	1	; select bank1
 13648     08C4  00EB               	movwf	_inPipes^(0+128)	;volatile
 13649     08C5  3098               	movlw	high (_device_dsc| (0+32768))
 13650     08C6  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 13651                           
 13652                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 13653     08C7  3000               	movlw	0
 13654     08C8  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13655     08C9  3012               	movlw	18
 13656     08CA  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13657                           
 13658                           ;usb/usb_device.c: 2062:                 break;
 13659     08CB  0008               	return
 13660     08CC                     i1l4586:
 13661                           
 13662                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 13663     08CC  0842               	movf	66,w	;volatile
 13664     08CD  1D03               	btfss	3,2
 13665     08CE  28FB               	goto	i1l4594
 13666                           
 13667                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 13668     08CF  0842               	movf	66,w	;volatile
 13669     08D0  00F0               	movwf	??_USBStdGetDscHandler
 13670     08D1  01F1               	clrf	??_USBStdGetDscHandler+1
 13671     08D2  35F0               	lslf	??_USBStdGetDscHandler,f
 13672     08D3  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13673     08D4  30DD               	movlw	low _USB_CD_Ptr
 13674     08D5  0770               	addwf	??_USBStdGetDscHandler,w
 13675     08D6  0084               	movwf	4
 13676     08D7  3018               	movlw	high _USB_CD_Ptr
 13677     08D8  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13678     08D9  3880               	iorlw	128
 13679     08DA  0085               	movwf	5
 13680     08DB  3F00               	moviw [0]fsr0
 13681     08DC  0021               	movlb	1	; select bank1
 13682     08DD  00EB               	movwf	_inPipes^(0+128)	;volatile
 13683     08DE  3F01               	moviw [1]fsr0
 13684     08DF  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13685                           
 13686                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 13687     08E0  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13688     08E1  00F1               	movwf	??_USBStdGetDscHandler+1
 13689     08E2  086B               	movf	_inPipes^(0+128),w	;volatile
 13690     08E3  00F0               	movwf	??_USBStdGetDscHandler
 13691     08E4  3002               	movlw	2
 13692     08E5  0770               	addwf	??_USBStdGetDscHandler,w
 13693     08E6  0084               	movwf	4
 13694     08E7  0871               	movf	??_USBStdGetDscHandler+1,w
 13695     08E8  1803               	skipnc
 13696     08E9  0A71               	incf	??_USBStdGetDscHandler+1,w
 13697     08EA  0085               	movwf	5
 13698     08EB  0800               	movf	0,w	;code access
 13699     08EC  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13700                           
 13701                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 13702     08ED  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13703     08EE  00F1               	movwf	??_USBStdGetDscHandler+1
 13704     08EF  086B               	movf	_inPipes^(0+128),w	;volatile
 13705     08F0  00F0               	movwf	??_USBStdGetDscHandler
 13706     08F1  3003               	movlw	3
 13707     08F2  0770               	addwf	??_USBStdGetDscHandler,w
 13708     08F3  0084               	movwf	4
 13709     08F4  0871               	movf	??_USBStdGetDscHandler+1,w
 13710     08F5  1803               	skipnc
 13711     08F6  0A71               	incf	??_USBStdGetDscHandler+1,w
 13712     08F7  0085               	movwf	5
 13713     08F8  0800               	movf	0,w	;code access
 13714     08F9  00EF               	movwf	(_inPipes^(0+128)+4)	;volatile
 13715                           
 13716                           ;usb/usb_device.c: 2080:                 }
 13717     08FA  0008               	return
 13718     08FB                     i1l4594:
 13719                           
 13720                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 13721     08FB  0021               	movlb	1	; select bank1
 13722     08FC  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13723     08FD  0008               	return
 13724     08FE                     i1l4596:
 13725                           
 13726                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 13727     08FE  3003               	movlw	3
 13728     08FF  0242               	subwf	66,w	;volatile
 13729     0900  1803               	skipnc
 13730     0901  291F               	goto	i1l4602
 13731                           
 13732                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 13733     0902  0842               	movf	66,w	;volatile
 13734     0903  00F0               	movwf	??_USBStdGetDscHandler
 13735     0904  01F1               	clrf	??_USBStdGetDscHandler+1
 13736     0905  35F0               	lslf	??_USBStdGetDscHandler,f
 13737     0906  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 13738     0907  30D3               	movlw	low _USB_SD_Ptr
 13739     0908  0770               	addwf	??_USBStdGetDscHandler,w
 13740     0909  0084               	movwf	4
 13741     090A  3018               	movlw	high _USB_SD_Ptr
 13742     090B  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 13743     090C  3880               	iorlw	128
 13744     090D  0085               	movwf	5
 13745     090E  3F00               	moviw [0]fsr0
 13746     090F  0021               	movlb	1	; select bank1
 13747     0910  00EB               	movwf	_inPipes^(0+128)	;volatile
 13748     0911  3F01               	moviw [1]fsr0
 13749     0912  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 13750                           
 13751                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 13752     0913  086B               	movf	_inPipes^(0+128),w	;volatile
 13753     0914  0084               	movwf	4
 13754     0915  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 13755     0916  0085               	movwf	5
 13756     0917  0800               	movf	0,w	;code access
 13757     0918  00F0               	movwf	??_USBStdGetDscHandler
 13758     0919  01F1               	clrf	??_USBStdGetDscHandler+1
 13759     091A  0870               	movf	??_USBStdGetDscHandler,w
 13760     091B  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 13761     091C  0871               	movf	??_USBStdGetDscHandler+1,w
 13762     091D  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 13763                           
 13764                           ;usb/usb_device.c: 2096:                 }
 13765     091E  0008               	return
 13766     091F                     i1l4602:
 13767                           
 13768                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 13769     091F  0021               	movlb	1	; select bank1
 13770     0920  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13771     0921  0008               	return
 13772     0922                     i1l4604:
 13773                           
 13774                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 13775     0922  0021               	movlb	1	; select bank1
 13776     0923  01ED               	clrf	(_inPipes^(0+128)+2)	;volatile
 13777                           
 13778                           ;usb/usb_device.c: 2113:                 break;
 13779     0924  0008               	return
 13780     0925                     i1l4608:
 13781     0925  0020               	movlb	0	; select bank0
 13782     0926  0843               	movf	67,w	;volatile
 13783                           
 13784                           ; Switch size 1, requested type "simple"
 13785                           ; Number of cases is 3, Range of values is 1 to 3
 13786                           ; switch strategies available:
 13787                           ; Name         Instructions Cycles
 13788                           ; simple_byte           10     6 (average)
 13789                           ; direct_byte           15     9 (fixed)
 13790                           ; jumptable            263     9 (fixed)
 13791                           ;	Chosen strategy is simple_byte
 13792     0927  3A01               	xorlw	1	; case 1
 13793     0928  1903               	skipnz
 13794     0929  28C2               	goto	i1l4582
 13795     092A  3A03               	xorlw	3	; case 2
 13796     092B  1903               	skipnz
 13797     092C  28CC               	goto	i1l4586
 13798     092D  3A01               	xorlw	1	; case 3
 13799     092E  1903               	skipnz
 13800     092F  28FE               	goto	i1l4596
 13801     0930  2922               	goto	i1l4604
 13802     0931  0008               	return
 13803     0932                     __end_of_USBStdGetDscHandler:
 13804                           
 13805                           	psect	text71
 13806     022C                     __ptext71:	
 13807 ;; *************** function _USBStdFeatureReqHandler *****************
 13808 ;; Defined at:
 13809 ;;		line 2761 in file "usb/usb_device.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;		None
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;  p               2   11[BANK0 ] PTR struct __BDT
 13814 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13815 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 13816 ;;		 -> UEP0(1), 
 13817 ;;  current_ep_d    1   10[BANK0 ] struct .
 13818 ;; Return value:  Size  Location     Type
 13819 ;;                  1    wreg      void 
 13820 ;; Registers used:
 13821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13822 ;; Tracked objects:
 13823 ;;		On entry : 1D/0
 13824 ;;		On exit  : 1F/0
 13825 ;;		Unchanged: 0/0
 13826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;Total ram usage:        7 bytes
 13832 ;; Hardware stack levels used: 1
 13833 ;; Hardware stack levels required when called: 4
 13834 ;; This function calls:
 13835 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13836 ;; This function is called by:
 13837 ;;		_USBCheckStdRequest
 13838 ;; This function uses a non-reentrant model
 13839 ;;
 13840                           
 13841     022C                     _USBStdFeatureReqHandler:	
 13842                           ;psect for function _USBStdFeatureReqHandler
 13843                           
 13844                           
 13845                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 13846                           
 13847                           ;incstack = 0
 13848 ;; hardware stack exceeded
 13849                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13850     022C  0020               	movlb	0	; select bank0
 13851     022D  0342               	decf	66,w	;volatile
 13852     022E  1D03               	btfss	3,2
 13853     022F  2A42               	goto	i1l4654
 13854     0230  0840               	movf	64,w	;volatile
 13855     0231  391F               	andlw	31
 13856     0232  3A00               	xorlw	0
 13857     0233  1D03               	skipz
 13858     0234  2A42               	goto	i1l4654
 13859                           
 13860                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 13861     0235  0021               	movlb	1	; select bank1
 13862     0236  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13863                           
 13864                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 13865     0237  3003               	movlw	3
 13866     0238  0020               	movlb	0	; select bank0
 13867     0239  0641               	xorwf	65,w	;volatile
 13868     023A  1D03               	btfss	3,2
 13869     023B  2A40               	goto	i1l4652
 13870                           
 13871                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 13872     023C  3001               	movlw	1
 13873     023D  0022               	movlb	2	; select bank2
 13874     023E  00C4               	movwf	_RemoteWakeup^(0+256)	;volatile
 13875     023F  2A42               	goto	i1l4654
 13876     0240                     i1l4652:
 13877                           
 13878                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 13879     0240  0022               	movlb	2	; select bank2
 13880     0241  01C4               	clrf	_RemoteWakeup^(0+256)	;volatile
 13881     0242                     i1l4654:
 13882                           
 13883                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 13884     0242  0020               	movlb	0	; select bank0
 13885     0243  0842               	movf	66,w	;volatile
 13886     0244  1D03               	btfss	3,2
 13887     0245  0008               	return
 13888     0246  0840               	movf	64,w	;volatile
 13889     0247  391F               	andlw	31
 13890     0248  3A02               	xorlw	2
 13891     0249  1D03               	skipz
 13892     024A  0008               	return
 13893     024B  0844               	movf	68,w	;volatile
 13894     024C  390F               	andlw	15
 13895     024D  3A00               	xorlw	0
 13896     024E  1903               	skipnz
 13897     024F  0008               	return
 13898     0250  0844               	movf	68,w	;volatile
 13899     0251  390F               	andlw	15
 13900     0252  00D6               	movwf	??_USBStdFeatureReqHandler
 13901     0253  3002               	movlw	2
 13902     0254  0256               	subwf	??_USBStdFeatureReqHandler,w
 13903     0255  1803               	skipnc
 13904     0256  0008               	return
 13905     0257  3020               	movlw	32
 13906     0258  066C               	xorwf	_USBDeviceState,w
 13907     0259  1D03               	btfss	3,2
 13908     025A  0008               	return
 13909                           
 13910                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 13911     025B  0021               	movlb	1	; select bank1
 13912     025C  17ED               	bsf	(_inPipes^(0+128)+2),7	;volatile
 13913                           
 13914                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 13915     025D  0020               	movlb	0	; select bank0
 13916     025E  1BC4               	btfsc	68,7	;volatile
 13917     025F  2A6F               	goto	i1l4668
 13918                           
 13919                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 13920     0260  0844               	movf	68,w	;volatile
 13921     0261  390F               	andlw	15
 13922     0262  0709               	addwf	9,w
 13923     0263  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13924     0264  0086               	movwf	6
 13925     0265  3001               	movlw	1	; select bank2/3
 13926     0266  0087               	movwf	7
 13927     0267  3F40               	moviw [0]fsr1
 13928     0268  00DB               	movwf	USBStdFeatureReqHandler@p
 13929     0269  3F41               	moviw [1]fsr1
 13930     026A  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13931                           
 13932                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 13933     026B  0844               	movf	68,w	;volatile
 13934     026C  390F               	andlw	15
 13935     026D  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 13936     026E  2A7C               	goto	L10
 13937     026F                     i1l4668:	
 13938                           ;usb/usb_device.c: 2797:         }
 13939                           
 13940                           
 13941                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 13942     026F  0844               	movf	68,w	;volatile
 13943     0270  390F               	andlw	15
 13944     0271  0709               	addwf	9,w
 13945     0272  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13946     0273  0086               	movwf	6
 13947     0274  0187               	clrf	7
 13948     0275  3F40               	moviw [0]fsr1
 13949     0276  00DB               	movwf	USBStdFeatureReqHandler@p
 13950     0277  3F41               	moviw [1]fsr1
 13951     0278  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13952                           
 13953                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 13954     0279  0844               	movf	68,w	;volatile
 13955     027A  390F               	andlw	15
 13956     027B  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 13957     027C                     L10:
 13958     027C  0086               	movwf	6
 13959     027D  3001               	movlw	1	; select bank2/3
 13960     027E  0087               	movwf	7
 13961     027F  0801               	movf	1,w
 13962     0280  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 13963                           
 13964                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 13965     0281  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 13966     0282  2A8D               	goto	i1l4674
 13967                           
 13968                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 13969     0283  30FB               	movlw	251
 13970     0284  00D6               	movwf	??_USBStdFeatureReqHandler
 13971     0285  30FF               	movlw	255
 13972     0286  00D7               	movwf	??_USBStdFeatureReqHandler+1
 13973     0287  085B               	movf	USBStdFeatureReqHandler@p,w
 13974     0288  0556               	andwf	??_USBStdFeatureReqHandler,w
 13975     0289  00DB               	movwf	USBStdFeatureReqHandler@p
 13976     028A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 13977     028B  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 13978     028C  2A92               	goto	L11
 13979     028D                     i1l4674:	
 13980                           ;usb/usb_device.c: 2811:             }
 13981                           
 13982                           
 13983                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 13984     028D  3004               	movlw	4
 13985     028E  045B               	iorwf	USBStdFeatureReqHandler@p,w
 13986     028F  00DB               	movwf	USBStdFeatureReqHandler@p
 13987     0290  3000               	movlw	0
 13988     0291  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 13989     0292                     L11:
 13990     0292  00DC               	movwf	USBStdFeatureReqHandler@p+1
 13991                           
 13992                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 13993     0293  1BC4               	btfsc	68,7	;volatile
 13994     0294  2AA1               	goto	i1l4680
 13995                           
 13996                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 13997     0295  0844               	movf	68,w	;volatile
 13998     0296  390F               	andlw	15
 13999     0297  0709               	addwf	9,w
 14000     0298  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14001     0299  0086               	movwf	6
 14002     029A  3001               	movlw	1	; select bank2/3
 14003     029B  0087               	movwf	7
 14004     029C  085B               	movf	USBStdFeatureReqHandler@p,w
 14005     029D  3FC0               	movwi [0]fsr1
 14006     029E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14007     029F  3FC1               	movwi [1]fsr1
 14008                           
 14009                           ;usb/usb_device.c: 2823:         }
 14010     02A0  2AAB               	goto	i1l4682
 14011     02A1                     i1l4680:
 14012                           
 14013                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 14014     02A1  0844               	movf	68,w	;volatile
 14015     02A2  390F               	andlw	15
 14016     02A3  0709               	addwf	9,w
 14017     02A4  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14018     02A5  0086               	movwf	6
 14019     02A6  0187               	clrf	7
 14020     02A7  085B               	movf	USBStdFeatureReqHandler@p,w
 14021     02A8  3FC0               	movwi [0]fsr1
 14022     02A9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14023     02AA  3FC1               	movwi [1]fsr1
 14024     02AB                     i1l4682:
 14025                           
 14026                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 14027     02AB  3003               	movlw	3
 14028     02AC  0641               	xorwf	65,w	;volatile
 14029     02AD  1D03               	btfss	3,2
 14030     02AE  2ACD               	goto	i1l4696
 14031                           
 14032                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 14033     02AF  085B               	movf	USBStdFeatureReqHandler@p,w
 14034     02B0  0086               	movwf	6
 14035     02B1  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14036     02B2  0087               	movwf	7
 14037     02B3  1F81               	btfss	1,7
 14038     02B4  2AC2               	goto	i1l4692
 14039                           
 14040                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 14041     02B5  1BC4               	btfsc	68,7	;volatile
 14042     02B6  2ABB               	goto	i1l4690
 14043                           
 14044                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 14045     02B7  0844               	movf	68,w	;volatile
 14046     02B8  390F               	andlw	15
 14047     02B9  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 14048     02BA  2ABE               	goto	L12
 14049     02BB                     i1l4690:	
 14050                           ;usb/usb_device.c: 2839:                 }
 14051                           
 14052                           
 14053                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 14054     02BB  0844               	movf	68,w	;volatile
 14055     02BC  390F               	andlw	15
 14056     02BD  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 14057     02BE                     L12:
 14058     02BE  0086               	movwf	6
 14059     02BF  3001               	movlw	1	; select bank2/3
 14060     02C0  0087               	movwf	7
 14061     02C1  1481               	bsf	1,1
 14062     02C2                     i1l4692:
 14063                           
 14064                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 14065     02C2  085B               	movf	USBStdFeatureReqHandler@p,w
 14066     02C3  0086               	movwf	6
 14067     02C4  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14068     02C5  0087               	movwf	7
 14069     02C6  1501               	bsf	1,2
 14070                           
 14071                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 14072     02C7  085B               	movf	USBStdFeatureReqHandler@p,w
 14073     02C8  0086               	movwf	6
 14074     02C9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14075     02CA  0087               	movwf	7
 14076     02CB  1781               	bsf	1,7
 14077                           
 14078                           ;usb/usb_device.c: 2849:         }
 14079     02CC  0008               	return
 14080     02CD                     i1l4696:
 14081                           
 14082                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 14083     02CD  3004               	movlw	4
 14084     02CE  065B               	xorwf	USBStdFeatureReqHandler@p,w
 14085     02CF  00DB               	movwf	USBStdFeatureReqHandler@p
 14086     02D0  3000               	movlw	0
 14087     02D1  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 14088     02D2  00DC               	movwf	USBStdFeatureReqHandler@p+1
 14089                           
 14090                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 14091     02D3  085B               	movf	USBStdFeatureReqHandler@p,w
 14092     02D4  0086               	movwf	6
 14093     02D5  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14094     02D6  0087               	movwf	7
 14095     02D7  1F81               	btfss	1,7
 14096     02D8  2AF6               	goto	i1l4706
 14097                           
 14098                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 14099     02D9  307F               	movlw	127
 14100     02DA  00D6               	movwf	??_USBStdFeatureReqHandler
 14101     02DB  085B               	movf	USBStdFeatureReqHandler@p,w
 14102     02DC  0086               	movwf	6
 14103     02DD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14104     02DE  0087               	movwf	7
 14105     02DF  0856               	movf	??_USBStdFeatureReqHandler,w
 14106     02E0  0581               	andwf	1,f
 14107                           
 14108                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 14109     02E1  085B               	movf	USBStdFeatureReqHandler@p,w
 14110     02E2  0086               	movwf	6
 14111     02E3  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14112     02E4  0087               	movwf	7
 14113     02E5  1701               	bsf	1,6
 14114                           
 14115                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 14116     02E6  3005               	movlw	5
 14117     02E7  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 14118     02E8  3000               	movlw	0
 14119     02E9  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 14120     02EA  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14121     02EB  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 14122     02EC  085B               	movf	USBStdFeatureReqHandler@p,w
 14123     02ED  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 14124     02EE  3002               	movlw	2
 14125     02EF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 14126     02F0  3000               	movlw	0
 14127     02F1  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 14128     02F2  319F  27C3  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 14129                           
 14130                           ;usb/usb_device.c: 2864:                 }
 14131     02F5  2AFB               	goto	i1l4708
 14132     02F6                     i1l4706:
 14133                           
 14134                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 14135     02F6  085B               	movf	USBStdFeatureReqHandler@p,w
 14136     02F7  0086               	movwf	6
 14137     02F8  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14138     02F9  0087               	movwf	7
 14139     02FA  1701               	bsf	1,6
 14140     02FB                     i1l4708:
 14141                           
 14142                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 14143     02FB  3004               	movlw	4
 14144     02FC  0020               	movlb	0	; select bank0
 14145     02FD  065B               	xorwf	USBStdFeatureReqHandler@p,w
 14146     02FE  00DB               	movwf	USBStdFeatureReqHandler@p
 14147     02FF  3000               	movlw	0
 14148     0300  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 14149     0301  00DC               	movwf	USBStdFeatureReqHandler@p+1
 14150                           
 14151                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 14152     0302  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 14153     0303  2B0A               	goto	i1l728
 14154     0304  085B               	movf	USBStdFeatureReqHandler@p,w
 14155     0305  0086               	movwf	6
 14156     0306  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14157     0307  0087               	movwf	7
 14158     0308  1F81               	btfss	1,7
 14159     0309  2B2F               	goto	i1l4720
 14160     030A                     i1l728:
 14161                           
 14162                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 14163     030A  1BC4               	btfsc	68,7	;volatile
 14164     030B  2B10               	goto	i1l4716
 14165                           
 14166                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 14167     030C  0844               	movf	68,w	;volatile
 14168     030D  390F               	andlw	15
 14169     030E  3E30               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 14170     030F  2B13               	goto	L13
 14171     0310                     i1l4716:	
 14172                           ;usb/usb_device.c: 2884:                     }
 14173                           
 14174                           
 14175                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 14176     0310  0844               	movf	68,w	;volatile
 14177     0311  390F               	andlw	15
 14178     0312  3E32               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 14179     0313                     L13:
 14180     0313  0086               	movwf	6
 14181     0314  3001               	movlw	1	; select bank2/3
 14182     0315  0087               	movwf	7
 14183     0316  1081               	bcf	1,1
 14184                           
 14185                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 14186                           
 14187                           ;usb/usb_device.c: 2888:                     }
 14188     0317  303B               	movlw	59
 14189     0318  00D6               	movwf	??_USBStdFeatureReqHandler
 14190     0319  085B               	movf	USBStdFeatureReqHandler@p,w
 14191     031A  0086               	movwf	6
 14192     031B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14193     031C  0087               	movwf	7
 14194     031D  0856               	movf	??_USBStdFeatureReqHandler,w
 14195     031E  0581               	andwf	1,f
 14196                           
 14197                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 14198     031F  3005               	movlw	5
 14199     0320  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 14200     0321  3000               	movlw	0
 14201     0322  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 14202     0323  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14203     0324  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 14204     0325  085B               	movf	USBStdFeatureReqHandler@p,w
 14205     0326  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 14206     0327  3002               	movlw	2
 14207     0328  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 14208     0329  3000               	movlw	0
 14209     032A  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 14210     032B  319F  27C3  3182   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 14211                           
 14212                           ;usb/usb_device.c: 2894:                 }
 14213     032E  2B37               	goto	i1l4722
 14214     032F                     i1l4720:
 14215                           
 14216                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 14217     032F  303B               	movlw	59
 14218     0330  00D6               	movwf	??_USBStdFeatureReqHandler
 14219     0331  085B               	movf	USBStdFeatureReqHandler@p,w
 14220     0332  0086               	movwf	6
 14221     0333  085C               	movf	USBStdFeatureReqHandler@p+1,w
 14222     0334  0087               	movwf	7
 14223     0335  0856               	movf	??_USBStdFeatureReqHandler,w
 14224     0336  0581               	andwf	1,f
 14225     0337                     i1l4722:
 14226                           
 14227                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 14228     0337  0020               	movlb	0	; select bank0
 14229     0338  0844               	movf	68,w	;volatile
 14230     0339  390F               	andlw	15
 14231     033A  3E98               	addlw	152
 14232     033B  00D6               	movwf	??_USBStdFeatureReqHandler
 14233     033C  01D7               	clrf	??_USBStdFeatureReqHandler+1
 14234     033D  300E               	movlw	14
 14235     033E  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 14236     033F  0856               	movf	??_USBStdFeatureReqHandler,w
 14237     0340  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 14238     0341  0857               	movf	??_USBStdFeatureReqHandler+1,w
 14239     0342  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 14240                           
 14241                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 14242     0343  30FE               	movlw	254
 14243     0344  00D6               	movwf	??_USBStdFeatureReqHandler
 14244     0345  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 14245     0346  0086               	movwf	6
 14246     0347  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 14247     0348  0087               	movwf	7
 14248     0349  0856               	movf	??_USBStdFeatureReqHandler,w
 14249     034A  0581               	andwf	1,f
 14250     034B  0008               	return
 14251     034C                     __end_of_USBStdFeatureReqHandler:
 14252                           
 14253                           	psect	text72
 14254     1FC3                     __ptext72:	
 14255 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 14256 ;; Defined at:
 14257 ;;		line 66 in file "usb/usb_events.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  event           2    0[BANK0 ] enum E238
 14260 ;;  pdata           2    2[BANK0 ] PTR void 
 14261 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 14262 ;;		 -> BDT(32), 
 14263 ;;  size            2    4[BANK0 ] unsigned short 
 14264 ;; Auto vars:     Size  Location     Type
 14265 ;;		None
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  1    wreg      _Bool 
 14268 ;; Registers used:
 14269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14270 ;; Tracked objects:
 14271 ;;		On entry : 1F/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14275 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14278 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14279 ;;Total ram usage:        6 bytes
 14280 ;; Hardware stack levels used: 1
 14281 ;; Hardware stack levels required when called: 3
 14282 ;; This function calls:
 14283 ;;		_APP_KeyboardInit
 14284 ;;		_USBCheckHIDRequest
 14285 ;; This function is called by:
 14286 ;;		_USBDeviceTasks
 14287 ;;		_USBStdSetCfgHandler
 14288 ;;		_USBSuspend
 14289 ;;		_USBWakeFromSuspend
 14290 ;;		_USBCtrlTrfSetupHandler
 14291 ;;		_USBCheckStdRequest
 14292 ;;		_USBStdFeatureReqHandler
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296     1FC3                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 14297                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 14298                           
 14299                           
 14300                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 14301                           
 14302                           ;incstack = 0
 14303                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14304     1FC3  2FD8               	goto	i1l4382
 14305     1FC4                     i1l4370:
 14306                           
 14307                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 14308     1FC4  0A65               	incf	_SOFCounter,w	;volatile
 14309     1FC5  307F               	movlw	127
 14310     1FC6  1903               	skipnz
 14311     1FC7  0666               	xorwf	_SOFCounter+1,w	;volatile
 14312     1FC8  1903               	btfsc	3,2
 14313     1FC9  2FCF               	goto	i1l4374
 14314                           
 14315                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 14316     1FCA  3001               	movlw	1
 14317     1FCB  07E5               	addwf	_SOFCounter,f	;volatile
 14318     1FCC  3000               	movlw	0
 14319     1FCD  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 14320                           
 14321                           ;usb/usb_events.c: 80:             }
 14322     1FCE  0008               	return
 14323     1FCF                     i1l4374:
 14324                           
 14325                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 14326     1FCF  01E5               	clrf	_SOFCounter	;volatile
 14327     1FD0  01E6               	clrf	_SOFCounter+1	;volatile
 14328     1FD1  0008               	return
 14329     1FD2                     i1l4376:
 14330                           
 14331                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 14332     1FD2  3192  2242         	fcall	_APP_KeyboardInit
 14333                           
 14334                           ;usb/usb_events.c: 115:             break;
 14335     1FD4  0008               	return
 14336     1FD5                     i1l4378:
 14337                           
 14338                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 14339     1FD5  3189  21AD         	fcall	_USBCheckHIDRequest
 14340                           
 14341                           ;usb/usb_events.c: 124:             break;
 14342     1FD7  0008               	return
 14343     1FD8                     i1l4382:
 14344                           
 14345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 14346                           ; Switch size 1, requested type "simple"
 14347                           ; Number of cases is 2, Range of values is 0 to 127
 14348                           ; switch strategies available:
 14349                           ; Name         Instructions Cycles
 14350                           ; simple_byte            7     4 (average)
 14351                           ; direct_byte          262     6 (fixed)
 14352                           ; jumptable            260     6 (fixed)
 14353                           ;	Chosen strategy is simple_byte
 14354     1FD8  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 14355     1FD9  3A00               	xorlw	0	; case 0
 14356     1FDA  1903               	skipnz
 14357     1FDB  2FE0               	goto	i1l7132
 14358     1FDC  3A7F               	xorlw	127	; case 127
 14359     1FDD  1903               	skipnz
 14360     1FDE  2FFA               	goto	i1l7134
 14361     1FDF  2FFF               	goto	i1l818
 14362     1FE0                     i1l7132:
 14363                           
 14364                           ; Switch size 1, requested type "simple"
 14365                           ; Number of cases is 8, Range of values is 1 to 117
 14366                           ; switch strategies available:
 14367                           ; Name         Instructions Cycles
 14368                           ; simple_byte           25    13 (average)
 14369                           ; direct_byte          243     9 (fixed)
 14370                           ; jumptable            263     9 (fixed)
 14371                           ;	Chosen strategy is simple_byte
 14372     1FE0  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 14373     1FE1  3A01               	xorlw	1	; case 1
 14374     1FE2  1903               	skipnz
 14375     1FE3  2FD2               	goto	i1l4376
 14376     1FE4  3A03               	xorlw	3	; case 2
 14377     1FE5  1903               	skipnz
 14378     1FE6  2FFF               	goto	i1l818
 14379     1FE7  3A01               	xorlw	1	; case 3
 14380     1FE8  1903               	skipnz
 14381     1FE9  2FD5               	goto	i1l4378
 14382     1FEA  3A06               	xorlw	6	; case 5
 14383     1FEB  1903               	skipnz
 14384     1FEC  2FFF               	goto	i1l818
 14385     1FED  3A77               	xorlw	119	; case 114
 14386     1FEE  1903               	skipnz
 14387     1FEF  2FFF               	goto	i1l818
 14388     1FF0  3A01               	xorlw	1	; case 115
 14389     1FF1  1903               	skipnz
 14390     1FF2  2FC4               	goto	i1l4370
 14391     1FF3  3A07               	xorlw	7	; case 116
 14392     1FF4  1903               	skipnz
 14393     1FF5  2FFF               	goto	i1l818
 14394     1FF6  3A01               	xorlw	1	; case 117
 14395     1FF7  1903               	skipnz
 14396     1FF8  2FFF               	goto	i1l818
 14397     1FF9  2FFF               	goto	i1l818
 14398     1FFA                     i1l7134:
 14399                           
 14400                           ; Switch size 1, requested type "simple"
 14401                           ; Number of cases is 1, Range of values is 255 to 255
 14402                           ; switch strategies available:
 14403                           ; Name         Instructions Cycles
 14404                           ; simple_byte            4     3 (average)
 14405                           ; direct_byte            7     5 (fixed)
 14406                           ; jumptable            263     9 (fixed)
 14407                           ;	Chosen strategy is simple_byte
 14408     1FFA  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 14409     1FFB  3AFF               	xorlw	255	; case 255
 14410     1FFC  1903               	skipnz
 14411     1FFD  2FFF               	goto	i1l818
 14412     1FFE  2FFF               	goto	i1l818
 14413     1FFF                     i1l818:
 14414     1FFF  0008               	return
 14415     2000                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 14416                           
 14417                           	psect	text73
 14418     09AD                     __ptext73:	
 14419 ;; *************** function _USBCheckHIDRequest *****************
 14420 ;; Defined at:
 14421 ;;		line 161 in file "usb/usb_device_hid.c"
 14422 ;; Parameters:    Size  Location     Type
 14423 ;;		None
 14424 ;; Auto vars:     Size  Location     Type
 14425 ;;		None
 14426 ;; Return value:  Size  Location     Type
 14427 ;;                  1    wreg      void 
 14428 ;; Registers used:
 14429 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14430 ;; Tracked objects:
 14431 ;;		On entry : 1F/0
 14432 ;;		On exit  : 1C/0
 14433 ;;		Unchanged: 0/0
 14434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14439 ;;Total ram usage:        0 bytes
 14440 ;; Hardware stack levels used: 1
 14441 ;; Hardware stack levels required when called: 1
 14442 ;; This function calls:
 14443 ;;		_USBHIDCBSetIdleRateHandler
 14444 ;;		_USBHIDCBSetReportHandler
 14445 ;; This function is called by:
 14446 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14447 ;; This function uses a non-reentrant model
 14448 ;;
 14449                           
 14450     09AD                     _USBCheckHIDRequest:	
 14451                           ;psect for function _USBCheckHIDRequest
 14452                           
 14453                           
 14454                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 14455                           
 14456                           ;incstack = 0
 14457                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14458     09AD  0840               	movf	64,w	;volatile
 14459     09AE  391F               	andlw	31
 14460     09AF  3A01               	xorlw	1
 14461     09B0  1D03               	btfss	3,2
 14462     09B1  0008               	return
 14463                           
 14464                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 14465     09B2  0844               	movf	68,w	;volatile
 14466     09B3  1D03               	btfss	3,2
 14467     09B4  0008               	return
 14468                           
 14469                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 14470     09B5  3006               	movlw	6
 14471     09B6  0641               	xorwf	65,w	;volatile
 14472     09B7  1903               	btfsc	3,2
 14473     09B8  29D2               	goto	i1l4290
 14474     09B9  29DD               	goto	i1l4292
 14475     09BA                     i1l4278:
 14476                           
 14477                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 14478     09BA  036F               	decf	_USBActiveConfiguration,w	;volatile
 14479     09BB  1D03               	btfss	3,2
 14480     09BC  29DD               	goto	i1l4292
 14481                           
 14482                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14483     09BD  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 14484     09BE  0021               	movlb	1	; select bank1
 14485     09BF  00EB               	movwf	_inPipes^(0+128)	;volatile
 14486     09C0  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 14487     09C1  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14488     09C2  3000               	movlw	0
 14489     09C3  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14490     09C4  3009               	movlw	9
 14491     09C5  29CE               	goto	L15
 14492     09C6                     i1l4284:
 14493                           
 14494                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 14495     09C6  3000               	movlw	low (_hid_rpt01| (0+32768))
 14496     09C7  0021               	movlb	1	; select bank1
 14497     09C8  00EB               	movwf	_inPipes^(0+128)	;volatile
 14498     09C9  3098               	movlw	high (_hid_rpt01| (0+32768))
 14499     09CA  00EC               	movwf	(_inPipes^(0+128)+1)	;volatile
 14500     09CB  3000               	movlw	0
 14501     09CC  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14502     09CD  303F               	movlw	63
 14503     09CE                     L15:
 14504     09CE  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14505     09CF  30C0               	movlw	192
 14506     09D0  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14507                           
 14508                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 14509     09D1  29DD               	goto	i1l4292
 14510     09D2                     i1l4290:
 14511     09D2  0843               	movf	67,w	;volatile
 14512                           
 14513                           ; Switch size 1, requested type "simple"
 14514                           ; Number of cases is 3, Range of values is 33 to 35
 14515                           ; switch strategies available:
 14516                           ; Name         Instructions Cycles
 14517                           ; simple_byte           10     6 (average)
 14518                           ; direct_byte           15     9 (fixed)
 14519                           ; jumptable            263     9 (fixed)
 14520                           ;	Chosen strategy is simple_byte
 14521     09D3  3A21               	xorlw	33	; case 33
 14522     09D4  1903               	skipnz
 14523     09D5  29BA               	goto	i1l4278
 14524     09D6  3A03               	xorlw	3	; case 34
 14525     09D7  1903               	skipnz
 14526     09D8  29C6               	goto	i1l4284
 14527     09D9  3A01               	xorlw	1	; case 35
 14528     09DA  1903               	skipnz
 14529     09DB  29DD               	goto	i1l4292
 14530     09DC  29DD               	goto	i1l4292
 14531     09DD                     i1l4292:
 14532                           
 14533                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 14534     09DD  0020               	movlb	0	; select bank0
 14535     09DE  0E40               	swapf	64,w	;volatile
 14536     09DF  0C89               	rrf	9,f
 14537     09E0  3903               	andlw	3
 14538     09E1  3A01               	xorlw	1
 14539     09E2  1D03               	btfss	3,2
 14540     09E3  0008               	return
 14541     09E4  2A16               	goto	i1l4318
 14542     09E5                     i1l4296:
 14543                           
 14544                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 14545     09E5  319B  23A5         	fcall	_USBHIDCBSetReportHandler
 14546                           
 14547                           ;usb/usb_device_hid.c: 225:             break;
 14548     09E7  0008               	return
 14549     09E8                     i1l4298:
 14550                           
 14551                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 14552     09E8  304A               	movlw	low _idle_rate
 14553     09E9  0021               	movlb	1	; select bank1
 14554     09EA  00EB               	movwf	_inPipes^(0+128)	;volatile
 14555     09EB  3001               	movlw	high _idle_rate
 14556     09EC  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14557     09ED  3000               	movlw	0
 14558     09EE  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14559     09EF  3001               	movlw	1
 14560     09F0  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14561     09F1  30C1               	movlw	193
 14562     09F2  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14563                           
 14564                           ;usb/usb_device_hid.c: 231:             break;
 14565     09F3  0008               	return
 14566     09F4                     i1l4304:
 14567                           
 14568                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 14569     09F4  3080               	movlw	128
 14570     09F5  0021               	movlb	1	; select bank1
 14571     09F6  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14572                           
 14573                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 14574     09F7  0020               	movlb	0	; select bank0
 14575     09F8  0843               	movf	67,w	;volatile
 14576     09F9  0022               	movlb	2	; select bank2
 14577     09FA  00CA               	movwf	_idle_rate^(0+256)
 14578                           
 14579                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 14580     09FB  084A               	movf	_idle_rate^(0+256),w
 14581     09FC  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 14582     09FD  0020               	movlb	0	; select bank0
 14583     09FE  0842               	movf	66,w	;volatile
 14584     09FF  319B  2398         	fcall	_USBHIDCBSetIdleRateHandler
 14585                           
 14586                           ;usb/usb_device_hid.c: 236:             break;
 14587     0A01  0008               	return
 14588     0A02                     i1l4308:
 14589                           
 14590                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 14591     0A02  30E8               	movlw	low _active_protocol
 14592     0A03  0021               	movlb	1	; select bank1
 14593     0A04  00EB               	movwf	_inPipes^(0+128)	;volatile
 14594     0A05  3001               	movlw	high _active_protocol
 14595     0A06  00EC               	movwf	(_inPipes+1)^(0+128)	;volatile
 14596     0A07  3000               	movlw	0
 14597     0A08  00EF               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 14598     0A09  3001               	movlw	1
 14599     0A0A  00EE               	movwf	(_inPipes^(0+128)+3)	;volatile
 14600     0A0B  3081               	movlw	129
 14601     0A0C  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14602                           
 14603                           ;usb/usb_device_hid.c: 242:             break;
 14604     0A0D  0008               	return
 14605     0A0E                     i1l4314:
 14606                           
 14607                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 14608     0A0E  3080               	movlw	128
 14609     0A0F  0021               	movlb	1	; select bank1
 14610     0A10  00ED               	movwf	(_inPipes^(0+128)+2)	;volatile
 14611                           
 14612                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 14613     0A11  0020               	movlb	0	; select bank0
 14614     0A12  0842               	movf	66,w	;volatile
 14615     0A13  0023               	movlb	3	; select bank3
 14616     0A14  00E8               	movwf	_active_protocol^(0+384)
 14617                           
 14618                           ;usb/usb_device_hid.c: 246:             break;
 14619     0A15  0008               	return
 14620     0A16                     i1l4318:
 14621     0A16  0841               	movf	65,w	;volatile
 14622                           
 14623                           ; Switch size 1, requested type "simple"
 14624                           ; Number of cases is 6, Range of values is 1 to 11
 14625                           ; switch strategies available:
 14626                           ; Name         Instructions Cycles
 14627                           ; simple_byte           19    10 (average)
 14628                           ; direct_byte           31     9 (fixed)
 14629                           ; jumptable            263     9 (fixed)
 14630                           ;	Chosen strategy is simple_byte
 14631     0A17  3A01               	xorlw	1	; case 1
 14632     0A18  1903               	skipnz
 14633     0A19  2A2A               	goto	i1l764
 14634     0A1A  3A03               	xorlw	3	; case 2
 14635     0A1B  1903               	skipnz
 14636     0A1C  29E8               	goto	i1l4298
 14637     0A1D  3A01               	xorlw	1	; case 3
 14638     0A1E  1903               	skipnz
 14639     0A1F  2A02               	goto	i1l4308
 14640     0A20  3A0A               	xorlw	10	; case 9
 14641     0A21  1903               	skipnz
 14642     0A22  29E5               	goto	i1l4296
 14643     0A23  3A03               	xorlw	3	; case 10
 14644     0A24  1903               	skipnz
 14645     0A25  29F4               	goto	i1l4304
 14646     0A26  3A01               	xorlw	1	; case 11
 14647     0A27  1903               	skipnz
 14648     0A28  2A0E               	goto	i1l4314
 14649     0A29  2A2A               	goto	i1l764
 14650     0A2A                     i1l764:
 14651     0A2A  0008               	return
 14652     0A2B                     __end_of_USBCheckHIDRequest:
 14653                           
 14654                           	psect	text74
 14655     1BA5                     __ptext74:	
 14656 ;; *************** function _USBHIDCBSetReportHandler *****************
 14657 ;; Defined at:
 14658 ;;		line 539 in file "app_device_keyboard.c"
 14659 ;; Parameters:    Size  Location     Type
 14660 ;;		None
 14661 ;; Auto vars:     Size  Location     Type
 14662 ;;		None
 14663 ;; Return value:  Size  Location     Type
 14664 ;;                  1    wreg      void 
 14665 ;; Registers used:
 14666 ;;		wreg
 14667 ;; Tracked objects:
 14668 ;;		On entry : 1F/0
 14669 ;;		On exit  : 1F/2
 14670 ;;		Unchanged: 0/0
 14671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;Total ram usage:        0 bytes
 14677 ;; Hardware stack levels used: 1
 14678 ;; This function calls:
 14679 ;;		Nothing
 14680 ;; This function is called by:
 14681 ;;		_USBCheckHIDRequest
 14682 ;; This function uses a non-reentrant model
 14683 ;;
 14684                           
 14685     1BA5                     _USBHIDCBSetReportHandler:	
 14686                           ;psect for function _USBHIDCBSetReportHandler
 14687                           
 14688                           
 14689                           ;app_device_keyboard.c: 543:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 14693     1BA5  3048               	movlw	72
 14694     1BA6  0022               	movlb	2	; select bank2
 14695     1BA7  00A1               	movwf	_outPipes^(0+256)	;volatile
 14696     1BA8  3000               	movlw	0
 14697     1BA9  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 14698     1BAA  3008               	movlw	8
 14699     1BAB  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 14700     1BAC  301A               	movlw	high _USBHIDCBSetReportComplete
 14701     1BAD  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 14702     1BAE  30D9               	movlw	low _USBHIDCBSetReportComplete
 14703     1BAF  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 14704     1BB0  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 14705     1BB1  0008               	return
 14706     1BB2                     __end_of_USBHIDCBSetReportHandler:
 14707                           
 14708                           	psect	text75
 14709     1B98                     __ptext75:	
 14710 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 14711 ;; Defined at:
 14712 ;;		line 550 in file "app_device_keyboard.c"
 14713 ;; Parameters:    Size  Location     Type
 14714 ;;  reportID        1    wreg     unsigned char 
 14715 ;;  newIdleRate     1    0[COMMON] unsigned char 
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;  reportID        1    3[COMMON] unsigned char 
 14718 ;; Return value:  Size  Location     Type
 14719 ;;                  1    wreg      void 
 14720 ;; Registers used:
 14721 ;;		wreg, status,2, status,0
 14722 ;; Tracked objects:
 14723 ;;		On entry : 1F/0
 14724 ;;		On exit  : 1C/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14727 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;Total ram usage:        4 bytes
 14732 ;; Hardware stack levels used: 1
 14733 ;; This function calls:
 14734 ;;		Nothing
 14735 ;; This function is called by:
 14736 ;;		_USBCheckHIDRequest
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740     1B98                     _USBHIDCBSetIdleRateHandler:	
 14741                           ;psect for function _USBHIDCBSetIdleRateHandler
 14742                           
 14743                           
 14744                           ;incstack = 0
 14745                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 14746                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 14747     1B98  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 14748                           
 14749                           ;app_device_keyboard.c: 554:     if (reportID == 0) {
 14750     1B99  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 14751     1B9A  1D03               	btfss	3,2
 14752     1B9B  0008               	return
 14753                           
 14754                           ;app_device_keyboard.c: 555:         keyboardIdleRate = newIdleRate;
 14755     1B9C  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 14756     1B9D  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 14757     1B9E  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 14758     1B9F  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 14759     1BA0  0023               	movlb	3	; select bank3
 14760     1BA1  00CF               	movwf	_keyboardIdleRate^(0+384)
 14761     1BA2  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 14762     1BA3  00D0               	movwf	(_keyboardIdleRate+1)^(0+384)
 14763     1BA4  0008               	return
 14764     1BA5                     __end_of_USBHIDCBSetIdleRateHandler:
 14765                           
 14766                           	psect	text76
 14767     1242                     __ptext76:	
 14768 ;; *************** function _APP_KeyboardInit *****************
 14769 ;; Defined at:
 14770 ;;		line 309 in file "app_device_keyboard.c"
 14771 ;; Parameters:    Size  Location     Type
 14772 ;;		None
 14773 ;; Auto vars:     Size  Location     Type
 14774 ;;		None
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  1    wreg      void 
 14777 ;; Registers used:
 14778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14779 ;; Tracked objects:
 14780 ;;		On entry : 1F/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;Total ram usage:        0 bytes
 14789 ;; Hardware stack levels used: 1
 14790 ;; Hardware stack levels required when called: 2
 14791 ;; This function calls:
 14792 ;;		_USBEnableEndpoint
 14793 ;;		i1_GenericQueue_Init
 14794 ;;		i1_USBTransferOnePacket
 14795 ;; This function is called by:
 14796 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 14797 ;; This function uses a non-reentrant model
 14798 ;;
 14799                           
 14800     1242                     _APP_KeyboardInit:	
 14801                           ;psect for function _APP_KeyboardInit
 14802                           
 14803                           
 14804                           ;app_device_keyboard.c: 310:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 14805                           
 14806                           ;incstack = 0
 14807                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14808     1242  3030               	movlw	48
 14809     1243  00F0               	movwf	i1GenericQueue_Init@q
 14810     1244  3023               	movlw	35
 14811     1245  00F1               	movwf	i1GenericQueue_Init@q+1
 14812     1246  3001               	movlw	1
 14813     1247  00F2               	movwf	i1GenericQueue_Init@element_size
 14814     1248  3000               	movlw	0
 14815     1249  00F3               	movwf	i1GenericQueue_Init@element_size+1
 14816     124A  319D  25D2  3192   	fcall	i1_GenericQueue_Init
 14817                           
 14818                           ;app_device_keyboard.c: 311:     keyboard.modifiers.value = 0;
 14819     124D  308F               	movlw	143
 14820     124E  0086               	movwf	6
 14821     124F  3023               	movlw	35
 14822     1250  0087               	movwf	7
 14823     1251  0181               	clrf	1
 14824                           
 14825                           ;app_device_keyboard.c: 314:     keyboard.lastINTransmission = 0;
 14826     1252  302C               	movlw	44
 14827     1253  0086               	movwf	6
 14828     1254  3023               	movlw	35
 14829     1255  0087               	movwf	7
 14830     1256  3000               	movlw	0
 14831     1257  3FC0               	movwi [0]fsr1
 14832     1258  3FC1               	movwi [1]fsr1
 14833                           
 14834                           ;app_device_keyboard.c: 317:     keyboardIdleRate = 250;
 14835     1259  30FA               	movlw	250
 14836     125A  0023               	movlb	3	; select bank3
 14837     125B  00CF               	movwf	_keyboardIdleRate^(0+384)
 14838     125C  3000               	movlw	0
 14839     125D  00D0               	movwf	(_keyboardIdleRate^(0+384)+1)
 14840     125E                     i1l916:	
 14841                           ;app_device_keyboard.c: 324:     }
 14842                           
 14843                           ;app_device_keyboard.c: 322:     while (OldSOFCount != SOFCounter) {
 14844                           
 14845                           
 14846                           ;app_device_keyboard.c: 322:     while (OldSOFCount != SOFCounter) {
 14847     125E  0020               	movlb	0	; select bank0
 14848     125F  0866               	movf	_SOFCounter+1,w	;volatile
 14849     1260  0023               	movlb	3	; select bank3
 14850     1261  064E               	xorwf	(_OldSOFCount+1)^(0+384),w
 14851     1262  1D03               	skipz
 14852     1263  2A68               	goto	u328_25
 14853     1264  0020               	movlb	0	; select bank0
 14854     1265  0865               	movf	_SOFCounter,w	;volatile
 14855     1266  0023               	movlb	3	; select bank3
 14856     1267  064D               	xorwf	_OldSOFCount^(0+384),w
 14857     1268                     u328_25:
 14858     1268  1903               	btfsc	3,2
 14859     1269  2A73               	goto	i1l4330
 14860                           
 14861                           ;app_device_keyboard.c: 323:         OldSOFCount = SOFCounter;
 14862     126A  0020               	movlb	0	; select bank0
 14863     126B  0866               	movf	_SOFCounter+1,w	;volatile
 14864     126C  0023               	movlb	3	; select bank3
 14865     126D  00CE               	movwf	(_OldSOFCount+1)^(0+384)
 14866     126E  0020               	movlb	0	; select bank0
 14867     126F  0865               	movf	_SOFCounter,w	;volatile
 14868     1270  0023               	movlb	3	; select bank3
 14869     1271  00CD               	movwf	_OldSOFCount^(0+384)
 14870     1272  2A5E               	goto	i1l916
 14871     1273                     i1l4330:
 14872                           
 14873                           ;app_device_keyboard.c: 327:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 14874     1273  301E               	movlw	30
 14875     1274  00F7               	movwf	USBEnableEndpoint@options
 14876     1275  3001               	movlw	1
 14877     1276  319D  25B2  3192   	fcall	_USBEnableEndpoint
 14878                           
 14879                           ;app_device_keyboard.c: 330:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 14880     1279  01F0               	clrf	i1USBTransferOnePacket@dir
 14881     127A  3020               	movlw	32
 14882     127B  00F1               	movwf	i1USBTransferOnePacket@data
 14883     127C  3001               	movlw	1
 14884     127D  00F2               	movwf	i1USBTransferOnePacket@data+1
 14885     127E  01F3               	clrf	i1USBTransferOnePacket@len
 14886     127F  0AF3               	incf	i1USBTransferOnePacket@len,f
 14887     1280  3001               	movlw	1
 14888     1281  318A  222B         	fcall	i1_USBTransferOnePacket
 14889     1283  302C               	movlw	44
 14890     1284  0086               	movwf	6
 14891     1285  3023               	movlw	35
 14892     1286  0087               	movwf	7
 14893     1287  3142               	addfsr 1,2
 14894     1288  0870               	movf	?i1_USBTransferOnePacket,w
 14895     1289  3FC0               	movwi [0]fsr1
 14896     128A  0871               	movf	?i1_USBTransferOnePacket+1,w
 14897     128B  3FC1               	movwi [1]fsr1
 14898     128C  0008               	return
 14899     128D                     __end_of_APP_KeyboardInit:
 14900                           
 14901                           	psect	text77
 14902     0A2B                     __ptext77:	
 14903 ;; *************** function i1_USBTransferOnePacket *****************
 14904 ;; Defined at:
 14905 ;;		line 999 in file "usb/usb_device.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;  ep              1    wreg     unsigned char 
 14908 ;;  dir             1    0[COMMON] unsigned char 
 14909 ;;  data            2    1[COMMON] PTR unsigned char 
 14910 ;;		 -> inputReport(8), outputReport(1), 
 14911 ;;  len             1    3[COMMON] unsigned char 
 14912 ;; Auto vars:     Size  Location     Type
 14913 ;;  ep              1    8[COMMON] unsigned char 
 14914 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 14915 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 14916 ;; Return value:  Size  Location     Type
 14917 ;;                  2    0[COMMON] PTR void 
 14918 ;; Registers used:
 14919 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/3
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14926 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14927 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14928 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;Total ram usage:       11 bytes
 14930 ;; Hardware stack levels used: 1
 14931 ;; This function calls:
 14932 ;;		Nothing
 14933 ;; This function is called by:
 14934 ;;		_APP_KeyboardInit
 14935 ;; This function uses a non-reentrant model
 14936 ;;
 14937                           
 14938     0A2B                     i1_USBTransferOnePacket:	
 14939                           ;psect for function i1_USBTransferOnePacket
 14940                           
 14941                           
 14942                           ;incstack = 0
 14943                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 14944                           ;i1USBTransferOnePacket@ep stored from wreg
 14945     0A2B  00F8               	movwf	i1USBTransferOnePacket@ep
 14946                           
 14947                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 14948     0A2C  0870               	movf	i1USBTransferOnePacket@dir,w
 14949     0A2D  1903               	btfsc	3,2
 14950     0A2E  2A37               	goto	i1l4240
 14951                           
 14952                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 14953     0A2F  3578               	lslf	i1USBTransferOnePacket@ep,w
 14954     0A30  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 14955     0A31  0086               	movwf	6
 14956     0A32  0187               	clrf	7
 14957     0A33  3F40               	moviw [0]fsr1
 14958     0A34  00F9               	movwf	i1USBTransferOnePacket@handle
 14959     0A35  3F41               	moviw [1]fsr1
 14960     0A36  2A3F               	goto	L16
 14961     0A37                     i1l4240:	
 14962                           ;usb/usb_device.c: 1008:     }
 14963                           
 14964                           
 14965                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 14966     0A37  3578               	lslf	i1USBTransferOnePacket@ep,w
 14967     0A38  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 14968     0A39  0086               	movwf	6
 14969     0A3A  3001               	movlw	1	; select bank2/3
 14970     0A3B  0087               	movwf	7
 14971     0A3C  3F40               	moviw [0]fsr1
 14972     0A3D  00F9               	movwf	i1USBTransferOnePacket@handle
 14973     0A3E  3F41               	moviw [1]fsr1
 14974     0A3F                     L16:
 14975     0A3F  00FA               	movwf	i1USBTransferOnePacket@handle+1
 14976                           
 14977                           ;usb/usb_device.c: 1017:     if(handle == 0)
 14978     0A40  0879               	movf	i1USBTransferOnePacket@handle,w
 14979     0A41  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 14980     0A42  1D03               	btfss	3,2
 14981     0A43  2A47               	goto	i1l4248
 14982                           
 14983                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 14984     0A44  01F0               	clrf	?i1_USBTransferOnePacket
 14985     0A45  01F1               	clrf	?i1_USBTransferOnePacket+1
 14986     0A46  0008               	return
 14987     0A47                     i1l4248:
 14988                           
 14989                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 14990     0A47  30FF               	movlw	255
 14991     0A48  0571               	andwf	i1USBTransferOnePacket@data,w
 14992     0A49  00F4               	movwf	??i1_USBTransferOnePacket
 14993     0A4A  307F               	movlw	127
 14994     0A4B  0572               	andwf	i1USBTransferOnePacket@data+1,w
 14995     0A4C  00F5               	movwf	??i1_USBTransferOnePacket+1
 14996     0A4D  0879               	movf	i1USBTransferOnePacket@handle,w
 14997     0A4E  0086               	movwf	6
 14998     0A4F  087A               	movf	i1USBTransferOnePacket@handle+1,w
 14999     0A50  0087               	movwf	7
 15000     0A51  3142               	addfsr 1,2
 15001     0A52  0874               	movf	??i1_USBTransferOnePacket,w
 15002     0A53  3FC0               	movwi [0]fsr1
 15003     0A54  0875               	movf	??i1_USBTransferOnePacket+1,w
 15004     0A55  3FC1               	movwi [1]fsr1
 15005                           
 15006                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 15007     0A56  0879               	movf	i1USBTransferOnePacket@handle,w
 15008     0A57  3E01               	addlw	1
 15009     0A58  00F4               	movwf	??i1_USBTransferOnePacket
 15010     0A59  3000               	movlw	0
 15011     0A5A  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 15012     0A5B  00F5               	movwf	??i1_USBTransferOnePacket+1
 15013     0A5C  0874               	movf	??i1_USBTransferOnePacket,w
 15014     0A5D  0086               	movwf	6
 15015     0A5E  0875               	movf	??i1_USBTransferOnePacket+1,w
 15016     0A5F  0087               	movwf	7
 15017     0A60  0873               	movf	i1USBTransferOnePacket@len,w
 15018     0A61  0081               	movwf	1
 15019                           
 15020                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 15021     0A62  3040               	movlw	64
 15022     0A63  00F4               	movwf	??i1_USBTransferOnePacket
 15023     0A64  0879               	movf	i1USBTransferOnePacket@handle,w
 15024     0A65  0086               	movwf	6
 15025     0A66  087A               	movf	i1USBTransferOnePacket@handle+1,w
 15026     0A67  0087               	movwf	7
 15027     0A68  0874               	movf	??i1_USBTransferOnePacket,w
 15028     0A69  0581               	andwf	1,f
 15029                           
 15030                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 15031     0A6A  0879               	movf	i1USBTransferOnePacket@handle,w
 15032     0A6B  0086               	movwf	6
 15033     0A6C  087A               	movf	i1USBTransferOnePacket@handle+1,w
 15034     0A6D  0087               	movwf	7
 15035     0A6E  1581               	bsf	1,3
 15036                           
 15037                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 15038     0A6F  0879               	movf	i1USBTransferOnePacket@handle,w
 15039     0A70  0086               	movwf	6
 15040     0A71  087A               	movf	i1USBTransferOnePacket@handle+1,w
 15041     0A72  0087               	movwf	7
 15042     0A73  1781               	bsf	1,7
 15043                           
 15044                           ;usb/usb_device.c: 1040:     if(dir != 0)
 15045     0A74  0870               	movf	i1USBTransferOnePacket@dir,w
 15046     0A75  1903               	btfsc	3,2
 15047     0A76  2A8E               	goto	i1l4258
 15048                           
 15049                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 15050     0A77  3578               	lslf	i1USBTransferOnePacket@ep,w
 15051     0A78  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 15052     0A79  0086               	movwf	6
 15053     0A7A  0187               	clrf	7
 15054     0A7B  3F40               	moviw [0]fsr1
 15055     0A7C  00F4               	movwf	??i1_USBTransferOnePacket
 15056     0A7D  3F41               	moviw [1]fsr1
 15057     0A7E  00F5               	movwf	??i1_USBTransferOnePacket+1
 15058     0A7F  3004               	movlw	4
 15059     0A80  0674               	xorwf	??i1_USBTransferOnePacket,w
 15060     0A81  00F6               	movwf	??i1_USBTransferOnePacket+2
 15061     0A82  3000               	movlw	0
 15062     0A83  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 15063     0A84  00F7               	movwf	??i1_USBTransferOnePacket+3
 15064     0A85  3578               	lslf	i1USBTransferOnePacket@ep,w
 15065     0A86  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 15066     0A87  0086               	movwf	6
 15067     0A88  0187               	clrf	7
 15068     0A89  0876               	movf	??i1_USBTransferOnePacket+2,w
 15069     0A8A  3FC0               	movwi [0]fsr1
 15070     0A8B  0877               	movf	??i1_USBTransferOnePacket+3,w
 15071     0A8C  3FC1               	movwi [1]fsr1
 15072                           
 15073                           ;usb/usb_device.c: 1044:     }
 15074     0A8D  2AA6               	goto	i1l4260
 15075     0A8E                     i1l4258:
 15076                           
 15077                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 15078     0A8E  3578               	lslf	i1USBTransferOnePacket@ep,w
 15079     0A8F  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 15080     0A90  0086               	movwf	6
 15081     0A91  3001               	movlw	1	; select bank2/3
 15082     0A92  0087               	movwf	7
 15083     0A93  3F40               	moviw [0]fsr1
 15084     0A94  00F4               	movwf	??i1_USBTransferOnePacket
 15085     0A95  3F41               	moviw [1]fsr1
 15086     0A96  00F5               	movwf	??i1_USBTransferOnePacket+1
 15087     0A97  3004               	movlw	4
 15088     0A98  0674               	xorwf	??i1_USBTransferOnePacket,w
 15089     0A99  00F6               	movwf	??i1_USBTransferOnePacket+2
 15090     0A9A  3000               	movlw	0
 15091     0A9B  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 15092     0A9C  00F7               	movwf	??i1_USBTransferOnePacket+3
 15093     0A9D  3578               	lslf	i1USBTransferOnePacket@ep,w
 15094     0A9E  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 15095     0A9F  0086               	movwf	6
 15096     0AA0  3001               	movlw	1	; select bank2/3
 15097     0AA1  0087               	movwf	7
 15098     0AA2  0876               	movf	??i1_USBTransferOnePacket+2,w
 15099     0AA3  3FC0               	movwi [0]fsr1
 15100     0AA4  0877               	movf	??i1_USBTransferOnePacket+3,w
 15101     0AA5  3FC1               	movwi [1]fsr1
 15102     0AA6                     i1l4260:
 15103                           
 15104                           ;usb/usb_device.c: 1050:     return (void*)handle;
 15105     0AA6  087A               	movf	i1USBTransferOnePacket@handle+1,w
 15106     0AA7  00F1               	movwf	?i1_USBTransferOnePacket+1
 15107     0AA8  0879               	movf	i1USBTransferOnePacket@handle,w
 15108     0AA9  00F0               	movwf	?i1_USBTransferOnePacket
 15109     0AAA  0008               	return
 15110     0AAB                     __end_ofi1_USBTransferOnePacket:
 15111                           
 15112                           	psect	text78
 15113     1DD2                     __ptext78:	
 15114 ;; *************** function i1_GenericQueue_Init *****************
 15115 ;; Defined at:
 15116 ;;		line 4 in file "generic_queue.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  q               2    0[COMMON] PTR struct .
 15119 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15120 ;;  element_size    2    2[COMMON] unsigned int 
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;		None
 15123 ;; Return value:  Size  Location     Type
 15124 ;;                  1    wreg      void 
 15125 ;; Registers used:
 15126 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15127 ;; Tracked objects:
 15128 ;;		On entry : 1F/0
 15129 ;;		On exit  : 1F/0
 15130 ;;		Unchanged: 1F/0
 15131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;Total ram usage:        4 bytes
 15137 ;; Hardware stack levels used: 1
 15138 ;; This function calls:
 15139 ;;		Nothing
 15140 ;; This function is called by:
 15141 ;;		_APP_KeyboardInit
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145     1DD2                     i1_GenericQueue_Init:	
 15146                           ;psect for function i1_GenericQueue_Init
 15147                           
 15148                           
 15149                           ;generic_queue.c: 5:     q->element_size = element_size;
 15150                           
 15151                           ;incstack = 0
 15152                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 15153     1DD2  0870               	movf	i1GenericQueue_Init@q,w
 15154     1DD3  3E5A               	addlw	90
 15155     1DD4  0086               	movwf	6
 15156     1DD5  3000               	movlw	0
 15157     1DD6  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 15158     1DD7  0087               	movwf	7
 15159     1DD8  0872               	movf	i1GenericQueue_Init@element_size,w
 15160     1DD9  3FC0               	movwi [0]fsr1
 15161     1DDA  0873               	movf	i1GenericQueue_Init@element_size+1,w
 15162     1DDB  3FC1               	movwi [1]fsr1
 15163                           
 15164                           ;generic_queue.c: 6:     q->front = 0;
 15165     1DDC  0870               	movf	i1GenericQueue_Init@q,w
 15166     1DDD  3E5C               	addlw	92
 15167     1DDE  0086               	movwf	6
 15168     1DDF  3000               	movlw	0
 15169     1DE0  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 15170     1DE1  0087               	movwf	7
 15171     1DE2  0181               	clrf	1
 15172                           
 15173                           ;generic_queue.c: 7:     q->rear = 0;
 15174     1DE3  0870               	movf	i1GenericQueue_Init@q,w
 15175     1DE4  3E5D               	addlw	93
 15176     1DE5  0086               	movwf	6
 15177     1DE6  3000               	movlw	0
 15178     1DE7  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 15179     1DE8  0087               	movwf	7
 15180     1DE9  0181               	clrf	1
 15181                           
 15182                           ;generic_queue.c: 8:     q->size = 0;
 15183     1DEA  0870               	movf	i1GenericQueue_Init@q,w
 15184     1DEB  3E5E               	addlw	94
 15185     1DEC  0086               	movwf	6
 15186     1DED  3000               	movlw	0
 15187     1DEE  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 15188     1DEF  0087               	movwf	7
 15189     1DF0  0181               	clrf	1
 15190     1DF1  0008               	return
 15191     1DF2                     __end_ofi1_GenericQueue_Init:
 15192                           
 15193                           	psect	text79
 15194     1DB2                     __ptext79:	
 15195 ;; *************** function _USBEnableEndpoint *****************
 15196 ;; Defined at:
 15197 ;;		line 882 in file "usb/usb_device.c"
 15198 ;; Parameters:    Size  Location     Type
 15199 ;;  ep              1    wreg     unsigned char 
 15200 ;;  options         1    7[COMMON] unsigned char 
 15201 ;; Auto vars:     Size  Location     Type
 15202 ;;  ep              1   12[COMMON] unsigned char 
 15203 ;;  p               2   10[COMMON] PTR unsigned char 
 15204 ;;		 -> UEP0(1), 
 15205 ;; Return value:  Size  Location     Type
 15206 ;;                  1    wreg      void 
 15207 ;; Registers used:
 15208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15209 ;; Tracked objects:
 15210 ;;		On entry : 1F/3
 15211 ;;		On exit  : 0/0
 15212 ;;		Unchanged: 0/0
 15213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15214 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;Total ram usage:        6 bytes
 15219 ;; Hardware stack levels used: 1
 15220 ;; Hardware stack levels required when called: 1
 15221 ;; This function calls:
 15222 ;;		_USBConfigureEndpoint
 15223 ;; This function is called by:
 15224 ;;		_APP_KeyboardInit
 15225 ;; This function uses a non-reentrant model
 15226 ;;
 15227                           
 15228     1DB2                     _USBEnableEndpoint:	
 15229                           ;psect for function _USBEnableEndpoint
 15230                           
 15231                           
 15232                           ;incstack = 0
 15233                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15234                           ;USBEnableEndpoint@ep stored from wreg
 15235     1DB2  00FC               	movwf	USBEnableEndpoint@ep
 15236                           
 15237                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 15238     1DB3  1D77               	btfss	USBEnableEndpoint@options,2
 15239     1DB4  2DBA               	goto	i1l4216
 15240                           
 15241                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 15242     1DB5  01F0               	clrf	USBConfigureEndpoint@direction
 15243     1DB6  087C               	movf	USBEnableEndpoint@ep,w
 15244     1DB7  3190  20AD  319D   	fcall	_USBConfigureEndpoint
 15245     1DBA                     i1l4216:
 15246                           
 15247                           ;usb/usb_device.c: 892:     if(options & 0x02)
 15248     1DBA  1CF7               	btfss	USBEnableEndpoint@options,1
 15249     1DBB  2DC1               	goto	i1l4220
 15250                           
 15251                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 15252     1DBC  01F0               	clrf	USBConfigureEndpoint@direction
 15253     1DBD  0AF0               	incf	USBConfigureEndpoint@direction,f
 15254     1DBE  087C               	movf	USBEnableEndpoint@ep,w
 15255     1DBF  3190  20AD         	fcall	_USBConfigureEndpoint
 15256     1DC1                     i1l4220:
 15257                           
 15258                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 15259     1DC1  087C               	movf	USBEnableEndpoint@ep,w
 15260     1DC2  3E98               	addlw	152
 15261     1DC3  00F8               	movwf	??_USBEnableEndpoint
 15262     1DC4  01F9               	clrf	??_USBEnableEndpoint+1
 15263     1DC5  300E               	movlw	14
 15264     1DC6  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 15265     1DC7  0878               	movf	??_USBEnableEndpoint,w
 15266     1DC8  00FA               	movwf	USBEnableEndpoint@p
 15267     1DC9  0879               	movf	??_USBEnableEndpoint+1,w
 15268     1DCA  00FB               	movwf	USBEnableEndpoint@p+1
 15269                           
 15270                           ;usb/usb_device.c: 905:     *p = options;
 15271     1DCB  087A               	movf	USBEnableEndpoint@p,w
 15272     1DCC  0086               	movwf	6
 15273     1DCD  087B               	movf	USBEnableEndpoint@p+1,w
 15274     1DCE  0087               	movwf	7
 15275     1DCF  0877               	movf	USBEnableEndpoint@options,w
 15276     1DD0  0081               	movwf	1
 15277     1DD1  0008               	return
 15278     1DD2                     __end_of_USBEnableEndpoint:
 15279                           
 15280                           	psect	text80
 15281     10AD                     __ptext80:	
 15282 ;; *************** function _USBConfigureEndpoint *****************
 15283 ;; Defined at:
 15284 ;;		line 1547 in file "usb/usb_device.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;  EPNum           1    wreg     unsigned char 
 15287 ;;  direction       1    0[COMMON] unsigned char 
 15288 ;; Auto vars:     Size  Location     Type
 15289 ;;  EPNum           1    5[COMMON] unsigned char 
 15290 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 15291 ;;		 -> BDT(32), 
 15292 ;; Return value:  Size  Location     Type
 15293 ;;                  1    wreg      void 
 15294 ;; Registers used:
 15295 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15296 ;; Tracked objects:
 15297 ;;		On entry : 0/3
 15298 ;;		On exit  : 0/0
 15299 ;;		Unchanged: 0/0
 15300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15301 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;Total ram usage:        7 bytes
 15306 ;; Hardware stack levels used: 1
 15307 ;; This function calls:
 15308 ;;		Nothing
 15309 ;; This function is called by:
 15310 ;;		_USBEnableEndpoint
 15311 ;; This function uses a non-reentrant model
 15312 ;;
 15313                           
 15314     10AD                     _USBConfigureEndpoint:	
 15315                           ;psect for function _USBConfigureEndpoint
 15316                           
 15317                           
 15318                           ;incstack = 0
 15319                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 15320                           ;USBConfigureEndpoint@EPNum stored from wreg
 15321     10AD  00F5               	movwf	USBConfigureEndpoint@EPNum
 15322                           
 15323                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 15324     10AE  3020               	movlw	32
 15325     10AF  00F6               	movwf	USBConfigureEndpoint@handle
 15326                           
 15327                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 15328     10B0  0870               	movf	USBConfigureEndpoint@direction,w
 15329     10B1  00F1               	movwf	??_USBConfigureEndpoint
 15330     10B2  3001               	movlw	1
 15331     10B3                     u313_25:
 15332     10B3  35F1               	lslf	??_USBConfigureEndpoint,f
 15333     10B4  0B89               	decfsz	9,f
 15334     10B5  28B3               	goto	u313_25
 15335     10B6  0875               	movf	USBConfigureEndpoint@EPNum,w
 15336     10B7  00F2               	movwf	??_USBConfigureEndpoint+1
 15337     10B8  3001               	movlw	1
 15338     10B9                     u314_25:
 15339     10B9  35F2               	lslf	??_USBConfigureEndpoint+1,f
 15340     10BA  3EFF               	addlw	-1
 15341     10BB  1D03               	skipz
 15342     10BC  28B9               	goto	u314_25
 15343     10BD  3572               	lslf	??_USBConfigureEndpoint+1,w
 15344     10BE  0771               	addwf	??_USBConfigureEndpoint,w
 15345     10BF  00F3               	movwf	??_USBConfigureEndpoint+2
 15346     10C0  3001               	movlw	1
 15347     10C1                     u315_25:
 15348     10C1  35F3               	lslf	??_USBConfigureEndpoint+2,f
 15349     10C2  3EFF               	addlw	-1
 15350     10C3  1D03               	skipz
 15351     10C4  28C1               	goto	u315_25
 15352     10C5  3573               	lslf	??_USBConfigureEndpoint+2,w
 15353     10C6  00F4               	movwf	??_USBConfigureEndpoint+3
 15354     10C7  0874               	movf	??_USBConfigureEndpoint+3,w
 15355     10C8  07F6               	addwf	USBConfigureEndpoint@handle,f
 15356                           
 15357                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 15358     10C9  0876               	movf	USBConfigureEndpoint@handle,w
 15359     10CA  0086               	movwf	6
 15360     10CB  0187               	clrf	7
 15361     10CC  1381               	bcf	1,7
 15362                           
 15363                           ;usb/usb_device.c: 1561:     if(direction == 0)
 15364     10CD  0870               	movf	USBConfigureEndpoint@direction,w
 15365     10CE  1D03               	btfss	3,2
 15366     10CF  28DA               	goto	i1l4206
 15367                           
 15368                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 15369     10D0  3575               	lslf	USBConfigureEndpoint@EPNum,w
 15370     10D1  3E28               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 15371     10D2  0086               	movwf	6
 15372     10D3  3001               	movlw	1	; select bank2/3
 15373     10D4  0087               	movwf	7
 15374     10D5  0876               	movf	USBConfigureEndpoint@handle,w
 15375     10D6  3FC0               	movwi [0]fsr1
 15376     10D7  3000               	movlw	0
 15377     10D8  3FC1               	movwi [1]fsr1
 15378                           
 15379                           ;usb/usb_device.c: 1564:     }
 15380     10D9  28E2               	goto	i1l4208
 15381     10DA                     i1l4206:
 15382                           
 15383                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 15384     10DA  3575               	lslf	USBConfigureEndpoint@EPNum,w
 15385     10DB  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 15386     10DC  0086               	movwf	6
 15387     10DD  0187               	clrf	7
 15388     10DE  0876               	movf	USBConfigureEndpoint@handle,w
 15389     10DF  3FC0               	movwi [0]fsr1
 15390     10E0  3000               	movlw	0
 15391     10E1  3FC1               	movwi [1]fsr1
 15392     10E2                     i1l4208:
 15393                           
 15394                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 15395     10E2  0876               	movf	USBConfigureEndpoint@handle,w
 15396     10E3  0086               	movwf	6
 15397     10E4  0187               	clrf	7
 15398     10E5  1301               	bcf	1,6
 15399                           
 15400                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 15401     10E6  0876               	movf	USBConfigureEndpoint@handle,w
 15402     10E7  3E04               	addlw	4
 15403     10E8  0086               	movwf	6
 15404     10E9  0187               	clrf	7
 15405     10EA  1701               	bsf	1,6
 15406     10EB  0008               	return
 15407     10EC                     __end_of_USBConfigureEndpoint:
 15408                           
 15409                           	psect	text81
 15410     1F89                     __ptext81:	
 15411 ;; *************** function _USBCtrlTrfOutHandler *****************
 15412 ;; Defined at:
 15413 ;;		line 2545 in file "usb/usb_device.c"
 15414 ;; Parameters:    Size  Location     Type
 15415 ;;		None
 15416 ;; Auto vars:     Size  Location     Type
 15417 ;;		None
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  1    wreg      void 
 15420 ;; Registers used:
 15421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15422 ;; Tracked objects:
 15423 ;;		On entry : 1F/0
 15424 ;;		On exit  : 1D/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;Total ram usage:        4 bytes
 15432 ;; Hardware stack levels used: 1
 15433 ;; Hardware stack levels required when called: 4
 15434 ;; This function calls:
 15435 ;;		_USBCtrlTrfRxService
 15436 ;; This function is called by:
 15437 ;;		_USBCtrlEPService
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441     1F89                     _USBCtrlTrfOutHandler:	
 15442                           ;psect for function _USBCtrlTrfOutHandler
 15443                           
 15444                           
 15445                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 15446                           
 15447                           ;incstack = 0
 15448                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15449     1F89  3002               	movlw	2
 15450     1F8A  066A               	xorwf	_controlTransferState,w	;volatile
 15451     1F8B  1D03               	btfss	3,2
 15452     1F8C  2F90               	goto	i1l5194
 15453                           
 15454                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 15455     1F8D  318D  2586         	fcall	_USBCtrlTrfRxService
 15456                           
 15457                           ;usb/usb_device.c: 2550:     }
 15458     1F8F  0008               	return
 15459     1F90                     i1l5194:
 15460                           
 15461                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 15462     1F90  01EA               	clrf	_controlTransferState	;volatile
 15463                           
 15464                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 15465     1F91  0022               	movlb	2	; select bank2
 15466     1F92  0841               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 15467     1F93  1D03               	btfss	3,2
 15468     1F94  2FC1               	goto	i1l5206
 15469                           
 15470                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 15471     1F95  0020               	movlb	0	; select bank0
 15472     1F96  0867               	movf	_pBDTEntryEP0OutNext,w
 15473     1F97  3E01               	addlw	1
 15474     1F98  00FA               	movwf	??_USBCtrlTrfOutHandler
 15475     1F99  3000               	movlw	0
 15476     1F9A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15477     1F9B  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15478     1F9C  087A               	movf	??_USBCtrlTrfOutHandler,w
 15479     1F9D  0086               	movwf	6
 15480     1F9E  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 15481     1F9F  0087               	movwf	7
 15482     1FA0  3008               	movlw	8
 15483     1FA1  0081               	movwf	1
 15484                           
 15485                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 15486     1FA2  3040               	movlw	64
 15487     1FA3  00FA               	movwf	??_USBCtrlTrfOutHandler
 15488     1FA4  3000               	movlw	0
 15489     1FA5  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 15490     1FA6  30FF               	movlw	255
 15491     1FA7  057A               	andwf	??_USBCtrlTrfOutHandler,w
 15492     1FA8  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 15493     1FA9  307F               	movlw	127
 15494     1FAA  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 15495     1FAB  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 15496     1FAC  0867               	movf	_pBDTEntryEP0OutNext,w
 15497     1FAD  0086               	movwf	6
 15498     1FAE  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15499     1FAF  0087               	movwf	7
 15500     1FB0  3142               	addfsr 1,2
 15501     1FB1  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 15502     1FB2  3FC0               	movwi [0]fsr1
 15503     1FB3  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 15504     1FB4  3FC1               	movwi [1]fsr1
 15505                           
 15506                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 15507     1FB5  0867               	movf	_pBDTEntryEP0OutNext,w
 15508     1FB6  0086               	movwf	6
 15509     1FB7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15510     1FB8  0087               	movwf	7
 15511     1FB9  300C               	movlw	12
 15512     1FBA  0081               	movwf	1
 15513                           
 15514                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15515     1FBB  0867               	movf	_pBDTEntryEP0OutNext,w
 15516     1FBC  0086               	movwf	6
 15517     1FBD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15518     1FBE  0087               	movwf	7
 15519     1FBF  1781               	bsf	1,7
 15520                           
 15521                           ;usb/usb_device.c: 2568:         }
 15522     1FC0  0008               	return
 15523     1FC1                     i1l5206:
 15524                           
 15525                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 15526     1FC1  01C1               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15527     1FC2  0008               	return
 15528     1FC3                     __end_of_USBCtrlTrfOutHandler:
 15529                           
 15530                           	psect	text82
 15531     0D86                     __ptext82:	
 15532 ;; *************** function _USBCtrlTrfRxService *****************
 15533 ;; Defined at:
 15534 ;;		line 1856 in file "usb/usb_device.c"
 15535 ;; Parameters:    Size  Location     Type
 15536 ;;		None
 15537 ;; Auto vars:     Size  Location     Type
 15538 ;;  byteToRead      1    9[COMMON] unsigned char 
 15539 ;;  i               1    8[COMMON] unsigned char 
 15540 ;; Return value:  Size  Location     Type
 15541 ;;                  1    wreg      void 
 15542 ;; Registers used:
 15543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15544 ;; Tracked objects:
 15545 ;;		On entry : 1F/0
 15546 ;;		On exit  : 1D/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15551 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15553 ;;Total ram usage:        6 bytes
 15554 ;; Hardware stack levels used: 1
 15555 ;; Hardware stack levels required when called: 3
 15556 ;; This function calls:
 15557 ;;		_USBCtrlEPAllowStatusStage
 15558 ;;		_USBHIDCBSetReportComplete
 15559 ;; This function is called by:
 15560 ;;		_USBCtrlTrfOutHandler
 15561 ;; This function uses a non-reentrant model
 15562 ;;
 15563                           
 15564     0D86                     _USBCtrlTrfRxService:	
 15565                           ;psect for function _USBCtrlTrfRxService
 15566                           
 15567                           
 15568                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 15569                           
 15570                           ;incstack = 0
 15571                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15572     0D86  086B               	movf	_pBDTEntryEP0OutCurrent,w
 15573     0D87  0086               	movwf	6
 15574     0D88  0187               	clrf	7
 15575     0D89  3F41               	moviw [1]fsr1
 15576     0D8A  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15577                           
 15578                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 15579     0D8B  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15580     0D8C  00F4               	movwf	??_USBCtrlTrfRxService
 15581     0D8D  01F5               	clrf	??_USBCtrlTrfRxService+1
 15582     0D8E  0875               	movf	??_USBCtrlTrfRxService+1,w
 15583     0D8F  0022               	movlb	2	; select bank2
 15584     0D90  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15585     0D91  1D03               	skipz
 15586     0D92  2D95               	goto	u410_25
 15587     0D93  0874               	movf	??_USBCtrlTrfRxService,w
 15588     0D94  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 15589     0D95                     u410_25:
 15590     0D95  1803               	skipnc
 15591     0D96  2D99               	goto	i1l594
 15592                           
 15593                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 15594     0D97  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15595     0D98  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 15596     0D99                     i1l594:	
 15597                           ;usb/usb_device.c: 1872:     }
 15598                           
 15599                           
 15600                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 15601     0D99  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15602     0D9A  00F4               	movwf	??_USBCtrlTrfRxService
 15603     0D9B  01F5               	clrf	??_USBCtrlTrfRxService+1
 15604     0D9C  0874               	movf	??_USBCtrlTrfRxService,w
 15605     0D9D  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 15606     0D9E  0875               	movf	??_USBCtrlTrfRxService+1,w
 15607     0D9F  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 15608                           
 15609                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 15610     0DA0  01F8               	clrf	USBCtrlTrfRxService@i
 15611     0DA1                     i1l4900:
 15612     0DA1  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 15613     0DA2  0278               	subwf	USBCtrlTrfRxService@i,w
 15614     0DA3  1803               	btfsc	3,0
 15615     0DA4  2DB7               	goto	i1l4902
 15616                           
 15617                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 15618     0DA5  0821               	movf	_outPipes^(0+256),w	;volatile
 15619     0DA6  0086               	movwf	6
 15620     0DA7  0187               	clrf	7
 15621     0DA8  0878               	movf	USBCtrlTrfRxService@i,w
 15622     0DA9  3E48               	addlw	72
 15623     0DAA  0084               	movwf	4
 15624     0DAB  0185               	clrf	5
 15625     0DAC  0800               	movf	0,w
 15626     0DAD  0081               	movwf	1
 15627     0DAE  3001               	movlw	1
 15628     0DAF  00F4               	movwf	??_USBCtrlTrfRxService
 15629     0DB0  0874               	movf	??_USBCtrlTrfRxService,w
 15630     0DB1  07A1               	addwf	_outPipes^(0+256),f	;volatile
 15631                           
 15632                           ;usb/usb_device.c: 1881:     }
 15633     0DB2  3001               	movlw	1
 15634     0DB3  00F4               	movwf	??_USBCtrlTrfRxService
 15635     0DB4  0874               	movf	??_USBCtrlTrfRxService,w
 15636     0DB5  07F8               	addwf	USBCtrlTrfRxService@i,f
 15637     0DB6  2DA1               	goto	i1l4900
 15638     0DB7                     i1l4902:
 15639                           
 15640                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 15641     0DB7  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 15642     0DB8  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 15643     0DB9  1903               	btfsc	3,2
 15644     0DBA  2DF8               	goto	i1l4914
 15645                           
 15646                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15647     0DBB  0020               	movlb	0	; select bank0
 15648     0DBC  0867               	movf	_pBDTEntryEP0OutNext,w
 15649     0DBD  3E01               	addlw	1
 15650     0DBE  00F4               	movwf	??_USBCtrlTrfRxService
 15651     0DBF  3000               	movlw	0
 15652     0DC0  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15653     0DC1  00F5               	movwf	??_USBCtrlTrfRxService+1
 15654     0DC2  0874               	movf	??_USBCtrlTrfRxService,w
 15655     0DC3  0086               	movwf	6
 15656     0DC4  0875               	movf	??_USBCtrlTrfRxService+1,w
 15657     0DC5  0087               	movwf	7
 15658     0DC6  3008               	movlw	8
 15659     0DC7  0081               	movwf	1
 15660                           
 15661                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 15662     0DC8  3048               	movlw	72
 15663     0DC9  00F4               	movwf	??_USBCtrlTrfRxService
 15664     0DCA  3000               	movlw	0
 15665     0DCB  00F5               	movwf	??_USBCtrlTrfRxService+1
 15666     0DCC  30FF               	movlw	255
 15667     0DCD  0574               	andwf	??_USBCtrlTrfRxService,w
 15668     0DCE  00F6               	movwf	??_USBCtrlTrfRxService+2
 15669     0DCF  307F               	movlw	127
 15670     0DD0  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15671     0DD1  00F7               	movwf	??_USBCtrlTrfRxService+3
 15672     0DD2  0867               	movf	_pBDTEntryEP0OutNext,w
 15673     0DD3  0086               	movwf	6
 15674     0DD4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15675     0DD5  0087               	movwf	7
 15676     0DD6  3142               	addfsr 1,2
 15677     0DD7  0876               	movf	??_USBCtrlTrfRxService+2,w
 15678     0DD8  3FC0               	movwi [0]fsr1
 15679     0DD9  0877               	movf	??_USBCtrlTrfRxService+3,w
 15680     0DDA  3FC1               	movwi [1]fsr1
 15681                           
 15682                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 15683     0DDB  086B               	movf	_pBDTEntryEP0OutCurrent,w
 15684     0DDC  0086               	movwf	6
 15685     0DDD  0187               	clrf	7
 15686     0DDE  1B01               	btfsc	1,6
 15687     0DDF  2DEC               	goto	i1l4912
 15688                           
 15689                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 15690     0DE0  0867               	movf	_pBDTEntryEP0OutNext,w
 15691     0DE1  0086               	movwf	6
 15692     0DE2  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15693     0DE3  0087               	movwf	7
 15694     0DE4  3048               	movlw	72
 15695     0DE5  0081               	movwf	1
 15696                           
 15697                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15698     0DE6  0867               	movf	_pBDTEntryEP0OutNext,w
 15699     0DE7  0086               	movwf	6
 15700     0DE8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15701     0DE9  0087               	movwf	7
 15702     0DEA  1781               	bsf	1,7
 15703                           
 15704                           ;usb/usb_device.c: 1893:         }
 15705     0DEB  0008               	return
 15706     0DEC                     i1l4912:
 15707                           
 15708                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 15709     0DEC  0867               	movf	_pBDTEntryEP0OutNext,w
 15710     0DED  0086               	movwf	6
 15711     0DEE  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15712     0DEF  0087               	movwf	7
 15713     0DF0  3008               	movlw	8
 15714     0DF1  0081               	movwf	1
 15715                           
 15716                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15717     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 15718     0DF3  0086               	movwf	6
 15719     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15720     0DF5  0087               	movwf	7
 15721     0DF6  1781               	bsf	1,7
 15722     0DF7  0008               	return
 15723     0DF8                     i1l4914:
 15724                           
 15725                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 15726     0DF8  0020               	movlb	0	; select bank0
 15727     0DF9  0867               	movf	_pBDTEntryEP0OutNext,w
 15728     0DFA  3E01               	addlw	1
 15729     0DFB  00F4               	movwf	??_USBCtrlTrfRxService
 15730     0DFC  3000               	movlw	0
 15731     0DFD  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15732     0DFE  00F5               	movwf	??_USBCtrlTrfRxService+1
 15733     0DFF  0874               	movf	??_USBCtrlTrfRxService,w
 15734     0E00  0086               	movwf	6
 15735     0E01  0875               	movf	??_USBCtrlTrfRxService+1,w
 15736     0E02  0087               	movwf	7
 15737     0E03  3008               	movlw	8
 15738     0E04  0081               	movwf	1
 15739                           
 15740                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 15741     0E05  3040               	movlw	64
 15742     0E06  00F4               	movwf	??_USBCtrlTrfRxService
 15743     0E07  3000               	movlw	0
 15744     0E08  00F5               	movwf	??_USBCtrlTrfRxService+1
 15745     0E09  30FF               	movlw	255
 15746     0E0A  0574               	andwf	??_USBCtrlTrfRxService,w
 15747     0E0B  00F6               	movwf	??_USBCtrlTrfRxService+2
 15748     0E0C  307F               	movlw	127
 15749     0E0D  0575               	andwf	??_USBCtrlTrfRxService+1,w
 15750     0E0E  00F7               	movwf	??_USBCtrlTrfRxService+3
 15751     0E0F  0867               	movf	_pBDTEntryEP0OutNext,w
 15752     0E10  0086               	movwf	6
 15753     0E11  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15754     0E12  0087               	movwf	7
 15755     0E13  3142               	addfsr 1,2
 15756     0E14  0876               	movf	??_USBCtrlTrfRxService+2,w
 15757     0E15  3FC0               	movwi [0]fsr1
 15758     0E16  0877               	movf	??_USBCtrlTrfRxService+3,w
 15759     0E17  3FC1               	movwi [1]fsr1
 15760                           
 15761                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 15762     0E18  0867               	movf	_pBDTEntryEP0OutNext,w
 15763     0E19  0086               	movwf	6
 15764     0E1A  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15765     0E1B  0087               	movwf	7
 15766     0E1C  3004               	movlw	4
 15767     0E1D  0081               	movwf	1
 15768                           
 15769                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 15770     0E1E  0867               	movf	_pBDTEntryEP0OutNext,w
 15771     0E1F  0086               	movwf	6
 15772     0E20  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15773     0E21  0087               	movwf	7
 15774     0E22  1781               	bsf	1,7
 15775                           
 15776                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 15777     0E23  0022               	movlb	2	; select bank2
 15778     0E24  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 15779     0E25  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 15780     0E26  1903               	btfsc	3,2
 15781     0E27  2E32               	goto	i1l4926
 15782                           
 15783                           ;usb/usb_device.c: 1919:         {
 15784     0E28  3005               	movlw	5
 15785     0E29  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 15786     0E2A  0086               	movwf	6
 15787     0E2B  3001               	movlw	1	; select bank2/3
 15788     0E2C  0087               	movwf	7
 15789     0E2D  3F41               	moviw [1]fsr1
 15790     0E2E  008A               	movwf	10
 15791     0E2F  3F40               	moviw [0]fsr1
 15792     0E30  000A               	callw
 15793     0E31  318D               	pagesel	$
 15794     0E32                     i1l4926:
 15795     0E32  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 15796                           
 15797                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 15798     0E33  083F               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 15799     0E34  1D03               	btfss	3,2
 15800     0E35  0008               	return
 15801                           
 15802                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 15803     0E36  3197  278E         	fcall	_USBCtrlEPAllowStatusStage
 15804     0E38  0008               	return
 15805     0E39                     __end_of_USBCtrlTrfRxService:
 15806                           
 15807                           	psect	text83
 15808     178E                     __ptext83:	
 15809 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 15810 ;; Defined at:
 15811 ;;		line 1420 in file "usb/usb_device.c"
 15812 ;; Parameters:    Size  Location     Type
 15813 ;;		None
 15814 ;; Auto vars:     Size  Location     Type
 15815 ;;		None
 15816 ;; Return value:  Size  Location     Type
 15817 ;;                  1    wreg      void 
 15818 ;; Registers used:
 15819 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15820 ;; Tracked objects:
 15821 ;;		On entry : 0/2
 15822 ;;		On exit  : 1D/0
 15823 ;;		Unchanged: 0/0
 15824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15827 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15828 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15829 ;;Total ram usage:        4 bytes
 15830 ;; Hardware stack levels used: 1
 15831 ;; This function calls:
 15832 ;;		Nothing
 15833 ;; This function is called by:
 15834 ;;		_USBDeviceTasks
 15835 ;;		_USBCtrlEPServiceComplete
 15836 ;;		_USBCtrlTrfRxService
 15837 ;; This function uses a non-reentrant model
 15838 ;;
 15839                           
 15840     178E                     _USBCtrlEPAllowStatusStage:	
 15841                           ;psect for function _USBCtrlEPAllowStatusStage
 15842                           
 15843                           
 15844                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 15845                           
 15846                           ;incstack = 0
 15847                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 15848     178E  0022               	movlb	2	; select bank2
 15849     178F  083E               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 15850     1790  1D03               	btfss	3,2
 15851     1791  0008               	return
 15852                           
 15853                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 15854     1792  3001               	movlw	1
 15855     1793  00BE               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 15856                           
 15857                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 15858     1794  083D               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 15859     1795  1D03               	btfss	3,2
 15860     1796  0008               	return
 15861                           
 15862                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 15863     1797  3001               	movlw	1
 15864     1798  00BD               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 15865                           
 15866                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 15867     1799  3002               	movlw	2
 15868     179A  0020               	movlb	0	; select bank0
 15869     179B  066A               	xorwf	_controlTransferState,w	;volatile
 15870     179C  1D03               	btfss	3,2
 15871     179D  2FB0               	goto	i1l4482
 15872                           
 15873                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 15874     179E  0861               	movf	_pBDTEntryIn,w
 15875     179F  0086               	movwf	6
 15876     17A0  0862               	movf	_pBDTEntryIn+1,w
 15877     17A1  0087               	movwf	7
 15878     17A2  3141               	addfsr 1,1
 15879     17A3  0181               	clrf	1
 15880                           
 15881                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 15882     17A4  0861               	movf	_pBDTEntryIn,w
 15883     17A5  0086               	movwf	6
 15884     17A6  0862               	movf	_pBDTEntryIn+1,w
 15885     17A7  0087               	movwf	7
 15886     17A8  3048               	movlw	72
 15887     17A9  0081               	movwf	1
 15888                           
 15889                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 15890     17AA  0861               	movf	_pBDTEntryIn,w
 15891     17AB  0086               	movwf	6
 15892     17AC  0862               	movf	_pBDTEntryIn+1,w
 15893     17AD  0087               	movwf	7
 15894     17AE  1781               	bsf	1,7
 15895                           
 15896                           ;usb/usb_device.c: 1441:             }
 15897     17AF  0008               	return
 15898     17B0                     i1l4482:
 15899     17B0  036A               	decf	_controlTransferState,w	;volatile
 15900     17B1  1D03               	btfss	3,2
 15901     17B2  0008               	return
 15902                           
 15903                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 15904     17B3  0022               	movlb	2	; select bank2
 15905     17B4  01C1               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15906                           
 15907                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 15908     17B5  0020               	movlb	0	; select bank0
 15909     17B6  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 15910     17B7  0086               	movwf	6
 15911     17B8  0187               	clrf	7
 15912     17B9  3008               	movlw	8
 15913     17BA  0081               	movwf	1
 15914                           
 15915                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 15916     17BB  3040               	movlw	64
 15917     17BC  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15918     17BD  3000               	movlw	0
 15919     17BE  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15920     17BF  30FF               	movlw	255
 15921     17C0  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15922     17C1  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15923     17C2  307F               	movlw	127
 15924     17C3  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15925     17C4  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15926     17C5  086B               	movf	_pBDTEntryEP0OutCurrent,w
 15927     17C6  3E02               	addlw	2
 15928     17C7  0086               	movwf	6
 15929     17C8  0187               	clrf	7
 15930     17C9  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15931     17CA  3FC0               	movwi [0]fsr1
 15932     17CB  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15933     17CC  3FC1               	movwi [1]fsr1
 15934                           
 15935                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 15936     17CD  086B               	movf	_pBDTEntryEP0OutCurrent,w
 15937     17CE  0086               	movwf	6
 15938     17CF  0187               	clrf	7
 15939     17D0  3004               	movlw	4
 15940     17D1  0081               	movwf	1
 15941                           
 15942                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 15943     17D2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 15944     17D3  0086               	movwf	6
 15945     17D4  0187               	clrf	7
 15946     17D5  1781               	bsf	1,7
 15947                           
 15948                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 15949     17D6  3001               	movlw	1
 15950     17D7  0022               	movlb	2	; select bank2
 15951     17D8  00C1               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 15952                           
 15953                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 15954     17D9  0020               	movlb	0	; select bank0
 15955     17DA  0867               	movf	_pBDTEntryEP0OutNext,w
 15956     17DB  3E01               	addlw	1
 15957     17DC  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15958     17DD  3000               	movlw	0
 15959     17DE  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 15960     17DF  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15961     17E0  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 15962     17E1  0086               	movwf	6
 15963     17E2  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 15964     17E3  0087               	movwf	7
 15965     17E4  3008               	movlw	8
 15966     17E5  0081               	movwf	1
 15967                           
 15968                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 15969     17E6  3040               	movlw	64
 15970     17E7  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 15971     17E8  3000               	movlw	0
 15972     17E9  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 15973     17EA  30FF               	movlw	255
 15974     17EB  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 15975     17EC  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 15976     17ED  307F               	movlw	127
 15977     17EE  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 15978     17EF  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 15979     17F0  0867               	movf	_pBDTEntryEP0OutNext,w
 15980     17F1  0086               	movwf	6
 15981     17F2  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15982     17F3  0087               	movwf	7
 15983     17F4  3142               	addfsr 1,2
 15984     17F5  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 15985     17F6  3FC0               	movwi [0]fsr1
 15986     17F7  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 15987     17F8  3FC1               	movwi [1]fsr1
 15988                           
 15989                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 15990     17F9  0867               	movf	_pBDTEntryEP0OutNext,w
 15991     17FA  0086               	movwf	6
 15992     17FB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 15993     17FC  0087               	movwf	7
 15994     17FD  3080               	movlw	128
 15995     17FE  0081               	movwf	1
 15996     17FF  0008               	return
 15997     1800                     __end_of_USBCtrlEPAllowStatusStage:	
 15998                           ;usb/usb_device.c: 1461:         }
 15999                           
 16000                           
 16001                           	psect	text84
 16002     0932                     __ptext84:	
 16003 ;; *************** function _USBCtrlTrfInHandler *****************
 16004 ;; Defined at:
 16005 ;;		line 2599 in file "usb/usb_device.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;		None
 16008 ;; Auto vars:     Size  Location     Type
 16009 ;;  lastDTS         1    7[COMMON] unsigned char 
 16010 ;; Return value:  Size  Location     Type
 16011 ;;                  1    wreg      void 
 16012 ;; Registers used:
 16013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16014 ;; Tracked objects:
 16015 ;;		On entry : 1F/0
 16016 ;;		On exit  : 1F/0
 16017 ;;		Unchanged: 0/0
 16018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;Total ram usage:        5 bytes
 16024 ;; Hardware stack levels used: 1
 16025 ;; Hardware stack levels required when called: 3
 16026 ;; This function calls:
 16027 ;;		_USBCtrlTrfTxService
 16028 ;;		_USBHIDCBSetReportComplete
 16029 ;; This function is called by:
 16030 ;;		_USBCtrlEPService
 16031 ;; This function uses a non-reentrant model
 16032 ;;
 16033                           
 16034     0932                     _USBCtrlTrfInHandler:	
 16035                           ;psect for function _USBCtrlTrfInHandler
 16036                           
 16037                           
 16038                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 16039                           
 16040                           ;incstack = 0
 16041                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16042     0932  0861               	movf	_pBDTEntryIn,w
 16043     0933  0086               	movwf	6
 16044     0934  0862               	movf	_pBDTEntryIn+1,w
 16045     0935  0087               	movwf	7
 16046     0936  3000               	movlw	0
 16047     0937  1B01               	btfsc	1,6
 16048     0938  3001               	movlw	1
 16049     0939  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 16050                           
 16051                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 16052     093A  3004               	movlw	4
 16053     093B  0661               	xorwf	_pBDTEntryIn,w
 16054     093C  00E1               	movwf	_pBDTEntryIn
 16055     093D  3000               	movlw	0
 16056     093E  0662               	xorwf	_pBDTEntryIn+1,w
 16057     093F  00E2               	movwf	_pBDTEntryIn+1
 16058                           
 16059                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 16060     0940  3008               	movlw	8
 16061     0941  066C               	xorwf	_USBDeviceState,w
 16062     0942  1D03               	btfss	3,2
 16063     0943  2950               	goto	i1l5222
 16064                           
 16065                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 16066     0944  0842               	movf	66,w	;volatile
 16067     0945  397F               	andlw	127
 16068     0946  003D               	movlb	29	; select bank29
 16069     0947  0096               	movwf	22	;volatile
 16070                           
 16071                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 16072     0948  0816               	movf	22,w
 16073     0949  1903               	btfsc	3,2
 16074     094A  294D               	goto	i1l5220
 16075                           
 16076                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 16077     094B  3010               	movlw	16
 16078     094C  294E               	goto	L17
 16079     094D                     i1l5220:	
 16080                           ;usb/usb_device.c: 2617:         }
 16081                           
 16082                           
 16083                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 16084     094D  3004               	movlw	4
 16085     094E                     L17:
 16086     094E  0020               	movlb	0	; select bank0
 16087     094F  00EC               	movwf	_USBDeviceState	;volatile
 16088     0950                     i1l5222:
 16089                           
 16090                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 16091     0950  036A               	decf	_controlTransferState,w	;volatile
 16092     0951  1D03               	btfss	3,2
 16093     0952  2998               	goto	i1l680
 16094                           
 16095                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 16096     0953  3048               	movlw	72
 16097     0954  00F3               	movwf	??_USBCtrlTrfInHandler
 16098     0955  3000               	movlw	0
 16099     0956  00F4               	movwf	??_USBCtrlTrfInHandler+1
 16100     0957  30FF               	movlw	255
 16101     0958  0573               	andwf	??_USBCtrlTrfInHandler,w
 16102     0959  00F5               	movwf	??_USBCtrlTrfInHandler+2
 16103     095A  307F               	movlw	127
 16104     095B  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 16105     095C  00F6               	movwf	??_USBCtrlTrfInHandler+3
 16106     095D  0861               	movf	_pBDTEntryIn,w
 16107     095E  0086               	movwf	6
 16108     095F  0862               	movf	_pBDTEntryIn+1,w
 16109     0960  0087               	movwf	7
 16110     0961  3142               	addfsr 1,2
 16111     0962  0875               	movf	??_USBCtrlTrfInHandler+2,w
 16112     0963  3FC0               	movwi [0]fsr1
 16113     0964  0876               	movf	??_USBCtrlTrfInHandler+3,w
 16114     0965  3FC1               	movwi [1]fsr1
 16115                           
 16116                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 16117     0966  3194  24B0  3189   	fcall	_USBCtrlTrfTxService
 16118                           
 16119                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 16120     0969  3002               	movlw	2
 16121     096A  0022               	movlb	2	; select bank2
 16122     096B  0646               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 16123     096C  1D03               	btfss	3,2
 16124     096D  297B               	goto	i1l5232
 16125                           
 16126                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 16127     096E  0020               	movlb	0	; select bank0
 16128     096F  0861               	movf	_pBDTEntryIn,w
 16129     0970  0086               	movwf	6
 16130     0971  0862               	movf	_pBDTEntryIn+1,w
 16131     0972  0087               	movwf	7
 16132     0973  3004               	movlw	4
 16133     0974  0081               	movwf	1
 16134                           
 16135                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 16136     0975  0861               	movf	_pBDTEntryIn,w
 16137     0976  0086               	movwf	6
 16138     0977  0862               	movf	_pBDTEntryIn+1,w
 16139     0978  0087               	movwf	7
 16140     0979  1781               	bsf	1,7
 16141                           
 16142                           ;usb/usb_device.c: 2640:         }
 16143     097A  0008               	return
 16144     097B                     i1l5232:
 16145                           
 16146                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 16147     097B  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 16148     097C  1D03               	btfss	3,2
 16149     097D  298B               	goto	i1l5236
 16150                           
 16151                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 16152     097E  0020               	movlb	0	; select bank0
 16153     097F  0861               	movf	_pBDTEntryIn,w
 16154     0980  0086               	movwf	6
 16155     0981  0862               	movf	_pBDTEntryIn+1,w
 16156     0982  0087               	movwf	7
 16157     0983  3048               	movlw	72
 16158     0984  0081               	movwf	1
 16159                           
 16160                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 16161     0985  0861               	movf	_pBDTEntryIn,w
 16162     0986  0086               	movwf	6
 16163     0987  0862               	movf	_pBDTEntryIn+1,w
 16164     0988  0087               	movwf	7
 16165     0989  1781               	bsf	1,7
 16166                           
 16167                           ;usb/usb_device.c: 2647:             }
 16168     098A  0008               	return
 16169     098B                     i1l5236:
 16170                           
 16171                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 16172     098B  0020               	movlb	0	; select bank0
 16173     098C  0861               	movf	_pBDTEntryIn,w
 16174     098D  0086               	movwf	6
 16175     098E  0862               	movf	_pBDTEntryIn+1,w
 16176     098F  0087               	movwf	7
 16177     0990  3008               	movlw	8
 16178     0991  0081               	movwf	1
 16179                           
 16180                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 16181     0992  0861               	movf	_pBDTEntryIn,w
 16182     0993  0086               	movwf	6
 16183     0994  0862               	movf	_pBDTEntryIn+1,w
 16184     0995  0087               	movwf	7
 16185     0996  1781               	bsf	1,7
 16186     0997  0008               	return
 16187     0998                     i1l680:	
 16188                           ;usb/usb_device.c: 2655:  else
 16189                           
 16190                           
 16191                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 16192     0998  0022               	movlb	2	; select bank2
 16193     0999  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 16194     099A  29AA               	goto	i1l5244
 16195                           
 16196                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 16197     099B  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 16198     099C  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 16199     099D  1903               	btfsc	3,2
 16200     099E  29A9               	goto	i1l5242
 16201                           
 16202                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 16203     099F  3005               	movlw	5
 16204     09A0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 16205     09A1  0086               	movwf	6
 16206     09A2  3001               	movlw	1	; select bank2/3
 16207     09A3  0087               	movwf	7
 16208     09A4  3F41               	moviw [1]fsr1
 16209     09A5  008A               	movwf	10
 16210     09A6  3F40               	moviw [0]fsr1
 16211     09A7  000A               	callw
 16212     09A8  3189               	pagesel	$
 16213     09A9                     i1l5242:
 16214                           
 16215                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 16216     09A9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 16217     09AA                     i1l5244:
 16218                           
 16219                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 16220     09AA  0020               	movlb	0	; select bank0
 16221     09AB  01EA               	clrf	_controlTransferState	;volatile
 16222     09AC  0008               	return
 16223     09AD                     __end_of_USBCtrlTrfInHandler:
 16224                           
 16225                           	psect	text85
 16226     1AD9                     __ptext85:	
 16227 ;; *************** function _USBHIDCBSetReportComplete *****************
 16228 ;; Defined at:
 16229 ;;		line 530 in file "app_device_keyboard.c"
 16230 ;; Parameters:    Size  Location     Type
 16231 ;;		None
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;		None
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  1    wreg      void 
 16236 ;; Registers used:
 16237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16238 ;; Tracked objects:
 16239 ;;		On entry : 1F/2
 16240 ;;		On exit  : 1F/2
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;Total ram usage:        0 bytes
 16248 ;; Hardware stack levels used: 1
 16249 ;; Hardware stack levels required when called: 2
 16250 ;; This function calls:
 16251 ;;		i1_APP_KeyboardProcessOutputReport
 16252 ;; This function is called by:
 16253 ;;		_USBHIDCBSetReportHandler
 16254 ;;		_USBCtrlTrfRxService
 16255 ;;		_USBCtrlTrfInHandler
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259     1AD9                     _USBHIDCBSetReportComplete:	
 16260                           ;psect for function _USBHIDCBSetReportComplete
 16261                           
 16262                           
 16263                           ;app_device_keyboard.c: 533:     outputReport.value = CtrlTrfData[0];
 16264                           
 16265                           ;incstack = 0
 16266                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16267     1AD9  0020               	movlb	0	; select bank0
 16268     1ADA  0848               	movf	72,w	;volatile
 16269     1ADB  0022               	movlb	2	; select bank2
 16270     1ADC  00A0               	movwf	32	;volatile
 16271                           
 16272                           ;app_device_keyboard.c: 536:     APP_KeyboardProcessOutputReport();
 16273     1ADD  319B  233B         	fcall	i1_APP_KeyboardProcessOutputReport
 16274     1ADF  0008               	return
 16275     1AE0                     __end_of_USBHIDCBSetReportComplete:
 16276                           
 16277                           	psect	text86
 16278     1B3B                     __ptext86:	
 16279 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 16280 ;; Defined at:
 16281 ;;		line 525 in file "app_device_keyboard.c"
 16282 ;; Parameters:    Size  Location     Type
 16283 ;;		None
 16284 ;; Auto vars:     Size  Location     Type
 16285 ;;		None
 16286 ;; Return value:  Size  Location     Type
 16287 ;;                  1    wreg      void 
 16288 ;; Registers used:
 16289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16290 ;; Tracked objects:
 16291 ;;		On entry : 1F/2
 16292 ;;		On exit  : 1F/2
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16299 ;;Total ram usage:        0 bytes
 16300 ;; Hardware stack levels used: 1
 16301 ;; Hardware stack levels required when called: 1
 16302 ;; This function calls:
 16303 ;;		i1_PS2Keyboard_SendCommand
 16304 ;; This function is called by:
 16305 ;;		_USBHIDCBSetReportComplete
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309     1B3B                     i1_APP_KeyboardProcessOutputReport:	
 16310                           ;psect for function i1_APP_KeyboardProcessOutputReport
 16311                           
 16312                           
 16313                           ;app_device_keyboard.c: 526:     keyboard.leds.value = outputReport.value;
 16314                           
 16315                           ;incstack = 0
 16316                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 16317     1B3B  3090               	movlw	144
 16318     1B3C  0086               	movwf	6
 16319     1B3D  3023               	movlw	35
 16320     1B3E  0087               	movwf	7
 16321     1B3F  0820               	movf	32,w	;volatile
 16322     1B40  0081               	movwf	1
 16323                           
 16324                           ;app_device_keyboard.c: 527:     PS2Keyboard_SendCommand(0xED);
 16325     1B41  30ED               	movlw	237
 16326     1B42  319C  24D4         	fcall	i1_PS2Keyboard_SendCommand
 16327     1B44  0008               	return
 16328     1B45                     __end_ofi1_APP_KeyboardProcessOutputReport:
 16329                           
 16330                           	psect	text87
 16331     1CD4                     __ptext87:	
 16332 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 16333 ;; Defined at:
 16334 ;;		line 60 in file "ps2_keyboard.c"
 16335 ;; Parameters:    Size  Location     Type
 16336 ;;  cmd             1    wreg     unsigned char 
 16337 ;; Auto vars:     Size  Location     Type
 16338 ;;  cmd             1    0[COMMON] unsigned char 
 16339 ;; Return value:  Size  Location     Type
 16340 ;;                  1    wreg      void 
 16341 ;; Registers used:
 16342 ;;		wreg, status,2
 16343 ;; Tracked objects:
 16344 ;;		On entry : 1F/2
 16345 ;;		On exit  : 1F/2
 16346 ;;		Unchanged: 0/0
 16347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;Total ram usage:        1 bytes
 16353 ;; Hardware stack levels used: 1
 16354 ;; This function calls:
 16355 ;;		Nothing
 16356 ;; This function is called by:
 16357 ;;		i1_APP_KeyboardProcessOutputReport
 16358 ;; This function uses a non-reentrant model
 16359 ;;
 16360                           
 16361     1CD4                     i1_PS2Keyboard_SendCommand:	
 16362                           ;psect for function i1_PS2Keyboard_SendCommand
 16363                           
 16364                           
 16365                           ;incstack = 0
 16366                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 16367                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 16368     1CD4  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 16369                           
 16370                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 16371     1CD5  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 16372     1CD6  00B5               	movwf	_keyboardCommand^(0+256)	;volatile
 16373                           
 16374                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 16375     1CD7  138B               	bcf	11,7	;volatile
 16376     1CD8  0021               	movlb	1	; select bank1
 16377     1CD9  120C               	bcf	12,4	;volatile
 16378     1CDA  0022               	movlb	2	; select bank2
 16379     1CDB  120C               	bcf	12,4	;volatile
 16380                           
 16381                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 16382     1CDC  30F0               	movlw	240
 16383     1CDD                     u740_27:
 16384     1CDD  3200               	nop2
 16385     1CDE  0B89               	decfsz	9,f
 16386     1CDF  2CDD               	goto	u740_27
 16387     1CE0  0021               	movlb	1	; select bank1
 16388     1CE1  160C               	bsf	12,4	;volatile
 16389                           
 16390                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 16391     1CE2  0020               	movlb	0	; select bank0
 16392     1CE3  01E9               	clrf	_keyboardCommandCount	;volatile
 16393                           
 16394                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 16395     1CE4  300C               	movlw	12
 16396     1CE5  0023               	movlb	3	; select bank3
 16397     1CE6  00DE               	movwf	_keyboardCommandBits^(0+384)	;volatile
 16398                           
 16399                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 16400     1CE7  01DD               	clrf	_keyboardCommandOnes^(0+384)	;volatile
 16401     1CE8  0021               	movlb	1	; select bank1
 16402     1CE9  128C               	bcf	12,5	;volatile
 16403     1CEA  0022               	movlb	2	; select bank2
 16404     1CEB  128C               	bcf	12,5	;volatile
 16405                           
 16406                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 16407     1CEC  178B               	bsf	11,7	;volatile
 16408     1CED  0008               	return
 16409     1CEE                     __end_ofi1_PS2Keyboard_SendCommand:
 16410                           
 16411                           	psect	text88
 16412     14B0                     __ptext88:	
 16413 ;; *************** function _USBCtrlTrfTxService *****************
 16414 ;; Defined at:
 16415 ;;		line 1775 in file "usb/usb_device.c"
 16416 ;; Parameters:    Size  Location     Type
 16417 ;;		None
 16418 ;; Auto vars:     Size  Location     Type
 16419 ;;  byteToSend      1    2[COMMON] unsigned char 
 16420 ;; Return value:  Size  Location     Type
 16421 ;;                  1    wreg      void 
 16422 ;; Registers used:
 16423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 16424 ;; Tracked objects:
 16425 ;;		On entry : 1E/0
 16426 ;;		On exit  : 1C/0
 16427 ;;		Unchanged: 0/0
 16428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;Total ram usage:        3 bytes
 16434 ;; Hardware stack levels used: 1
 16435 ;; This function calls:
 16436 ;;		Nothing
 16437 ;; This function is called by:
 16438 ;;		_USBCtrlEPAllowDataStage
 16439 ;;		_USBCtrlTrfInHandler
 16440 ;; This function uses a non-reentrant model
 16441 ;;
 16442                           
 16443     14B0                     _USBCtrlTrfTxService:	
 16444                           ;psect for function _USBCtrlTrfTxService
 16445                           
 16446                           
 16447                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 16448                           
 16449                           ;incstack = 0
 16450                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 16451     14B0  3008               	movlw	8
 16452     14B1  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 16453                           
 16454                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 16455     14B2  3000               	movlw	0
 16456     14B3  0021               	movlb	1	; select bank1
 16457     14B4  026F               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 16458     14B5  3008               	movlw	8
 16459     14B6  1903               	skipnz
 16460     14B7  026E               	subwf	(_inPipes^(0+128)+3),w	;volatile
 16461     14B8  1803               	skipnc
 16462     14B9  2CC7               	goto	i1l579
 16463                           
 16464                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 16465     14BA  086E               	movf	(_inPipes^(0+128)+3),w	;volatile
 16466     14BB  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 16467                           
 16468                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 16469     14BC  0022               	movlb	2	; select bank2
 16470     14BD  0846               	movf	_shortPacketStatus^(0+256),w	;volatile
 16471     14BE  1D03               	btfss	3,2
 16472     14BF  2CC2               	goto	i1l4404
 16473                           
 16474                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 16475     14C0  3001               	movlw	1
 16476     14C1  2CC6               	goto	L18
 16477     14C2                     i1l4404:	
 16478                           ;usb/usb_device.c: 1794:         }
 16479                           
 16480     14C2  0346               	decf	_shortPacketStatus^(0+256),w	;volatile
 16481     14C3  1D03               	btfss	3,2
 16482     14C4  2CC7               	goto	i1l579
 16483                           
 16484                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 16485     14C5  3002               	movlw	2
 16486     14C6                     L18:
 16487     14C6  00C6               	movwf	_shortPacketStatus^(0+256)	;volatile
 16488     14C7                     i1l579:	
 16489                           ;usb/usb_device.c: 1799:     }
 16490                           
 16491                           
 16492                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 16493     14C7  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16494     14C8  00F0               	movwf	??_USBCtrlTrfTxService
 16495     14C9  01F1               	clrf	??_USBCtrlTrfTxService+1
 16496     14CA  0870               	movf	??_USBCtrlTrfTxService,w
 16497     14CB  0021               	movlb	1	; select bank1
 16498     14CC  02EE               	subwf	(_inPipes^(0+128)+3),f	;volatile
 16499     14CD  0871               	movf	??_USBCtrlTrfTxService+1,w
 16500     14CE  3BEF               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 16501                           
 16502                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 16503     14CF  0020               	movlb	0	; select bank0
 16504     14D0  0861               	movf	_pBDTEntryIn,w
 16505     14D1  3E01               	addlw	1
 16506     14D2  00F0               	movwf	??_USBCtrlTrfTxService
 16507     14D3  3000               	movlw	0
 16508     14D4  3D62               	addwfc	_pBDTEntryIn+1,w
 16509     14D5  00F1               	movwf	??_USBCtrlTrfTxService+1
 16510     14D6  0870               	movf	??_USBCtrlTrfTxService,w
 16511     14D7  0086               	movwf	6
 16512     14D8  0871               	movf	??_USBCtrlTrfTxService+1,w
 16513     14D9  0087               	movwf	7
 16514     14DA  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16515     14DB  0081               	movwf	1
 16516                           
 16517                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 16518     14DC  3048               	movlw	72
 16519     14DD  0022               	movlb	2	; select bank2
 16520     14DE  00C5               	movwf	_pDst^(0+256)
 16521                           
 16522                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 16523     14DF  0021               	movlb	1	; select bank1
 16524     14E0  1C6D               	btfss	(_inPipes^(0+128)+2),0	;volatile
 16525     14E1  2CF9               	goto	i1l4424
 16526     14E2  2D13               	goto	i1l4434
 16527     14E3                     i1l4416:
 16528                           
 16529                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 16530     14E3  0022               	movlb	2	; select bank2
 16531     14E4  0845               	movf	_pDst^(0+256),w
 16532     14E5  0086               	movwf	6
 16533     14E6  0187               	clrf	7
 16534     14E7  0021               	movlb	1	; select bank1
 16535     14E8  086B               	movf	_inPipes^(0+128),w	;volatile
 16536     14E9  0084               	movwf	4
 16537     14EA  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16538     14EB  0085               	movwf	5
 16539     14EC  0800               	movf	0,w	;code access
 16540     14ED  0081               	movwf	1
 16541     14EE  3001               	movlw	1
 16542     14EF  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16543     14F0  3000               	movlw	0
 16544     14F1  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16545     14F2  3001               	movlw	1
 16546     14F3  00F0               	movwf	??_USBCtrlTrfTxService
 16547     14F4  0870               	movf	??_USBCtrlTrfTxService,w
 16548     14F5  0022               	movlb	2	; select bank2
 16549     14F6  07C5               	addwf	_pDst^(0+256),f
 16550                           
 16551                           ;usb/usb_device.c: 1818:             byteToSend--;
 16552     14F7  3001               	movlw	1
 16553     14F8  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16554     14F9                     i1l4424:
 16555                           
 16556                           ;usb/usb_device.c: 1815:         while(byteToSend)
 16557     14F9  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16558     14FA  1903               	btfsc	3,2
 16559     14FB  0008               	return
 16560     14FC  2CE3               	goto	i1l4416
 16561     14FD                     i1l4426:
 16562                           
 16563                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 16564     14FD  0022               	movlb	2	; select bank2
 16565     14FE  0845               	movf	_pDst^(0+256),w
 16566     14FF  0086               	movwf	6
 16567     1500  0187               	clrf	7
 16568     1501  0021               	movlb	1	; select bank1
 16569     1502  086B               	movf	_inPipes^(0+128),w	;volatile
 16570     1503  0084               	movwf	4
 16571     1504  086C               	movf	(_inPipes+1)^(0+128),w	;volatile
 16572     1505  0085               	movwf	5
 16573     1506  0800               	movf	0,w	;code access
 16574     1507  0081               	movwf	1
 16575     1508  3001               	movlw	1
 16576     1509  07EB               	addwf	_inPipes^(0+128),f	;volatile
 16577     150A  3000               	movlw	0
 16578     150B  3DEC               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 16579     150C  3001               	movlw	1
 16580     150D  00F0               	movwf	??_USBCtrlTrfTxService
 16581     150E  0870               	movf	??_USBCtrlTrfTxService,w
 16582     150F  0022               	movlb	2	; select bank2
 16583     1510  07C5               	addwf	_pDst^(0+256),f
 16584                           
 16585                           ;usb/usb_device.c: 1826:             byteToSend--;
 16586     1511  3001               	movlw	1
 16587     1512  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 16588     1513                     i1l4434:
 16589                           
 16590                           ;usb/usb_device.c: 1823:         while(byteToSend)
 16591     1513  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 16592     1514  1903               	btfsc	3,2
 16593     1515  0008               	return
 16594     1516  2CFD               	goto	i1l4426
 16595     1517                     __end_of_USBCtrlTrfTxService:
 16596                           
 16597                           	psect	text89
 16598     1B66                     __ptext89:	
 16599 ;; *************** function _TMR2_ISR *****************
 16600 ;; Defined at:
 16601 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 16602 ;; Parameters:    Size  Location     Type
 16603 ;;		None
 16604 ;; Auto vars:     Size  Location     Type
 16605 ;;		None
 16606 ;; Return value:  Size  Location     Type
 16607 ;;                  1    wreg      void 
 16608 ;; Registers used:
 16609 ;;		wreg, status,2, status,0, pclath, cstack
 16610 ;; Tracked objects:
 16611 ;;		On entry : 1F/0
 16612 ;;		On exit  : 0/0
 16613 ;;		Unchanged: 0/0
 16614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;Total ram usage:        0 bytes
 16620 ;; Hardware stack levels used: 1
 16621 ;; Hardware stack levels required when called: 1
 16622 ;; This function calls:
 16623 ;;		NULL
 16624 ;;		_SysTimeInterrupt
 16625 ;;		_TMR2_DefaultInterruptHandler
 16626 ;; This function is called by:
 16627 ;;		_INTERRUPT_InterruptManager
 16628 ;; This function uses a non-reentrant model
 16629 ;;
 16630                           
 16631     1B66                     _TMR2_ISR:	
 16632                           ;psect for function _TMR2_ISR
 16633                           
 16634                           
 16635                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 16636                           
 16637                           ;incstack = 0
 16638                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 16639     1B66  1091               	bcf	17,1	;volatile
 16640                           
 16641                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 16642     1B67  0023               	movlb	3	; select bank3
 16643     1B68  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16644     1B69  0458               	iorwf	(_TMR2_InterruptHandler+1)^(0+384),w
 16645     1B6A  1903               	btfsc	3,2
 16646     1B6B  0008               	return
 16647                           
 16648                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 16649     1B6C  0858               	movf	(_TMR2_InterruptHandler+1)^(0+384),w
 16650     1B6D  008A               	movwf	10
 16651     1B6E  0857               	movf	_TMR2_InterruptHandler^(0+384),w
 16652     1B6F  000A               	callw
 16653     1B70  319B               	pagesel	$
 16654     1B71  0008               	return
 16655     1B72                     __end_of_TMR2_ISR:
 16656                           
 16657                           	psect	text90
 16658     1B28                     __ptext90:	
 16659 ;; *************** function _SysTimeInterrupt *****************
 16660 ;; Defined at:
 16661 ;;		line 24 in file "systime.c"
 16662 ;; Parameters:    Size  Location     Type
 16663 ;;		None
 16664 ;; Auto vars:     Size  Location     Type
 16665 ;;		None
 16666 ;; Return value:  Size  Location     Type
 16667 ;;                  1    wreg      void 
 16668 ;; Registers used:
 16669 ;;		wreg
 16670 ;; Tracked objects:
 16671 ;;		On entry : 1F/3
 16672 ;;		On exit  : 1F/3
 16673 ;;		Unchanged: 0/0
 16674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;Total ram usage:        0 bytes
 16680 ;; Hardware stack levels used: 1
 16681 ;; This function calls:
 16682 ;;		Nothing
 16683 ;; This function is called by:
 16684 ;;		_SysTime_Init
 16685 ;;		_TMR2_ISR
 16686 ;; This function uses a non-reentrant model
 16687 ;;
 16688                           
 16689     1B28                     _SysTimeInterrupt:	
 16690                           ;psect for function _SysTimeInterrupt
 16691                           
 16692                           
 16693                           ;systime.c: 26:     ++timeMs;
 16694                           
 16695                           ;incstack = 0
 16696                           ; Regs used in _SysTimeInterrupt: [wreg]
 16697     1B28  3001               	movlw	1
 16698     1B29  07B8               	addwf	_timeMs^(0+384),f
 16699     1B2A  3000               	movlw	0
 16700     1B2B  3DB9               	addwfc	(_timeMs+1)^(0+384),f
 16701     1B2C  3000               	movlw	0
 16702     1B2D  3DBA               	addwfc	(_timeMs+2)^(0+384),f
 16703     1B2E  3000               	movlw	0
 16704     1B2F  3DBB               	addwfc	(_timeMs+3)^(0+384),f
 16705     1B30  0008               	return
 16706     1B31                     __end_of_SysTimeInterrupt:
 16707                           
 16708                           	psect	text91
 16709     0002                     __ptext91:	
 16710 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 16711 ;; Defined at:
 16712 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;		None
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;		None
 16717 ;; Return value:  Size  Location     Type
 16718 ;;                  1    wreg      void 
 16719 ;; Registers used:
 16720 ;;		None
 16721 ;; Tracked objects:
 16722 ;;		On entry : 1F/3
 16723 ;;		On exit  : 1F/3
 16724 ;;		Unchanged: 1E/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;Total ram usage:        0 bytes
 16731 ;; Hardware stack levels used: 1
 16732 ;; This function calls:
 16733 ;;		Nothing
 16734 ;; This function is called by:
 16735 ;;		_TMR2_Initialize
 16736 ;;		_TMR2_ISR
 16737 ;; This function uses a non-reentrant model
 16738 ;;
 16739                           
 16740     0002                     _TMR2_DefaultInterruptHandler:	
 16741                           ;psect for function _TMR2_DefaultInterruptHandler
 16742                           
 16743                           
 16744                           ;incstack = 0
 16745                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 16746     0002  0008               	return
 16747     0003                     __end_of_TMR2_DefaultInterruptHandler:
 16748                           
 16749                           	psect	text92
 16750     1B45                     __ptext92:	
 16751 ;; *************** function _PIN_MANAGER_IOC *****************
 16752 ;; Defined at:
 16753 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 16754 ;; Parameters:    Size  Location     Type
 16755 ;;		None
 16756 ;; Auto vars:     Size  Location     Type
 16757 ;;		None
 16758 ;; Return value:  Size  Location     Type
 16759 ;;                  1    wreg      void 
 16760 ;; Registers used:
 16761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16762 ;; Tracked objects:
 16763 ;;		On entry : 0/0
 16764 ;;		On exit  : 1F/7
 16765 ;;		Unchanged: 0/0
 16766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;Total ram usage:        0 bytes
 16772 ;; Hardware stack levels used: 1
 16773 ;; Hardware stack levels required when called: 4
 16774 ;; This function calls:
 16775 ;;		_IOCAF4_ISR
 16776 ;;		_IOCAF5_ISR
 16777 ;; This function is called by:
 16778 ;;		_INTERRUPT_InterruptManager
 16779 ;; This function uses a non-reentrant model
 16780 ;;
 16781                           
 16782     1B45                     _PIN_MANAGER_IOC:	
 16783                           ;psect for function _PIN_MANAGER_IOC
 16784                           
 16785                           
 16786                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 16787                           
 16788                           ;incstack = 0
 16789                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16790     1B45  0027               	movlb	7	; select bank7
 16791     1B46  1E13               	btfss	19,4	;volatile
 16792     1B47  2B4B               	goto	i1l6818
 16793                           
 16794                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 16795     1B48  319B  237E  319B   	fcall	_IOCAF4_ISR
 16796     1B4B                     i1l6818:
 16797                           
 16798                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 16799     1B4B  1E93               	btfss	19,5	;volatile
 16800     1B4C  0008               	return
 16801                           
 16802                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 16803     1B4D  319B  238B         	fcall	_IOCAF5_ISR
 16804     1B4F  0008               	return
 16805     1B50                     __end_of_PIN_MANAGER_IOC:
 16806                           
 16807                           	psect	text93
 16808     1B8B                     __ptext93:	
 16809 ;; *************** function _IOCAF5_ISR *****************
 16810 ;; Defined at:
 16811 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 16812 ;; Parameters:    Size  Location     Type
 16813 ;;		None
 16814 ;; Auto vars:     Size  Location     Type
 16815 ;;		None
 16816 ;; Return value:  Size  Location     Type
 16817 ;;                  1    wreg      void 
 16818 ;; Registers used:
 16819 ;;		wreg, status,2, status,0, pclath, cstack
 16820 ;; Tracked objects:
 16821 ;;		On entry : 1F/7
 16822 ;;		On exit  : 1F/7
 16823 ;;		Unchanged: 0/0
 16824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16828 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16829 ;;Total ram usage:        0 bytes
 16830 ;; Hardware stack levels used: 1
 16831 ;; Hardware stack levels required when called: 2
 16832 ;; This function calls:
 16833 ;;		NULL
 16834 ;;		_IOCAF5_DefaultInterruptHandler
 16835 ;;		_PS2Keyboard_DataInterrupt
 16836 ;; This function is called by:
 16837 ;;		_PIN_MANAGER_IOC
 16838 ;; This function uses a non-reentrant model
 16839 ;;
 16840                           
 16841     1B8B                     _IOCAF5_ISR:	
 16842                           ;psect for function _IOCAF5_ISR
 16843                           
 16844                           
 16845                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 16846                           
 16847                           ;incstack = 0
 16848                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 16849     1B8B  0023               	movlb	3	; select bank3
 16850     1B8C  0869               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16851     1B8D  046A               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16852     1B8E  1903               	btfsc	3,2
 16853     1B8F  2B95               	goto	i1l5538
 16854                           
 16855                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 16856     1B90  086A               	movf	(_IOCAF5_InterruptHandler+1)^(0+384),w
 16857     1B91  008A               	movwf	10
 16858     1B92  0869               	movf	_IOCAF5_InterruptHandler^(0+384),w
 16859     1B93  000A               	callw
 16860     1B94  319B               	pagesel	$
 16861     1B95                     i1l5538:
 16862                           
 16863                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 16864     1B95  0027               	movlb	7	; select bank7
 16865     1B96  1293               	bcf	19,5	;volatile
 16866     1B97  0008               	return
 16867     1B98                     __end_of_IOCAF5_ISR:
 16868                           
 16869                           	psect	text94
 16870     1AC9                     __ptext94:	
 16871 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 16872 ;; Defined at:
 16873 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 16874 ;; Parameters:    Size  Location     Type
 16875 ;;		None
 16876 ;; Auto vars:     Size  Location     Type
 16877 ;;		None
 16878 ;; Return value:  Size  Location     Type
 16879 ;;                  1    wreg      void 
 16880 ;; Registers used:
 16881 ;;		None
 16882 ;; Tracked objects:
 16883 ;;		On entry : 1F/3
 16884 ;;		On exit  : 1F/3
 16885 ;;		Unchanged: 1E/0
 16886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;Total ram usage:        0 bytes
 16892 ;; Hardware stack levels used: 1
 16893 ;; This function calls:
 16894 ;;		Nothing
 16895 ;; This function is called by:
 16896 ;;		_PIN_MANAGER_Initialize
 16897 ;;		_IOCAF5_ISR
 16898 ;; This function uses a non-reentrant model
 16899 ;;
 16900                           
 16901     1AC9                     _IOCAF5_DefaultInterruptHandler:	
 16902                           ;psect for function _IOCAF5_DefaultInterruptHandler
 16903                           
 16904                           
 16905                           ;incstack = 0
 16906                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 16907     1AC9  0008               	return
 16908     1ACA                     __end_of_IOCAF5_DefaultInterruptHandler:
 16909                           
 16910                           	psect	text95
 16911     1BBF                     __ptext95:	
 16912 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 16913 ;; Defined at:
 16914 ;;		line 79 in file "ps2_keyboard.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;		None
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;		None
 16919 ;; Return value:  Size  Location     Type
 16920 ;;                  1    wreg      void 
 16921 ;; Registers used:
 16922 ;;		wreg, status,2, status,0, pclath, cstack
 16923 ;; Tracked objects:
 16924 ;;		On entry : 1F/3
 16925 ;;		On exit  : 1E/2
 16926 ;;		Unchanged: 0/0
 16927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;Total ram usage:        0 bytes
 16933 ;; Hardware stack levels used: 1
 16934 ;; Hardware stack levels required when called: 1
 16935 ;; This function calls:
 16936 ;;		_SysTime_GetCurrentTimeMs
 16937 ;; This function is called by:
 16938 ;;		_PS2Keyboard_Init
 16939 ;;		_IOCAF5_ISR
 16940 ;; This function uses a non-reentrant model
 16941 ;;
 16942                           
 16943     1BBF                     _PS2Keyboard_DataInterrupt:	
 16944                           ;psect for function _PS2Keyboard_DataInterrupt
 16945                           
 16946                           
 16947                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 16948                           
 16949                           ;incstack = 0
 16950                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 16951     1BBF  0022               	movlb	2	; select bank2
 16952     1BC0  0839               	movf	_keyboardState^(0+256),w
 16953     1BC1  1D03               	btfss	3,2
 16954     1BC2  0008               	return
 16955                           
 16956                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 16957     1BC3  3001               	movlw	1
 16958     1BC4  00B9               	movwf	_keyboardState^(0+256)	;volatile
 16959                           
 16960                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 16961     1BC5  319B  2331         	fcall	_SysTime_GetCurrentTimeMs
 16962     1BC7  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 16963     1BC8  00BF               	movwf	(_prevTimeMs+3)^(0+384)	;volatile
 16964     1BC9  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 16965     1BCA  00BE               	movwf	(_prevTimeMs+2)^(0+384)	;volatile
 16966     1BCB  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 16967     1BCC  00BD               	movwf	(_prevTimeMs+1)^(0+384)	;volatile
 16968     1BCD  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 16969     1BCE  00BC               	movwf	_prevTimeMs^(0+384)	;volatile
 16970     1BCF  0008               	return
 16971     1BD0                     __end_of_PS2Keyboard_DataInterrupt:
 16972                           
 16973                           	psect	text96
 16974     1B7E                     __ptext96:	
 16975 ;; *************** function _IOCAF4_ISR *****************
 16976 ;; Defined at:
 16977 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 16978 ;; Parameters:    Size  Location     Type
 16979 ;;		None
 16980 ;; Auto vars:     Size  Location     Type
 16981 ;;		None
 16982 ;; Return value:  Size  Location     Type
 16983 ;;                  1    wreg      void 
 16984 ;; Registers used:
 16985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16986 ;; Tracked objects:
 16987 ;;		On entry : 1F/7
 16988 ;;		On exit  : 1F/7
 16989 ;;		Unchanged: 0/0
 16990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16995 ;;Total ram usage:        0 bytes
 16996 ;; Hardware stack levels used: 1
 16997 ;; Hardware stack levels required when called: 3
 16998 ;; This function calls:
 16999 ;;		NULL
 17000 ;;		_IOCAF4_DefaultInterruptHandler
 17001 ;;		_PS2Keyboard_ClockInterrupt
 17002 ;; This function is called by:
 17003 ;;		_PIN_MANAGER_IOC
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007     1B7E                     _IOCAF4_ISR:	
 17008                           ;psect for function _IOCAF4_ISR
 17009                           
 17010                           
 17011                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 17012                           
 17013                           ;incstack = 0
 17014                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17015     1B7E  0023               	movlb	3	; select bank3
 17016     1B7F  086B               	movf	_IOCAF4_InterruptHandler^(0+384),w
 17017     1B80  046C               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 17018     1B81  1903               	btfsc	3,2
 17019     1B82  2B88               	goto	i1l6682
 17020                           
 17021                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 17022     1B83  086C               	movf	(_IOCAF4_InterruptHandler+1)^(0+384),w
 17023     1B84  008A               	movwf	10
 17024     1B85  086B               	movf	_IOCAF4_InterruptHandler^(0+384),w
 17025     1B86  000A               	callw
 17026     1B87  319B               	pagesel	$
 17027     1B88                     i1l6682:
 17028                           
 17029                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 17030     1B88  0027               	movlb	7	; select bank7
 17031     1B89  1213               	bcf	19,4	;volatile
 17032     1B8A  0008               	return
 17033     1B8B                     __end_of_IOCAF4_ISR:
 17034                           
 17035                           	psect	text97
 17036     1AC8                     __ptext97:	
 17037 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 17038 ;; Defined at:
 17039 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 17040 ;; Parameters:    Size  Location     Type
 17041 ;;		None
 17042 ;; Auto vars:     Size  Location     Type
 17043 ;;		None
 17044 ;; Return value:  Size  Location     Type
 17045 ;;                  1    wreg      void 
 17046 ;; Registers used:
 17047 ;;		None
 17048 ;; Tracked objects:
 17049 ;;		On entry : 1F/3
 17050 ;;		On exit  : 1F/3
 17051 ;;		Unchanged: 1E/0
 17052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17057 ;;Total ram usage:        0 bytes
 17058 ;; Hardware stack levels used: 1
 17059 ;; This function calls:
 17060 ;;		Nothing
 17061 ;; This function is called by:
 17062 ;;		_PIN_MANAGER_Initialize
 17063 ;;		_IOCAF4_ISR
 17064 ;; This function uses a non-reentrant model
 17065 ;;
 17066                           
 17067     1AC8                     _IOCAF4_DefaultInterruptHandler:	
 17068                           ;psect for function _IOCAF4_DefaultInterruptHandler
 17069                           
 17070                           
 17071                           ;incstack = 0
 17072                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 17073     1AC8  0008               	return
 17074     1AC9                     __end_of_IOCAF4_DefaultInterruptHandler:
 17075                           
 17076                           	psect	text98
 17077     0664                     __ptext98:	
 17078 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 17079 ;; Defined at:
 17080 ;;		line 86 in file "ps2_keyboard.c"
 17081 ;; Parameters:    Size  Location     Type
 17082 ;;		None
 17083 ;; Auto vars:     Size  Location     Type
 17084 ;;  bit             1   13[COMMON] _Bool 
 17085 ;;  bitPos          1   12[COMMON] unsigned char 
 17086 ;; Return value:  Size  Location     Type
 17087 ;;                  1    wreg      void 
 17088 ;; Registers used:
 17089 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17090 ;; Tracked objects:
 17091 ;;		On entry : 1F/3
 17092 ;;		On exit  : 1F/3
 17093 ;;		Unchanged: 0/0
 17094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17096 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17097 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17098 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17099 ;;Total ram usage:        6 bytes
 17100 ;; Hardware stack levels used: 1
 17101 ;; Hardware stack levels required when called: 2
 17102 ;; This function calls:
 17103 ;;		_SysTime_GetCurrentTimeMs
 17104 ;;		i1_GenericQueue_Enqueue
 17105 ;; This function is called by:
 17106 ;;		_PS2Keyboard_Init
 17107 ;;		_IOCAF4_ISR
 17108 ;; This function uses a non-reentrant model
 17109 ;;
 17110                           
 17111     0664                     _PS2Keyboard_ClockInterrupt:	
 17112                           ;psect for function _PS2Keyboard_ClockInterrupt
 17113                           
 17114                           
 17115                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 17116                           
 17117                           ;incstack = 0
 17118                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17119     0664  085E               	movf	_keyboardCommandBits^(0+384),w	;volatile
 17120     0665  1903               	btfsc	3,2
 17121     0666  2EA8               	goto	i1l6616
 17122                           
 17123                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 17124     0667  0020               	movlb	0	; select bank0
 17125     0668  0869               	movf	_keyboardCommandCount,w	;volatile
 17126     0669  1903               	btfsc	3,2
 17127     066A  2E8D               	goto	i1l6608
 17128     066B  3009               	movlw	9
 17129     066C  0269               	subwf	_keyboardCommandCount,w	;volatile
 17130     066D  1803               	skipnc
 17131     066E  2E8D               	goto	i1l6608
 17132                           
 17133                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 17134     066F  0869               	movf	_keyboardCommandCount,w	;volatile
 17135     0670  3EFF               	addlw	255
 17136     0671  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 17137                           
 17138                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 17139     0672  0022               	movlb	2	; select bank2
 17140     0673  0835               	movf	_keyboardCommand^(0+256),w	;volatile
 17141     0674  0020               	movlb	0	; select bank0
 17142     0675  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17143     0676  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 17144     0677  2E79               	goto	u635_24
 17145     0678                     u635_25:
 17146     0678  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 17147     0679                     u635_24:
 17148     0679  0B89               	decfsz	9,f
 17149     067A  2E78               	goto	u635_25
 17150     067B  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 17151     067C  2E7F               	goto	u636_20
 17152     067D  3001               	movlw	1
 17153     067E  2E80               	goto	u637_20
 17154     067F                     u636_20:
 17155     067F  3000               	movlw	0
 17156     0680                     u637_20:
 17157     0680  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 17158                           
 17159                           ;ps2_keyboard.c: 92:             if(bit) {
 17160     0681  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 17161     0682  1903               	btfsc	3,2
 17162     0683  2E94               	goto	i1l1100
 17163                           
 17164                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 17165     0684  0022               	movlb	2	; select bank2
 17166     0685  168C               	bsf	12,5	;volatile
 17167                           
 17168                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 17169     0686  3001               	movlw	1
 17170     0687  0020               	movlb	0	; select bank0
 17171     0688  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17172     0689  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17173     068A  0023               	movlb	3	; select bank3
 17174     068B  07DD               	addwf	_keyboardCommandOnes^(0+384),f	;volatile
 17175                           
 17176                           ;ps2_keyboard.c: 95:             } else {
 17177     068C  2E9F               	goto	i1l6614
 17178     068D                     i1l6608:	
 17179                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 17180                           
 17181     068D  3009               	movlw	9
 17182     068E  0669               	xorwf	_keyboardCommandCount,w	;volatile
 17183     068F  1D03               	btfss	3,2
 17184     0690  2E99               	goto	i1l6612
 17185                           
 17186                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 17187     0691  0023               	movlb	3	; select bank3
 17188     0692  1C5D               	btfss	_keyboardCommandOnes^(0+384),0	;volatile
 17189     0693  2E97               	goto	i1l1103
 17190     0694                     i1l1100:	
 17191                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 17192                           
 17193     0694  0022               	movlb	2	; select bank2
 17194     0695  128C               	bcf	12,5	;volatile
 17195     0696  2E9F               	goto	i1l6614
 17196     0697                     i1l1103:	
 17197                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 17198                           
 17199     0697  0022               	movlb	2	; select bank2
 17200     0698  2E9E               	goto	L19
 17201     0699                     i1l6612:
 17202     0699  300A               	movlw	10
 17203     069A  0669               	xorwf	_keyboardCommandCount,w	;volatile
 17204     069B  1D03               	btfss	3,2
 17205     069C  2E9F               	goto	i1l6614
 17206                           
 17207                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 17208     069D  0021               	movlb	1	; select bank1
 17209     069E                     L19:
 17210     069E  168C               	bsf	12,5	;volatile
 17211     069F                     i1l6614:
 17212                           
 17213                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 17214     069F  3001               	movlw	1
 17215     06A0  0020               	movlb	0	; select bank0
 17216     06A1  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17217     06A2  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17218     06A3  07E9               	addwf	_keyboardCommandCount,f	;volatile
 17219                           
 17220                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 17221     06A4  3001               	movlw	1
 17222     06A5  0023               	movlb	3	; select bank3
 17223     06A6  02DE               	subwf	_keyboardCommandBits^(0+384),f	;volatile
 17224                           
 17225                           ;ps2_keyboard.c: 109:     } else {
 17226     06A7  0008               	return
 17227     06A8                     i1l6616:
 17228                           
 17229                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 17230     06A8  319B  2331  3186   	fcall	_SysTime_GetCurrentTimeMs
 17231     06AB  083C               	movf	_prevTimeMs^(0+384),w	;volatile
 17232     06AC  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 17233     06AD  0020               	movlb	0	; select bank0
 17234     06AE  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17235     06AF  0023               	movlb	3	; select bank3
 17236     06B0  083D               	movf	(_prevTimeMs+1)^(0+384),w	;volatile
 17237     06B1  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 17238     06B2  0020               	movlb	0	; select bank0
 17239     06B3  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 17240     06B4  0023               	movlb	3	; select bank3
 17241     06B5  083E               	movf	(_prevTimeMs+2)^(0+384),w	;volatile
 17242     06B6  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 17243     06B7  0020               	movlb	0	; select bank0
 17244     06B8  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 17245     06B9  0023               	movlb	3	; select bank3
 17246     06BA  083F               	movf	(_prevTimeMs+3)^(0+384),w	;volatile
 17247     06BB  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 17248     06BC  0020               	movlb	0	; select bank0
 17249     06BD  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 17250     06BE  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 17251     06BF  1D03               	btfss	3,2
 17252     06C0  2ECB               	goto	i1l6618
 17253     06C1  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 17254     06C2  1D03               	btfss	3,2
 17255     06C3  2ECB               	goto	i1l6618
 17256     06C4  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 17257     06C5  1D03               	btfss	3,2
 17258     06C6  2ECB               	goto	i1l6618
 17259     06C7  30FA               	movlw	250
 17260     06C8  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 17261     06C9  1C03               	btfss	3,0
 17262     06CA  2F3B               	goto	i1l6670
 17263     06CB                     i1l6618:
 17264                           
 17265                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 17266     06CB  3001               	movlw	1
 17267     06CC  0022               	movlb	2	; select bank2
 17268     06CD  00B9               	movwf	_keyboardState^(0+256)	;volatile
 17269     06CE  2F3B               	goto	i1l6670
 17270     06CF                     i1l6620:
 17271                           
 17272                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 17273     06CF  0022               	movlb	2	; select bank2
 17274     06D0  01B8               	clrf	_keyboardIndexData^(0+256)	;volatile
 17275                           
 17276                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 17277     06D1  01B7               	clrf	_keyboardOnesCount^(0+256)	;volatile
 17278                           
 17279                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 17280     06D2  0023               	movlb	3	; select bank3
 17281     06D3  01E5               	clrf	_keyboardScanCode^(0+384)
 17282     06D4                     i1l6622:
 17283                           
 17284                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 17285     06D4  3002               	movlw	2
 17286     06D5  2F10               	goto	L22
 17287     06D6                     i1l6624:	
 17288                           ;ps2_keyboard.c: 119:                 break;
 17289                           
 17290                           
 17291                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 17292     06D6  3000               	movlw	0
 17293     06D7  1A8C               	btfsc	12,5	;volatile
 17294     06D8  3001               	movlw	1
 17295     06D9  0022               	movlb	2	; select bank2
 17296     06DA  00B6               	movwf	_keyboardData^(0+256)	;volatile
 17297                           
 17298                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 17299     06DB  0836               	movf	_keyboardData^(0+256),w	;volatile
 17300     06DC  0020               	movlb	0	; select bank0
 17301     06DD  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17302     06DE  0022               	movlb	2	; select bank2
 17303     06DF  0A38               	incf	_keyboardIndexData^(0+256),w	;volatile
 17304     06E0  0020               	movlb	0	; select bank0
 17305     06E1  2EE3               	goto	u643_24
 17306     06E2                     u643_25:
 17307     06E2  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 17308     06E3                     u643_24:
 17309     06E3  0B89               	decfsz	9,f
 17310     06E4  2EE2               	goto	u643_25
 17311     06E5  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17312     06E6  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 17313     06E7  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 17314     06E8  0023               	movlb	3	; select bank3
 17315     06E9  04E5               	iorwf	_keyboardScanCode^(0+384),f
 17316                           
 17317                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 17318     06EA  0022               	movlb	2	; select bank2
 17319     06EB  0836               	movf	_keyboardData^(0+256),w	;volatile
 17320     06EC  0020               	movlb	0	; select bank0
 17321     06ED  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17322     06EE  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17323     06EF  0022               	movlb	2	; select bank2
 17324     06F0  07B7               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 17325                           
 17326                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 17327     06F1  3001               	movlw	1
 17328     06F2  0020               	movlb	0	; select bank0
 17329     06F3  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17330     06F4  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17331     06F5  0022               	movlb	2	; select bank2
 17332     06F6  07B8               	addwf	_keyboardIndexData^(0+256),f	;volatile
 17333                           
 17334                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 17335     06F7  3008               	movlw	8
 17336     06F8  0638               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 17337     06F9  1D03               	btfss	3,2
 17338     06FA  2ED4               	goto	i1l6622
 17339                           
 17340                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 17341     06FB  3003               	movlw	3
 17342     06FC  2F11               	goto	L21
 17343     06FD                     i1l6638:	
 17344                           ;ps2_keyboard.c: 127:                 } else {
 17345                           
 17346                           
 17347                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 17348     06FD  3000               	movlw	0
 17349     06FE  1A8C               	btfsc	12,5	;volatile
 17350     06FF  3001               	movlw	1
 17351     0700  0022               	movlb	2	; select bank2
 17352     0701  00B6               	movwf	_keyboardData^(0+256)	;volatile
 17353                           
 17354                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 17355     0702  0836               	movf	_keyboardData^(0+256),w	;volatile
 17356     0703  0020               	movlb	0	; select bank0
 17357     0704  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17358     0705  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17359     0706  0022               	movlb	2	; select bank2
 17360     0707  07B7               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 17361                           
 17362                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 17363     0708  1C37               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 17364     0709  2F0C               	goto	u645_20
 17365     070A  3001               	movlw	1
 17366     070B  2F0D               	goto	u646_20
 17367     070C                     u645_20:
 17368     070C  3000               	movlw	0
 17369     070D                     u646_20:
 17370     070D  0023               	movlb	3	; select bank3
 17371     070E  00E1               	movwf	_keyboardScanCodeValid^(0+384)	;volatile
 17372                           
 17373                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 17374     070F  3004               	movlw	4
 17375     0710                     L22:
 17376     0710  0022               	movlb	2	; select bank2
 17377     0711                     L21:
 17378     0711  00B9               	movwf	_keyboardState^(0+256)	;volatile
 17379                           
 17380                           ;ps2_keyboard.c: 136:                 break;
 17381     0712  2F53               	goto	i1l6672
 17382     0713                     i1l6646:
 17383                           
 17384                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 17385     0713  30E0               	movlw	224
 17386     0714  0023               	movlb	3	; select bank3
 17387     0715  0665               	xorwf	_keyboardScanCode^(0+384),w
 17388     0716  1D03               	btfss	3,2
 17389     0717  2F1B               	goto	i1l6650
 17390                           
 17391                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 17392     0718  3001               	movlw	1
 17393     0719  00E0               	movwf	_keyboardIsExtend^(0+384)	;volatile
 17394                           
 17395                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 17396     071A  2F38               	goto	i1l6664
 17397     071B                     i1l6650:
 17398     071B  30F0               	movlw	240
 17399     071C  0665               	xorwf	_keyboardScanCode^(0+384),w
 17400     071D  1D03               	btfss	3,2
 17401     071E  2F22               	goto	i1l6654
 17402                           
 17403                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 17404     071F  3001               	movlw	1
 17405     0720  00DF               	movwf	_keyboardIsBreak^(0+384)	;volatile
 17406                           
 17407                           ;ps2_keyboard.c: 142:                 } else {
 17408     0721  2F38               	goto	i1l6664
 17409     0722                     i1l6654:
 17410                           
 17411                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 17412     0722  085F               	movf	_keyboardIsBreak^(0+384),w	;volatile
 17413     0723  00E7               	movwf	(_keyboardScanCode^(0+384)+2)
 17414                           
 17415                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 17416     0724  0860               	movf	_keyboardIsExtend^(0+384),w	;volatile
 17417     0725  00E6               	movwf	(_keyboardScanCode^(0+384)+1)
 17418                           
 17419                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 17420     0726  0861               	movf	_keyboardScanCodeValid^(0+384),w	;volatile
 17421     0727  1903               	btfsc	3,2
 17422     0728  2F35               	goto	i1l6660
 17423                           
 17424                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 17425     0729  3091               	movlw	145
 17426     072A  0020               	movlb	0	; select bank0
 17427     072B  00D5               	movwf	i1GenericQueue_Enqueue@q
 17428     072C  3023               	movlw	35
 17429     072D  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 17430     072E  30E5               	movlw	low _keyboardScanCode
 17431     072F  00D7               	movwf	i1GenericQueue_Enqueue@item
 17432     0730  3001               	movlw	high _keyboardScanCode
 17433     0731  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 17434     0732  3195  257E  3186   	fcall	i1_GenericQueue_Enqueue
 17435     0735                     i1l6660:
 17436                           
 17437                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 17438     0735  0023               	movlb	3	; select bank3
 17439     0736  01DF               	clrf	_keyboardIsBreak^(0+384)	;volatile
 17440                           
 17441                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 17442     0737  01E0               	clrf	_keyboardIsExtend^(0+384)	;volatile
 17443     0738                     i1l6664:
 17444                           
 17445                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 17446     0738  0022               	movlb	2	; select bank2
 17447     0739  01B9               	clrf	_keyboardState^(0+256)	;volatile
 17448                           
 17449                           ;ps2_keyboard.c: 152:                 break;
 17450     073A  2F53               	goto	i1l6672
 17451     073B                     i1l6670:
 17452     073B  0022               	movlb	2	; select bank2
 17453     073C  0839               	movf	_keyboardState^(0+256),w	;volatile
 17454     073D  0020               	movlb	0	; select bank0
 17455     073E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 17456     073F  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 17457                           
 17458                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17459                           ; Switch size 1, requested type "simple"
 17460                           ; Number of cases is 1, Range of values is 0 to 0
 17461                           ; switch strategies available:
 17462                           ; Name         Instructions Cycles
 17463                           ; simple_byte            4     3 (average)
 17464                           ; direct_byte            8     6 (fixed)
 17465                           ; jumptable            260     6 (fixed)
 17466                           ;	Chosen strategy is simple_byte
 17467     0740  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 17468     0741  3A00               	xorlw	0	; case 0
 17469     0742  1903               	skipnz
 17470     0743  2F45               	goto	i1l7136
 17471     0744  2F38               	goto	i1l6664
 17472     0745                     i1l7136:
 17473                           
 17474                           ; Switch size 1, requested type "simple"
 17475                           ; Number of cases is 4, Range of values is 1 to 4
 17476                           ; switch strategies available:
 17477                           ; Name         Instructions Cycles
 17478                           ; simple_byte           13     7 (average)
 17479                           ; direct_byte           17     9 (fixed)
 17480                           ; jumptable            263     9 (fixed)
 17481                           ;	Chosen strategy is simple_byte
 17482     0745  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 17483     0746  3A01               	xorlw	1	; case 1
 17484     0747  1903               	skipnz
 17485     0748  2ECF               	goto	i1l6620
 17486     0749  3A03               	xorlw	3	; case 2
 17487     074A  1903               	skipnz
 17488     074B  2ED6               	goto	i1l6624
 17489     074C  3A01               	xorlw	1	; case 3
 17490     074D  1903               	skipnz
 17491     074E  2EFD               	goto	i1l6638
 17492     074F  3A07               	xorlw	7	; case 4
 17493     0750  1903               	skipnz
 17494     0751  2F13               	goto	i1l6646
 17495     0752  2F38               	goto	i1l6664
 17496     0753                     i1l6672:
 17497                           
 17498                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 17499     0753  319B  2331         	fcall	_SysTime_GetCurrentTimeMs
 17500     0755  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 17501     0756  00BF               	movwf	(_prevTimeMs+3)^(0+384)	;volatile
 17502     0757  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 17503     0758  00BE               	movwf	(_prevTimeMs+2)^(0+384)	;volatile
 17504     0759  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 17505     075A  00BD               	movwf	(_prevTimeMs+1)^(0+384)	;volatile
 17506     075B  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 17507     075C  00BC               	movwf	_prevTimeMs^(0+384)	;volatile
 17508     075D  0008               	return
 17509     075E                     __end_of_PS2Keyboard_ClockInterrupt:
 17510                           
 17511                           	psect	text99
 17512     157E                     __ptext99:	
 17513 ;; *************** function i1_GenericQueue_Enqueue *****************
 17514 ;; Defined at:
 17515 ;;		line 19 in file "generic_queue.c"
 17516 ;; Parameters:    Size  Location     Type
 17517 ;;  q               2    5[BANK0 ] PTR struct .
 17518 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 17519 ;;  item            2    7[BANK0 ] PTR const void 
 17520 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
 17521 ;; Auto vars:     Size  Location     Type
 17522 ;;		None
 17523 ;; Return value:  Size  Location     Type
 17524 ;;                  1    wreg      void 
 17525 ;; Registers used:
 17526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17527 ;; Tracked objects:
 17528 ;;		On entry : 1F/0
 17529 ;;		On exit  : 1F/0
 17530 ;;		Unchanged: 0/0
 17531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17532 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;Total ram usage:        7 bytes
 17537 ;; Hardware stack levels used: 1
 17538 ;; Hardware stack levels required when called: 1
 17539 ;; This function calls:
 17540 ;;		i1_GenericQueue_IsFull
 17541 ;;		i1___awmod
 17542 ;;		i1___wmul
 17543 ;;		i1_memcpy
 17544 ;; This function is called by:
 17545 ;;		_PS2Keyboard_ClockInterrupt
 17546 ;; This function uses a non-reentrant model
 17547 ;;
 17548                           
 17549     157E                     i1_GenericQueue_Enqueue:	
 17550                           ;psect for function i1_GenericQueue_Enqueue
 17551                           
 17552                           
 17553                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 17554                           
 17555                           ;incstack = 0
 17556                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17557     157E  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 17558     157F  00F1               	movwf	i1GenericQueue_IsFull@q+1
 17559     1580  0855               	movf	i1GenericQueue_Enqueue@q,w
 17560     1581  00F0               	movwf	i1GenericQueue_IsFull@q
 17561     1582  319C  2405  3195   	fcall	i1_GenericQueue_IsFull
 17562     1585  0870               	movf	?i1_GenericQueue_IsFull,w
 17563     1586  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 17564     1587  1D03               	btfss	3,2
 17565     1588  0008               	return
 17566                           
 17567                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 17568     1589  0855               	movf	i1GenericQueue_Enqueue@q,w
 17569     158A  3E5D               	addlw	93
 17570     158B  0086               	movwf	6
 17571     158C  3000               	movlw	0
 17572     158D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17573     158E  0087               	movwf	7
 17574     158F  0801               	movf	1,w
 17575     1590  00D9               	movwf	??i1_GenericQueue_Enqueue
 17576     1591  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 17577     1592  0859               	movf	??i1_GenericQueue_Enqueue,w
 17578     1593  00F0               	movwf	i1___wmul@multiplier
 17579     1594  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 17580     1595  00F1               	movwf	i1___wmul@multiplier+1
 17581     1596  0855               	movf	i1GenericQueue_Enqueue@q,w
 17582     1597  3E5A               	addlw	90
 17583     1598  0086               	movwf	6
 17584     1599  3000               	movlw	0
 17585     159A  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17586     159B  0087               	movwf	7
 17587     159C  3F40               	moviw [0]fsr1
 17588     159D  00F2               	movwf	i1___wmul@multiplicand
 17589     159E  3F41               	moviw [1]fsr1
 17590     159F  00F3               	movwf	i1___wmul@multiplicand+1
 17591     15A0  319C  24EE  3195   	fcall	i1___wmul
 17592     15A3  0870               	movf	?i1___wmul,w
 17593     15A4  0755               	addwf	i1GenericQueue_Enqueue@q,w
 17594     15A5  00F6               	movwf	i1memcpy@d1
 17595     15A6  0871               	movf	?i1___wmul+1,w
 17596     15A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17597     15A8  00F7               	movwf	i1memcpy@d1+1
 17598     15A9  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 17599     15AA  00F9               	movwf	i1memcpy@s1+1
 17600     15AB  0857               	movf	i1GenericQueue_Enqueue@item,w
 17601     15AC  00F8               	movwf	i1memcpy@s1
 17602     15AD  0855               	movf	i1GenericQueue_Enqueue@q,w
 17603     15AE  3E5A               	addlw	90
 17604     15AF  0086               	movwf	6
 17605     15B0  3000               	movlw	0
 17606     15B1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17607     15B2  0087               	movwf	7
 17608     15B3  3F40               	moviw [0]fsr1
 17609     15B4  00FA               	movwf	i1memcpy@n
 17610     15B5  3F41               	moviw [1]fsr1
 17611     15B6  00FB               	movwf	i1memcpy@n+1
 17612     15B7  319E  269C  3195   	fcall	i1_memcpy
 17613                           
 17614                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 17615     15BA  300F               	movlw	15
 17616     15BB  00F0               	movwf	i1___awmod@divisor
 17617     15BC  3000               	movlw	0
 17618     15BD  00F1               	movwf	i1___awmod@divisor+1
 17619     15BE  0855               	movf	i1GenericQueue_Enqueue@q,w
 17620     15BF  3E5D               	addlw	93
 17621     15C0  0086               	movwf	6
 17622     15C1  3000               	movlw	0
 17623     15C2  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17624     15C3  0087               	movwf	7
 17625     15C4  0801               	movf	1,w
 17626     15C5  3E01               	addlw	1
 17627     15C6  00F2               	movwf	i1___awmod@dividend
 17628     15C7  3000               	movlw	0
 17629     15C8  1803               	skipnc
 17630     15C9  3001               	movlw	1
 17631     15CA  00F3               	movwf	i1___awmod@dividend+1
 17632     15CB  3191  2170         	fcall	i1___awmod
 17633     15CD  0870               	movf	?i1___awmod,w
 17634     15CE  00D9               	movwf	??i1_GenericQueue_Enqueue
 17635     15CF  0855               	movf	i1GenericQueue_Enqueue@q,w
 17636     15D0  3E5D               	addlw	93
 17637     15D1  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 17638     15D2  3000               	movlw	0
 17639     15D3  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17640     15D4  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 17641     15D5  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 17642     15D6  0086               	movwf	6
 17643     15D7  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 17644     15D8  0087               	movwf	7
 17645     15D9  0859               	movf	??i1_GenericQueue_Enqueue,w
 17646     15DA  0081               	movwf	1
 17647                           
 17648                           ;generic_queue.c: 23:         q->size++;
 17649     15DB  3001               	movlw	1
 17650     15DC  00D9               	movwf	??i1_GenericQueue_Enqueue
 17651     15DD  0855               	movf	i1GenericQueue_Enqueue@q,w
 17652     15DE  3E5E               	addlw	94
 17653     15DF  0086               	movwf	6
 17654     15E0  3000               	movlw	0
 17655     15E1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 17656     15E2  0087               	movwf	7
 17657     15E3  0859               	movf	??i1_GenericQueue_Enqueue,w
 17658     15E4  0781               	addwf	1,f
 17659     15E5  0008               	return
 17660     15E6                     __end_ofi1_GenericQueue_Enqueue:
 17661                           
 17662                           	psect	text100
 17663     1E9C                     __ptext100:	
 17664 ;; *************** function i1_memcpy *****************
 17665 ;; Defined at:
 17666 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 17667 ;; Parameters:    Size  Location     Type
 17668 ;;  d1              2    6[COMMON] PTR void 
 17669 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17670 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 17671 ;;  s1              2    8[COMMON] PTR const void 
 17672 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2928(1), 
 17673 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17674 ;;  n               2   10[COMMON] unsigned int 
 17675 ;; Auto vars:     Size  Location     Type
 17676 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 17677 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2928(1), 
 17678 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 17679 ;;  d               2    0[BANK0 ] PTR unsigned char 
 17680 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 17681 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 17682 ;;  tmp             1    4[BANK0 ] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  2    6[COMMON] PTR void 
 17685 ;; Registers used:
 17686 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17687 ;; Tracked objects:
 17688 ;;		On entry : 1F/0
 17689 ;;		On exit  : 1F/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17692 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17695 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17696 ;;Total ram usage:       11 bytes
 17697 ;; Hardware stack levels used: 1
 17698 ;; This function calls:
 17699 ;;		Nothing
 17700 ;; This function is called by:
 17701 ;;		_USBCtrlEPService
 17702 ;;		i1_GenericQueue_Enqueue
 17703 ;; This function uses a non-reentrant model
 17704 ;;
 17705                           
 17706     1E9C                     i1_memcpy:	
 17707                           ;psect for function i1_memcpy
 17708                           
 17709                           
 17710                           ;incstack = 0
 17711                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 17712     1E9C  0879               	movf	i1memcpy@s1+1,w
 17713     1E9D  00D3               	movwf	i1memcpy@s+1
 17714     1E9E  0878               	movf	i1memcpy@s1,w
 17715     1E9F  00D2               	movwf	i1memcpy@s
 17716     1EA0  0877               	movf	i1memcpy@d1+1,w
 17717     1EA1  00D1               	movwf	i1memcpy@d+1
 17718     1EA2  0876               	movf	i1memcpy@d1,w
 17719     1EA3  00D0               	movwf	i1memcpy@d
 17720     1EA4                     i1l4828:
 17721     1EA4  3001               	movlw	1
 17722     1EA5  02FA               	subwf	i1memcpy@n,f
 17723     1EA6  3000               	movlw	0
 17724     1EA7  3BFB               	subwfb	i1memcpy@n+1,f
 17725     1EA8  0A7A               	incf	i1memcpy@n,w
 17726     1EA9  1903               	btfsc	3,2
 17727     1EAA  0A7B               	incf	i1memcpy@n+1,w
 17728     1EAB  1903               	btfsc	3,2
 17729     1EAC  0008               	return
 17730     1EAD  0852               	movf	i1memcpy@s,w
 17731     1EAE  0086               	movwf	6
 17732     1EAF  0853               	movf	i1memcpy@s+1,w
 17733     1EB0  0087               	movwf	7
 17734     1EB1  0801               	movf	1,w
 17735     1EB2  00D4               	movwf	i1memcpy@tmp
 17736     1EB3  3001               	movlw	1
 17737     1EB4  07D2               	addwf	i1memcpy@s,f
 17738     1EB5  3000               	movlw	0
 17739     1EB6  3DD3               	addwfc	i1memcpy@s+1,f
 17740     1EB7  0850               	movf	i1memcpy@d,w
 17741     1EB8  0086               	movwf	6
 17742     1EB9  0851               	movf	i1memcpy@d+1,w
 17743     1EBA  0087               	movwf	7
 17744     1EBB  0854               	movf	i1memcpy@tmp,w
 17745     1EBC  0081               	movwf	1
 17746     1EBD  3001               	movlw	1
 17747     1EBE  07D0               	addwf	i1memcpy@d,f
 17748     1EBF  3000               	movlw	0
 17749     1EC0  3DD1               	addwfc	i1memcpy@d+1,f
 17750     1EC1  2EA4               	goto	i1l4828
 17751     1EC2                     __end_ofi1_memcpy:
 17752                           
 17753                           	psect	text101
 17754     1CEE                     __ptext101:	
 17755 ;; *************** function i1___wmul *****************
 17756 ;; Defined at:
 17757 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 17758 ;; Parameters:    Size  Location     Type
 17759 ;;  multiplier      2    0[COMMON] unsigned int 
 17760 ;;  multiplicand    2    2[COMMON] unsigned int 
 17761 ;; Auto vars:     Size  Location     Type
 17762 ;;  product         2    4[COMMON] unsigned int 
 17763 ;; Return value:  Size  Location     Type
 17764 ;;                  2    0[COMMON] unsigned int 
 17765 ;; Registers used:
 17766 ;;		wreg, status,2, status,0
 17767 ;; Tracked objects:
 17768 ;;		On entry : 1F/0
 17769 ;;		On exit  : 1F/0
 17770 ;;		Unchanged: 1F/0
 17771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17776 ;;Total ram usage:        6 bytes
 17777 ;; Hardware stack levels used: 1
 17778 ;; This function calls:
 17779 ;;		Nothing
 17780 ;; This function is called by:
 17781 ;;		i1_GenericQueue_Enqueue
 17782 ;; This function uses a non-reentrant model
 17783 ;;
 17784                           
 17785     1CEE                     i1___wmul:	
 17786                           ;psect for function i1___wmul
 17787                           
 17788                           
 17789                           ;incstack = 0
 17790                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 17791     1CEE  01F4               	clrf	i1___wmul@product
 17792     1CEF  01F5               	clrf	i1___wmul@product+1
 17793     1CF0                     i1l4770:
 17794     1CF0  1C70               	btfss	i1___wmul@multiplier,0
 17795     1CF1  2CF6               	goto	i1l1306
 17796     1CF2  0872               	movf	i1___wmul@multiplicand,w
 17797     1CF3  07F4               	addwf	i1___wmul@product,f
 17798     1CF4  0873               	movf	i1___wmul@multiplicand+1,w
 17799     1CF5  3DF5               	addwfc	i1___wmul@product+1,f
 17800     1CF6                     i1l1306:
 17801     1CF6  3001               	movlw	1
 17802     1CF7                     u390_25:
 17803     1CF7  35F2               	lslf	i1___wmul@multiplicand,f
 17804     1CF8  0DF3               	rlf	i1___wmul@multiplicand+1,f
 17805     1CF9  0B89               	decfsz	9,f
 17806     1CFA  2CF7               	goto	u390_25
 17807     1CFB  3001               	movlw	1
 17808     1CFC                     u391_25:
 17809     1CFC  36F1               	lsrf	i1___wmul@multiplier+1,f
 17810     1CFD  0CF0               	rrf	i1___wmul@multiplier,f
 17811     1CFE  0B89               	decfsz	9,f
 17812     1CFF  2CFC               	goto	u391_25
 17813     1D00  0870               	movf	i1___wmul@multiplier,w
 17814     1D01  0471               	iorwf	i1___wmul@multiplier+1,w
 17815     1D02  1D03               	btfss	3,2
 17816     1D03  2CF0               	goto	i1l4770
 17817     1D04  0875               	movf	i1___wmul@product+1,w
 17818     1D05  00F1               	movwf	?i1___wmul+1
 17819     1D06  0874               	movf	i1___wmul@product,w
 17820     1D07  00F0               	movwf	?i1___wmul
 17821     1D08  0008               	return
 17822     1D09                     __end_ofi1___wmul:
 17823                           
 17824                           	psect	text102
 17825     1170                     __ptext102:	
 17826 ;; *************** function i1___awmod *****************
 17827 ;; Defined at:
 17828 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 17829 ;; Parameters:    Size  Location     Type
 17830 ;;  divisor         2    0[COMMON] int 
 17831 ;;  dividend        2    2[COMMON] int 
 17832 ;; Auto vars:     Size  Location     Type
 17833 ;;  sign            1    6[COMMON] unsigned char 
 17834 ;;  counter         1    5[COMMON] unsigned char 
 17835 ;; Return value:  Size  Location     Type
 17836 ;;                  2    0[COMMON] int 
 17837 ;; Registers used:
 17838 ;;		wreg, status,2, status,0
 17839 ;; Tracked objects:
 17840 ;;		On entry : 1F/0
 17841 ;;		On exit  : 1F/0
 17842 ;;		Unchanged: 1F/0
 17843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17844 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17845 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17846 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17847 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17848 ;;Total ram usage:        7 bytes
 17849 ;; Hardware stack levels used: 1
 17850 ;; This function calls:
 17851 ;;		Nothing
 17852 ;; This function is called by:
 17853 ;;		i1_GenericQueue_Enqueue
 17854 ;; This function uses a non-reentrant model
 17855 ;;
 17856                           
 17857     1170                     i1___awmod:	
 17858                           ;psect for function i1___awmod
 17859                           
 17860                           
 17861                           ;incstack = 0
 17862                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 17863     1170  01F6               	clrf	i1___awmod@sign
 17864     1171  1FF3               	btfss	i1___awmod@dividend+1,7
 17865     1172  297A               	goto	i1l4790
 17866     1173  09F2               	comf	i1___awmod@dividend,f
 17867     1174  09F3               	comf	i1___awmod@dividend+1,f
 17868     1175  0AF2               	incf	i1___awmod@dividend,f
 17869     1176  1903               	skipnz
 17870     1177  0AF3               	incf	i1___awmod@dividend+1,f
 17871     1178  01F6               	clrf	i1___awmod@sign
 17872     1179  0AF6               	incf	i1___awmod@sign,f
 17873     117A                     i1l4790:
 17874     117A  1FF1               	btfss	i1___awmod@divisor+1,7
 17875     117B  2981               	goto	i1l4794
 17876     117C  09F0               	comf	i1___awmod@divisor,f
 17877     117D  09F1               	comf	i1___awmod@divisor+1,f
 17878     117E  0AF0               	incf	i1___awmod@divisor,f
 17879     117F  1903               	skipnz
 17880     1180  0AF1               	incf	i1___awmod@divisor+1,f
 17881     1181                     i1l4794:
 17882     1181  0870               	movf	i1___awmod@divisor,w
 17883     1182  0471               	iorwf	i1___awmod@divisor+1,w
 17884     1183  1903               	btfsc	3,2
 17885     1184  29A8               	goto	i1l4812
 17886     1185  01F5               	clrf	i1___awmod@counter
 17887     1186  0AF5               	incf	i1___awmod@counter,f
 17888     1187                     i1l4802:
 17889     1187  1BF1               	btfsc	i1___awmod@divisor+1,7
 17890     1188  2993               	goto	i1l4804
 17891     1189  3001               	movlw	1
 17892     118A                     u396_25:
 17893     118A  35F0               	lslf	i1___awmod@divisor,f
 17894     118B  0DF1               	rlf	i1___awmod@divisor+1,f
 17895     118C  0B89               	decfsz	9,f
 17896     118D  298A               	goto	u396_25
 17897     118E  3001               	movlw	1
 17898     118F  00F4               	movwf	??i1___awmod
 17899     1190  0874               	movf	??i1___awmod,w
 17900     1191  07F5               	addwf	i1___awmod@counter,f
 17901     1192  2987               	goto	i1l4802
 17902     1193                     i1l4804:
 17903     1193  0871               	movf	i1___awmod@divisor+1,w
 17904     1194  0273               	subwf	i1___awmod@dividend+1,w
 17905     1195  1D03               	skipz
 17906     1196  2999               	goto	u398_25
 17907     1197  0870               	movf	i1___awmod@divisor,w
 17908     1198  0272               	subwf	i1___awmod@dividend,w
 17909     1199                     u398_25:
 17910     1199  1C03               	skipc
 17911     119A  299F               	goto	i1l4808
 17912     119B  0870               	movf	i1___awmod@divisor,w
 17913     119C  02F2               	subwf	i1___awmod@dividend,f
 17914     119D  0871               	movf	i1___awmod@divisor+1,w
 17915     119E  3BF3               	subwfb	i1___awmod@dividend+1,f
 17916     119F                     i1l4808:
 17917     119F  3001               	movlw	1
 17918     11A0                     u399_25:
 17919     11A0  36F1               	lsrf	i1___awmod@divisor+1,f
 17920     11A1  0CF0               	rrf	i1___awmod@divisor,f
 17921     11A2  0B89               	decfsz	9,f
 17922     11A3  29A0               	goto	u399_25
 17923     11A4  3001               	movlw	1
 17924     11A5  02F5               	subwf	i1___awmod@counter,f
 17925     11A6  1D03               	btfss	3,2
 17926     11A7  2993               	goto	i1l4804
 17927     11A8                     i1l4812:
 17928     11A8  0876               	movf	i1___awmod@sign,w
 17929     11A9  1903               	btfsc	3,2
 17930     11AA  29B0               	goto	i1l4816
 17931     11AB  09F2               	comf	i1___awmod@dividend,f
 17932     11AC  09F3               	comf	i1___awmod@dividend+1,f
 17933     11AD  0AF2               	incf	i1___awmod@dividend,f
 17934     11AE  1903               	skipnz
 17935     11AF  0AF3               	incf	i1___awmod@dividend+1,f
 17936     11B0                     i1l4816:
 17937     11B0  0873               	movf	i1___awmod@dividend+1,w
 17938     11B1  00F1               	movwf	?i1___awmod+1
 17939     11B2  0872               	movf	i1___awmod@dividend,w
 17940     11B3  00F0               	movwf	?i1___awmod
 17941     11B4  0008               	return
 17942     11B5                     __end_ofi1___awmod:
 17943                           
 17944                           	psect	text103
 17945     1C05                     __ptext103:	
 17946 ;; *************** function i1_GenericQueue_IsFull *****************
 17947 ;; Defined at:
 17948 ;;		line 15 in file "generic_queue.c"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;  q               2    0[COMMON] PTR struct .
 17951 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 17952 ;; Auto vars:     Size  Location     Type
 17953 ;;		None
 17954 ;; Return value:  Size  Location     Type
 17955 ;;                  2    0[COMMON] int 
 17956 ;; Registers used:
 17957 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17958 ;; Tracked objects:
 17959 ;;		On entry : 1F/0
 17960 ;;		On exit  : 1F/0
 17961 ;;		Unchanged: 1F/0
 17962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17963 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17965 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17966 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17967 ;;Total ram usage:        4 bytes
 17968 ;; Hardware stack levels used: 1
 17969 ;; This function calls:
 17970 ;;		Nothing
 17971 ;; This function is called by:
 17972 ;;		i1_GenericQueue_Enqueue
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976     1C05                     i1_GenericQueue_IsFull:	
 17977                           ;psect for function i1_GenericQueue_IsFull
 17978                           
 17979                           
 17980                           ;generic_queue.c: 16:     return (q->size == 15);
 17981                           
 17982                           ;incstack = 0
 17983                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 17984     1C05  0870               	movf	i1GenericQueue_IsFull@q,w
 17985     1C06  3E5E               	addlw	94
 17986     1C07  0086               	movwf	6
 17987     1C08  3000               	movlw	0
 17988     1C09  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 17989     1C0A  0087               	movwf	7
 17990     1C0B  300F               	movlw	15
 17991     1C0C  0601               	xorwf	1,w
 17992     1C0D  1D03               	btfss	3,2
 17993     1C0E  2C11               	goto	u387_20
 17994     1C0F  3001               	movlw	1
 17995     1C10  2C12               	goto	u388_20
 17996     1C11                     u387_20:
 17997     1C11  3000               	movlw	0
 17998     1C12                     u388_20:
 17999     1C12  00F2               	movwf	??i1_GenericQueue_IsFull
 18000     1C13  01F3               	clrf	??i1_GenericQueue_IsFull+1
 18001     1C14  0872               	movf	??i1_GenericQueue_IsFull,w
 18002     1C15  00F0               	movwf	?i1_GenericQueue_IsFull
 18003     1C16  0873               	movf	??i1_GenericQueue_IsFull+1,w
 18004     1C17  00F1               	movwf	?i1_GenericQueue_IsFull+1
 18005     1C18  0008               	return
 18006     1C19                     __end_ofi1_GenericQueue_IsFull:
 18007                           
 18008                           	psect	text104
 18009     1B31                     __ptext104:	
 18010 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 18011 ;; Defined at:
 18012 ;;		line 19 in file "systime.c"
 18013 ;; Parameters:    Size  Location     Type
 18014 ;;		None
 18015 ;; Auto vars:     Size  Location     Type
 18016 ;;		None
 18017 ;; Return value:  Size  Location     Type
 18018 ;;                  4    0[COMMON] unsigned long 
 18019 ;; Registers used:
 18020 ;;		wreg
 18021 ;; Tracked objects:
 18022 ;;		On entry : 1E/2
 18023 ;;		On exit  : 1F/3
 18024 ;;		Unchanged: 0/0
 18025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18026 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18029 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18030 ;;Total ram usage:        4 bytes
 18031 ;; Hardware stack levels used: 1
 18032 ;; This function calls:
 18033 ;;		Nothing
 18034 ;; This function is called by:
 18035 ;;		_PS2Keyboard_DataInterrupt
 18036 ;;		_PS2Keyboard_ClockInterrupt
 18037 ;; This function uses a non-reentrant model
 18038 ;;
 18039                           
 18040     1B31                     _SysTime_GetCurrentTimeMs:	
 18041                           ;psect for function _SysTime_GetCurrentTimeMs
 18042                           
 18043                           
 18044                           ;systime.c: 21:     return timeMs;
 18045                           
 18046                           ;incstack = 0
 18047                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 18048     1B31  0023               	movlb	3	; select bank3
 18049     1B32  083B               	movf	(_timeMs+3)^(0+384),w
 18050     1B33  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 18051     1B34  083A               	movf	(_timeMs+2)^(0+384),w
 18052     1B35  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 18053     1B36  0839               	movf	(_timeMs+1)^(0+384),w
 18054     1B37  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 18055     1B38  0838               	movf	_timeMs^(0+384),w
 18056     1B39  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 18057     1B3A  0008               	return
 18058     1B3B                     __end_of_SysTime_GetCurrentTimeMs:
 18059                           
 18060                           	psect	text105
 18061     1D94                     __ptext105:	
 18062 ;; *************** function _EUSART_Transmit_ISR *****************
 18063 ;; Defined at:
 18064 ;;		line 197 in file "mcc_generated_files/eusart.c"
 18065 ;; Parameters:    Size  Location     Type
 18066 ;;		None
 18067 ;; Auto vars:     Size  Location     Type
 18068 ;;		None
 18069 ;; Return value:  Size  Location     Type
 18070 ;;                  1    wreg      void 
 18071 ;; Registers used:
 18072 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18073 ;; Tracked objects:
 18074 ;;		On entry : 1F/3
 18075 ;;		On exit  : 1C/0
 18076 ;;		Unchanged: 0/0
 18077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18080 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18082 ;;Total ram usage:        1 bytes
 18083 ;; Hardware stack levels used: 1
 18084 ;; This function calls:
 18085 ;;		Nothing
 18086 ;; This function is called by:
 18087 ;;		_EUSART_Initialize
 18088 ;;		_INTERRUPT_InterruptManager
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092     1D94                     _EUSART_Transmit_ISR:	
 18093                           ;psect for function _EUSART_Transmit_ISR
 18094                           
 18095                           
 18096                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 18097                           
 18098                           ;incstack = 0
 18099                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 18100     1D94  3008               	movlw	8
 18101     1D95  0022               	movlb	2	; select bank2
 18102     1D96  0247               	subwf	_eusartTxBufferRemaining^(0+256),w
 18103     1D97  1803               	skipnc
 18104     1D98  2DAF               	goto	i1l305
 18105                           
 18106                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 18107     1D99  0848               	movf	_eusartTxTail^(0+256),w
 18108     1D9A  3EB0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 18109     1D9B  0086               	movwf	6
 18110     1D9C  3001               	movlw	1	; select bank3/4
 18111     1D9D  0087               	movwf	7
 18112     1D9E  0801               	movf	1,w
 18113     1D9F  0023               	movlb	3	; select bank3
 18114     1DA0  009A               	movwf	26	;volatile
 18115     1DA1  3001               	movlw	1
 18116     1DA2  00F0               	movwf	??_EUSART_Transmit_ISR
 18117     1DA3  0870               	movf	??_EUSART_Transmit_ISR,w
 18118     1DA4  0022               	movlb	2	; select bank2
 18119     1DA5  07C8               	addwf	_eusartTxTail^(0+256),f	;volatile
 18120                           
 18121                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 18122     1DA6  3008               	movlw	8
 18123     1DA7  0248               	subwf	_eusartTxTail^(0+256),w
 18124     1DA8  1803               	btfsc	3,0
 18125                           
 18126                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 18127     1DA9  01C8               	clrf	_eusartTxTail^(0+256)	;volatile
 18128                           
 18129                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 18130     1DAA  3001               	movlw	1
 18131     1DAB  00F0               	movwf	??_EUSART_Transmit_ISR
 18132     1DAC  0870               	movf	??_EUSART_Transmit_ISR,w
 18133     1DAD  07C7               	addwf	_eusartTxBufferRemaining^(0+256),f	;volatile
 18134                           
 18135                           ;mcc_generated_files/eusart.c: 209:     }
 18136     1DAE  0008               	return
 18137     1DAF                     i1l305:	
 18138                           ;mcc_generated_files/eusart.c: 210:     else
 18139                           
 18140                           
 18141                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 18142     1DAF  0021               	movlb	1	; select bank1
 18143     1DB0  1211               	bcf	17,4	;volatile
 18144     1DB1  0008               	return
 18145     1DB2                     __end_of_EUSART_Transmit_ISR:
 18146                           
 18147                           	psect	text106
 18148     1F4F                     __ptext106:	
 18149 ;; *************** function _EUSART_Receive_ISR *****************
 18150 ;; Defined at:
 18151 ;;		line 216 in file "mcc_generated_files/eusart.c"
 18152 ;; Parameters:    Size  Location     Type
 18153 ;;		None
 18154 ;; Auto vars:     Size  Location     Type
 18155 ;;		None
 18156 ;; Return value:  Size  Location     Type
 18157 ;;                  1    wreg      void 
 18158 ;; Registers used:
 18159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18160 ;; Tracked objects:
 18161 ;;		On entry : 1F/3
 18162 ;;		On exit  : 0/0
 18163 ;;		Unchanged: 0/0
 18164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18169 ;;Total ram usage:        0 bytes
 18170 ;; Hardware stack levels used: 1
 18171 ;; Hardware stack levels required when called: 2
 18172 ;; This function calls:
 18173 ;;		NULL
 18174 ;;		_EUSART_DefaultErrorHandler
 18175 ;;		_EUSART_DefaultFramingErrorHandler
 18176 ;;		_EUSART_DefaultOverrunErrorHandler
 18177 ;;		_EUSART_RxDataHandler
 18178 ;; This function is called by:
 18179 ;;		_EUSART_Initialize
 18180 ;;		_INTERRUPT_InterruptManager
 18181 ;; This function uses a non-reentrant model
 18182 ;;
 18183                           
 18184     1F4F                     _EUSART_Receive_ISR:	
 18185                           ;psect for function _EUSART_Receive_ISR
 18186                           
 18187                           
 18188                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 18189                           
 18190                           ;incstack = 0
 18191                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18192     1F4F  0020               	movlb	0	; select bank0
 18193     1F50  086D               	movf	_eusartRxHead,w	;volatile
 18194     1F51  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18195     1F52  0086               	movwf	6
 18196     1F53  3001               	movlw	1	; select bank3/4
 18197     1F54  0087               	movwf	7
 18198     1F55  0181               	clrf	1
 18199                           
 18200                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 18201     1F56  0023               	movlb	3	; select bank3
 18202     1F57  1D1D               	btfss	29,2	;volatile
 18203     1F58  2F66               	goto	i1l6192
 18204                           
 18205                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 18206     1F59  0020               	movlb	0	; select bank0
 18207     1F5A  086D               	movf	_eusartRxHead,w	;volatile
 18208     1F5B  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18209     1F5C  0086               	movwf	6
 18210     1F5D  3001               	movlw	1	; select bank3/4
 18211     1F5E  0087               	movwf	7
 18212     1F5F  1481               	bsf	1,1
 18213                           
 18214                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 18215     1F60  0023               	movlb	3	; select bank3
 18216     1F61  0856               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 18217     1F62  008A               	movwf	10
 18218     1F63  0855               	movf	_EUSART_FramingErrorHandler^(0+384),w
 18219     1F64  000A               	callw
 18220     1F65  319F               	pagesel	$
 18221     1F66                     i1l6192:
 18222                           
 18223                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 18224     1F66  0023               	movlb	3	; select bank3
 18225     1F67  1C9D               	btfss	29,1	;volatile
 18226     1F68  2F76               	goto	i1l6198
 18227                           
 18228                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 18229     1F69  0020               	movlb	0	; select bank0
 18230     1F6A  086D               	movf	_eusartRxHead,w	;volatile
 18231     1F6B  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18232     1F6C  0086               	movwf	6
 18233     1F6D  3001               	movlw	1	; select bank3/4
 18234     1F6E  0087               	movwf	7
 18235     1F6F  1501               	bsf	1,2
 18236                           
 18237                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 18238     1F70  0023               	movlb	3	; select bank3
 18239     1F71  0854               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 18240     1F72  008A               	movwf	10
 18241     1F73  0853               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 18242     1F74  000A               	callw
 18243     1F75  319F               	pagesel	$
 18244     1F76                     i1l6198:
 18245                           
 18246                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 18247     1F76  0020               	movlb	0	; select bank0
 18248     1F77  086D               	movf	_eusartRxHead,w	;volatile
 18249     1F78  3EA0               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 18250     1F79  0086               	movwf	6
 18251     1F7A  3001               	movlw	1	; select bank3/4
 18252     1F7B  0087               	movwf	7
 18253     1F7C  0801               	movf	1,w
 18254     1F7D  1903               	btfsc	3,2
 18255     1F7E  2F86               	goto	i1l6202
 18256                           
 18257                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 18258     1F7F  0023               	movlb	3	; select bank3
 18259     1F80  0852               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 18260     1F81  008A               	movwf	10
 18261     1F82  0851               	movf	_EUSART_ErrorHandler^(0+384),w
 18262     1F83  000A               	callw
 18263     1F84  319F               	pagesel	$
 18264                           
 18265                           ;mcc_generated_files/eusart.c: 233:     } else {
 18266     1F85  0008               	return
 18267     1F86                     i1l6202:
 18268                           
 18269                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 18270     1F86  319C  245B         	fcall	_EUSART_RxDataHandler
 18271     1F88  0008               	return
 18272     1F89                     __end_of_EUSART_Receive_ISR:
 18273                           
 18274                           	psect	text107
 18275     1ACD                     __ptext107:	
 18276 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 18277 ;; Defined at:
 18278 ;;		line 252 in file "mcc_generated_files/eusart.c"
 18279 ;; Parameters:    Size  Location     Type
 18280 ;;		None
 18281 ;; Auto vars:     Size  Location     Type
 18282 ;;		None
 18283 ;; Return value:  Size  Location     Type
 18284 ;;                  1    wreg      void 
 18285 ;; Registers used:
 18286 ;;		None
 18287 ;; Tracked objects:
 18288 ;;		On entry : 1F/3
 18289 ;;		On exit  : 1F/3
 18290 ;;		Unchanged: 0/0
 18291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18296 ;;Total ram usage:        0 bytes
 18297 ;; Hardware stack levels used: 1
 18298 ;; This function calls:
 18299 ;;		Nothing
 18300 ;; This function is called by:
 18301 ;;		_EUSART_Initialize
 18302 ;;		_EUSART_Receive_ISR
 18303 ;; This function uses a non-reentrant model
 18304 ;;
 18305                           
 18306     1ACD                     _EUSART_DefaultOverrunErrorHandler:	
 18307                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 18308                           
 18309                           
 18310                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 18311                           
 18312                           ;incstack = 0
 18313                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 18314     1ACD  121D               	bcf	29,4	;volatile
 18315                           
 18316                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 18317     1ACE  161D               	bsf	29,4	;volatile
 18318     1ACF  0008               	return
 18319     1AD0                     __end_of_EUSART_DefaultOverrunErrorHandler:
 18320                           
 18321                           	psect	text108
 18322     1AC7                     __ptext108:	
 18323 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 18324 ;; Defined at:
 18325 ;;		line 250 in file "mcc_generated_files/eusart.c"
 18326 ;; Parameters:    Size  Location     Type
 18327 ;;		None
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;		None
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  1    wreg      void 
 18332 ;; Registers used:
 18333 ;;		None
 18334 ;; Tracked objects:
 18335 ;;		On entry : 1F/3
 18336 ;;		On exit  : 1F/3
 18337 ;;		Unchanged: 1E/0
 18338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;Total ram usage:        0 bytes
 18344 ;; Hardware stack levels used: 1
 18345 ;; This function calls:
 18346 ;;		Nothing
 18347 ;; This function is called by:
 18348 ;;		_EUSART_Initialize
 18349 ;;		_EUSART_Receive_ISR
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353     1AC7                     _EUSART_DefaultFramingErrorHandler:	
 18354                           ;psect for function _EUSART_DefaultFramingErrorHandler
 18355                           
 18356                           
 18357                           ;incstack = 0
 18358                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 18359     1AC7  0008               	return
 18360     1AC8                     __end_of_EUSART_DefaultFramingErrorHandler:
 18361                           
 18362                           	psect	text109
 18363     1ACA                     __ptext109:	
 18364 ;; *************** function _EUSART_DefaultErrorHandler *****************
 18365 ;; Defined at:
 18366 ;;		line 260 in file "mcc_generated_files/eusart.c"
 18367 ;; Parameters:    Size  Location     Type
 18368 ;;		None
 18369 ;; Auto vars:     Size  Location     Type
 18370 ;;		None
 18371 ;; Return value:  Size  Location     Type
 18372 ;;                  1    wreg      void 
 18373 ;; Registers used:
 18374 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18375 ;; Tracked objects:
 18376 ;;		On entry : 1F/3
 18377 ;;		On exit  : 1F/3
 18378 ;;		Unchanged: 0/0
 18379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18384 ;;Total ram usage:        0 bytes
 18385 ;; Hardware stack levels used: 1
 18386 ;; Hardware stack levels required when called: 1
 18387 ;; This function calls:
 18388 ;;		_EUSART_RxDataHandler
 18389 ;; This function is called by:
 18390 ;;		_EUSART_Initialize
 18391 ;;		_EUSART_Receive_ISR
 18392 ;; This function uses a non-reentrant model
 18393 ;;
 18394                           
 18395     1ACA                     _EUSART_DefaultErrorHandler:	
 18396                           ;psect for function _EUSART_DefaultErrorHandler
 18397                           
 18398                           
 18399                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 18400                           
 18401                           ;incstack = 0
 18402                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18403     1ACA  319C  245B         	fcall	_EUSART_RxDataHandler
 18404     1ACC  0008               	return
 18405     1ACD                     __end_of_EUSART_DefaultErrorHandler:
 18406                           
 18407                           	psect	text110
 18408     1C5B                     __ptext110:	
 18409 ;; *************** function _EUSART_RxDataHandler *****************
 18410 ;; Defined at:
 18411 ;;		line 240 in file "mcc_generated_files/eusart.c"
 18412 ;; Parameters:    Size  Location     Type
 18413 ;;		None
 18414 ;; Auto vars:     Size  Location     Type
 18415 ;;		None
 18416 ;; Return value:  Size  Location     Type
 18417 ;;                  1    wreg      void 
 18418 ;; Registers used:
 18419 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18420 ;; Tracked objects:
 18421 ;;		On entry : 1C/0
 18422 ;;		On exit  : 1F/3
 18423 ;;		Unchanged: 0/0
 18424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18429 ;;Total ram usage:        1 bytes
 18430 ;; Hardware stack levels used: 1
 18431 ;; This function calls:
 18432 ;;		Nothing
 18433 ;; This function is called by:
 18434 ;;		_EUSART_Receive_ISR
 18435 ;;		_EUSART_DefaultErrorHandler
 18436 ;; This function uses a non-reentrant model
 18437 ;;
 18438                           
 18439     1C5B                     _EUSART_RxDataHandler:	
 18440                           ;psect for function _EUSART_RxDataHandler
 18441                           
 18442                           
 18443                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 18444                           
 18445                           ;incstack = 0
 18446                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 18447     1C5B  0020               	movlb	0	; select bank0
 18448     1C5C  086D               	movf	_eusartRxHead,w
 18449     1C5D  3EA8               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 18450     1C5E  0086               	movwf	6
 18451     1C5F  3001               	movlw	1	; select bank3/4
 18452     1C60  0087               	movwf	7
 18453     1C61  0023               	movlb	3	; select bank3
 18454     1C62  0819               	movf	25,w	;volatile
 18455     1C63  0081               	movwf	1
 18456     1C64  3001               	movlw	1
 18457     1C65  00F0               	movwf	??_EUSART_RxDataHandler
 18458     1C66  0870               	movf	??_EUSART_RxDataHandler,w
 18459     1C67  0020               	movlb	0	; select bank0
 18460     1C68  07ED               	addwf	_eusartRxHead,f	;volatile
 18461                           
 18462                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 18463     1C69  3008               	movlw	8
 18464     1C6A  026D               	subwf	_eusartRxHead,w
 18465     1C6B  1803               	btfsc	3,0
 18466                           
 18467                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 18468     1C6C  01ED               	clrf	_eusartRxHead	;volatile
 18469                           
 18470                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 18471     1C6D  3001               	movlw	1
 18472     1C6E  00F0               	movwf	??_EUSART_RxDataHandler
 18473     1C6F  0870               	movf	??_EUSART_RxDataHandler,w
 18474     1C70  0023               	movlb	3	; select bank3
 18475     1C71  07E3               	addwf	_eusartRxCount^(0+384),f	;volatile
 18476     1C72  0008               	return
 18477     1C73                     __end_of_EUSART_RxDataHandler:
 18478     007E                     btemp	set	126	;btemp
 18479     007E                     int$flags	set	126
 18480     007E                     wtemp0	set	126
 18481     232C                     
 18482                           	psect	config
 18483                           
 18484                           ;Config register CONFIG1 @ 0x8007
 18485                           ;	Oscillator Selection Bits
 18486                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 18487                           ;	Watchdog Timer Enable
 18488                           ;	WDTE = OFF, WDT disabled
 18489                           ;	Power-up Timer Enable
 18490                           ;	PWRTE = OFF, PWRT disabled
 18491                           ;	MCLR Pin Function Select
 18492                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 18493                           ;	Flash Program Memory Code Protection
 18494                           ;	CP = OFF, Program memory code protection is disabled
 18495                           ;	Brown-out Reset Enable
 18496                           ;	BOREN = ON, Brown-out Reset enabled
 18497                           ;	Clock Out Enable
 18498                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 18499                           ;	Internal/External Switchover Mode
 18500                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 18501                           ;	Fail-Safe Clock Monitor Enable
 18502                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 18503     8007                     	org	32775
 18504     8007  3FE4               	dw	16356
 18505                           
 18506                           ;Config register CONFIG2 @ 0x8008
 18507                           ;	Flash Memory Self-Write Protection
 18508                           ;	WRT = OFF, Write protection off
 18509                           ;	CPU System Clock Selection Bit
 18510                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 18511                           ;	USB Low Speed Clock Selection bit
 18512                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 18513                           ;	PLL Multiplier Selection Bit
 18514                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 18515                           ;	PLL Enable Bit
 18516                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 18517                           ;	Stack Overflow/Underflow Reset Enable
 18518                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 18519                           ;	Brown-out Reset Voltage Selection
 18520                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 18521                           ;	Low-Power Brown Out Reset
 18522                           ;	LPBOR = OFF, Low-Power BOR is disabled
 18523                           ;	Low-Voltage Programming Enable
 18524                           ;	LVP = ON, Low-voltage programming enabled
 18525     8008                     	org	32776
 18526     8008  3FCF               	dw	16335

Data Sizes:
    Strings     9
    Constant    601
    Data        0
    BSS         186
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     67      72
    BANK2            79     36      79
    BANK3            80      0      77
    BANK4            80      0      50
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), keyboardScanCode(BANK3[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK3[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    memset@p	PTR unsigned char  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK2[3]), NULL(NULL[0]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    S2684$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2684$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S3597$buffer	PTR unsigned char  size(2) Largest target is 0

    S3597$source	PTR const unsigned char  size(2) Largest target is 0

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    snprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_snprintf(BANK1[2]), 

    snprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    snprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@scanCodeStr(BANK2[10]), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK2[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(2) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK2[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[28]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> snprintf@ap(BANK2[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_1(CODE[9]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 

    xtoa@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> snprintf@f(BANK2[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_snprintf
    _snprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _read_prec_or_width->___wmul
    _ctoa->_fputc
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_snprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   69708
                                             65 BANK1      2     2      0
                                             17 BANK2     19    19      0
                  _APP_KeyboardTasks
                       _EUSART_Write
                 _EUSART_is_tx_ready
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
                           _snprintf
 ---------------------------------------------------------------------------------
 (1) _snprintf                                            28    20      8   13505
                                             54 BANK1     11     3      8
                                              0 BANK2     17    17      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             7     4      3   12825
                                             47 BANK1      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           15    13      2   12477
                                             32 BANK1     15    13      2
                               _ctoa
                              _fputc
                 _read_prec_or_width
                               _xtoa
 ---------------------------------------------------------------------------------
 (4) _xtoa                                                10     8      2    3919
                                             22 BANK1     10     8      2
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  7     4      3    3498
                                             15 BANK1      7     4      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               5     3      2     126
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     6      1    1641
                                              8 BANK1      7     6      1
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   9     7      2    4895
                                             13 BANK1      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 9     7      2    1622
                                              8 BANK1      9     7      2
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1294
                                              0 BANK1      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0   10141
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    9680
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   43027
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     742
                                              0 BANK1      8     2      6
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    9506
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     156
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   31319
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3   10907
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    9870
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    9197
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    4590
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    2936
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           0     0      0   31892
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (10) _USBDeviceTasks                                      2     2      0   30636
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (11) i1_USBDeviceInit                                     8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (11) _USBWakeFromSuspend                                  1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBSuspend                                          1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USBStallHandler                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBIncrement1msInternalTimers                       1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlEPService                                    1     1      0   18041
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfSetupHandler                              1     1      0   17469
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (13) _USBCtrlEPServiceComplete                            4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (13) _USBCheckStdRequest                                  0     0      0   13292
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (14) _USBStdSetCfgHandler                                 5     5      0    4605
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (15) i1_memset                                            8     2      6     285
                                              0 COMMON     8     2      6
 ---------------------------------------------------------------------------------
 (14) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (14) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (14) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (11) _USER_USB_CALLBACK_EVENT_HANDLER                     6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (12) _USBCheckHIDRequest                                  0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetReportHandler                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _USBHIDCBSetIdleRateHandler                          4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (12) _APP_KeyboardInit                                    0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (13) i1_USBTransferOnePacket                             11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Init                                 4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (13) _USBEnableEndpoint                                   6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (14) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfOutHandler                                4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (13) _USBCtrlTrfRxService                                 6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (12) _USBCtrlTrfInHandler                                 5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (14) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (15) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (16) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (15) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _TMR2_ISR                                            0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _SysTimeInterrupt                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (11) _IOCAF5_ISR                                          0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2Keyboard_DataInterrupt                           0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (12) _IOCAF5_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_ISR                                          0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (12) _PS2Keyboard_ClockInterrupt                          6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (13) i1_GenericQueue_Enqueue                              7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (12) i1_memcpy                                           11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (14) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (14) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (14) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (13) _SysTime_GetCurrentTimeMs                            4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (12) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _EUSART_Receive_ISR                                  0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (11) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _EUSART_Write
   _EUSART_is_tx_ready
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer
   _snprintf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _fputc
             _putch
         _fputc
         _read_prec_or_width
           ___wmul
         _xtoa
           _pad
             _fputc
             _fputs
               _fputc
             _strlen

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     43      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F     24      4F       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      32      13       62.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     144      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     144      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon May 06 22:59:15 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1B28  
                                   _USB_SD_Ptr 18D3                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 1D3F                                  _USBDeviceInit 0CDA  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 09AD  
             __end_of_USBHIDCBSetReportHandler 1BB2                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l110 1BBB  
                  __end_of_USBStdGetDscHandler 0932                                            l541 1CCB  
                                          l299 1E84                                            _BDT 0020  
                                          l925 035A                       _GenericQueue_CopyToArray 144E  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                          _pad 112D                                     _USBSuspend 1C8B  
               ?_EUSART_SetFramingErrorHandler 00A8                                   ___awmod@sign 00AE  
                         USBStdSetCfgHandler@i 0059                           USBStdSetCfgHandler@p 0056  
                              _TMR2_Initialize 1BE1                                            wreg 0009  
                               _USBDeviceTasks 0E39                            ?_USBCheckHIDRequest 0070  
                          _GenericQueue_IsFull 07EC                                 _USBDeviceState 006C  
           __end_of_IOCAF5_SetInterruptHandler 1AF8                     _IOCAF5_SetInterruptHandler 1AF0  
                            main@scanCodeValid 0169                    ??_PS2Keyboard_DataInterrupt 0074  
                        ??_USBCtrlTrfRxService 0074                            _GenericQueue_Remove 0F0C  
                     USBEnableEndpoint@options 0077                    ?_PS2Keyboard_GetLastCommand 0070  
                                         l1306 1D11                                           l1235 1457  
                                         l5000 1F1F                                           l5002 1F3A  
                                         l5100 175C                     USBConfigureEndpoint@handle 0076  
                                         l5030 11CC                                           l5022 11C6  
                                         l5006 1F41                                           l5110 177E  
                                         l5032 11D8                                           l5040 11ED  
                                         l1841 13B7                                           l1825 113D  
                                         l5018 11BF                                           l5122 1358  
                                         l5044 11F5                                           l5036 11E4  
                                         l1844 13D5                                           l5052 1399  
                                         l1828 115B                                           l4342 12BD  
                                         l5054 13A2                                           l5126 1374  
                                         l5072 13E4                                           l5128 1386  
                                         l1873 0592                                           l4338 1296  
                                         l5058 13B2                                           l4442 1E15  
                                         l4450 1C3D                                           l5090 1743  
                                         l5082 1735                                           l1875 059E  
                                         l5420 1BD8                                           l5068 13B9  
                                         l5254 1E6A                                           l6222 1D74  
                                         ?_pad 00B7                                           l5272 0FC6  
                                         l5416 1BD2                                           l6224 1D75  
                                         l4448 1C31                                           l6240 0BDC  
                                         l5290 143C                                           l6170 1E99  
                                         l5602 0CE5                                           l6242 0BE5  
                                         l6234 0BC3                                           l7050 0B59  
                                         l7042 0B4C                                           l4732 1D0B  
                                         l5276 0FF0                                           l6156 1E79  
                                         l5444 05A0                                           l6252 0C20  
                                         l5294 144C                                           l5630 0D1C  
                                         l5454 05C9                                           l5446 05B4  
                                         l6254 0C25                                           l7062 0B94  
                                         l7070 0BA9                                           l4760 1165  
                                         l5472 0620                                           l5480 0635  
                                         l5464 05F6                                           l6256 0C2E  
                                         l7056 0B66                                           l7048 0B58  
                                         l5618 0CFE                                           l4940 1ECA  
                                         l5652 0D35                                           l4756 113F  
                                         l4748 1138                                           l7068 0B90  
                                         l5478 062C                                           l5486 0640  
                                         l6712 1CA7                                           l6802 01EE  
                                         l6730 00BC                                           l6724 00A0  
                                         l6734 00CA                                           l6742 00F4  
                                         l5782 0AC7                                           l5774 0AB7  
                                         l5694 1CD0                                           l6808 020F  
                                         l6760 0134                                           l6752 0118  
                                         l6728 00AE                                           l5792 0B0E  
                                         l5936 108C                                           l6770 0172  
                                         l6762 0142                                           l6738 00D8  
                                         l5794 0B26                                           l5938 10A4  
                                         l6756 0126                                           l6748 010A  
                                         l6940 036F                                           l4998 1F36  
                                         l6790 01B9                                           l6782 019D  
                                         l6950 03A4                                           l6786 01AB  
                                         l6778 018F                                           l6970 03EB  
                                         l6954 03BB                                           l6946 038F  
                                         l6796 01D3                                           l6980 040C  
                                         l6974 03F3                                           l6966 03DB  
                                         l6992 0453                                           l6988 043A  
                                         STR_1 18CA                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u4200 07F8                                           u4210 07F9  
                                         u3325 12BB                                           u4305 11DE  
                                         u4315 11E5                                           u4180 1BFD  
                                         u4405 1766                                           u4190 1BFE  
                                         u4435 1779                                           u4285 11CF  
                                         u3805 1D12                                           u3815 1D17  
                                         u4375 13C3                                           u7115 0398  
                                         u3855 1149                                           u7330 0B49  
                                         u7190 041A                                           u7175 0407  
                                         u7095 0364                          ??_USBCtrlTrfTxService 0070  
                                         u5770 1AE6                                           u6715 0161  
                                         u5925 0C13                                           u4975 0D01  
                                         _UCFG 0E91                                           _UEP0 0E98  
                                         u7397 1D4A                                           _UEP1 0E99  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
       USBStdFeatureReqHandler@current_ep_data 005A                                           _pDst 0145  
                                         _dbuf 0232                                           _ctoa 138B  
                                         _main 0B2B                                           _prec 01C9  
                                         _nout 01C7                                           pad@i 00BB  
                                         pad@p 00B8                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                _USBDeviceAttach 1CBB  
                    ?_SysTime_GetCurrentTimeMs 0070                                           btemp 007E  
                                         _xtoa 1723                                           start 003D  
                                 _SysTime_Init 1B5B                           _GenericQueue_Dequeue 164E  
                         _GenericQueue_IsEmpty 1BF2                           ??_USBCheckHIDRequest 0074  
                         ?_GenericQueue_IsFull 00A8                     __end_of_USBCheckStdRequest 1723  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 012E                           _GenericQueue_Enqueue 15E6  
              APP_KeyboardUpdateState@scanCode 00D0                            USBDeviceInit@i_1369 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                     ?_APP_KeyboardUpdateState 0070                       GenericQueue_Dequeue@item 00C2  
                     ??_USBStdGetStatusHandler 0070                                          ??_pad 00BA  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1BBF                __end_of_PS2Keyboard_GetScanCode 1D77  
                                        ?_ctoa 00B0                                          ?_main 0070  
                              __end_of___awmod 11FA                                          ?_xtoa 00BE  
                       __end_of_USBDeviceTasks 0F0C                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l141 000D  
                                        i1l144 0019                                          i1l305 1DAF  
                                        i1l153 003B                                          i1l146 0026  
                                        i1l148 0033                                          i1l502 0EB8  
                                        i1l503 0F09                                          i1l504 0F06  
                                   i1memcpy@d1 0076                                          i1l631 12DF  
                                        i1l703 16E7                                          i1l634 1325  
                                        i1l635 12E8                                          i1l636 12EB  
                                        i1l492 0E58                                          i1l566 07AA  
                                        i1l680 0998                                          i1l728 030A  
                                        i1l594 0D99                                          i1l818 1FFF  
                                        i1l498 0E90                                          i1l579 14C7  
                                        i1l916 125E                                          i1l764 0A2A  
                                        i1l692 1722                                          i1l694 16C0  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                 vfpfcnvrt@fmt 00C8                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 016D                                          _TXSTA 019E  
                                 _outputReport 0120             __end_of_USBHIDCBSetIdleRateHandler 1BA5  
                   _USBHIDCBSetIdleRateHandler 1B98                __end_of_USBCtrlEPAllowDataStage 157E  
                                        _sd000 18D9                                          _sd001 183F  
                                        _sd002 189C                               __end_of_TMR2_ISR 1B72  
               ?_USBIncrement1msInternalTimers 0070                                 i1___awmod@sign 0076  
                      __end_of_PIN_MANAGER_IOC 1B50                                          _flags 0134  
                      _PS2USB_ScanCodeToUSBHID 1E55                                 _WDT_Initialize 1AD3  
                          read_prec_or_width@c 00BA                                          _errno 01CB  
                          read_prec_or_width@n 00BB                                          _fputc 128D  
                                        _fputs 1E12                                          pad@fp 00BD  
                                        _width 012C                                          ctoa@c 00B0  
                                        _putch 0003                                          ctoa@l 00B4  
                                        ctoa@w 00B6                                          main@i 016B  
                                        pclath 000A                                  _snprintf$3634 014C  
                             __end_ofi1___wmul 1D09                                          status 0003  
                          i1___wmul@multiplier 0070                                          wtemp0 007E  
                                        xtoa@c 00C5                                          xtoa@d 00BE  
                                        xtoa@i 00C6                                          xtoa@p 00C2  
                                        xtoa@w 00C3                               __end_ofi1_memcpy 1EC2  
                              _TMR2_StartTimer 1AD6                               __end_ofi1_memset 1C8B  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 056A  
                        _GenericQueue_Contains 13EC                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1BBF                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_ctoa 13EC  
                                 __end_of_main 0BAE                                   __end_of_xtoa 178E  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1BF2  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                                       ??_ctoa 00B2                       _TMR2_SetInterruptHandler 1B20  
                                       ??_main 00E9                  __end_ofi1_GenericQueue_IsFull 1C19  
                                       ??_xtoa 00C0                                ?_USBDeviceTasks 0070  
                     ?_PS2Keyboard_SendCommand 0070                  GenericQueue_Init@element_size 00AA  
                                  ?_USBSuspend 0070                        _IOCAF4_InterruptHandler 01EB  
                              i1_USBDeviceInit 0C37                       _USBHIDCBSetReportHandler 1BA5  
                   __end_of_read_prec_or_width 138B                         __end_of_WDT_Initialize 1AD6  
    __end_of_EUSART_DefaultFramingErrorHandler 1AC8            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 1AC7  
                      __end_of_USBDeviceAttach 1CD4                     _EUSART_OverrunErrorHandler 01D3  
                                       ?_fputc 00A8                                         _ACTCON 039B  
                                       ?_fputs 00B0                                         _APFCON 011D  
                                       _ANSELA 018C                                         ?_putch 0070  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1B31  
                                       i1l1100 0694                                         i1l1103 0697  
                                       i1l1306 1CF6                                         i1l4220 1DC1  
                                       i1l4206 10DA                                         i1l4208 10E2  
                                       i1l4216 1DBA                                         i1l4240 0A37  
                                       i1l4304 09F4                                         i1l4330 1273  
                                       i1l4314 0A0E                                         i1l6002 0C8C  
                                       i1l4404 14C2                                         i1l5220 094D  
                                       i1l4260 0AA6                                         i1l4308 0A02  
                                       i1l5222 0950                                         i1l5206 1FC1  
                                       i1l4318 0A16                                         i1l4416 14E3  
                                       i1l4424 14F9                                         i1l5232 097B  
                                       i1l4248 0A47                                         i1l6202 1F86  
                                       i1l4426 14FD                                         i1l4434 1513  
                                       i1l5242 09A9                                         i1l4258 0A8E  
                                       i1l4290 09D2                                         i1l4370 1FC4  
                                       i1l4602 091F                                         i1l4514 1549  
                                       i1l5244 09AA                                         i1l5236 098B  
                                       i1l4284 09C6                                         i1l4292 09DD  
                                       i1l4604 0922                                         i1l4278 09BA  
                                       i1l4374 1FCF                                         i1l4382 1FD8  
                                       i1l4518 155C                                         i1l4296 09E5  
                                       i1l4376 1FD2                                         i1l4720 032F  
                                       i1l4608 0925                                         i1l4624 1300  
                                       i1l4802 1187                                         i1l4482 17B0  
                                       i1l5194 1F90                                         i1l4298 09E8  
                                       i1l4378 1FD5                                         i1l4722 0337  
                                       i1l4706 02F6                                         i1l4634 1319  
                                       i1l4804 1193                                         i1l4812 11A8  
                                       i1l4900 0DA1                                         i1l7132 1FE0  
                                       i1l4716 0310                                         i1l4708 02FB  
                                       i1l4652 0240                                         i1l4902 0DB7  
                                       i1l7134 1FFA                                         i1l4654 0242  
                                       i1l4582 08C2                                         i1l6192 1F66  
                                       i1l4816 11B0                                         i1l4808 119F  
                                       i1l7136 0745                                         i1l4912 0DEC  
                                       i1l4680 02A1                                         i1l4840 076F  
                                       i1l5712 1D8A                                         i1l4770 1CF0  
                                       i1l5538 1B95                                         i1l4914 0DF8  
                                       i1l4690 02BB                                         i1l4682 02AB  
                                       i1l4674 028D                                         i1l4594 08FB  
                                       i1l4586 08CC                                         i1l6530 16C9  
                                       i1l5714 1D91                                         i1l4828 1EA4  
                                       i1l6620 06CF                                         i1l6612 0699  
                                       i1l4692 02C2                                         i1l4668 026F  
                                       i1l4596 08FE                                         i1l6540 16D6  
                                       i1l6532 16CC                                         i1l4844 0773  
                                       i1l6700 083A                                         i1l6198 1F76  
                                       i1l4790 117A                                         i1l6622 06D4  
                                       i1l6614 069F                                         i1l4926 0E32  
                                       i1l6518 08A7                                         i1l6542 16D9  
                                       i1l4862 07B6                                         i1l4870 07BF  
                                       i1l6702 083D                                         i1l6624 06D6  
                                       i1l6608 068D                                         i1l6616 06A8  
                                       i1l4696 02CD                                         i1l6544 16DC  
                                       i1l6528 16C6                                         i1l5744 1E4E  
                                       i1l4794 1181                                         i1l6650 071B  
                                       i1l6618 06CB                                         i1l6554 16F2  
                                       i1l5746 1E50                                         i1l6660 0735  
                                       i1l6468 1C77                                         i1l6654 0722  
                                       i1l6646 0713                                         i1l6638 06FD  
                                       i1l6670 073B                                         i1l6478 084F  
                                       i1l6558 16FF                                         i1l6902 0EBE  
                                       i1l6664 0738                                         i1l6672 0753  
                                       i1l6496 0871                                         i1l5952 0C42  
                                       i1l6920 0EFD                                         i1l6912 0ED5  
                                       i1l6682 1B88                                         i1l6818 1B4B  
                                       i1l6842 0E52                                         i1l6834 0E45  
                                       i1l5980 0C76                                         i1l6918 0EEE  
                                       i1l6862 0E6E                                         i1l5968 0C59  
                                       i1l6856 0E68                                         i1l6892 0EB1  
                                       i1l6884 0E9D                                         i1l6868 0E82  
                                       i1l6878 0E96                                         u313_25 10B3  
                                       u410_25 0D95                                         u314_25 10B9  
                                       u315_25 10C1                     __end_of_EUSART_is_tx_ready 1AE8  
                                       u328_25 1268                                         u348_25 1553  
                                       u390_25 1CF7                                         u391_25 1CFC  
                                       _OSCCON 0099                                         u387_20 1C11  
                                       u643_24 06E3                                         u635_24 0679  
                                       u643_25 06E2                                         u635_25 0678  
                                       u547_25 0C5C                                         u388_20 1C12  
                                       u636_20 067F                                         u396_25 118A  
                                       u652_25 080B                                         u740_27 1CDD  
                                       u645_20 070C                                         u637_20 0680  
                                       u646_20 070D                                         u398_25 1199  
                                       _PLLRDY 04D6                                         u399_25 11A0  
                                vfpfcnvrt@done 00D3                                    i1memcpy@tmp 0054  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 022C                              _shortPacketStatus 0146  
                             _APP_KeyboardInit 1242                                USBDeviceTasks@i 0060  
                                 vfprintf@cfmt 00DC                    USBStdFeatureReqHandler@pUEP 0058  
                     USBTransferOnePacket@data 00A9                     USBCtrlTrfInHandler@lastDTS 0077  
                              ??_USBDeviceInit 00A8                                         ___bmul 1BD0  
                              _keyboardIsBreak 01DF                                         ___wmul 1D09  
                                    ??___awmod 00AC                                _keyboardCommand 0135  
                            _USBEnableEndpoint 1DB2                            _EUSART_Transmit_ISR 1D94  
                                       _memcmp 1F18                                         _memcpy 1EC2  
                         read_prec_or_width@ap 00B5                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 1CA3                                ___awmod@divisor 00A8  
                                       _timeMs 01B8                                ___awmod@counter 00AD  
                                       pad@buf 00B7                             ?_USBEnableEndpoint 0077  
                                       ctoa@fp 00B8                                         _strlen 1C2E  
                            __end_ofi1___awmod 11B5                                         fputc@c 00A8  
                                       fputs@c 00B3                                         fputs@i 00B4  
                                       fputs@s 00B6                      ??_PS2USB_ScanCodeToUSBHID 00A8  
                              ?_WDT_Initialize 0070                                    _OldSOFCount 01CD  
                          ??_USBEnableEndpoint 0078                             APP_KeyboardTasks@i 00D7  
                                       putch@c 0070                               __end_of_vfprintf 10AD  
                      __end_of_TMR2_StartTimer 1AD9       TMR2_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF5_SetInterruptHandler@InterruptHandler 00A8     IOCAF4_SetInterruptHandler@InterruptHandler 00A8  
                             ?_PIN_MANAGER_IOC 0070                               __end_of_snprintf 0C37  
                                       xtoa@fp 00C1                                    _CtrlTrfData 0048  
                                 ??_IOCAF4_ISR 007E                                   ??_IOCAF5_ISR 0074  
                         ?_EUSART_Transmit_ISR 0070             USBHIDCBSetIdleRateHandler@reportID 0073  
                         _controlTransferState 006A                  PS2Keyboard_ClockInterrupt@bit 007D  
                            _SYSTEM_Initialize 1C19                        __end_of__initialization 007B  
                   i1USBTransferOnePacket@data 0071                        ?i1_GenericQueue_Enqueue 0055  
                       ??_GenericQueue_Dequeue 00C3                         ??_GenericQueue_IsEmpty 00AA  
                       ?_GenericQueue_Contains 00BE                             ?_SYSTEM_Initialize 0070  
                       ??_GenericQueue_Enqueue 00C4                       GenericQueue_Enqueue@item 00C2  
         __end_of_EUSART_SetTxInterruptHandler 1B20                   _EUSART_SetTxInterruptHandler 1B18  
                          ___bmul@multiplicand 00A8                        i1GenericQueue_Enqueue@q 0055  
                               __pcstackCOMMON 0070                     ??_GenericQueue_CopyToArray 00C3  
                    __end_of_USBEnableEndpoint 1DD2                                  __end_of_sd000 18DD  
                                __end_of_sd001 1873                                  __end_of_sd002 18B8  
                          ??_SYSTEM_Initialize 00B0                                      ?_TMR2_ISR 0070  
                              _active_protocol 01E8                                  __end_of_fputc 12DB  
                                __end_of_fputs 1E33                __end_of_PS2Keyboard_SendCommand 1D5B  
       __end_of_IOCAF4_DefaultInterruptHandler 1AC9                 _IOCAF4_DefaultInterruptHandler 1AC8  
                      __end_ofi1_USBDeviceInit 0CDA                                  __end_of_putch 0004  
                  __end_of_USBCtrlTrfInHandler 09AD                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                             __end_of_IOCAF4_ISR 1B8B  
                           __end_of_IOCAF5_ISR 1B98                                      ?i1___wmul 0070  
                  __end_ofi1_GenericQueue_Init 1DF2                             ??_PS2Keyboard_Init 00AC  
                               _OPTION_REGbits 0095                                      ?i1_memcpy 0076  
                                    ?i1_memset 0070                           _eusartRxStatusBuffer 01A0  
                  ?_IOCAF5_SetInterruptHandler 00A8                ??_EUSART_SetOverrunErrorHandler 00AA  
                     ??_USBCtrlTrfSetupHandler 005D                        _USBTicksSinceSuspendEnd 013A  
                   ?i1_PS2Keyboard_SendCommand 0070                i1GenericQueue_Init@element_size 0072  
                                _keyboardState 0139                               ?_USBDeviceAttach 0070  
                                      ??_fputc 00AB                      __end_of_SYSTEM_Initialize 1C2E  
                                      ??_fputs 00B1                          ??_EUSART_Transmit_ISR 0070  
                       _USBStdGetStatusHandler 12DB                     i1GenericQueue_Enqueue@item 0057  
                                      ??_putch 00A8                 __end_ofi1_GenericQueue_Enqueue 15E6  
                                   __pbssBANK0 0061                                     __pbssBANK1 00EB  
                                   __pbssBANK2 0121                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                           __end_of_EUSART_Write 1E9C  
             ??_IOCAF5_DefaultInterruptHandler 0070                ?_IOCAF5_DefaultInterruptHandler 0070  
                                  _pBDTEntryIn 0061                        _IOCAF5_InterruptHandler 01E9  
                          _keyboardCommandBits 01DE               __end_of_USBCtrlEPServiceComplete 07EC  
                          _keyboardCommandOnes 01DD               PS2Keyboard_ClockInterrupt@bitPos 007C  
                                   __pmaintext 0B2B              APP_KeyboardUpdateState@usbHidCode 00CC  
       APP_KeyboardUpdateState@usbHidCode_2928 00CE         APP_KeyboardUpdateState@usbHidCode_2937 00CF  
       APP_KeyboardUpdateState@usbHidCode_2929 00CD                           USBCtrlTrfRxService@i 0078  
                                      ?___bmul 00A8                  ?_EUSART_SetTxInterruptHandler 00A8  
             _EUSART_TxDefaultInterruptHandler 01DB                                        ?___wmul 00AF  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                      ?_memcmp 00B5                                        ?_memcpy 00B5  
                                      _BAUDCON 019F                                        ?_memset 00A8  
                                   _device_dsc 18B8                               _USBCtrlEPService 0800  
                 ??_EUSART_DefaultErrorHandler 0071                                     _ep_data_in 0132  
                                   ??i1___wmul 0074                                        ?_strlen 00A8  
                  __end_of_USBCtrlTrfRxService 0E39                             _USBCheckStdRequest 16B8  
                                _eusartRxCount 01E3                              _configDescriptor1 1873  
                                   ??i1_memcpy 007C                                     ??i1_memset 0076  
                                 _ps2ExtUsbMap 046B         APP_KeyboardTasks@TimeDeltaMilliseconds 00D5  
                  __end_of_USBCtrlTrfTxService 1517                            _USBStdSetCfgHandler 0847  
                  ?_USBHIDCBSetIdleRateHandler 0070                               main@hndlScanCode 016C  
                                      _OSCTUNE 0098                       ??_EUSART_SetErrorHandler 00AA  
                          ?_USBCheckStdRequest 0070                               ?_TMR2_StartTimer 0070  
                                      _UIEbits 0E92              __end_ofi1_PS2Keyboard_SendCommand 1CEE  
                                      _UIRbits 0E90                          GenericQueue_Dequeue@q 00C0  
                  APP_KeyboardUpdateState@leds 00CB                                   i1memset@dest 0070  
                     ??i1_USBTransferOnePacket 0074                          GenericQueue_IsEmpty@q 00A8  
                            __end_of_ps2UsbMap 1084                ??_USBIncrement1msInternalTimers 0070  
                         ?_USBStdSetCfgHandler 0070                              _APP_KeyboardTasks 034C  
                   ??_TMR2_SetInterruptHandler 00AA                              __end_of_hid_rpt01 183F  
                         ??_USBCheckStdRequest 007E                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 11B5                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 005F  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                                    ?_vfprintf 00D7                               _keyboardIdleRate 01CF  
                                    ?_snprintf 00DE                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 01E0  
                                      __ptext1 0BAE                                        __ptext2 1084  
                                      __ptext3 056A                                        __ptext4 1723  
                                      __ptext5 112D                                        __ptext6 1C2E  
                                      __ptext7 1E12                                        __ptext8 1330  
                                      __ptext9 138B                                        _inPipes 00EB  
                  _USBDeferOUTDataStagePackets 013B                            ??_APP_KeyboardTasks 00D1  
                        _OSCILLATOR_Initialize 1BB2                                   ??_USBSuspend 007D  
                                    _T2CONbits 001C                          read_prec_or_width@fmt 00BD  
                             _keyboardScanCode 01E5                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 128D                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                             __end_of_USB_CD_Ptr 18DF  
                                      clrloop0 1B73                       _SysTime_GetCurrentTimeMs 1B31  
                         end_of_initialization 007B                    __end_of_GenericQueue_IsFull 0800  
                           __end_of_USB_SD_Ptr 18D9                                        memcmp@l 00BB  
                                      memcmp@n 00B8                                        memcmp@r 00BD  
                            ?_SysTimeInterrupt 0070          __end_of_EUSART_SetOverrunErrorHandler 1B10  
                _EUSART_SetOverrunErrorHandler 1B08                                        memcpy@d 00BB  
                                      memcpy@n 00B9                                        memcpy@s 00BD  
                          _pBDTEntryEP0OutNext 0067                                        fputc@fp 00AA  
                  __end_of_GenericQueue_Remove 1000                                        memset@c 00AA  
                                      memset@n 00AC                                        memset@p 00AE  
                                      fputs@fp 00B0                                _USB1msTickCount 01C0  
                      _PS2Keyboard_GetScanCode 1D5B                             _read_prec_or_width 1330  
                     ?_USBStdFeatureReqHandler 0070                             ??_SysTimeInterrupt 0070  
                    __end_of_APP_KeyboardTasks 046B                              _EUSART_Initialize 10EC  
                        ??_USBStdSetCfgHandler 007D                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 1CA3                              __end_of_vfpfcnvrt 0664  
                      _USBCtrlEPAllowDataStage 1517                                      _RCSTAbits 019D  
                          ?_read_prec_or_width 00B5                               vfpfcnvrt@convarg 00CE  
                           _EUSART_is_tx_ready 1AE0                                     _prevTimeMs 01BC  
                                   ??_vfprintf 00DA                       _USBCtrlEPServiceComplete 075E  
                        i1___wmul@multiplicand 0072                                     ??_snprintf 00E6  
                                      strlen@a 00AB                                        strlen@s 00AC  
                   _USBStatusStageEnabledFlag1 013E                     _USBStatusStageEnabledFlag2 013D  
                          ??_EUSART_Initialize 00AA                               ??_WDT_Initialize 00A8  
               ??_EUSART_SetTxInterruptHandler 00AA                             USBEnableEndpoint@p 007A  
                                    _PORTAbits 000C                            ?_EUSART_is_tx_ready 0070  
                        i1_GenericQueue_IsFull 1C05                                      _TRISAbits 008C  
                           _BothEP0OutUOWNsSet 0141                      USBStdSetCfgHandler@i_2097 0058  
                                    i1___awmod 1170                           ??_read_prec_or_width 00B7  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 1DF2                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006E                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 112D                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0B2B                           ??_EUSART_is_tx_ready 00A8  
                                   main@strLen 016A                            ??_GenericQueue_Init 00AC  
                        i1USBDeviceInit@i_1369 0076                         _USBCtrlTrfSetupHandler 11FA  
         __end_of_TMR2_DefaultInterruptHandler 0003                   _TMR2_DefaultInterruptHandler 0002  
                               __end_of___bmul 1BE1                          __end_of_USBDeviceInit 0D86  
        __end_of_USBIncrement1msInternalTimers 1C5B                  _USBIncrement1msInternalTimers 1C44  
           __end_of_EUSART_DefaultErrorHandler 1ACD                     _EUSART_DefaultErrorHandler 1ACA  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                  vfpfcnvrt@ap 00C9                                      i1memcpy@s 0052  
                                  vfpfcnvrt@cp 00D4                                    vfpfcnvrt@fp 00D6  
                               __end_of___wmul 1D24                                      i1memset@c 0072  
                                    i1memset@n 0074                                      i1memset@p 0076  
                                 _EUSART_Write 1E77                                 __end_of_memcmp 1F4F  
                               __end_of_memcpy 1EE8                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 1CBB                     ?_USBHIDCBSetReportComplete 0070  
                            _USBBusIsSuspended 0143                                 __end_of_strlen 1C44  
                          start_initialization 003F                        _APP_KeyboardUpdateState 007F  
                      ?_USBStdGetStatusHandler 0070                  USBCtrlTrfRxService@byteToRead 0079  
                    __end_of_GenericQueue_Init 1E12                                    __end_of_pad 1170  
                                   ?i1___awmod 0070                                 _oldInputReport 022A  
 EUSART_SetRxInterruptHandler@interruptHandler 00A8   EUSART_SetTxInterruptHandler@interruptHandler 00A8  
                  ??i1_PS2Keyboard_SendCommand 0070                   __end_of_USBConfigureEndpoint 10EC  
              __end_of_USBStdFeatureReqHandler 034C                      ??_PS2Keyboard_GetScanCode 00C7  
                 ??_PS2Keyboard_GetLastCommand 00A8              __end_of_USBCtrlEPAllowStatusStage 1800  
                     __end_of_USBCtrlEPService 0847                                  ?_SysTime_Init 0070  
                    ??_USBCtrlEPAllowDataStage 0073                                 USBDeviceInit@i 00AF  
                               USBDeviceInit@p 00AC                 ?_EUSART_SetOverrunErrorHandler 00A8  
                       _pBDTEntryEP0OutCurrent 006B                                    vfprintf@fmt 00D7  
                      USBTransferOnePacket@dir 00A8                        USBTransferOnePacket@len 00AB  
                   _EUSART_FramingErrorHandler 01D5                                       ??___bmul 00A9  
                                     ??___wmul 00B3                         _EUSART_SetErrorHandler 1AF8  
                          _USBStdGetDscHandler 08B9                             i1___awmod@dividend 0072  
                                     ??_memcmp 00BA                                       ??_memcpy 00BB  
                                     ??_memset 00AE                  ?_TMR2_DefaultInterruptHandler 0070  
                     ?_PS2USB_ScanCodeToUSBHID 0070                                     memset@dest 00A8  
              PS2Keyboard_GetScanCode@scanCode 00C7                         i1_USBTransferOnePacket 0A2B  
       __end_of_IOCAF5_DefaultInterruptHandler 1ACA                 _IOCAF5_DefaultInterruptHandler 1AC9  
                                     ??_strlen 00AA                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 1330                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232C                    __end_of_EUSART_Transmit_ISR 1DB2  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1AE0  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                                  __pcstackBANK2 014C  
                    ?_GenericQueue_CopyToArray 00C0                                    snprintf@cnt 0150  
                                  snprintf@fmt 00E0                           ?_USBStdGetDscHandler 0070  
                      _PS2Keyboard_SendCommand 1D3F      __end_ofi1_APP_KeyboardProcessOutputReport 1B45  
      __end_of_APP_KeyboardProcessOutputReport 1B5B            ??i1_APP_KeyboardProcessOutputReport 0071  
           ?i1_APP_KeyboardProcessOutputReport 0070               ?_APP_KeyboardProcessOutputReport 0070  
            ??_APP_KeyboardProcessOutputReport 00A9              i1_APP_KeyboardProcessOutputReport 1B3B  
              _APP_KeyboardProcessOutputReport 1B50                     __end_of_EUSART_Receive_ISR 1F89  
                                 _keyboardData 0136                     __end_of_USBWakeFromSuspend 1D94  
             _EUSART_RxDefaultInterruptHandler 01D9                                 ??_SysTime_Init 00AA  
                              _USBStallHandler 1E33                                   _pBDTEntryOut 0128  
                                    __pnvBANK3 01E9                           _keyboardCommandCount 0069  
                 __end_of_EUSART_RxDataHandler 1C73                                      _main$2651 0167  
                       _PIN_MANAGER_Initialize 1EE8                      i1_PS2Keyboard_SendCommand 1CD4  
                                    __ptext100 1E9C                                      __ptext101 1CEE  
                                    __ptext110 1C5B                                      __ptext102 1170  
                                    __ptext103 1C05                                      __ptext104 1B31  
                                    __ptext105 1D94                                      __ptext106 1F4F  
                                    __ptext107 1ACD                                      __ptext108 1AC7  
                                    __ptext109 1ACA                                       ?___awmod 00A8  
                                    _ps2UsbMap 1000                   ??_PS2Keyboard_ClockInterrupt 005C  
                           GenericQueue_Init@q 00A8                                   _eusartRxHead 006D  
                                 _eusartTxHead 0149                                      _hid_rpt01 1800  
                                 _eusartRxTail 01E4                                   _eusartTxTail 0148  
                                    _idle_rate 014A                   ??_INTERRUPT_InterruptManager 007E  
                        _keyboardScanCodeValid 01E1                          _keyboardScanCodeQueue 2391  
                    ??_APP_KeyboardUpdateState 00C9                        _eusartTxBufferRemaining 0147  
                   ??_SysTime_GetCurrentTimeMs 0074                           _USBTransferOnePacket 0AAB  
                         GenericQueue_IsFull@q 00A8             __end_of_IOCAF4_SetInterruptHandler 1AF0  
                   _IOCAF4_SetInterruptHandler 1AE8                   __end_of_USBCtrlTrfOutHandler 1FC3  
                            ?_APP_KeyboardInit 0070                                    ??i1___awmod 0074  
                        ??_USBStdGetDscHandler 0070                                    _ep_data_out 0130  
                USBConfigureEndpoint@direction 0070                             ??_APP_KeyboardInit 007D  
                               _eusartRxBuffer 01A8                                 _eusartTxBuffer 01B0  
                         GenericQueue_Remove@i 00C7                           GenericQueue_Remove@j 00C8  
                         GenericQueue_Remove@q 00C0                                 ___wmul@product 00B3  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00A8  
                   __end_of_USBCheckHIDRequest 0A2B                     ??_USBCtrlEPServiceComplete 0077  
                                    clear_ram0 1B72                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 01E2  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00AA  
                                     _PIR2bits 0012                __end_of_PS2USB_ScanCodeToUSBHID 1E77  
                                     _UEP0bits 0E98                                      main@F3441 01C4  
                                    main@F3445 0220                     _USBDeferINDataStagePackets 013C  
    __end_of_EUSART_DefaultOverrunErrorHandler 1AD0            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 1ACD  
                                     _TMR2_ISR 1B66                                       _UCONbits 0E8E  
                            ??_PIN_MANAGER_IOC 007E                           _USBConfigureEndpoint 10AD  
                                    _vfpfcnvrt 056A                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 1CEE  
                              main@scanCodeStr 015D                                       i1_memcpy 1E9C  
                                     i1_memset 1C73                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 0144                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                     ?_PS2Keyboard_DataInterrupt 0070  
                    ??_PS2Keyboard_SendCommand 00A8                        __end_of_USBStallHandler 1E55  
           __end_of_PS2Keyboard_GetLastCommand 1AD3                     _PS2Keyboard_GetLastCommand 1AD0  
                                   vfpfcnvrt@c 00D2                      ?_USBHIDCBSetReportHandler 0070  
                             _PS2Keyboard_Init 1D24                    ??_USBCtrlEPAllowStatusStage 0070  
                  __end_of_USBStdSetCfgHandler 08B9                              ??_TMR2_Initialize 00AA  
                __end_of_GenericQueue_Contains 144E                             __end_of_device_dsc 18CA  
                       GenericQueue_Contains@i 00C5                         GenericQueue_Contains@q 00BE  
                      ?_USBCtrlTrfSetupHandler 0070                        USBStdGetStatusHandler@p 0070  
                                    memcpy@tmp 00BF                                     vfprintf@ap 00D9  
                                   vfprintf@fp 00DB                         USBTransferOnePacket@ep 00B0  
                                     _SetupPkt 0040                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 00A8                            _EUSART_ErrorHandler 01D1  
                        ?_USBConfigureEndpoint 0070                              i1___awmod@counter 0075  
                            ??_USBDeviceAttach 00A8                    ?_EUSART_DefaultErrorHandler 0070  
                                   ?_vfpfcnvrt 00C8                                     snprintf@ap 014F  
                         __end_of_SysTime_Init 1B66                    ??_USBHIDCBSetReportComplete 0071  
                         _EUSART_RxDataHandler 1C5B                                       __ptext10 128D  
                                     __ptext11 0003                                       __ptext20 1EE8  
                                     __ptext12 1B5B                                       __ptext21 1BB2  
                                     __ptext13 1AD6                                       __ptext30 1AE8  
                                     __ptext22 10EC                                       __ptext14 1C19  
                                     __ptext31 1DF2                                       __ptext23 1B18  
                                     __ptext15 1AD3                                       __ptext40 1BD0  
                                     __ptext32 1D5B                                       __ptext24 1B10  
                                     __ptext16 0CDA                                       __ptext41 007F  
                                     __ptext33 164E                                       __ptext25 1B08  
                                     __ptext17 1CBB                                       __ptext50 1D09  
                                     __ptext42 1E55                                       __ptext34 1AE0  
                                     __ptext26 1B00                                       __ptext18 1BE1  
                                     __ptext51 11B5                                       __ptext43 1AD0  
                                     __ptext35 1E77                                       __ptext27 1AF8  
                                     __ptext19 1B20                                       __ptext60 1E33  
                                     __ptext52 1BF2                                       __ptext44 0F0C  
                                     __ptext36 034C                                       __ptext28 1D24  
                                     __ptext61 1C44                                       __ptext53 1B50  
                                     __ptext45 15E6                                       __ptext37 1CA3  
                                     __ptext29 1AF0                                       __ptext70 08B9  
                                     __ptext62 0800                                       __ptext54 1D3F  
                                     __ptext46 1EC2                                       __ptext38 0AAB  
                                     __ptext71 022C                                       __ptext63 11FA  
                                     __ptext47 07EC                                       __ptext39 144E  
                                     __ptext80 10AD                                       __ptext72 1FC3  
                                     __ptext64 075E                                       __ptext56 0E39  
                                     __ptext48 13EC                                       __ptext81 1F89  
                                     __ptext73 09AD                                       __ptext65 1517  
                                     __ptext57 0C37                                       __ptext49 1F18  
                                     __ptext90 1B28                                       __ptext82 0D86  
                                     __ptext74 1BA5                                       __ptext66 16B8  
                                     __ptext58 1D77                                       __ptext91 0002  
                                     __ptext83 178E                                       __ptext75 1B98  
                                     __ptext67 0847                                       __ptext59 1C8B  
                                     __ptext92 1B45                                       __ptext84 0932  
                                     __ptext76 1242                                       __ptext68 1C73  
                                     __ptext93 1B8B                                       __ptext85 1AD9  
                                     __ptext77 0A2B                                       __ptext69 12DB  
                                     __ptext94 1AC9                                       __ptext86 1B3B  
                                     __ptext78 1DD2                                       __ptext95 1BBF  
                                     __ptext87 1CD4                                       __ptext79 1DB2  
                                     __ptext96 1B7E                                       __ptext88 14B0  
                                     __ptext97 1AC8                                       __ptext89 1B66  
                                     __ptext98 0664                                       __ptext99 157E  
                 ??_IOCAF5_SetInterruptHandler 00AA              __end_of_PS2Keyboard_DataInterrupt 1BD0  
                            _keyboardIndexData 0138                                     _IOCAF4_ISR 1B7E  
                GenericQueue_CopyToArray@array 00C2                                     _IOCAF5_ISR 1B8B  
                GenericQueue_CopyToArray@count 00C8                  GenericQueue_CopyToArray@index 00C7  
                                     _keyboard 232C                 __end_of_USBCtrlTrfSetupHandler 1242  
                            ?_USBCtrlEPService 0070                             ??_USBCtrlEPService 005E  
                      ?_EUSART_SetErrorHandler 00A8                            _USBCtrlTrfInHandler 0932  
EUSART_SetOverrunErrorHandler@interruptHandler 00A8                                    _inputReport 00A0  
           __end_of_PS2Keyboard_ClockInterrupt 075E                     _PS2Keyboard_ClockInterrupt 0664  
                            _keyboardOnesCount 0137                                       _outPipes 0121  
                         _USBCtrlTrfOutHandler 1F89                                       int$flags 007E  
                          i1_GenericQueue_Init 1DD2                        ?i1_USBTransferOnePacket 0070  
             __end_of_GenericQueue_CopyToArray 14B0                      _USBCtrlEPAllowStatusStage 178E  
                                     _vfprintf 1084                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072                                       _snprintf 0BAE  
        __end_of_EUSART_SetFramingErrorHandler 1B08                  _EUSART_SetFramingErrorHandler 1B00  
                       ??_USBTransferOnePacket 00AC               __end_of_SysTime_GetCurrentTimeMs 1B3B  
                 __end_of_GenericQueue_Dequeue 16B8                   __end_of_GenericQueue_IsEmpty 1C05  
                    _USBDeferStatusStagePacket 013F                               i1USBDeviceInit@i 0077  
                             i1USBDeviceInit@p 0074                                     _INTCONbits 000B  
                 __end_of_GenericQueue_Enqueue 164E                           ?_USBCtrlTrfInHandler 0070  
                                     memcmp@vl 00B5                                       memcmp@vr 00B7  
                        ?_EUSART_RxDataHandler 0070                                       memcpy@d1 00B5  
                                     memcpy@s1 00B7                  USBCtrlTrfTxService@byteToSend 0072  
                               __pstringtext10 18D9                                 __pstringtext11 18CA  
                               __pstringtext12 0000                   ??_USBHIDCBSetIdleRateHandler 0071  
                             ?_USBStallHandler 0070                           ?i1_GenericQueue_Init 0070  
                     USBStdFeatureReqHandler@p 005B                                      snprintf@f 0152  
                                    snprintf@n 00DE                                      snprintf@s 014E  
                                     intlevel1 0000        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 2000  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 1FC3                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1B00  
                    _USBHIDCBSetReportComplete 1AD9           __end_of_EUSART_SetRxInterruptHandler 1B18  
                 _EUSART_SetRxInterruptHandler 1B10                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0AAB  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 1F4F                            _USBCtrlTrfRxService 0D86  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 1D77  
                             _SysTimeInterrupt 1B28                        _USBStdFeatureReqHandler 022C  
                                  ??_vfpfcnvrt 00CA                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 14B0                                  __pstringtext1 046B  
                                __pstringtext2 1000                                  __pstringtext3 18D3  
                                __pstringtext4 18DD                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18B8  
                          ?_EUSART_Receive_ISR 0070                            ?_USBWakeFromSuspend 0070  
                        ??_USBCtrlTrfInHandler 0073                          _USBAlternateInterface 014B  
                     ?_PS2Keyboard_GetScanCode 0070                    ?_IOCAF4_SetInterruptHandler 00A8  
        USBHIDCBSetIdleRateHandler@newIdleRate 0070                            USBEnableEndpoint@ep 007C  
                              _endpoint_number 0142                          ??i1_GenericQueue_Init 0074  
                         ?_USBCtrlTrfRxService 0070                                    ?_IOCAF4_ISR 0070  
                                  ?_IOCAF5_ISR 0070                             EUSART_Write@txData 00A9  
               __end_of_PIN_MANAGER_Initialize 1F18                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 0065  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 0140                                _PIN_MANAGER_IOC 1B45  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 01D7  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00D4                         i1_GenericQueue_Enqueue 157E  
                                   _USB_CD_Ptr 18DD  
