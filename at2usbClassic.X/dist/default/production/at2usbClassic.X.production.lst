

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 21 21:25:39 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	psect	text65,local,class=CODE,merge=1,delta=2
    92                           	psect	text66,local,class=CODE,merge=1,delta=2
    93                           	psect	text67,local,class=CODE,merge=1,delta=2
    94                           	psect	text68,local,class=CODE,merge=1,delta=2
    95                           	psect	text69,local,class=CODE,merge=1,delta=2
    96                           	psect	text70,local,class=CODE,merge=1,delta=2
    97                           	psect	text71,local,class=CODE,merge=1,delta=2
    98                           	psect	text72,local,class=CODE,merge=1,delta=2
    99                           	psect	text73,local,class=CODE,merge=1,delta=2
   100                           	psect	text74,local,class=CODE,merge=1,delta=2
   101                           	psect	text75,local,class=CODE,merge=1,delta=2
   102                           	psect	text76,local,class=CODE,merge=1,delta=2
   103                           	psect	text77,local,class=CODE,merge=1,delta=2
   104                           	psect	text78,local,class=CODE,merge=1,delta=2
   105                           	psect	text79,local,class=CODE,merge=1,delta=2
   106                           	psect	text80,local,class=CODE,merge=1,delta=2
   107                           	psect	text81,local,class=CODE,merge=1,delta=2
   108                           	psect	text82,local,class=CODE,merge=1,delta=2
   109                           	psect	text83,local,class=CODE,merge=1,delta=2
   110                           	psect	text84,local,class=CODE,merge=1,delta=2
   111                           	psect	text85,local,class=CODE,merge=1,delta=2
   112                           	psect	text86,local,class=CODE,merge=1,delta=2
   113                           	psect	text87,local,class=CODE,merge=1,delta=2
   114                           	psect	text88,local,class=CODE,merge=1,delta=2
   115                           	psect	text89,local,class=CODE,merge=1,delta=2
   116                           	psect	text90,local,class=CODE,merge=1,delta=2
   117                           	psect	text91,local,class=CODE,merge=1,delta=2
   118                           	psect	text92,local,class=CODE,merge=1,delta=2
   119                           	psect	text93,local,class=CODE,merge=1,delta=2
   120                           	psect	text94,local,class=CODE,merge=1,delta=2
   121                           	psect	text95,local,class=CODE,merge=1,delta=2
   122                           	psect	text96,local,class=CODE,merge=1,delta=2
   123                           	psect	text97,local,class=CODE,merge=1,delta=2
   124                           	psect	text98,local,class=CODE,merge=1,delta=2
   125                           	psect	text99,local,class=CODE,merge=1,delta=2
   126                           	psect	text100,local,class=CODE,merge=1,delta=2
   127                           	psect	text101,local,class=CODE,merge=1,delta=2
   128                           	psect	text102,local,class=CODE,merge=1,delta=2
   129                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   130                           	dabs	1,0x620,48
   131                           	dabs	1,0x5C1,47
   132                           	dabs	1,0x5A0,33
   133                           	dabs	1,0x52C,68
   134                           	dabs	1,0x20,32,_BDT
   135                           	dabs	1,0x48,8,_CtrlTrfData
   136                           	dabs	1,0x40,8,_SetupPkt
   137                           	dabs	1,0xA0,8,_inputReport
   138                           	dabs	1,0x120,1,_outputReport
   139                           	dabs	1,0x232C,0,_keyboard
   140                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   141                           	dabs	1,0x7E,2
   142     0000                     
   143                           ; Generated 07/09/2023 GMT
   144                           ; 
   145                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution. Publication is not required when
   159                           ;        this file is used in an embedded application.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC16F1459 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177     0000                     	;# 
   178     0001                     	;# 
   179     0002                     	;# 
   180     0003                     	;# 
   181     0004                     	;# 
   182     0005                     	;# 
   183     0006                     	;# 
   184     0007                     	;# 
   185     0008                     	;# 
   186     0009                     	;# 
   187     000A                     	;# 
   188     000B                     	;# 
   189     000C                     	;# 
   190     000D                     	;# 
   191     000E                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0015                     	;# 
   195     0016                     	;# 
   196     0016                     	;# 
   197     0017                     	;# 
   198     0018                     	;# 
   199     0019                     	;# 
   200     001A                     	;# 
   201     001B                     	;# 
   202     001C                     	;# 
   203     008C                     	;# 
   204     008D                     	;# 
   205     008E                     	;# 
   206     0091                     	;# 
   207     0092                     	;# 
   208     0095                     	;# 
   209     0096                     	;# 
   210     0097                     	;# 
   211     0098                     	;# 
   212     0099                     	;# 
   213     009A                     	;# 
   214     009B                     	;# 
   215     009B                     	;# 
   216     009C                     	;# 
   217     009D                     	;# 
   218     009E                     	;# 
   219     009F                     	;# 
   220     010C                     	;# 
   221     010D                     	;# 
   222     010E                     	;# 
   223     0111                     	;# 
   224     0112                     	;# 
   225     0113                     	;# 
   226     0114                     	;# 
   227     0115                     	;# 
   228     0116                     	;# 
   229     0117                     	;# 
   230     0118                     	;# 
   231     0119                     	;# 
   232     011D                     	;# 
   233     018C                     	;# 
   234     018D                     	;# 
   235     018E                     	;# 
   236     0191                     	;# 
   237     0191                     	;# 
   238     0192                     	;# 
   239     0193                     	;# 
   240     0193                     	;# 
   241     0194                     	;# 
   242     0195                     	;# 
   243     0196                     	;# 
   244     0197                     	;# 
   245     0199                     	;# 
   246     019A                     	;# 
   247     019B                     	;# 
   248     019B                     	;# 
   249     019C                     	;# 
   250     019D                     	;# 
   251     019E                     	;# 
   252     019F                     	;# 
   253     020C                     	;# 
   254     020D                     	;# 
   255     0211                     	;# 
   256     0211                     	;# 
   257     0212                     	;# 
   258     0212                     	;# 
   259     0213                     	;# 
   260     0213                     	;# 
   261     0214                     	;# 
   262     0214                     	;# 
   263     0215                     	;# 
   264     0215                     	;# 
   265     0215                     	;# 
   266     0216                     	;# 
   267     0216                     	;# 
   268     0217                     	;# 
   269     0217                     	;# 
   270     0391                     	;# 
   271     0392                     	;# 
   272     0393                     	;# 
   273     0394                     	;# 
   274     0395                     	;# 
   275     0396                     	;# 
   276     039A                     	;# 
   277     039B                     	;# 
   278     0611                     	;# 
   279     0612                     	;# 
   280     0613                     	;# 
   281     0613                     	;# 
   282     0614                     	;# 
   283     0615                     	;# 
   284     0616                     	;# 
   285     0616                     	;# 
   286     0691                     	;# 
   287     0692                     	;# 
   288     0693                     	;# 
   289     0694                     	;# 
   290     0695                     	;# 
   291     0E8E                     	;# 
   292     0E8F                     	;# 
   293     0E90                     	;# 
   294     0E91                     	;# 
   295     0E92                     	;# 
   296     0E93                     	;# 
   297     0E94                     	;# 
   298     0E94                     	;# 
   299     0E95                     	;# 
   300     0E96                     	;# 
   301     0E97                     	;# 
   302     0E98                     	;# 
   303     0E99                     	;# 
   304     0E9A                     	;# 
   305     0E9B                     	;# 
   306     0E9C                     	;# 
   307     0E9D                     	;# 
   308     0E9E                     	;# 
   309     0E9F                     	;# 
   310     0FE4                     	;# 
   311     0FE5                     	;# 
   312     0FE6                     	;# 
   313     0FE7                     	;# 
   314     0FE8                     	;# 
   315     0FE9                     	;# 
   316     0FEA                     	;# 
   317     0FEB                     	;# 
   318     0FED                     	;# 
   319     0FEE                     	;# 
   320     0FEF                     	;# 
   321     0000                     	;# 
   322     0001                     	;# 
   323     0002                     	;# 
   324     0003                     	;# 
   325     0004                     	;# 
   326     0005                     	;# 
   327     0006                     	;# 
   328     0007                     	;# 
   329     0008                     	;# 
   330     0009                     	;# 
   331     000A                     	;# 
   332     000B                     	;# 
   333     000C                     	;# 
   334     000D                     	;# 
   335     000E                     	;# 
   336     0011                     	;# 
   337     0012                     	;# 
   338     0015                     	;# 
   339     0016                     	;# 
   340     0016                     	;# 
   341     0017                     	;# 
   342     0018                     	;# 
   343     0019                     	;# 
   344     001A                     	;# 
   345     001B                     	;# 
   346     001C                     	;# 
   347     008C                     	;# 
   348     008D                     	;# 
   349     008E                     	;# 
   350     0091                     	;# 
   351     0092                     	;# 
   352     0095                     	;# 
   353     0096                     	;# 
   354     0097                     	;# 
   355     0098                     	;# 
   356     0099                     	;# 
   357     009A                     	;# 
   358     009B                     	;# 
   359     009B                     	;# 
   360     009C                     	;# 
   361     009D                     	;# 
   362     009E                     	;# 
   363     009F                     	;# 
   364     010C                     	;# 
   365     010D                     	;# 
   366     010E                     	;# 
   367     0111                     	;# 
   368     0112                     	;# 
   369     0113                     	;# 
   370     0114                     	;# 
   371     0115                     	;# 
   372     0116                     	;# 
   373     0117                     	;# 
   374     0118                     	;# 
   375     0119                     	;# 
   376     011D                     	;# 
   377     018C                     	;# 
   378     018D                     	;# 
   379     018E                     	;# 
   380     0191                     	;# 
   381     0191                     	;# 
   382     0192                     	;# 
   383     0193                     	;# 
   384     0193                     	;# 
   385     0194                     	;# 
   386     0195                     	;# 
   387     0196                     	;# 
   388     0197                     	;# 
   389     0199                     	;# 
   390     019A                     	;# 
   391     019B                     	;# 
   392     019B                     	;# 
   393     019C                     	;# 
   394     019D                     	;# 
   395     019E                     	;# 
   396     019F                     	;# 
   397     020C                     	;# 
   398     020D                     	;# 
   399     0211                     	;# 
   400     0211                     	;# 
   401     0212                     	;# 
   402     0212                     	;# 
   403     0213                     	;# 
   404     0213                     	;# 
   405     0214                     	;# 
   406     0214                     	;# 
   407     0215                     	;# 
   408     0215                     	;# 
   409     0215                     	;# 
   410     0216                     	;# 
   411     0216                     	;# 
   412     0217                     	;# 
   413     0217                     	;# 
   414     0391                     	;# 
   415     0392                     	;# 
   416     0393                     	;# 
   417     0394                     	;# 
   418     0395                     	;# 
   419     0396                     	;# 
   420     039A                     	;# 
   421     039B                     	;# 
   422     0611                     	;# 
   423     0612                     	;# 
   424     0613                     	;# 
   425     0613                     	;# 
   426     0614                     	;# 
   427     0615                     	;# 
   428     0616                     	;# 
   429     0616                     	;# 
   430     0691                     	;# 
   431     0692                     	;# 
   432     0693                     	;# 
   433     0694                     	;# 
   434     0695                     	;# 
   435     0E8E                     	;# 
   436     0E8F                     	;# 
   437     0E90                     	;# 
   438     0E91                     	;# 
   439     0E92                     	;# 
   440     0E93                     	;# 
   441     0E94                     	;# 
   442     0E94                     	;# 
   443     0E95                     	;# 
   444     0E96                     	;# 
   445     0E97                     	;# 
   446     0E98                     	;# 
   447     0E99                     	;# 
   448     0E9A                     	;# 
   449     0E9B                     	;# 
   450     0E9C                     	;# 
   451     0E9D                     	;# 
   452     0E9E                     	;# 
   453     0E9F                     	;# 
   454     0FE4                     	;# 
   455     0FE5                     	;# 
   456     0FE6                     	;# 
   457     0FE7                     	;# 
   458     0FE8                     	;# 
   459     0FE9                     	;# 
   460     0FEA                     	;# 
   461     0FEB                     	;# 
   462     0FED                     	;# 
   463     0FEE                     	;# 
   464     0FEF                     	;# 
   465     0000                     	;# 
   466     0001                     	;# 
   467     0002                     	;# 
   468     0003                     	;# 
   469     0004                     	;# 
   470     0005                     	;# 
   471     0006                     	;# 
   472     0007                     	;# 
   473     0008                     	;# 
   474     0009                     	;# 
   475     000A                     	;# 
   476     000B                     	;# 
   477     000C                     	;# 
   478     000D                     	;# 
   479     000E                     	;# 
   480     0011                     	;# 
   481     0012                     	;# 
   482     0015                     	;# 
   483     0016                     	;# 
   484     0016                     	;# 
   485     0017                     	;# 
   486     0018                     	;# 
   487     0019                     	;# 
   488     001A                     	;# 
   489     001B                     	;# 
   490     001C                     	;# 
   491     008C                     	;# 
   492     008D                     	;# 
   493     008E                     	;# 
   494     0091                     	;# 
   495     0092                     	;# 
   496     0095                     	;# 
   497     0096                     	;# 
   498     0097                     	;# 
   499     0098                     	;# 
   500     0099                     	;# 
   501     009A                     	;# 
   502     009B                     	;# 
   503     009B                     	;# 
   504     009C                     	;# 
   505     009D                     	;# 
   506     009E                     	;# 
   507     009F                     	;# 
   508     010C                     	;# 
   509     010D                     	;# 
   510     010E                     	;# 
   511     0111                     	;# 
   512     0112                     	;# 
   513     0113                     	;# 
   514     0114                     	;# 
   515     0115                     	;# 
   516     0116                     	;# 
   517     0117                     	;# 
   518     0118                     	;# 
   519     0119                     	;# 
   520     011D                     	;# 
   521     018C                     	;# 
   522     018D                     	;# 
   523     018E                     	;# 
   524     0191                     	;# 
   525     0191                     	;# 
   526     0192                     	;# 
   527     0193                     	;# 
   528     0193                     	;# 
   529     0194                     	;# 
   530     0195                     	;# 
   531     0196                     	;# 
   532     0197                     	;# 
   533     0199                     	;# 
   534     019A                     	;# 
   535     019B                     	;# 
   536     019B                     	;# 
   537     019C                     	;# 
   538     019D                     	;# 
   539     019E                     	;# 
   540     019F                     	;# 
   541     020C                     	;# 
   542     020D                     	;# 
   543     0211                     	;# 
   544     0211                     	;# 
   545     0212                     	;# 
   546     0212                     	;# 
   547     0213                     	;# 
   548     0213                     	;# 
   549     0214                     	;# 
   550     0214                     	;# 
   551     0215                     	;# 
   552     0215                     	;# 
   553     0215                     	;# 
   554     0216                     	;# 
   555     0216                     	;# 
   556     0217                     	;# 
   557     0217                     	;# 
   558     0391                     	;# 
   559     0392                     	;# 
   560     0393                     	;# 
   561     0394                     	;# 
   562     0395                     	;# 
   563     0396                     	;# 
   564     039A                     	;# 
   565     039B                     	;# 
   566     0611                     	;# 
   567     0612                     	;# 
   568     0613                     	;# 
   569     0613                     	;# 
   570     0614                     	;# 
   571     0615                     	;# 
   572     0616                     	;# 
   573     0616                     	;# 
   574     0691                     	;# 
   575     0692                     	;# 
   576     0693                     	;# 
   577     0694                     	;# 
   578     0695                     	;# 
   579     0E8E                     	;# 
   580     0E8F                     	;# 
   581     0E90                     	;# 
   582     0E91                     	;# 
   583     0E92                     	;# 
   584     0E93                     	;# 
   585     0E94                     	;# 
   586     0E94                     	;# 
   587     0E95                     	;# 
   588     0E96                     	;# 
   589     0E97                     	;# 
   590     0E98                     	;# 
   591     0E99                     	;# 
   592     0E9A                     	;# 
   593     0E9B                     	;# 
   594     0E9C                     	;# 
   595     0E9D                     	;# 
   596     0E9E                     	;# 
   597     0E9F                     	;# 
   598     0FE4                     	;# 
   599     0FE5                     	;# 
   600     0FE6                     	;# 
   601     0FE7                     	;# 
   602     0FE8                     	;# 
   603     0FE9                     	;# 
   604     0FEA                     	;# 
   605     0FEB                     	;# 
   606     0FED                     	;# 
   607     0FEE                     	;# 
   608     0FEF                     	;# 
   609     0000                     	;# 
   610     0001                     	;# 
   611     0002                     	;# 
   612     0003                     	;# 
   613     0004                     	;# 
   614     0005                     	;# 
   615     0006                     	;# 
   616     0007                     	;# 
   617     0008                     	;# 
   618     0009                     	;# 
   619     000A                     	;# 
   620     000B                     	;# 
   621     000C                     	;# 
   622     000D                     	;# 
   623     000E                     	;# 
   624     0011                     	;# 
   625     0012                     	;# 
   626     0015                     	;# 
   627     0016                     	;# 
   628     0016                     	;# 
   629     0017                     	;# 
   630     0018                     	;# 
   631     0019                     	;# 
   632     001A                     	;# 
   633     001B                     	;# 
   634     001C                     	;# 
   635     008C                     	;# 
   636     008D                     	;# 
   637     008E                     	;# 
   638     0091                     	;# 
   639     0092                     	;# 
   640     0095                     	;# 
   641     0096                     	;# 
   642     0097                     	;# 
   643     0098                     	;# 
   644     0099                     	;# 
   645     009A                     	;# 
   646     009B                     	;# 
   647     009B                     	;# 
   648     009C                     	;# 
   649     009D                     	;# 
   650     009E                     	;# 
   651     009F                     	;# 
   652     010C                     	;# 
   653     010D                     	;# 
   654     010E                     	;# 
   655     0111                     	;# 
   656     0112                     	;# 
   657     0113                     	;# 
   658     0114                     	;# 
   659     0115                     	;# 
   660     0116                     	;# 
   661     0117                     	;# 
   662     0118                     	;# 
   663     0119                     	;# 
   664     011D                     	;# 
   665     018C                     	;# 
   666     018D                     	;# 
   667     018E                     	;# 
   668     0191                     	;# 
   669     0191                     	;# 
   670     0192                     	;# 
   671     0193                     	;# 
   672     0193                     	;# 
   673     0194                     	;# 
   674     0195                     	;# 
   675     0196                     	;# 
   676     0197                     	;# 
   677     0199                     	;# 
   678     019A                     	;# 
   679     019B                     	;# 
   680     019B                     	;# 
   681     019C                     	;# 
   682     019D                     	;# 
   683     019E                     	;# 
   684     019F                     	;# 
   685     020C                     	;# 
   686     020D                     	;# 
   687     0211                     	;# 
   688     0211                     	;# 
   689     0212                     	;# 
   690     0212                     	;# 
   691     0213                     	;# 
   692     0213                     	;# 
   693     0214                     	;# 
   694     0214                     	;# 
   695     0215                     	;# 
   696     0215                     	;# 
   697     0215                     	;# 
   698     0216                     	;# 
   699     0216                     	;# 
   700     0217                     	;# 
   701     0217                     	;# 
   702     0391                     	;# 
   703     0392                     	;# 
   704     0393                     	;# 
   705     0394                     	;# 
   706     0395                     	;# 
   707     0396                     	;# 
   708     039A                     	;# 
   709     039B                     	;# 
   710     0611                     	;# 
   711     0612                     	;# 
   712     0613                     	;# 
   713     0613                     	;# 
   714     0614                     	;# 
   715     0615                     	;# 
   716     0616                     	;# 
   717     0616                     	;# 
   718     0691                     	;# 
   719     0692                     	;# 
   720     0693                     	;# 
   721     0694                     	;# 
   722     0695                     	;# 
   723     0E8E                     	;# 
   724     0E8F                     	;# 
   725     0E90                     	;# 
   726     0E91                     	;# 
   727     0E92                     	;# 
   728     0E93                     	;# 
   729     0E94                     	;# 
   730     0E94                     	;# 
   731     0E95                     	;# 
   732     0E96                     	;# 
   733     0E97                     	;# 
   734     0E98                     	;# 
   735     0E99                     	;# 
   736     0E9A                     	;# 
   737     0E9B                     	;# 
   738     0E9C                     	;# 
   739     0E9D                     	;# 
   740     0E9E                     	;# 
   741     0E9F                     	;# 
   742     0FE4                     	;# 
   743     0FE5                     	;# 
   744     0FE6                     	;# 
   745     0FE7                     	;# 
   746     0FE8                     	;# 
   747     0FE9                     	;# 
   748     0FEA                     	;# 
   749     0FEB                     	;# 
   750     0FED                     	;# 
   751     0FEE                     	;# 
   752     0FEF                     	;# 
   753     0000                     	;# 
   754     0001                     	;# 
   755     0002                     	;# 
   756     0003                     	;# 
   757     0004                     	;# 
   758     0005                     	;# 
   759     0006                     	;# 
   760     0007                     	;# 
   761     0008                     	;# 
   762     0009                     	;# 
   763     000A                     	;# 
   764     000B                     	;# 
   765     000C                     	;# 
   766     000D                     	;# 
   767     000E                     	;# 
   768     0011                     	;# 
   769     0012                     	;# 
   770     0015                     	;# 
   771     0016                     	;# 
   772     0016                     	;# 
   773     0017                     	;# 
   774     0018                     	;# 
   775     0019                     	;# 
   776     001A                     	;# 
   777     001B                     	;# 
   778     001C                     	;# 
   779     008C                     	;# 
   780     008D                     	;# 
   781     008E                     	;# 
   782     0091                     	;# 
   783     0092                     	;# 
   784     0095                     	;# 
   785     0096                     	;# 
   786     0097                     	;# 
   787     0098                     	;# 
   788     0099                     	;# 
   789     009A                     	;# 
   790     009B                     	;# 
   791     009B                     	;# 
   792     009C                     	;# 
   793     009D                     	;# 
   794     009E                     	;# 
   795     009F                     	;# 
   796     010C                     	;# 
   797     010D                     	;# 
   798     010E                     	;# 
   799     0111                     	;# 
   800     0112                     	;# 
   801     0113                     	;# 
   802     0114                     	;# 
   803     0115                     	;# 
   804     0116                     	;# 
   805     0117                     	;# 
   806     0118                     	;# 
   807     0119                     	;# 
   808     011D                     	;# 
   809     018C                     	;# 
   810     018D                     	;# 
   811     018E                     	;# 
   812     0191                     	;# 
   813     0191                     	;# 
   814     0192                     	;# 
   815     0193                     	;# 
   816     0193                     	;# 
   817     0194                     	;# 
   818     0195                     	;# 
   819     0196                     	;# 
   820     0197                     	;# 
   821     0199                     	;# 
   822     019A                     	;# 
   823     019B                     	;# 
   824     019B                     	;# 
   825     019C                     	;# 
   826     019D                     	;# 
   827     019E                     	;# 
   828     019F                     	;# 
   829     020C                     	;# 
   830     020D                     	;# 
   831     0211                     	;# 
   832     0211                     	;# 
   833     0212                     	;# 
   834     0212                     	;# 
   835     0213                     	;# 
   836     0213                     	;# 
   837     0214                     	;# 
   838     0214                     	;# 
   839     0215                     	;# 
   840     0215                     	;# 
   841     0215                     	;# 
   842     0216                     	;# 
   843     0216                     	;# 
   844     0217                     	;# 
   845     0217                     	;# 
   846     0391                     	;# 
   847     0392                     	;# 
   848     0393                     	;# 
   849     0394                     	;# 
   850     0395                     	;# 
   851     0396                     	;# 
   852     039A                     	;# 
   853     039B                     	;# 
   854     0611                     	;# 
   855     0612                     	;# 
   856     0613                     	;# 
   857     0613                     	;# 
   858     0614                     	;# 
   859     0615                     	;# 
   860     0616                     	;# 
   861     0616                     	;# 
   862     0691                     	;# 
   863     0692                     	;# 
   864     0693                     	;# 
   865     0694                     	;# 
   866     0695                     	;# 
   867     0E8E                     	;# 
   868     0E8F                     	;# 
   869     0E90                     	;# 
   870     0E91                     	;# 
   871     0E92                     	;# 
   872     0E93                     	;# 
   873     0E94                     	;# 
   874     0E94                     	;# 
   875     0E95                     	;# 
   876     0E96                     	;# 
   877     0E97                     	;# 
   878     0E98                     	;# 
   879     0E99                     	;# 
   880     0E9A                     	;# 
   881     0E9B                     	;# 
   882     0E9C                     	;# 
   883     0E9D                     	;# 
   884     0E9E                     	;# 
   885     0E9F                     	;# 
   886     0FE4                     	;# 
   887     0FE5                     	;# 
   888     0FE6                     	;# 
   889     0FE7                     	;# 
   890     0FE8                     	;# 
   891     0FE9                     	;# 
   892     0FEA                     	;# 
   893     0FEB                     	;# 
   894     0FED                     	;# 
   895     0FEE                     	;# 
   896     0FEF                     	;# 
   897     0000                     	;# 
   898     0001                     	;# 
   899     0002                     	;# 
   900     0003                     	;# 
   901     0004                     	;# 
   902     0005                     	;# 
   903     0006                     	;# 
   904     0007                     	;# 
   905     0008                     	;# 
   906     0009                     	;# 
   907     000A                     	;# 
   908     000B                     	;# 
   909     000C                     	;# 
   910     000D                     	;# 
   911     000E                     	;# 
   912     0011                     	;# 
   913     0012                     	;# 
   914     0015                     	;# 
   915     0016                     	;# 
   916     0016                     	;# 
   917     0017                     	;# 
   918     0018                     	;# 
   919     0019                     	;# 
   920     001A                     	;# 
   921     001B                     	;# 
   922     001C                     	;# 
   923     008C                     	;# 
   924     008D                     	;# 
   925     008E                     	;# 
   926     0091                     	;# 
   927     0092                     	;# 
   928     0095                     	;# 
   929     0096                     	;# 
   930     0097                     	;# 
   931     0098                     	;# 
   932     0099                     	;# 
   933     009A                     	;# 
   934     009B                     	;# 
   935     009B                     	;# 
   936     009C                     	;# 
   937     009D                     	;# 
   938     009E                     	;# 
   939     009F                     	;# 
   940     010C                     	;# 
   941     010D                     	;# 
   942     010E                     	;# 
   943     0111                     	;# 
   944     0112                     	;# 
   945     0113                     	;# 
   946     0114                     	;# 
   947     0115                     	;# 
   948     0116                     	;# 
   949     0117                     	;# 
   950     0118                     	;# 
   951     0119                     	;# 
   952     011D                     	;# 
   953     018C                     	;# 
   954     018D                     	;# 
   955     018E                     	;# 
   956     0191                     	;# 
   957     0191                     	;# 
   958     0192                     	;# 
   959     0193                     	;# 
   960     0193                     	;# 
   961     0194                     	;# 
   962     0195                     	;# 
   963     0196                     	;# 
   964     0197                     	;# 
   965     0199                     	;# 
   966     019A                     	;# 
   967     019B                     	;# 
   968     019B                     	;# 
   969     019C                     	;# 
   970     019D                     	;# 
   971     019E                     	;# 
   972     019F                     	;# 
   973     020C                     	;# 
   974     020D                     	;# 
   975     0211                     	;# 
   976     0211                     	;# 
   977     0212                     	;# 
   978     0212                     	;# 
   979     0213                     	;# 
   980     0213                     	;# 
   981     0214                     	;# 
   982     0214                     	;# 
   983     0215                     	;# 
   984     0215                     	;# 
   985     0215                     	;# 
   986     0216                     	;# 
   987     0216                     	;# 
   988     0217                     	;# 
   989     0217                     	;# 
   990     0391                     	;# 
   991     0392                     	;# 
   992     0393                     	;# 
   993     0394                     	;# 
   994     0395                     	;# 
   995     0396                     	;# 
   996     039A                     	;# 
   997     039B                     	;# 
   998     0611                     	;# 
   999     0612                     	;# 
  1000     0613                     	;# 
  1001     0613                     	;# 
  1002     0614                     	;# 
  1003     0615                     	;# 
  1004     0616                     	;# 
  1005     0616                     	;# 
  1006     0691                     	;# 
  1007     0692                     	;# 
  1008     0693                     	;# 
  1009     0694                     	;# 
  1010     0695                     	;# 
  1011     0E8E                     	;# 
  1012     0E8F                     	;# 
  1013     0E90                     	;# 
  1014     0E91                     	;# 
  1015     0E92                     	;# 
  1016     0E93                     	;# 
  1017     0E94                     	;# 
  1018     0E94                     	;# 
  1019     0E95                     	;# 
  1020     0E96                     	;# 
  1021     0E97                     	;# 
  1022     0E98                     	;# 
  1023     0E99                     	;# 
  1024     0E9A                     	;# 
  1025     0E9B                     	;# 
  1026     0E9C                     	;# 
  1027     0E9D                     	;# 
  1028     0E9E                     	;# 
  1029     0E9F                     	;# 
  1030     0FE4                     	;# 
  1031     0FE5                     	;# 
  1032     0FE6                     	;# 
  1033     0FE7                     	;# 
  1034     0FE8                     	;# 
  1035     0FE9                     	;# 
  1036     0FEA                     	;# 
  1037     0FEB                     	;# 
  1038     0FED                     	;# 
  1039     0FEE                     	;# 
  1040     0FEF                     	;# 
  1041     0000                     	;# 
  1042     0001                     	;# 
  1043     0002                     	;# 
  1044     0003                     	;# 
  1045     0004                     	;# 
  1046     0005                     	;# 
  1047     0006                     	;# 
  1048     0007                     	;# 
  1049     0008                     	;# 
  1050     0009                     	;# 
  1051     000A                     	;# 
  1052     000B                     	;# 
  1053     000C                     	;# 
  1054     000D                     	;# 
  1055     000E                     	;# 
  1056     0011                     	;# 
  1057     0012                     	;# 
  1058     0015                     	;# 
  1059     0016                     	;# 
  1060     0016                     	;# 
  1061     0017                     	;# 
  1062     0018                     	;# 
  1063     0019                     	;# 
  1064     001A                     	;# 
  1065     001B                     	;# 
  1066     001C                     	;# 
  1067     008C                     	;# 
  1068     008D                     	;# 
  1069     008E                     	;# 
  1070     0091                     	;# 
  1071     0092                     	;# 
  1072     0095                     	;# 
  1073     0096                     	;# 
  1074     0097                     	;# 
  1075     0098                     	;# 
  1076     0099                     	;# 
  1077     009A                     	;# 
  1078     009B                     	;# 
  1079     009B                     	;# 
  1080     009C                     	;# 
  1081     009D                     	;# 
  1082     009E                     	;# 
  1083     009F                     	;# 
  1084     010C                     	;# 
  1085     010D                     	;# 
  1086     010E                     	;# 
  1087     0111                     	;# 
  1088     0112                     	;# 
  1089     0113                     	;# 
  1090     0114                     	;# 
  1091     0115                     	;# 
  1092     0116                     	;# 
  1093     0117                     	;# 
  1094     0118                     	;# 
  1095     0119                     	;# 
  1096     011D                     	;# 
  1097     018C                     	;# 
  1098     018D                     	;# 
  1099     018E                     	;# 
  1100     0191                     	;# 
  1101     0191                     	;# 
  1102     0192                     	;# 
  1103     0193                     	;# 
  1104     0193                     	;# 
  1105     0194                     	;# 
  1106     0195                     	;# 
  1107     0196                     	;# 
  1108     0197                     	;# 
  1109     0199                     	;# 
  1110     019A                     	;# 
  1111     019B                     	;# 
  1112     019B                     	;# 
  1113     019C                     	;# 
  1114     019D                     	;# 
  1115     019E                     	;# 
  1116     019F                     	;# 
  1117     020C                     	;# 
  1118     020D                     	;# 
  1119     0211                     	;# 
  1120     0211                     	;# 
  1121     0212                     	;# 
  1122     0212                     	;# 
  1123     0213                     	;# 
  1124     0213                     	;# 
  1125     0214                     	;# 
  1126     0214                     	;# 
  1127     0215                     	;# 
  1128     0215                     	;# 
  1129     0215                     	;# 
  1130     0216                     	;# 
  1131     0216                     	;# 
  1132     0217                     	;# 
  1133     0217                     	;# 
  1134     0391                     	;# 
  1135     0392                     	;# 
  1136     0393                     	;# 
  1137     0394                     	;# 
  1138     0395                     	;# 
  1139     0396                     	;# 
  1140     039A                     	;# 
  1141     039B                     	;# 
  1142     0611                     	;# 
  1143     0612                     	;# 
  1144     0613                     	;# 
  1145     0613                     	;# 
  1146     0614                     	;# 
  1147     0615                     	;# 
  1148     0616                     	;# 
  1149     0616                     	;# 
  1150     0691                     	;# 
  1151     0692                     	;# 
  1152     0693                     	;# 
  1153     0694                     	;# 
  1154     0695                     	;# 
  1155     0E8E                     	;# 
  1156     0E8F                     	;# 
  1157     0E90                     	;# 
  1158     0E91                     	;# 
  1159     0E92                     	;# 
  1160     0E93                     	;# 
  1161     0E94                     	;# 
  1162     0E94                     	;# 
  1163     0E95                     	;# 
  1164     0E96                     	;# 
  1165     0E97                     	;# 
  1166     0E98                     	;# 
  1167     0E99                     	;# 
  1168     0E9A                     	;# 
  1169     0E9B                     	;# 
  1170     0E9C                     	;# 
  1171     0E9D                     	;# 
  1172     0E9E                     	;# 
  1173     0E9F                     	;# 
  1174     0FE4                     	;# 
  1175     0FE5                     	;# 
  1176     0FE6                     	;# 
  1177     0FE7                     	;# 
  1178     0FE8                     	;# 
  1179     0FE9                     	;# 
  1180     0FEA                     	;# 
  1181     0FEB                     	;# 
  1182     0FED                     	;# 
  1183     0FEE                     	;# 
  1184     0FEF                     	;# 
  1185     0000                     	;# 
  1186     0001                     	;# 
  1187     0002                     	;# 
  1188     0003                     	;# 
  1189     0004                     	;# 
  1190     0005                     	;# 
  1191     0006                     	;# 
  1192     0007                     	;# 
  1193     0008                     	;# 
  1194     0009                     	;# 
  1195     000A                     	;# 
  1196     000B                     	;# 
  1197     000C                     	;# 
  1198     000D                     	;# 
  1199     000E                     	;# 
  1200     0011                     	;# 
  1201     0012                     	;# 
  1202     0015                     	;# 
  1203     0016                     	;# 
  1204     0016                     	;# 
  1205     0017                     	;# 
  1206     0018                     	;# 
  1207     0019                     	;# 
  1208     001A                     	;# 
  1209     001B                     	;# 
  1210     001C                     	;# 
  1211     008C                     	;# 
  1212     008D                     	;# 
  1213     008E                     	;# 
  1214     0091                     	;# 
  1215     0092                     	;# 
  1216     0095                     	;# 
  1217     0096                     	;# 
  1218     0097                     	;# 
  1219     0098                     	;# 
  1220     0099                     	;# 
  1221     009A                     	;# 
  1222     009B                     	;# 
  1223     009B                     	;# 
  1224     009C                     	;# 
  1225     009D                     	;# 
  1226     009E                     	;# 
  1227     009F                     	;# 
  1228     010C                     	;# 
  1229     010D                     	;# 
  1230     010E                     	;# 
  1231     0111                     	;# 
  1232     0112                     	;# 
  1233     0113                     	;# 
  1234     0114                     	;# 
  1235     0115                     	;# 
  1236     0116                     	;# 
  1237     0117                     	;# 
  1238     0118                     	;# 
  1239     0119                     	;# 
  1240     011D                     	;# 
  1241     018C                     	;# 
  1242     018D                     	;# 
  1243     018E                     	;# 
  1244     0191                     	;# 
  1245     0191                     	;# 
  1246     0192                     	;# 
  1247     0193                     	;# 
  1248     0193                     	;# 
  1249     0194                     	;# 
  1250     0195                     	;# 
  1251     0196                     	;# 
  1252     0197                     	;# 
  1253     0199                     	;# 
  1254     019A                     	;# 
  1255     019B                     	;# 
  1256     019B                     	;# 
  1257     019C                     	;# 
  1258     019D                     	;# 
  1259     019E                     	;# 
  1260     019F                     	;# 
  1261     020C                     	;# 
  1262     020D                     	;# 
  1263     0211                     	;# 
  1264     0211                     	;# 
  1265     0212                     	;# 
  1266     0212                     	;# 
  1267     0213                     	;# 
  1268     0213                     	;# 
  1269     0214                     	;# 
  1270     0214                     	;# 
  1271     0215                     	;# 
  1272     0215                     	;# 
  1273     0215                     	;# 
  1274     0216                     	;# 
  1275     0216                     	;# 
  1276     0217                     	;# 
  1277     0217                     	;# 
  1278     0391                     	;# 
  1279     0392                     	;# 
  1280     0393                     	;# 
  1281     0394                     	;# 
  1282     0395                     	;# 
  1283     0396                     	;# 
  1284     039A                     	;# 
  1285     039B                     	;# 
  1286     0611                     	;# 
  1287     0612                     	;# 
  1288     0613                     	;# 
  1289     0613                     	;# 
  1290     0614                     	;# 
  1291     0615                     	;# 
  1292     0616                     	;# 
  1293     0616                     	;# 
  1294     0691                     	;# 
  1295     0692                     	;# 
  1296     0693                     	;# 
  1297     0694                     	;# 
  1298     0695                     	;# 
  1299     0E8E                     	;# 
  1300     0E8F                     	;# 
  1301     0E90                     	;# 
  1302     0E91                     	;# 
  1303     0E92                     	;# 
  1304     0E93                     	;# 
  1305     0E94                     	;# 
  1306     0E94                     	;# 
  1307     0E95                     	;# 
  1308     0E96                     	;# 
  1309     0E97                     	;# 
  1310     0E98                     	;# 
  1311     0E99                     	;# 
  1312     0E9A                     	;# 
  1313     0E9B                     	;# 
  1314     0E9C                     	;# 
  1315     0E9D                     	;# 
  1316     0E9E                     	;# 
  1317     0E9F                     	;# 
  1318     0FE4                     	;# 
  1319     0FE5                     	;# 
  1320     0FE6                     	;# 
  1321     0FE7                     	;# 
  1322     0FE8                     	;# 
  1323     0FE9                     	;# 
  1324     0FEA                     	;# 
  1325     0FEB                     	;# 
  1326     0FED                     	;# 
  1327     0FEE                     	;# 
  1328     0FEF                     	;# 
  1329     0000                     	;# 
  1330     0001                     	;# 
  1331     0002                     	;# 
  1332     0003                     	;# 
  1333     0004                     	;# 
  1334     0005                     	;# 
  1335     0006                     	;# 
  1336     0007                     	;# 
  1337     0008                     	;# 
  1338     0009                     	;# 
  1339     000A                     	;# 
  1340     000B                     	;# 
  1341     000C                     	;# 
  1342     000D                     	;# 
  1343     000E                     	;# 
  1344     0011                     	;# 
  1345     0012                     	;# 
  1346     0015                     	;# 
  1347     0016                     	;# 
  1348     0016                     	;# 
  1349     0017                     	;# 
  1350     0018                     	;# 
  1351     0019                     	;# 
  1352     001A                     	;# 
  1353     001B                     	;# 
  1354     001C                     	;# 
  1355     008C                     	;# 
  1356     008D                     	;# 
  1357     008E                     	;# 
  1358     0091                     	;# 
  1359     0092                     	;# 
  1360     0095                     	;# 
  1361     0096                     	;# 
  1362     0097                     	;# 
  1363     0098                     	;# 
  1364     0099                     	;# 
  1365     009A                     	;# 
  1366     009B                     	;# 
  1367     009B                     	;# 
  1368     009C                     	;# 
  1369     009D                     	;# 
  1370     009E                     	;# 
  1371     009F                     	;# 
  1372     010C                     	;# 
  1373     010D                     	;# 
  1374     010E                     	;# 
  1375     0111                     	;# 
  1376     0112                     	;# 
  1377     0113                     	;# 
  1378     0114                     	;# 
  1379     0115                     	;# 
  1380     0116                     	;# 
  1381     0117                     	;# 
  1382     0118                     	;# 
  1383     0119                     	;# 
  1384     011D                     	;# 
  1385     018C                     	;# 
  1386     018D                     	;# 
  1387     018E                     	;# 
  1388     0191                     	;# 
  1389     0191                     	;# 
  1390     0192                     	;# 
  1391     0193                     	;# 
  1392     0193                     	;# 
  1393     0194                     	;# 
  1394     0195                     	;# 
  1395     0196                     	;# 
  1396     0197                     	;# 
  1397     0199                     	;# 
  1398     019A                     	;# 
  1399     019B                     	;# 
  1400     019B                     	;# 
  1401     019C                     	;# 
  1402     019D                     	;# 
  1403     019E                     	;# 
  1404     019F                     	;# 
  1405     020C                     	;# 
  1406     020D                     	;# 
  1407     0211                     	;# 
  1408     0211                     	;# 
  1409     0212                     	;# 
  1410     0212                     	;# 
  1411     0213                     	;# 
  1412     0213                     	;# 
  1413     0214                     	;# 
  1414     0214                     	;# 
  1415     0215                     	;# 
  1416     0215                     	;# 
  1417     0215                     	;# 
  1418     0216                     	;# 
  1419     0216                     	;# 
  1420     0217                     	;# 
  1421     0217                     	;# 
  1422     0391                     	;# 
  1423     0392                     	;# 
  1424     0393                     	;# 
  1425     0394                     	;# 
  1426     0395                     	;# 
  1427     0396                     	;# 
  1428     039A                     	;# 
  1429     039B                     	;# 
  1430     0611                     	;# 
  1431     0612                     	;# 
  1432     0613                     	;# 
  1433     0613                     	;# 
  1434     0614                     	;# 
  1435     0615                     	;# 
  1436     0616                     	;# 
  1437     0616                     	;# 
  1438     0691                     	;# 
  1439     0692                     	;# 
  1440     0693                     	;# 
  1441     0694                     	;# 
  1442     0695                     	;# 
  1443     0E8E                     	;# 
  1444     0E8F                     	;# 
  1445     0E90                     	;# 
  1446     0E91                     	;# 
  1447     0E92                     	;# 
  1448     0E93                     	;# 
  1449     0E94                     	;# 
  1450     0E94                     	;# 
  1451     0E95                     	;# 
  1452     0E96                     	;# 
  1453     0E97                     	;# 
  1454     0E98                     	;# 
  1455     0E99                     	;# 
  1456     0E9A                     	;# 
  1457     0E9B                     	;# 
  1458     0E9C                     	;# 
  1459     0E9D                     	;# 
  1460     0E9E                     	;# 
  1461     0E9F                     	;# 
  1462     0FE4                     	;# 
  1463     0FE5                     	;# 
  1464     0FE6                     	;# 
  1465     0FE7                     	;# 
  1466     0FE8                     	;# 
  1467     0FE9                     	;# 
  1468     0FEA                     	;# 
  1469     0FEB                     	;# 
  1470     0FED                     	;# 
  1471     0FEE                     	;# 
  1472     0FEF                     	;# 
  1473     0000                     	;# 
  1474     0001                     	;# 
  1475     0002                     	;# 
  1476     0003                     	;# 
  1477     0004                     	;# 
  1478     0005                     	;# 
  1479     0006                     	;# 
  1480     0007                     	;# 
  1481     0008                     	;# 
  1482     0009                     	;# 
  1483     000A                     	;# 
  1484     000B                     	;# 
  1485     000C                     	;# 
  1486     000D                     	;# 
  1487     000E                     	;# 
  1488     0011                     	;# 
  1489     0012                     	;# 
  1490     0015                     	;# 
  1491     0016                     	;# 
  1492     0016                     	;# 
  1493     0017                     	;# 
  1494     0018                     	;# 
  1495     0019                     	;# 
  1496     001A                     	;# 
  1497     001B                     	;# 
  1498     001C                     	;# 
  1499     008C                     	;# 
  1500     008D                     	;# 
  1501     008E                     	;# 
  1502     0091                     	;# 
  1503     0092                     	;# 
  1504     0095                     	;# 
  1505     0096                     	;# 
  1506     0097                     	;# 
  1507     0098                     	;# 
  1508     0099                     	;# 
  1509     009A                     	;# 
  1510     009B                     	;# 
  1511     009B                     	;# 
  1512     009C                     	;# 
  1513     009D                     	;# 
  1514     009E                     	;# 
  1515     009F                     	;# 
  1516     010C                     	;# 
  1517     010D                     	;# 
  1518     010E                     	;# 
  1519     0111                     	;# 
  1520     0112                     	;# 
  1521     0113                     	;# 
  1522     0114                     	;# 
  1523     0115                     	;# 
  1524     0116                     	;# 
  1525     0117                     	;# 
  1526     0118                     	;# 
  1527     0119                     	;# 
  1528     011D                     	;# 
  1529     018C                     	;# 
  1530     018D                     	;# 
  1531     018E                     	;# 
  1532     0191                     	;# 
  1533     0191                     	;# 
  1534     0192                     	;# 
  1535     0193                     	;# 
  1536     0193                     	;# 
  1537     0194                     	;# 
  1538     0195                     	;# 
  1539     0196                     	;# 
  1540     0197                     	;# 
  1541     0199                     	;# 
  1542     019A                     	;# 
  1543     019B                     	;# 
  1544     019B                     	;# 
  1545     019C                     	;# 
  1546     019D                     	;# 
  1547     019E                     	;# 
  1548     019F                     	;# 
  1549     020C                     	;# 
  1550     020D                     	;# 
  1551     0211                     	;# 
  1552     0211                     	;# 
  1553     0212                     	;# 
  1554     0212                     	;# 
  1555     0213                     	;# 
  1556     0213                     	;# 
  1557     0214                     	;# 
  1558     0214                     	;# 
  1559     0215                     	;# 
  1560     0215                     	;# 
  1561     0215                     	;# 
  1562     0216                     	;# 
  1563     0216                     	;# 
  1564     0217                     	;# 
  1565     0217                     	;# 
  1566     0391                     	;# 
  1567     0392                     	;# 
  1568     0393                     	;# 
  1569     0394                     	;# 
  1570     0395                     	;# 
  1571     0396                     	;# 
  1572     039A                     	;# 
  1573     039B                     	;# 
  1574     0611                     	;# 
  1575     0612                     	;# 
  1576     0613                     	;# 
  1577     0613                     	;# 
  1578     0614                     	;# 
  1579     0615                     	;# 
  1580     0616                     	;# 
  1581     0616                     	;# 
  1582     0691                     	;# 
  1583     0692                     	;# 
  1584     0693                     	;# 
  1585     0694                     	;# 
  1586     0695                     	;# 
  1587     0E8E                     	;# 
  1588     0E8F                     	;# 
  1589     0E90                     	;# 
  1590     0E91                     	;# 
  1591     0E92                     	;# 
  1592     0E93                     	;# 
  1593     0E94                     	;# 
  1594     0E94                     	;# 
  1595     0E95                     	;# 
  1596     0E96                     	;# 
  1597     0E97                     	;# 
  1598     0E98                     	;# 
  1599     0E99                     	;# 
  1600     0E9A                     	;# 
  1601     0E9B                     	;# 
  1602     0E9C                     	;# 
  1603     0E9D                     	;# 
  1604     0E9E                     	;# 
  1605     0E9F                     	;# 
  1606     0FE4                     	;# 
  1607     0FE5                     	;# 
  1608     0FE6                     	;# 
  1609     0FE7                     	;# 
  1610     0FE8                     	;# 
  1611     0FE9                     	;# 
  1612     0FEA                     	;# 
  1613     0FEB                     	;# 
  1614     0FED                     	;# 
  1615     0FEE                     	;# 
  1616     0FEF                     	;# 
  1617     0000                     	;# 
  1618     0001                     	;# 
  1619     0002                     	;# 
  1620     0003                     	;# 
  1621     0004                     	;# 
  1622     0005                     	;# 
  1623     0006                     	;# 
  1624     0007                     	;# 
  1625     0008                     	;# 
  1626     0009                     	;# 
  1627     000A                     	;# 
  1628     000B                     	;# 
  1629     000C                     	;# 
  1630     000D                     	;# 
  1631     000E                     	;# 
  1632     0011                     	;# 
  1633     0012                     	;# 
  1634     0015                     	;# 
  1635     0016                     	;# 
  1636     0016                     	;# 
  1637     0017                     	;# 
  1638     0018                     	;# 
  1639     0019                     	;# 
  1640     001A                     	;# 
  1641     001B                     	;# 
  1642     001C                     	;# 
  1643     008C                     	;# 
  1644     008D                     	;# 
  1645     008E                     	;# 
  1646     0091                     	;# 
  1647     0092                     	;# 
  1648     0095                     	;# 
  1649     0096                     	;# 
  1650     0097                     	;# 
  1651     0098                     	;# 
  1652     0099                     	;# 
  1653     009A                     	;# 
  1654     009B                     	;# 
  1655     009B                     	;# 
  1656     009C                     	;# 
  1657     009D                     	;# 
  1658     009E                     	;# 
  1659     009F                     	;# 
  1660     010C                     	;# 
  1661     010D                     	;# 
  1662     010E                     	;# 
  1663     0111                     	;# 
  1664     0112                     	;# 
  1665     0113                     	;# 
  1666     0114                     	;# 
  1667     0115                     	;# 
  1668     0116                     	;# 
  1669     0117                     	;# 
  1670     0118                     	;# 
  1671     0119                     	;# 
  1672     011D                     	;# 
  1673     018C                     	;# 
  1674     018D                     	;# 
  1675     018E                     	;# 
  1676     0191                     	;# 
  1677     0191                     	;# 
  1678     0192                     	;# 
  1679     0193                     	;# 
  1680     0193                     	;# 
  1681     0194                     	;# 
  1682     0195                     	;# 
  1683     0196                     	;# 
  1684     0197                     	;# 
  1685     0199                     	;# 
  1686     019A                     	;# 
  1687     019B                     	;# 
  1688     019B                     	;# 
  1689     019C                     	;# 
  1690     019D                     	;# 
  1691     019E                     	;# 
  1692     019F                     	;# 
  1693     020C                     	;# 
  1694     020D                     	;# 
  1695     0211                     	;# 
  1696     0211                     	;# 
  1697     0212                     	;# 
  1698     0212                     	;# 
  1699     0213                     	;# 
  1700     0213                     	;# 
  1701     0214                     	;# 
  1702     0214                     	;# 
  1703     0215                     	;# 
  1704     0215                     	;# 
  1705     0215                     	;# 
  1706     0216                     	;# 
  1707     0216                     	;# 
  1708     0217                     	;# 
  1709     0217                     	;# 
  1710     0391                     	;# 
  1711     0392                     	;# 
  1712     0393                     	;# 
  1713     0394                     	;# 
  1714     0395                     	;# 
  1715     0396                     	;# 
  1716     039A                     	;# 
  1717     039B                     	;# 
  1718     0611                     	;# 
  1719     0612                     	;# 
  1720     0613                     	;# 
  1721     0613                     	;# 
  1722     0614                     	;# 
  1723     0615                     	;# 
  1724     0616                     	;# 
  1725     0616                     	;# 
  1726     0691                     	;# 
  1727     0692                     	;# 
  1728     0693                     	;# 
  1729     0694                     	;# 
  1730     0695                     	;# 
  1731     0E8E                     	;# 
  1732     0E8F                     	;# 
  1733     0E90                     	;# 
  1734     0E91                     	;# 
  1735     0E92                     	;# 
  1736     0E93                     	;# 
  1737     0E94                     	;# 
  1738     0E94                     	;# 
  1739     0E95                     	;# 
  1740     0E96                     	;# 
  1741     0E97                     	;# 
  1742     0E98                     	;# 
  1743     0E99                     	;# 
  1744     0E9A                     	;# 
  1745     0E9B                     	;# 
  1746     0E9C                     	;# 
  1747     0E9D                     	;# 
  1748     0E9E                     	;# 
  1749     0E9F                     	;# 
  1750     0FE4                     	;# 
  1751     0FE5                     	;# 
  1752     0FE6                     	;# 
  1753     0FE7                     	;# 
  1754     0FE8                     	;# 
  1755     0FE9                     	;# 
  1756     0FEA                     	;# 
  1757     0FEB                     	;# 
  1758     0FED                     	;# 
  1759     0FEE                     	;# 
  1760     0FEF                     	;# 
  1761     0000                     	;# 
  1762     0001                     	;# 
  1763     0002                     	;# 
  1764     0003                     	;# 
  1765     0004                     	;# 
  1766     0005                     	;# 
  1767     0006                     	;# 
  1768     0007                     	;# 
  1769     0008                     	;# 
  1770     0009                     	;# 
  1771     000A                     	;# 
  1772     000B                     	;# 
  1773     000C                     	;# 
  1774     000D                     	;# 
  1775     000E                     	;# 
  1776     0011                     	;# 
  1777     0012                     	;# 
  1778     0015                     	;# 
  1779     0016                     	;# 
  1780     0016                     	;# 
  1781     0017                     	;# 
  1782     0018                     	;# 
  1783     0019                     	;# 
  1784     001A                     	;# 
  1785     001B                     	;# 
  1786     001C                     	;# 
  1787     008C                     	;# 
  1788     008D                     	;# 
  1789     008E                     	;# 
  1790     0091                     	;# 
  1791     0092                     	;# 
  1792     0095                     	;# 
  1793     0096                     	;# 
  1794     0097                     	;# 
  1795     0098                     	;# 
  1796     0099                     	;# 
  1797     009A                     	;# 
  1798     009B                     	;# 
  1799     009B                     	;# 
  1800     009C                     	;# 
  1801     009D                     	;# 
  1802     009E                     	;# 
  1803     009F                     	;# 
  1804     010C                     	;# 
  1805     010D                     	;# 
  1806     010E                     	;# 
  1807     0111                     	;# 
  1808     0112                     	;# 
  1809     0113                     	;# 
  1810     0114                     	;# 
  1811     0115                     	;# 
  1812     0116                     	;# 
  1813     0117                     	;# 
  1814     0118                     	;# 
  1815     0119                     	;# 
  1816     011D                     	;# 
  1817     018C                     	;# 
  1818     018D                     	;# 
  1819     018E                     	;# 
  1820     0191                     	;# 
  1821     0191                     	;# 
  1822     0192                     	;# 
  1823     0193                     	;# 
  1824     0193                     	;# 
  1825     0194                     	;# 
  1826     0195                     	;# 
  1827     0196                     	;# 
  1828     0197                     	;# 
  1829     0199                     	;# 
  1830     019A                     	;# 
  1831     019B                     	;# 
  1832     019B                     	;# 
  1833     019C                     	;# 
  1834     019D                     	;# 
  1835     019E                     	;# 
  1836     019F                     	;# 
  1837     020C                     	;# 
  1838     020D                     	;# 
  1839     0211                     	;# 
  1840     0211                     	;# 
  1841     0212                     	;# 
  1842     0212                     	;# 
  1843     0213                     	;# 
  1844     0213                     	;# 
  1845     0214                     	;# 
  1846     0214                     	;# 
  1847     0215                     	;# 
  1848     0215                     	;# 
  1849     0215                     	;# 
  1850     0216                     	;# 
  1851     0216                     	;# 
  1852     0217                     	;# 
  1853     0217                     	;# 
  1854     0391                     	;# 
  1855     0392                     	;# 
  1856     0393                     	;# 
  1857     0394                     	;# 
  1858     0395                     	;# 
  1859     0396                     	;# 
  1860     039A                     	;# 
  1861     039B                     	;# 
  1862     0611                     	;# 
  1863     0612                     	;# 
  1864     0613                     	;# 
  1865     0613                     	;# 
  1866     0614                     	;# 
  1867     0615                     	;# 
  1868     0616                     	;# 
  1869     0616                     	;# 
  1870     0691                     	;# 
  1871     0692                     	;# 
  1872     0693                     	;# 
  1873     0694                     	;# 
  1874     0695                     	;# 
  1875     0E8E                     	;# 
  1876     0E8F                     	;# 
  1877     0E90                     	;# 
  1878     0E91                     	;# 
  1879     0E92                     	;# 
  1880     0E93                     	;# 
  1881     0E94                     	;# 
  1882     0E94                     	;# 
  1883     0E95                     	;# 
  1884     0E96                     	;# 
  1885     0E97                     	;# 
  1886     0E98                     	;# 
  1887     0E99                     	;# 
  1888     0E9A                     	;# 
  1889     0E9B                     	;# 
  1890     0E9C                     	;# 
  1891     0E9D                     	;# 
  1892     0E9E                     	;# 
  1893     0E9F                     	;# 
  1894     0FE4                     	;# 
  1895     0FE5                     	;# 
  1896     0FE6                     	;# 
  1897     0FE7                     	;# 
  1898     0FE8                     	;# 
  1899     0FE9                     	;# 
  1900     0FEA                     	;# 
  1901     0FEB                     	;# 
  1902     0FED                     	;# 
  1903     0FEE                     	;# 
  1904     0FEF                     	;# 
  1905     0000                     	;# 
  1906     0001                     	;# 
  1907     0002                     	;# 
  1908     0003                     	;# 
  1909     0004                     	;# 
  1910     0005                     	;# 
  1911     0006                     	;# 
  1912     0007                     	;# 
  1913     0008                     	;# 
  1914     0009                     	;# 
  1915     000A                     	;# 
  1916     000B                     	;# 
  1917     000C                     	;# 
  1918     000D                     	;# 
  1919     000E                     	;# 
  1920     0011                     	;# 
  1921     0012                     	;# 
  1922     0015                     	;# 
  1923     0016                     	;# 
  1924     0016                     	;# 
  1925     0017                     	;# 
  1926     0018                     	;# 
  1927     0019                     	;# 
  1928     001A                     	;# 
  1929     001B                     	;# 
  1930     001C                     	;# 
  1931     008C                     	;# 
  1932     008D                     	;# 
  1933     008E                     	;# 
  1934     0091                     	;# 
  1935     0092                     	;# 
  1936     0095                     	;# 
  1937     0096                     	;# 
  1938     0097                     	;# 
  1939     0098                     	;# 
  1940     0099                     	;# 
  1941     009A                     	;# 
  1942     009B                     	;# 
  1943     009B                     	;# 
  1944     009C                     	;# 
  1945     009D                     	;# 
  1946     009E                     	;# 
  1947     009F                     	;# 
  1948     010C                     	;# 
  1949     010D                     	;# 
  1950     010E                     	;# 
  1951     0111                     	;# 
  1952     0112                     	;# 
  1953     0113                     	;# 
  1954     0114                     	;# 
  1955     0115                     	;# 
  1956     0116                     	;# 
  1957     0117                     	;# 
  1958     0118                     	;# 
  1959     0119                     	;# 
  1960     011D                     	;# 
  1961     018C                     	;# 
  1962     018D                     	;# 
  1963     018E                     	;# 
  1964     0191                     	;# 
  1965     0191                     	;# 
  1966     0192                     	;# 
  1967     0193                     	;# 
  1968     0193                     	;# 
  1969     0194                     	;# 
  1970     0195                     	;# 
  1971     0196                     	;# 
  1972     0197                     	;# 
  1973     0199                     	;# 
  1974     019A                     	;# 
  1975     019B                     	;# 
  1976     019B                     	;# 
  1977     019C                     	;# 
  1978     019D                     	;# 
  1979     019E                     	;# 
  1980     019F                     	;# 
  1981     020C                     	;# 
  1982     020D                     	;# 
  1983     0211                     	;# 
  1984     0211                     	;# 
  1985     0212                     	;# 
  1986     0212                     	;# 
  1987     0213                     	;# 
  1988     0213                     	;# 
  1989     0214                     	;# 
  1990     0214                     	;# 
  1991     0215                     	;# 
  1992     0215                     	;# 
  1993     0215                     	;# 
  1994     0216                     	;# 
  1995     0216                     	;# 
  1996     0217                     	;# 
  1997     0217                     	;# 
  1998     0391                     	;# 
  1999     0392                     	;# 
  2000     0393                     	;# 
  2001     0394                     	;# 
  2002     0395                     	;# 
  2003     0396                     	;# 
  2004     039A                     	;# 
  2005     039B                     	;# 
  2006     0611                     	;# 
  2007     0612                     	;# 
  2008     0613                     	;# 
  2009     0613                     	;# 
  2010     0614                     	;# 
  2011     0615                     	;# 
  2012     0616                     	;# 
  2013     0616                     	;# 
  2014     0691                     	;# 
  2015     0692                     	;# 
  2016     0693                     	;# 
  2017     0694                     	;# 
  2018     0695                     	;# 
  2019     0E8E                     	;# 
  2020     0E8F                     	;# 
  2021     0E90                     	;# 
  2022     0E91                     	;# 
  2023     0E92                     	;# 
  2024     0E93                     	;# 
  2025     0E94                     	;# 
  2026     0E94                     	;# 
  2027     0E95                     	;# 
  2028     0E96                     	;# 
  2029     0E97                     	;# 
  2030     0E98                     	;# 
  2031     0E99                     	;# 
  2032     0E9A                     	;# 
  2033     0E9B                     	;# 
  2034     0E9C                     	;# 
  2035     0E9D                     	;# 
  2036     0E9E                     	;# 
  2037     0E9F                     	;# 
  2038     0FE4                     	;# 
  2039     0FE5                     	;# 
  2040     0FE6                     	;# 
  2041     0FE7                     	;# 
  2042     0FE8                     	;# 
  2043     0FE9                     	;# 
  2044     0FEA                     	;# 
  2045     0FEB                     	;# 
  2046     0FED                     	;# 
  2047     0FEE                     	;# 
  2048     0FEF                     	;# 
  2049     0000                     	;# 
  2050     0001                     	;# 
  2051     0002                     	;# 
  2052     0003                     	;# 
  2053     0004                     	;# 
  2054     0005                     	;# 
  2055     0006                     	;# 
  2056     0007                     	;# 
  2057     0008                     	;# 
  2058     0009                     	;# 
  2059     000A                     	;# 
  2060     000B                     	;# 
  2061     000C                     	;# 
  2062     000D                     	;# 
  2063     000E                     	;# 
  2064     0011                     	;# 
  2065     0012                     	;# 
  2066     0015                     	;# 
  2067     0016                     	;# 
  2068     0016                     	;# 
  2069     0017                     	;# 
  2070     0018                     	;# 
  2071     0019                     	;# 
  2072     001A                     	;# 
  2073     001B                     	;# 
  2074     001C                     	;# 
  2075     008C                     	;# 
  2076     008D                     	;# 
  2077     008E                     	;# 
  2078     0091                     	;# 
  2079     0092                     	;# 
  2080     0095                     	;# 
  2081     0096                     	;# 
  2082     0097                     	;# 
  2083     0098                     	;# 
  2084     0099                     	;# 
  2085     009A                     	;# 
  2086     009B                     	;# 
  2087     009B                     	;# 
  2088     009C                     	;# 
  2089     009D                     	;# 
  2090     009E                     	;# 
  2091     009F                     	;# 
  2092     010C                     	;# 
  2093     010D                     	;# 
  2094     010E                     	;# 
  2095     0111                     	;# 
  2096     0112                     	;# 
  2097     0113                     	;# 
  2098     0114                     	;# 
  2099     0115                     	;# 
  2100     0116                     	;# 
  2101     0117                     	;# 
  2102     0118                     	;# 
  2103     0119                     	;# 
  2104     011D                     	;# 
  2105     018C                     	;# 
  2106     018D                     	;# 
  2107     018E                     	;# 
  2108     0191                     	;# 
  2109     0191                     	;# 
  2110     0192                     	;# 
  2111     0193                     	;# 
  2112     0193                     	;# 
  2113     0194                     	;# 
  2114     0195                     	;# 
  2115     0196                     	;# 
  2116     0197                     	;# 
  2117     0199                     	;# 
  2118     019A                     	;# 
  2119     019B                     	;# 
  2120     019B                     	;# 
  2121     019C                     	;# 
  2122     019D                     	;# 
  2123     019E                     	;# 
  2124     019F                     	;# 
  2125     020C                     	;# 
  2126     020D                     	;# 
  2127     0211                     	;# 
  2128     0211                     	;# 
  2129     0212                     	;# 
  2130     0212                     	;# 
  2131     0213                     	;# 
  2132     0213                     	;# 
  2133     0214                     	;# 
  2134     0214                     	;# 
  2135     0215                     	;# 
  2136     0215                     	;# 
  2137     0215                     	;# 
  2138     0216                     	;# 
  2139     0216                     	;# 
  2140     0217                     	;# 
  2141     0217                     	;# 
  2142     0391                     	;# 
  2143     0392                     	;# 
  2144     0393                     	;# 
  2145     0394                     	;# 
  2146     0395                     	;# 
  2147     0396                     	;# 
  2148     039A                     	;# 
  2149     039B                     	;# 
  2150     0611                     	;# 
  2151     0612                     	;# 
  2152     0613                     	;# 
  2153     0613                     	;# 
  2154     0614                     	;# 
  2155     0615                     	;# 
  2156     0616                     	;# 
  2157     0616                     	;# 
  2158     0691                     	;# 
  2159     0692                     	;# 
  2160     0693                     	;# 
  2161     0694                     	;# 
  2162     0695                     	;# 
  2163     0E8E                     	;# 
  2164     0E8F                     	;# 
  2165     0E90                     	;# 
  2166     0E91                     	;# 
  2167     0E92                     	;# 
  2168     0E93                     	;# 
  2169     0E94                     	;# 
  2170     0E94                     	;# 
  2171     0E95                     	;# 
  2172     0E96                     	;# 
  2173     0E97                     	;# 
  2174     0E98                     	;# 
  2175     0E99                     	;# 
  2176     0E9A                     	;# 
  2177     0E9B                     	;# 
  2178     0E9C                     	;# 
  2179     0E9D                     	;# 
  2180     0E9E                     	;# 
  2181     0E9F                     	;# 
  2182     0FE4                     	;# 
  2183     0FE5                     	;# 
  2184     0FE6                     	;# 
  2185     0FE7                     	;# 
  2186     0FE8                     	;# 
  2187     0FE9                     	;# 
  2188     0FEA                     	;# 
  2189     0FEB                     	;# 
  2190     0FED                     	;# 
  2191     0FEE                     	;# 
  2192     0FEF                     	;_keyboard
  2193                           
  2194                           	psect	idataBANK3
  2195     1EA2                     __pidataBANK3:
  2196                           
  2197                           ;initializer for main@F3452
  2198     1EA2  3420               	retlw	32
  2199     1EA3  3420               	retlw	32
  2200     1EA4  3420               	retlw	32
  2201     1EA5  3420               	retlw	32
  2202     1EA6  340D               	retlw	13
  2203     1EA7  340A               	retlw	10
  2204                           
  2205                           	psect	stringtext1
  2206     0402                     __pstringtext1:
  2207     0402                     _ps2ExtUsbMap:
  2208     0402  3400               	retlw	0
  2209     0403  3400               	retlw	0
  2210     0404  3400               	retlw	0
  2211     0405  3400               	retlw	0
  2212     0406  3400               	retlw	0
  2213     0407  3400               	retlw	0
  2214     0408  3400               	retlw	0
  2215     0409  3400               	retlw	0
  2216     040A  3400               	retlw	0
  2217     040B  3400               	retlw	0
  2218     040C  3400               	retlw	0
  2219     040D  3400               	retlw	0
  2220     040E  3400               	retlw	0
  2221     040F  3400               	retlw	0
  2222     0410  3400               	retlw	0
  2223     0411  3400               	retlw	0
  2224     0412  3400               	retlw	0
  2225     0413  34E6               	retlw	230
  2226     0414  3400               	retlw	0
  2227     0415  3400               	retlw	0
  2228     0416  34E4               	retlw	228
  2229     0417  3400               	retlw	0
  2230     0418  3400               	retlw	0
  2231     0419  3400               	retlw	0
  2232     041A  3400               	retlw	0
  2233     041B  3400               	retlw	0
  2234     041C  3400               	retlw	0
  2235     041D  3400               	retlw	0
  2236     041E  3400               	retlw	0
  2237     041F  3400               	retlw	0
  2238     0420  3400               	retlw	0
  2239     0421  34E3               	retlw	227
  2240     0422  3400               	retlw	0
  2241     0423  3400               	retlw	0
  2242     0424  3400               	retlw	0
  2243     0425  3400               	retlw	0
  2244     0426  3400               	retlw	0
  2245     0427  3400               	retlw	0
  2246     0428  3400               	retlw	0
  2247     0429  34E7               	retlw	231
  2248     042A  3400               	retlw	0
  2249     042B  3400               	retlw	0
  2250     042C  3400               	retlw	0
  2251     042D  3400               	retlw	0
  2252     042E  3400               	retlw	0
  2253     042F  3400               	retlw	0
  2254     0430  3400               	retlw	0
  2255     0431  3465               	retlw	101
  2256     0432  3400               	retlw	0
  2257     0433  3400               	retlw	0
  2258     0434  3400               	retlw	0
  2259     0435  3400               	retlw	0
  2260     0436  3400               	retlw	0
  2261     0437  3400               	retlw	0
  2262     0438  3400               	retlw	0
  2263     0439  3400               	retlw	0
  2264     043A  3400               	retlw	0
  2265     043B  3400               	retlw	0
  2266     043C  3400               	retlw	0
  2267     043D  3400               	retlw	0
  2268     043E  3400               	retlw	0
  2269     043F  3400               	retlw	0
  2270     0440  3400               	retlw	0
  2271     0441  3400               	retlw	0
  2272     0442  3400               	retlw	0
  2273     0443  3400               	retlw	0
  2274     0444  3400               	retlw	0
  2275     0445  3400               	retlw	0
  2276     0446  3400               	retlw	0
  2277     0447  3400               	retlw	0
  2278     0448  3400               	retlw	0
  2279     0449  3400               	retlw	0
  2280     044A  3400               	retlw	0
  2281     044B  3400               	retlw	0
  2282     044C  3454               	retlw	84
  2283     044D  3400               	retlw	0
  2284     044E  3400               	retlw	0
  2285     044F  3400               	retlw	0
  2286     0450  3400               	retlw	0
  2287     0451  3400               	retlw	0
  2288     0452  3400               	retlw	0
  2289     0453  3400               	retlw	0
  2290     0454  3400               	retlw	0
  2291     0455  3400               	retlw	0
  2292     0456  3400               	retlw	0
  2293     0457  3400               	retlw	0
  2294     0458  3400               	retlw	0
  2295     0459  3400               	retlw	0
  2296     045A  3400               	retlw	0
  2297     045B  3400               	retlw	0
  2298     045C  3458               	retlw	88
  2299     045D  3400               	retlw	0
  2300     045E  3400               	retlw	0
  2301     045F  3400               	retlw	0
  2302     0460  3400               	retlw	0
  2303     0461  3400               	retlw	0
  2304     0462  3400               	retlw	0
  2305     0463  3400               	retlw	0
  2306     0464  3400               	retlw	0
  2307     0465  3400               	retlw	0
  2308     0466  3400               	retlw	0
  2309     0467  3400               	retlw	0
  2310     0468  3400               	retlw	0
  2311     0469  3400               	retlw	0
  2312     046A  3400               	retlw	0
  2313     046B  344D               	retlw	77
  2314     046C  3400               	retlw	0
  2315     046D  3450               	retlw	80
  2316     046E  344A               	retlw	74
  2317     046F  3400               	retlw	0
  2318     0470  3400               	retlw	0
  2319     0471  3400               	retlw	0
  2320     0472  3449               	retlw	73
  2321     0473  344C               	retlw	76
  2322     0474  3451               	retlw	81
  2323     0475  3400               	retlw	0
  2324     0476  344F               	retlw	79
  2325     0477  3452               	retlw	82
  2326     0478  3400               	retlw	0
  2327     0479  3400               	retlw	0
  2328     047A  3400               	retlw	0
  2329     047B  3400               	retlw	0
  2330     047C  344E               	retlw	78
  2331     047D  3400               	retlw	0
  2332     047E  3446               	retlw	70
  2333     047F  344B               	retlw	75
  2334     0480  3400               	retlw	0
  2335     0481  3400               	retlw	0
  2336     0482  3400               	retlw	0
  2337     0483  3400               	retlw	0
  2338     0484  3400               	retlw	0
  2339     0485  3400               	retlw	0
  2340     0486  3400               	retlw	0
  2341     0487  3400               	retlw	0
  2342     0488  3400               	retlw	0
  2343     0489  3400               	retlw	0
  2344     048A  3400               	retlw	0
  2345     048B  3400               	retlw	0
  2346     048C  3400               	retlw	0
  2347     048D  3400               	retlw	0
  2348     048E  3400               	retlw	0
  2349     048F  3400               	retlw	0
  2350     0490  3400               	retlw	0
  2351     0491  3400               	retlw	0
  2352     0492  3400               	retlw	0
  2353     0493  3400               	retlw	0
  2354     0494  3400               	retlw	0
  2355     0495  3400               	retlw	0
  2356     0496  3400               	retlw	0
  2357     0497  3400               	retlw	0
  2358     0498  3400               	retlw	0
  2359     0499  3400               	retlw	0
  2360     049A  3400               	retlw	0
  2361     049B  3400               	retlw	0
  2362     049C  3400               	retlw	0
  2363     049D  3400               	retlw	0
  2364     049E  3400               	retlw	0
  2365     049F  3400               	retlw	0
  2366     04A0  3400               	retlw	0
  2367     04A1  3400               	retlw	0
  2368     04A2  3400               	retlw	0
  2369     04A3  3400               	retlw	0
  2370     04A4  3400               	retlw	0
  2371     04A5  3400               	retlw	0
  2372     04A6  3400               	retlw	0
  2373     04A7  3400               	retlw	0
  2374     04A8  3400               	retlw	0
  2375     04A9  3400               	retlw	0
  2376     04AA  3400               	retlw	0
  2377     04AB  3400               	retlw	0
  2378     04AC  3400               	retlw	0
  2379     04AD  3400               	retlw	0
  2380     04AE  3400               	retlw	0
  2381     04AF  3400               	retlw	0
  2382     04B0  3400               	retlw	0
  2383     04B1  3400               	retlw	0
  2384     04B2  3400               	retlw	0
  2385     04B3  3400               	retlw	0
  2386     04B4  3400               	retlw	0
  2387     04B5  3400               	retlw	0
  2388     04B6  3400               	retlw	0
  2389     04B7  3400               	retlw	0
  2390     04B8  3400               	retlw	0
  2391     04B9  3400               	retlw	0
  2392     04BA  3400               	retlw	0
  2393     04BB  3400               	retlw	0
  2394     04BC  3400               	retlw	0
  2395     04BD  3400               	retlw	0
  2396     04BE  3400               	retlw	0
  2397     04BF  3400               	retlw	0
  2398     04C0  3400               	retlw	0
  2399     04C1  3400               	retlw	0
  2400     04C2  3400               	retlw	0
  2401     04C3  3400               	retlw	0
  2402     04C4  3400               	retlw	0
  2403     04C5  3400               	retlw	0
  2404     04C6  3400               	retlw	0
  2405     04C7  3400               	retlw	0
  2406     04C8  3400               	retlw	0
  2407     04C9  3400               	retlw	0
  2408     04CA  3400               	retlw	0
  2409     04CB  3400               	retlw	0
  2410     04CC  3400               	retlw	0
  2411     04CD  3400               	retlw	0
  2412     04CE  3400               	retlw	0
  2413     04CF  3400               	retlw	0
  2414     04D0  3400               	retlw	0
  2415     04D1  3400               	retlw	0
  2416     04D2  3400               	retlw	0
  2417     04D3  3400               	retlw	0
  2418     04D4  3400               	retlw	0
  2419     04D5  3400               	retlw	0
  2420     04D6  3400               	retlw	0
  2421     04D7  3400               	retlw	0
  2422     04D8  3400               	retlw	0
  2423     04D9  3400               	retlw	0
  2424     04DA  3400               	retlw	0
  2425     04DB  3400               	retlw	0
  2426     04DC  3400               	retlw	0
  2427     04DD  3400               	retlw	0
  2428     04DE  3400               	retlw	0
  2429     04DF  3400               	retlw	0
  2430     04E0  3400               	retlw	0
  2431     04E1  3400               	retlw	0
  2432     04E2  3400               	retlw	0
  2433     04E3  3400               	retlw	0
  2434     04E4  3400               	retlw	0
  2435     04E5  3400               	retlw	0
  2436     04E6  3400               	retlw	0
  2437     04E7  3400               	retlw	0
  2438     04E8  3400               	retlw	0
  2439     04E9  3400               	retlw	0
  2440     04EA  3400               	retlw	0
  2441     04EB  3400               	retlw	0
  2442     04EC  3400               	retlw	0
  2443     04ED  3400               	retlw	0
  2444     04EE  3400               	retlw	0
  2445     04EF  3400               	retlw	0
  2446     04F0  3400               	retlw	0
  2447     04F1  3400               	retlw	0
  2448     04F2  3400               	retlw	0
  2449     04F3  3400               	retlw	0
  2450     04F4  3400               	retlw	0
  2451     04F5  3400               	retlw	0
  2452     04F6  3400               	retlw	0
  2453     04F7  3400               	retlw	0
  2454     04F8  3400               	retlw	0
  2455     04F9  3400               	retlw	0
  2456     04FA  3400               	retlw	0
  2457     04FB  3400               	retlw	0
  2458     04FC  3400               	retlw	0
  2459     04FD  3400               	retlw	0
  2460     04FE  3400               	retlw	0
  2461     04FF  3400               	retlw	0
  2462     0500  3400               	retlw	0
  2463     0501                     __end_of_ps2ExtUsbMap:
  2464                           
  2465                           	psect	stringtext2
  2466     1000                     __pstringtext2:
  2467     1000                     _ps2UsbMap:
  2468     1000  3400               	retlw	0
  2469     1001  3442               	retlw	66
  2470     1002  3400               	retlw	0
  2471     1003  343E               	retlw	62
  2472     1004  343C               	retlw	60
  2473     1005  343A               	retlw	58
  2474     1006  343B               	retlw	59
  2475     1007  3445               	retlw	69
  2476     1008  3400               	retlw	0
  2477     1009  3443               	retlw	67
  2478     100A  3441               	retlw	65
  2479     100B  343F               	retlw	63
  2480     100C  343D               	retlw	61
  2481     100D  342B               	retlw	43
  2482     100E  3435               	retlw	53
  2483     100F  3400               	retlw	0
  2484     1010  3400               	retlw	0
  2485     1011  34E2               	retlw	226
  2486     1012  34E1               	retlw	225
  2487     1013  3400               	retlw	0
  2488     1014  34E0               	retlw	224
  2489     1015  3414               	retlw	20
  2490     1016  341E               	retlw	30
  2491     1017  3400               	retlw	0
  2492     1018  3400               	retlw	0
  2493     1019  3400               	retlw	0
  2494     101A  341D               	retlw	29
  2495     101B  3416               	retlw	22
  2496     101C  3404               	retlw	4
  2497     101D  341A               	retlw	26
  2498     101E  341F               	retlw	31
  2499     101F  3400               	retlw	0
  2500     1020  3400               	retlw	0
  2501     1021  3406               	retlw	6
  2502     1022  341B               	retlw	27
  2503     1023  3407               	retlw	7
  2504     1024  3408               	retlw	8
  2505     1025  3421               	retlw	33
  2506     1026  3420               	retlw	32
  2507     1027  3400               	retlw	0
  2508     1028  3400               	retlw	0
  2509     1029  342C               	retlw	44
  2510     102A  3419               	retlw	25
  2511     102B  3409               	retlw	9
  2512     102C  3417               	retlw	23
  2513     102D  3415               	retlw	21
  2514     102E  3422               	retlw	34
  2515     102F  3400               	retlw	0
  2516     1030  3400               	retlw	0
  2517     1031  3411               	retlw	17
  2518     1032  3405               	retlw	5
  2519     1033  340B               	retlw	11
  2520     1034  340A               	retlw	10
  2521     1035  341C               	retlw	28
  2522     1036  3423               	retlw	35
  2523     1037  3400               	retlw	0
  2524     1038  3400               	retlw	0
  2525     1039  3400               	retlw	0
  2526     103A  3410               	retlw	16
  2527     103B  340D               	retlw	13
  2528     103C  3418               	retlw	24
  2529     103D  3424               	retlw	36
  2530     103E  3425               	retlw	37
  2531     103F  3400               	retlw	0
  2532     1040  3400               	retlw	0
  2533     1041  3436               	retlw	54
  2534     1042  340E               	retlw	14
  2535     1043  340C               	retlw	12
  2536     1044  3412               	retlw	18
  2537     1045  3427               	retlw	39
  2538     1046  3426               	retlw	38
  2539     1047  3400               	retlw	0
  2540     1048  3400               	retlw	0
  2541     1049  3437               	retlw	55
  2542     104A  3438               	retlw	56
  2543     104B  340F               	retlw	15
  2544     104C  3433               	retlw	51
  2545     104D  3413               	retlw	19
  2546     104E  342D               	retlw	45
  2547     104F  3400               	retlw	0
  2548     1050  3400               	retlw	0
  2549     1051  3400               	retlw	0
  2550     1052  3434               	retlw	52
  2551     1053  3400               	retlw	0
  2552     1054  342F               	retlw	47
  2553     1055  342E               	retlw	46
  2554     1056  3400               	retlw	0
  2555     1057  3400               	retlw	0
  2556     1058  3439               	retlw	57
  2557     1059  34E5               	retlw	229
  2558     105A  3428               	retlw	40
  2559     105B  3430               	retlw	48
  2560     105C  3400               	retlw	0
  2561     105D  3431               	retlw	49
  2562     105E  3400               	retlw	0
  2563     105F  3400               	retlw	0
  2564     1060  3400               	retlw	0
  2565     1061  3400               	retlw	0
  2566     1062  3400               	retlw	0
  2567     1063  3400               	retlw	0
  2568     1064  3400               	retlw	0
  2569     1065  3400               	retlw	0
  2570     1066  342A               	retlw	42
  2571     1067  3400               	retlw	0
  2572     1068  3400               	retlw	0
  2573     1069  341E               	retlw	30
  2574     106A  3400               	retlw	0
  2575     106B  3421               	retlw	33
  2576     106C  3424               	retlw	36
  2577     106D  3400               	retlw	0
  2578     106E  3400               	retlw	0
  2579     106F  3400               	retlw	0
  2580     1070  3427               	retlw	39
  2581     1071  3437               	retlw	55
  2582     1072  341F               	retlw	31
  2583     1073  3422               	retlw	34
  2584     1074  3423               	retlw	35
  2585     1075  3425               	retlw	37
  2586     1076  3429               	retlw	41
  2587     1077  3453               	retlw	83
  2588     1078  3444               	retlw	68
  2589     1079  342E               	retlw	46
  2590     107A  3420               	retlw	32
  2591     107B  342D               	retlw	45
  2592     107C  3425               	retlw	37
  2593     107D  3426               	retlw	38
  2594     107E  3400               	retlw	0
  2595     107F  3400               	retlw	0
  2596     1080  3400               	retlw	0
  2597     1081  3400               	retlw	0
  2598     1082  3400               	retlw	0
  2599     1083  3440               	retlw	64
  2600     1084                     __end_of_ps2UsbMap:
  2601                           
  2602                           	psect	stringtext3
  2603     18BC                     __pstringtext3:
  2604     18BC                     _USB_SD_Ptr:
  2605     18BC  34C2               	retlw	low (_sd000| (0+32768))
  2606     18BD  3498               	retlw	high (_sd000| (0+32768))
  2607     18BE  343F               	retlw	low (_sd001| (0+32768))
  2608     18BF  3498               	retlw	high (_sd001| (0+32768))
  2609     18C0  34AE               	retlw	low (_sd002| (0+32768))
  2610     18C1  3498               	retlw	high (_sd002| (0+32768))
  2611     18C2                     __end_of_USB_SD_Ptr:
  2612                           
  2613                           	psect	stringtext4
  2614     18C6                     __pstringtext4:
  2615     18C6                     _USB_CD_Ptr:
  2616     18C6  3473               	retlw	low (_configDescriptor1| (0+32768))
  2617     18C7  3498               	retlw	high (_configDescriptor1| (0+32768))
  2618     18C8                     __end_of_USB_CD_Ptr:
  2619                           
  2620                           	psect	stringtext5
  2621     1800                     __pstringtext5:
  2622     1800                     _hid_rpt01:
  2623     1800  3405               	retlw	5
  2624     1801  3401               	retlw	1
  2625     1802  3409               	retlw	9
  2626     1803  3406               	retlw	6
  2627     1804  34A1               	retlw	161
  2628     1805  3401               	retlw	1
  2629     1806  3405               	retlw	5
  2630     1807  3407               	retlw	7
  2631     1808  3419               	retlw	25
  2632     1809  34E0               	retlw	224
  2633     180A  3429               	retlw	41
  2634     180B  34E7               	retlw	231
  2635     180C  3415               	retlw	21
  2636     180D  3400               	retlw	0
  2637     180E  3425               	retlw	37
  2638     180F  3401               	retlw	1
  2639     1810  3475               	retlw	117
  2640     1811  3401               	retlw	1
  2641     1812  3495               	retlw	149
  2642     1813  3408               	retlw	8
  2643     1814  3481               	retlw	129
  2644     1815  3402               	retlw	2
  2645     1816  3495               	retlw	149
  2646     1817  3401               	retlw	1
  2647     1818  3475               	retlw	117
  2648     1819  3408               	retlw	8
  2649     181A  3481               	retlw	129
  2650     181B  3403               	retlw	3
  2651     181C  3495               	retlw	149
  2652     181D  3405               	retlw	5
  2653     181E  3475               	retlw	117
  2654     181F  3401               	retlw	1
  2655     1820  3405               	retlw	5
  2656     1821  3408               	retlw	8
  2657     1822  3419               	retlw	25
  2658     1823  3401               	retlw	1
  2659     1824  3429               	retlw	41
  2660     1825  3405               	retlw	5
  2661     1826  3491               	retlw	145
  2662     1827  3402               	retlw	2
  2663     1828  3495               	retlw	149
  2664     1829  3401               	retlw	1
  2665     182A  3475               	retlw	117
  2666     182B  3403               	retlw	3
  2667     182C  3491               	retlw	145
  2668     182D  3403               	retlw	3
  2669     182E  3495               	retlw	149
  2670     182F  3406               	retlw	6
  2671     1830  3475               	retlw	117
  2672     1831  3408               	retlw	8
  2673     1832  3415               	retlw	21
  2674     1833  3400               	retlw	0
  2675     1834  3425               	retlw	37
  2676     1835  3465               	retlw	101
  2677     1836  3405               	retlw	5
  2678     1837  3407               	retlw	7
  2679     1838  3419               	retlw	25
  2680     1839  3400               	retlw	0
  2681     183A  3429               	retlw	41
  2682     183B  3465               	retlw	101
  2683     183C  3481               	retlw	129
  2684     183D  3400               	retlw	0
  2685     183E  34C0               	retlw	192
  2686     183F                     __end_of_hid_rpt01:
  2687                           
  2688                           	psect	stringtext6
  2689     183F                     __pstringtext6:
  2690     183F                     _sd001:
  2691     183F  3434               	retlw	52
  2692     1840  3403               	retlw	3
  2693     1841  344D               	retlw	77
  2694     1842  3400               	retlw	0
  2695     1843  3469               	retlw	105
  2696     1844  3400               	retlw	0
  2697     1845  3463               	retlw	99
  2698     1846  3400               	retlw	0
  2699     1847  3472               	retlw	114
  2700     1848  3400               	retlw	0
  2701     1849  346F               	retlw	111
  2702     184A  3400               	retlw	0
  2703     184B  3463               	retlw	99
  2704     184C  3400               	retlw	0
  2705     184D  3468               	retlw	104
  2706     184E  3400               	retlw	0
  2707     184F  3469               	retlw	105
  2708     1850  3400               	retlw	0
  2709     1851  3470               	retlw	112
  2710     1852  3400               	retlw	0
  2711     1853  3420               	retlw	32
  2712     1854  3400               	retlw	0
  2713     1855  3454               	retlw	84
  2714     1856  3400               	retlw	0
  2715     1857  3465               	retlw	101
  2716     1858  3400               	retlw	0
  2717     1859  3463               	retlw	99
  2718     185A  3400               	retlw	0
  2719     185B  3468               	retlw	104
  2720     185C  3400               	retlw	0
  2721     185D  346E               	retlw	110
  2722     185E  3400               	retlw	0
  2723     185F  346F               	retlw	111
  2724     1860  3400               	retlw	0
  2725     1861  346C               	retlw	108
  2726     1862  3400               	retlw	0
  2727     1863  346F               	retlw	111
  2728     1864  3400               	retlw	0
  2729     1865  3467               	retlw	103
  2730     1866  3400               	retlw	0
  2731     1867  3479               	retlw	121
  2732     1868  3400               	retlw	0
  2733     1869  3420               	retlw	32
  2734     186A  3400               	retlw	0
  2735     186B  3449               	retlw	73
  2736     186C  3400               	retlw	0
  2737     186D  346E               	retlw	110
  2738     186E  3400               	retlw	0
  2739     186F  3463               	retlw	99
  2740     1870  3400               	retlw	0
  2741     1871  342E               	retlw	46
  2742     1872  3400               	retlw	0
  2743     1873                     __end_of_sd001:
  2744                           
  2745                           	psect	stringtext7
  2746     1873                     __pstringtext7:
  2747     1873                     _configDescriptor1:
  2748     1873  3409               	retlw	9
  2749     1874  3402               	retlw	2
  2750     1875  3429               	retlw	41
  2751     1876  3400               	retlw	0
  2752     1877  3401               	retlw	1
  2753     1878  3401               	retlw	1
  2754     1879  3400               	retlw	0
  2755     187A  34C0               	retlw	192
  2756     187B  3432               	retlw	50
  2757     187C  3409               	retlw	9
  2758     187D  3404               	retlw	4
  2759     187E  3400               	retlw	0
  2760     187F  3400               	retlw	0
  2761     1880  3402               	retlw	2
  2762     1881  3403               	retlw	3
  2763     1882  3401               	retlw	1
  2764     1883  3401               	retlw	1
  2765     1884  3400               	retlw	0
  2766     1885  3409               	retlw	9
  2767     1886  3421               	retlw	33
  2768     1887  3411               	retlw	17
  2769     1888  3401               	retlw	1
  2770     1889  3400               	retlw	0
  2771     188A  3401               	retlw	1
  2772     188B  3422               	retlw	34
  2773     188C  343F               	retlw	63
  2774     188D  3400               	retlw	0
  2775     188E  3407               	retlw	7
  2776     188F  3405               	retlw	5
  2777     1890  3481               	retlw	129
  2778     1891  3403               	retlw	3
  2779     1892  3408               	retlw	8
  2780     1893  3400               	retlw	0
  2781     1894  3401               	retlw	1
  2782     1895  3407               	retlw	7
  2783     1896  3405               	retlw	5
  2784     1897  3401               	retlw	1
  2785     1898  3403               	retlw	3
  2786     1899  3408               	retlw	8
  2787     189A  3400               	retlw	0
  2788     189B  3401               	retlw	1
  2789     189C                     __end_of_configDescriptor1:
  2790                           
  2791                           	psect	stringtext8
  2792     189C                     __pstringtext8:
  2793     189C                     _device_dsc:
  2794     189C  3412               	retlw	18
  2795     189D  3401               	retlw	1
  2796     189E  3400               	retlw	0
  2797     189F  3402               	retlw	2
  2798     18A0  3400               	retlw	0
  2799     18A1  3400               	retlw	0
  2800     18A2  3400               	retlw	0
  2801     18A3  3408               	retlw	8
  2802     18A4  34D8               	retlw	216
  2803     18A5  3404               	retlw	4
  2804     18A6  3455               	retlw	85
  2805     18A7  3400               	retlw	0
  2806     18A8  3401               	retlw	1
  2807     18A9  3400               	retlw	0
  2808     18AA  3401               	retlw	1
  2809     18AB  3402               	retlw	2
  2810     18AC  3400               	retlw	0
  2811     18AD  3401               	retlw	1
  2812     18AE                     __end_of_device_dsc:
  2813                           
  2814                           	psect	stringtext9
  2815     18AE                     __pstringtext9:
  2816     18AE                     _sd002:
  2817     18AE  340E               	retlw	14
  2818     18AF  3403               	retlw	3
  2819     18B0  3441               	retlw	65
  2820     18B1  3400               	retlw	0
  2821     18B2  3454               	retlw	84
  2822     18B3  3400               	retlw	0
  2823     18B4  3432               	retlw	50
  2824     18B5  3400               	retlw	0
  2825     18B6  3455               	retlw	85
  2826     18B7  3400               	retlw	0
  2827     18B8  3453               	retlw	83
  2828     18B9  3400               	retlw	0
  2829     18BA  3442               	retlw	66
  2830     18BB  3400               	retlw	0
  2831     18BC                     __end_of_sd002:
  2832                           
  2833                           	psect	stringtext10
  2834     18C2                     __pstringtext10:
  2835     18C2                     _sd000:
  2836     18C2  3404               	retlw	4
  2837     18C3  3403               	retlw	3
  2838     18C4  3409               	retlw	9
  2839     18C5  3404               	retlw	4
  2840     18C6                     __end_of_sd000:
  2841                           
  2842                           	psect	nvBANK2
  2843     016B                     __pnvBANK2:
  2844     016B                     _IOCAF5_InterruptHandler:
  2845     016B                     	ds	2
  2846     016D                     _IOCAF4_InterruptHandler:
  2847     016D                     	ds	2
  2848     000C                     _PORTAbits	set	12
  2849     001C                     _T2CONbits	set	28
  2850     001C                     _T2CON	set	28
  2851     001A                     _TMR2	set	26
  2852     001B                     _PR2	set	27
  2853     0011                     _PIR1bits	set	17
  2854     0012                     _PIR2bits	set	18
  2855     000B                     _INTCONbits	set	11
  2856     008C                     _TRISAbits	set	140
  2857     0091                     _PIE1bits	set	145
  2858     0092                     _PIE2bits	set	146
  2859     0097                     _WDTCON	set	151
  2860     0098                     _OSCTUNE	set	152
  2861     0099                     _OSCCON	set	153
  2862     0095                     _OPTION_REGbits	set	149
  2863     008E                     _TRISC	set	142
  2864     008D                     _TRISB	set	141
  2865     008C                     _TRISA	set	140
  2866     04D6                     _PLLRDY	set	1238
  2867     010C                     _LATAbits	set	268
  2868     0116                     _BORCON	set	278
  2869     011D                     _APFCON	set	285
  2870     010E                     _LATC	set	270
  2871     010D                     _LATB	set	269
  2872     010C                     _LATA	set	268
  2873     0199                     _RCREG	set	409
  2874     019D                     _RCSTAbits	set	413
  2875     019A                     _TXREG	set	410
  2876     019C                     _SPBRGH	set	412
  2877     019B                     _SPBRGL	set	411
  2878     019E                     _TXSTA	set	414
  2879     019D                     _RCSTA	set	413
  2880     019F                     _BAUDCON	set	415
  2881     018C                     _ANSELA	set	396
  2882     018D                     _ANSELB	set	397
  2883     018E                     _ANSELC	set	398
  2884     020C                     _WPUA	set	524
  2885     020D                     _WPUB	set	525
  2886     039B                     _ACTCON	set	923
  2887     0391                     _IOCAPbits	set	913
  2888     0392                     _IOCANbits	set	914
  2889     0393                     _IOCAFbits	set	915
  2890     0E98                     _UEP0bits	set	3736
  2891     0E8E                     _UCON	set	3726
  2892     0E8F                     _USTAT	set	3727
  2893     0E92                     _UIEbits	set	3730
  2894     0E90                     _UIRbits	set	3728
  2895     0E96                     _UADDR	set	3734
  2896     0E8E                     _UCONbits	set	3726
  2897     0E92                     _UIE	set	3730
  2898     0E97                     _UEIE	set	3735
  2899     0E91                     _UCFG	set	3729
  2900     0E90                     _UIR	set	3728
  2901     0E93                     _UEIR	set	3731
  2902     0E99                     _UEP1	set	3737
  2903     0E98                     _UEP0	set	3736
  2904                           
  2905                           	psect	cinit
  2906     003F                     start_initialization:	
  2907                           ; #config settings
  2908                           
  2909     003F                     __initialization:	;BIGRAM
  2910                           
  2911                           ; Initialize objects allocated to BANK3
  2912     003F  30A2               	movlw	low __pidataBANK3
  2913     0040  0084               	movwf	4
  2914     0041  309E               	movlw	(high __pidataBANK3)| (0+128)
  2915     0042  0085               	movwf	5
  2916     0043  0023               	movlb	3	; select bank3
  2917     0044  0012               	moviw fsr0++
  2918     0045  00C7               	movwf	__pdataBANK3& (0+127)
  2919     0046  0012               	moviw fsr0++
  2920     0047  00C8               	movwf	(__pdataBANK3+1)& (0+127)
  2921     0048  0012               	moviw fsr0++
  2922     0049  00C9               	movwf	(__pdataBANK3+2)& (0+127)
  2923     004A  0012               	moviw fsr0++
  2924     004B  00CA               	movwf	(__pdataBANK3+3)& (0+127)
  2925     004C  0012               	moviw fsr0++
  2926     004D  00CB               	movwf	(__pdataBANK3+4)& (0+127)
  2927     004E  0012               	moviw fsr0++
  2928     004F  00CC               	movwf	(__pdataBANK3+5)& (0+127)
  2929                           
  2930                           ; Clear objects allocated to BIGRAM
  2931     0050  302C               	movlw	low (0+9004)
  2932     0051  0084               	movwf	4
  2933     0052  3023               	movlw	high (0+9004)
  2934     0053  0085               	movwf	5
  2935     0054  30C4               	movlw	196
  2936     0055  00FE               	movwf	btemp
  2937     0056  3000               	movlw	0
  2938     0057  00FF               	movwf	btemp+1
  2939     0058  319F  2735  3180   	fcall	clear_ram0
  2940                           
  2941                           ; Clear objects allocated to BANK0
  2942     005B  3061               	movlw	low __pbssBANK0
  2943     005C  0084               	movwf	4
  2944     005D  3000               	movlw	high __pbssBANK0
  2945     005E  0085               	movwf	5
  2946     005F  300F               	movlw	15
  2947     0060  00FE               	movwf	btemp
  2948     0061  3000               	movlw	0
  2949     0062  00FF               	movwf	btemp+1
  2950     0063  319F  2735  3180   	fcall	clear_ram0
  2951                           
  2952                           ; Clear objects allocated to BANK1
  2953     0066  0021               	movlb	1	; select bank1
  2954     0067  01E9               	clrf	__pbssBANK1& (0+127)
  2955     0068  01EA               	clrf	(__pbssBANK1+1)& (0+127)
  2956     0069  01EB               	clrf	(__pbssBANK1+2)& (0+127)
  2957     006A  01EC               	clrf	(__pbssBANK1+3)& (0+127)
  2958     006B  01ED               	clrf	(__pbssBANK1+4)& (0+127)
  2959     006C  01EE               	clrf	(__pbssBANK1+5)& (0+127)
  2960     006D  01EF               	clrf	(__pbssBANK1+6)& (0+127)
  2961                           
  2962                           ; Clear objects allocated to BANK2
  2963     006E  3021               	movlw	low __pbssBANK2
  2964     006F  0084               	movwf	4
  2965     0070  3001               	movlw	high __pbssBANK2
  2966     0071  0085               	movwf	5
  2967     0072  304A               	movlw	74
  2968     0073  00FE               	movwf	btemp
  2969     0074  3000               	movlw	0
  2970     0075  00FF               	movwf	btemp+1
  2971     0076  319F  2735  3180   	fcall	clear_ram0
  2972                           
  2973                           ; Clear objects allocated to BANK3
  2974     0079  30A0               	movlw	low __pbssBANK3
  2975     007A  0084               	movwf	4
  2976     007B  3001               	movlw	high __pbssBANK3
  2977     007C  0085               	movwf	5
  2978     007D  3027               	movlw	39
  2979     007E  00FE               	movwf	btemp
  2980     007F  3000               	movlw	0
  2981     0080  00FF               	movwf	btemp+1
  2982     0081  319F  2735         	fcall	clear_ram0
  2983     0083                     end_of_initialization:	
  2984                           ;End of C runtime variable initialization code
  2985                           
  2986     0083                     __end_of__initialization:
  2987     0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2988     0084  0020               	movlb	0
  2989     0085  318A  2A8A         	ljmp	_main	;jump to C main() function
  2990                           
  2991                           	psect	bssBANK0
  2992     0061                     __pbssBANK0:
  2993     0061                     _pBDTEntryIn:
  2994     0061                     	ds	4
  2995     0065                     _SOFCounter:
  2996     0065                     	ds	2
  2997     0067                     _pBDTEntryEP0OutNext:
  2998     0067                     	ds	2
  2999     0069                     _keyboardCommandCount:
  3000     0069                     	ds	1
  3001     006A                     _controlTransferState:
  3002     006A                     	ds	1
  3003     006B                     _pBDTEntryEP0OutCurrent:
  3004     006B                     	ds	1
  3005     006C                     _USBDeviceState:
  3006     006C                     	ds	1
  3007     006D                     _USTATcopy:
  3008     006D                     	ds	1
  3009     006E                     _USBAlternateInterface:
  3010     006E                     	ds	1
  3011     006F                     _USBActiveConfiguration:
  3012     006F                     	ds	1
  3013                           
  3014                           	psect	bssBANK1
  3015     00E9                     __pbssBANK1:
  3016     00E9                     _inPipes:
  3017     00E9                     	ds	5
  3018     00EE                     _eusartRxHead:
  3019     00EE                     	ds	1
  3020     00EF                     _eusartTxBufferRemaining:
  3021     00EF                     	ds	1
  3022                           
  3023                           	psect	bssBANK2
  3024     0121                     __pbssBANK2:
  3025     0121                     _outPipes:
  3026     0121                     	ds	7
  3027     0128                     _timeMs:
  3028     0128                     	ds	4
  3029     012C                     _prevTimeMs:
  3030     012C                     	ds	4
  3031     0130                     _pBDTEntryOut:
  3032     0130                     	ds	4
  3033     0134                     _OldSOFCount:
  3034     0134                     	ds	2
  3035     0136                     _LocalSOFCount:
  3036     0136                     	ds	2
  3037     0138                     _keyboardIdleRate:
  3038     0138                     	ds	2
  3039     013A                     _ep_data_out:
  3040     013A                     	ds	2
  3041     013C                     _ep_data_in:
  3042     013C                     	ds	2
  3043     013E                     _EUSART_ErrorHandler:
  3044     013E                     	ds	2
  3045     0140                     _EUSART_OverrunErrorHandler:
  3046     0140                     	ds	2
  3047     0142                     _EUSART_FramingErrorHandler:
  3048     0142                     	ds	2
  3049     0144                     _TMR2_InterruptHandler:
  3050     0144                     	ds	2
  3051     0146                     _EUSART_RxDefaultInterruptHandler:
  3052     0146                     	ds	2
  3053     0148                     _EUSART_TxDefaultInterruptHandler:
  3054     0148                     	ds	2
  3055     014A                     _keyboardCommandOnes:
  3056     014A                     	ds	1
  3057     014B                     _keyboardCommandBits:
  3058     014B                     	ds	1
  3059     014C                     _keyboardCommand:
  3060     014C                     	ds	1
  3061     014D                     _keyboardIsBreak:
  3062     014D                     	ds	1
  3063     014E                     _keyboardIsExtend:
  3064     014E                     	ds	1
  3065     014F                     _keyboardData:
  3066     014F                     	ds	1
  3067     0150                     _keyboardScanCodeValid:
  3068     0150                     	ds	1
  3069     0151                     _keyboardOnesCount:
  3070     0151                     	ds	1
  3071     0152                     _keyboardIndexData:
  3072     0152                     	ds	1
  3073     0153                     _keyboardState:
  3074     0153                     	ds	1
  3075     0154                     _USBTicksSinceSuspendEnd:
  3076     0154                     	ds	1
  3077     0155                     _USBDeferOUTDataStagePackets:
  3078     0155                     	ds	1
  3079     0156                     _USBDeferINDataStagePackets:
  3080     0156                     	ds	1
  3081     0157                     _USBStatusStageEnabledFlag2:
  3082     0157                     	ds	1
  3083     0158                     _USBStatusStageEnabledFlag1:
  3084     0158                     	ds	1
  3085     0159                     _USBDeferStatusStagePacket:
  3086     0159                     	ds	1
  3087     015A                     _USBStatusStageTimeoutCounter:
  3088     015A                     	ds	1
  3089     015B                     _BothEP0OutUOWNsSet:
  3090     015B                     	ds	1
  3091     015C                     _endpoint_number:
  3092     015C                     	ds	1
  3093     015D                     _USBBusIsSuspended:
  3094     015D                     	ds	1
  3095     015E                     _RemoteWakeup:
  3096     015E                     	ds	1
  3097     015F                     _pDst:
  3098     015F                     	ds	1
  3099     0160                     _shortPacketStatus:
  3100     0160                     	ds	1
  3101     0161                     _eusartRxLastError:
  3102     0161                     	ds	1
  3103     0162                     _eusartRxCount:
  3104     0162                     	ds	1
  3105     0163                     _eusartRxTail:
  3106     0163                     	ds	1
  3107     0164                     _eusartTxTail:
  3108     0164                     	ds	1
  3109     0165                     _eusartTxHead:
  3110     0165                     	ds	1
  3111     0166                     _keyboardScanCode:
  3112     0166                     	ds	3
  3113     0169                     _active_protocol:
  3114     0169                     	ds	1
  3115     016A                     _idle_rate:
  3116     016A                     	ds	1
  3117                           
  3118                           	psect	bssBANK3
  3119     01A0                     __pbssBANK3:
  3120     01A0                     _oldInputReport:
  3121     01A0                     	ds	8
  3122     01A8                     _eusartRxStatusBuffer:
  3123     01A8                     	ds	8
  3124     01B0                     _eusartRxBuffer:
  3125     01B0                     	ds	8
  3126     01B8                     _eusartTxBuffer:
  3127     01B8                     	ds	8
  3128     01C0                     _USB1msTickCount:
  3129     01C0                     	ds	4
  3130     01C4                     main@F3448:
  3131     01C4                     	ds	3
  3132                           
  3133                           	psect	dataBANK3
  3134     01C7                     __pdataBANK3:
  3135     01C7                     main@F3452:
  3136     01C7                     	ds	6
  3137                           
  3138                           	psect	clrtext
  3139     1F35                     clear_ram0:	
  3140                           ;	Called with FSR0 containing the base address, and
  3141                           ;	btemp/btemp+1 has the size to clear
  3142                           
  3143     1F35  0064               	clrwdt	;clear the watchdog before getting into this loop
  3144     1F36                     clrloop0:
  3145     1F36  0180               	clrf	0	;clear RAM location pointed to by FSR
  3146     1F37  3101               	addfsr 0,1
  3147     1F38  3001               	movlw	1
  3148     1F39  02FE               	subwf	126,f
  3149     1F3A  3000               	movlw	0
  3150     1F3B  3BFF               	subwfb	127,f
  3151     1F3C  087F               	movf	127,w
  3152     1F3D  047E               	iorwf	126,w
  3153     1F3E  1903               	btfsc	3,2
  3154     1F3F  3400               	retlw	0	;all done for this memory range, return
  3155     1F40  2F36               	goto	clrloop0	;have we reached the end yet?
  3156                           
  3157                           	psect	cstackBANK1
  3158     00A8                     __pcstackBANK1:
  3159     00A8                     ?_IOCAF4_SetInterruptHandler:
  3160     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3161                           ; 1 bytes @ 0x0
  3162                           
  3163     00A8                     ??_OSCILLATOR_Initialize:	
  3164                           ; 1 bytes @ 0x0
  3165                           
  3166     00A8                     ??_WDT_Initialize:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169     00A8                     ??_USBDeviceInit:	
  3170                           ; 1 bytes @ 0x0
  3171                           
  3172     00A8                     ??_USBDeviceAttach:	
  3173                           ; 1 bytes @ 0x0
  3174                           
  3175     00A8                     ?_TMR2_SetInterruptHandler:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190     00A8                     ?_EUSART_SetErrorHandler:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193     00A8                     ?_memset:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196     00A8                     ?_GenericQueue_Init:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205     00A8                     ??_PS2Keyboard_SendCommand:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208     00A8                     ??_TMR2_StartTimer:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211     00A8                     ??_EUSART_is_tx_ready:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214     00A8                     ??_EUSART_Write:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217     00A8                     ??_hex2str:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220     00A8                     ?___bmul:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223     00A8                     ?_USBTransferOnePacket:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226     00A8                     ?_GenericQueue_IsEmpty:	
  3227                           ; 2 bytes @ 0x0
  3228                           
  3229     00A8                     ?_GenericQueue_IsFull:	
  3230                           ; 2 bytes @ 0x0
  3231                           
  3232     00A8                     ?___awmod:	
  3233                           ; 2 bytes @ 0x0
  3234                           
  3235     00A8                     USBTransferOnePacket@dir:	
  3236                           ; 2 bytes @ 0x0
  3237                           
  3238     00A8                     PS2Keyboard_SendCommand@cmd:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3242                           ; 1 bytes @ 0x0
  3243                           
  3244     00A8                     hex2str@val:	
  3245                           ; 1 bytes @ 0x0
  3246                           
  3247     00A8                     ___bmul@multiplicand:	
  3248                           ; 1 bytes @ 0x0
  3249                           
  3250     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3251                           ; 1 bytes @ 0x0
  3252                           
  3253     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3254                           ; 2 bytes @ 0x0
  3255                           
  3256     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3257                           ; 2 bytes @ 0x0
  3258                           
  3259     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3260                           ; 2 bytes @ 0x0
  3261                           
  3262     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3263                           ; 2 bytes @ 0x0
  3264                           
  3265     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3266                           ; 2 bytes @ 0x0
  3267                           
  3268     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3269                           ; 2 bytes @ 0x0
  3270                           
  3271     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3272                           ; 2 bytes @ 0x0
  3273                           
  3274     00A8                     GenericQueue_Init@q:	
  3275                           ; 2 bytes @ 0x0
  3276                           
  3277     00A8                     GenericQueue_IsEmpty@q:	
  3278                           ; 2 bytes @ 0x0
  3279                           
  3280     00A8                     GenericQueue_IsFull@q:	
  3281                           ; 2 bytes @ 0x0
  3282                           
  3283     00A8                     ___awmod@divisor:	
  3284                           ; 2 bytes @ 0x0
  3285                           
  3286     00A8                     memset@c:	
  3287                           ; 2 bytes @ 0x0
  3288                           
  3289                           
  3290                           ; 2 bytes @ 0x0
  3291     00A8                     	ds	1
  3292     00A9                     ??_APP_KeyboardProcessOutputReport:
  3293     00A9                     ??___bmul:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296     00A9                     EUSART_Write@txData:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299     00A9                     USBTransferOnePacket@data:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302                           
  3303                           ; 2 bytes @ 0x1
  3304     00A9                     	ds	1
  3305     00AA                     ??_IOCAF4_SetInterruptHandler:
  3306     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309     00AA                     ??_TMR2_Initialize:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312     00AA                     ??_EUSART_Initialize:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315     00AA                     ??_TMR2_SetInterruptHandler:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330     00AA                     ??_EUSART_SetErrorHandler:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333     00AA                     ??_SysTime_Init:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336     00AA                     ?_Log_Message:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339     00AA                     ??_GenericQueue_IsEmpty:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342     00AA                     ??_PIN_MANAGER_Initialize:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345     00AA                     ??_GenericQueue_IsFull:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348     00AA                     Log_Message@bufSize:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351     00AA                     ___bmul@product:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354     00AA                     GenericQueue_Init@element_size:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357     00AA                     ___awmod@dividend:	
  3358                           ; 2 bytes @ 0x2
  3359                           
  3360     00AA                     memset@n:	
  3361                           ; 2 bytes @ 0x2
  3362                           
  3363                           
  3364                           ; 2 bytes @ 0x2
  3365     00AA                     	ds	1
  3366     00AB                     ??_Log_Message:
  3367     00AB                     USBTransferOnePacket@len:	
  3368                           ; 1 bytes @ 0x3
  3369                           
  3370     00AB                     ___bmul@multiplier:	
  3371                           ; 1 bytes @ 0x3
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x3
  3375     00AB                     	ds	1
  3376     00AC                     ??_memset:
  3377     00AC                     ??_USBTransferOnePacket:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380     00AC                     ??_PS2Keyboard_Init:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383     00AC                     ?_Log_UtilityConvertByteToHex:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386     00AC                     ??_GenericQueue_Init:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389     00AC                     ??___awmod:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392     00AC                     Log_UtilityConvertByteToHex@buf:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395     00AC                     Log_Message@buf:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398     00AC                     USBDeviceInit@p:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401                           
  3402                           ; 2 bytes @ 0x4
  3403     00AC                     	ds	1
  3404     00AD                     Log_UtilityConvertByteToHex@bufSize:
  3405     00AD                     Log_Message@i:	
  3406                           ; 1 bytes @ 0x5
  3407                           
  3408     00AD                     ___awmod@counter:	
  3409                           ; 1 bytes @ 0x5
  3410                           
  3411     00AD                     memset@p:	
  3412                           ; 1 bytes @ 0x5
  3413                           
  3414                           
  3415                           ; 1 bytes @ 0x5
  3416     00AD                     	ds	1
  3417     00AE                     ??_Log_UtilityConvertByteToHex:
  3418     00AE                     USBDeviceInit@i_1369:	
  3419                           ; 1 bytes @ 0x6
  3420                           
  3421     00AE                     ___awmod@sign:	
  3422                           ; 1 bytes @ 0x6
  3423                           
  3424     00AE                     memset@dest:	
  3425                           ; 1 bytes @ 0x6
  3426                           
  3427                           
  3428                           ; 1 bytes @ 0x6
  3429     00AE                     	ds	1
  3430     00AF                     ?___wmul:
  3431     00AF                     USBDeviceInit@i:	
  3432                           ; 2 bytes @ 0x7
  3433                           
  3434     00AF                     Log_UtilityConvertByteToHex@d0:	
  3435                           ; 1 bytes @ 0x7
  3436                           
  3437     00AF                     ___wmul@multiplier:	
  3438                           ; 1 bytes @ 0x7
  3439                           
  3440                           
  3441                           ; 2 bytes @ 0x7
  3442     00AF                     	ds	1
  3443     00B0                     ??_SYSTEM_Initialize:
  3444     00B0                     USBTransferOnePacket@ep:	
  3445                           ; 1 bytes @ 0x8
  3446                           
  3447     00B0                     Log_UtilityConvertByteToHex@byte:	
  3448                           ; 1 bytes @ 0x8
  3449                           
  3450                           
  3451                           ; 1 bytes @ 0x8
  3452     00B0                     	ds	1
  3453     00B1                     Log_UtilityConvertByteToHex@d1:
  3454     00B1                     USBTransferOnePacket@handle:	
  3455                           ; 1 bytes @ 0x9
  3456                           
  3457     00B1                     ___wmul@multiplicand:	
  3458                           ; 2 bytes @ 0x9
  3459                           
  3460                           
  3461                           ; 2 bytes @ 0x9
  3462     00B1                     	ds	2
  3463     00B3                     ??___wmul:
  3464     00B3                     ___wmul@product:	
  3465                           ; 1 bytes @ 0xB
  3466                           
  3467                           
  3468                           ; 2 bytes @ 0xB
  3469     00B3                     	ds	2
  3470     00B5                     ?_memcpy:
  3471     00B5                     ?_memcmp:	
  3472                           ; 2 bytes @ 0xD
  3473                           
  3474     00B5                     memcmp@vl:	
  3475                           ; 2 bytes @ 0xD
  3476                           
  3477     00B5                     memcpy@d1:	
  3478                           ; 2 bytes @ 0xD
  3479                           
  3480                           
  3481                           ; 2 bytes @ 0xD
  3482     00B5                     	ds	2
  3483     00B7                     memcmp@vr:
  3484     00B7                     memcpy@s1:	
  3485                           ; 1 bytes @ 0xF
  3486                           
  3487                           
  3488                           ; 2 bytes @ 0xF
  3489     00B7                     	ds	1
  3490     00B8                     memcmp@n:
  3491                           
  3492                           ; 2 bytes @ 0x10
  3493     00B8                     	ds	1
  3494     00B9                     memcpy@n:
  3495                           
  3496                           ; 2 bytes @ 0x11
  3497     00B9                     	ds	1
  3498     00BA                     ??_memcmp:
  3499                           
  3500                           ; 1 bytes @ 0x12
  3501     00BA                     	ds	1
  3502     00BB                     ??_memcpy:
  3503     00BB                     memcmp@l:	
  3504                           ; 1 bytes @ 0x13
  3505                           
  3506     00BB                     memcpy@d:	
  3507                           ; 2 bytes @ 0x13
  3508                           
  3509                           
  3510                           ; 2 bytes @ 0x13
  3511     00BB                     	ds	2
  3512     00BD                     memcmp@r:
  3513     00BD                     memcpy@s:	
  3514                           ; 1 bytes @ 0x15
  3515                           
  3516                           
  3517                           ; 2 bytes @ 0x15
  3518     00BD                     	ds	1
  3519     00BE                     ?_GenericQueue_Contains:
  3520     00BE                     GenericQueue_Contains@q:	
  3521                           ; 1 bytes @ 0x16
  3522                           
  3523                           
  3524                           ; 2 bytes @ 0x16
  3525     00BE                     	ds	1
  3526     00BF                     memcpy@tmp:
  3527                           
  3528                           ; 1 bytes @ 0x17
  3529     00BF                     	ds	1
  3530     00C0                     ?_GenericQueue_CopyToArray:
  3531     00C0                     ?_GenericQueue_Remove:	
  3532                           ; 1 bytes @ 0x18
  3533                           
  3534     00C0                     ?_GenericQueue_Enqueue:	
  3535                           ; 1 bytes @ 0x18
  3536                           
  3537     00C0                     ?_GenericQueue_Dequeue:	
  3538                           ; 1 bytes @ 0x18
  3539                           
  3540     00C0                     GenericQueue_Contains@item:	
  3541                           ; 1 bytes @ 0x18
  3542                           
  3543     00C0                     GenericQueue_Enqueue@q:	
  3544                           ; 1 bytes @ 0x18
  3545                           
  3546     00C0                     GenericQueue_Dequeue@q:	
  3547                           ; 2 bytes @ 0x18
  3548                           
  3549     00C0                     GenericQueue_Remove@q:	
  3550                           ; 2 bytes @ 0x18
  3551                           
  3552     00C0                     GenericQueue_CopyToArray@q:	
  3553                           ; 2 bytes @ 0x18
  3554                           
  3555                           
  3556                           ; 2 bytes @ 0x18
  3557     00C0                     	ds	1
  3558     00C1                     ??_GenericQueue_Contains:
  3559                           
  3560                           ; 1 bytes @ 0x19
  3561     00C1                     	ds	1
  3562     00C2                     GenericQueue_Dequeue@item:
  3563     00C2                     GenericQueue_Remove@item:	
  3564                           ; 1 bytes @ 0x1A
  3565                           
  3566     00C2                     GenericQueue_CopyToArray@array:	
  3567                           ; 1 bytes @ 0x1A
  3568                           
  3569     00C2                     GenericQueue_Enqueue@item:	
  3570                           ; 1 bytes @ 0x1A
  3571                           
  3572                           
  3573                           ; 2 bytes @ 0x1A
  3574     00C2                     	ds	1
  3575     00C3                     ??_GenericQueue_CopyToArray:
  3576     00C3                     ??_GenericQueue_Remove:	
  3577                           ; 1 bytes @ 0x1B
  3578                           
  3579     00C3                     ??_GenericQueue_Dequeue:	
  3580                           ; 1 bytes @ 0x1B
  3581                           
  3582                           
  3583                           ; 1 bytes @ 0x1B
  3584     00C3                     	ds	1
  3585     00C4                     ??_GenericQueue_Enqueue:
  3586                           
  3587                           ; 1 bytes @ 0x1C
  3588     00C4                     	ds	1
  3589     00C5                     GenericQueue_Contains@i:
  3590                           
  3591                           ; 1 bytes @ 0x1D
  3592     00C5                     	ds	2
  3593     00C7                     ??_PS2Keyboard_GetScanCode:
  3594     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3595                           ; 1 bytes @ 0x1F
  3596                           
  3597     00C7                     GenericQueue_Remove@i:	
  3598                           ; 1 bytes @ 0x1F
  3599                           
  3600     00C7                     GenericQueue_CopyToArray@index:	
  3601                           ; 1 bytes @ 0x1F
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x1F
  3605     00C7                     	ds	1
  3606     00C8                     PS2Keyboard_GetScanCode@ret:
  3607     00C8                     GenericQueue_Remove@j:	
  3608                           ; 1 bytes @ 0x20
  3609                           
  3610     00C8                     GenericQueue_CopyToArray@count:	
  3611                           ; 1 bytes @ 0x20
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x20
  3615     00C8                     	ds	1
  3616     00C9                     ??_APP_KeyboardUpdateState:
  3617                           
  3618                           ; 1 bytes @ 0x21
  3619     00C9                     	ds	2
  3620     00CB                     APP_KeyboardUpdateState@leds:
  3621                           
  3622                           ; 1 bytes @ 0x23
  3623     00CB                     	ds	1
  3624     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3625                           
  3626                           ; 1 bytes @ 0x24
  3627     00CC                     	ds	1
  3628     00CD                     APP_KeyboardUpdateState@usbHidCode_2935:
  3629                           
  3630                           ; 1 bytes @ 0x25
  3631     00CD                     	ds	1
  3632     00CE                     APP_KeyboardUpdateState@usbHidCode_2934:
  3633                           
  3634                           ; 1 bytes @ 0x26
  3635     00CE                     	ds	1
  3636     00CF                     APP_KeyboardUpdateState@usbHidCode_2943:
  3637                           
  3638                           ; 1 bytes @ 0x27
  3639     00CF                     	ds	1
  3640     00D0                     APP_KeyboardUpdateState@scanCode:
  3641                           
  3642                           ; 1 bytes @ 0x28
  3643     00D0                     	ds	1
  3644     00D1                     ??_APP_KeyboardTasks:
  3645                           
  3646                           ; 1 bytes @ 0x29
  3647     00D1                     	ds	2
  3648     00D3                     APP_KeyboardTasks@scanCode:
  3649                           
  3650                           ; 1 bytes @ 0x2B
  3651     00D3                     	ds	1
  3652     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3653                           
  3654                           ; 1 bytes @ 0x2C
  3655     00D4                     	ds	1
  3656     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3657                           
  3658                           ; 2 bytes @ 0x2D
  3659     00D5                     	ds	2
  3660     00D7                     APP_KeyboardTasks@i:
  3661                           
  3662                           ; 1 bytes @ 0x2F
  3663     00D7                     	ds	1
  3664     00D8                     ??_main:
  3665                           
  3666                           ; 1 bytes @ 0x30
  3667     00D8                     	ds	2
  3668     00DA                     main@scanCodeStr:
  3669                           
  3670                           ; 6 bytes @ 0x32
  3671     00DA                     	ds	6
  3672     00E0                     _main$2658:
  3673                           
  3674                           ; 2 bytes @ 0x38
  3675     00E0                     	ds	2
  3676     00E2                     _main$2659:
  3677                           
  3678                           ; 2 bytes @ 0x3A
  3679     00E2                     	ds	2
  3680     00E4                     main@scanCodeValid:
  3681                           
  3682                           ; 1 bytes @ 0x3C
  3683     00E4                     	ds	1
  3684     00E5                     main@hndlScanCode:
  3685                           
  3686                           ; 1 bytes @ 0x3D
  3687     00E5                     	ds	1
  3688     00E6                     main@scanCode:
  3689                           
  3690                           ; 3 bytes @ 0x3E
  3691     00E6                     	ds	3
  3692                           
  3693                           	psect	cstackCOMMON
  3694     0070                     __pcstackCOMMON:
  3695     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3696     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3697                           ; 1 bytes @ 0x0
  3698                           
  3699     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3700                           ; 1 bytes @ 0x0
  3701                           
  3702     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3703                           ; 1 bytes @ 0x0
  3704                           
  3705     0070                     ?_IOCAF4_ISR:	
  3706                           ; 1 bytes @ 0x0
  3707                           
  3708     0070                     ?_IOCAF5_ISR:	
  3709                           ; 1 bytes @ 0x0
  3710                           
  3711     0070                     ?_OSCILLATOR_Initialize:	
  3712                           ; 1 bytes @ 0x0
  3713                           
  3714     0070                     ?_WDT_Initialize:	
  3715                           ; 1 bytes @ 0x0
  3716                           
  3717     0070                     ?_TMR2_Initialize:	
  3718                           ; 1 bytes @ 0x0
  3719                           
  3720     0070                     ?_EUSART_Initialize:	
  3721                           ; 1 bytes @ 0x0
  3722                           
  3723     0070                     ?_USBDeviceInit:	
  3724                           ; 1 bytes @ 0x0
  3725                           
  3726     0070                     ?_USBDeviceAttach:	
  3727                           ; 1 bytes @ 0x0
  3728                           
  3729     0070                     ?_USBDeviceTasks:	
  3730                           ; 1 bytes @ 0x0
  3731                           
  3732     0070                     ?_TMR2_ISR:	
  3733                           ; 1 bytes @ 0x0
  3734                           
  3735     0070                     ??_TMR2_ISR:	
  3736                           ; 1 bytes @ 0x0
  3737                           
  3738     0070                     ?_TMR2_DefaultInterruptHandler:	
  3739                           ; 1 bytes @ 0x0
  3740                           
  3741     0070                     ??_TMR2_DefaultInterruptHandler:	
  3742                           ; 1 bytes @ 0x0
  3743                           
  3744     0070                     ?_EUSART_Receive_ISR:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747     0070                     ?_EUSART_Transmit_ISR:	
  3748                           ; 1 bytes @ 0x0
  3749                           
  3750     0070                     ??_EUSART_Transmit_ISR:	
  3751                           ; 1 bytes @ 0x0
  3752                           
  3753     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3754                           ; 1 bytes @ 0x0
  3755                           
  3756     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3757                           ; 1 bytes @ 0x0
  3758                           
  3759     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3760                           ; 1 bytes @ 0x0
  3761                           
  3762     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765     0070                     ?_EUSART_DefaultErrorHandler:	
  3766                           ; 1 bytes @ 0x0
  3767                           
  3768     0070                     ?_EUSART_RxDataHandler:	
  3769                           ; 1 bytes @ 0x0
  3770                           
  3771     0070                     ??_EUSART_RxDataHandler:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774     0070                     ?_USBWakeFromSuspend:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777     0070                     ?_USBSuspend:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780     0070                     ?_USBIncrement1msInternalTimers:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783     0070                     ??_USBIncrement1msInternalTimers:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786     0070                     ?_USBCtrlEPAllowStatusStage:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789     0070                     ??_USBCtrlEPAllowStatusStage:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792     0070                     ?_USBStallHandler:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795     0070                     ??_USBStallHandler:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798     0070                     ?_USBCtrlEPService:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801     0070                     ?_USBConfigureEndpoint:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804     0070                     ?_USBCtrlTrfTxService:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807     0070                     ??_USBCtrlTrfTxService:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810     0070                     ?_USBCtrlTrfSetupHandler:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813     0070                     ?_USBCtrlTrfOutHandler:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816     0070                     ?_USBCtrlTrfInHandler:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819     0070                     ?_USBCheckStdRequest:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822     0070                     ?_USBStdFeatureReqHandler:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825     0070                     ?_USBHIDCBSetReportHandler:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828     0070                     ??_USBHIDCBSetReportHandler:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834     0070                     ?_APP_KeyboardInit:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837     0070                     ?_SysTime_Init:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840     0070                     ?_PS2Keyboard_Init:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843     0070                     ?_PS2Keyboard_GetScanCode:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846     0070                     ?_APP_KeyboardTasks:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849     0070                     ?_APP_KeyboardUpdateState:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852     0070                     ?_APP_KeyboardProcessOutputReport:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858     0070                     ?_PS2Keyboard_GetLastCommand:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861     0070                     ?_PS2Keyboard_SendCommand:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867     0070                     ?_PS2Keyboard_DataInterrupt:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870     0070                     ?_SysTimeInterrupt:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873     0070                     ??_SysTimeInterrupt:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876     0070                     ?_PIN_MANAGER_Initialize:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879     0070                     ?_PIN_MANAGER_IOC:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882     0070                     ?_SYSTEM_Initialize:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885     0070                     ?_INTERRUPT_InterruptManager:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888     0070                     ?_TMR2_StartTimer:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891     0070                     ?_EUSART_is_tx_ready:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894     0070                     ?_EUSART_Write:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897     0070                     ?_USBCtrlEPAllowDataStage:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900     0070                     ?_USBCtrlEPServiceComplete:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903     0070                     ?_USBCtrlTrfRxService:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906     0070                     ?_USBStdSetCfgHandler:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909     0070                     ?_USBStdGetDscHandler:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912     0070                     ??_USBStdGetDscHandler:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915     0070                     ?_USBStdGetStatusHandler:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918     0070                     ??_USBStdGetStatusHandler:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921     0070                     ?_USBCheckHIDRequest:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924     0070                     ?_USBHIDCBSetReportComplete:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927     0070                     ?_hex2str:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930     0070                     ?i1_USBDeviceInit:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933     0070                     ??i1_USBDeviceInit:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939     0070                     ?i1_PS2Keyboard_SendCommand:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942     0070                     ??i1_PS2Keyboard_SendCommand:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945     0070                     ?i1_GenericQueue_Init:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948     0070                     ?_main:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951     0070                     ?i1_USBTransferOnePacket:	
  3952                           ; 2 bytes @ 0x0
  3953                           
  3954     0070                     ?i1_GenericQueue_IsFull:	
  3955                           ; 2 bytes @ 0x0
  3956                           
  3957     0070                     ?i1___wmul:	
  3958                           ; 2 bytes @ 0x0
  3959                           
  3960     0070                     ?i1___awmod:	
  3961                           ; 2 bytes @ 0x0
  3962                           
  3963     0070                     ?i1_memset:	
  3964                           ; 2 bytes @ 0x0
  3965                           
  3966     0070                     ?_SysTime_GetCurrentTimeMs:	
  3967                           ; 2 bytes @ 0x0
  3968                           
  3969     0070                     USBConfigureEndpoint@direction:	
  3970                           ; 4 bytes @ 0x0
  3971                           
  3972     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3973                           ; 1 bytes @ 0x0
  3974                           
  3975     0070                     i1USBTransferOnePacket@dir:	
  3976                           ; 1 bytes @ 0x0
  3977                           
  3978     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3979                           ; 1 bytes @ 0x0
  3980                           
  3981     0070                     USBStdGetStatusHandler@p:	
  3982                           ; 1 bytes @ 0x0
  3983                           
  3984     0070                     i1GenericQueue_Init@q:	
  3985                           ; 2 bytes @ 0x0
  3986                           
  3987     0070                     i1GenericQueue_IsFull@q:	
  3988                           ; 2 bytes @ 0x0
  3989                           
  3990     0070                     i1___wmul@multiplier:	
  3991                           ; 2 bytes @ 0x0
  3992                           
  3993     0070                     i1___awmod@divisor:	
  3994                           ; 2 bytes @ 0x0
  3995                           
  3996     0070                     i1memset@c:	
  3997                           ; 2 bytes @ 0x0
  3998                           
  3999                           
  4000                           ; 2 bytes @ 0x0
  4001     0070                     	ds	1
  4002     0071                     ??_EUSART_Receive_ISR:
  4003     0071                     ??_EUSART_DefaultErrorHandler:	
  4004                           ; 1 bytes @ 0x1
  4005                           
  4006     0071                     ??_USBConfigureEndpoint:	
  4007                           ; 1 bytes @ 0x1
  4008                           
  4009     0071                     ??_USBHIDCBSetIdleRateHandler:	
  4010                           ; 1 bytes @ 0x1
  4011                           
  4012     0071                     ??_USBHIDCBSetReportComplete:	
  4013                           ; 1 bytes @ 0x1
  4014                           
  4015     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  4016                           ; 1 bytes @ 0x1
  4017                           
  4018     0071                     i1USBTransferOnePacket@data:	
  4019                           ; 1 bytes @ 0x1
  4020                           
  4021                           
  4022                           ; 2 bytes @ 0x1
  4023     0071                     	ds	1
  4024     0072                     ??i1_GenericQueue_IsFull:
  4025     0072                     USBCtrlTrfTxService@byteToSend:	
  4026                           ; 1 bytes @ 0x2
  4027                           
  4028     0072                     i1GenericQueue_Init@element_size:	
  4029                           ; 1 bytes @ 0x2
  4030                           
  4031     0072                     i1___wmul@multiplicand:	
  4032                           ; 2 bytes @ 0x2
  4033                           
  4034     0072                     i1___awmod@dividend:	
  4035                           ; 2 bytes @ 0x2
  4036                           
  4037     0072                     i1memset@n:	
  4038                           ; 2 bytes @ 0x2
  4039                           
  4040                           
  4041                           ; 2 bytes @ 0x2
  4042     0072                     	ds	1
  4043     0073                     ??_USBCtrlTrfInHandler:
  4044     0073                     ??_USBCtrlEPAllowDataStage:	
  4045                           ; 1 bytes @ 0x3
  4046                           
  4047     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  4048                           ; 1 bytes @ 0x3
  4049                           
  4050     0073                     i1USBTransferOnePacket@len:	
  4051                           ; 1 bytes @ 0x3
  4052                           
  4053                           
  4054                           ; 1 bytes @ 0x3
  4055     0073                     	ds	1
  4056     0074                     ??_IOCAF5_ISR:
  4057     0074                     ??_PS2Keyboard_DataInterrupt:	
  4058                           ; 1 bytes @ 0x4
  4059                           
  4060     0074                     ??_SysTime_GetCurrentTimeMs:	
  4061                           ; 1 bytes @ 0x4
  4062                           
  4063     0074                     ??_USBCtrlTrfRxService:	
  4064                           ; 1 bytes @ 0x4
  4065                           
  4066     0074                     ??_USBCheckHIDRequest:	
  4067                           ; 1 bytes @ 0x4
  4068                           
  4069     0074                     ??i1_USBTransferOnePacket:	
  4070                           ; 1 bytes @ 0x4
  4071                           
  4072     0074                     ??i1_GenericQueue_Init:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075     0074                     ??i1___wmul:	
  4076                           ; 1 bytes @ 0x4
  4077                           
  4078     0074                     ??i1___awmod:	
  4079                           ; 1 bytes @ 0x4
  4080                           
  4081     0074                     ??i1_memset:	
  4082                           ; 1 bytes @ 0x4
  4083                           
  4084     0074                     i1USBDeviceInit@p:	
  4085                           ; 1 bytes @ 0x4
  4086                           
  4087     0074                     i1___wmul@product:	
  4088                           ; 2 bytes @ 0x4
  4089                           
  4090                           
  4091                           ; 2 bytes @ 0x4
  4092     0074                     	ds	1
  4093     0075                     USBConfigureEndpoint@EPNum:
  4094     0075                     i1___awmod@counter:	
  4095                           ; 1 bytes @ 0x5
  4096                           
  4097     0075                     i1memset@dest:	
  4098                           ; 1 bytes @ 0x5
  4099                           
  4100                           
  4101                           ; 1 bytes @ 0x5
  4102     0075                     	ds	1
  4103     0076                     ?i1_memcpy:
  4104     0076                     USBConfigureEndpoint@handle:	
  4105                           ; 2 bytes @ 0x6
  4106                           
  4107     0076                     i1USBDeviceInit@i_1369:	
  4108                           ; 1 bytes @ 0x6
  4109                           
  4110     0076                     i1___awmod@sign:	
  4111                           ; 1 bytes @ 0x6
  4112                           
  4113     0076                     i1memset@p:	
  4114                           ; 1 bytes @ 0x6
  4115                           
  4116     0076                     i1memcpy@d1:	
  4117                           ; 1 bytes @ 0x6
  4118                           
  4119                           
  4120                           ; 2 bytes @ 0x6
  4121     0076                     	ds	1
  4122     0077                     ?_USBEnableEndpoint:
  4123     0077                     ??_USBCtrlEPServiceComplete:	
  4124                           ; 1 bytes @ 0x7
  4125                           
  4126     0077                     USBEnableEndpoint@options:	
  4127                           ; 1 bytes @ 0x7
  4128                           
  4129     0077                     USBCtrlTrfInHandler@lastDTS:	
  4130                           ; 1 bytes @ 0x7
  4131                           
  4132     0077                     i1USBDeviceInit@i:	
  4133                           ; 1 bytes @ 0x7
  4134                           
  4135                           
  4136                           ; 1 bytes @ 0x7
  4137     0077                     	ds	1
  4138     0078                     ??_USBEnableEndpoint:
  4139     0078                     USBCtrlTrfRxService@i:	
  4140                           ; 1 bytes @ 0x8
  4141                           
  4142     0078                     i1USBTransferOnePacket@ep:	
  4143                           ; 1 bytes @ 0x8
  4144                           
  4145     0078                     i1memcpy@s1:	
  4146                           ; 1 bytes @ 0x8
  4147                           
  4148                           
  4149                           ; 2 bytes @ 0x8
  4150     0078                     	ds	1
  4151     0079                     USBCtrlTrfRxService@byteToRead:
  4152     0079                     i1USBTransferOnePacket@handle:	
  4153                           ; 1 bytes @ 0x9
  4154                           
  4155                           
  4156                           ; 2 bytes @ 0x9
  4157     0079                     	ds	1
  4158     007A                     ??_USBCtrlTrfOutHandler:
  4159     007A                     USBEnableEndpoint@p:	
  4160                           ; 1 bytes @ 0xA
  4161                           
  4162     007A                     i1memcpy@n:	
  4163                           ; 2 bytes @ 0xA
  4164                           
  4165                           
  4166                           ; 2 bytes @ 0xA
  4167     007A                     	ds	2
  4168     007C                     ??i1_memcpy:
  4169     007C                     USBEnableEndpoint@ep:	
  4170                           ; 1 bytes @ 0xC
  4171                           
  4172     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4173                           ; 1 bytes @ 0xC
  4174                           
  4175                           
  4176                           ; 1 bytes @ 0xC
  4177     007C                     	ds	1
  4178     007D                     ??_USBWakeFromSuspend:
  4179     007D                     ??_USBSuspend:	
  4180                           ; 1 bytes @ 0xD
  4181                           
  4182     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4183                           ; 1 bytes @ 0xD
  4184                           
  4185     007D                     ??_APP_KeyboardInit:	
  4186                           ; 1 bytes @ 0xD
  4187                           
  4188     007D                     ??_USBStdSetCfgHandler:	
  4189                           ; 1 bytes @ 0xD
  4190                           
  4191     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4192                           ; 1 bytes @ 0xD
  4193                           
  4194                           
  4195                           ; 1 bytes @ 0xD
  4196     007D                     	ds	1
  4197     007E                     ??_IOCAF4_ISR:
  4198     007E                     ??_USBCheckStdRequest:	
  4199                           ; 1 bytes @ 0xE
  4200                           
  4201     007E                     ??_PIN_MANAGER_IOC:	
  4202                           ; 1 bytes @ 0xE
  4203                           
  4204     007E                     ??_INTERRUPT_InterruptManager:	
  4205                           ; 1 bytes @ 0xE
  4206                           
  4207                           
  4208                           	psect	cstackBANK0
  4209     0050                     __pcstackBANK0:	
  4210                           ; 1 bytes @ 0xE
  4211                           
  4212     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4213     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4214                           ; 1 bytes @ 0x0
  4215                           
  4216     0050                     i1memcpy@d:	
  4217                           ; 2 bytes @ 0x0
  4218                           
  4219                           
  4220                           ; 2 bytes @ 0x0
  4221     0050                     	ds	2
  4222     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4223     0052                     i1memcpy@s:	
  4224                           ; 2 bytes @ 0x2
  4225                           
  4226                           
  4227                           ; 2 bytes @ 0x2
  4228     0052                     	ds	2
  4229     0054                     i1memcpy@tmp:
  4230     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4231                           ; 1 bytes @ 0x4
  4232                           
  4233                           
  4234                           ; 2 bytes @ 0x4
  4235     0054                     	ds	1
  4236     0055                     ?i1_GenericQueue_Enqueue:
  4237     0055                     i1GenericQueue_Enqueue@q:	
  4238                           ; 1 bytes @ 0x5
  4239                           
  4240                           
  4241                           ; 2 bytes @ 0x5
  4242     0055                     	ds	1
  4243     0056                     ??_USBStdFeatureReqHandler:
  4244     0056                     USBStdSetCfgHandler@p:	
  4245                           ; 1 bytes @ 0x6
  4246                           
  4247                           
  4248                           ; 2 bytes @ 0x6
  4249     0056                     	ds	1
  4250     0057                     i1GenericQueue_Enqueue@item:
  4251                           
  4252                           ; 2 bytes @ 0x7
  4253     0057                     	ds	1
  4254     0058                     USBStdSetCfgHandler@i_2097:
  4255     0058                     USBStdFeatureReqHandler@pUEP:	
  4256                           ; 1 bytes @ 0x8
  4257                           
  4258                           
  4259                           ; 2 bytes @ 0x8
  4260     0058                     	ds	1
  4261     0059                     ??i1_GenericQueue_Enqueue:
  4262     0059                     USBStdSetCfgHandler@i:	
  4263                           ; 1 bytes @ 0x9
  4264                           
  4265                           
  4266                           ; 1 bytes @ 0x9
  4267     0059                     	ds	1
  4268     005A                     USBStdFeatureReqHandler@current_ep_data:
  4269                           
  4270                           ; 1 bytes @ 0xA
  4271     005A                     	ds	1
  4272     005B                     USBStdFeatureReqHandler@p:
  4273                           
  4274                           ; 2 bytes @ 0xB
  4275     005B                     	ds	1
  4276     005C                     ??_PS2Keyboard_ClockInterrupt:
  4277                           
  4278                           ; 1 bytes @ 0xC
  4279     005C                     	ds	1
  4280     005D                     ??_USBCtrlTrfSetupHandler:
  4281                           
  4282                           ; 1 bytes @ 0xD
  4283     005D                     	ds	1
  4284     005E                     ??_USBCtrlEPService:
  4285                           
  4286                           ; 1 bytes @ 0xE
  4287     005E                     	ds	1
  4288     005F                     ??_USBDeviceTasks:
  4289                           
  4290                           ; 1 bytes @ 0xF
  4291     005F                     	ds	1
  4292     0060                     USBDeviceTasks@i:
  4293                           
  4294                           ; 1 bytes @ 0x10
  4295     0060                     	ds	1
  4296                           
  4297                           	psect	maintext
  4298     0A8A                     __pmaintext:	
  4299 ;;
  4300 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  4301 ;;
  4302 ;; *************** function _main *****************
  4303 ;; Defined at:
  4304 ;;		line 11 in file "main.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;  scanCodeStr     6   50[BANK1 ] unsigned char [6]
  4309 ;;  scanCode        3   62[BANK1 ] struct PS2ScanCode
  4310 ;;  hndlScanCode    1   61[BANK1 ] PTR struct PS2ScanCode
  4311 ;;		 -> main@scanCode(3), NULL(0), 
  4312 ;;  scanCodeVali    1   60[BANK1 ] _Bool 
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  2  840[None  ] int 
  4315 ;; Registers used:
  4316 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4317 ;; Tracked objects:
  4318 ;;		On entry : B1F/0
  4319 ;;		On exit  : 2/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4324 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4325 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
  4326 ;;Total ram usage:       17 bytes
  4327 ;; Hardware stack levels required when called: 14
  4328 ;; This function calls:
  4329 ;;		_APP_KeyboardTasks
  4330 ;;		_Log_Message
  4331 ;;		_Log_UtilityConvertByteToHex
  4332 ;;		_PS2Keyboard_GetScanCode
  4333 ;;		_PS2Keyboard_Init
  4334 ;;		_SYSTEM_Initialize
  4335 ;;		_SysTime_Init
  4336 ;; This function is called by:
  4337 ;;		Startup code after reset
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341     0A8A                     _main:	
  4342                           ;psect for function _main
  4343                           
  4344                           
  4345                           ;main.c: 12:     SYSTEM_Initialize();
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4349     0A8A  3190  2089  318A   	fcall	_SYSTEM_Initialize
  4350                           
  4351                           ;main.c: 13:     SysTime_Init();
  4352     0A8D  319F  271E  318A   	fcall	_SysTime_Init
  4353                           
  4354                           ;main.c: 14:     PS2Keyboard_Init();
  4355     0A90  3191  2195  318A   	fcall	_PS2Keyboard_Init
  4356                           
  4357                           ;main.c: 16:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  4358     0A93  303D               	movlw	61
  4359     0A94  0021               	movlb	1	; select bank1
  4360     0A95  00D9               	movwf	(??_main^(0+128)+1)
  4361     0A96  30E1               	movlw	225
  4362     0A97  00D8               	movwf	??_main^(0+128)
  4363     0A98  303F               	movlw	63
  4364     0A99                     u6417:
  4365     0A99  0B89               	decfsz	9,f
  4366     0A9A  2A99               	goto	u6417
  4367     0A9B  0BD8               	decfsz	??_main^(0+128),f
  4368     0A9C  2A99               	goto	u6417
  4369     0A9D  0BD9               	decfsz	(??_main^(0+128)+1),f
  4370     0A9E  2A99               	goto	u6417
  4371     0A9F  3200               	nop2
  4372                           
  4373                           ;main.c: 23:     (INTCONbits.GIE = 1);
  4374     0AA0  178B               	bsf	11,7	;volatile
  4375                           
  4376                           ;main.c: 26:     (INTCONbits.PEIE = 1);
  4377     0AA1  170B               	bsf	11,6	;volatile
  4378                           
  4379                           ;main.c: 31:     PS2ScanCode scanCode = {0};
  4380     0AA2  0023               	movlb	3	; select bank3
  4381     0AA3  0844               	movf	main@F3448^(0+384),w
  4382     0AA4  0021               	movlb	1	; select bank1
  4383     0AA5  00E6               	movwf	main@scanCode^(0+128)
  4384     0AA6  0023               	movlb	3	; select bank3
  4385     0AA7  0845               	movf	(main@F3448+1)^(0+384),w
  4386     0AA8  0021               	movlb	1	; select bank1
  4387     0AA9  00E7               	movwf	(main@scanCode+1)^(0+128)
  4388     0AAA  0023               	movlb	3	; select bank3
  4389     0AAB  0846               	movf	(main@F3448+2)^(0+384),w
  4390     0AAC  0021               	movlb	1	; select bank1
  4391     0AAD  00E8               	movwf	(main@scanCode+2)^(0+128)
  4392                           
  4393                           ;main.c: 34:     char scanCodeStr[6] = {' ', ' ', ' ', ' ', '\r', '\n'};
  4394     0AAE  30C7               	movlw	low main@F3452
  4395     0AAF  0086               	movwf	6
  4396     0AB0  3001               	movlw	high main@F3452
  4397     0AB1  0087               	movwf	7
  4398     0AB2  30DA               	movlw	low main@scanCodeStr
  4399     0AB3  0084               	movwf	4
  4400     0AB4  3000               	movlw	high main@scanCodeStr
  4401     0AB5  0085               	movwf	5
  4402     0AB6  3006               	movlw	6
  4403     0AB7  00D8               	movwf	??_main^(0+128)
  4404     0AB8                     u6360:
  4405     0AB8  0016               	moviw fsr1++
  4406     0AB9  001A               	movwi fsr0++
  4407     0ABA  0BD8               	decfsz	??_main^(0+128),f
  4408     0ABB  2AB8               	goto	u6360
  4409     0ABC                     l6152:
  4410                           
  4411                           ;main.c: 37:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4412     0ABC  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4413     0ABD  3191  21CC  318A   	fcall	_PS2Keyboard_GetScanCode
  4414     0AC0  00E4               	movwf	main@scanCodeValid^(0+128)
  4415                           
  4416                           ;main.c: 38:         if(scanCodeValid) {
  4417     0AC1  0864               	movf	main@scanCodeValid^(0+128),w
  4418     0AC2  1903               	btfsc	3,2
  4419     0AC3  2AC7               	goto	l6158
  4420                           
  4421                           ;main.c: 39:             hndlScanCode = &scanCode;
  4422     0AC4  30E6               	movlw	(low (main@scanCode| 0))& (0+255)
  4423     0AC5  00E5               	movwf	main@hndlScanCode^(0+128)
  4424                           
  4425                           ;main.c: 40:         } else {
  4426     0AC6  2AC8               	goto	l6160
  4427     0AC7                     l6158:
  4428                           
  4429                           ;main.c: 41:             hndlScanCode = ((void*)0);
  4430     0AC7  01E5               	clrf	main@hndlScanCode^(0+128)
  4431     0AC8                     l6160:
  4432                           
  4433                           ;main.c: 43:         if(hndlScanCode != ((void*)0)) {
  4434     0AC8  0865               	movf	main@hndlScanCode^(0+128),w
  4435     0AC9  1903               	btfsc	3,2
  4436     0ACA  2AF9               	goto	l6178
  4437                           
  4438                           ;main.c: 44:             scanCodeStr[0] = hndlScanCode->isExtend ? 'e' : ' ';
  4439     0ACB  0A65               	incf	main@hndlScanCode^(0+128),w
  4440     0ACC  0086               	movwf	6
  4441     0ACD  0187               	clrf	7
  4442     0ACE  0801               	movf	1,w
  4443     0ACF  1D03               	btfss	3,2
  4444     0AD0  2AD3               	goto	l6166
  4445     0AD1  3020               	movlw	32
  4446     0AD2  2AD4               	goto	L1
  4447     0AD3                     l6166:
  4448     0AD3  3065               	movlw	101
  4449     0AD4                     L1:
  4450     0AD4  00E0               	movwf	_main$2658^(0+128)
  4451     0AD5  3000               	movlw	0
  4452     0AD6  00E1               	movwf	(_main$2658^(0+128)+1)
  4453     0AD7  0860               	movf	_main$2658^(0+128),w
  4454     0AD8  00DA               	movwf	main@scanCodeStr^(0+128)
  4455                           
  4456                           ;main.c: 45:             scanCodeStr[1] = hndlScanCode->isBreak ? 'b' : ' ';
  4457     0AD9  0865               	movf	main@hndlScanCode^(0+128),w
  4458     0ADA  3E02               	addlw	2
  4459     0ADB  0086               	movwf	6
  4460     0ADC  0187               	clrf	7
  4461     0ADD  0801               	movf	1,w
  4462     0ADE  1D03               	btfss	3,2
  4463     0ADF  2AE2               	goto	l6172
  4464     0AE0  3020               	movlw	32
  4465     0AE1  2AE3               	goto	L2
  4466     0AE2                     l6172:
  4467     0AE2  3062               	movlw	98
  4468     0AE3                     L2:
  4469     0AE3  00E2               	movwf	_main$2659^(0+128)
  4470     0AE4  3000               	movlw	0
  4471     0AE5  00E3               	movwf	(_main$2659^(0+128)+1)
  4472     0AE6  0862               	movf	_main$2659^(0+128),w
  4473     0AE7  00DB               	movwf	(main@scanCodeStr^(0+128)+1)
  4474                           
  4475                           ;main.c: 46:             Log_UtilityConvertByteToHex(hndlScanCode->value, &scanCodeStr[2
      +                          ], 2);
  4476     0AE8  30DC               	movlw	(low ((main@scanCodeStr| 0+2)))& (0+255)
  4477     0AE9  00AC               	movwf	Log_UtilityConvertByteToHex@buf^(0+128)
  4478     0AEA  3002               	movlw	2
  4479     0AEB  00AD               	movwf	Log_UtilityConvertByteToHex@bufSize^(0+128)
  4480     0AEC  0865               	movf	main@hndlScanCode^(0+128),w
  4481     0AED  0086               	movwf	6
  4482     0AEE  0187               	clrf	7
  4483     0AEF  0801               	movf	1,w
  4484     0AF0  3192  22E8  318A   	fcall	_Log_UtilityConvertByteToHex
  4485                           
  4486                           ;main.c: 47:             Log_Message((const uint8_t*)scanCodeStr, sizeof(scanCodeStr));
  4487     0AF3  3006               	movlw	6
  4488     0AF4  00AA               	movwf	Log_Message@bufSize^(0+128)
  4489     0AF5  30DA               	movlw	(low (main@scanCodeStr| 0))& (0+255)
  4490     0AF6  3191  217A  318A   	fcall	_Log_Message
  4491     0AF9                     l6178:
  4492                           
  4493                           ;main.c: 49:         APP_KeyboardTasks(hndlScanCode);
  4494     0AF9  0865               	movf	main@hndlScanCode^(0+128),w
  4495     0AFA  3182  22F2  318A   	fcall	_APP_KeyboardTasks
  4496     0AFD  2ABC               	goto	l6152
  4497     0AFE                     __end_of_main:
  4498                           
  4499                           	psect	text1
  4500     1F1E                     __ptext1:	
  4501 ;; *************** function _SysTime_Init *****************
  4502 ;; Defined at:
  4503 ;;		line 12 in file "systime.c"
  4504 ;; Parameters:    Size  Location     Type
  4505 ;;		None
  4506 ;; Auto vars:     Size  Location     Type
  4507 ;;		None
  4508 ;; Return value:  Size  Location     Type
  4509 ;;                  1    wreg      void 
  4510 ;; Registers used:
  4511 ;;		wreg, status,2, status,0, pclath, cstack
  4512 ;; Tracked objects:
  4513 ;;		On entry : 1F/0
  4514 ;;		On exit  : 1F/0
  4515 ;;		Unchanged: 0/0
  4516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;Total ram usage:        0 bytes
  4522 ;; Hardware stack levels used: 1
  4523 ;; Hardware stack levels required when called: 11
  4524 ;; This function calls:
  4525 ;;		_TMR2_SetInterruptHandler
  4526 ;;		_TMR2_StartTimer
  4527 ;; This function is called by:
  4528 ;;		_main
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532     1F1E                     _SysTime_Init:	
  4533                           ;psect for function _SysTime_Init
  4534                           
  4535                           
  4536                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4537                           
  4538                           ;incstack = 0
  4539                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4540     1F1E  30FF               	movlw	low _SysTimeInterrupt
  4541     1F1F  0021               	movlb	1	; select bank1
  4542     1F20  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4543     1F21  301E               	movlw	high _SysTimeInterrupt
  4544     1F22  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4545     1F23  319E  26EE  319F   	fcall	_TMR2_SetInterruptHandler
  4546                           
  4547                           ;systime.c: 15:     TMR2_StartTimer();
  4548     1F26  319E  269F         	fcall	_TMR2_StartTimer
  4549     1F28  0008               	return
  4550     1F29                     __end_of_SysTime_Init:
  4551                           
  4552                           	psect	text2
  4553     1E9F                     __ptext2:	
  4554 ;; *************** function _TMR2_StartTimer *****************
  4555 ;; Defined at:
  4556 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;		None
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;		None
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  1    wreg      void 
  4563 ;; Registers used:
  4564 ;;		None
  4565 ;; Tracked objects:
  4566 ;;		On entry : 1F/2
  4567 ;;		On exit  : 1F/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;Total ram usage:        0 bytes
  4575 ;; Hardware stack levels used: 1
  4576 ;; Hardware stack levels required when called: 10
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_SysTime_Init
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584     1E9F                     _TMR2_StartTimer:	
  4585                           ;psect for function _TMR2_StartTimer
  4586                           
  4587                           
  4588                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4589                           
  4590                           ;incstack = 0
  4591                           ; Regs used in _TMR2_StartTimer: []
  4592     1E9F  0020               	movlb	0	; select bank0
  4593     1EA0  151C               	bsf	28,2	;volatile
  4594     1EA1  0008               	return
  4595     1EA2                     __end_of_TMR2_StartTimer:
  4596                           
  4597                           	psect	text3
  4598     1089                     __ptext3:	
  4599 ;; *************** function _SYSTEM_Initialize *****************
  4600 ;; Defined at:
  4601 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4610 ;; Tracked objects:
  4611 ;;		On entry : B1F/0
  4612 ;;		On exit  : 1F/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used: 1
  4621 ;; Hardware stack levels required when called: 12
  4622 ;; This function calls:
  4623 ;;		_EUSART_Initialize
  4624 ;;		_OSCILLATOR_Initialize
  4625 ;;		_PIN_MANAGER_Initialize
  4626 ;;		_TMR2_Initialize
  4627 ;;		_USBDeviceAttach
  4628 ;;		_USBDeviceInit
  4629 ;;		_WDT_Initialize
  4630 ;; This function is called by:
  4631 ;;		_main
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635     1089                     _SYSTEM_Initialize:	
  4636                           ;psect for function _SYSTEM_Initialize
  4637                           
  4638                           
  4639                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4640                           
  4641                           ;incstack = 0
  4642                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4643     1089  3193  2359  3190   	fcall	_PIN_MANAGER_Initialize
  4644                           
  4645                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4646     108C  319F  2775  3190   	fcall	_OSCILLATOR_Initialize
  4647                           
  4648                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4649     108F  319E  269C  3190   	fcall	_WDT_Initialize
  4650                           
  4651                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4652     1092  319F  27B4  3190   	fcall	_TMR2_Initialize
  4653                           
  4654                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4655     1095  3187  27BD  3190   	fcall	_EUSART_Initialize
  4656                           
  4657                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4658     1098  318E  26A1  3190   	fcall	_USBDeviceInit
  4659                           
  4660                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4661     109B  3191  2111         	fcall	_USBDeviceAttach
  4662     109D  0008               	return
  4663     109E                     __end_of_SYSTEM_Initialize:
  4664                           
  4665                           	psect	text4
  4666     1E9C                     __ptext4:	
  4667 ;; *************** function _WDT_Initialize *****************
  4668 ;; Defined at:
  4669 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4670 ;; Parameters:    Size  Location     Type
  4671 ;;		None
  4672 ;; Auto vars:     Size  Location     Type
  4673 ;;		None
  4674 ;; Return value:  Size  Location     Type
  4675 ;;                  1    wreg      void 
  4676 ;; Registers used:
  4677 ;;		wreg
  4678 ;; Tracked objects:
  4679 ;;		On entry : 1F/1
  4680 ;;		On exit  : 1F/1
  4681 ;;		Unchanged: 0/0
  4682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4687 ;;Total ram usage:        0 bytes
  4688 ;; Hardware stack levels used: 1
  4689 ;; Hardware stack levels required when called: 10
  4690 ;; This function calls:
  4691 ;;		Nothing
  4692 ;; This function is called by:
  4693 ;;		_SYSTEM_Initialize
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697     1E9C                     _WDT_Initialize:	
  4698                           ;psect for function _WDT_Initialize
  4699                           
  4700                           
  4701                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _WDT_Initialize: [wreg]
  4705     1E9C  3016               	movlw	22
  4706     1E9D  0097               	movwf	23	;volatile
  4707     1E9E  0008               	return
  4708     1E9F                     __end_of_WDT_Initialize:
  4709                           
  4710                           	psect	text5
  4711     0EA1                     __ptext5:	
  4712 ;; *************** function _USBDeviceInit *****************
  4713 ;; Defined at:
  4714 ;;		line 281 in file "usb/usb_device.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;		None
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4719 ;;		 -> UEP1(1), 
  4720 ;;  i               1    6[BANK1 ] unsigned char 
  4721 ;;  i               1    7[BANK1 ] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      void 
  4724 ;; Registers used:
  4725 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4726 ;; Tracked objects:
  4727 ;;		On entry : 1F/1
  4728 ;;		On exit  : 1F/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;Total ram usage:        8 bytes
  4736 ;; Hardware stack levels used: 1
  4737 ;; Hardware stack levels required when called: 10
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		_SYSTEM_Initialize
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745     0EA1                     _USBDeviceInit:	
  4746                           ;psect for function _USBDeviceInit
  4747                           
  4748                           
  4749                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4750                           
  4751                           ;incstack = 0
  4752                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4753     0EA1  1112               	bcf	18,2	;volatile
  4754                           
  4755                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4756     0EA2  003D               	movlb	29	; select bank29
  4757     0EA3  0193               	clrf	19	;volatile
  4758                           
  4759                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4760     0EA4  0190               	clrf	16	;volatile
  4761                           
  4762                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4763     0EA5  0198               	clrf	24	;volatile
  4764                           
  4765                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4766     0EA6  300E               	movlw	14
  4767     0EA7  0021               	movlb	1	; select bank1
  4768     0EA8  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4769     0EA9  3099               	movlw	153
  4770     0EAA  00AC               	movwf	USBDeviceInit@p^(0+128)
  4771     0EAB  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  4772     0EAC                     l5012:
  4773     0EAC  082C               	movf	USBDeviceInit@p^(0+128),w
  4774     0EAD  0086               	movwf	6
  4775     0EAE  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4776     0EAF  0087               	movwf	7
  4777     0EB0  0181               	clrf	1
  4778     0EB1  3001               	movlw	1
  4779     0EB2  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4780     0EB3  3000               	movlw	0
  4781     0EB4  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4782     0EB5  3001               	movlw	1
  4783     0EB6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4784     0EB7  0828               	movf	??_USBDeviceInit^(0+128),w
  4785     0EB8  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  4786     0EB9  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  4787     0EBA  1903               	btfsc	3,2
  4788     0EBB  2EAC               	goto	l5012
  4789                           
  4790                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4791     0EBC  3016               	movlw	22
  4792     0EBD  003D               	movlb	29	; select bank29
  4793     0EBE  0091               	movwf	17	;volatile
  4794     0EBF  309F               	movlw	159
  4795     0EC0  0097               	movwf	23	;volatile
  4796     0EC1  307B               	movlw	123
  4797     0EC2  0092               	movwf	18	;volatile
  4798                           
  4799                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4800     0EC3  0021               	movlb	1	; select bank1
  4801     0EC4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4802     0EC5                     l5028:
  4803                           
  4804                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4805     0EC5  082F               	movf	USBDeviceInit@i^(0+128),w
  4806     0EC6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4807     0EC7  3001               	movlw	1
  4808     0EC8                     u4385:
  4809     0EC8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4810     0EC9  3EFF               	addlw	-1
  4811     0ECA  1D03               	skipz
  4812     0ECB  2EC8               	goto	u4385
  4813     0ECC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4814     0ECD  3E20               	addlw	32
  4815     0ECE  0086               	movwf	6
  4816     0ECF  0187               	clrf	7
  4817     0ED0  3000               	movlw	0
  4818     0ED1  3FC0               	movwi [0]fsr1
  4819     0ED2  3000               	movlw	0
  4820     0ED3  3FC1               	movwi [1]fsr1
  4821     0ED4  3FC2               	movwi [2]fsr1
  4822     0ED5  3FC3               	movwi [3]fsr1
  4823                           
  4824                           ;usb/usb_device.c: 314:     }
  4825     0ED6  3001               	movlw	1
  4826     0ED7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4827     0ED8  0828               	movf	??_USBDeviceInit^(0+128),w
  4828     0ED9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4829     0EDA  3008               	movlw	8
  4830     0EDB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4831     0EDC  1C03               	skipc
  4832     0EDD  2EC5               	goto	l5028
  4833                           
  4834                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4835     0EDE  003D               	movlb	29	; select bank29
  4836     0EDF  170E               	bsf	14,6	;volatile
  4837                           
  4838                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4839     0EE0  0196               	clrf	22	;volatile
  4840                           
  4841                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4842     0EE1  120E               	bcf	14,4	;volatile
  4843                           
  4844                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4845     0EE2  130E               	bcf	14,6	;volatile
  4846     0EE3                     l5040:
  4847                           
  4848                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4849     0EE3  30F7               	movlw	247
  4850     0EE4  0021               	movlb	1	; select bank1
  4851     0EE5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4852     0EE6  0828               	movf	??_USBDeviceInit^(0+128),w
  4853     0EE7  003D               	movlb	29	; select bank29
  4854     0EE8  0590               	andwf	16,f	;volatile
  4855                           
  4856                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4857     0EE9  0021               	movlb	1	; select bank1
  4858     0EEA  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
  4859                           
  4860                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4861     0EEB  0022               	movlb	2	; select bank2
  4862     0EEC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4863                           
  4864                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4865     0EED  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4866     0EEE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4867                           
  4868                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4869     0EEF  003D               	movlb	29	; select bank29
  4870     0EF0  1990               	btfsc	16,3	;volatile
  4871     0EF1  2EE3               	goto	l5040
  4872                           
  4873                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4874     0EF2  3001               	movlw	1
  4875     0EF3  0022               	movlb	2	; select bank2
  4876     0EF4  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4877                           
  4878                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4879     0EF5  3001               	movlw	1
  4880     0EF6  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4881                           
  4882                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4883     0EF7  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4884                           
  4885                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4886     0EF8  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4887                           
  4888                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4889     0EF9  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4890                           
  4891                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4892     0EFA  0021               	movlb	1	; select bank1
  4893     0EFB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4894     0EFC                     l5062:
  4895                           
  4896                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4897     0EFC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4898     0EFD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4899     0EFE  0086               	movwf	6
  4900     0EFF  0187               	clrf	7
  4901     0F00  3000               	movlw	0
  4902     0F01  3FC0               	movwi [0]fsr1
  4903     0F02  3FC1               	movwi [1]fsr1
  4904                           
  4905                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4906     0F03  352F               	lslf	USBDeviceInit@i^(0+128),w
  4907     0F04  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4908     0F05  0086               	movwf	6
  4909     0F06  3001               	movlw	1	; select bank2/3
  4910     0F07  0087               	movwf	7
  4911     0F08  3000               	movlw	0
  4912     0F09  3FC0               	movwi [0]fsr1
  4913     0F0A  3FC1               	movwi [1]fsr1
  4914                           
  4915                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4916     0F0B  082F               	movf	USBDeviceInit@i^(0+128),w
  4917     0F0C  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4918     0F0D  0086               	movwf	6
  4919     0F0E  3001               	movlw	1	; select bank2/3
  4920     0F0F  0087               	movwf	7
  4921     0F10  0181               	clrf	1
  4922                           
  4923                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4924     0F11  082F               	movf	USBDeviceInit@i^(0+128),w
  4925     0F12  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4926     0F13  0086               	movwf	6
  4927     0F14  3001               	movlw	1	; select bank2/3
  4928     0F15  0087               	movwf	7
  4929     0F16  0181               	clrf	1
  4930                           
  4931                           ;usb/usb_device.c: 355:     }
  4932     0F17  3001               	movlw	1
  4933     0F18  00A8               	movwf	??_USBDeviceInit^(0+128)
  4934     0F19  0828               	movf	??_USBDeviceInit^(0+128),w
  4935     0F1A  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4936     0F1B  3002               	movlw	2
  4937     0F1C  022F               	subwf	USBDeviceInit@i^(0+128),w
  4938     0F1D  1C03               	skipc
  4939     0F1E  2EFC               	goto	l5062
  4940                           
  4941                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4942     0F1F  3028               	movlw	40
  4943     0F20  0020               	movlb	0	; select bank0
  4944     0F21  00E1               	movwf	_pBDTEntryIn
  4945     0F22  3000               	movlw	0
  4946     0F23  00E2               	movwf	_pBDTEntryIn+1
  4947                           
  4948                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4949     0F24  3016               	movlw	22
  4950     0F25  003D               	movlb	29	; select bank29
  4951     0F26  0098               	movwf	24	;volatile
  4952                           
  4953                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4954     0F27  3040               	movlw	64
  4955     0F28  0021               	movlb	1	; select bank1
  4956     0F29  00A8               	movwf	??_USBDeviceInit^(0+128)
  4957     0F2A  3000               	movlw	0
  4958     0F2B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4959     0F2C  30FF               	movlw	255
  4960     0F2D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4961     0F2E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4962     0F2F  307F               	movlw	127
  4963     0F30  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4964     0F31  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4965     0F32  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4966     0F33  0020               	movlb	0	; select bank0
  4967     0F34  00A2               	movwf	34	;volatile
  4968     0F35  0021               	movlb	1	; select bank1
  4969     0F36  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4970     0F37  0020               	movlb	0	; select bank0
  4971     0F38  00A3               	movwf	35	;volatile
  4972                           
  4973                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4974     0F39  3008               	movlw	8
  4975     0F3A  00A1               	movwf	33	;volatile
  4976                           
  4977                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4978     0F3B  3004               	movlw	4
  4979     0F3C  00A0               	movwf	32	;volatile
  4980                           
  4981                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4982     0F3D  17A0               	bsf	32,7	;volatile
  4983                           
  4984                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4985     0F3E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4986                           
  4987                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4988     0F3F  3000               	movlw	0
  4989     0F40  0023               	movlb	3	; select bank3
  4990     0F41  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4991     0F42  3000               	movlw	0
  4992     0F43  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4993     0F44  3000               	movlw	0
  4994     0F45  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4995     0F46  3000               	movlw	0
  4996     0F47  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  4997                           
  4998                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4999     0F48  0022               	movlb	2	; select bank2
  5000     0F49  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  5001                           
  5002                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  5003     0F4A  0020               	movlb	0	; select bank0
  5004     0F4B  01EC               	clrf	_USBDeviceState	;volatile
  5005     0F4C  0008               	return
  5006     0F4D                     __end_of_USBDeviceInit:
  5007                           
  5008                           	psect	text6
  5009     1111                     __ptext6:	
  5010 ;; *************** function _USBDeviceAttach *****************
  5011 ;; Defined at:
  5012 ;;		line 1356 in file "usb/usb_device.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;		None
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;		None
  5017 ;; Return value:  Size  Location     Type
  5018 ;;                  1    wreg      void 
  5019 ;; Registers used:
  5020 ;;		wreg, status,2, status,0
  5021 ;; Tracked objects:
  5022 ;;		On entry : 1F/0
  5023 ;;		On exit  : 1F/0
  5024 ;;		Unchanged: 0/0
  5025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;Total ram usage:        0 bytes
  5031 ;; Hardware stack levels used: 1
  5032 ;; Hardware stack levels required when called: 10
  5033 ;; This function calls:
  5034 ;;		Nothing
  5035 ;; This function is called by:
  5036 ;;		_SYSTEM_Initialize
  5037 ;; This function uses a non-reentrant model
  5038 ;;
  5039                           
  5040     1111                     _USBDeviceAttach:	
  5041                           ;psect for function _USBDeviceAttach
  5042                           
  5043                           
  5044                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  5045                           
  5046                           ;incstack = 0
  5047                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  5048     1111  086C               	movf	_USBDeviceState,w
  5049     1112  1D03               	btfss	3,2
  5050     1113  0008               	return
  5051                           
  5052                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  5053     1114  003D               	movlb	29	; select bank29
  5054     1115  018E               	clrf	14	;volatile
  5055                           
  5056                           ;usb/usb_device.c: 1367:             UIE = 0;
  5057     1116  0192               	clrf	18	;volatile
  5058                           
  5059                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  5060     1117  3016               	movlw	22
  5061     1118  0091               	movwf	17	;volatile
  5062     1119  309F               	movlw	159
  5063     111A  0097               	movwf	23	;volatile
  5064     111B  307B               	movlw	123
  5065     111C  0092               	movwf	18	;volatile
  5066                           
  5067                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  5068     111D  0021               	movlb	1	; select bank1
  5069     111E  1512               	bsf	18,2	;volatile
  5070     111F  170B               	bsf	11,6	;volatile
  5071     1120  178B               	bsf	11,7	;volatile
  5072     1121                     l541:	
  5073                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  5074                           
  5075     1121  003D               	movlb	29	; select bank29
  5076     1122  198E               	btfsc	14,3	;volatile
  5077     1123  2926               	goto	l5104
  5078     1124  158E               	bsf	14,3	;volatile
  5079     1125  2921               	goto	l541
  5080     1126                     l5104:
  5081                           
  5082                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  5083     1126  3001               	movlw	1
  5084     1127  0020               	movlb	0	; select bank0
  5085     1128  00EC               	movwf	_USBDeviceState	;volatile
  5086     1129  0008               	return
  5087     112A                     __end_of_USBDeviceAttach:
  5088                           
  5089                           	psect	text7
  5090     1FB4                     __ptext7:	
  5091 ;; *************** function _TMR2_Initialize *****************
  5092 ;; Defined at:
  5093 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;		None
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;		None
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, pclath, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 1F/1
  5104 ;;		On exit  : 1F/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5111 ;;Total ram usage:        0 bytes
  5112 ;; Hardware stack levels used: 1
  5113 ;; Hardware stack levels required when called: 11
  5114 ;; This function calls:
  5115 ;;		_TMR2_SetInterruptHandler
  5116 ;; This function is called by:
  5117 ;;		_SYSTEM_Initialize
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121     1FB4                     _TMR2_Initialize:	
  5122                           ;psect for function _TMR2_Initialize
  5123                           
  5124                           
  5125                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  5126                           
  5127                           ;incstack = 0
  5128                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5129     1FB4  305D               	movlw	93
  5130     1FB5  0020               	movlb	0	; select bank0
  5131     1FB6  009B               	movwf	27	;volatile
  5132                           
  5133                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5134     1FB7  019A               	clrf	26	;volatile
  5135                           
  5136                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5137     1FB8  1091               	bcf	17,1	;volatile
  5138                           
  5139                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5140     1FB9  0021               	movlb	1	; select bank1
  5141     1FBA  1491               	bsf	17,1	;volatile
  5142                           
  5143                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5144     1FBB  30FE               	movlw	low _TMR2_DefaultInterruptHandler
  5145     1FBC  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  5146     1FBD  3007               	movlw	high _TMR2_DefaultInterruptHandler
  5147     1FBE  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5148     1FBF  319E  26EE         	fcall	_TMR2_SetInterruptHandler
  5149                           
  5150                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  5151     1FC1  300F               	movlw	15
  5152     1FC2  0020               	movlb	0	; select bank0
  5153     1FC3  009C               	movwf	28	;volatile
  5154     1FC4  0008               	return
  5155     1FC5                     __end_of_TMR2_Initialize:
  5156                           
  5157                           	psect	text8
  5158     1EEE                     __ptext8:	
  5159 ;; *************** function _TMR2_SetInterruptHandler *****************
  5160 ;; Defined at:
  5161 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5164 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  5165 ;; Auto vars:     Size  Location     Type
  5166 ;;		None
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  1    wreg      void 
  5169 ;; Registers used:
  5170 ;;		wreg
  5171 ;; Tracked objects:
  5172 ;;		On entry : 1F/1
  5173 ;;		On exit  : 1F/2
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5176 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;Total ram usage:        2 bytes
  5181 ;; Hardware stack levels used: 1
  5182 ;; Hardware stack levels required when called: 10
  5183 ;; This function calls:
  5184 ;;		Nothing
  5185 ;; This function is called by:
  5186 ;;		_TMR2_Initialize
  5187 ;;		_SysTime_Init
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191     1EEE                     _TMR2_SetInterruptHandler:	
  5192                           ;psect for function _TMR2_SetInterruptHandler
  5193                           
  5194                           
  5195                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5196                           
  5197                           ;incstack = 0
  5198                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5199     1EEE  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5200     1EEF  0022               	movlb	2	; select bank2
  5201     1EF0  00C5               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  5202     1EF1  0021               	movlb	1	; select bank1
  5203     1EF2  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5204     1EF3  0022               	movlb	2	; select bank2
  5205     1EF4  00C4               	movwf	_TMR2_InterruptHandler^(0+256)
  5206     1EF5  0008               	return
  5207     1EF6                     __end_of_TMR2_SetInterruptHandler:
  5208                           
  5209                           	psect	text9
  5210     1359                     __ptext9:	
  5211 ;; *************** function _PIN_MANAGER_Initialize *****************
  5212 ;; Defined at:
  5213 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;		None
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;		None
  5218 ;; Return value:  Size  Location     Type
  5219 ;;                  1    wreg      void 
  5220 ;; Registers used:
  5221 ;;		wreg, status,2, status,0, pclath, cstack
  5222 ;; Tracked objects:
  5223 ;;		On entry : B1F/0
  5224 ;;		On exit  : 1F/2
  5225 ;;		Unchanged: 0/0
  5226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;Total ram usage:        0 bytes
  5232 ;; Hardware stack levels used: 1
  5233 ;; Hardware stack levels required when called: 11
  5234 ;; This function calls:
  5235 ;;		_IOCAF4_SetInterruptHandler
  5236 ;;		_IOCAF5_SetInterruptHandler
  5237 ;; This function is called by:
  5238 ;;		_SYSTEM_Initialize
  5239 ;; This function uses a non-reentrant model
  5240 ;;
  5241                           
  5242     1359                     _PIN_MANAGER_Initialize:	
  5243                           ;psect for function _PIN_MANAGER_Initialize
  5244                           
  5245                           
  5246                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5250     1359  0022               	movlb	2	; select bank2
  5251     135A  018C               	clrf	12	;volatile
  5252                           
  5253                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  5254     135B  018D               	clrf	13	;volatile
  5255                           
  5256                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  5257     135C  018E               	clrf	14	;volatile
  5258                           
  5259                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  5260     135D  3030               	movlw	48
  5261     135E  0021               	movlb	1	; select bank1
  5262     135F  008C               	movwf	12	;volatile
  5263                           
  5264                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  5265     1360  3070               	movlw	112
  5266     1361  008D               	movwf	13	;volatile
  5267                           
  5268                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  5269     1362  30FF               	movlw	255
  5270     1363  008E               	movwf	14	;volatile
  5271                           
  5272                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  5273     1364  30CF               	movlw	207
  5274     1365  0023               	movlb	3	; select bank3
  5275     1366  008E               	movwf	14	;volatile
  5276                           
  5277                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  5278     1367  018D               	clrf	13	;volatile
  5279                           
  5280                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  5281     1368  018C               	clrf	12	;volatile
  5282                           
  5283                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  5284     1369  0024               	movlb	4	; select bank4
  5285     136A  018D               	clrf	13	;volatile
  5286                           
  5287                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  5288     136B  3030               	movlw	48
  5289     136C  008C               	movwf	12	;volatile
  5290                           
  5291                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  5292     136D  0021               	movlb	1	; select bank1
  5293     136E  1395               	bcf	21,7	;volatile
  5294                           
  5295                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  5296     136F  0022               	movlb	2	; select bank2
  5297     1370  019D               	clrf	29	;volatile
  5298                           
  5299                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  5300     1371  0027               	movlb	7	; select bank7
  5301     1372  1213               	bcf	19,4	;volatile
  5302                           
  5303                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  5304     1373  1293               	bcf	19,5	;volatile
  5305                           
  5306                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  5307     1374  1612               	bsf	18,4	;volatile
  5308                           
  5309                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  5310     1375  1692               	bsf	18,5	;volatile
  5311                           
  5312                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  5313     1376  1211               	bcf	17,4	;volatile
  5314                           
  5315                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  5316     1377  1291               	bcf	17,5	;volatile
  5317                           
  5318                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5319     1378  3003               	movlw	low _IOCAF4_DefaultInterruptHandler
  5320     1379  0021               	movlb	1	; select bank1
  5321     137A  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5322     137B  3000               	movlw	high _IOCAF4_DefaultInterruptHandler
  5323     137C  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5324     137D  319E  26B6  3193   	fcall	_IOCAF4_SetInterruptHandler
  5325                           
  5326                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5327     1380  30FF               	movlw	low _IOCAF5_DefaultInterruptHandler
  5328     1381  0021               	movlb	1	; select bank1
  5329     1382  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5330     1383  3007               	movlw	high _IOCAF5_DefaultInterruptHandler
  5331     1384  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5332     1385  319E  26BE         	fcall	_IOCAF5_SetInterruptHandler
  5333                           
  5334                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5335     1387  158B               	bsf	11,3	;volatile
  5336     1388  0008               	return
  5337     1389                     __end_of_PIN_MANAGER_Initialize:
  5338                           
  5339                           	psect	text10
  5340     1F75                     __ptext10:	
  5341 ;; *************** function _OSCILLATOR_Initialize *****************
  5342 ;; Defined at:
  5343 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;                  1    wreg      void 
  5350 ;; Registers used:
  5351 ;;		wreg, status,2
  5352 ;; Tracked objects:
  5353 ;;		On entry : 1F/2
  5354 ;;		On exit  : 1F/1
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;Total ram usage:        0 bytes
  5362 ;; Hardware stack levels used: 1
  5363 ;; Hardware stack levels required when called: 10
  5364 ;; This function calls:
  5365 ;;		Nothing
  5366 ;; This function is called by:
  5367 ;;		_SYSTEM_Initialize
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371     1F75                     _OSCILLATOR_Initialize:	
  5372                           ;psect for function _OSCILLATOR_Initialize
  5373                           
  5374                           
  5375                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5379     1F75  30FC               	movlw	252
  5380     1F76  0021               	movlb	1	; select bank1
  5381     1F77  0099               	movwf	25	;volatile
  5382                           
  5383                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5384     1F78  0198               	clrf	24	;volatile
  5385                           
  5386                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5387     1F79  3090               	movlw	144
  5388     1F7A  0027               	movlb	7	; select bank7
  5389     1F7B  009B               	movwf	27	;volatile
  5390                           
  5391                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5392     1F7C  0022               	movlb	2	; select bank2
  5393     1F7D  0196               	clrf	22	;volatile
  5394     1F7E                     l110:	
  5395                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5396                           
  5397                           
  5398                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5399     1F7E  0021               	movlb	1	; select bank1
  5400     1F7F  1B1A               	btfsc	26,6	;volatile
  5401     1F80  0008               	return
  5402     1F81  2F7E               	goto	l110
  5403     1F82                     __end_of_OSCILLATOR_Initialize:
  5404                           
  5405                           	psect	text11
  5406     07BD                     __ptext11:	
  5407 ;; *************** function _EUSART_Initialize *****************
  5408 ;; Defined at:
  5409 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, pclath, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 1F/0
  5420 ;;		On exit  : 1F/1
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used: 1
  5429 ;; Hardware stack levels required when called: 11
  5430 ;; This function calls:
  5431 ;;		_EUSART_SetErrorHandler
  5432 ;;		_EUSART_SetFramingErrorHandler
  5433 ;;		_EUSART_SetOverrunErrorHandler
  5434 ;;		_EUSART_SetRxInterruptHandler
  5435 ;;		_EUSART_SetTxInterruptHandler
  5436 ;; This function is called by:
  5437 ;;		_SYSTEM_Initialize
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441     07BD                     _EUSART_Initialize:	
  5442                           ;psect for function _EUSART_Initialize
  5443                           
  5444                           
  5445                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5449     07BD  0021               	movlb	1	; select bank1
  5450     07BE  1291               	bcf	17,5	;volatile
  5451                           
  5452                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5453     07BF  30C0               	movlw	low _EUSART_Receive_ISR
  5454     07C0  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5455     07C1  3013               	movlw	high _EUSART_Receive_ISR
  5456     07C2  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5457     07C3  319E  26DE  3187   	fcall	_EUSART_SetRxInterruptHandler
  5458                           
  5459                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5460     07C6  0021               	movlb	1	; select bank1
  5461     07C7  1211               	bcf	17,4	;volatile
  5462                           
  5463                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5464     07C8  3005               	movlw	low _EUSART_Transmit_ISR
  5465     07C9  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5466     07CA  3012               	movlw	high _EUSART_Transmit_ISR
  5467     07CB  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5468     07CC  319E  26E6  3187   	fcall	_EUSART_SetTxInterruptHandler
  5469                           
  5470                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5471     07CF  3008               	movlw	8
  5472     07D0  0023               	movlb	3	; select bank3
  5473     07D1  009F               	movwf	31	;volatile
  5474                           
  5475                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x80;
  5476     07D2  3080               	movlw	128
  5477     07D3  009D               	movwf	29	;volatile
  5478                           
  5479                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5480     07D4  3024               	movlw	36
  5481     07D5  009E               	movwf	30	;volatile
  5482                           
  5483                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5484     07D6  30E1               	movlw	225
  5485     07D7  009B               	movwf	27	;volatile
  5486                           
  5487                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5488     07D8  3004               	movlw	4
  5489     07D9  009C               	movwf	28	;volatile
  5490                           
  5491                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5492     07DA  3002               	movlw	low _EUSART_DefaultFramingErrorHandler
  5493     07DB  0021               	movlb	1	; select bank1
  5494     07DC  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5495     07DD  3000               	movlw	high _EUSART_DefaultFramingErrorHandler
  5496     07DE  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5497     07DF  319E  26CE  3187   	fcall	_EUSART_SetFramingErrorHandler
  5498                           
  5499                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5500     07E2  3085               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5501     07E3  0021               	movlb	1	; select bank1
  5502     07E4  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5503     07E5  3010               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5504     07E6  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5505     07E7  319E  26D6  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5506                           
  5507                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5508     07EA  3096               	movlw	low _EUSART_DefaultErrorHandler
  5509     07EB  0021               	movlb	1	; select bank1
  5510     07EC  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5511     07ED  301E               	movlw	high _EUSART_DefaultErrorHandler
  5512     07EE  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5513     07EF  319E  26C6         	fcall	_EUSART_SetErrorHandler
  5514                           
  5515                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5516     07F1  01E1               	clrf	_eusartRxLastError^(0+256)	;volatile
  5517                           
  5518                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5519     07F2  01E5               	clrf	_eusartTxHead^(0+256)	;volatile
  5520                           
  5521                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5522     07F3  01E4               	clrf	_eusartTxTail^(0+256)	;volatile
  5523                           
  5524                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5525     07F4  3008               	movlw	8
  5526     07F5  0021               	movlb	1	; select bank1
  5527     07F6  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5528                           
  5529                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5530     07F7  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
  5531                           
  5532                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5533     07F8  0022               	movlb	2	; select bank2
  5534     07F9  01E3               	clrf	_eusartRxTail^(0+256)	;volatile
  5535                           
  5536                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5537     07FA  01E2               	clrf	_eusartRxCount^(0+256)	;volatile
  5538                           
  5539                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5540     07FB  0021               	movlb	1	; select bank1
  5541     07FC  1691               	bsf	17,5	;volatile
  5542     07FD  0008               	return
  5543     07FE                     __end_of_EUSART_Initialize:
  5544                           
  5545                           	psect	text12
  5546     1EE6                     __ptext12:	
  5547 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5548 ;; Defined at:
  5549 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5552 ;;		 -> EUSART_Transmit_ISR(1), 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg
  5559 ;; Tracked objects:
  5560 ;;		On entry : 1F/1
  5561 ;;		On exit  : 1F/2
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5564 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5568 ;;Total ram usage:        2 bytes
  5569 ;; Hardware stack levels used: 1
  5570 ;; Hardware stack levels required when called: 10
  5571 ;; This function calls:
  5572 ;;		Nothing
  5573 ;; This function is called by:
  5574 ;;		_EUSART_Initialize
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578     1EE6                     _EUSART_SetTxInterruptHandler:	
  5579                           ;psect for function _EUSART_SetTxInterruptHandler
  5580                           
  5581                           
  5582                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5583                           
  5584                           ;incstack = 0
  5585                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5586     1EE6  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5587     1EE7  0022               	movlb	2	; select bank2
  5588     1EE8  00C9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5589     1EE9  0021               	movlb	1	; select bank1
  5590     1EEA  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5591     1EEB  0022               	movlb	2	; select bank2
  5592     1EEC  00C8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5593     1EED  0008               	return
  5594     1EEE                     __end_of_EUSART_SetTxInterruptHandler:
  5595                           
  5596                           	psect	text13
  5597     1EDE                     __ptext13:	
  5598 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5599 ;; Defined at:
  5600 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5603 ;;		 -> EUSART_Receive_ISR(1), 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;		None
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg
  5610 ;; Tracked objects:
  5611 ;;		On entry : 1F/1
  5612 ;;		On exit  : 1F/2
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        2 bytes
  5620 ;; Hardware stack levels used: 1
  5621 ;; Hardware stack levels required when called: 10
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_EUSART_Initialize
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629     1EDE                     _EUSART_SetRxInterruptHandler:	
  5630                           ;psect for function _EUSART_SetRxInterruptHandler
  5631                           
  5632                           
  5633                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5634                           
  5635                           ;incstack = 0
  5636                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5637     1EDE  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5638     1EDF  0022               	movlb	2	; select bank2
  5639     1EE0  00C7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5640     1EE1  0021               	movlb	1	; select bank1
  5641     1EE2  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5642     1EE3  0022               	movlb	2	; select bank2
  5643     1EE4  00C6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5644     1EE5  0008               	return
  5645     1EE6                     __end_of_EUSART_SetRxInterruptHandler:
  5646                           
  5647                           	psect	text14
  5648     1ED6                     __ptext14:	
  5649 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5650 ;; Defined at:
  5651 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5654 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg
  5661 ;; Tracked objects:
  5662 ;;		On entry : 1F/1
  5663 ;;		On exit  : 1F/2
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5666 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5670 ;;Total ram usage:        2 bytes
  5671 ;; Hardware stack levels used: 1
  5672 ;; Hardware stack levels required when called: 10
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_EUSART_Initialize
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680     1ED6                     _EUSART_SetOverrunErrorHandler:	
  5681                           ;psect for function _EUSART_SetOverrunErrorHandler
  5682                           
  5683                           
  5684                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5685                           
  5686                           ;incstack = 0
  5687                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5688     1ED6  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5689     1ED7  0022               	movlb	2	; select bank2
  5690     1ED8  00C1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5691     1ED9  0021               	movlb	1	; select bank1
  5692     1EDA  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5693     1EDB  0022               	movlb	2	; select bank2
  5694     1EDC  00C0               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5695     1EDD  0008               	return
  5696     1EDE                     __end_of_EUSART_SetOverrunErrorHandler:
  5697                           
  5698                           	psect	text15
  5699     1ECE                     __ptext15:	
  5700 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5701 ;; Defined at:
  5702 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5705 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      void 
  5710 ;; Registers used:
  5711 ;;		wreg
  5712 ;; Tracked objects:
  5713 ;;		On entry : 1F/1
  5714 ;;		On exit  : 1F/2
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5717 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;Total ram usage:        2 bytes
  5722 ;; Hardware stack levels used: 1
  5723 ;; Hardware stack levels required when called: 10
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		_EUSART_Initialize
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731     1ECE                     _EUSART_SetFramingErrorHandler:	
  5732                           ;psect for function _EUSART_SetFramingErrorHandler
  5733                           
  5734                           
  5735                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5739     1ECE  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5740     1ECF  0022               	movlb	2	; select bank2
  5741     1ED0  00C3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5742     1ED1  0021               	movlb	1	; select bank1
  5743     1ED2  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5744     1ED3  0022               	movlb	2	; select bank2
  5745     1ED4  00C2               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5746     1ED5  0008               	return
  5747     1ED6                     __end_of_EUSART_SetFramingErrorHandler:
  5748                           
  5749                           	psect	text16
  5750     1EC6                     __ptext16:	
  5751 ;; *************** function _EUSART_SetErrorHandler *****************
  5752 ;; Defined at:
  5753 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5756 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;		None
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  1    wreg      void 
  5761 ;; Registers used:
  5762 ;;		wreg
  5763 ;; Tracked objects:
  5764 ;;		On entry : 1F/1
  5765 ;;		On exit  : 1F/2
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5768 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5772 ;;Total ram usage:        2 bytes
  5773 ;; Hardware stack levels used: 1
  5774 ;; Hardware stack levels required when called: 10
  5775 ;; This function calls:
  5776 ;;		Nothing
  5777 ;; This function is called by:
  5778 ;;		_EUSART_Initialize
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782     1EC6                     _EUSART_SetErrorHandler:	
  5783                           ;psect for function _EUSART_SetErrorHandler
  5784                           
  5785                           
  5786                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5787                           
  5788                           ;incstack = 0
  5789                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5790     1EC6  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5791     1EC7  0022               	movlb	2	; select bank2
  5792     1EC8  00BF               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5793     1EC9  0021               	movlb	1	; select bank1
  5794     1ECA  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5795     1ECB  0022               	movlb	2	; select bank2
  5796     1ECC  00BE               	movwf	_EUSART_ErrorHandler^(0+256)
  5797     1ECD  0008               	return
  5798     1ECE                     __end_of_EUSART_SetErrorHandler:
  5799                           
  5800                           	psect	text17
  5801     1195                     __ptext17:	
  5802 ;; *************** function _PS2Keyboard_Init *****************
  5803 ;; Defined at:
  5804 ;;		line 43 in file "ps2_keyboard.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;		None
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5813 ;; Tracked objects:
  5814 ;;		On entry : 1F/0
  5815 ;;		On exit  : 1F/2
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;Total ram usage:        0 bytes
  5823 ;; Hardware stack levels used: 1
  5824 ;; Hardware stack levels required when called: 11
  5825 ;; This function calls:
  5826 ;;		_GenericQueue_Init
  5827 ;;		_IOCAF4_SetInterruptHandler
  5828 ;;		_IOCAF5_SetInterruptHandler
  5829 ;; This function is called by:
  5830 ;;		_main
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834     1195                     _PS2Keyboard_Init:	
  5835                           ;psect for function _PS2Keyboard_Init
  5836                           
  5837                           
  5838                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5842     1195  3091               	movlw	145
  5843     1196  0021               	movlb	1	; select bank1
  5844     1197  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5845     1198  3023               	movlw	35
  5846     1199  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5847     119A  3003               	movlw	3
  5848     119B  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5849     119C  3000               	movlw	0
  5850     119D  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5851     119E  3192  2283  3191   	fcall	_GenericQueue_Init
  5852                           
  5853                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5854     11A1  3001               	movlw	low _PS2Keyboard_ClockInterrupt
  5855     11A2  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5856     11A3  3005               	movlw	high _PS2Keyboard_ClockInterrupt
  5857     11A4  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5858     11A5  319E  26B6  3191   	fcall	_IOCAF4_SetInterruptHandler
  5859                           
  5860                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5861     11A8  3082               	movlw	low _PS2Keyboard_DataInterrupt
  5862     11A9  0021               	movlb	1	; select bank1
  5863     11AA  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5864     11AB  301F               	movlw	high _PS2Keyboard_DataInterrupt
  5865     11AC  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5866     11AD  319E  26BE         	fcall	_IOCAF5_SetInterruptHandler
  5867     11AF  0008               	return
  5868     11B0                     __end_of_PS2Keyboard_Init:
  5869                           
  5870                           	psect	text18
  5871     1EBE                     __ptext18:	
  5872 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5873 ;; Defined at:
  5874 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5877 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;		None
  5880 ;; Return value:  Size  Location     Type
  5881 ;;                  1    wreg      void 
  5882 ;; Registers used:
  5883 ;;		wreg
  5884 ;; Tracked objects:
  5885 ;;		On entry : 1F/1
  5886 ;;		On exit  : 1F/2
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5889 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;Total ram usage:        2 bytes
  5894 ;; Hardware stack levels used: 1
  5895 ;; Hardware stack levels required when called: 10
  5896 ;; This function calls:
  5897 ;;		Nothing
  5898 ;; This function is called by:
  5899 ;;		_PIN_MANAGER_Initialize
  5900 ;;		_PS2Keyboard_Init
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904     1EBE                     _IOCAF5_SetInterruptHandler:	
  5905                           ;psect for function _IOCAF5_SetInterruptHandler
  5906                           
  5907                           
  5908                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5909                           
  5910                           ;incstack = 0
  5911                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5912     1EBE  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5913     1EBF  0022               	movlb	2	; select bank2
  5914     1EC0  00EC               	movwf	(_IOCAF5_InterruptHandler+1)^(0+256)
  5915     1EC1  0021               	movlb	1	; select bank1
  5916     1EC2  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5917     1EC3  0022               	movlb	2	; select bank2
  5918     1EC4  00EB               	movwf	_IOCAF5_InterruptHandler^(0+256)
  5919     1EC5  0008               	return
  5920     1EC6                     __end_of_IOCAF5_SetInterruptHandler:
  5921                           
  5922                           	psect	text19
  5923     1EB6                     __ptext19:	
  5924 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5925 ;; Defined at:
  5926 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5929 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;		None
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  1    wreg      void 
  5934 ;; Registers used:
  5935 ;;		wreg
  5936 ;; Tracked objects:
  5937 ;;		On entry : 1F/1
  5938 ;;		On exit  : 1F/2
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5941 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;Total ram usage:        2 bytes
  5946 ;; Hardware stack levels used: 1
  5947 ;; Hardware stack levels required when called: 10
  5948 ;; This function calls:
  5949 ;;		Nothing
  5950 ;; This function is called by:
  5951 ;;		_PIN_MANAGER_Initialize
  5952 ;;		_PS2Keyboard_Init
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956     1EB6                     _IOCAF4_SetInterruptHandler:	
  5957                           ;psect for function _IOCAF4_SetInterruptHandler
  5958                           
  5959                           
  5960                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5961                           
  5962                           ;incstack = 0
  5963                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5964     1EB6  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5965     1EB7  0022               	movlb	2	; select bank2
  5966     1EB8  00EE               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5967     1EB9  0021               	movlb	1	; select bank1
  5968     1EBA  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5969     1EBB  0022               	movlb	2	; select bank2
  5970     1EBC  00ED               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5971     1EBD  0008               	return
  5972     1EBE                     __end_of_IOCAF4_SetInterruptHandler:
  5973                           
  5974                           	psect	text20
  5975     1283                     __ptext20:	
  5976 ;; *************** function _GenericQueue_Init *****************
  5977 ;; Defined at:
  5978 ;;		line 4 in file "generic_queue.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  q               2    0[BANK1 ] PTR struct .
  5981 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5982 ;;  element_size    2    2[BANK1 ] unsigned int 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  1    wreg      void 
  5987 ;; Registers used:
  5988 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 1F/1
  5991 ;;		On exit  : 1F/1
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5994 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5998 ;;Total ram usage:        4 bytes
  5999 ;; Hardware stack levels used: 1
  6000 ;; Hardware stack levels required when called: 10
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_PS2Keyboard_Init
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008     1283                     _GenericQueue_Init:	
  6009                           ;psect for function _GenericQueue_Init
  6010                           
  6011                           
  6012                           ;generic_queue.c: 5:     q->element_size = element_size;
  6013                           
  6014                           ;incstack = 0
  6015                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  6016     1283  0828               	movf	GenericQueue_Init@q^(0+128),w
  6017     1284  3E5A               	addlw	90
  6018     1285  0086               	movwf	6
  6019     1286  3000               	movlw	0
  6020     1287  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6021     1288  0087               	movwf	7
  6022     1289  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  6023     128A  3FC0               	movwi [0]fsr1
  6024     128B  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  6025     128C  3FC1               	movwi [1]fsr1
  6026                           
  6027                           ;generic_queue.c: 6:     q->front = 0;
  6028     128D  0828               	movf	GenericQueue_Init@q^(0+128),w
  6029     128E  3E5C               	addlw	92
  6030     128F  0086               	movwf	6
  6031     1290  3000               	movlw	0
  6032     1291  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6033     1292  0087               	movwf	7
  6034     1293  0181               	clrf	1
  6035                           
  6036                           ;generic_queue.c: 7:     q->rear = 0;
  6037     1294  0828               	movf	GenericQueue_Init@q^(0+128),w
  6038     1295  3E5D               	addlw	93
  6039     1296  0086               	movwf	6
  6040     1297  3000               	movlw	0
  6041     1298  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6042     1299  0087               	movwf	7
  6043     129A  0181               	clrf	1
  6044                           
  6045                           ;generic_queue.c: 8:     q->size = 0;
  6046     129B  0828               	movf	GenericQueue_Init@q^(0+128),w
  6047     129C  3E5E               	addlw	94
  6048     129D  0086               	movwf	6
  6049     129E  3000               	movlw	0
  6050     129F  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6051     12A0  0087               	movwf	7
  6052     12A1  0181               	clrf	1
  6053     12A2  0008               	return
  6054     12A3                     __end_of_GenericQueue_Init:
  6055                           
  6056                           	psect	text21
  6057     11CC                     __ptext21:	
  6058 ;; *************** function _PS2Keyboard_GetScanCode *****************
  6059 ;; Defined at:
  6060 ;;		line 49 in file "ps2_keyboard.c"
  6061 ;; Parameters:    Size  Location     Type
  6062 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  6063 ;;		 -> main@scanCode(3), 
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  6066 ;;		 -> main@scanCode(3), 
  6067 ;;  ret             1   32[BANK1 ] _Bool 
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      _Bool 
  6070 ;; Registers used:
  6071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6072 ;; Tracked objects:
  6073 ;;		On entry : 2/1
  6074 ;;		On exit  : 1F/1
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;Total ram usage:        2 bytes
  6082 ;; Hardware stack levels used: 1
  6083 ;; Hardware stack levels required when called: 12
  6084 ;; This function calls:
  6085 ;;		_GenericQueue_Dequeue
  6086 ;;		_GenericQueue_IsEmpty
  6087 ;; This function is called by:
  6088 ;;		_main
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092     11CC                     _PS2Keyboard_GetScanCode:	
  6093                           ;psect for function _PS2Keyboard_GetScanCode
  6094                           
  6095                           
  6096                           ;incstack = 0
  6097                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6098                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  6099     11CC  0021               	movlb	1	; select bank1
  6100     11CD  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  6101                           
  6102                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  6103     11CE  3091               	movlw	145
  6104     11CF  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6105     11D0  3023               	movlw	35
  6106     11D1  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  6107     11D2  319F  27C5  3191   	fcall	_GenericQueue_IsEmpty
  6108     11D5  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6109     11D6  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6110     11D7  1D03               	btfss	3,2
  6111     11D8  29E5               	goto	l5622
  6112                           
  6113                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  6114     11D9  3091               	movlw	145
  6115     11DA  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  6116     11DB  3023               	movlw	35
  6117     11DC  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  6118     11DD  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  6119     11DE  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  6120     11DF  3189  2143  3191   	fcall	_GenericQueue_Dequeue
  6121                           
  6122                           ;ps2_keyboard.c: 53:         ret = 1;
  6123     11E2  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6124     11E3  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  6125                           
  6126                           ;ps2_keyboard.c: 54:     } else {
  6127     11E4  29E6               	goto	l5624
  6128     11E5                     l5622:
  6129                           
  6130                           ;ps2_keyboard.c: 55:         ret = 0;
  6131     11E5  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6132     11E6                     l5624:
  6133                           
  6134                           ;ps2_keyboard.c: 57:     return ret;
  6135     11E6  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  6136     11E7  0008               	return
  6137     11E8                     __end_of_PS2Keyboard_GetScanCode:
  6138                           
  6139                           	psect	text22
  6140     0943                     __ptext22:	
  6141 ;; *************** function _GenericQueue_Dequeue *****************
  6142 ;; Defined at:
  6143 ;;		line 27 in file "generic_queue.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;  q               2   24[BANK1 ] PTR struct .
  6146 ;;		 -> keyboardScanCodeQueue(95), 
  6147 ;;  item            1   26[BANK1 ] PTR void 
  6148 ;;		 -> main@scanCode(3), 
  6149 ;; Auto vars:     Size  Location     Type
  6150 ;;		None
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  1    wreg      void 
  6153 ;; Registers used:
  6154 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 1F/1
  6157 ;;		On exit  : 1F/1
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6160 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;Total ram usage:        7 bytes
  6165 ;; Hardware stack levels used: 1
  6166 ;; Hardware stack levels required when called: 11
  6167 ;; This function calls:
  6168 ;;		_GenericQueue_IsEmpty
  6169 ;;		___awmod
  6170 ;;		___wmul
  6171 ;;		_memcpy
  6172 ;; This function is called by:
  6173 ;;		_PS2Keyboard_GetScanCode
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177     0943                     _GenericQueue_Dequeue:	
  6178                           ;psect for function _GenericQueue_Dequeue
  6179                           
  6180                           
  6181                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6185     0943  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  6186     0944  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  6187     0945  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6188     0946  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6189     0947  319F  27C5  3189   	fcall	_GenericQueue_IsEmpty
  6190     094A  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6191     094B  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6192     094C  1D03               	btfss	3,2
  6193     094D  0008               	return
  6194                           
  6195                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  6196     094E  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  6197     094F  00B5               	movwf	memcpy@d1^(0+128)
  6198     0950  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6199     0951  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6200     0952  3E5C               	addlw	92
  6201     0953  0086               	movwf	6
  6202     0954  3000               	movlw	0
  6203     0955  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6204     0956  0087               	movwf	7
  6205     0957  0801               	movf	1,w
  6206     0958  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6207     0959  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  6208     095A  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6209     095B  00AF               	movwf	___wmul@multiplier^(0+128)
  6210     095C  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6211     095D  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6212     095E  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6213     095F  3E5A               	addlw	90
  6214     0960  0086               	movwf	6
  6215     0961  3000               	movlw	0
  6216     0962  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6217     0963  0087               	movwf	7
  6218     0964  3F40               	moviw [0]fsr1
  6219     0965  00B1               	movwf	___wmul@multiplicand^(0+128)
  6220     0966  3F41               	moviw [1]fsr1
  6221     0967  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6222     0968  3191  215F  3189   	fcall	___wmul
  6223     096B  082F               	movf	?___wmul^(0+128),w
  6224     096C  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  6225     096D  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6226     096E  0830               	movf	(?___wmul+1)^(0+128),w
  6227     096F  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6228     0970  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  6229     0971  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6230     0972  00B7               	movwf	memcpy@s1^(0+128)
  6231     0973  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  6232     0974  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6233     0975  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6234     0976  3E5A               	addlw	90
  6235     0977  0086               	movwf	6
  6236     0978  3000               	movlw	0
  6237     0979  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6238     097A  0087               	movwf	7
  6239     097B  3F40               	moviw [0]fsr1
  6240     097C  00B9               	movwf	memcpy@n^(0+128)
  6241     097D  3F41               	moviw [1]fsr1
  6242     097E  00BA               	movwf	(memcpy@n+1)^(0+128)
  6243     097F  3193  2333  3189   	fcall	_memcpy
  6244                           
  6245                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  6246     0982  300F               	movlw	15
  6247     0983  00A8               	movwf	___awmod@divisor^(0+128)
  6248     0984  3000               	movlw	0
  6249     0985  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6250     0986  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6251     0987  3E5C               	addlw	92
  6252     0988  0086               	movwf	6
  6253     0989  3000               	movlw	0
  6254     098A  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6255     098B  0087               	movwf	7
  6256     098C  0801               	movf	1,w
  6257     098D  3E01               	addlw	1
  6258     098E  00AA               	movwf	___awmod@dividend^(0+128)
  6259     098F  3000               	movlw	0
  6260     0990  1803               	skipnc
  6261     0991  3001               	movlw	1
  6262     0992  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6263     0993  3194  24F5         	fcall	___awmod
  6264     0995  0828               	movf	?___awmod^(0+128),w
  6265     0996  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6266     0997  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6267     0998  3E5C               	addlw	92
  6268     0999  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  6269     099A  3000               	movlw	0
  6270     099B  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6271     099C  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6272     099D  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6273     099E  0086               	movwf	6
  6274     099F  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6275     09A0  0087               	movwf	7
  6276     09A1  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6277     09A2  0081               	movwf	1
  6278                           
  6279                           ;generic_queue.c: 31:         q->size--;
  6280     09A3  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6281     09A4  3E5E               	addlw	94
  6282     09A5  0086               	movwf	6
  6283     09A6  3000               	movlw	0
  6284     09A7  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6285     09A8  0087               	movwf	7
  6286     09A9  3001               	movlw	1
  6287     09AA  0281               	subwf	1,f
  6288     09AB  0008               	return
  6289     09AC                     __end_of_GenericQueue_Dequeue:
  6290                           
  6291                           	psect	text23
  6292     12E8                     __ptext23:	
  6293 ;; *************** function _Log_UtilityConvertByteToHex *****************
  6294 ;; Defined at:
  6295 ;;		line 14 in file "log.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  byte            1    wreg     unsigned char 
  6298 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  6299 ;;		 -> main@scanCodeStr(6), 
  6300 ;;  bufSize         1    5[BANK1 ] unsigned char 
  6301 ;; Auto vars:     Size  Location     Type
  6302 ;;  byte            1    8[BANK1 ] unsigned char 
  6303 ;;  d1              1    9[BANK1 ] unsigned char 
  6304 ;;  d0              1    7[BANK1 ] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      void 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 1F/1
  6311 ;;		On exit  : 1F/1
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        6 bytes
  6319 ;; Hardware stack levels used: 1
  6320 ;; Hardware stack levels required when called: 11
  6321 ;; This function calls:
  6322 ;;		___bmul
  6323 ;;		_hex2str
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329     12E8                     _Log_UtilityConvertByteToHex:	
  6330                           ;psect for function _Log_UtilityConvertByteToHex
  6331                           
  6332                           
  6333                           ;incstack = 0
  6334                           ; Regs used in _Log_UtilityConvertByteToHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6335                           ;Log_UtilityConvertByteToHex@byte stored from wreg
  6336     12E8  00B0               	movwf	Log_UtilityConvertByteToHex@byte^(0+128)
  6337                           
  6338                           ;log.c: 15:     if (bufSize < 2) {
  6339     12E9  3002               	movlw	2
  6340     12EA  022D               	subwf	Log_UtilityConvertByteToHex@bufSize^(0+128),w
  6341     12EB  1C03               	btfss	3,0
  6342     12EC  0008               	return
  6343                           
  6344                           ;log.c: 18:     uint8_t d1 = byte / 16;
  6345     12ED  0830               	movf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6346     12EE  00AE               	movwf	??_Log_UtilityConvertByteToHex^(0+128)
  6347     12EF  3004               	movlw	4
  6348     12F0                     u5295:
  6349     12F0  36AE               	lsrf	??_Log_UtilityConvertByteToHex^(0+128),f
  6350     12F1  0B89               	decfsz	9,f
  6351     12F2  2AF0               	goto	u5295
  6352     12F3  082E               	movf	??_Log_UtilityConvertByteToHex^(0+128),w
  6353     12F4  00B1               	movwf	Log_UtilityConvertByteToHex@d1^(0+128)
  6354                           
  6355                           ;log.c: 19:     uint8_t d0 = byte - d1 * 16;
  6356     12F5  30F0               	movlw	240
  6357     12F6  00A8               	movwf	___bmul@multiplicand^(0+128)
  6358     12F7  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6359     12F8  319F  2792  3192   	fcall	___bmul
  6360     12FB  0730               	addwf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6361     12FC  00AF               	movwf	Log_UtilityConvertByteToHex@d0^(0+128)
  6362                           
  6363                           ;log.c: 20:     buf[0] = hex2str(d1);
  6364     12FD  082C               	movf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6365     12FE  0086               	movwf	6
  6366     12FF  0187               	clrf	7
  6367     1300  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6368     1301  319F  27A3  3192   	fcall	_hex2str
  6369     1304  0081               	movwf	1
  6370                           
  6371                           ;log.c: 21:     buf[1] = hex2str(d0);
  6372     1305  0A2C               	incf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6373     1306  0086               	movwf	6
  6374     1307  0187               	clrf	7
  6375     1308  082F               	movf	Log_UtilityConvertByteToHex@d0^(0+128),w
  6376     1309  319F  27A3         	fcall	_hex2str
  6377     130B  0081               	movwf	1
  6378     130C  0008               	return
  6379     130D                     __end_of_Log_UtilityConvertByteToHex:
  6380                           
  6381                           	psect	text24
  6382     1FA3                     __ptext24:	
  6383 ;; *************** function _hex2str *****************
  6384 ;; Defined at:
  6385 ;;		line 4 in file "log.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  val             1    wreg     unsigned char 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  val             1    0[BANK1 ] unsigned char 
  6390 ;; Return value:  Size  Location     Type
  6391 ;;                  1    wreg      unsigned char 
  6392 ;; Registers used:
  6393 ;;		wreg, status,2, status,0
  6394 ;; Tracked objects:
  6395 ;;		On entry : 1F/1
  6396 ;;		On exit  : 1F/1
  6397 ;;		Unchanged: 0/0
  6398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;Total ram usage:        1 bytes
  6404 ;; Hardware stack levels used: 1
  6405 ;; Hardware stack levels required when called: 10
  6406 ;; This function calls:
  6407 ;;		Nothing
  6408 ;; This function is called by:
  6409 ;;		_Log_UtilityConvertByteToHex
  6410 ;; This function uses a non-reentrant model
  6411 ;;
  6412                           
  6413     1FA3                     _hex2str:	
  6414                           ;psect for function _hex2str
  6415                           
  6416                           
  6417                           ;incstack = 0
  6418                           ; Regs used in _hex2str: [wreg+status,2+status,0]
  6419                           ;hex2str@val stored from wreg
  6420     1FA3  00A8               	movwf	hex2str@val^(0+128)
  6421                           
  6422                           ;log.c: 5:     if (val < 10) {
  6423     1FA4  300A               	movlw	10
  6424     1FA5  0228               	subwf	hex2str@val^(0+128),w
  6425     1FA6  1803               	skipnc
  6426     1FA7  2FAB               	goto	l5352
  6427                           
  6428                           ;log.c: 6:         return val + '0';
  6429     1FA8  0828               	movf	hex2str@val^(0+128),w
  6430     1FA9  3E30               	addlw	48
  6431     1FAA  0008               	return
  6432     1FAB                     l5352:
  6433     1FAB  3010               	movlw	16
  6434     1FAC  0228               	subwf	hex2str@val^(0+128),w
  6435     1FAD  1803               	skipnc
  6436     1FAE  2FB2               	goto	l5360
  6437                           
  6438                           ;log.c: 8:         return val - 10 + 'A';
  6439     1FAF  0828               	movf	hex2str@val^(0+128),w
  6440     1FB0  3E37               	addlw	55
  6441     1FB1  0008               	return
  6442     1FB2                     l5360:
  6443                           
  6444                           ;log.c: 10:         return 'X';
  6445     1FB2  3058               	movlw	88
  6446     1FB3  0008               	return
  6447     1FB4                     __end_of_hex2str:
  6448                           
  6449                           	psect	text25
  6450     117A                     __ptext25:	
  6451 ;; *************** function _Log_Message *****************
  6452 ;; Defined at:
  6453 ;;		line 24 in file "log.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  buf             1    wreg     PTR const unsigned char 
  6456 ;;		 -> main@scanCodeStr(6), 
  6457 ;;  bufSize         1    2[BANK1 ] unsigned char 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  buf             1    4[BANK1 ] PTR const unsigned char 
  6460 ;;		 -> main@scanCodeStr(6), 
  6461 ;;  i               1    5[BANK1 ] unsigned char 
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 1F/1
  6468 ;;		On exit  : 1F/1
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6471 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;Total ram usage:        4 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 11
  6478 ;; This function calls:
  6479 ;;		_EUSART_Write
  6480 ;;		_EUSART_is_tx_ready
  6481 ;; This function is called by:
  6482 ;;		_main
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486     117A                     _Log_Message:	
  6487                           ;psect for function _Log_Message
  6488                           
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _Log_Message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6492                           ;Log_Message@buf stored from wreg
  6493     117A  00AC               	movwf	Log_Message@buf^(0+128)
  6494                           
  6495                           ;log.c: 25:     for (uint8_t i = 0; i < bufSize; i++) {
  6496     117B  01AD               	clrf	Log_Message@i^(0+128)
  6497     117C                     l5648:
  6498     117C  082A               	movf	Log_Message@bufSize^(0+128),w
  6499     117D  022D               	subwf	Log_Message@i^(0+128),w
  6500     117E  1803               	btfsc	3,0
  6501     117F  0008               	return
  6502     1180                     l5642:
  6503     1180  319E  26AF  3191   	fcall	_EUSART_is_tx_ready
  6504     1183  3A00               	xorlw	0
  6505     1184  1903               	skipnz
  6506     1185  2980               	goto	l5642
  6507                           
  6508                           ;log.c: 27:         EUSART_Write(buf[i]);
  6509     1186  082D               	movf	Log_Message@i^(0+128),w
  6510     1187  072C               	addwf	Log_Message@buf^(0+128),w
  6511     1188  00AB               	movwf	??_Log_Message^(0+128)
  6512     1189  082B               	movf	??_Log_Message^(0+128),w
  6513     118A  0086               	movwf	6
  6514     118B  0187               	clrf	7
  6515     118C  0801               	movf	1,w
  6516     118D  3192  22C5  3191   	fcall	_EUSART_Write
  6517                           
  6518                           ;log.c: 28:     }
  6519     1190  3001               	movlw	1
  6520     1191  00AB               	movwf	??_Log_Message^(0+128)
  6521     1192  082B               	movf	??_Log_Message^(0+128),w
  6522     1193  07AD               	addwf	Log_Message@i^(0+128),f
  6523     1194  297C               	goto	l5648
  6524     1195                     __end_of_Log_Message:
  6525                           
  6526                           	psect	text26
  6527     1EAF                     __ptext26:	
  6528 ;; *************** function _EUSART_is_tx_ready *****************
  6529 ;; Defined at:
  6530 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      _Bool 
  6537 ;; Registers used:
  6538 ;;		wreg, status,2, status,0
  6539 ;; Tracked objects:
  6540 ;;		On entry : 1F/1
  6541 ;;		On exit  : 1F/1
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used: 1
  6550 ;; Hardware stack levels required when called: 10
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_Log_Message
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558     1EAF                     _EUSART_is_tx_ready:	
  6559                           ;psect for function _EUSART_is_tx_ready
  6560                           
  6561                           
  6562                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  6563                           
  6564                           ;incstack = 0
  6565                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  6566     1EAF  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6567     1EB0  1903               	btfsc	3,2
  6568     1EB1  2EB4               	goto	u4440
  6569     1EB2  3001               	movlw	1
  6570     1EB3  0008               	return
  6571     1EB4                     u4440:
  6572     1EB4  3000               	movlw	0
  6573     1EB5  0008               	return
  6574     1EB6                     __end_of_EUSART_is_tx_ready:
  6575                           
  6576                           	psect	text27
  6577     12C5                     __ptext27:	
  6578 ;; *************** function _EUSART_Write *****************
  6579 ;; Defined at:
  6580 ;;		line 173 in file "mcc_generated_files/eusart.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;  txData          1    wreg     unsigned char 
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;  txData          1    1[BANK1 ] unsigned char 
  6585 ;; Return value:  Size  Location     Type
  6586 ;;                  1    wreg      void 
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6589 ;; Tracked objects:
  6590 ;;		On entry : 1F/1
  6591 ;;		On exit  : 1F/1
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;Total ram usage:        2 bytes
  6599 ;; Hardware stack levels used: 1
  6600 ;; Hardware stack levels required when called: 10
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_Log_Message
  6605 ;; This function uses a non-reentrant model
  6606 ;;
  6607                           
  6608     12C5                     _EUSART_Write:	
  6609                           ;psect for function _EUSART_Write
  6610                           
  6611                           
  6612                           ;incstack = 0
  6613                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6614                           ;EUSART_Write@txData stored from wreg
  6615     12C5  00A9               	movwf	EUSART_Write@txData^(0+128)
  6616     12C6                     l5114:	
  6617                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  6618                           
  6619                           
  6620                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  6621     12C6  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6622     12C7  1903               	btfsc	3,2
  6623     12C8  2AC6               	goto	l5114
  6624                           
  6625                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  6626     12C9  1A11               	btfsc	17,4	;volatile
  6627     12CA  2ACF               	goto	l299
  6628                           
  6629                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  6630     12CB  0829               	movf	EUSART_Write@txData^(0+128),w
  6631     12CC  0023               	movlb	3	; select bank3
  6632     12CD  009A               	movwf	26	;volatile
  6633                           
  6634                           ;mcc_generated_files/eusart.c: 182:     }
  6635     12CE  2AE5               	goto	l5128
  6636     12CF                     l299:	
  6637                           ;mcc_generated_files/eusart.c: 183:     else
  6638                           
  6639                           
  6640                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  6641     12CF  1211               	bcf	17,4	;volatile
  6642                           
  6643                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  6644     12D0  0022               	movlb	2	; select bank2
  6645     12D1  0865               	movf	_eusartTxHead^(0+256),w
  6646     12D2  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6647     12D3  0086               	movwf	6
  6648     12D4  3001               	movlw	1	; select bank3/4
  6649     12D5  0087               	movwf	7
  6650     12D6  0021               	movlb	1	; select bank1
  6651     12D7  0829               	movf	EUSART_Write@txData^(0+128),w
  6652     12D8  0081               	movwf	1
  6653     12D9  3001               	movlw	1
  6654     12DA  00A8               	movwf	??_EUSART_Write^(0+128)
  6655     12DB  0828               	movf	??_EUSART_Write^(0+128),w
  6656     12DC  0022               	movlb	2	; select bank2
  6657     12DD  07E5               	addwf	_eusartTxHead^(0+256),f	;volatile
  6658                           
  6659                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6660     12DE  3008               	movlw	8
  6661     12DF  0265               	subwf	_eusartTxHead^(0+256),w
  6662     12E0  1803               	btfsc	3,0
  6663                           
  6664                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  6665     12E1  01E5               	clrf	_eusartTxHead^(0+256)	;volatile
  6666                           
  6667                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  6668     12E2  3001               	movlw	1
  6669     12E3  0021               	movlb	1	; select bank1
  6670     12E4  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6671     12E5                     l5128:
  6672                           
  6673                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  6674     12E5  0021               	movlb	1	; select bank1
  6675     12E6  1611               	bsf	17,4	;volatile
  6676     12E7  0008               	return
  6677     12E8                     __end_of_EUSART_Write:
  6678                           
  6679                           	psect	text28
  6680     02F2                     __ptext28:	
  6681 ;; *************** function _APP_KeyboardTasks *****************
  6682 ;; Defined at:
  6683 ;;		line 334 in file "app_device_keyboard.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6686 ;;		 -> main@scanCode(3), NULL(0), 
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  6689 ;;		 -> main@scanCode(3), NULL(0), 
  6690 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  6691 ;;  i               1   47[BANK1 ] unsigned char 
  6692 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  6693 ;; Return value:  Size  Location     Type
  6694 ;;                  1    wreg      void 
  6695 ;; Registers used:
  6696 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6697 ;; Tracked objects:
  6698 ;;		On entry : 1F/1
  6699 ;;		On exit  : 2/0
  6700 ;;		Unchanged: 0/0
  6701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;Total ram usage:        7 bytes
  6707 ;; Hardware stack levels used: 1
  6708 ;; Hardware stack levels required when called: 13
  6709 ;; This function calls:
  6710 ;;		_APP_KeyboardProcessOutputReport
  6711 ;;		_APP_KeyboardUpdateState
  6712 ;;		_GenericQueue_CopyToArray
  6713 ;;		_USBTransferOnePacket
  6714 ;;		_memset
  6715 ;; This function is called by:
  6716 ;;		_main
  6717 ;; This function uses a non-reentrant model
  6718 ;;
  6719                           
  6720     02F2                     _APP_KeyboardTasks:	
  6721                           ;psect for function _APP_KeyboardTasks
  6722                           
  6723                           
  6724                           ;incstack = 0
  6725                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6726                           ;APP_KeyboardTasks@scanCode stored from wreg
  6727     02F2  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6728                           
  6729                           ;app_device_keyboard.c: 335:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 336:     unsigned char i;;app_device_keyboard.c: 337:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 340:     APP_KeyboardUpdateState(scanCode);
  6730     02F3  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6731     02F4  3180  2087  3182   	fcall	_APP_KeyboardUpdateState
  6732                           
  6733                           ;app_device_keyboard.c: 345:     if (USBDeviceState < CONFIGURED_STATE) {
  6734     02F7  3020               	movlw	32
  6735     02F8  0020               	movlb	0	; select bank0
  6736     02F9  026C               	subwf	_USBDeviceState,w
  6737     02FA  1C03               	btfss	3,0
  6738     02FB  0008               	return
  6739                           
  6740                           ;app_device_keyboard.c: 353:     if (UCONbits.SUSPND == 1) {
  6741                           
  6742                           ;app_device_keyboard.c: 347:     }
  6743     02FC  003D               	movlb	29	; select bank29
  6744     02FD  188E               	btfsc	14,1	;volatile
  6745     02FE  0008               	return
  6746     02FF                     l923:	
  6747                           ;app_device_keyboard.c: 369:     }
  6748                           
  6749                           
  6750                           ;app_device_keyboard.c: 367:     while (LocalSOFCount != SOFCounter) {
  6751     02FF  0020               	movlb	0	; select bank0
  6752     0300  0866               	movf	_SOFCounter+1,w	;volatile
  6753     0301  0022               	movlb	2	; select bank2
  6754     0302  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6755     0303  1D03               	skipz
  6756     0304  2B09               	goto	u6125
  6757     0305  0020               	movlb	0	; select bank0
  6758     0306  0865               	movf	_SOFCounter,w	;volatile
  6759     0307  0022               	movlb	2	; select bank2
  6760     0308  0636               	xorwf	_LocalSOFCount^(0+256),w
  6761     0309                     u6125:
  6762     0309  1903               	btfsc	3,2
  6763     030A  2B14               	goto	l6052
  6764                           
  6765                           ;app_device_keyboard.c: 368:         LocalSOFCount = SOFCounter;
  6766     030B  0020               	movlb	0	; select bank0
  6767     030C  0866               	movf	_SOFCounter+1,w	;volatile
  6768     030D  0022               	movlb	2	; select bank2
  6769     030E  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6770     030F  0020               	movlb	0	; select bank0
  6771     0310  0865               	movf	_SOFCounter,w	;volatile
  6772     0311  0022               	movlb	2	; select bank2
  6773     0312  00B6               	movwf	_LocalSOFCount^(0+256)
  6774     0313  2AFF               	goto	l923
  6775     0314                     l6052:
  6776                           
  6777                           ;app_device_keyboard.c: 373:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6778     0314  0834               	movf	_OldSOFCount^(0+256),w
  6779     0315  0236               	subwf	_LocalSOFCount^(0+256),w
  6780     0316  0021               	movlb	1	; select bank1
  6781     0317  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6782     0318  0022               	movlb	2	; select bank2
  6783     0319  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6784     031A  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6785     031B  0021               	movlb	1	; select bank1
  6786     031C  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6787                           
  6788                           ;app_device_keyboard.c: 375:     if (TimeDeltaMilliseconds < 0) {
  6789     031D  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6790     031E  2B2F               	goto	l6058
  6791                           
  6792                           ;app_device_keyboard.c: 376:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6793     031F  0022               	movlb	2	; select bank2
  6794     0320  0834               	movf	_OldSOFCount^(0+256),w
  6795     0321  0236               	subwf	_LocalSOFCount^(0+256),w
  6796     0322  0021               	movlb	1	; select bank1
  6797     0323  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6798     0324  0022               	movlb	2	; select bank2
  6799     0325  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6800     0326  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6801     0327  0021               	movlb	1	; select bank1
  6802     0328  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6803     0329  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6804     032A  3EFF               	addlw	255
  6805     032B  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6806     032C  307F               	movlw	127
  6807     032D  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6808     032E  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6809     032F                     l6058:
  6810                           
  6811                           ;app_device_keyboard.c: 383:     if (TimeDeltaMilliseconds > 5000) {
  6812     032F  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6813     0330  3A80               	xorlw	128
  6814     0331  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6815     0332  3093               	movlw	147
  6816     0333  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6817     0334  1D03               	skipz
  6818     0335  2B38               	goto	u6145
  6819     0336  3089               	movlw	137
  6820     0337  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6821     0338                     u6145:
  6822     0338  1C03               	skipc
  6823     0339  2B41               	goto	l6062
  6824                           
  6825                           ;app_device_keyboard.c: 384:         OldSOFCount = LocalSOFCount - 5000;
  6826     033A  0022               	movlb	2	; select bank2
  6827     033B  0836               	movf	_LocalSOFCount^(0+256),w
  6828     033C  3E78               	addlw	120
  6829     033D  00B4               	movwf	_OldSOFCount^(0+256)
  6830     033E  30EC               	movlw	236
  6831     033F  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6832     0340  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6833     0341                     l6062:
  6834                           
  6835                           ;app_device_keyboard.c: 390:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6836     0341  302C               	movlw	44
  6837     0342  0086               	movwf	6
  6838     0343  3023               	movlw	35
  6839     0344  0087               	movwf	7
  6840     0345  0016               	moviw fsr1++
  6841     0346  0401               	iorwf	1,w
  6842     0347  1903               	btfsc	3,2
  6843     0348  2B58               	goto	l6066
  6844     0349  302C               	movlw	44
  6845     034A  0086               	movwf	6
  6846     034B  3023               	movlw	35
  6847     034C  0087               	movwf	7
  6848     034D  3F40               	moviw [0]fsr1
  6849     034E  0021               	movlb	1	; select bank1
  6850     034F  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6851     0350  3F41               	moviw [1]fsr1
  6852     0351  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6853     0352  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6854     0353  0086               	movwf	6
  6855     0354  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6856     0355  0087               	movwf	7
  6857     0356  1B81               	btfsc	1,7
  6858     0357  2BD1               	goto	l6100
  6859     0358                     l6066:
  6860                           
  6861                           ;app_device_keyboard.c: 392:         memset(&inputReport, 0, sizeof (inputReport));
  6862     0358  3000               	movlw	0
  6863     0359  0021               	movlb	1	; select bank1
  6864     035A  00A8               	movwf	memset@c^(0+128)
  6865     035B  00A9               	movwf	(memset@c+1)^(0+128)
  6866     035C  3008               	movlw	8
  6867     035D  00AA               	movwf	memset@n^(0+128)
  6868     035E  3000               	movlw	0
  6869     035F  00AB               	movwf	(memset@n^(0+128)+1)
  6870     0360  30A0               	movlw	160
  6871     0361  3190  20B4  3182   	fcall	_memset
  6872                           
  6873                           ;app_device_keyboard.c: 394:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6874     0364  3030               	movlw	48
  6875     0365  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6876     0366  3023               	movlw	35
  6877     0367  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6878     0368  30A2               	movlw	162
  6879     0369  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6880     036A  3196  26D0  3182   	fcall	_GenericQueue_CopyToArray
  6881                           
  6882                           ;app_device_keyboard.c: 395:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6883     036D  308F               	movlw	143
  6884     036E  0086               	movwf	6
  6885     036F  3023               	movlw	35
  6886     0370  0087               	movwf	7
  6887     0371  0801               	movf	1,w
  6888     0372  00A0               	movwf	32
  6889                           
  6890                           ;app_device_keyboard.c: 398:         needToSendNewReportPacket = 0;
  6891     0373  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6892                           
  6893                           ;app_device_keyboard.c: 399:         for (i = 0; i < sizeof (inputReport); i++) {
  6894     0374  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6895     0375                     l6078:
  6896                           
  6897                           ;app_device_keyboard.c: 400:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6898     0375  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6899     0376  3EA0               	addlw	160
  6900     0377  0086               	movwf	6
  6901     0378  0187               	clrf	7
  6902     0379  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6903     037A  3EA0               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6904     037B  0084               	movwf	4
  6905     037C  3001               	movlw	1	; select bank3/4
  6906     037D  0085               	movwf	5
  6907     037E  0800               	movf	0,w
  6908     037F  0601               	xorwf	1,w
  6909     0380  1903               	skipnz
  6910     0381  2B85               	goto	l6082
  6911                           
  6912                           ;app_device_keyboard.c: 401:                 needToSendNewReportPacket = 1;
  6913     0382  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6914     0383  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6915                           
  6916                           ;app_device_keyboard.c: 402:                 break;
  6917     0384  2B8D               	goto	l6086
  6918     0385                     l6082:
  6919                           
  6920                           ;app_device_keyboard.c: 404:         }
  6921     0385  3001               	movlw	1
  6922     0386  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6923     0387  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6924     0388  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6925     0389  3008               	movlw	8
  6926     038A  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6927     038B  1C03               	skipc
  6928     038C  2B75               	goto	l6078
  6929     038D                     l6086:
  6930                           
  6931                           ;app_device_keyboard.c: 409:         if (keyboardIdleRate != 0) {
  6932     038D  0022               	movlb	2	; select bank2
  6933     038E  0838               	movf	_keyboardIdleRate^(0+256),w
  6934     038F  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6935     0390  1903               	btfsc	3,2
  6936     0391  2BA6               	goto	l6092
  6937                           
  6938                           ;app_device_keyboard.c: 411:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6939     0392  0021               	movlb	1	; select bank1
  6940     0393  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6941     0394  3A80               	xorlw	128
  6942     0395  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6943     0396  0022               	movlb	2	; select bank2
  6944     0397  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6945     0398  3A80               	xorlw	128
  6946     0399  0021               	movlb	1	; select bank1
  6947     039A  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6948     039B  1D03               	skipz
  6949     039C  2BA1               	goto	u6205
  6950     039D  0022               	movlb	2	; select bank2
  6951     039E  0838               	movf	_keyboardIdleRate^(0+256),w
  6952     039F  0021               	movlb	1	; select bank1
  6953     03A0  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6954     03A1                     u6205:
  6955     03A1  1C03               	skipc
  6956     03A2  2BA6               	goto	l6092
  6957                           
  6958                           ;app_device_keyboard.c: 412:                 needToSendNewReportPacket = 1;
  6959     03A3  0021               	movlb	1	; select bank1
  6960     03A4  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6961     03A5  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6962     03A6                     l6092:
  6963                           
  6964                           ;app_device_keyboard.c: 418:         if (needToSendNewReportPacket == 1) {
  6965     03A6  0021               	movlb	1	; select bank1
  6966     03A7  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6967     03A8  1D03               	btfss	3,2
  6968     03A9  2BD1               	goto	l6100
  6969                           
  6970                           ;app_device_keyboard.c: 422:             oldInputReport = inputReport;
  6971     03AA  30A0               	movlw	160
  6972     03AB  0086               	movwf	6
  6973     03AC  3000               	movlw	0
  6974     03AD  0087               	movwf	7
  6975     03AE  30A0               	movlw	low _oldInputReport
  6976     03AF  0084               	movwf	4
  6977     03B0  3001               	movlw	high _oldInputReport
  6978     03B1  0085               	movwf	5
  6979     03B2  3008               	movlw	8
  6980     03B3  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6981     03B4                     u6220:
  6982     03B4  0016               	moviw fsr1++
  6983     03B5  001A               	movwi fsr0++
  6984     03B6  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6985     03B7  2BB4               	goto	u6220
  6986                           
  6987                           ;app_device_keyboard.c: 425:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6988     03B8  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6989     03B9  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6990     03BA  30A0               	movlw	160
  6991     03BB  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6992     03BC  3000               	movlw	0
  6993     03BD  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6994     03BE  3008               	movlw	8
  6995     03BF  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6996     03C0  3001               	movlw	1
  6997     03C1  318C  24F0  3182   	fcall	_USBTransferOnePacket
  6998     03C4  302C               	movlw	44
  6999     03C5  0086               	movwf	6
  7000     03C6  3023               	movlw	35
  7001     03C7  0087               	movwf	7
  7002     03C8  0828               	movf	?_USBTransferOnePacket^(0+128),w
  7003     03C9  3FC0               	movwi [0]fsr1
  7004     03CA  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  7005     03CB  3FC1               	movwi [1]fsr1
  7006                           
  7007                           ;app_device_keyboard.c: 426:             OldSOFCount = LocalSOFCount;
  7008     03CC  0022               	movlb	2	; select bank2
  7009     03CD  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  7010     03CE  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  7011     03CF  0836               	movf	_LocalSOFCount^(0+256),w
  7012     03D0  00B4               	movwf	_OldSOFCount^(0+256)
  7013     03D1                     l6100:
  7014                           
  7015                           ;app_device_keyboard.c: 438:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  7016     03D1  302C               	movlw	44
  7017     03D2  0086               	movwf	6
  7018     03D3  3023               	movlw	35
  7019     03D4  0087               	movwf	7
  7020     03D5  3142               	addfsr 1,2
  7021     03D6  0016               	moviw fsr1++
  7022     03D7  0401               	iorwf	1,w
  7023     03D8  1903               	btfsc	3,2
  7024     03D9  2BEA               	goto	l6104
  7025     03DA  302C               	movlw	44
  7026     03DB  0086               	movwf	6
  7027     03DC  3023               	movlw	35
  7028     03DD  0087               	movwf	7
  7029     03DE  3142               	addfsr 1,2
  7030     03DF  3F40               	moviw [0]fsr1
  7031     03E0  0021               	movlb	1	; select bank1
  7032     03E1  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  7033     03E2  3F41               	moviw [1]fsr1
  7034     03E3  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  7035     03E4  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  7036     03E5  0086               	movwf	6
  7037     03E6  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  7038     03E7  0087               	movwf	7
  7039     03E8  1B81               	btfsc	1,7
  7040     03E9  0008               	return
  7041     03EA                     l6104:
  7042                           
  7043                           ;app_device_keyboard.c: 439:         APP_KeyboardProcessOutputReport();
  7044     03EA  319F  2713  3182   	fcall	_APP_KeyboardProcessOutputReport
  7045                           
  7046                           ;app_device_keyboard.c: 440:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  7047     03ED  0021               	movlb	1	; select bank1
  7048     03EE  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  7049     03EF  3020               	movlw	32
  7050     03F0  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  7051     03F1  3001               	movlw	1
  7052     03F2  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  7053     03F3  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  7054     03F4  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  7055     03F5  3001               	movlw	1
  7056     03F6  318C  24F0         	fcall	_USBTransferOnePacket
  7057     03F8  302C               	movlw	44
  7058     03F9  0086               	movwf	6
  7059     03FA  3023               	movlw	35
  7060     03FB  0087               	movwf	7
  7061     03FC  3142               	addfsr 1,2
  7062     03FD  0828               	movf	?_USBTransferOnePacket^(0+128),w
  7063     03FE  3FC0               	movwi [0]fsr1
  7064     03FF  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  7065     0400  3FC1               	movwi [1]fsr1
  7066     0401  0008               	return
  7067     0402                     __end_of_APP_KeyboardTasks:
  7068                           
  7069                           	psect	text29
  7070     10B4                     __ptext29:	
  7071 ;; *************** function _memset *****************
  7072 ;; Defined at:
  7073 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  dest            1    wreg     PTR void 
  7076 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7077 ;;  c               2    0[BANK1 ] int 
  7078 ;;  n               2    2[BANK1 ] unsigned int 
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;  dest            1    6[BANK1 ] PTR void 
  7081 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7082 ;;  p               1    5[BANK1 ] PTR unsigned char 
  7083 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      PTR void 
  7086 ;; Registers used:
  7087 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7088 ;; Tracked objects:
  7089 ;;		On entry : 1F/1
  7090 ;;		On exit  : 1F/1
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7093 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7097 ;;Total ram usage:        7 bytes
  7098 ;; Hardware stack levels used: 1
  7099 ;; Hardware stack levels required when called: 10
  7100 ;; This function calls:
  7101 ;;		Nothing
  7102 ;; This function is called by:
  7103 ;;		_APP_KeyboardTasks
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107     10B4                     _memset:	
  7108                           ;psect for function _memset
  7109                           
  7110                           
  7111                           ;incstack = 0
  7112                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7113                           ;memset@dest stored from wreg
  7114     10B4  00AE               	movwf	memset@dest^(0+128)
  7115     10B5  082E               	movf	memset@dest^(0+128),w
  7116     10B6  00AD               	movwf	memset@p^(0+128)
  7117     10B7                     l5236:
  7118     10B7  3001               	movlw	1
  7119     10B8  02AA               	subwf	memset@n^(0+128),f
  7120     10B9  3000               	movlw	0
  7121     10BA  3BAB               	subwfb	(memset@n+1)^(0+128),f
  7122     10BB  0A2A               	incf	memset@n^(0+128),w
  7123     10BC  1903               	btfsc	3,2
  7124     10BD  0A2B               	incf	(memset@n+1)^(0+128),w
  7125     10BE  1903               	btfsc	3,2
  7126     10BF  0008               	return
  7127     10C0  082D               	movf	memset@p^(0+128),w
  7128     10C1  0086               	movwf	6
  7129     10C2  0187               	clrf	7
  7130     10C3  0828               	movf	memset@c^(0+128),w
  7131     10C4  0081               	movwf	1
  7132     10C5  3001               	movlw	1
  7133     10C6  00AC               	movwf	??_memset^(0+128)
  7134     10C7  082C               	movf	??_memset^(0+128),w
  7135     10C8  07AD               	addwf	memset@p^(0+128),f
  7136     10C9  28B7               	goto	l5236
  7137     10CA                     __end_of_memset:
  7138                           
  7139                           	psect	text30
  7140     0CF0                     __ptext30:	
  7141 ;; *************** function _USBTransferOnePacket *****************
  7142 ;; Defined at:
  7143 ;;		line 999 in file "usb/usb_device.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  ep              1    wreg     unsigned char 
  7146 ;;  dir             1    0[BANK1 ] unsigned char 
  7147 ;;  data            2    1[BANK1 ] PTR unsigned char 
  7148 ;;		 -> inputReport(8), outputReport(1), 
  7149 ;;  len             1    3[BANK1 ] unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  ep              1    8[BANK1 ] unsigned char 
  7152 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  7153 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  2    0[BANK1 ] PTR void 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7158 ;; Tracked objects:
  7159 ;;		On entry : 1F/1
  7160 ;;		On exit  : 1F/1
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7163 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;Total ram usage:       11 bytes
  7168 ;; Hardware stack levels used: 1
  7169 ;; Hardware stack levels required when called: 10
  7170 ;; This function calls:
  7171 ;;		Nothing
  7172 ;; This function is called by:
  7173 ;;		_APP_KeyboardTasks
  7174 ;; This function uses a non-reentrant model
  7175 ;;
  7176                           
  7177     0CF0                     _USBTransferOnePacket:	
  7178                           ;psect for function _USBTransferOnePacket
  7179                           
  7180                           
  7181                           ;incstack = 0
  7182                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7183                           ;USBTransferOnePacket@ep stored from wreg
  7184     0CF0  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  7185                           
  7186                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  7187     0CF1  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7188     0CF2  1903               	btfsc	3,2
  7189     0CF3  2CFC               	goto	l5206
  7190                           
  7191                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  7192     0CF4  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7193     0CF5  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7194     0CF6  0086               	movwf	6
  7195     0CF7  0187               	clrf	7
  7196     0CF8  3F40               	moviw [0]fsr1
  7197     0CF9  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7198     0CFA  3F41               	moviw [1]fsr1
  7199     0CFB  2D04               	goto	L3
  7200     0CFC                     l5206:	
  7201                           ;usb/usb_device.c: 1008:     }
  7202                           
  7203                           
  7204                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  7205     0CFC  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7206     0CFD  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7207     0CFE  0086               	movwf	6
  7208     0CFF  3001               	movlw	1	; select bank2/3
  7209     0D00  0087               	movwf	7
  7210     0D01  3F40               	moviw [0]fsr1
  7211     0D02  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7212     0D03  3F41               	moviw [1]fsr1
  7213     0D04                     L3:
  7214     0D04  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  7215                           
  7216                           ;usb/usb_device.c: 1017:     if(handle == 0)
  7217     0D05  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7218     0D06  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  7219     0D07  1D03               	btfss	3,2
  7220     0D08  2D0C               	goto	l5214
  7221                           
  7222                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  7223     0D09  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  7224     0D0A  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  7225     0D0B  0008               	return
  7226     0D0C                     l5214:
  7227                           
  7228                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  7229     0D0C  30FF               	movlw	255
  7230     0D0D  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  7231     0D0E  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7232     0D0F  307F               	movlw	127
  7233     0D10  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  7234     0D11  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7235     0D12  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7236     0D13  0086               	movwf	6
  7237     0D14  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7238     0D15  0087               	movwf	7
  7239     0D16  3142               	addfsr 1,2
  7240     0D17  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7241     0D18  3FC0               	movwi [0]fsr1
  7242     0D19  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  7243     0D1A  3FC1               	movwi [1]fsr1
  7244                           
  7245                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  7246     0D1B  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7247     0D1C  3E01               	addlw	1
  7248     0D1D  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7249     0D1E  3000               	movlw	0
  7250     0D1F  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  7251     0D20  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7252     0D21  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7253     0D22  0086               	movwf	6
  7254     0D23  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  7255     0D24  0087               	movwf	7
  7256     0D25  082B               	movf	USBTransferOnePacket@len^(0+128),w
  7257     0D26  0081               	movwf	1
  7258                           
  7259                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  7260     0D27  3040               	movlw	64
  7261     0D28  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7262     0D29  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7263     0D2A  0086               	movwf	6
  7264     0D2B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7265     0D2C  0087               	movwf	7
  7266     0D2D  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7267     0D2E  0581               	andwf	1,f
  7268                           
  7269                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  7270     0D2F  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7271     0D30  0086               	movwf	6
  7272     0D31  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7273     0D32  0087               	movwf	7
  7274     0D33  1581               	bsf	1,3
  7275                           
  7276                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  7277     0D34  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7278     0D35  0086               	movwf	6
  7279     0D36  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7280     0D37  0087               	movwf	7
  7281     0D38  1781               	bsf	1,7
  7282                           
  7283                           ;usb/usb_device.c: 1040:     if(dir != 0)
  7284     0D39  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7285     0D3A  1903               	btfsc	3,2
  7286     0D3B  2D53               	goto	l5224
  7287                           
  7288                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  7289     0D3C  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7290     0D3D  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7291     0D3E  0086               	movwf	6
  7292     0D3F  0187               	clrf	7
  7293     0D40  3F40               	moviw [0]fsr1
  7294     0D41  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7295     0D42  3F41               	moviw [1]fsr1
  7296     0D43  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7297     0D44  3004               	movlw	4
  7298     0D45  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7299     0D46  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7300     0D47  3000               	movlw	0
  7301     0D48  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7302     0D49  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7303     0D4A  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7304     0D4B  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7305     0D4C  0086               	movwf	6
  7306     0D4D  0187               	clrf	7
  7307     0D4E  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7308     0D4F  3FC0               	movwi [0]fsr1
  7309     0D50  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7310     0D51  3FC1               	movwi [1]fsr1
  7311                           
  7312                           ;usb/usb_device.c: 1044:     }
  7313     0D52  2D6B               	goto	l5226
  7314     0D53                     l5224:
  7315                           
  7316                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  7317     0D53  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7318     0D54  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7319     0D55  0086               	movwf	6
  7320     0D56  3001               	movlw	1	; select bank2/3
  7321     0D57  0087               	movwf	7
  7322     0D58  3F40               	moviw [0]fsr1
  7323     0D59  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7324     0D5A  3F41               	moviw [1]fsr1
  7325     0D5B  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7326     0D5C  3004               	movlw	4
  7327     0D5D  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7328     0D5E  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7329     0D5F  3000               	movlw	0
  7330     0D60  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7331     0D61  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7332     0D62  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7333     0D63  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7334     0D64  0086               	movwf	6
  7335     0D65  3001               	movlw	1	; select bank2/3
  7336     0D66  0087               	movwf	7
  7337     0D67  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7338     0D68  3FC0               	movwi [0]fsr1
  7339     0D69  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7340     0D6A  3FC1               	movwi [1]fsr1
  7341     0D6B                     l5226:
  7342                           
  7343                           ;usb/usb_device.c: 1050:     return (void*)handle;
  7344     0D6B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7345     0D6C  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  7346     0D6D  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7347     0D6E  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  7348     0D6F  0008               	return
  7349     0D70                     __end_of_USBTransferOnePacket:
  7350                           
  7351                           	psect	text31
  7352     16D0                     __ptext31:	
  7353 ;; *************** function _GenericQueue_CopyToArray *****************
  7354 ;; Defined at:
  7355 ;;		line 63 in file "generic_queue.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;  q               2   24[BANK1 ] PTR struct .
  7358 ;;		 -> keyboard(101), 
  7359 ;;  array           1   26[BANK1 ] PTR void 
  7360 ;;		 -> inputReport(8), 
  7361 ;; Auto vars:     Size  Location     Type
  7362 ;;  count           1   32[BANK1 ] unsigned char 
  7363 ;;  index           1   31[BANK1 ] unsigned char 
  7364 ;; Return value:  Size  Location     Type
  7365 ;;                  1    wreg      void 
  7366 ;; Registers used:
  7367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7368 ;; Tracked objects:
  7369 ;;		On entry : 1F/1
  7370 ;;		On exit  : 1F/1
  7371 ;;		Unchanged: 0/0
  7372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7373 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;Total ram usage:        9 bytes
  7378 ;; Hardware stack levels used: 1
  7379 ;; Hardware stack levels required when called: 11
  7380 ;; This function calls:
  7381 ;;		___awmod
  7382 ;;		___bmul
  7383 ;;		___wmul
  7384 ;;		_memcpy
  7385 ;; This function is called by:
  7386 ;;		_APP_KeyboardTasks
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390     16D0                     _GenericQueue_CopyToArray:	
  7391                           ;psect for function _GenericQueue_CopyToArray
  7392                           
  7393                           
  7394                           ;generic_queue.c: 64:     uint8_t index = q->front;
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7398     16D0  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7399     16D1  3E5C               	addlw	92
  7400     16D2  0086               	movwf	6
  7401     16D3  3000               	movlw	0
  7402     16D4  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7403     16D5  0087               	movwf	7
  7404     16D6  0801               	movf	1,w
  7405     16D7  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7406                           
  7407                           ;generic_queue.c: 65:     uint8_t count = 0;
  7408     16D8  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  7409     16D9                     l1187:	
  7410                           ;generic_queue.c: 72:     }
  7411                           
  7412                           ;generic_queue.c: 66:     while (count < q->size) {
  7413                           
  7414                           
  7415                           ;generic_queue.c: 66:     while (count < q->size) {
  7416     16D9  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7417     16DA  3E5E               	addlw	94
  7418     16DB  0086               	movwf	6
  7419     16DC  3000               	movlw	0
  7420     16DD  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7421     16DE  0087               	movwf	7
  7422     16DF  0801               	movf	1,w
  7423     16E0  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  7424     16E1  1803               	btfsc	3,0
  7425     16E2  0008               	return
  7426                           
  7427                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  7428     16E3  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  7429     16E4  00A8               	movwf	___bmul@multiplicand^(0+128)
  7430     16E5  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7431     16E6  3E5A               	addlw	90
  7432     16E7  0086               	movwf	6
  7433     16E8  3000               	movlw	0
  7434     16E9  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7435     16EA  0087               	movwf	7
  7436     16EB  0801               	movf	1,w
  7437     16EC  319F  2792  3196   	fcall	___bmul
  7438     16EF  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  7439     16F0  00B5               	movwf	memcpy@d1^(0+128)
  7440     16F1  01B6               	clrf	(memcpy@d1+1)^(0+128)
  7441     16F2  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7442     16F3  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7443     16F4  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  7444     16F5  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7445     16F6  00AF               	movwf	___wmul@multiplier^(0+128)
  7446     16F7  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  7447     16F8  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7448     16F9  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7449     16FA  3E5A               	addlw	90
  7450     16FB  0086               	movwf	6
  7451     16FC  3000               	movlw	0
  7452     16FD  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7453     16FE  0087               	movwf	7
  7454     16FF  3F40               	moviw [0]fsr1
  7455     1700  00B1               	movwf	___wmul@multiplicand^(0+128)
  7456     1701  3F41               	moviw [1]fsr1
  7457     1702  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7458     1703  3191  215F  3196   	fcall	___wmul
  7459     1706  082F               	movf	?___wmul^(0+128),w
  7460     1707  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  7461     1708  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  7462     1709  0830               	movf	(?___wmul+1)^(0+128),w
  7463     170A  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7464     170B  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  7465     170C  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  7466     170D  00B7               	movwf	memcpy@s1^(0+128)
  7467     170E  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  7468     170F  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7469     1710  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7470     1711  3E5A               	addlw	90
  7471     1712  0086               	movwf	6
  7472     1713  3000               	movlw	0
  7473     1714  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7474     1715  0087               	movwf	7
  7475     1716  3F40               	moviw [0]fsr1
  7476     1717  00B9               	movwf	memcpy@n^(0+128)
  7477     1718  3F41               	moviw [1]fsr1
  7478     1719  00BA               	movwf	(memcpy@n+1)^(0+128)
  7479     171A  3193  2333  3196   	fcall	_memcpy
  7480                           
  7481                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  7482     171D  300F               	movlw	15
  7483     171E  00A8               	movwf	___awmod@divisor^(0+128)
  7484     171F  3000               	movlw	0
  7485     1720  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7486     1721  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7487     1722  3E01               	addlw	1
  7488     1723  00AA               	movwf	___awmod@dividend^(0+128)
  7489     1724  3000               	movlw	0
  7490     1725  1803               	skipnc
  7491     1726  3001               	movlw	1
  7492     1727  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7493     1728  3194  24F5  3196   	fcall	___awmod
  7494     172B  0828               	movf	?___awmod^(0+128),w
  7495     172C  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7496                           
  7497                           ;generic_queue.c: 71:         count++;
  7498     172D  3001               	movlw	1
  7499     172E  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7500     172F  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7501     1730  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  7502     1731  2ED9               	goto	l1187
  7503     1732                     __end_of_GenericQueue_CopyToArray:
  7504                           
  7505                           	psect	text32
  7506     1F92                     __ptext32:	
  7507 ;; *************** function ___bmul *****************
  7508 ;; Defined at:
  7509 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  multiplier      1    wreg     unsigned char 
  7512 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  multiplier      1    3[BANK1 ] unsigned char 
  7515 ;;  product         1    2[BANK1 ] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      unsigned char 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 1F/1
  7522 ;;		On exit  : 1F/1
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7525 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7529 ;;Total ram usage:        4 bytes
  7530 ;; Hardware stack levels used: 1
  7531 ;; Hardware stack levels required when called: 10
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_GenericQueue_CopyToArray
  7536 ;;		_Log_UtilityConvertByteToHex
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540     1F92                     ___bmul:	
  7541                           ;psect for function ___bmul
  7542                           
  7543                           
  7544                           ;incstack = 0
  7545                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7546                           ;___bmul@multiplier stored from wreg
  7547     1F92  00AB               	movwf	___bmul@multiplier^(0+128)
  7548     1F93  01AA               	clrf	___bmul@product^(0+128)
  7549     1F94                     l4892:
  7550     1F94  1C2B               	btfss	___bmul@multiplier^(0+128),0
  7551     1F95  2F9A               	goto	l4896
  7552     1F96  0828               	movf	___bmul@multiplicand^(0+128),w
  7553     1F97  00A9               	movwf	??___bmul^(0+128)
  7554     1F98  0829               	movf	??___bmul^(0+128),w
  7555     1F99  07AA               	addwf	___bmul@product^(0+128),f
  7556     1F9A                     l4896:
  7557     1F9A  1003               	clrc
  7558     1F9B  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  7559     1F9C  1003               	clrc
  7560     1F9D  0CAB               	rrf	___bmul@multiplier^(0+128),f
  7561     1F9E  082B               	movf	___bmul@multiplier^(0+128),w
  7562     1F9F  1D03               	btfss	3,2
  7563     1FA0  2F94               	goto	l4892
  7564     1FA1  082A               	movf	___bmul@product^(0+128),w
  7565     1FA2  0008               	return
  7566     1FA3                     __end_of___bmul:
  7567                           
  7568                           	psect	text33
  7569     0087                     __ptext33:	
  7570 ;; *************** function _APP_KeyboardUpdateState *****************
  7571 ;; Defined at:
  7572 ;;		line 446 in file "app_device_keyboard.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7575 ;;		 -> main@scanCode(3), NULL(0), 
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  7578 ;;		 -> main@scanCode(3), NULL(0), 
  7579 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  7580 ;;  leds            1   35[BANK1 ] unsigned char 
  7581 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  7582 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  7583 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  7584 ;; Return value:  Size  Location     Type
  7585 ;;                  1    wreg      void 
  7586 ;; Registers used:
  7587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7588 ;; Tracked objects:
  7589 ;;		On entry : 1F/1
  7590 ;;		On exit  : 1C/0
  7591 ;;		Unchanged: 0/0
  7592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;Total ram usage:        8 bytes
  7598 ;; Hardware stack levels used: 1
  7599 ;; Hardware stack levels required when called: 12
  7600 ;; This function calls:
  7601 ;;		_GenericQueue_Contains
  7602 ;;		_GenericQueue_Enqueue
  7603 ;;		_GenericQueue_Remove
  7604 ;;		_PS2Keyboard_GetLastCommand
  7605 ;;		_PS2Keyboard_SendCommand
  7606 ;;		_PS2USB_ScanCodeToUSBHID
  7607 ;; This function is called by:
  7608 ;;		_APP_KeyboardTasks
  7609 ;; This function uses a non-reentrant model
  7610 ;;
  7611                           
  7612     0087                     _APP_KeyboardUpdateState:	
  7613                           ;psect for function _APP_KeyboardUpdateState
  7614                           
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  7619     0087  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  7620                           
  7621                           ;app_device_keyboard.c: 447:     if (scanCode != ((void*)0)) {
  7622     0088  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7623     0089  1903               	btfsc	3,2
  7624     008A  0008               	return
  7625                           
  7626                           ;app_device_keyboard.c: 448:         if (scanCode->isExtend) {
  7627     008B  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7628     008C  0086               	movwf	6
  7629     008D  0187               	clrf	7
  7630     008E  0801               	movf	1,w
  7631     008F  1903               	btfsc	3,2
  7632     0090  28F6               	goto	l5974
  7633                           
  7634                           ;app_device_keyboard.c: 449:             if (scanCode->isBreak) {
  7635     0091  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7636     0092  3E02               	addlw	2
  7637     0093  0086               	movwf	6
  7638     0094  0187               	clrf	7
  7639     0095  0801               	movf	1,w
  7640     0096  1903               	btfsc	3,2
  7641     0097  28C0               	goto	l5962
  7642                           
  7643                           ;app_device_keyboard.c: 450:                 if (scanCode->value == 0X14) {
  7644     0098  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7645     0099  0086               	movwf	6
  7646     009A  0187               	clrf	7
  7647     009B  3014               	movlw	20
  7648     009C  0601               	xorwf	1,w
  7649     009D  1D03               	btfss	3,2
  7650     009E  28A5               	goto	l5956
  7651                           
  7652                           ;app_device_keyboard.c: 451:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  7653     009F  308F               	movlw	143
  7654     00A0  0086               	movwf	6
  7655     00A1  3023               	movlw	35
  7656     00A2  0087               	movwf	7
  7657     00A3  1201               	bcf	1,4
  7658                           
  7659                           ;app_device_keyboard.c: 452:                 } else if (scanCode->value == 0x11) {
  7660     00A4  0008               	return
  7661     00A5                     l5956:
  7662     00A5  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7663     00A6  0086               	movwf	6
  7664     00A7  0187               	clrf	7
  7665     00A8  3011               	movlw	17
  7666     00A9  0601               	xorwf	1,w
  7667     00AA  1D03               	btfss	3,2
  7668     00AB  28B2               	goto	l5960
  7669                           
  7670                           ;app_device_keyboard.c: 453:                     keyboard.modifiers.bits.rightAlt = 0;
  7671     00AC  308F               	movlw	143
  7672     00AD  0086               	movwf	6
  7673     00AE  3023               	movlw	35
  7674     00AF  0087               	movwf	7
  7675     00B0  1301               	bcf	1,6
  7676                           
  7677                           ;app_device_keyboard.c: 454:                 } else {
  7678     00B1  0008               	return
  7679     00B2                     l5960:
  7680                           
  7681                           ;app_device_keyboard.c: 455:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7682     00B2  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7683     00B3  3192  2224  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7684     00B6  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  7685                           
  7686                           ;app_device_keyboard.c: 456:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7687     00B7  3030               	movlw	48
  7688     00B8  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7689     00B9  3023               	movlw	35
  7690     00BA  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7691     00BB  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  7692     00BC  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7693     00BD  3185  25F6         	fcall	_GenericQueue_Remove
  7694     00BF  0008               	return
  7695     00C0                     l5962:
  7696                           
  7697                           ;app_device_keyboard.c: 459:                 if (scanCode->value == 0X14) {
  7698     00C0  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7699     00C1  0086               	movwf	6
  7700     00C2  0187               	clrf	7
  7701     00C3  3014               	movlw	20
  7702     00C4  0601               	xorwf	1,w
  7703     00C5  1D03               	btfss	3,2
  7704     00C6  28CD               	goto	l5966
  7705                           
  7706                           ;app_device_keyboard.c: 460:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7707     00C7  308F               	movlw	143
  7708     00C8  0086               	movwf	6
  7709     00C9  3023               	movlw	35
  7710     00CA  0087               	movwf	7
  7711     00CB  1601               	bsf	1,4
  7712                           
  7713                           ;app_device_keyboard.c: 461:                 } else if (scanCode->value == 0x11) {
  7714     00CC  0008               	return
  7715     00CD                     l5966:
  7716     00CD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7717     00CE  0086               	movwf	6
  7718     00CF  0187               	clrf	7
  7719     00D0  3011               	movlw	17
  7720     00D1  0601               	xorwf	1,w
  7721     00D2  1D03               	btfss	3,2
  7722     00D3  28DA               	goto	l5970
  7723                           
  7724                           ;app_device_keyboard.c: 462:                     keyboard.modifiers.bits.rightAlt = 1;
  7725     00D4  308F               	movlw	143
  7726     00D5  0086               	movwf	6
  7727     00D6  3023               	movlw	35
  7728     00D7  0087               	movwf	7
  7729     00D8  1701               	bsf	1,6
  7730                           
  7731                           ;app_device_keyboard.c: 463:                 } else {
  7732     00D9  0008               	return
  7733     00DA                     l5970:
  7734                           
  7735                           ;app_device_keyboard.c: 464:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7736     00DA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7737     00DB  3192  2224  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7738     00DE  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2934^(0+128)
  7739                           
  7740                           ;app_device_keyboard.c: 465:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7741     00DF  3030               	movlw	48
  7742     00E0  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7743     00E1  3023               	movlw	35
  7744     00E2  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7745     00E3  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2934| 0))& (0+255)
  7746     00E4  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7747     00E5  3196  266E  3180   	fcall	_GenericQueue_Contains
  7748     00E8  3A00               	xorlw	0
  7749     00E9  1D03               	skipz
  7750     00EA  0008               	return
  7751                           
  7752                           ;app_device_keyboard.c: 466:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7753     00EB  3030               	movlw	48
  7754     00EC  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7755     00ED  3023               	movlw	35
  7756     00EE  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7757     00EF  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2934
  7758     00F0  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7759     00F1  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2934
  7760     00F2  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7761     00F3  3188  2072         	fcall	_GenericQueue_Enqueue
  7762                           
  7763                           ;app_device_keyboard.c: 470:         } else {
  7764                           
  7765                           ;app_device_keyboard.c: 469:             }
  7766     00F5  0008               	return
  7767     00F6                     l5974:
  7768                           
  7769                           ;app_device_keyboard.c: 471:             if (scanCode->isBreak) {
  7770     00F6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7771     00F7  3E02               	addlw	2
  7772     00F8  0086               	movwf	6
  7773     00F9  0187               	clrf	7
  7774     00FA  0801               	movf	1,w
  7775     00FB  1903               	btfsc	3,2
  7776     00FC  293F               	goto	l5994
  7777                           
  7778                           ;app_device_keyboard.c: 473:                 if (scanCode->value == 0x12) {
  7779     00FD  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7780     00FE  0086               	movwf	6
  7781     00FF  0187               	clrf	7
  7782     0100  3012               	movlw	18
  7783     0101  0601               	xorwf	1,w
  7784     0102  1D03               	btfss	3,2
  7785     0103  290A               	goto	l5980
  7786                           
  7787                           ;app_device_keyboard.c: 474:                     keyboard.modifiers.bits.leftShift = 0;
  7788     0104  308F               	movlw	143
  7789     0105  0086               	movwf	6
  7790     0106  3023               	movlw	35
  7791     0107  0087               	movwf	7
  7792     0108  1081               	bcf	1,1
  7793                           
  7794                           ;app_device_keyboard.c: 475:                 } else if (scanCode->value == 0X14) {
  7795     0109  0008               	return
  7796     010A                     l5980:
  7797     010A  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7798     010B  0086               	movwf	6
  7799     010C  0187               	clrf	7
  7800     010D  3014               	movlw	20
  7801     010E  0601               	xorwf	1,w
  7802     010F  1D03               	btfss	3,2
  7803     0110  2917               	goto	l5984
  7804                           
  7805                           ;app_device_keyboard.c: 476:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  7806     0111  308F               	movlw	143
  7807     0112  0086               	movwf	6
  7808     0113  3023               	movlw	35
  7809     0114  0087               	movwf	7
  7810     0115  1001               	bcf	1,0
  7811                           
  7812                           ;app_device_keyboard.c: 477:                 } else if (scanCode->value == 0x11) {
  7813     0116  0008               	return
  7814     0117                     l5984:
  7815     0117  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7816     0118  0086               	movwf	6
  7817     0119  0187               	clrf	7
  7818     011A  3011               	movlw	17
  7819     011B  0601               	xorwf	1,w
  7820     011C  1D03               	btfss	3,2
  7821     011D  2924               	goto	l5988
  7822                           
  7823                           ;app_device_keyboard.c: 478:                     keyboard.modifiers.bits.leftAlt = 0;
  7824     011E  308F               	movlw	143
  7825     011F  0086               	movwf	6
  7826     0120  3023               	movlw	35
  7827     0121  0087               	movwf	7
  7828     0122  1101               	bcf	1,2
  7829                           
  7830                           ;app_device_keyboard.c: 479:                 } else if (scanCode->value == 0x59) {
  7831     0123  0008               	return
  7832     0124                     l5988:
  7833     0124  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7834     0125  0086               	movwf	6
  7835     0126  0187               	clrf	7
  7836     0127  3059               	movlw	89
  7837     0128  0601               	xorwf	1,w
  7838     0129  1D03               	btfss	3,2
  7839     012A  2931               	goto	l5992
  7840                           
  7841                           ;app_device_keyboard.c: 480:                     keyboard.modifiers.bits.rightShift = 0;
  7842     012B  308F               	movlw	143
  7843     012C  0086               	movwf	6
  7844     012D  3023               	movlw	35
  7845     012E  0087               	movwf	7
  7846     012F  1281               	bcf	1,5
  7847                           
  7848                           ;app_device_keyboard.c: 481:                 } else {
  7849     0130  0008               	return
  7850     0131                     l5992:
  7851                           
  7852                           ;app_device_keyboard.c: 482:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7853     0131  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7854     0132  3192  2224  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7855     0135  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2935^(0+128)
  7856                           
  7857                           ;app_device_keyboard.c: 483:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7858     0136  3030               	movlw	48
  7859     0137  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7860     0138  3023               	movlw	35
  7861     0139  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7862     013A  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2935| 0))& (0+255)
  7863     013B  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7864     013C  3185  25F6         	fcall	_GenericQueue_Remove
  7865     013E  0008               	return
  7866     013F                     l5994:
  7867     013F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7868     0140  0086               	movwf	6
  7869     0141  0187               	clrf	7
  7870     0142  30FA               	movlw	250
  7871     0143  0601               	xorwf	1,w
  7872     0144  1D03               	btfss	3,2
  7873     0145  296E               	goto	l6002
  7874                           
  7875                           ;app_device_keyboard.c: 486:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7876     0146  319E  2699  3180   	fcall	_PS2Keyboard_GetLastCommand
  7877     0149  3AED               	xorlw	237
  7878     014A  1D03               	skipz
  7879     014B  0008               	return
  7880                           
  7881                           ;app_device_keyboard.c: 487:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7882     014C  3090               	movlw	144
  7883     014D  0086               	movwf	6
  7884     014E  3023               	movlw	35
  7885     014F  0087               	movwf	7
  7886     0150  0C01               	rrf	1,w
  7887     0151  0C89               	rrf	9,f
  7888     0152  3901               	andlw	1
  7889     0153  0021               	movlb	1	; select bank1
  7890     0154  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7891     0155  3090               	movlw	144
  7892     0156  0086               	movwf	6
  7893     0157  3023               	movlw	35
  7894     0158  0087               	movwf	7
  7895     0159  0C01               	rrf	1,w
  7896     015A  3901               	andlw	1
  7897     015B  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7898     015C  3002               	movlw	2
  7899     015D                     u5995:
  7900     015D  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7901     015E  0B89               	decfsz	9,f
  7902     015F  295D               	goto	u5995
  7903     0160  3090               	movlw	144
  7904     0161  0086               	movwf	6
  7905     0162  3023               	movlw	35
  7906     0163  0087               	movwf	7
  7907     0164  0801               	movf	1,w
  7908     0165  3901               	andlw	1
  7909     0166  0709               	addwf	9,w
  7910     0167  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7911     0168  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7912     0169  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7913                           
  7914                           ;app_device_keyboard.c: 490:                     PS2Keyboard_SendCommand(leds);
  7915     016A  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7916     016B  3191  21B0         	fcall	_PS2Keyboard_SendCommand
  7917     016D  0008               	return
  7918     016E                     l6002:
  7919     016E  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7920     016F  0086               	movwf	6
  7921     0170  0187               	clrf	7
  7922     0171  30FC               	movlw	252
  7923     0172  0601               	xorwf	1,w
  7924     0173  1903               	btfsc	3,2
  7925     0174  0008               	return
  7926     0175  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7927     0176  0086               	movwf	6
  7928     0177  0187               	clrf	7
  7929     0178  0A01               	incf	1,w
  7930     0179  1903               	btfsc	3,2
  7931     017A  0008               	return
  7932     017B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7933     017C  0086               	movwf	6
  7934     017D  0187               	clrf	7
  7935     017E  30AA               	movlw	170
  7936     017F  0601               	xorwf	1,w
  7937     0180  1903               	btfsc	3,2
  7938     0181  0008               	return
  7939                           
  7940                           ;app_device_keyboard.c: 498:                 if (scanCode->value == 0x12) {
  7941     0182  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7942     0183  0086               	movwf	6
  7943     0184  0187               	clrf	7
  7944     0185  3012               	movlw	18
  7945     0186  0601               	xorwf	1,w
  7946     0187  1D03               	btfss	3,2
  7947     0188  298F               	goto	l6012
  7948                           
  7949                           ;app_device_keyboard.c: 499:                     keyboard.modifiers.bits.leftShift = 1;
  7950     0189  308F               	movlw	143
  7951     018A  0086               	movwf	6
  7952     018B  3023               	movlw	35
  7953     018C  0087               	movwf	7
  7954     018D  1481               	bsf	1,1
  7955                           
  7956                           ;app_device_keyboard.c: 500:                 } else if (scanCode->value == 0X14) {
  7957     018E  0008               	return
  7958     018F                     l6012:
  7959     018F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7960     0190  0086               	movwf	6
  7961     0191  0187               	clrf	7
  7962     0192  3014               	movlw	20
  7963     0193  0601               	xorwf	1,w
  7964     0194  1D03               	btfss	3,2
  7965     0195  299C               	goto	l6016
  7966                           
  7967                           ;app_device_keyboard.c: 501:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7968     0196  308F               	movlw	143
  7969     0197  0086               	movwf	6
  7970     0198  3023               	movlw	35
  7971     0199  0087               	movwf	7
  7972     019A  1401               	bsf	1,0
  7973                           
  7974                           ;app_device_keyboard.c: 502:                 } else if (scanCode->value == 0x11) {
  7975     019B  0008               	return
  7976     019C                     l6016:
  7977     019C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7978     019D  0086               	movwf	6
  7979     019E  0187               	clrf	7
  7980     019F  3011               	movlw	17
  7981     01A0  0601               	xorwf	1,w
  7982     01A1  1D03               	btfss	3,2
  7983     01A2  29A9               	goto	l6020
  7984                           
  7985                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.leftAlt = 1;
  7986     01A3  308F               	movlw	143
  7987     01A4  0086               	movwf	6
  7988     01A5  3023               	movlw	35
  7989     01A6  0087               	movwf	7
  7990     01A7  1501               	bsf	1,2
  7991                           
  7992                           ;app_device_keyboard.c: 504:                 } else if (scanCode->value == 0x59) {
  7993     01A8  0008               	return
  7994     01A9                     l6020:
  7995     01A9  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7996     01AA  0086               	movwf	6
  7997     01AB  0187               	clrf	7
  7998     01AC  3059               	movlw	89
  7999     01AD  0601               	xorwf	1,w
  8000     01AE  1D03               	btfss	3,2
  8001     01AF  29B6               	goto	l6024
  8002                           
  8003                           ;app_device_keyboard.c: 505:                     keyboard.modifiers.bits.rightShift = 1;
  8004     01B0  308F               	movlw	143
  8005     01B1  0086               	movwf	6
  8006     01B2  3023               	movlw	35
  8007     01B3  0087               	movwf	7
  8008     01B4  1681               	bsf	1,5
  8009                           
  8010                           ;app_device_keyboard.c: 506:                 } else {
  8011     01B5  0008               	return
  8012     01B6                     l6024:
  8013                           
  8014                           ;app_device_keyboard.c: 507:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8015     01B6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  8016     01B7  3192  2224  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8017     01BA  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2943^(0+128)
  8018                           
  8019                           ;app_device_keyboard.c: 508:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  8020     01BB  3030               	movlw	48
  8021     01BC  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8022     01BD  3023               	movlw	35
  8023     01BE  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8024     01BF  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2943| 0))& (0+255)
  8025     01C0  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8026     01C1  3196  266E  3180   	fcall	_GenericQueue_Contains
  8027     01C4  3A00               	xorlw	0
  8028     01C5  1D03               	skipz
  8029     01C6  0008               	return
  8030                           
  8031                           ;app_device_keyboard.c: 509:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  8032     01C7  3030               	movlw	48
  8033     01C8  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8034     01C9  3023               	movlw	35
  8035     01CA  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8036     01CB  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2943
  8037     01CC  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8038     01CD  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2943
  8039     01CE  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  8040     01CF  3188  2072         	fcall	_GenericQueue_Enqueue
  8041     01D1  0008               	return
  8042     01D2                     __end_of_APP_KeyboardUpdateState:
  8043                           
  8044                           	psect	text34
  8045     1224                     __ptext34:	
  8046 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  8047 ;; Defined at:
  8048 ;;		line 396 in file "ps2usb.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8051 ;;		 -> main@scanCode(3), NULL(0), 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  8054 ;;		 -> main@scanCode(3), NULL(0), 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  1    wreg      unsigned char 
  8057 ;; Registers used:
  8058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8059 ;; Tracked objects:
  8060 ;;		On entry : 1F/1
  8061 ;;		On exit  : 1F/1
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;Total ram usage:        1 bytes
  8069 ;; Hardware stack levels used: 1
  8070 ;; Hardware stack levels required when called: 10
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_APP_KeyboardUpdateState
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078     1224                     _PS2USB_ScanCodeToUSBHID:	
  8079                           ;psect for function _PS2USB_ScanCodeToUSBHID
  8080                           
  8081                           
  8082                           ;incstack = 0
  8083                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  8084                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  8085     1224  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  8086                           
  8087                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  8088     1225  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8089     1226  0086               	movwf	6
  8090     1227  0187               	clrf	7
  8091     1228  0801               	movf	1,w
  8092     1229  1903               	btfsc	3,2
  8093     122A  2A37               	goto	l4730
  8094                           
  8095                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  8096     122B  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8097     122C  0086               	movwf	6
  8098     122D  0187               	clrf	7
  8099     122E  0801               	movf	1,w
  8100     122F  3E02               	addlw	low (_ps2ExtUsbMap| (0+32768))
  8101     1230  0084               	movwf	4
  8102     1231  3084               	movlw	high (_ps2ExtUsbMap| (0+32768))
  8103     1232  1803               	skipnc
  8104     1233  3E01               	addlw	1
  8105     1234  0085               	movwf	5
  8106     1235  0800               	movf	0,w	;code access
  8107     1236  0008               	return
  8108     1237                     l4730:
  8109                           
  8110                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  8111     1237  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8112     1238  0086               	movwf	6
  8113     1239  0187               	clrf	7
  8114     123A  0801               	movf	1,w
  8115     123B  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  8116     123C  0084               	movwf	4
  8117     123D  3090               	movlw	high (_ps2UsbMap| (0+32768))
  8118     123E  1803               	skipnc
  8119     123F  3E01               	addlw	1
  8120     1240  0085               	movwf	5
  8121     1241  0800               	movf	0,w	;code access
  8122     1242  0008               	return
  8123     1243                     __end_of_PS2USB_ScanCodeToUSBHID:
  8124                           
  8125                           	psect	text35
  8126     1E99                     __ptext35:	
  8127 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  8128 ;; Defined at:
  8129 ;;		line 75 in file "ps2_keyboard.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;		None
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      unsigned char 
  8136 ;; Registers used:
  8137 ;;		wreg
  8138 ;; Tracked objects:
  8139 ;;		On entry : 1F/1
  8140 ;;		On exit  : 1F/2
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;Total ram usage:        0 bytes
  8148 ;; Hardware stack levels used: 1
  8149 ;; Hardware stack levels required when called: 10
  8150 ;; This function calls:
  8151 ;;		Nothing
  8152 ;; This function is called by:
  8153 ;;		_APP_KeyboardUpdateState
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157     1E99                     _PS2Keyboard_GetLastCommand:	
  8158                           ;psect for function _PS2Keyboard_GetLastCommand
  8159                           
  8160                           
  8161                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  8162                           
  8163                           ;incstack = 0
  8164                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  8165     1E99  0022               	movlb	2	; select bank2
  8166     1E9A  084C               	movf	_keyboardCommand^(0+256),w	;volatile
  8167     1E9B  0008               	return
  8168     1E9C                     __end_of_PS2Keyboard_GetLastCommand:
  8169                           
  8170                           	psect	text36
  8171     05F6                     __ptext36:	
  8172 ;; *************** function _GenericQueue_Remove *****************
  8173 ;; Defined at:
  8174 ;;		line 35 in file "generic_queue.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  q               2   24[BANK1 ] PTR struct .
  8177 ;;		 -> keyboard(101), 
  8178 ;;  item            1   26[BANK1 ] PTR const void 
  8179 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2935(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8180 ;; Auto vars:     Size  Location     Type
  8181 ;;  j               1   32[BANK1 ] unsigned char 
  8182 ;;  i               1   31[BANK1 ] unsigned char 
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  1    wreg      void 
  8185 ;; Registers used:
  8186 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8187 ;; Tracked objects:
  8188 ;;		On entry : 1F/1
  8189 ;;		On exit  : 1F/1
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8192 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;Total ram usage:        9 bytes
  8197 ;; Hardware stack levels used: 1
  8198 ;; Hardware stack levels required when called: 11
  8199 ;; This function calls:
  8200 ;;		_GenericQueue_IsEmpty
  8201 ;;		___awmod
  8202 ;;		___wmul
  8203 ;;		_memcmp
  8204 ;;		_memcpy
  8205 ;; This function is called by:
  8206 ;;		_APP_KeyboardUpdateState
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210     05F6                     _GenericQueue_Remove:	
  8211                           ;psect for function _GenericQueue_Remove
  8212                           
  8213                           
  8214                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8218     05F6  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  8219     05F7  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8220     05F8  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8221     05F9  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8222     05FA  319F  27C5  3185   	fcall	_GenericQueue_IsEmpty
  8223     05FD  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8224     05FE  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8225     05FF  1D03               	btfss	3,2
  8226     0600  0008               	return
  8227                           
  8228                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8229     0601  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8230     0602  3E5C               	addlw	92
  8231     0603  0086               	movwf	6
  8232     0604  3000               	movlw	0
  8233     0605  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8234     0606  0087               	movwf	7
  8235     0607  0801               	movf	1,w
  8236     0608                     L4:
  8237     0608  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  8238     0609  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8239     060A  3E5D               	addlw	93
  8240     060B  0086               	movwf	6
  8241     060C  3000               	movlw	0
  8242     060D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8243     060E  0087               	movwf	7
  8244     060F  0801               	movf	1,w
  8245     0610  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  8246     0611  1903               	btfsc	3,2
  8247     0612  0008               	return
  8248                           
  8249                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8250     0613  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8251     0614  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8252     0615  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8253     0616  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8254     0617  00AF               	movwf	___wmul@multiplier^(0+128)
  8255     0618  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8256     0619  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8257     061A  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8258     061B  3E5A               	addlw	90
  8259     061C  0086               	movwf	6
  8260     061D  3000               	movlw	0
  8261     061E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8262     061F  0087               	movwf	7
  8263     0620  3F40               	moviw [0]fsr1
  8264     0621  00B1               	movwf	___wmul@multiplicand^(0+128)
  8265     0622  3F41               	moviw [1]fsr1
  8266     0623  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8267     0624  3191  215F  3185   	fcall	___wmul
  8268     0627  082F               	movf	?___wmul^(0+128),w
  8269     0628  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8270     0629  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8271     062A  0830               	movf	(?___wmul+1)^(0+128),w
  8272     062B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8273     062C  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8274     062D  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8275     062E  00B5               	movwf	memcmp@vl^(0+128)
  8276     062F  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8277     0630  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8278     0631  0842               	movf	GenericQueue_Remove@item^(0+128),w
  8279     0632  00B7               	movwf	memcmp@vr^(0+128)
  8280     0633  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8281     0634  3E5A               	addlw	90
  8282     0635  0086               	movwf	6
  8283     0636  3000               	movlw	0
  8284     0637  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8285     0638  0087               	movwf	7
  8286     0639  3F40               	moviw [0]fsr1
  8287     063A  00B8               	movwf	memcmp@n^(0+128)
  8288     063B  3F41               	moviw [1]fsr1
  8289     063C  00B9               	movwf	(memcmp@n+1)^(0+128)
  8290     063D  3193  2389  3185   	fcall	_memcmp
  8291     0640  0835               	movf	?_memcmp^(0+128),w
  8292     0641  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8293     0642  1D03               	btfss	3,2
  8294     0643  2EDA               	goto	l4752
  8295                           
  8296                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  8297     0644  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8298     0645                     L5:
  8299     0645  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  8300     0646  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8301     0647  3E5D               	addlw	93
  8302     0648  0086               	movwf	6
  8303     0649  3000               	movlw	0
  8304     064A  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8305     064B  0087               	movwf	7
  8306     064C  0801               	movf	1,w
  8307     064D  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  8308     064E  1903               	btfsc	3,2
  8309     064F  2EB0               	goto	l4748
  8310                           
  8311                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  8312     0650  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8313     0651  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8314     0652  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8315     0653  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8316     0654  00AF               	movwf	___wmul@multiplier^(0+128)
  8317     0655  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8318     0656  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8319     0657  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8320     0658  3E5A               	addlw	90
  8321     0659  0086               	movwf	6
  8322     065A  3000               	movlw	0
  8323     065B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8324     065C  0087               	movwf	7
  8325     065D  3F40               	moviw [0]fsr1
  8326     065E  00B1               	movwf	___wmul@multiplicand^(0+128)
  8327     065F  3F41               	moviw [1]fsr1
  8328     0660  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8329     0661  3191  215F  3185   	fcall	___wmul
  8330     0664  082F               	movf	?___wmul^(0+128),w
  8331     0665  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8332     0666  00B5               	movwf	memcpy@d1^(0+128)
  8333     0667  0830               	movf	(?___wmul+1)^(0+128),w
  8334     0668  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8335     0669  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8336     066A  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8337     066B  3E01               	addlw	1
  8338     066C  00AA               	movwf	___awmod@dividend^(0+128)
  8339     066D  3000               	movlw	0
  8340     066E  1803               	skipnc
  8341     066F  3001               	movlw	1
  8342     0670  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8343     0671  300F               	movlw	15
  8344     0672  00A8               	movwf	___awmod@divisor^(0+128)
  8345     0673  3000               	movlw	0
  8346     0674  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8347     0675  3194  24F5  3185   	fcall	___awmod
  8348     0678  0829               	movf	(?___awmod+1)^(0+128),w
  8349     0679  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8350     067A  0828               	movf	?___awmod^(0+128),w
  8351     067B  00AF               	movwf	___wmul@multiplier^(0+128)
  8352     067C  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8353     067D  3E5A               	addlw	90
  8354     067E  0086               	movwf	6
  8355     067F  3000               	movlw	0
  8356     0680  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8357     0681  0087               	movwf	7
  8358     0682  3F40               	moviw [0]fsr1
  8359     0683  00B1               	movwf	___wmul@multiplicand^(0+128)
  8360     0684  3F41               	moviw [1]fsr1
  8361     0685  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8362     0686  3191  215F  3185   	fcall	___wmul
  8363     0689  082F               	movf	?___wmul^(0+128),w
  8364     068A  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8365     068B  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8366     068C  0830               	movf	(?___wmul+1)^(0+128),w
  8367     068D  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8368     068E  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8369     068F  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8370     0690  00B7               	movwf	memcpy@s1^(0+128)
  8371     0691  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8372     0692  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8373     0693  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8374     0694  3E5A               	addlw	90
  8375     0695  0086               	movwf	6
  8376     0696  3000               	movlw	0
  8377     0697  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8378     0698  0087               	movwf	7
  8379     0699  3F40               	moviw [0]fsr1
  8380     069A  00B9               	movwf	memcpy@n^(0+128)
  8381     069B  3F41               	moviw [1]fsr1
  8382     069C  00BA               	movwf	(memcpy@n+1)^(0+128)
  8383     069D  3193  2333  3185   	fcall	_memcpy
  8384                           
  8385                           ;generic_queue.c: 43:                 }
  8386     06A0  300F               	movlw	15
  8387     06A1  00A8               	movwf	___awmod@divisor^(0+128)
  8388     06A2  3000               	movlw	0
  8389     06A3  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8390     06A4  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8391     06A5  3E01               	addlw	1
  8392     06A6  00AA               	movwf	___awmod@dividend^(0+128)
  8393     06A7  3000               	movlw	0
  8394     06A8  1803               	skipnc
  8395     06A9  3001               	movlw	1
  8396     06AA  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8397     06AB  3194  24F5  3185   	fcall	___awmod
  8398     06AE  0828               	movf	?___awmod^(0+128),w
  8399     06AF  2E45               	goto	L5
  8400     06B0                     l4748:
  8401                           
  8402                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  8403     06B0  300F               	movlw	15
  8404     06B1  00A8               	movwf	___awmod@divisor^(0+128)
  8405     06B2  3000               	movlw	0
  8406     06B3  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8407     06B4  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8408     06B5  3E5D               	addlw	93
  8409     06B6  0086               	movwf	6
  8410     06B7  3000               	movlw	0
  8411     06B8  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8412     06B9  0087               	movwf	7
  8413     06BA  0801               	movf	1,w
  8414     06BB  3E0E               	addlw	14
  8415     06BC  00AA               	movwf	___awmod@dividend^(0+128)
  8416     06BD  3000               	movlw	0
  8417     06BE  1803               	skipnc
  8418     06BF  3001               	movlw	1
  8419     06C0  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8420     06C1  3194  24F5         	fcall	___awmod
  8421     06C3  0828               	movf	?___awmod^(0+128),w
  8422     06C4  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8423     06C5  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8424     06C6  3E5D               	addlw	93
  8425     06C7  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  8426     06C8  3000               	movlw	0
  8427     06C9  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8428     06CA  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8429     06CB  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8430     06CC  0086               	movwf	6
  8431     06CD  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8432     06CE  0087               	movwf	7
  8433     06CF  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8434     06D0  0081               	movwf	1
  8435                           
  8436                           ;generic_queue.c: 45:                 q->size--;
  8437     06D1  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8438     06D2  3E5E               	addlw	94
  8439     06D3  0086               	movwf	6
  8440     06D4  3000               	movlw	0
  8441     06D5  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8442     06D6  0087               	movwf	7
  8443     06D7  3001               	movlw	1
  8444     06D8  0281               	subwf	1,f
  8445                           
  8446                           ;generic_queue.c: 46:                 break;
  8447     06D9  0008               	return
  8448     06DA                     l4752:
  8449                           
  8450                           ;generic_queue.c: 48:         }
  8451     06DA  300F               	movlw	15
  8452     06DB  00A8               	movwf	___awmod@divisor^(0+128)
  8453     06DC  3000               	movlw	0
  8454     06DD  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8455     06DE  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8456     06DF  3E01               	addlw	1
  8457     06E0  00AA               	movwf	___awmod@dividend^(0+128)
  8458     06E1  3000               	movlw	0
  8459     06E2  1803               	skipnc
  8460     06E3  3001               	movlw	1
  8461     06E4  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8462     06E5  3194  24F5  3185   	fcall	___awmod
  8463     06E8  0828               	movf	?___awmod^(0+128),w
  8464     06E9  2E08               	goto	L4
  8465     06EA                     __end_of_GenericQueue_Remove:
  8466                           
  8467                           	psect	text37
  8468     0872                     __ptext37:	
  8469 ;; *************** function _GenericQueue_Enqueue *****************
  8470 ;; Defined at:
  8471 ;;		line 19 in file "generic_queue.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  q               2   24[BANK1 ] PTR struct .
  8474 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8475 ;;  item            2   26[BANK1 ] PTR const void 
  8476 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2934(1), 
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;                  1    wreg      void 
  8481 ;; Registers used:
  8482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 1F/1
  8485 ;;		On exit  : 1F/1
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8488 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8492 ;;Total ram usage:        7 bytes
  8493 ;; Hardware stack levels used: 1
  8494 ;; Hardware stack levels required when called: 11
  8495 ;; This function calls:
  8496 ;;		_GenericQueue_IsFull
  8497 ;;		___awmod
  8498 ;;		___wmul
  8499 ;;		_memcpy
  8500 ;; This function is called by:
  8501 ;;		_APP_KeyboardUpdateState
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505     0872                     _GenericQueue_Enqueue:	
  8506                           ;psect for function _GenericQueue_Enqueue
  8507                           
  8508                           
  8509                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  8510                           
  8511                           ;incstack = 0
  8512                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8513     0872  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  8514     0873  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  8515     0874  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8516     0875  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  8517     0876  319F  27EC  3188   	fcall	_GenericQueue_IsFull
  8518     0879  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  8519     087A  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  8520     087B  1D03               	btfss	3,2
  8521     087C  0008               	return
  8522                           
  8523                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  8524     087D  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8525     087E  3E5D               	addlw	93
  8526     087F  0086               	movwf	6
  8527     0880  3000               	movlw	0
  8528     0881  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8529     0882  0087               	movwf	7
  8530     0883  0801               	movf	1,w
  8531     0884  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8532     0885  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  8533     0886  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8534     0887  00AF               	movwf	___wmul@multiplier^(0+128)
  8535     0888  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8536     0889  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8537     088A  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8538     088B  3E5A               	addlw	90
  8539     088C  0086               	movwf	6
  8540     088D  3000               	movlw	0
  8541     088E  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8542     088F  0087               	movwf	7
  8543     0890  3F40               	moviw [0]fsr1
  8544     0891  00B1               	movwf	___wmul@multiplicand^(0+128)
  8545     0892  3F41               	moviw [1]fsr1
  8546     0893  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8547     0894  3191  215F  3188   	fcall	___wmul
  8548     0897  082F               	movf	?___wmul^(0+128),w
  8549     0898  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  8550     0899  00B5               	movwf	memcpy@d1^(0+128)
  8551     089A  0830               	movf	(?___wmul+1)^(0+128),w
  8552     089B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8553     089C  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8554     089D  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  8555     089E  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8556     089F  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  8557     08A0  00B7               	movwf	memcpy@s1^(0+128)
  8558     08A1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8559     08A2  3E5A               	addlw	90
  8560     08A3  0086               	movwf	6
  8561     08A4  3000               	movlw	0
  8562     08A5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8563     08A6  0087               	movwf	7
  8564     08A7  3F40               	moviw [0]fsr1
  8565     08A8  00B9               	movwf	memcpy@n^(0+128)
  8566     08A9  3F41               	moviw [1]fsr1
  8567     08AA  00BA               	movwf	(memcpy@n+1)^(0+128)
  8568     08AB  3193  2333  3188   	fcall	_memcpy
  8569                           
  8570                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  8571     08AE  300F               	movlw	15
  8572     08AF  00A8               	movwf	___awmod@divisor^(0+128)
  8573     08B0  3000               	movlw	0
  8574     08B1  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8575     08B2  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8576     08B3  3E5D               	addlw	93
  8577     08B4  0086               	movwf	6
  8578     08B5  3000               	movlw	0
  8579     08B6  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8580     08B7  0087               	movwf	7
  8581     08B8  0801               	movf	1,w
  8582     08B9  3E01               	addlw	1
  8583     08BA  00AA               	movwf	___awmod@dividend^(0+128)
  8584     08BB  3000               	movlw	0
  8585     08BC  1803               	skipnc
  8586     08BD  3001               	movlw	1
  8587     08BE  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8588     08BF  3194  24F5         	fcall	___awmod
  8589     08C1  0828               	movf	?___awmod^(0+128),w
  8590     08C2  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8591     08C3  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8592     08C4  3E5D               	addlw	93
  8593     08C5  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  8594     08C6  3000               	movlw	0
  8595     08C7  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8596     08C8  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  8597     08C9  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8598     08CA  0086               	movwf	6
  8599     08CB  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  8600     08CC  0087               	movwf	7
  8601     08CD  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8602     08CE  0081               	movwf	1
  8603                           
  8604                           ;generic_queue.c: 23:         q->size++;
  8605     08CF  3001               	movlw	1
  8606     08D0  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8607     08D1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8608     08D2  3E5E               	addlw	94
  8609     08D3  0086               	movwf	6
  8610     08D4  3000               	movlw	0
  8611     08D5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8612     08D6  0087               	movwf	7
  8613     08D7  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8614     08D8  0781               	addwf	1,f
  8615     08D9  0008               	return
  8616     08DA                     __end_of_GenericQueue_Enqueue:
  8617                           
  8618                           	psect	text38
  8619     1333                     __ptext38:	
  8620 ;; *************** function _memcpy *****************
  8621 ;; Defined at:
  8622 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  8623 ;; Parameters:    Size  Location     Type
  8624 ;;  d1              2   13[BANK1 ] PTR void 
  8625 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8626 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8627 ;;  s1              2   15[BANK1 ] PTR const void 
  8628 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8629 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2934(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8630 ;;		 -> SetupPkt(8), 
  8631 ;;  n               2   17[BANK1 ] unsigned int 
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  8634 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8635 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2934(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8636 ;;		 -> SetupPkt(8), 
  8637 ;;  d               2   19[BANK1 ] PTR unsigned char 
  8638 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8639 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8640 ;;  tmp             1   23[BANK1 ] unsigned char 
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  2   13[BANK1 ] PTR void 
  8643 ;; Registers used:
  8644 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8645 ;; Tracked objects:
  8646 ;;		On entry : 1F/1
  8647 ;;		On exit  : 1F/1
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8650 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;Total ram usage:       11 bytes
  8655 ;; Hardware stack levels used: 1
  8656 ;; Hardware stack levels required when called: 10
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_GenericQueue_Enqueue
  8661 ;;		_GenericQueue_Dequeue
  8662 ;;		_GenericQueue_Remove
  8663 ;;		_GenericQueue_CopyToArray
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667     1333                     _memcpy:	
  8668                           ;psect for function _memcpy
  8669                           
  8670                           
  8671                           ;incstack = 0
  8672                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  8673     1333  0838               	movf	(memcpy@s1+1)^(0+128),w
  8674     1334  00BE               	movwf	(memcpy@s+1)^(0+128)
  8675     1335  0837               	movf	memcpy@s1^(0+128),w
  8676     1336  00BD               	movwf	memcpy@s^(0+128)
  8677     1337  0836               	movf	(memcpy@d1+1)^(0+128),w
  8678     1338  00BC               	movwf	(memcpy@d+1)^(0+128)
  8679     1339  0835               	movf	memcpy@d1^(0+128),w
  8680     133A  00BB               	movwf	memcpy@d^(0+128)
  8681     133B                     l4486:
  8682     133B  3001               	movlw	1
  8683     133C  02B9               	subwf	memcpy@n^(0+128),f
  8684     133D  3000               	movlw	0
  8685     133E  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  8686     133F  0A39               	incf	memcpy@n^(0+128),w
  8687     1340  1903               	btfsc	3,2
  8688     1341  0A3A               	incf	(memcpy@n+1)^(0+128),w
  8689     1342  1903               	btfsc	3,2
  8690     1343  0008               	return
  8691     1344  083D               	movf	memcpy@s^(0+128),w
  8692     1345  0086               	movwf	6
  8693     1346  083E               	movf	(memcpy@s+1)^(0+128),w
  8694     1347  0087               	movwf	7
  8695     1348  0801               	movf	1,w
  8696     1349  00BF               	movwf	memcpy@tmp^(0+128)
  8697     134A  3001               	movlw	1
  8698     134B  07BD               	addwf	memcpy@s^(0+128),f
  8699     134C  3000               	movlw	0
  8700     134D  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  8701     134E  083B               	movf	memcpy@d^(0+128),w
  8702     134F  0086               	movwf	6
  8703     1350  083C               	movf	(memcpy@d+1)^(0+128),w
  8704     1351  0087               	movwf	7
  8705     1352  083F               	movf	memcpy@tmp^(0+128),w
  8706     1353  0081               	movwf	1
  8707     1354  3001               	movlw	1
  8708     1355  07BB               	addwf	memcpy@d^(0+128),f
  8709     1356  3000               	movlw	0
  8710     1357  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8711     1358  2B3B               	goto	l4486
  8712     1359                     __end_of_memcpy:
  8713                           
  8714                           	psect	text39
  8715     1FEC                     __ptext39:	
  8716 ;; *************** function _GenericQueue_IsFull *****************
  8717 ;; Defined at:
  8718 ;;		line 15 in file "generic_queue.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  q               2    0[BANK1 ] PTR struct .
  8721 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;                  2    0[BANK1 ] int 
  8726 ;; Registers used:
  8727 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8728 ;; Tracked objects:
  8729 ;;		On entry : 1F/1
  8730 ;;		On exit  : 1F/1
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8733 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8737 ;;Total ram usage:        4 bytes
  8738 ;; Hardware stack levels used: 1
  8739 ;; Hardware stack levels required when called: 10
  8740 ;; This function calls:
  8741 ;;		Nothing
  8742 ;; This function is called by:
  8743 ;;		_GenericQueue_Enqueue
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747     1FEC                     _GenericQueue_IsFull:	
  8748                           ;psect for function _GenericQueue_IsFull
  8749                           
  8750                           
  8751                           ;generic_queue.c: 16:     return (q->size == 15);
  8752                           
  8753                           ;incstack = 0
  8754                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8755     1FEC  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8756     1FED  3E5E               	addlw	94
  8757     1FEE  0086               	movwf	6
  8758     1FEF  3000               	movlw	0
  8759     1FF0  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8760     1FF1  0087               	movwf	7
  8761     1FF2  300F               	movlw	15
  8762     1FF3  0601               	xorwf	1,w
  8763     1FF4  1D03               	btfss	3,2
  8764     1FF5  2FF8               	goto	u3750
  8765     1FF6  3001               	movlw	1
  8766     1FF7  2FF9               	goto	u3760
  8767     1FF8                     u3750:
  8768     1FF8  3000               	movlw	0
  8769     1FF9                     u3760:
  8770     1FF9  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8771     1FFA  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8772     1FFB  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8773     1FFC  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8774     1FFD  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8775     1FFE  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8776     1FFF  0008               	return
  8777     2000                     __end_of_GenericQueue_IsFull:
  8778                           
  8779                           	psect	text40
  8780     166E                     __ptext40:	
  8781 ;; *************** function _GenericQueue_Contains *****************
  8782 ;; Defined at:
  8783 ;;		line 52 in file "generic_queue.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  q               2   22[BANK1 ] PTR struct .
  8786 ;;		 -> keyboard(101), 
  8787 ;;  item            1   24[BANK1 ] PTR const void 
  8788 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2934(1), 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;  i               1   29[BANK1 ] unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;                  1    wreg      _Bool 
  8793 ;; Registers used:
  8794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8795 ;; Tracked objects:
  8796 ;;		On entry : 1F/1
  8797 ;;		On exit  : 1F/1
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        8 bytes
  8805 ;; Hardware stack levels used: 1
  8806 ;; Hardware stack levels required when called: 11
  8807 ;; This function calls:
  8808 ;;		_GenericQueue_IsEmpty
  8809 ;;		___awmod
  8810 ;;		___wmul
  8811 ;;		_memcmp
  8812 ;; This function is called by:
  8813 ;;		_APP_KeyboardUpdateState
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817     166E                     _GenericQueue_Contains:	
  8818                           ;psect for function _GenericQueue_Contains
  8819                           
  8820                           
  8821                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8825     166E  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8826     166F  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8827     1670  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8828     1671  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8829     1672  319F  27C5  3196   	fcall	_GenericQueue_IsEmpty
  8830     1675  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8831     1676  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8832     1677  1D03               	btfss	3,2
  8833     1678  2ECE               	goto	l4770
  8834                           
  8835                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8836     1679  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8837     167A  3E5C               	addlw	92
  8838     167B  0086               	movwf	6
  8839     167C  3000               	movlw	0
  8840     167D  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8841     167E  0087               	movwf	7
  8842     167F  0801               	movf	1,w
  8843     1680                     L6:
  8844     1680  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8845     1681  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8846     1682  3E5D               	addlw	93
  8847     1683  0086               	movwf	6
  8848     1684  3000               	movlw	0
  8849     1685  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8850     1686  0087               	movwf	7
  8851     1687  0801               	movf	1,w
  8852     1688  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8853     1689  1903               	btfsc	3,2
  8854     168A  2ECE               	goto	l4770
  8855                           
  8856                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8857     168B  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8858     168C  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8859     168D  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8860     168E  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8861     168F  00AF               	movwf	___wmul@multiplier^(0+128)
  8862     1690  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8863     1691  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8864     1692  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8865     1693  3E5A               	addlw	90
  8866     1694  0086               	movwf	6
  8867     1695  3000               	movlw	0
  8868     1696  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8869     1697  0087               	movwf	7
  8870     1698  3F40               	moviw [0]fsr1
  8871     1699  00B1               	movwf	___wmul@multiplicand^(0+128)
  8872     169A  3F41               	moviw [1]fsr1
  8873     169B  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8874     169C  3191  215F  3196   	fcall	___wmul
  8875     169F  082F               	movf	?___wmul^(0+128),w
  8876     16A0  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8877     16A1  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8878     16A2  0830               	movf	(?___wmul+1)^(0+128),w
  8879     16A3  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8880     16A4  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8881     16A5  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8882     16A6  00B5               	movwf	memcmp@vl^(0+128)
  8883     16A7  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8884     16A8  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8885     16A9  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8886     16AA  00B7               	movwf	memcmp@vr^(0+128)
  8887     16AB  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8888     16AC  3E5A               	addlw	90
  8889     16AD  0086               	movwf	6
  8890     16AE  3000               	movlw	0
  8891     16AF  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8892     16B0  0087               	movwf	7
  8893     16B1  3F40               	moviw [0]fsr1
  8894     16B2  00B8               	movwf	memcmp@n^(0+128)
  8895     16B3  3F41               	moviw [1]fsr1
  8896     16B4  00B9               	movwf	(memcmp@n+1)^(0+128)
  8897     16B5  3193  2389  3196   	fcall	_memcmp
  8898     16B8  0835               	movf	?_memcmp^(0+128),w
  8899     16B9  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8900     16BA  1D03               	btfss	3,2
  8901     16BB  2EBE               	goto	l4766
  8902                           
  8903                           ;generic_queue.c: 56:                 return 1;
  8904     16BC  3001               	movlw	1
  8905     16BD  0008               	return
  8906     16BE                     l4766:
  8907                           
  8908                           ;generic_queue.c: 58:         }
  8909     16BE  300F               	movlw	15
  8910     16BF  00A8               	movwf	___awmod@divisor^(0+128)
  8911     16C0  3000               	movlw	0
  8912     16C1  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8913     16C2  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8914     16C3  3E01               	addlw	1
  8915     16C4  00AA               	movwf	___awmod@dividend^(0+128)
  8916     16C5  3000               	movlw	0
  8917     16C6  1803               	skipnc
  8918     16C7  3001               	movlw	1
  8919     16C8  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8920     16C9  3194  24F5  3196   	fcall	___awmod
  8921     16CC  0828               	movf	?___awmod^(0+128),w
  8922     16CD  2E80               	goto	L6
  8923     16CE                     l4770:
  8924                           
  8925                           ;generic_queue.c: 60:     return 0;
  8926     16CE  3000               	movlw	0
  8927     16CF  0008               	return
  8928     16D0                     __end_of_GenericQueue_Contains:
  8929                           
  8930                           	psect	text41
  8931     1389                     __ptext41:	
  8932 ;; *************** function _memcmp *****************
  8933 ;; Defined at:
  8934 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  vl              2   13[BANK1 ] PTR const void 
  8937 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8938 ;;  vr              1   15[BANK1 ] PTR const void 
  8939 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2935(1), APP_KeyboardUpdateState@
      +usbHidCode_2934(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8940 ;;  n               2   16[BANK1 ] unsigned int 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8943 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8944 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8945 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2935(1), APP_KeyboardUpdateState@
      +usbHidCode_2934(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;                  2   13[BANK1 ] int 
  8948 ;; Registers used:
  8949 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8950 ;; Tracked objects:
  8951 ;;		On entry : 1F/1
  8952 ;;		On exit  : 1F/1
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8955 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;Total ram usage:        9 bytes
  8960 ;; Hardware stack levels used: 1
  8961 ;; Hardware stack levels required when called: 10
  8962 ;; This function calls:
  8963 ;;		Nothing
  8964 ;; This function is called by:
  8965 ;;		_GenericQueue_Remove
  8966 ;;		_GenericQueue_Contains
  8967 ;; This function uses a non-reentrant model
  8968 ;;
  8969                           
  8970     1389                     _memcmp:	
  8971                           ;psect for function _memcmp
  8972                           
  8973                           
  8974                           ;incstack = 0
  8975                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8976     1389  0836               	movf	(memcmp@vl+1)^(0+128),w
  8977     138A  00BC               	movwf	(memcmp@l+1)^(0+128)
  8978     138B  0835               	movf	memcmp@vl^(0+128),w
  8979     138C  00BB               	movwf	memcmp@l^(0+128)
  8980     138D  0837               	movf	memcmp@vr^(0+128),w
  8981     138E  00BD               	movwf	memcmp@r^(0+128)
  8982     138F  2BA7               	goto	l4544
  8983     1390                     l4546:
  8984     1390  083D               	movf	memcmp@r^(0+128),w
  8985     1391  0086               	movwf	6
  8986     1392  0187               	clrf	7
  8987     1393  083B               	movf	memcmp@l^(0+128),w
  8988     1394  0084               	movwf	4
  8989     1395  083C               	movf	(memcmp@l+1)^(0+128),w
  8990     1396  0085               	movwf	5
  8991     1397  0800               	movf	0,w
  8992     1398  0601               	xorwf	1,w
  8993     1399  1D03               	btfss	3,2
  8994     139A  2BAB               	goto	l4548
  8995     139B  3001               	movlw	1
  8996     139C  02B8               	subwf	memcmp@n^(0+128),f
  8997     139D  3000               	movlw	0
  8998     139E  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8999     139F  3001               	movlw	1
  9000     13A0  07BB               	addwf	memcmp@l^(0+128),f
  9001     13A1  3000               	movlw	0
  9002     13A2  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  9003     13A3  3001               	movlw	1
  9004     13A4  00BA               	movwf	??_memcmp^(0+128)
  9005     13A5  083A               	movf	??_memcmp^(0+128),w
  9006     13A6  07BD               	addwf	memcmp@r^(0+128),f
  9007     13A7                     l4544:
  9008     13A7  0838               	movf	memcmp@n^(0+128),w
  9009     13A8  0439               	iorwf	(memcmp@n+1)^(0+128),w
  9010     13A9  1D03               	btfss	3,2
  9011     13AA  2B90               	goto	l4546
  9012     13AB                     l4548:
  9013     13AB  0838               	movf	memcmp@n^(0+128),w
  9014     13AC  0439               	iorwf	(memcmp@n+1)^(0+128),w
  9015     13AD  1D03               	btfss	3,2
  9016     13AE  2BB2               	goto	l4552
  9017     13AF  01B5               	clrf	?_memcmp^(0+128)
  9018     13B0  01B6               	clrf	(?_memcmp+1)^(0+128)
  9019     13B1  0008               	return
  9020     13B2                     l4552:
  9021     13B2  083B               	movf	memcmp@l^(0+128),w
  9022     13B3  0086               	movwf	6
  9023     13B4  083C               	movf	(memcmp@l+1)^(0+128),w
  9024     13B5  0087               	movwf	7
  9025     13B6  083D               	movf	memcmp@r^(0+128),w
  9026     13B7  0084               	movwf	4
  9027     13B8  0185               	clrf	5
  9028     13B9  0800               	movf	0,w
  9029     13BA  0201               	subwf	1,w
  9030     13BB  00B5               	movwf	?_memcmp^(0+128)
  9031     13BC  01B6               	clrf	(?_memcmp^(0+128)+1)
  9032     13BD  1C03               	skipc
  9033     13BE  03B6               	decf	(?_memcmp+1)^(0+128),f
  9034     13BF  0008               	return
  9035     13C0                     __end_of_memcmp:
  9036                           
  9037                           	psect	text42
  9038     115F                     __ptext42:	
  9039 ;; *************** function ___wmul *****************
  9040 ;; Defined at:
  9041 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  multiplier      2    7[BANK1 ] unsigned int 
  9044 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  product         2   11[BANK1 ] unsigned int 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;                  2    7[BANK1 ] unsigned int 
  9049 ;; Registers used:
  9050 ;;		wreg, status,2, status,0
  9051 ;; Tracked objects:
  9052 ;;		On entry : 1F/1
  9053 ;;		On exit  : 1F/1
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        6 bytes
  9061 ;; Hardware stack levels used: 1
  9062 ;; Hardware stack levels required when called: 10
  9063 ;; This function calls:
  9064 ;;		Nothing
  9065 ;; This function is called by:
  9066 ;;		_GenericQueue_Enqueue
  9067 ;;		_GenericQueue_Dequeue
  9068 ;;		_GenericQueue_Remove
  9069 ;;		_GenericQueue_Contains
  9070 ;;		_GenericQueue_CopyToArray
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074     115F                     ___wmul:	
  9075                           ;psect for function ___wmul
  9076                           
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9080     115F  01B3               	clrf	___wmul@product^(0+128)
  9081     1160  01B4               	clrf	(___wmul@product+1)^(0+128)
  9082     1161                     l4558:
  9083     1161  1C2F               	btfss	___wmul@multiplier^(0+128),0
  9084     1162  2967               	goto	l1282
  9085     1163  0831               	movf	___wmul@multiplicand^(0+128),w
  9086     1164  07B3               	addwf	___wmul@product^(0+128),f
  9087     1165  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  9088     1166  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  9089     1167                     l1282:
  9090     1167  3001               	movlw	1
  9091     1168                     u3815:
  9092     1168  35B1               	lslf	___wmul@multiplicand^(0+128),f
  9093     1169  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9094     116A  0B89               	decfsz	9,f
  9095     116B  2968               	goto	u3815
  9096     116C  3001               	movlw	1
  9097     116D                     u3825:
  9098     116D  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9099     116E  0CAF               	rrf	___wmul@multiplier^(0+128),f
  9100     116F  0B89               	decfsz	9,f
  9101     1170  296D               	goto	u3825
  9102     1171  082F               	movf	___wmul@multiplier^(0+128),w
  9103     1172  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9104     1173  1D03               	btfss	3,2
  9105     1174  2961               	goto	l4558
  9106     1175  0834               	movf	(___wmul@product+1)^(0+128),w
  9107     1176  00B0               	movwf	(?___wmul+1)^(0+128)
  9108     1177  0833               	movf	___wmul@product^(0+128),w
  9109     1178  00AF               	movwf	?___wmul^(0+128)
  9110     1179  0008               	return
  9111     117A                     __end_of___wmul:
  9112                           
  9113                           	psect	text43
  9114     14F5                     __ptext43:	
  9115 ;; *************** function ___awmod *****************
  9116 ;; Defined at:
  9117 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  divisor         2    0[BANK1 ] int 
  9120 ;;  dividend        2    2[BANK1 ] int 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  sign            1    6[BANK1 ] unsigned char 
  9123 ;;  counter         1    5[BANK1 ] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  2    0[BANK1 ] int 
  9126 ;; Registers used:
  9127 ;;		wreg, status,2, status,0
  9128 ;; Tracked objects:
  9129 ;;		On entry : 1F/1
  9130 ;;		On exit  : 1F/1
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        7 bytes
  9138 ;; Hardware stack levels used: 1
  9139 ;; Hardware stack levels required when called: 10
  9140 ;; This function calls:
  9141 ;;		Nothing
  9142 ;; This function is called by:
  9143 ;;		_GenericQueue_Enqueue
  9144 ;;		_GenericQueue_Dequeue
  9145 ;;		_GenericQueue_Remove
  9146 ;;		_GenericQueue_Contains
  9147 ;;		_GenericQueue_CopyToArray
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151     14F5                     ___awmod:	
  9152                           ;psect for function ___awmod
  9153                           
  9154                           
  9155                           ;incstack = 0
  9156                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9157     14F5  01AE               	clrf	___awmod@sign^(0+128)
  9158     14F6  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  9159     14F7  2CFF               	goto	l4578
  9160     14F8  09AA               	comf	___awmod@dividend^(0+128),f
  9161     14F9  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9162     14FA  0AAA               	incf	___awmod@dividend^(0+128),f
  9163     14FB  1903               	skipnz
  9164     14FC  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9165     14FD  01AE               	clrf	___awmod@sign^(0+128)
  9166     14FE  0AAE               	incf	___awmod@sign^(0+128),f
  9167     14FF                     l4578:
  9168     14FF  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  9169     1500  2D06               	goto	l4582
  9170     1501  09A8               	comf	___awmod@divisor^(0+128),f
  9171     1502  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  9172     1503  0AA8               	incf	___awmod@divisor^(0+128),f
  9173     1504  1903               	skipnz
  9174     1505  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  9175     1506                     l4582:
  9176     1506  0828               	movf	___awmod@divisor^(0+128),w
  9177     1507  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  9178     1508  1903               	btfsc	3,2
  9179     1509  2D2D               	goto	l4600
  9180     150A  01AD               	clrf	___awmod@counter^(0+128)
  9181     150B  0AAD               	incf	___awmod@counter^(0+128),f
  9182     150C                     l4590:
  9183     150C  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  9184     150D  2D18               	goto	l4592
  9185     150E  3001               	movlw	1
  9186     150F                     u3875:
  9187     150F  35A8               	lslf	___awmod@divisor^(0+128),f
  9188     1510  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  9189     1511  0B89               	decfsz	9,f
  9190     1512  2D0F               	goto	u3875
  9191     1513  3001               	movlw	1
  9192     1514  00AC               	movwf	??___awmod^(0+128)
  9193     1515  082C               	movf	??___awmod^(0+128),w
  9194     1516  07AD               	addwf	___awmod@counter^(0+128),f
  9195     1517  2D0C               	goto	l4590
  9196     1518                     l4592:
  9197     1518  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9198     1519  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  9199     151A  1D03               	skipz
  9200     151B  2D1E               	goto	u3895
  9201     151C  0828               	movf	___awmod@divisor^(0+128),w
  9202     151D  022A               	subwf	___awmod@dividend^(0+128),w
  9203     151E                     u3895:
  9204     151E  1C03               	skipc
  9205     151F  2D24               	goto	l4596
  9206     1520  0828               	movf	___awmod@divisor^(0+128),w
  9207     1521  02AA               	subwf	___awmod@dividend^(0+128),f
  9208     1522  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9209     1523  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  9210     1524                     l4596:
  9211     1524  3001               	movlw	1
  9212     1525                     u3905:
  9213     1525  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  9214     1526  0CA8               	rrf	___awmod@divisor^(0+128),f
  9215     1527  0B89               	decfsz	9,f
  9216     1528  2D25               	goto	u3905
  9217     1529  3001               	movlw	1
  9218     152A  02AD               	subwf	___awmod@counter^(0+128),f
  9219     152B  1D03               	btfss	3,2
  9220     152C  2D18               	goto	l4592
  9221     152D                     l4600:
  9222     152D  082E               	movf	___awmod@sign^(0+128),w
  9223     152E  1903               	btfsc	3,2
  9224     152F  2D35               	goto	l4604
  9225     1530  09AA               	comf	___awmod@dividend^(0+128),f
  9226     1531  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9227     1532  0AAA               	incf	___awmod@dividend^(0+128),f
  9228     1533  1903               	skipnz
  9229     1534  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9230     1535                     l4604:
  9231     1535  082B               	movf	(___awmod@dividend+1)^(0+128),w
  9232     1536  00A9               	movwf	(?___awmod+1)^(0+128)
  9233     1537  082A               	movf	___awmod@dividend^(0+128),w
  9234     1538  00A8               	movwf	?___awmod^(0+128)
  9235     1539  0008               	return
  9236     153A                     __end_of___awmod:
  9237                           
  9238                           	psect	text44
  9239     1FC5                     __ptext44:	
  9240 ;; *************** function _GenericQueue_IsEmpty *****************
  9241 ;; Defined at:
  9242 ;;		line 11 in file "generic_queue.c"
  9243 ;; Parameters:    Size  Location     Type
  9244 ;;  q               2    0[BANK1 ] PTR struct .
  9245 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  9246 ;; Auto vars:     Size  Location     Type
  9247 ;;		None
  9248 ;; Return value:  Size  Location     Type
  9249 ;;                  2    0[BANK1 ] int 
  9250 ;; Registers used:
  9251 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9252 ;; Tracked objects:
  9253 ;;		On entry : 1F/1
  9254 ;;		On exit  : 1F/1
  9255 ;;		Unchanged: 0/0
  9256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9257 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;Total ram usage:        4 bytes
  9262 ;; Hardware stack levels used: 1
  9263 ;; Hardware stack levels required when called: 10
  9264 ;; This function calls:
  9265 ;;		Nothing
  9266 ;; This function is called by:
  9267 ;;		_PS2Keyboard_GetScanCode
  9268 ;;		_GenericQueue_Dequeue
  9269 ;;		_GenericQueue_Remove
  9270 ;;		_GenericQueue_Contains
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274     1FC5                     _GenericQueue_IsEmpty:	
  9275                           ;psect for function _GenericQueue_IsEmpty
  9276                           
  9277                           
  9278                           ;generic_queue.c: 12:     return (q->size == 0);
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  9282     1FC5  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  9283     1FC6  3E5E               	addlw	94
  9284     1FC7  0086               	movwf	6
  9285     1FC8  3000               	movlw	0
  9286     1FC9  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  9287     1FCA  0087               	movwf	7
  9288     1FCB  0801               	movf	1,w
  9289     1FCC  1D03               	btfss	3,2
  9290     1FCD  2FD0               	goto	u3730
  9291     1FCE  3001               	movlw	1
  9292     1FCF  2FD1               	goto	u3740
  9293     1FD0                     u3730:
  9294     1FD0  3000               	movlw	0
  9295     1FD1                     u3740:
  9296     1FD1  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  9297     1FD2  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  9298     1FD3  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  9299     1FD4  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  9300     1FD5  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  9301     1FD6  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  9302     1FD7  0008               	return
  9303     1FD8                     __end_of_GenericQueue_IsEmpty:
  9304                           
  9305                           	psect	text45
  9306     1F13                     __ptext45:	
  9307 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  9308 ;; Defined at:
  9309 ;;		line 517 in file "app_device_keyboard.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;                  1    wreg      void 
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 1C/1
  9320 ;;		On exit  : 1F/2
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        0 bytes
  9328 ;; Hardware stack levels used: 1
  9329 ;; Hardware stack levels required when called: 11
  9330 ;; This function calls:
  9331 ;;		_PS2Keyboard_SendCommand
  9332 ;; This function is called by:
  9333 ;;		_APP_KeyboardTasks
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337     1F13                     _APP_KeyboardProcessOutputReport:	
  9338                           ;psect for function _APP_KeyboardProcessOutputReport
  9339                           
  9340                           
  9341                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
  9342                           
  9343                           ;incstack = 0
  9344                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  9345     1F13  3090               	movlw	144
  9346     1F14  0086               	movwf	6
  9347     1F15  3023               	movlw	35
  9348     1F16  0087               	movwf	7
  9349     1F17  0022               	movlb	2	; select bank2
  9350     1F18  0820               	movf	32,w	;volatile
  9351     1F19  0081               	movwf	1
  9352                           
  9353                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
  9354     1F1A  30ED               	movlw	237
  9355     1F1B  3191  21B0         	fcall	_PS2Keyboard_SendCommand
  9356     1F1D  0008               	return
  9357     1F1E                     __end_of_APP_KeyboardProcessOutputReport:
  9358                           
  9359                           	psect	text46
  9360     11B0                     __ptext46:	
  9361 ;; *************** function _PS2Keyboard_SendCommand *****************
  9362 ;; Defined at:
  9363 ;;		line 60 in file "ps2_keyboard.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  cmd             1    wreg     unsigned char 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  cmd             1    0[BANK1 ] unsigned char 
  9368 ;; Return value:  Size  Location     Type
  9369 ;;                  1    wreg      void 
  9370 ;; Registers used:
  9371 ;;		wreg, status,2
  9372 ;; Tracked objects:
  9373 ;;		On entry : 1C/1
  9374 ;;		On exit  : 1F/2
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9381 ;;Total ram usage:        1 bytes
  9382 ;; Hardware stack levels used: 1
  9383 ;; Hardware stack levels required when called: 10
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_APP_KeyboardUpdateState
  9388 ;;		_APP_KeyboardProcessOutputReport
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392     11B0                     _PS2Keyboard_SendCommand:	
  9393                           ;psect for function _PS2Keyboard_SendCommand
  9394                           
  9395                           
  9396                           ;incstack = 0
  9397                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  9398                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  9399     11B0  0021               	movlb	1	; select bank1
  9400     11B1  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  9401                           
  9402                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  9403     11B2  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  9404     11B3  0022               	movlb	2	; select bank2
  9405     11B4  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
  9406                           
  9407                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  9408     11B5  138B               	bcf	11,7	;volatile
  9409     11B6  0021               	movlb	1	; select bank1
  9410     11B7  120C               	bcf	12,4	;volatile
  9411     11B8  0022               	movlb	2	; select bank2
  9412     11B9  120C               	bcf	12,4	;volatile
  9413                           
  9414                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  9415     11BA  30F0               	movlw	240
  9416     11BB                     u6427:
  9417     11BB  3200               	nop2
  9418     11BC  0B89               	decfsz	9,f
  9419     11BD  29BB               	goto	u6427
  9420     11BE  0021               	movlb	1	; select bank1
  9421     11BF  160C               	bsf	12,4	;volatile
  9422                           
  9423                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  9424     11C0  0020               	movlb	0	; select bank0
  9425     11C1  01E9               	clrf	_keyboardCommandCount	;volatile
  9426                           
  9427                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  9428     11C2  300C               	movlw	12
  9429     11C3  0022               	movlb	2	; select bank2
  9430     11C4  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
  9431                           
  9432                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  9433     11C5  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  9434     11C6  0021               	movlb	1	; select bank1
  9435     11C7  128C               	bcf	12,5	;volatile
  9436     11C8  0022               	movlb	2	; select bank2
  9437     11C9  128C               	bcf	12,5	;volatile
  9438                           
  9439                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  9440     11CA  178B               	bsf	11,7	;volatile
  9441     11CB  0008               	return
  9442     11CC                     __end_of_PS2Keyboard_SendCommand:
  9443                           
  9444                           	psect	intentry
  9445     0004                     __pintentry:	
  9446 ;; *************** function _INTERRUPT_InterruptManager *****************
  9447 ;; Defined at:
  9448 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;		None
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;		None
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;Total ram usage:        0 bytes
  9467 ;; Hardware stack levels used: 1
  9468 ;; Hardware stack levels required when called: 9
  9469 ;; This function calls:
  9470 ;;		NULL
  9471 ;;		_EUSART_Receive_ISR
  9472 ;;		_EUSART_Transmit_ISR
  9473 ;;		_PIN_MANAGER_IOC
  9474 ;;		_TMR2_ISR
  9475 ;;		_USBDeviceTasks
  9476 ;; This function is called by:
  9477 ;;		Interrupt level 1
  9478 ;; This function uses a non-reentrant model
  9479 ;;
  9480                           
  9481     0004                     _INTERRUPT_InterruptManager:
  9482                           
  9483                           ;incstack = 0
  9484     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9485                           
  9486                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9487     0005  3180               	pagesel	$
  9488                           
  9489                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  9490     0006  198B               	btfsc	11,3	;volatile
  9491     0007  1C0B               	btfss	11,0	;volatile
  9492     0008  280D               	goto	i1l141
  9493                           
  9494                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  9495     0009  319F  2708  3180   	fcall	_PIN_MANAGER_IOC
  9496                           
  9497                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9498     000C  283B               	goto	i1l153
  9499     000D                     i1l141:	
  9500                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  9501                           
  9502     000D  1F0B               	btfss	11,6	;volatile
  9503     000E  283B               	goto	i1l153
  9504                           
  9505                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  9506     000F  0021               	movlb	1	; select bank1
  9507     0010  1D12               	btfss	18,2	;volatile
  9508     0011  2819               	goto	i1l144
  9509     0012  0020               	movlb	0	; select bank0
  9510     0013  1D12               	btfss	18,2	;volatile
  9511     0014  2819               	goto	i1l144
  9512                           
  9513                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  9514     0015  3186  26EA  3180   	fcall	_USBDeviceTasks
  9515                           
  9516                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  9517     0018  283B               	goto	i1l153
  9518     0019                     i1l144:	
  9519                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  9520                           
  9521     0019  0021               	movlb	1	; select bank1
  9522     001A  1E11               	btfss	17,4	;volatile
  9523     001B  2826               	goto	i1l146
  9524     001C  0020               	movlb	0	; select bank0
  9525     001D  1E11               	btfss	17,4	;volatile
  9526     001E  2826               	goto	i1l146
  9527                           
  9528                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  9529     001F  0022               	movlb	2	; select bank2
  9530     0020  0849               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  9531     0021  008A               	movwf	10
  9532     0022  0848               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  9533     0023  000A               	callw
  9534     0024  3180               	pagesel	$
  9535                           
  9536                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  9537     0025  283B               	goto	i1l153
  9538     0026                     i1l146:	
  9539                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  9540                           
  9541     0026  0021               	movlb	1	; select bank1
  9542     0027  1E91               	btfss	17,5	;volatile
  9543     0028  2833               	goto	i1l148
  9544     0029  0020               	movlb	0	; select bank0
  9545     002A  1E91               	btfss	17,5	;volatile
  9546     002B  2833               	goto	i1l148
  9547                           
  9548                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  9549     002C  0022               	movlb	2	; select bank2
  9550     002D  0847               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  9551     002E  008A               	movwf	10
  9552     002F  0846               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  9553     0030  000A               	callw
  9554     0031  3180               	pagesel	$
  9555                           
  9556                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9557     0032  283B               	goto	i1l153
  9558     0033                     i1l148:	
  9559                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  9560                           
  9561     0033  0021               	movlb	1	; select bank1
  9562     0034  1C91               	btfss	17,1	;volatile
  9563     0035  283B               	goto	i1l153
  9564     0036  0020               	movlb	0	; select bank0
  9565     0037  1C91               	btfss	17,1	;volatile
  9566     0038  283B               	goto	i1l153
  9567                           
  9568                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  9569     0039  319F  2729         	fcall	_TMR2_ISR
  9570     003B                     i1l153:	
  9571                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  9572                           
  9573     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9574     003C  0009               	retfie
  9575     003D                     __end_of_INTERRUPT_InterruptManager:
  9576                           
  9577                           	psect	text48
  9578     06EA                     __ptext48:	
  9579 ;; *************** function _USBDeviceTasks *****************
  9580 ;; Defined at:
  9581 ;;		line 481 in file "usb/usb_device.c"
  9582 ;; Parameters:    Size  Location     Type
  9583 ;;		None
  9584 ;; Auto vars:     Size  Location     Type
  9585 ;;  i               1   16[BANK0 ] unsigned char 
  9586 ;; Return value:  Size  Location     Type
  9587 ;;                  1    wreg      void 
  9588 ;; Registers used:
  9589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9590 ;; Tracked objects:
  9591 ;;		On entry : 1F/0
  9592 ;;		On exit  : 1F/0
  9593 ;;		Unchanged: 0/0
  9594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;Total ram usage:        2 bytes
  9600 ;; Hardware stack levels used: 1
  9601 ;; Hardware stack levels required when called: 8
  9602 ;; This function calls:
  9603 ;;		_USBCtrlEPAllowStatusStage
  9604 ;;		_USBCtrlEPService
  9605 ;;		_USBIncrement1msInternalTimers
  9606 ;;		_USBStallHandler
  9607 ;;		_USBSuspend
  9608 ;;		_USBWakeFromSuspend
  9609 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9610 ;;		i1_USBDeviceInit
  9611 ;; This function is called by:
  9612 ;;		_INTERRUPT_InterruptManager
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616     06EA                     _USBDeviceTasks:	
  9617                           ;psect for function _USBDeviceTasks
  9618                           
  9619                           
  9620                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  9621                           
  9622                           ;incstack = 0
  9623                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9624     06EA  036C               	decf	_USBDeviceState,w
  9625     06EB  1D03               	btfss	3,2
  9626     06EC  2EF6               	goto	i1l5476
  9627                           
  9628                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  9629     06ED  003D               	movlb	29	; select bank29
  9630     06EE  1A8E               	btfsc	14,5	;volatile
  9631     06EF  2EF6               	goto	i1l5476
  9632                           
  9633                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  9634     06F0  0190               	clrf	16	;volatile
  9635                           
  9636                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  9637     06F1  1412               	bsf	18,0	;volatile
  9638                           
  9639                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  9640     06F2  1612               	bsf	18,4	;volatile
  9641                           
  9642                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  9643     06F3  3002               	movlw	2
  9644     06F4  0020               	movlb	0	; select bank0
  9645     06F5  00EC               	movwf	_USBDeviceState	;volatile
  9646     06F6                     i1l5476:
  9647                           
  9648                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  9649     06F6  003D               	movlb	29	; select bank29
  9650     06F7  1910               	btfsc	16,2	;volatile
  9651     06F8  1D12               	btfss	18,2	;volatile
  9652     06F9  2F03               	goto	i1l5484
  9653                           
  9654                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  9655     06FA  30FB               	movlw	251
  9656     06FB  0020               	movlb	0	; select bank0
  9657     06FC  00DF               	movwf	??_USBDeviceTasks
  9658     06FD  085F               	movf	??_USBDeviceTasks,w
  9659     06FE  003D               	movlb	29	; select bank29
  9660     06FF  0590               	andwf	16,f	;volatile
  9661                           
  9662                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  9663     0700  3191  21E8  3186   	fcall	_USBWakeFromSuspend
  9664     0703                     i1l5484:
  9665                           
  9666                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  9667     0703  003D               	movlb	29	; select bank29
  9668     0704  1C8E               	btfss	14,1	;volatile
  9669     0705  2F09               	goto	i1l492
  9670                           
  9671                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  9672     0706  0020               	movlb	0	; select bank0
  9673     0707  1112               	bcf	18,2	;volatile
  9674                           
  9675                           ;usb/usb_device.c: 654:         return;
  9676     0708  0008               	return
  9677     0709                     i1l492:	
  9678                           ;usb/usb_device.c: 655:     }
  9679                           
  9680                           
  9681                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  9682     0709  1810               	btfsc	16,0	;volatile
  9683     070A  1C12               	btfss	18,0	;volatile
  9684     070B  2F19               	goto	i1l5498
  9685                           
  9686                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  9687     070C  318D  25FE  3186   	fcall	i1_USBDeviceInit
  9688                           
  9689                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  9690     070F  0021               	movlb	1	; select bank1
  9691     0710  1512               	bsf	18,2	;volatile
  9692                           
  9693                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  9694     0711  3004               	movlw	4
  9695     0712  0020               	movlb	0	; select bank0
  9696     0713  00EC               	movwf	_USBDeviceState	;volatile
  9697                           
  9698                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  9699     0714  30FE               	movlw	254
  9700     0715  00DF               	movwf	??_USBDeviceTasks
  9701     0716  085F               	movf	??_USBDeviceTasks,w
  9702     0717  003D               	movlb	29	; select bank29
  9703     0718  0590               	andwf	16,f	;volatile
  9704     0719                     i1l5498:
  9705                           
  9706                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9707     0719  1A10               	btfsc	16,4	;volatile
  9708     071A  1E12               	btfss	18,4	;volatile
  9709     071B  2F1F               	goto	i1l5504
  9710                           
  9711                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9712     071C  3190  20F9  3186   	fcall	_USBSuspend
  9713     071F                     i1l5504:
  9714                           
  9715                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9716     071F  003D               	movlb	29	; select bank29
  9717     0720  1F10               	btfss	16,6	;volatile
  9718     0721  2F47               	goto	i1l5520
  9719                           
  9720                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9721     0722  1F12               	btfss	18,6	;volatile
  9722     0723  2F33               	goto	i1l5510
  9723                           
  9724                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9725     0724  3073               	movlw	115
  9726     0725  0020               	movlb	0	; select bank0
  9727     0726  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9728     0727  3000               	movlw	0
  9729     0728  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9730     0729  3000               	movlw	0
  9731     072A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9732     072B  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9733     072C  3001               	movlw	1
  9734     072D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9735     072E  3000               	movlw	0
  9736     072F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9737     0730  3194  2434  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9738     0733                     i1l5510:
  9739                           
  9740                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9741     0733  30BF               	movlw	191
  9742     0734  0020               	movlb	0	; select bank0
  9743     0735  00DF               	movwf	??_USBDeviceTasks
  9744     0736  085F               	movf	??_USBDeviceTasks,w
  9745     0737  003D               	movlb	29	; select bank29
  9746     0738  0590               	andwf	16,f	;volatile
  9747                           
  9748                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9749     0739  3190  20CA  3186   	fcall	_USBIncrement1msInternalTimers
  9750                           
  9751                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9752     073C  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9753     073D  1903               	btfsc	3,2
  9754     073E  2F41               	goto	i1l498
  9755                           
  9756                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9757     073F  3001               	movlw	1
  9758     0740  02DA               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9759     0741                     i1l498:	
  9760                           ;usb/usb_device.c: 742:             }
  9761                           
  9762                           
  9763                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9764     0741  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9765     0742  1D03               	btfss	3,2
  9766     0743  2F47               	goto	i1l5520
  9767                           
  9768                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9769     0744  318A  2218  3186   	fcall	_USBCtrlEPAllowStatusStage
  9770     0747                     i1l5520:
  9771                           
  9772                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9773     0747  003D               	movlb	29	; select bank29
  9774     0748  1A90               	btfsc	16,5	;volatile
  9775     0749  1E92               	btfss	18,5	;volatile
  9776     074A  2F4E               	goto	i1l5526
  9777                           
  9778                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9779     074B  3192  22A3  3186   	fcall	_USBStallHandler
  9780     074E                     i1l5526:
  9781                           
  9782                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9783     074E  1890               	btfsc	16,1	;volatile
  9784     074F  1C92               	btfss	18,1	;volatile
  9785     0750  2F62               	goto	i1l5534
  9786                           
  9787                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9788     0751  30FF               	movlw	255
  9789     0752  0020               	movlb	0	; select bank0
  9790     0753  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9791     0754  307F               	movlw	127
  9792     0755  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9793     0756  3000               	movlw	0
  9794     0757  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9795     0758  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9796     0759  3001               	movlw	1
  9797     075A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9798     075B  3000               	movlw	0
  9799     075C  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9800     075D  3194  2434  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9801                           
  9802                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9803     0760  003D               	movlb	29	; select bank29
  9804     0761  0193               	clrf	19	;volatile
  9805     0762                     i1l5534:
  9806                           
  9807                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9808     0762  3004               	movlw	4
  9809     0763  0020               	movlb	0	; select bank0
  9810     0764  026C               	subwf	_USBDeviceState,w
  9811     0765  1803               	skipnc
  9812     0766  2F69               	goto	i1l502
  9813                           
  9814                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9815     0767  1112               	bcf	18,2	;volatile
  9816                           
  9817                           ;usb/usb_device.c: 781:         return;
  9818     0768  0008               	return
  9819     0769                     i1l502:	
  9820                           ;usb/usb_device.c: 782:     }
  9821                           
  9822                           
  9823                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9824     0769  003D               	movlb	29	; select bank29
  9825     076A  1D92               	btfss	18,3	;volatile
  9826     076B  2FBA               	goto	i1l503
  9827                           
  9828                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9829     076C  0020               	movlb	0	; select bank0
  9830     076D  01E0               	clrf	USBDeviceTasks@i
  9831     076E  2FB7               	goto	i1l504
  9832     076F                     i1l5544:
  9833                           
  9834                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9835     076F  080F               	movf	15,w	;volatile
  9836     0770  0020               	movlb	0	; select bank0
  9837     0771  00ED               	movwf	_USTATcopy	;volatile
  9838                           
  9839                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9840     0772  0C6D               	rrf	_USTATcopy,w	;volatile
  9841     0773  00DF               	movwf	??_USBDeviceTasks
  9842     0774  0CDF               	rrf	??_USBDeviceTasks,f
  9843     0775  0C5F               	rrf	??_USBDeviceTasks,w
  9844     0776  390F               	andlw	15
  9845     0777  0022               	movlb	2	; select bank2
  9846     0778  00DC               	movwf	_endpoint_number^(0+256)	;volatile
  9847                           
  9848                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9849     0779  30F7               	movlw	247
  9850     077A  0020               	movlb	0	; select bank0
  9851     077B  00DF               	movwf	??_USBDeviceTasks
  9852     077C  085F               	movf	??_USBDeviceTasks,w
  9853     077D  003D               	movlb	29	; select bank29
  9854     077E  0590               	andwf	16,f	;volatile
  9855                           
  9856                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9857     077F  0020               	movlb	0	; select bank0
  9858     0780  196D               	btfsc	_USTATcopy,2	;volatile
  9859     0781  2F86               	goto	i1l5554
  9860                           
  9861                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9862     0782  0022               	movlb	2	; select bank2
  9863     0783  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9864     0784  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9865     0785  2F89               	goto	L7
  9866     0786                     i1l5554:	
  9867                           ;usb/usb_device.c: 805:                 }
  9868                           
  9869                           
  9870                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9871     0786  0022               	movlb	2	; select bank2
  9872     0787  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9873     0788  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9874     0789                     L7:
  9875     0789  0086               	movwf	6
  9876     078A  3001               	movlw	1	; select bank2/3
  9877     078B  0087               	movwf	7
  9878     078C  0801               	movf	1,w
  9879     078D  3901               	andlw	1
  9880     078E  0020               	movlb	0	; select bank0
  9881     078F  00DF               	movwf	??_USBDeviceTasks
  9882     0790  3001               	movlw	1
  9883     0791  06DF               	xorwf	??_USBDeviceTasks,f
  9884     0792  0801               	movf	1,w
  9885     0793  065F               	xorwf	??_USBDeviceTasks,w
  9886     0794  39FE               	andlw	-2
  9887     0795  065F               	xorwf	??_USBDeviceTasks,w
  9888     0796  0081               	movwf	1
  9889                           
  9890                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9891     0797  0022               	movlb	2	; select bank2
  9892     0798  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9893     0799  1D03               	btfss	3,2
  9894     079A  2F9F               	goto	i1l5560
  9895                           
  9896                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9897     079B  3195  253A  3186   	fcall	_USBCtrlEPService
  9898                           
  9899                           ;usb/usb_device.c: 817:                 }
  9900     079E  2FAE               	goto	i1l5562
  9901     079F                     i1l5560:
  9902                           
  9903                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9904     079F  3072               	movlw	114
  9905     07A0  0020               	movlb	0	; select bank0
  9906     07A1  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9907     07A2  3000               	movlw	0
  9908     07A3  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9909     07A4  306D               	movlw	low _USTATcopy
  9910     07A5  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9911     07A6  3000               	movlw	high _USTATcopy
  9912     07A7  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9913     07A8  3000               	movlw	0
  9914     07A9  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9915     07AA  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9916     07AB  3194  2434  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9917     07AE                     i1l5562:
  9918                           
  9919                           ;usb/usb_device.c: 827:         }
  9920     07AE  3001               	movlw	1
  9921     07AF  0020               	movlb	0	; select bank0
  9922     07B0  00DF               	movwf	??_USBDeviceTasks
  9923     07B1  085F               	movf	??_USBDeviceTasks,w
  9924     07B2  07E0               	addwf	USBDeviceTasks@i,f
  9925     07B3  3004               	movlw	4
  9926     07B4  0260               	subwf	USBDeviceTasks@i,w
  9927     07B5  1803               	btfsc	3,0
  9928     07B6  2FBA               	goto	i1l503
  9929     07B7                     i1l504:
  9930                           
  9931                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9932     07B7  003D               	movlb	29	; select bank29
  9933     07B8  1990               	btfsc	16,3	;volatile
  9934     07B9  2F6F               	goto	i1l5544
  9935     07BA                     i1l503:	
  9936                           ;usb/usb_device.c: 828:     }
  9937                           
  9938                           
  9939                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9940     07BA  0020               	movlb	0	; select bank0
  9941     07BB  1112               	bcf	18,2	;volatile
  9942     07BC  0008               	return
  9943     07BD                     __end_of_USBDeviceTasks:
  9944                           
  9945                           	psect	text49
  9946     0DFE                     __ptext49:	
  9947 ;; *************** function i1_USBDeviceInit *****************
  9948 ;; Defined at:
  9949 ;;		line 281 in file "usb/usb_device.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  p               2    4[COMMON] PTR unsigned char 
  9954 ;;		 -> UEP1(1), 
  9955 ;;  i               1    7[COMMON] unsigned char 
  9956 ;;  i               1    6[COMMON] unsigned char 
  9957 ;; Return value:  Size  Location     Type
  9958 ;;                  1    wreg      void 
  9959 ;; Registers used:
  9960 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9961 ;; Tracked objects:
  9962 ;;		On entry : 1F/1D
  9963 ;;		On exit  : 1F/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;Total ram usage:        8 bytes
  9971 ;; Hardware stack levels used: 1
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_USBDeviceTasks
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979     0DFE                     i1_USBDeviceInit:	
  9980                           ;psect for function i1_USBDeviceInit
  9981                           
  9982                           
  9983                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9984                           
  9985                           ;incstack = 0
  9986                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9987     0DFE  0021               	movlb	1	; select bank1
  9988     0DFF  1112               	bcf	18,2	;volatile
  9989                           
  9990                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9991     0E00  003D               	movlb	29	; select bank29
  9992     0E01  0193               	clrf	19	;volatile
  9993                           
  9994                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9995     0E02  0190               	clrf	16	;volatile
  9996                           
  9997                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9998     0E03  0198               	clrf	24	;volatile
  9999                           
 10000                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
 10001     0E04  300E               	movlw	14
 10002     0E05  00F5               	movwf	i1USBDeviceInit@p+1
 10003     0E06  3099               	movlw	153
 10004     0E07  00F4               	movwf	i1USBDeviceInit@p
 10005     0E08  01F6               	clrf	i1USBDeviceInit@i_1369
 10006     0E09                     i1l5374:
 10007     0E09  0874               	movf	i1USBDeviceInit@p,w
 10008     0E0A  0086               	movwf	6
 10009     0E0B  0875               	movf	i1USBDeviceInit@p+1,w
 10010     0E0C  0087               	movwf	7
 10011     0E0D  0181               	clrf	1
 10012     0E0E  3001               	movlw	1
 10013     0E0F  07F4               	addwf	i1USBDeviceInit@p,f
 10014     0E10  3000               	movlw	0
 10015     0E11  3DF5               	addwfc	i1USBDeviceInit@p+1,f
 10016     0E12  3001               	movlw	1
 10017     0E13  00F0               	movwf	??i1_USBDeviceInit
 10018     0E14  0870               	movf	??i1_USBDeviceInit,w
 10019     0E15  07F6               	addwf	i1USBDeviceInit@i_1369,f
 10020     0E16  0876               	movf	i1USBDeviceInit@i_1369,w
 10021     0E17  1903               	btfsc	3,2
 10022     0E18  2E09               	goto	i1l5374
 10023                           
 10024                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
 10025     0E19  3016               	movlw	22
 10026     0E1A  0091               	movwf	17	;volatile
 10027     0E1B  309F               	movlw	159
 10028     0E1C  0097               	movwf	23	;volatile
 10029     0E1D  307B               	movlw	123
 10030     0E1E  0092               	movwf	18	;volatile
 10031                           
 10032                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 10033     0E1F  01F7               	clrf	i1USBDeviceInit@i
 10034     0E20                     i1l5390:
 10035                           
 10036                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 10037     0E20  0877               	movf	i1USBDeviceInit@i,w
 10038     0E21  00F0               	movwf	??i1_USBDeviceInit
 10039     0E22  3001               	movlw	1
 10040     0E23                     u492_25:
 10041     0E23  35F0               	lslf	??i1_USBDeviceInit,f
 10042     0E24  3EFF               	addlw	-1
 10043     0E25  1D03               	skipz
 10044     0E26  2E23               	goto	u492_25
 10045     0E27  3570               	lslf	??i1_USBDeviceInit,w
 10046     0E28  3E20               	addlw	32
 10047     0E29  0086               	movwf	6
 10048     0E2A  0187               	clrf	7
 10049     0E2B  3000               	movlw	0
 10050     0E2C  3FC0               	movwi [0]fsr1
 10051     0E2D  3000               	movlw	0
 10052     0E2E  3FC1               	movwi [1]fsr1
 10053     0E2F  3FC2               	movwi [2]fsr1
 10054     0E30  3FC3               	movwi [3]fsr1
 10055                           
 10056                           ;usb/usb_device.c: 314:     }
 10057     0E31  3001               	movlw	1
 10058     0E32  00F0               	movwf	??i1_USBDeviceInit
 10059     0E33  0870               	movf	??i1_USBDeviceInit,w
 10060     0E34  07F7               	addwf	i1USBDeviceInit@i,f
 10061     0E35  3008               	movlw	8
 10062     0E36  0277               	subwf	i1USBDeviceInit@i,w
 10063     0E37  1C03               	skipc
 10064     0E38  2E20               	goto	i1l5390
 10065                           
 10066                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 10067     0E39  170E               	bsf	14,6	;volatile
 10068                           
 10069                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 10070     0E3A  0196               	clrf	22	;volatile
 10071                           
 10072                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 10073     0E3B  120E               	bcf	14,4	;volatile
 10074                           
 10075                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 10076     0E3C  130E               	bcf	14,6	;volatile
 10077     0E3D                     i1l5402:
 10078                           
 10079                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 10080     0E3D  30F7               	movlw	247
 10081     0E3E  00F0               	movwf	??i1_USBDeviceInit
 10082     0E3F  0870               	movf	??i1_USBDeviceInit,w
 10083     0E40  0590               	andwf	16,f	;volatile
 10084                           
 10085                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 10086     0E41  0021               	movlb	1	; select bank1
 10087     0E42  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10088                           
 10089                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 10090     0E43  0022               	movlb	2	; select bank2
 10091     0E44  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10092                           
 10093                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 10094     0E45  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10095     0E46  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10096                           
 10097                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 10098     0E47  003D               	movlb	29	; select bank29
 10099     0E48  1990               	btfsc	16,3	;volatile
 10100     0E49  2E3D               	goto	i1l5402
 10101                           
 10102                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 10103     0E4A  3001               	movlw	1
 10104     0E4B  0022               	movlb	2	; select bank2
 10105     0E4C  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10106                           
 10107                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 10108     0E4D  3001               	movlw	1
 10109     0E4E  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10110                           
 10111                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 10112     0E4F  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10113                           
 10114                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 10115     0E50  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10116                           
 10117                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 10118     0E51  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10119                           
 10120                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 10121     0E52  01F7               	clrf	i1USBDeviceInit@i
 10122     0E53                     i1l5424:
 10123                           
 10124                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 10125     0E53  3577               	lslf	i1USBDeviceInit@i,w
 10126     0E54  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 10127     0E55  0086               	movwf	6
 10128     0E56  0187               	clrf	7
 10129     0E57  3000               	movlw	0
 10130     0E58  3FC0               	movwi [0]fsr1
 10131     0E59  3FC1               	movwi [1]fsr1
 10132                           
 10133                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 10134     0E5A  3577               	lslf	i1USBDeviceInit@i,w
 10135     0E5B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 10136     0E5C  0086               	movwf	6
 10137     0E5D  3001               	movlw	1	; select bank2/3
 10138     0E5E  0087               	movwf	7
 10139     0E5F  3000               	movlw	0
 10140     0E60  3FC0               	movwi [0]fsr1
 10141     0E61  3FC1               	movwi [1]fsr1
 10142                           
 10143                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 10144     0E62  0877               	movf	i1USBDeviceInit@i,w
 10145     0E63  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10146     0E64  0086               	movwf	6
 10147     0E65  3001               	movlw	1	; select bank2/3
 10148     0E66  0087               	movwf	7
 10149     0E67  0181               	clrf	1
 10150                           
 10151                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 10152     0E68  0877               	movf	i1USBDeviceInit@i,w
 10153     0E69  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10154     0E6A  0086               	movwf	6
 10155     0E6B  3001               	movlw	1	; select bank2/3
 10156     0E6C  0087               	movwf	7
 10157     0E6D  0181               	clrf	1
 10158                           
 10159                           ;usb/usb_device.c: 355:     }
 10160     0E6E  3001               	movlw	1
 10161     0E6F  00F0               	movwf	??i1_USBDeviceInit
 10162     0E70  0870               	movf	??i1_USBDeviceInit,w
 10163     0E71  07F7               	addwf	i1USBDeviceInit@i,f
 10164     0E72  3002               	movlw	2
 10165     0E73  0277               	subwf	i1USBDeviceInit@i,w
 10166     0E74  1C03               	skipc
 10167     0E75  2E53               	goto	i1l5424
 10168                           
 10169                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10170     0E76  3028               	movlw	40
 10171     0E77  0020               	movlb	0	; select bank0
 10172     0E78  00E1               	movwf	_pBDTEntryIn
 10173     0E79  3000               	movlw	0
 10174     0E7A  00E2               	movwf	_pBDTEntryIn+1
 10175                           
 10176                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 10177     0E7B  3016               	movlw	22
 10178     0E7C  003D               	movlb	29	; select bank29
 10179     0E7D  0098               	movwf	24	;volatile
 10180                           
 10181                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 10182     0E7E  3040               	movlw	64
 10183     0E7F  00F0               	movwf	??i1_USBDeviceInit
 10184     0E80  3000               	movlw	0
 10185     0E81  00F1               	movwf	??i1_USBDeviceInit+1
 10186     0E82  30FF               	movlw	255
 10187     0E83  0570               	andwf	??i1_USBDeviceInit,w
 10188     0E84  00F2               	movwf	??i1_USBDeviceInit+2
 10189     0E85  307F               	movlw	127
 10190     0E86  0571               	andwf	??i1_USBDeviceInit+1,w
 10191     0E87  00F3               	movwf	??i1_USBDeviceInit+3
 10192     0E88  0872               	movf	??i1_USBDeviceInit+2,w
 10193     0E89  0020               	movlb	0	; select bank0
 10194     0E8A  00A2               	movwf	34	;volatile
 10195     0E8B  0873               	movf	??i1_USBDeviceInit+3,w
 10196     0E8C  00A3               	movwf	35	;volatile
 10197                           
 10198                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 10199     0E8D  3008               	movlw	8
 10200     0E8E  00A1               	movwf	33	;volatile
 10201                           
 10202                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 10203     0E8F  3004               	movlw	4
 10204     0E90  00A0               	movwf	32	;volatile
 10205                           
 10206                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 10207     0E91  17A0               	bsf	32,7	;volatile
 10208                           
 10209                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 10210     0E92  01EF               	clrf	_USBActiveConfiguration	;volatile
 10211                           
 10212                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 10213     0E93  3000               	movlw	0
 10214     0E94  0023               	movlb	3	; select bank3
 10215     0E95  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 10216     0E96  3000               	movlw	0
 10217     0E97  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 10218     0E98  3000               	movlw	0
 10219     0E99  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 10220     0E9A  3000               	movlw	0
 10221     0E9B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 10222                           
 10223                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 10224     0E9C  0022               	movlb	2	; select bank2
 10225     0E9D  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10226                           
 10227                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 10228     0E9E  0020               	movlb	0	; select bank0
 10229     0E9F  01EC               	clrf	_USBDeviceState	;volatile
 10230     0EA0  0008               	return
 10231     0EA1                     __end_ofi1_USBDeviceInit:
 10232                           
 10233                           	psect	text50
 10234     11E8                     __ptext50:	
 10235 ;; *************** function _USBWakeFromSuspend *****************
 10236 ;; Defined at:
 10237 ;;		line 2310 in file "usb/usb_device.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;		None
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;		None
 10242 ;; Return value:  Size  Location     Type
 10243 ;;                  1    wreg      void 
 10244 ;; Registers used:
 10245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10246 ;; Tracked objects:
 10247 ;;		On entry : 1F/1D
 10248 ;;		On exit  : 1F/2
 10249 ;;		Unchanged: 0/0
 10250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;Total ram usage:        1 bytes
 10256 ;; Hardware stack levels used: 1
 10257 ;; Hardware stack levels required when called: 4
 10258 ;; This function calls:
 10259 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10260 ;; This function is called by:
 10261 ;;		_USBDeviceTasks
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265     11E8                     _USBWakeFromSuspend:	
 10266                           ;psect for function _USBWakeFromSuspend
 10267                           
 10268                           
 10269                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 10270                           
 10271                           ;incstack = 0
 10272                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10273     11E8  0022               	movlb	2	; select bank2
 10274     11E9  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10275                           
 10276                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 10277     11EA  3074               	movlw	116
 10278     11EB  0020               	movlb	0	; select bank0
 10279     11EC  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10280     11ED  3000               	movlw	0
 10281     11EE  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10282     11EF  3000               	movlw	0
 10283     11F0  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10284     11F1  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10285     11F2  3000               	movlw	0
 10286     11F3  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10287     11F4  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10288     11F5  3194  2434  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10289                           
 10290                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 10291     11F8  003D               	movlb	29	; select bank29
 10292     11F9  108E               	bcf	14,1	;volatile
 10293                           
 10294                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 10295     11FA  1112               	bcf	18,2	;volatile
 10296     11FB                     i1l5144:	
 10297                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10298                           
 10299                           
 10300                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10301     11FB  1D10               	btfss	16,2	;volatile
 10302     11FC  2A02               	goto	i1l5146
 10303                           
 10304                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 10305     11FD  30FB               	movlw	251
 10306     11FE  00FD               	movwf	??_USBWakeFromSuspend
 10307     11FF  087D               	movf	??_USBWakeFromSuspend,w
 10308     1200  0590               	andwf	16,f	;volatile
 10309     1201  29FB               	goto	i1l5144
 10310     1202                     i1l5146:
 10311                           
 10312                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 10313     1202  0022               	movlb	2	; select bank2
 10314     1203  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10315     1204  0008               	return
 10316     1205                     __end_of_USBWakeFromSuspend:
 10317                           
 10318                           	psect	text51
 10319     10F9                     __ptext51:	
 10320 ;; *************** function _USBSuspend *****************
 10321 ;; Defined at:
 10322 ;;		line 2252 in file "usb/usb_device.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10331 ;; Tracked objects:
 10332 ;;		On entry : 1F/1D
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;Total ram usage:        1 bytes
 10341 ;; Hardware stack levels used: 1
 10342 ;; Hardware stack levels required when called: 4
 10343 ;; This function calls:
 10344 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10345 ;; This function is called by:
 10346 ;;		_USBDeviceTasks
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350     10F9                     _USBSuspend:	
 10351                           ;psect for function _USBSuspend
 10352                           
 10353                           
 10354                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 10355                           
 10356                           ;incstack = 0
 10357                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10358     10F9  1512               	bsf	18,2	;volatile
 10359                           
 10360                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 10361     10FA  30EF               	movlw	239
 10362     10FB  00FD               	movwf	??_USBSuspend
 10363     10FC  087D               	movf	??_USBSuspend,w
 10364     10FD  0590               	andwf	16,f	;volatile
 10365                           
 10366                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 10367     10FE  148E               	bsf	14,1	;volatile
 10368                           
 10369                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 10370     10FF  3001               	movlw	1
 10371     1100  0022               	movlb	2	; select bank2
 10372     1101  00DD               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 10373                           
 10374                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 10375     1102  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10376                           
 10377                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 10378     1103  3075               	movlw	117
 10379     1104  0020               	movlb	0	; select bank0
 10380     1105  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10381     1106  3000               	movlw	0
 10382     1107  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10383     1108  3000               	movlw	0
 10384     1109  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10385     110A  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10386     110B  3000               	movlw	0
 10387     110C  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10388     110D  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10389     110E  3194  2434         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10390     1110  0008               	return
 10391     1111                     __end_of_USBSuspend:
 10392                           
 10393                           	psect	text52
 10394     12A3                     __ptext52:	
 10395 ;; *************** function _USBStallHandler *****************
 10396 ;; Defined at:
 10397 ;;		line 2209 in file "usb/usb_device.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      void 
 10404 ;; Registers used:
 10405 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10406 ;; Tracked objects:
 10407 ;;		On entry : 1F/1D
 10408 ;;		On exit  : 1F/1D
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:        1 bytes
 10416 ;; Hardware stack levels used: 1
 10417 ;; This function calls:
 10418 ;;		Nothing
 10419 ;; This function is called by:
 10420 ;;		_USBDeviceTasks
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424     12A3                     _USBStallHandler:	
 10425                           ;psect for function _USBStallHandler
 10426                           
 10427                           
 10428                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 10429                           
 10430                           ;incstack = 0
 10431                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10432     12A3  1C18               	btfss	24,0	;volatile
 10433     12A4  2AC0               	goto	i1l5178
 10434                           
 10435                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 10436     12A5  0020               	movlb	0	; select bank0
 10437     12A6  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10438     12A7  0086               	movwf	6
 10439     12A8  0187               	clrf	7
 10440     12A9  3080               	movlw	128
 10441     12AA  0601               	xorwf	1,w
 10442     12AB  1D03               	btfss	3,2
 10443     12AC  2ABE               	goto	i1l5176
 10444     12AD  0861               	movf	_pBDTEntryIn,w
 10445     12AE  0086               	movwf	6
 10446     12AF  0862               	movf	_pBDTEntryIn+1,w
 10447     12B0  0087               	movwf	7
 10448     12B1  3084               	movlw	132
 10449     12B2  0601               	xorwf	1,w
 10450     12B3  1D03               	btfss	3,2
 10451     12B4  2ABE               	goto	i1l5176
 10452                           
 10453                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 10454     12B5  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10455     12B6  0086               	movwf	6
 10456     12B7  0187               	clrf	7
 10457     12B8  300C               	movlw	12
 10458     12B9  0081               	movwf	1
 10459                           
 10460                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 10461     12BA  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10462     12BB  0086               	movwf	6
 10463     12BC  0187               	clrf	7
 10464     12BD  1781               	bsf	1,7
 10465     12BE                     i1l5176:
 10466                           
 10467                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 10468     12BE  003D               	movlb	29	; select bank29
 10469     12BF  1018               	bcf	24,0	;volatile
 10470     12C0                     i1l5178:
 10471                           
 10472                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 10473     12C0  30DF               	movlw	223
 10474     12C1  00F0               	movwf	??_USBStallHandler
 10475     12C2  0870               	movf	??_USBStallHandler,w
 10476     12C3  0590               	andwf	16,f	;volatile
 10477     12C4  0008               	return
 10478     12C5                     __end_of_USBStallHandler:
 10479                           
 10480                           	psect	text53
 10481     10CA                     __ptext53:	
 10482 ;; *************** function _USBIncrement1msInternalTimers *****************
 10483 ;; Defined at:
 10484 ;;		line 2998 in file "usb/usb_device.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;		None
 10487 ;; Auto vars:     Size  Location     Type
 10488 ;;		None
 10489 ;; Return value:  Size  Location     Type
 10490 ;;                  1    wreg      void 
 10491 ;; Registers used:
 10492 ;;		wreg, status,2, status,0
 10493 ;; Tracked objects:
 10494 ;;		On entry : 1F/1D
 10495 ;;		On exit  : 1F/2
 10496 ;;		Unchanged: 0/0
 10497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;Total ram usage:        1 bytes
 10503 ;; Hardware stack levels used: 1
 10504 ;; This function calls:
 10505 ;;		Nothing
 10506 ;; This function is called by:
 10507 ;;		_USBDeviceTasks
 10508 ;; This function uses a non-reentrant model
 10509 ;;
 10510                           
 10511     10CA                     _USBIncrement1msInternalTimers:	
 10512                           ;psect for function _USBIncrement1msInternalTimers
 10513                           
 10514                           
 10515                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 10516                           
 10517                           ;incstack = 0
 10518                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 10519     10CA  3001               	movlw	1
 10520     10CB  0023               	movlb	3	; select bank3
 10521     10CC  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 10522     10CD  3000               	movlw	0
 10523     10CE  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 10524     10CF  3000               	movlw	0
 10525     10D0  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 10526     10D1  3000               	movlw	0
 10527     10D2  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 10528                           
 10529                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 10530     10D3  0022               	movlb	2	; select bank2
 10531     10D4  085D               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 10532     10D5  1D03               	btfss	3,2
 10533     10D6  0008               	return
 10534                           
 10535                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 10536     10D7  3001               	movlw	1
 10537     10D8  00F0               	movwf	??_USBIncrement1msInternalTimers
 10538     10D9  0870               	movf	??_USBIncrement1msInternalTimers,w
 10539     10DA  07D4               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 10540                           
 10541                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 10542     10DB  0854               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 10543     10DC  1D03               	btfss	3,2
 10544     10DD  0008               	return
 10545                           
 10546                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 10547     10DE  30FF               	movlw	255
 10548     10DF  00D4               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10549     10E0  0008               	return
 10550     10E1                     __end_of_USBIncrement1msInternalTimers:
 10551                           
 10552                           	psect	text54
 10553     153A                     __ptext54:	
 10554 ;; *************** function _USBCtrlEPService *****************
 10555 ;; Defined at:
 10556 ;;		line 2379 in file "usb/usb_device.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;		None
 10561 ;; Return value:  Size  Location     Type
 10562 ;;                  1    wreg      void 
 10563 ;; Registers used:
 10564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10565 ;; Tracked objects:
 10566 ;;		On entry : 1F/2
 10567 ;;		On exit  : 1D/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        1 bytes
 10575 ;; Hardware stack levels used: 1
 10576 ;; Hardware stack levels required when called: 7
 10577 ;; This function calls:
 10578 ;;		_USBCtrlTrfInHandler
 10579 ;;		_USBCtrlTrfOutHandler
 10580 ;;		_USBCtrlTrfSetupHandler
 10581 ;;		i1_memcpy
 10582 ;; This function is called by:
 10583 ;;		_USBDeviceTasks
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587     153A                     _USBCtrlEPService:	
 10588                           ;psect for function _USBCtrlEPService
 10589                           
 10590                           
 10591                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10595     153A  302D               	movlw	45
 10596     153B  00DA               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 10597                           
 10598                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 10599     153C  0020               	movlb	0	; select bank0
 10600     153D  086D               	movf	_USTATcopy,w	;volatile
 10601     153E  39FD               	andlw	253
 10602     153F  1D03               	btfss	3,2
 10603     1540  2D77               	goto	i1l5198
 10604                           
 10605                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 10606     1541  366D               	lsrf	_USTATcopy,w	;volatile
 10607     1542  393F               	andlw	63
 10608     1543  00DE               	movwf	??_USBCtrlEPService
 10609     1544  3001               	movlw	1
 10610     1545                     u456_25:
 10611     1545  35DE               	lslf	??_USBCtrlEPService,f
 10612     1546  3EFF               	addlw	-1
 10613     1547  1D03               	skipz
 10614     1548  2D45               	goto	u456_25
 10615     1549  355E               	lslf	??_USBCtrlEPService,w
 10616     154A  3E20               	addlw	32
 10617     154B  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10618                           
 10619                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10620     154C  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10621     154D  00E7               	movwf	_pBDTEntryEP0OutNext
 10622     154E  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10623                           
 10624                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 10625     154F  3004               	movlw	4
 10626     1550  0667               	xorwf	_pBDTEntryEP0OutNext,w
 10627     1551  00E7               	movwf	_pBDTEntryEP0OutNext
 10628     1552  3000               	movlw	0
 10629     1553  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 10630     1554  00E8               	movwf	_pBDTEntryEP0OutNext+1
 10631                           
 10632                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 10633     1555  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10634     1556  0086               	movwf	6
 10635     1557  0187               	clrf	7
 10636     1558  0C01               	rrf	1,w
 10637     1559  0C89               	rrf	9,f
 10638     155A  390F               	andlw	15
 10639     155B  3A0D               	xorlw	13
 10640     155C  1D03               	skipz
 10641     155D  2D74               	goto	i1l5196
 10642                           
 10643                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 10644     155E  3040               	movlw	64
 10645     155F  00F6               	movwf	i1memcpy@d1
 10646     1560  3000               	movlw	0
 10647     1561  00F7               	movwf	i1memcpy@d1+1
 10648     1562  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10649     1563  3E02               	addlw	2
 10650     1564  0086               	movwf	6
 10651     1565  0187               	clrf	7
 10652     1566  3F40               	moviw [0]fsr1
 10653     1567  00F8               	movwf	i1memcpy@s1
 10654     1568  3F41               	moviw [1]fsr1
 10655     1569  00F9               	movwf	i1memcpy@s1+1
 10656     156A  3008               	movlw	8
 10657     156B  00FA               	movwf	i1memcpy@n
 10658     156C  3000               	movlw	0
 10659     156D  00FB               	movwf	i1memcpy@n+1
 10660     156E  3193  230D  3195   	fcall	i1_memcpy
 10661                           
 10662                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 10663     1571  3195  2581         	fcall	_USBCtrlTrfSetupHandler
 10664                           
 10665                           ;usb/usb_device.c: 2416:         }
 10666     1573  0008               	return
 10667     1574                     i1l5196:
 10668                           
 10669                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 10670     1574  3193  23FA         	fcall	_USBCtrlTrfOutHandler
 10671     1576  0008               	return
 10672     1577                     i1l5198:
 10673     1577  30FD               	movlw	253
 10674     1578  056D               	andwf	_USTATcopy,w	;volatile
 10675     1579  00DE               	movwf	??_USBCtrlEPService
 10676     157A  3004               	movlw	4
 10677     157B  065E               	xorwf	??_USBCtrlEPService,w
 10678     157C  1D03               	btfss	3,2
 10679     157D  0008               	return
 10680                           
 10681                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 10682     157E  318B  2377         	fcall	_USBCtrlTrfInHandler
 10683     1580  0008               	return
 10684     1581                     __end_of_USBCtrlEPService:
 10685                           
 10686                           	psect	text55
 10687     1581                     __ptext55:	
 10688 ;; *************** function _USBCtrlTrfSetupHandler *****************
 10689 ;; Defined at:
 10690 ;;		line 2472 in file "usb/usb_device.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;		None
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;		None
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      void 
 10697 ;; Registers used:
 10698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 1F/0
 10701 ;;		On exit  : 1D/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:        1 bytes
 10709 ;; Hardware stack levels used: 1
 10710 ;; Hardware stack levels required when called: 6
 10711 ;; This function calls:
 10712 ;;		_USBCheckStdRequest
 10713 ;;		_USBCtrlEPServiceComplete
 10714 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10715 ;; This function is called by:
 10716 ;;		_USBCtrlEPService
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720     1581                     _USBCtrlTrfSetupHandler:	
 10721                           ;psect for function _USBCtrlTrfSetupHandler
 10722                           
 10723                           
 10724                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10725                           
 10726                           ;incstack = 0
 10727                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10728     1581  0022               	movlb	2	; select bank2
 10729     1582  01E0               	clrf	_shortPacketStatus^(0+256)	;volatile
 10730                           
 10731                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10732     1583  01D9               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10733                           
 10734                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10735     1584  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10736                           
 10737                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10738     1585  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10739                           
 10740                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10741     1586  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10742                           
 10743                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10744     1587  0020               	movlb	0	; select bank0
 10745     1588  01EA               	clrf	_controlTransferState	;volatile
 10746                           
 10747                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10748     1589  307F               	movlw	127
 10749     158A  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10750     158B  0861               	movf	_pBDTEntryIn,w
 10751     158C  0086               	movwf	6
 10752     158D  0862               	movf	_pBDTEntryIn+1,w
 10753     158E  0087               	movwf	7
 10754     158F  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10755     1590  0581               	andwf	1,f
 10756                           
 10757                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10758     1591  3004               	movlw	4
 10759     1592  0661               	xorwf	_pBDTEntryIn,w
 10760     1593  00E1               	movwf	_pBDTEntryIn
 10761     1594  3000               	movlw	0
 10762     1595  0662               	xorwf	_pBDTEntryIn+1,w
 10763     1596  00E2               	movwf	_pBDTEntryIn+1
 10764                           
 10765                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10766     1597  307F               	movlw	127
 10767     1598  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10768     1599  0861               	movf	_pBDTEntryIn,w
 10769     159A  0086               	movwf	6
 10770     159B  0862               	movf	_pBDTEntryIn+1,w
 10771     159C  0087               	movwf	7
 10772     159D  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10773     159E  0581               	andwf	1,f
 10774                           
 10775                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10776     159F  3004               	movlw	4
 10777     15A0  0661               	xorwf	_pBDTEntryIn,w
 10778     15A1  00E1               	movwf	_pBDTEntryIn
 10779     15A2  3000               	movlw	0
 10780     15A3  0662               	xorwf	_pBDTEntryIn+1,w
 10781     15A4  00E2               	movwf	_pBDTEntryIn+1
 10782                           
 10783                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10784     15A5  307F               	movlw	127
 10785     15A6  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10786     15A7  0867               	movf	_pBDTEntryEP0OutNext,w
 10787     15A8  0086               	movwf	6
 10788     15A9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10789     15AA  0087               	movwf	7
 10790     15AB  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10791     15AC  0581               	andwf	1,f
 10792                           
 10793                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10794     15AD  0021               	movlb	1	; select bank1
 10795     15AE  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 10796                           
 10797                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10798     15AF  01EC               	clrf	(_inPipes^(0+128)+3)	;volatile
 10799     15B0  01ED               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10800                           
 10801                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10802     15B1  0022               	movlb	2	; select bank2
 10803     15B2  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10804                           
 10805                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10806     15B3  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10807     15B4  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10808                           
 10809                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10810     15B5  3188  20DA  3195   	fcall	_USBCheckStdRequest
 10811                           
 10812                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10813     15B8  3003               	movlw	3
 10814     15B9  0020               	movlb	0	; select bank0
 10815     15BA  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10816     15BB  3000               	movlw	0
 10817     15BC  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10818     15BD  3000               	movlw	0
 10819     15BE  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10820     15BF  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10821     15C0  3000               	movlw	0
 10822     15C1  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10823     15C2  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10824     15C3  3194  2434  3195   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10825                           
 10826                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10827     15C6  318D  2570         	fcall	_USBCtrlEPServiceComplete
 10828     15C8  0008               	return
 10829     15C9                     __end_of_USBCtrlTrfSetupHandler:
 10830                           
 10831                           	psect	text56
 10832     0D70                     __ptext56:	
 10833 ;; *************** function _USBCtrlEPServiceComplete *****************
 10834 ;; Defined at:
 10835 ;;		line 1620 in file "usb/usb_device.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;		None
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;		None
 10840 ;; Return value:  Size  Location     Type
 10841 ;;                  1    wreg      void 
 10842 ;; Registers used:
 10843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/2
 10846 ;;		On exit  : 1D/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;Total ram usage:        4 bytes
 10854 ;; Hardware stack levels used: 1
 10855 ;; Hardware stack levels required when called: 2
 10856 ;; This function calls:
 10857 ;;		_USBCtrlEPAllowDataStage
 10858 ;;		_USBCtrlEPAllowStatusStage
 10859 ;; This function is called by:
 10860 ;;		_USBCtrlTrfSetupHandler
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864     0D70                     _USBCtrlEPServiceComplete:	
 10865                           ;psect for function _USBCtrlEPServiceComplete
 10866                           
 10867                           
 10868                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10869                           
 10870                           ;incstack = 0
 10871                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10872     0D70  003D               	movlb	29	; select bank29
 10873     0D71  120E               	bcf	14,4	;volatile
 10874                           
 10875                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10876     0D72  0021               	movlb	1	; select bank1
 10877     0D73  1BEB               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10878     0D74  2DBC               	goto	i1l566
 10879                           
 10880                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10881     0D75  0022               	movlb	2	; select bank2
 10882     0D76  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10883     0D77  2D85               	goto	i1l4390
 10884                           
 10885                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10886     0D78  3002               	movlw	2
 10887     0D79  0020               	movlb	0	; select bank0
 10888     0D7A  00EA               	movwf	_controlTransferState	;volatile
 10889                           
 10890                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10891     0D7B  0022               	movlb	2	; select bank2
 10892     0D7C  0855               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10893     0D7D  1D03               	btfss	3,2
 10894     0D7E  2D81               	goto	i1l4386
 10895                           
 10896                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10897     0D7F  3197  2799         	fcall	_USBCtrlEPAllowDataStage
 10898     0D81                     i1l4386:
 10899                           
 10900                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10901     0D81  0022               	movlb	2	; select bank2
 10902     0D82  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10903                           
 10904                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10905     0D83  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10906                           
 10907                           ;usb/usb_device.c: 1656:         }
 10908     0D84  0008               	return
 10909     0D85                     i1l4390:
 10910                           
 10911                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10912     0D85  0020               	movlb	0	; select bank0
 10913     0D86  0867               	movf	_pBDTEntryEP0OutNext,w
 10914     0D87  3E01               	addlw	1
 10915     0D88  00F7               	movwf	??_USBCtrlEPServiceComplete
 10916     0D89  3000               	movlw	0
 10917     0D8A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10918     0D8B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10919     0D8C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10920     0D8D  0086               	movwf	6
 10921     0D8E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10922     0D8F  0087               	movwf	7
 10923     0D90  3008               	movlw	8
 10924     0D91  0081               	movwf	1
 10925                           
 10926                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10927     0D92  3040               	movlw	64
 10928     0D93  00F7               	movwf	??_USBCtrlEPServiceComplete
 10929     0D94  3000               	movlw	0
 10930     0D95  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10931     0D96  30FF               	movlw	255
 10932     0D97  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10933     0D98  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10934     0D99  307F               	movlw	127
 10935     0D9A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10936     0D9B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10937     0D9C  0867               	movf	_pBDTEntryEP0OutNext,w
 10938     0D9D  0086               	movwf	6
 10939     0D9E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10940     0D9F  0087               	movwf	7
 10941     0DA0  3142               	addfsr 1,2
 10942     0DA1  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10943     0DA2  3FC0               	movwi [0]fsr1
 10944     0DA3  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10945     0DA4  3FC1               	movwi [1]fsr1
 10946                           
 10947                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10948     0DA5  0867               	movf	_pBDTEntryEP0OutNext,w
 10949     0DA6  0086               	movwf	6
 10950     0DA7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10951     0DA8  0087               	movwf	7
 10952     0DA9  300C               	movlw	12
 10953     0DAA  0081               	movwf	1
 10954                           
 10955                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10956     0DAB  0867               	movf	_pBDTEntryEP0OutNext,w
 10957     0DAC  0086               	movwf	6
 10958     0DAD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10959     0DAE  0087               	movwf	7
 10960     0DAF  1781               	bsf	1,7
 10961                           
 10962                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10963     0DB0  0861               	movf	_pBDTEntryIn,w
 10964     0DB1  0086               	movwf	6
 10965     0DB2  0862               	movf	_pBDTEntryIn+1,w
 10966     0DB3  0087               	movwf	7
 10967     0DB4  3004               	movlw	4
 10968     0DB5  0081               	movwf	1
 10969                           
 10970                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10971     0DB6  0861               	movf	_pBDTEntryIn,w
 10972     0DB7  0086               	movwf	6
 10973     0DB8  0862               	movf	_pBDTEntryIn+1,w
 10974     0DB9  0087               	movwf	7
 10975     0DBA  1781               	bsf	1,7
 10976     0DBB  0008               	return
 10977     0DBC                     i1l566:	
 10978                           ;usb/usb_device.c: 1671:     else
 10979                           
 10980                           
 10981                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10982     0DBC  0020               	movlb	0	; select bank0
 10983     0DBD  1FC0               	btfss	64,7	;volatile
 10984     0DBE  2DD1               	goto	i1l4416
 10985                           
 10986                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10987     0DBF  3001               	movlw	1
 10988     0DC0  00EA               	movwf	_controlTransferState	;volatile
 10989                           
 10990                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10991     0DC1  0022               	movlb	2	; select bank2
 10992     0DC2  0856               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10993     0DC3  1D03               	btfss	3,2
 10994     0DC4  2DC8               	goto	i1l4408
 10995                           
 10996                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10997     0DC5  3197  2799  318D   	fcall	_USBCtrlEPAllowDataStage
 10998     0DC8                     i1l4408:
 10999                           
 11000                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 11001     0DC8  0022               	movlb	2	; select bank2
 11002     0DC9  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11003                           
 11004                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 11005     0DCA  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11006                           
 11007                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 11008     0DCB  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 11009     0DCC  1D03               	btfss	3,2
 11010     0DCD  0008               	return
 11011                           
 11012                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 11013     0DCE  318A  2218         	fcall	_USBCtrlEPAllowStatusStage
 11014     0DD0  0008               	return
 11015     0DD1                     i1l4416:
 11016                           
 11017                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 11018     0DD1  3002               	movlw	2
 11019     0DD2  00EA               	movwf	_controlTransferState	;volatile
 11020                           
 11021                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 11022     0DD3  0867               	movf	_pBDTEntryEP0OutNext,w
 11023     0DD4  3E01               	addlw	1
 11024     0DD5  00F7               	movwf	??_USBCtrlEPServiceComplete
 11025     0DD6  3000               	movlw	0
 11026     0DD7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11027     0DD8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 11028     0DD9  0877               	movf	??_USBCtrlEPServiceComplete,w
 11029     0DDA  0086               	movwf	6
 11030     0DDB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 11031     0DDC  0087               	movwf	7
 11032     0DDD  3008               	movlw	8
 11033     0DDE  0081               	movwf	1
 11034                           
 11035                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 11036     0DDF  3040               	movlw	64
 11037     0DE0  00F7               	movwf	??_USBCtrlEPServiceComplete
 11038     0DE1  3000               	movlw	0
 11039     0DE2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 11040     0DE3  30FF               	movlw	255
 11041     0DE4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 11042     0DE5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 11043     0DE6  307F               	movlw	127
 11044     0DE7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 11045     0DE8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 11046     0DE9  0867               	movf	_pBDTEntryEP0OutNext,w
 11047     0DEA  0086               	movwf	6
 11048     0DEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11049     0DEC  0087               	movwf	7
 11050     0DED  3142               	addfsr 1,2
 11051     0DEE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 11052     0DEF  3FC0               	movwi [0]fsr1
 11053     0DF0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 11054     0DF1  3FC1               	movwi [1]fsr1
 11055                           
 11056                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 11057     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 11058     0DF3  0086               	movwf	6
 11059     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11060     0DF5  0087               	movwf	7
 11061     0DF6  3004               	movlw	4
 11062     0DF7  0081               	movwf	1
 11063                           
 11064                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11065     0DF8  0867               	movf	_pBDTEntryEP0OutNext,w
 11066     0DF9  0086               	movwf	6
 11067     0DFA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11068     0DFB  0087               	movwf	7
 11069     0DFC  1781               	bsf	1,7
 11070     0DFD  2DC8               	goto	i1l4408
 11071     0DFE                     __end_of_USBCtrlEPServiceComplete:	
 11072                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 11073                           
 11074                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 11075                           
 11076                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 11077                           
 11078                           
 11079                           	psect	text57
 11080     1799                     __ptext57:	
 11081 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11082 ;; Defined at:
 11083 ;;		line 1492 in file "usb/usb_device.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;		None
 11086 ;; Auto vars:     Size  Location     Type
 11087 ;;		None
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  1    wreg      void 
 11090 ;; Registers used:
 11091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11092 ;; Tracked objects:
 11093 ;;		On entry : 1F/2
 11094 ;;		On exit  : 1F/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;Total ram usage:        4 bytes
 11102 ;; Hardware stack levels used: 1
 11103 ;; Hardware stack levels required when called: 1
 11104 ;; This function calls:
 11105 ;;		_USBCtrlTrfTxService
 11106 ;; This function is called by:
 11107 ;;		_USBCtrlEPServiceComplete
 11108 ;; This function uses a non-reentrant model
 11109 ;;
 11110                           
 11111     1799                     _USBCtrlEPAllowDataStage:	
 11112                           ;psect for function _USBCtrlEPAllowDataStage
 11113                           
 11114                           
 11115                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 11116                           
 11117                           ;incstack = 0
 11118                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11119     1799  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11120                           
 11121                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 11122     179A  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11123                           
 11124                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 11125     179B  3002               	movlw	2
 11126     179C  0020               	movlb	0	; select bank0
 11127     179D  066A               	xorwf	_controlTransferState,w	;volatile
 11128     179E  1D03               	btfss	3,2
 11129     179F  2FCB               	goto	i1l4094
 11130                           
 11131                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 11132     17A0  0867               	movf	_pBDTEntryEP0OutNext,w
 11133     17A1  3E01               	addlw	1
 11134     17A2  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11135     17A3  3000               	movlw	0
 11136     17A4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11137     17A5  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11138     17A6  0873               	movf	??_USBCtrlEPAllowDataStage,w
 11139     17A7  0086               	movwf	6
 11140     17A8  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 11141     17A9  0087               	movwf	7
 11142     17AA  3008               	movlw	8
 11143     17AB  0081               	movwf	1
 11144                           
 11145                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 11146     17AC  3048               	movlw	72
 11147     17AD  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11148     17AE  3000               	movlw	0
 11149     17AF  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11150     17B0  30FF               	movlw	255
 11151     17B1  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11152     17B2  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11153     17B3  307F               	movlw	127
 11154     17B4  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11155     17B5  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11156     17B6  0867               	movf	_pBDTEntryEP0OutNext,w
 11157     17B7  0086               	movwf	6
 11158     17B8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11159     17B9  0087               	movwf	7
 11160     17BA  3142               	addfsr 1,2
 11161     17BB  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11162     17BC  3FC0               	movwi [0]fsr1
 11163     17BD  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11164     17BE  3FC1               	movwi [1]fsr1
 11165                           
 11166                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 11167     17BF  0867               	movf	_pBDTEntryEP0OutNext,w
 11168     17C0  0086               	movwf	6
 11169     17C1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11170     17C2  0087               	movwf	7
 11171     17C3  3048               	movlw	72
 11172     17C4  0081               	movwf	1
 11173                           
 11174                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11175     17C5  0867               	movf	_pBDTEntryEP0OutNext,w
 11176     17C6  0086               	movwf	6
 11177     17C7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11178     17C8  0087               	movwf	7
 11179     17C9  1781               	bsf	1,7
 11180                           
 11181                           ;usb/usb_device.c: 1504:     }
 11182     17CA  0008               	return
 11183     17CB                     i1l4094:
 11184                           
 11185                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 11186     17CB  0021               	movlb	1	; select bank1
 11187     17CC  086D               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 11188     17CD  0020               	movlb	0	; select bank0
 11189     17CE  0247               	subwf	71,w	;volatile
 11190     17CF  1D03               	skipz
 11191     17D0  2FD5               	goto	u311_25
 11192     17D1  0021               	movlb	1	; select bank1
 11193     17D2  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 11194     17D3  0020               	movlb	0	; select bank0
 11195     17D4  0246               	subwf	70,w	;volatile
 11196     17D5                     u311_25:
 11197     17D5  1803               	skipnc
 11198     17D6  2FDE               	goto	i1l4098
 11199                           
 11200                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 11201     17D7  0847               	movf	71,w	;volatile
 11202     17D8  0021               	movlb	1	; select bank1
 11203     17D9  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11204     17DA  0020               	movlb	0	; select bank0
 11205     17DB  0846               	movf	70,w	;volatile
 11206     17DC  0021               	movlb	1	; select bank1
 11207     17DD  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11208     17DE                     i1l4098:
 11209                           
 11210                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 11211     17DE  3197  2732         	fcall	_USBCtrlTrfTxService
 11212                           
 11213                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 11214     17E0  3048               	movlw	72
 11215     17E1  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11216     17E2  3000               	movlw	0
 11217     17E3  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11218     17E4  30FF               	movlw	255
 11219     17E5  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11220     17E6  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11221     17E7  307F               	movlw	127
 11222     17E8  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11223     17E9  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11224     17EA  0020               	movlb	0	; select bank0
 11225     17EB  0861               	movf	_pBDTEntryIn,w
 11226     17EC  0086               	movwf	6
 11227     17ED  0862               	movf	_pBDTEntryIn+1,w
 11228     17EE  0087               	movwf	7
 11229     17EF  3142               	addfsr 1,2
 11230     17F0  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11231     17F1  3FC0               	movwi [0]fsr1
 11232     17F2  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11233     17F3  3FC1               	movwi [1]fsr1
 11234                           
 11235                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 11236     17F4  0861               	movf	_pBDTEntryIn,w
 11237     17F5  0086               	movwf	6
 11238     17F6  0862               	movf	_pBDTEntryIn+1,w
 11239     17F7  0087               	movwf	7
 11240     17F8  3048               	movlw	72
 11241     17F9  0081               	movwf	1
 11242                           
 11243                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 11244     17FA  0861               	movf	_pBDTEntryIn,w
 11245     17FB  0086               	movwf	6
 11246     17FC  0862               	movf	_pBDTEntryIn+1,w
 11247     17FD  0087               	movwf	7
 11248     17FE  1781               	bsf	1,7
 11249     17FF  0008               	return
 11250     1800                     __end_of_USBCtrlEPAllowDataStage:
 11251                           
 11252                           	psect	text58
 11253     08DA                     __ptext58:	
 11254 ;; *************** function _USBCheckStdRequest *****************
 11255 ;; Defined at:
 11256 ;;		line 2693 in file "usb/usb_device.c"
 11257 ;; Parameters:    Size  Location     Type
 11258 ;;		None
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      void 
 11263 ;; Registers used:
 11264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 1F/2
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;Total ram usage:        0 bytes
 11275 ;; Hardware stack levels used: 1
 11276 ;; Hardware stack levels required when called: 5
 11277 ;; This function calls:
 11278 ;;		_USBStdFeatureReqHandler
 11279 ;;		_USBStdGetDscHandler
 11280 ;;		_USBStdGetStatusHandler
 11281 ;;		_USBStdSetCfgHandler
 11282 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11283 ;; This function is called by:
 11284 ;;		_USBCtrlTrfSetupHandler
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288     08DA                     _USBCheckStdRequest:	
 11289                           ;psect for function _USBCheckStdRequest
 11290                           
 11291                           
 11292                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11296     08DA  0020               	movlb	0	; select bank0
 11297     08DB  0E40               	swapf	64,w	;volatile
 11298     08DC  0C89               	rrf	9,f
 11299     08DD  3903               	andlw	3
 11300     08DE  3A00               	xorlw	0
 11301     08DF  1D03               	btfss	3,2
 11302     08E0  0008               	return
 11303     08E1  291F               	goto	i1l4524
 11304     08E2                     i1l694:	
 11305                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 11306                           
 11307                           
 11308                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 11309     08E2  0021               	movlb	1	; select bank1
 11310     08E3  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11311                           
 11312                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 11313     08E4  3008               	movlw	8
 11314     08E5  0020               	movlb	0	; select bank0
 11315     08E6  00EC               	movwf	_USBDeviceState	;volatile
 11316                           
 11317                           ;usb/usb_device.c: 2703:             break;
 11318     08E7  0008               	return
 11319     08E8                     i1l4494:
 11320                           
 11321                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 11322     08E8  318A  22FE         	fcall	_USBStdGetDscHandler
 11323                           
 11324                           ;usb/usb_device.c: 2706:             break;
 11325     08EA  0008               	return
 11326     08EB                     i1l4496:
 11327                           
 11328                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 11329     08EB  3189  21AC         	fcall	_USBStdSetCfgHandler
 11330                           
 11331                           ;usb/usb_device.c: 2709:             break;
 11332     08ED  0008               	return
 11333     08EE                     i1l4498:
 11334                           
 11335                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 11336     08EE  306F               	movlw	low _USBActiveConfiguration
 11337     08EF  0021               	movlb	1	; select bank1
 11338     08F0  00E9               	movwf	_inPipes^(0+128)	;volatile
 11339     08F1  3000               	movlw	high _USBActiveConfiguration
 11340     08F2  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11341                           
 11342                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11343     08F3  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11344                           
 11345                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 11346     08F4  3001               	movlw	1
 11347     08F5  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11348                           
 11349                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 11350     08F6  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11351                           
 11352                           ;usb/usb_device.c: 2715:             break;
 11353     08F7  0008               	return
 11354     08F8                     i1l4506:
 11355                           
 11356                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 11357     08F8  3196  2619         	fcall	_USBStdGetStatusHandler
 11358                           
 11359                           ;usb/usb_device.c: 2718:             break;
 11360     08FA  0008               	return
 11361     08FB                     i1l4508:
 11362                           
 11363                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 11364     08FB  3181  21D2         	fcall	_USBStdFeatureReqHandler
 11365                           
 11366                           ;usb/usb_device.c: 2722:             break;
 11367     08FD  0008               	return
 11368     08FE                     i1l4510:
 11369                           
 11370                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 11371     08FE  0844               	movf	68,w	;volatile
 11372     08FF  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11373     0900  0021               	movlb	1	; select bank1
 11374     0901  00E9               	movwf	_inPipes^(0+128)	;volatile
 11375     0902  01EA               	clrf	(_inPipes+1)^(0+128)	;volatile
 11376                           
 11377                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11378     0903  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11379                           
 11380                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 11381     0904  3001               	movlw	1
 11382     0905  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11383                           
 11384                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 11385     0906  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11386                           
 11387                           ;usb/usb_device.c: 2728:             break;
 11388     0907  0008               	return
 11389     0908                     i1l703:	
 11390                           ;usb/usb_device.c: 2729:         case 11:
 11391                           
 11392                           
 11393                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 11394     0908  0021               	movlb	1	; select bank1
 11395     0909  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11396                           
 11397                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 11398     090A  0020               	movlb	0	; select bank0
 11399     090B  0844               	movf	68,w	;volatile
 11400     090C  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11401     090D  0086               	movwf	6
 11402     090E  0187               	clrf	7
 11403     090F  0842               	movf	66,w	;volatile
 11404     0910  0081               	movwf	1
 11405                           
 11406                           ;usb/usb_device.c: 2732:             break;
 11407     0911  0008               	return
 11408     0912                     i1l4520:
 11409                           
 11410                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 11411     0912  3002               	movlw	2
 11412     0913  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11413     0914  3000               	movlw	0
 11414     0915  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11415     0916  3000               	movlw	0
 11416     0917  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11417     0918  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11418     0919  3000               	movlw	0
 11419     091A  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11420     091B  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11421     091C  3194  2434         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11422                           
 11423                           ;usb/usb_device.c: 2735:             break;
 11424     091E  0008               	return
 11425     091F                     i1l4524:
 11426     091F  0841               	movf	65,w	;volatile
 11427                           
 11428                           ; Switch size 1, requested type "simple"
 11429                           ; Number of cases is 11, Range of values is 0 to 12
 11430                           ; switch strategies available:
 11431                           ; Name         Instructions Cycles
 11432                           ; direct_byte           32     6 (fixed)
 11433                           ; simple_byte           34    18 (average)
 11434                           ; jumptable            260     6 (fixed)
 11435                           ;	Chosen strategy is simple_byte
 11436     0920  3A00               	xorlw	0	; case 0
 11437     0921  1903               	skipnz
 11438     0922  28F8               	goto	i1l4506
 11439     0923  3A01               	xorlw	1	; case 1
 11440     0924  1903               	skipnz
 11441     0925  28FB               	goto	i1l4508
 11442     0926  3A02               	xorlw	2	; case 3
 11443     0927  1903               	skipnz
 11444     0928  28FB               	goto	i1l4508
 11445     0929  3A06               	xorlw	6	; case 5
 11446     092A  1903               	skipnz
 11447     092B  28E2               	goto	i1l694
 11448     092C  3A03               	xorlw	3	; case 6
 11449     092D  1903               	skipnz
 11450     092E  28E8               	goto	i1l4494
 11451     092F  3A01               	xorlw	1	; case 7
 11452     0930  1903               	skipnz
 11453     0931  2912               	goto	i1l4520
 11454     0932  3A0F               	xorlw	15	; case 8
 11455     0933  1903               	skipnz
 11456     0934  28EE               	goto	i1l4498
 11457     0935  3A01               	xorlw	1	; case 9
 11458     0936  1903               	skipnz
 11459     0937  28EB               	goto	i1l4496
 11460     0938  3A03               	xorlw	3	; case 10
 11461     0939  1903               	skipnz
 11462     093A  28FE               	goto	i1l4510
 11463     093B  3A01               	xorlw	1	; case 11
 11464     093C  1903               	skipnz
 11465     093D  2908               	goto	i1l703
 11466     093E  3A07               	xorlw	7	; case 12
 11467     093F  1903               	skipnz
 11468     0940  2942               	goto	i1l692
 11469     0941  2942               	goto	i1l692
 11470     0942                     i1l692:
 11471     0942  0008               	return
 11472     0943                     __end_of_USBCheckStdRequest:
 11473                           
 11474                           	psect	text59
 11475     09AC                     __ptext59:	
 11476 ;; *************** function _USBStdSetCfgHandler *****************
 11477 ;; Defined at:
 11478 ;;		line 1972 in file "usb/usb_device.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;		None
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11483 ;;		 -> UEP1(1), 
 11484 ;;  i               1    8[BANK0 ] unsigned char 
 11485 ;;  i               1    9[BANK0 ] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 1D/0
 11492 ;;		On exit  : 1F/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        5 bytes
 11500 ;; Hardware stack levels used: 1
 11501 ;; Hardware stack levels required when called: 4
 11502 ;; This function calls:
 11503 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11504 ;;		i1_memset
 11505 ;; This function is called by:
 11506 ;;		_USBCheckStdRequest
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510     09AC                     _USBStdSetCfgHandler:	
 11511                           ;psect for function _USBStdSetCfgHandler
 11512                           
 11513                           
 11514                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11518     09AC  0021               	movlb	1	; select bank1
 11519     09AD  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11520                           
 11521                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 11522     09AE  300E               	movlw	14
 11523     09AF  0020               	movlb	0	; select bank0
 11524     09B0  00D7               	movwf	USBStdSetCfgHandler@p+1
 11525     09B1  3099               	movlw	153
 11526     09B2  00D6               	movwf	USBStdSetCfgHandler@p
 11527     09B3  01D8               	clrf	USBStdSetCfgHandler@i_2097
 11528     09B4                     i1l4114:
 11529     09B4  0856               	movf	USBStdSetCfgHandler@p,w
 11530     09B5  0086               	movwf	6
 11531     09B6  0857               	movf	USBStdSetCfgHandler@p+1,w
 11532     09B7  0087               	movwf	7
 11533     09B8  0181               	clrf	1
 11534     09B9  3001               	movlw	1
 11535     09BA  07D6               	addwf	USBStdSetCfgHandler@p,f
 11536     09BB  3000               	movlw	0
 11537     09BC  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 11538     09BD  3001               	movlw	1
 11539     09BE  00FD               	movwf	??_USBStdSetCfgHandler
 11540     09BF  087D               	movf	??_USBStdSetCfgHandler,w
 11541     09C0  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 11542     09C1  0858               	movf	USBStdSetCfgHandler@i_2097,w
 11543     09C2  1903               	btfsc	3,2
 11544     09C3  29B4               	goto	i1l4114
 11545                           
 11546                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11547     09C4  3000               	movlw	0
 11548     09C5  00F0               	movwf	i1memset@c
 11549     09C6  00F1               	movwf	i1memset@c+1
 11550     09C7  3020               	movlw	32
 11551     09C8  00F2               	movwf	i1memset@n
 11552     09C9  3000               	movlw	0
 11553     09CA  00F3               	movwf	i1memset@n+1
 11554     09CB  3020               	movlw	32
 11555     09CC  3190  209E  3189   	fcall	i1_memset
 11556                           
 11557                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 11558     09CF  003D               	movlb	29	; select bank29
 11559     09D0  170E               	bsf	14,6	;volatile
 11560                           
 11561                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 11562     09D1  0020               	movlb	0	; select bank0
 11563     09D2  01D9               	clrf	USBStdSetCfgHandler@i
 11564     09D3                     i1l4132:
 11565                           
 11566                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 11567     09D3  0859               	movf	USBStdSetCfgHandler@i,w
 11568     09D4  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11569     09D5  0086               	movwf	6
 11570     09D6  3001               	movlw	1	; select bank2/3
 11571     09D7  0087               	movwf	7
 11572     09D8  0181               	clrf	1
 11573                           
 11574                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 11575     09D9  0859               	movf	USBStdSetCfgHandler@i,w
 11576     09DA  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11577     09DB  0086               	movwf	6
 11578     09DC  3001               	movlw	1	; select bank2/3
 11579     09DD  0087               	movwf	7
 11580     09DE  0181               	clrf	1
 11581                           
 11582                           ;usb/usb_device.c: 1995:  }
 11583     09DF  3001               	movlw	1
 11584     09E0  00FD               	movwf	??_USBStdSetCfgHandler
 11585     09E1  087D               	movf	??_USBStdSetCfgHandler,w
 11586     09E2  07D9               	addwf	USBStdSetCfgHandler@i,f
 11587     09E3  3002               	movlw	2
 11588     09E4  0259               	subwf	USBStdSetCfgHandler@i,w
 11589     09E5  1C03               	skipc
 11590     09E6  29D3               	goto	i1l4132
 11591                           
 11592                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 11593     09E7  3000               	movlw	0
 11594     09E8  00F0               	movwf	i1memset@c
 11595     09E9  00F1               	movwf	i1memset@c+1
 11596     09EA  3001               	movlw	1
 11597     09EB  00F2               	movwf	i1memset@n
 11598     09EC  3000               	movlw	0
 11599     09ED  00F3               	movwf	i1memset@n+1
 11600     09EE  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 11601     09EF  3190  209E  3189   	fcall	i1_memset
 11602                           
 11603                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 11604     09F2  003D               	movlb	29	; select bank29
 11605     09F3  130E               	bcf	14,6	;volatile
 11606                           
 11607                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11608     09F4  3028               	movlw	40
 11609     09F5  0020               	movlb	0	; select bank0
 11610     09F6  00E1               	movwf	_pBDTEntryIn
 11611     09F7  3000               	movlw	0
 11612     09F8  00E2               	movwf	_pBDTEntryIn+1
 11613                           
 11614                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11615     09F9  3020               	movlw	32
 11616     09FA  00EB               	movwf	_pBDTEntryEP0OutCurrent
 11617                           
 11618                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11619     09FB  086B               	movf	_pBDTEntryEP0OutCurrent,w
 11620     09FC  00E7               	movwf	_pBDTEntryEP0OutNext
 11621     09FD  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11622                           
 11623                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11624     09FE  0842               	movf	66,w	;volatile
 11625     09FF  00EF               	movwf	_USBActiveConfiguration	;volatile
 11626                           
 11627                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 11628     0A00  086F               	movf	_USBActiveConfiguration,w	;volatile
 11629     0A01  1D03               	btfss	3,2
 11630     0A02  2A06               	goto	i1l4154
 11631                           
 11632                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 11633     0A03  3010               	movlw	16
 11634     0A04  00EC               	movwf	_USBDeviceState	;volatile
 11635                           
 11636                           ;usb/usb_device.c: 2017:     }
 11637     0A05  0008               	return
 11638     0A06                     i1l4154:
 11639                           
 11640                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 11641     0A06  3001               	movlw	1
 11642     0A07  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11643     0A08  3000               	movlw	0
 11644     0A09  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11645     0A0A  306F               	movlw	low _USBActiveConfiguration
 11646     0A0B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11647     0A0C  3000               	movlw	high _USBActiveConfiguration
 11648     0A0D  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11649     0A0E  3001               	movlw	1
 11650     0A0F  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11651     0A10  3000               	movlw	0
 11652     0A11  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11653     0A12  3194  2434         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11654                           
 11655                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 11656     0A14  3020               	movlw	32
 11657     0A15  0020               	movlb	0	; select bank0
 11658     0A16  00EC               	movwf	_USBDeviceState	;volatile
 11659     0A17  0008               	return
 11660     0A18                     __end_of_USBStdSetCfgHandler:
 11661                           
 11662                           	psect	text60
 11663     109E                     __ptext60:	
 11664 ;; *************** function i1_memset *****************
 11665 ;; Defined at:
 11666 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  dest            1    wreg     PTR void 
 11669 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11670 ;;  c               2    0[COMMON] int 
 11671 ;;  n               2    2[COMMON] unsigned int 
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  dest            1    5[COMMON] PTR void 
 11674 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11675 ;;  p               1    6[COMMON] PTR unsigned char 
 11676 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  2    0[COMMON] PTR void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11681 ;; Tracked objects:
 11682 ;;		On entry : 1F/0
 11683 ;;		On exit  : 1F/0
 11684 ;;		Unchanged: 1F/0
 11685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;Total ram usage:        7 bytes
 11691 ;; Hardware stack levels used: 1
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_USBStdSetCfgHandler
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699     109E                     i1_memset:	
 11700                           ;psect for function i1_memset
 11701                           
 11702                           
 11703                           ;incstack = 0
 11704                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11705                           ;i1memset@dest stored from wreg
 11706     109E  00F5               	movwf	i1memset@dest
 11707     109F  0875               	movf	i1memset@dest,w
 11708     10A0  00F6               	movwf	i1memset@p
 11709     10A1                     i1l4044:
 11710     10A1  3001               	movlw	1
 11711     10A2  02F2               	subwf	i1memset@n,f
 11712     10A3  3000               	movlw	0
 11713     10A4  3BF3               	subwfb	i1memset@n+1,f
 11714     10A5  0A72               	incf	i1memset@n,w
 11715     10A6  1903               	btfsc	3,2
 11716     10A7  0A73               	incf	i1memset@n+1,w
 11717     10A8  1903               	btfsc	3,2
 11718     10A9  0008               	return
 11719     10AA  0876               	movf	i1memset@p,w
 11720     10AB  0086               	movwf	6
 11721     10AC  0187               	clrf	7
 11722     10AD  0870               	movf	i1memset@c,w
 11723     10AE  0081               	movwf	1
 11724     10AF  3001               	movlw	1
 11725     10B0  00F4               	movwf	??i1_memset
 11726     10B1  0874               	movf	??i1_memset,w
 11727     10B2  07F6               	addwf	i1memset@p,f
 11728     10B3  28A1               	goto	i1l4044
 11729     10B4                     __end_ofi1_memset:
 11730                           
 11731                           	psect	text61
 11732     1619                     __ptext61:	
 11733 ;; *************** function _USBStdGetStatusHandler *****************
 11734 ;; Defined at:
 11735 ;;		line 2133 in file "usb/usb_device.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  p               2    0[COMMON] PTR struct __BDT
 11740 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;                  1    wreg      void 
 11743 ;; Registers used:
 11744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11745 ;; Tracked objects:
 11746 ;;		On entry : 1D/0
 11747 ;;		On exit  : 1F/1
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;Total ram usage:        2 bytes
 11755 ;; Hardware stack levels used: 1
 11756 ;; This function calls:
 11757 ;;		Nothing
 11758 ;; This function is called by:
 11759 ;;		_USBCheckStdRequest
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763     1619                     _USBStdGetStatusHandler:	
 11764                           ;psect for function _USBStdGetStatusHandler
 11765                           
 11766                           
 11767                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11771     1619  0020               	movlb	0	; select bank0
 11772     161A  01C8               	clrf	72	;volatile
 11773                           
 11774                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11775     161B  01C9               	clrf	73	;volatile
 11776                           
 11777                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11778     161C  2E57               	goto	i1l4214
 11779     161D                     i1l631:	
 11780                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11781                           
 11782                           
 11783                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11784     161D  0021               	movlb	1	; select bank1
 11785     161E  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11786                           
 11787                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11788                           
 11789                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11790     161F  0022               	movlb	2	; select bank2
 11791     1620  035E               	decf	_RemoteWakeup^(0+256),w	;volatile
 11792     1621  1D03               	btfss	3,2
 11793     1622  2E63               	goto	i1l634
 11794                           
 11795                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11796     1623  0020               	movlb	0	; select bank0
 11797     1624  14C8               	bsf	72,1	;volatile
 11798     1625  2E63               	goto	i1l634
 11799     1626                     i1l635:	
 11800                           ;usb/usb_device.c: 2156:         case (0x01):
 11801                           
 11802                           
 11803                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11804     1626  0021               	movlb	1	; select bank1
 11805     1627  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11806                           
 11807                           ;usb/usb_device.c: 2158:             break;
 11808     1628  2E63               	goto	i1l634
 11809     1629                     i1l636:	
 11810                           ;usb/usb_device.c: 2159:         case (0x02):
 11811                           
 11812                           
 11813                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11814     1629  0021               	movlb	1	; select bank1
 11815     162A  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11816                           
 11817                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11818     162B  0020               	movlb	0	; select bank0
 11819     162C  0844               	movf	68,w	;volatile
 11820     162D  390F               	andlw	15
 11821     162E  3A00               	xorlw	0
 11822     162F  1903               	skipnz
 11823     1630  2E63               	goto	i1l634
 11824                           
 11825                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11826     1631  1BC4               	btfsc	68,7	;volatile
 11827     1632  2E3E               	goto	i1l4204
 11828                           
 11829                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11830     1633  0844               	movf	68,w	;volatile
 11831     1634  390F               	andlw	15
 11832     1635  0709               	addwf	9,w
 11833     1636  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11834     1637  0086               	movwf	6
 11835     1638  3001               	movlw	1	; select bank2/3
 11836     1639  0087               	movwf	7
 11837     163A  3F40               	moviw [0]fsr1
 11838     163B  00F0               	movwf	USBStdGetStatusHandler@p
 11839     163C  3F41               	moviw [1]fsr1
 11840     163D  2E47               	goto	L8
 11841     163E                     i1l4204:	
 11842                           ;usb/usb_device.c: 2171:                 }
 11843                           
 11844                           
 11845                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11846     163E  0844               	movf	68,w	;volatile
 11847     163F  390F               	andlw	15
 11848     1640  0709               	addwf	9,w
 11849     1641  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11850     1642  0086               	movwf	6
 11851     1643  0187               	clrf	7
 11852     1644  3F40               	moviw [0]fsr1
 11853     1645  00F0               	movwf	USBStdGetStatusHandler@p
 11854     1646  3F41               	moviw [1]fsr1
 11855     1647                     L8:
 11856     1647  00F1               	movwf	USBStdGetStatusHandler@p+1
 11857                           
 11858                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11859     1648  0870               	movf	USBStdGetStatusHandler@p,w
 11860     1649  0086               	movwf	6
 11861     164A  0871               	movf	USBStdGetStatusHandler@p+1,w
 11862     164B  0087               	movwf	7
 11863     164C  1F81               	btfss	1,7
 11864     164D  2E63               	goto	i1l634
 11865     164E  0870               	movf	USBStdGetStatusHandler@p,w
 11866     164F  0086               	movwf	6
 11867     1650  0871               	movf	USBStdGetStatusHandler@p+1,w
 11868     1651  0087               	movwf	7
 11869     1652  1D01               	btfss	1,2
 11870     1653  2E63               	goto	i1l634
 11871                           
 11872                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11873     1654  3001               	movlw	1
 11874     1655  00C8               	movwf	72	;volatile
 11875     1656  2E63               	goto	i1l634
 11876     1657                     i1l4214:
 11877     1657  0840               	movf	64,w	;volatile
 11878     1658  391F               	andlw	31
 11879                           
 11880                           ; Switch size 1, requested type "simple"
 11881                           ; Number of cases is 3, Range of values is 0 to 2
 11882                           ; switch strategies available:
 11883                           ; Name         Instructions Cycles
 11884                           ; simple_byte           10     6 (average)
 11885                           ; direct_byte           12     6 (fixed)
 11886                           ; jumptable            260     6 (fixed)
 11887                           ;	Chosen strategy is simple_byte
 11888     1659  3A00               	xorlw	0	; case 0
 11889     165A  1903               	skipnz
 11890     165B  2E1D               	goto	i1l631
 11891     165C  3A01               	xorlw	1	; case 1
 11892     165D  1903               	skipnz
 11893     165E  2E26               	goto	i1l635
 11894     165F  3A03               	xorlw	3	; case 2
 11895     1660  1903               	skipnz
 11896     1661  2E29               	goto	i1l636
 11897     1662  2E63               	goto	i1l634
 11898     1663                     i1l634:
 11899                           
 11900                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11901     1663  0021               	movlb	1	; select bank1
 11902     1664  1FEB               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11903     1665  0008               	return
 11904                           
 11905                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11906     1666  3048               	movlw	72
 11907     1667  00E9               	movwf	_inPipes^(0+128)	;volatile
 11908     1668  3000               	movlw	0
 11909     1669  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 11910                           
 11911                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11912     166A  146B               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11913                           
 11914                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11915     166B  3002               	movlw	2
 11916     166C  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11917     166D  0008               	return
 11918     166E                     __end_of_USBStdGetStatusHandler:
 11919                           
 11920                           	psect	text62
 11921     0AFE                     __ptext62:	
 11922 ;; *************** function _USBStdGetDscHandler *****************
 11923 ;; Defined at:
 11924 ;;		line 2047 in file "usb/usb_device.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;		None
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;		None
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11933 ;; Tracked objects:
 11934 ;;		On entry : 1D/0
 11935 ;;		On exit  : 1E/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;Total ram usage:        3 bytes
 11943 ;; Hardware stack levels used: 1
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_USBCheckStdRequest
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951     0AFE                     _USBStdGetDscHandler:	
 11952                           ;psect for function _USBStdGetDscHandler
 11953                           
 11954                           
 11955                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11956                           
 11957                           ;incstack = 0
 11958                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11959     0AFE  3080               	movlw	128
 11960     0AFF  0020               	movlb	0	; select bank0
 11961     0B00  0640               	xorwf	64,w	;volatile
 11962     0B01  1D03               	btfss	3,2
 11963     0B02  0008               	return
 11964                           
 11965                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11966     0B03  30C0               	movlw	192
 11967     0B04  0021               	movlb	1	; select bank1
 11968     0B05  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 11969                           
 11970                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11971     0B06  2B6A               	goto	i1l4188
 11972     0B07                     i1l4162:
 11973                           
 11974                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11975     0B07  309C               	movlw	low (_device_dsc| (0+32768))
 11976     0B08  0021               	movlb	1	; select bank1
 11977     0B09  00E9               	movwf	_inPipes^(0+128)	;volatile
 11978     0B0A  3098               	movlw	high (_device_dsc| (0+32768))
 11979     0B0B  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 11980                           
 11981                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11982     0B0C  3000               	movlw	0
 11983     0B0D  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11984     0B0E  3012               	movlw	18
 11985     0B0F  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 11986                           
 11987                           ;usb/usb_device.c: 2062:                 break;
 11988     0B10  0008               	return
 11989     0B11                     i1l4166:
 11990                           
 11991                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 11992     0B11  0842               	movf	66,w	;volatile
 11993     0B12  1D03               	btfss	3,2
 11994     0B13  2B40               	goto	i1l4174
 11995                           
 11996                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11997     0B14  0842               	movf	66,w	;volatile
 11998     0B15  00F0               	movwf	??_USBStdGetDscHandler
 11999     0B16  01F1               	clrf	??_USBStdGetDscHandler+1
 12000     0B17  35F0               	lslf	??_USBStdGetDscHandler,f
 12001     0B18  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12002     0B19  30C6               	movlw	low _USB_CD_Ptr
 12003     0B1A  0770               	addwf	??_USBStdGetDscHandler,w
 12004     0B1B  0084               	movwf	4
 12005     0B1C  3018               	movlw	high _USB_CD_Ptr
 12006     0B1D  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12007     0B1E  3880               	iorlw	128
 12008     0B1F  0085               	movwf	5
 12009     0B20  3F00               	moviw [0]fsr0
 12010     0B21  0021               	movlb	1	; select bank1
 12011     0B22  00E9               	movwf	_inPipes^(0+128)	;volatile
 12012     0B23  3F01               	moviw [1]fsr0
 12013     0B24  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12014                           
 12015                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 12016     0B25  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12017     0B26  00F1               	movwf	??_USBStdGetDscHandler+1
 12018     0B27  0869               	movf	_inPipes^(0+128),w	;volatile
 12019     0B28  00F0               	movwf	??_USBStdGetDscHandler
 12020     0B29  3002               	movlw	2
 12021     0B2A  0770               	addwf	??_USBStdGetDscHandler,w
 12022     0B2B  0084               	movwf	4
 12023     0B2C  0871               	movf	??_USBStdGetDscHandler+1,w
 12024     0B2D  1803               	skipnc
 12025     0B2E  0A71               	incf	??_USBStdGetDscHandler+1,w
 12026     0B2F  0085               	movwf	5
 12027     0B30  0800               	movf	0,w	;code access
 12028     0B31  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12029                           
 12030                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 12031     0B32  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12032     0B33  00F1               	movwf	??_USBStdGetDscHandler+1
 12033     0B34  0869               	movf	_inPipes^(0+128),w	;volatile
 12034     0B35  00F0               	movwf	??_USBStdGetDscHandler
 12035     0B36  3003               	movlw	3
 12036     0B37  0770               	addwf	??_USBStdGetDscHandler,w
 12037     0B38  0084               	movwf	4
 12038     0B39  0871               	movf	??_USBStdGetDscHandler+1,w
 12039     0B3A  1803               	skipnc
 12040     0B3B  0A71               	incf	??_USBStdGetDscHandler+1,w
 12041     0B3C  0085               	movwf	5
 12042     0B3D  0800               	movf	0,w	;code access
 12043     0B3E  00ED               	movwf	(_inPipes^(0+128)+4)	;volatile
 12044                           
 12045                           ;usb/usb_device.c: 2080:                 }
 12046     0B3F  0008               	return
 12047     0B40                     i1l4174:
 12048                           
 12049                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 12050     0B40  0021               	movlb	1	; select bank1
 12051     0B41  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12052     0B42  0008               	return
 12053     0B43                     i1l4176:
 12054                           
 12055                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 12056     0B43  3003               	movlw	3
 12057     0B44  0242               	subwf	66,w	;volatile
 12058     0B45  1803               	skipnc
 12059     0B46  2B64               	goto	i1l4182
 12060                           
 12061                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 12062     0B47  0842               	movf	66,w	;volatile
 12063     0B48  00F0               	movwf	??_USBStdGetDscHandler
 12064     0B49  01F1               	clrf	??_USBStdGetDscHandler+1
 12065     0B4A  35F0               	lslf	??_USBStdGetDscHandler,f
 12066     0B4B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12067     0B4C  30BC               	movlw	low _USB_SD_Ptr
 12068     0B4D  0770               	addwf	??_USBStdGetDscHandler,w
 12069     0B4E  0084               	movwf	4
 12070     0B4F  3018               	movlw	high _USB_SD_Ptr
 12071     0B50  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12072     0B51  3880               	iorlw	128
 12073     0B52  0085               	movwf	5
 12074     0B53  3F00               	moviw [0]fsr0
 12075     0B54  0021               	movlb	1	; select bank1
 12076     0B55  00E9               	movwf	_inPipes^(0+128)	;volatile
 12077     0B56  3F01               	moviw [1]fsr0
 12078     0B57  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12079                           
 12080                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 12081     0B58  0869               	movf	_inPipes^(0+128),w	;volatile
 12082     0B59  0084               	movwf	4
 12083     0B5A  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 12084     0B5B  0085               	movwf	5
 12085     0B5C  0800               	movf	0,w	;code access
 12086     0B5D  00F0               	movwf	??_USBStdGetDscHandler
 12087     0B5E  01F1               	clrf	??_USBStdGetDscHandler+1
 12088     0B5F  0870               	movf	??_USBStdGetDscHandler,w
 12089     0B60  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12090     0B61  0871               	movf	??_USBStdGetDscHandler+1,w
 12091     0B62  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12092                           
 12093                           ;usb/usb_device.c: 2096:                 }
 12094     0B63  0008               	return
 12095     0B64                     i1l4182:
 12096                           
 12097                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 12098     0B64  0021               	movlb	1	; select bank1
 12099     0B65  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12100     0B66  0008               	return
 12101     0B67                     i1l4184:
 12102                           
 12103                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 12104     0B67  0021               	movlb	1	; select bank1
 12105     0B68  01EB               	clrf	(_inPipes^(0+128)+2)	;volatile
 12106                           
 12107                           ;usb/usb_device.c: 2113:                 break;
 12108     0B69  0008               	return
 12109     0B6A                     i1l4188:
 12110     0B6A  0020               	movlb	0	; select bank0
 12111     0B6B  0843               	movf	67,w	;volatile
 12112                           
 12113                           ; Switch size 1, requested type "simple"
 12114                           ; Number of cases is 3, Range of values is 1 to 3
 12115                           ; switch strategies available:
 12116                           ; Name         Instructions Cycles
 12117                           ; simple_byte           10     6 (average)
 12118                           ; direct_byte           15     9 (fixed)
 12119                           ; jumptable            263     9 (fixed)
 12120                           ;	Chosen strategy is simple_byte
 12121     0B6C  3A01               	xorlw	1	; case 1
 12122     0B6D  1903               	skipnz
 12123     0B6E  2B07               	goto	i1l4162
 12124     0B6F  3A03               	xorlw	3	; case 2
 12125     0B70  1903               	skipnz
 12126     0B71  2B11               	goto	i1l4166
 12127     0B72  3A01               	xorlw	1	; case 3
 12128     0B73  1903               	skipnz
 12129     0B74  2B43               	goto	i1l4176
 12130     0B75  2B67               	goto	i1l4184
 12131     0B76  0008               	return
 12132     0B77                     __end_of_USBStdGetDscHandler:
 12133                           
 12134                           	psect	text63
 12135     01D2                     __ptext63:	
 12136 ;; *************** function _USBStdFeatureReqHandler *****************
 12137 ;; Defined at:
 12138 ;;		line 2761 in file "usb/usb_device.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;		None
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  p               2   11[BANK0 ] PTR struct __BDT
 12143 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12144 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 12145 ;;		 -> UEP0(1), 
 12146 ;;  current_ep_d    1   10[BANK0 ] struct .
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      void 
 12149 ;; Registers used:
 12150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 1D/0
 12153 ;;		On exit  : 1F/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;Total ram usage:        7 bytes
 12161 ;; Hardware stack levels used: 1
 12162 ;; Hardware stack levels required when called: 4
 12163 ;; This function calls:
 12164 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12165 ;; This function is called by:
 12166 ;;		_USBCheckStdRequest
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170     01D2                     _USBStdFeatureReqHandler:	
 12171                           ;psect for function _USBStdFeatureReqHandler
 12172                           
 12173                           
 12174                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12178     01D2  0020               	movlb	0	; select bank0
 12179     01D3  0342               	decf	66,w	;volatile
 12180     01D4  1D03               	btfss	3,2
 12181     01D5  29E8               	goto	i1l4234
 12182     01D6  0840               	movf	64,w	;volatile
 12183     01D7  391F               	andlw	31
 12184     01D8  3A00               	xorlw	0
 12185     01D9  1D03               	skipz
 12186     01DA  29E8               	goto	i1l4234
 12187                           
 12188                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 12189     01DB  0021               	movlb	1	; select bank1
 12190     01DC  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12191                           
 12192                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 12193     01DD  3003               	movlw	3
 12194     01DE  0020               	movlb	0	; select bank0
 12195     01DF  0641               	xorwf	65,w	;volatile
 12196     01E0  1D03               	btfss	3,2
 12197     01E1  29E6               	goto	i1l4232
 12198                           
 12199                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 12200     01E2  3001               	movlw	1
 12201     01E3  0022               	movlb	2	; select bank2
 12202     01E4  00DE               	movwf	_RemoteWakeup^(0+256)	;volatile
 12203     01E5  29E8               	goto	i1l4234
 12204     01E6                     i1l4232:
 12205                           
 12206                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 12207     01E6  0022               	movlb	2	; select bank2
 12208     01E7  01DE               	clrf	_RemoteWakeup^(0+256)	;volatile
 12209     01E8                     i1l4234:
 12210                           
 12211                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 12212     01E8  0020               	movlb	0	; select bank0
 12213     01E9  0842               	movf	66,w	;volatile
 12214     01EA  1D03               	btfss	3,2
 12215     01EB  0008               	return
 12216     01EC  0840               	movf	64,w	;volatile
 12217     01ED  391F               	andlw	31
 12218     01EE  3A02               	xorlw	2
 12219     01EF  1D03               	skipz
 12220     01F0  0008               	return
 12221     01F1  0844               	movf	68,w	;volatile
 12222     01F2  390F               	andlw	15
 12223     01F3  3A00               	xorlw	0
 12224     01F4  1903               	skipnz
 12225     01F5  0008               	return
 12226     01F6  0844               	movf	68,w	;volatile
 12227     01F7  390F               	andlw	15
 12228     01F8  00D6               	movwf	??_USBStdFeatureReqHandler
 12229     01F9  3002               	movlw	2
 12230     01FA  0256               	subwf	??_USBStdFeatureReqHandler,w
 12231     01FB  1803               	skipnc
 12232     01FC  0008               	return
 12233     01FD  3020               	movlw	32
 12234     01FE  066C               	xorwf	_USBDeviceState,w
 12235     01FF  1D03               	btfss	3,2
 12236     0200  0008               	return
 12237                           
 12238                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 12239     0201  0021               	movlb	1	; select bank1
 12240     0202  17EB               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12241                           
 12242                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 12243     0203  0020               	movlb	0	; select bank0
 12244     0204  1BC4               	btfsc	68,7	;volatile
 12245     0205  2A15               	goto	i1l4248
 12246                           
 12247                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 12248     0206  0844               	movf	68,w	;volatile
 12249     0207  390F               	andlw	15
 12250     0208  0709               	addwf	9,w
 12251     0209  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12252     020A  0086               	movwf	6
 12253     020B  3001               	movlw	1	; select bank2/3
 12254     020C  0087               	movwf	7
 12255     020D  3F40               	moviw [0]fsr1
 12256     020E  00DB               	movwf	USBStdFeatureReqHandler@p
 12257     020F  3F41               	moviw [1]fsr1
 12258     0210  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12259                           
 12260                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 12261     0211  0844               	movf	68,w	;volatile
 12262     0212  390F               	andlw	15
 12263     0213  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12264     0214  2A22               	goto	L9
 12265     0215                     i1l4248:	
 12266                           ;usb/usb_device.c: 2797:         }
 12267                           
 12268                           
 12269                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 12270     0215  0844               	movf	68,w	;volatile
 12271     0216  390F               	andlw	15
 12272     0217  0709               	addwf	9,w
 12273     0218  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12274     0219  0086               	movwf	6
 12275     021A  0187               	clrf	7
 12276     021B  3F40               	moviw [0]fsr1
 12277     021C  00DB               	movwf	USBStdFeatureReqHandler@p
 12278     021D  3F41               	moviw [1]fsr1
 12279     021E  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12280                           
 12281                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 12282     021F  0844               	movf	68,w	;volatile
 12283     0220  390F               	andlw	15
 12284     0221  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12285     0222                     L9:
 12286     0222  0086               	movwf	6
 12287     0223  3001               	movlw	1	; select bank2/3
 12288     0224  0087               	movwf	7
 12289     0225  0801               	movf	1,w
 12290     0226  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 12291                           
 12292                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 12293     0227  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 12294     0228  2A33               	goto	i1l4254
 12295                           
 12296                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 12297     0229  30FB               	movlw	251
 12298     022A  00D6               	movwf	??_USBStdFeatureReqHandler
 12299     022B  30FF               	movlw	255
 12300     022C  00D7               	movwf	??_USBStdFeatureReqHandler+1
 12301     022D  085B               	movf	USBStdFeatureReqHandler@p,w
 12302     022E  0556               	andwf	??_USBStdFeatureReqHandler,w
 12303     022F  00DB               	movwf	USBStdFeatureReqHandler@p
 12304     0230  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12305     0231  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 12306     0232  2A38               	goto	L10
 12307     0233                     i1l4254:	
 12308                           ;usb/usb_device.c: 2811:             }
 12309                           
 12310                           
 12311                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 12312     0233  3004               	movlw	4
 12313     0234  045B               	iorwf	USBStdFeatureReqHandler@p,w
 12314     0235  00DB               	movwf	USBStdFeatureReqHandler@p
 12315     0236  3000               	movlw	0
 12316     0237  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 12317     0238                     L10:
 12318     0238  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12319                           
 12320                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 12321     0239  1BC4               	btfsc	68,7	;volatile
 12322     023A  2A47               	goto	i1l4260
 12323                           
 12324                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 12325     023B  0844               	movf	68,w	;volatile
 12326     023C  390F               	andlw	15
 12327     023D  0709               	addwf	9,w
 12328     023E  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12329     023F  0086               	movwf	6
 12330     0240  3001               	movlw	1	; select bank2/3
 12331     0241  0087               	movwf	7
 12332     0242  085B               	movf	USBStdFeatureReqHandler@p,w
 12333     0243  3FC0               	movwi [0]fsr1
 12334     0244  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12335     0245  3FC1               	movwi [1]fsr1
 12336                           
 12337                           ;usb/usb_device.c: 2823:         }
 12338     0246  2A51               	goto	i1l4262
 12339     0247                     i1l4260:
 12340                           
 12341                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 12342     0247  0844               	movf	68,w	;volatile
 12343     0248  390F               	andlw	15
 12344     0249  0709               	addwf	9,w
 12345     024A  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12346     024B  0086               	movwf	6
 12347     024C  0187               	clrf	7
 12348     024D  085B               	movf	USBStdFeatureReqHandler@p,w
 12349     024E  3FC0               	movwi [0]fsr1
 12350     024F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12351     0250  3FC1               	movwi [1]fsr1
 12352     0251                     i1l4262:
 12353                           
 12354                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 12355     0251  3003               	movlw	3
 12356     0252  0641               	xorwf	65,w	;volatile
 12357     0253  1D03               	btfss	3,2
 12358     0254  2A73               	goto	i1l4276
 12359                           
 12360                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 12361     0255  085B               	movf	USBStdFeatureReqHandler@p,w
 12362     0256  0086               	movwf	6
 12363     0257  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12364     0258  0087               	movwf	7
 12365     0259  1F81               	btfss	1,7
 12366     025A  2A68               	goto	i1l4272
 12367                           
 12368                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 12369     025B  1BC4               	btfsc	68,7	;volatile
 12370     025C  2A61               	goto	i1l4270
 12371                           
 12372                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12373     025D  0844               	movf	68,w	;volatile
 12374     025E  390F               	andlw	15
 12375     025F  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12376     0260  2A64               	goto	L11
 12377     0261                     i1l4270:	
 12378                           ;usb/usb_device.c: 2839:                 }
 12379                           
 12380                           
 12381                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12382     0261  0844               	movf	68,w	;volatile
 12383     0262  390F               	andlw	15
 12384     0263  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12385     0264                     L11:
 12386     0264  0086               	movwf	6
 12387     0265  3001               	movlw	1	; select bank2/3
 12388     0266  0087               	movwf	7
 12389     0267  1481               	bsf	1,1
 12390     0268                     i1l4272:
 12391                           
 12392                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 12393     0268  085B               	movf	USBStdFeatureReqHandler@p,w
 12394     0269  0086               	movwf	6
 12395     026A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12396     026B  0087               	movwf	7
 12397     026C  1501               	bsf	1,2
 12398                           
 12399                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 12400     026D  085B               	movf	USBStdFeatureReqHandler@p,w
 12401     026E  0086               	movwf	6
 12402     026F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12403     0270  0087               	movwf	7
 12404     0271  1781               	bsf	1,7
 12405                           
 12406                           ;usb/usb_device.c: 2849:         }
 12407     0272  0008               	return
 12408     0273                     i1l4276:
 12409                           
 12410                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 12411     0273  3004               	movlw	4
 12412     0274  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12413     0275  00DB               	movwf	USBStdFeatureReqHandler@p
 12414     0276  3000               	movlw	0
 12415     0277  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12416     0278  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12417                           
 12418                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 12419     0279  085B               	movf	USBStdFeatureReqHandler@p,w
 12420     027A  0086               	movwf	6
 12421     027B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12422     027C  0087               	movwf	7
 12423     027D  1F81               	btfss	1,7
 12424     027E  2A9C               	goto	i1l4286
 12425                           
 12426                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 12427     027F  307F               	movlw	127
 12428     0280  00D6               	movwf	??_USBStdFeatureReqHandler
 12429     0281  085B               	movf	USBStdFeatureReqHandler@p,w
 12430     0282  0086               	movwf	6
 12431     0283  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12432     0284  0087               	movwf	7
 12433     0285  0856               	movf	??_USBStdFeatureReqHandler,w
 12434     0286  0581               	andwf	1,f
 12435                           
 12436                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 12437     0287  085B               	movf	USBStdFeatureReqHandler@p,w
 12438     0288  0086               	movwf	6
 12439     0289  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12440     028A  0087               	movwf	7
 12441     028B  1701               	bsf	1,6
 12442                           
 12443                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12444     028C  3005               	movlw	5
 12445     028D  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12446     028E  3000               	movlw	0
 12447     028F  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12448     0290  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12449     0291  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12450     0292  085B               	movf	USBStdFeatureReqHandler@p,w
 12451     0293  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12452     0294  3002               	movlw	2
 12453     0295  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12454     0296  3000               	movlw	0
 12455     0297  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12456     0298  3194  2434  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12457                           
 12458                           ;usb/usb_device.c: 2864:                 }
 12459     029B  2AA1               	goto	i1l4288
 12460     029C                     i1l4286:
 12461                           
 12462                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 12463     029C  085B               	movf	USBStdFeatureReqHandler@p,w
 12464     029D  0086               	movwf	6
 12465     029E  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12466     029F  0087               	movwf	7
 12467     02A0  1701               	bsf	1,6
 12468     02A1                     i1l4288:
 12469                           
 12470                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 12471     02A1  3004               	movlw	4
 12472     02A2  0020               	movlb	0	; select bank0
 12473     02A3  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12474     02A4  00DB               	movwf	USBStdFeatureReqHandler@p
 12475     02A5  3000               	movlw	0
 12476     02A6  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12477     02A7  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12478                           
 12479                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 12480     02A8  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 12481     02A9  2AB0               	goto	i1l728
 12482     02AA  085B               	movf	USBStdFeatureReqHandler@p,w
 12483     02AB  0086               	movwf	6
 12484     02AC  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12485     02AD  0087               	movwf	7
 12486     02AE  1F81               	btfss	1,7
 12487     02AF  2AD5               	goto	i1l4300
 12488     02B0                     i1l728:
 12489                           
 12490                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 12491     02B0  1BC4               	btfsc	68,7	;volatile
 12492     02B1  2AB6               	goto	i1l4296
 12493                           
 12494                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12495     02B2  0844               	movf	68,w	;volatile
 12496     02B3  390F               	andlw	15
 12497     02B4  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12498     02B5  2AB9               	goto	L12
 12499     02B6                     i1l4296:	
 12500                           ;usb/usb_device.c: 2884:                     }
 12501                           
 12502                           
 12503                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12504     02B6  0844               	movf	68,w	;volatile
 12505     02B7  390F               	andlw	15
 12506     02B8  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12507     02B9                     L12:
 12508     02B9  0086               	movwf	6
 12509     02BA  3001               	movlw	1	; select bank2/3
 12510     02BB  0087               	movwf	7
 12511     02BC  1081               	bcf	1,1
 12512                           
 12513                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12514                           
 12515                           ;usb/usb_device.c: 2888:                     }
 12516     02BD  303B               	movlw	59
 12517     02BE  00D6               	movwf	??_USBStdFeatureReqHandler
 12518     02BF  085B               	movf	USBStdFeatureReqHandler@p,w
 12519     02C0  0086               	movwf	6
 12520     02C1  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12521     02C2  0087               	movwf	7
 12522     02C3  0856               	movf	??_USBStdFeatureReqHandler,w
 12523     02C4  0581               	andwf	1,f
 12524                           
 12525                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12526     02C5  3005               	movlw	5
 12527     02C6  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12528     02C7  3000               	movlw	0
 12529     02C8  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12530     02C9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12531     02CA  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12532     02CB  085B               	movf	USBStdFeatureReqHandler@p,w
 12533     02CC  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12534     02CD  3002               	movlw	2
 12535     02CE  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12536     02CF  3000               	movlw	0
 12537     02D0  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12538     02D1  3194  2434  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12539                           
 12540                           ;usb/usb_device.c: 2894:                 }
 12541     02D4  2ADD               	goto	i1l4302
 12542     02D5                     i1l4300:
 12543                           
 12544                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12545     02D5  303B               	movlw	59
 12546     02D6  00D6               	movwf	??_USBStdFeatureReqHandler
 12547     02D7  085B               	movf	USBStdFeatureReqHandler@p,w
 12548     02D8  0086               	movwf	6
 12549     02D9  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12550     02DA  0087               	movwf	7
 12551     02DB  0856               	movf	??_USBStdFeatureReqHandler,w
 12552     02DC  0581               	andwf	1,f
 12553     02DD                     i1l4302:
 12554                           
 12555                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 12556     02DD  0020               	movlb	0	; select bank0
 12557     02DE  0844               	movf	68,w	;volatile
 12558     02DF  390F               	andlw	15
 12559     02E0  3E98               	addlw	152
 12560     02E1  00D6               	movwf	??_USBStdFeatureReqHandler
 12561     02E2  01D7               	clrf	??_USBStdFeatureReqHandler+1
 12562     02E3  300E               	movlw	14
 12563     02E4  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 12564     02E5  0856               	movf	??_USBStdFeatureReqHandler,w
 12565     02E6  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 12566     02E7  0857               	movf	??_USBStdFeatureReqHandler+1,w
 12567     02E8  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 12568                           
 12569                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 12570     02E9  30FE               	movlw	254
 12571     02EA  00D6               	movwf	??_USBStdFeatureReqHandler
 12572     02EB  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 12573     02EC  0086               	movwf	6
 12574     02ED  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 12575     02EE  0087               	movwf	7
 12576     02EF  0856               	movf	??_USBStdFeatureReqHandler,w
 12577     02F0  0581               	andwf	1,f
 12578     02F1  0008               	return
 12579     02F2                     __end_of_USBStdFeatureReqHandler:
 12580                           
 12581                           	psect	text64
 12582     1434                     __ptext64:	
 12583 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12584 ;; Defined at:
 12585 ;;		line 66 in file "usb/usb_events.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;  event           2    0[BANK0 ] enum E238
 12588 ;;  pdata           2    2[BANK0 ] PTR void 
 12589 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 12590 ;;		 -> BDT(32), 
 12591 ;;  size            2    4[BANK0 ] unsigned short 
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;		None
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      _Bool 
 12596 ;; Registers used:
 12597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12598 ;; Tracked objects:
 12599 ;;		On entry : 1F/0
 12600 ;;		On exit  : 0/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12603 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;Total ram usage:        6 bytes
 12608 ;; Hardware stack levels used: 1
 12609 ;; Hardware stack levels required when called: 3
 12610 ;; This function calls:
 12611 ;;		_APP_KeyboardInit
 12612 ;;		_USBCheckHIDRequest
 12613 ;; This function is called by:
 12614 ;;		_USBDeviceTasks
 12615 ;;		_USBStdSetCfgHandler
 12616 ;;		_USBSuspend
 12617 ;;		_USBWakeFromSuspend
 12618 ;;		_USBCtrlTrfSetupHandler
 12619 ;;		_USBCheckStdRequest
 12620 ;;		_USBStdFeatureReqHandler
 12621 ;; This function uses a non-reentrant model
 12622 ;;
 12623                           
 12624     1434                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12625                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12626                           
 12627                           
 12628                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 12629                           
 12630                           ;incstack = 0
 12631                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12632     1434  2C49               	goto	i1l3980
 12633     1435                     i1l3968:
 12634                           
 12635                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 12636     1435  0A65               	incf	_SOFCounter,w	;volatile
 12637     1436  307F               	movlw	127
 12638     1437  1903               	skipnz
 12639     1438  0666               	xorwf	_SOFCounter+1,w	;volatile
 12640     1439  1903               	btfsc	3,2
 12641     143A  2C40               	goto	i1l3972
 12642                           
 12643                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 12644     143B  3001               	movlw	1
 12645     143C  07E5               	addwf	_SOFCounter,f	;volatile
 12646     143D  3000               	movlw	0
 12647     143E  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 12648                           
 12649                           ;usb/usb_events.c: 80:             }
 12650     143F  0008               	return
 12651     1440                     i1l3972:
 12652                           
 12653                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 12654     1440  01E5               	clrf	_SOFCounter	;volatile
 12655     1441  01E6               	clrf	_SOFCounter+1	;volatile
 12656     1442  0008               	return
 12657     1443                     i1l3974:
 12658                           
 12659                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 12660     1443  3195  25C9         	fcall	_APP_KeyboardInit
 12661                           
 12662                           ;usb/usb_events.c: 115:             break;
 12663     1445  0008               	return
 12664     1446                     i1l3976:
 12665                           
 12666                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 12667     1446  318B  23F2         	fcall	_USBCheckHIDRequest
 12668                           
 12669                           ;usb/usb_events.c: 124:             break;
 12670     1448  0008               	return
 12671     1449                     i1l3980:
 12672                           
 12673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12674                           ; Switch size 1, requested type "simple"
 12675                           ; Number of cases is 2, Range of values is 0 to 127
 12676                           ; switch strategies available:
 12677                           ; Name         Instructions Cycles
 12678                           ; simple_byte            7     4 (average)
 12679                           ; direct_byte          262     6 (fixed)
 12680                           ; jumptable            260     6 (fixed)
 12681                           ;	Chosen strategy is simple_byte
 12682     1449  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 12683     144A  3A00               	xorlw	0	; case 0
 12684     144B  1903               	skipnz
 12685     144C  2C51               	goto	i1l6240
 12686     144D  3A7F               	xorlw	127	; case 127
 12687     144E  1903               	skipnz
 12688     144F  2C6B               	goto	i1l6242
 12689     1450  2C70               	goto	i1l818
 12690     1451                     i1l6240:
 12691                           
 12692                           ; Switch size 1, requested type "simple"
 12693                           ; Number of cases is 8, Range of values is 1 to 117
 12694                           ; switch strategies available:
 12695                           ; Name         Instructions Cycles
 12696                           ; simple_byte           25    13 (average)
 12697                           ; direct_byte          243     9 (fixed)
 12698                           ; jumptable            263     9 (fixed)
 12699                           ;	Chosen strategy is simple_byte
 12700     1451  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12701     1452  3A01               	xorlw	1	; case 1
 12702     1453  1903               	skipnz
 12703     1454  2C43               	goto	i1l3974
 12704     1455  3A03               	xorlw	3	; case 2
 12705     1456  1903               	skipnz
 12706     1457  2C70               	goto	i1l818
 12707     1458  3A01               	xorlw	1	; case 3
 12708     1459  1903               	skipnz
 12709     145A  2C46               	goto	i1l3976
 12710     145B  3A06               	xorlw	6	; case 5
 12711     145C  1903               	skipnz
 12712     145D  2C70               	goto	i1l818
 12713     145E  3A77               	xorlw	119	; case 114
 12714     145F  1903               	skipnz
 12715     1460  2C70               	goto	i1l818
 12716     1461  3A01               	xorlw	1	; case 115
 12717     1462  1903               	skipnz
 12718     1463  2C35               	goto	i1l3968
 12719     1464  3A07               	xorlw	7	; case 116
 12720     1465  1903               	skipnz
 12721     1466  2C70               	goto	i1l818
 12722     1467  3A01               	xorlw	1	; case 117
 12723     1468  1903               	skipnz
 12724     1469  2C70               	goto	i1l818
 12725     146A  2C70               	goto	i1l818
 12726     146B                     i1l6242:
 12727                           
 12728                           ; Switch size 1, requested type "simple"
 12729                           ; Number of cases is 1, Range of values is 255 to 255
 12730                           ; switch strategies available:
 12731                           ; Name         Instructions Cycles
 12732                           ; simple_byte            4     3 (average)
 12733                           ; direct_byte            7     5 (fixed)
 12734                           ; jumptable            263     9 (fixed)
 12735                           ;	Chosen strategy is simple_byte
 12736     146B  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12737     146C  3AFF               	xorlw	255	; case 255
 12738     146D  1903               	skipnz
 12739     146E  2C70               	goto	i1l818
 12740     146F  2C70               	goto	i1l818
 12741     1470                     i1l818:
 12742     1470  0008               	return
 12743     1471                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12744                           
 12745                           	psect	text65
 12746     0BF2                     __ptext65:	
 12747 ;; *************** function _USBCheckHIDRequest *****************
 12748 ;; Defined at:
 12749 ;;		line 161 in file "usb/usb_device_hid.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;		None
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;		None
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 1F/0
 12760 ;;		On exit  : 1C/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        0 bytes
 12768 ;; Hardware stack levels used: 1
 12769 ;; Hardware stack levels required when called: 1
 12770 ;; This function calls:
 12771 ;;		_USBHIDCBSetIdleRateHandler
 12772 ;;		_USBHIDCBSetReportHandler
 12773 ;; This function is called by:
 12774 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778     0BF2                     _USBCheckHIDRequest:	
 12779                           ;psect for function _USBCheckHIDRequest
 12780                           
 12781                           
 12782                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12786     0BF2  0840               	movf	64,w	;volatile
 12787     0BF3  391F               	andlw	31
 12788     0BF4  3A01               	xorlw	1
 12789     0BF5  1D03               	btfss	3,2
 12790     0BF6  0008               	return
 12791                           
 12792                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12793     0BF7  0844               	movf	68,w	;volatile
 12794     0BF8  1D03               	btfss	3,2
 12795     0BF9  0008               	return
 12796                           
 12797                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12798     0BFA  3006               	movlw	6
 12799     0BFB  0641               	xorwf	65,w	;volatile
 12800     0BFC  1903               	btfsc	3,2
 12801     0BFD  2C17               	goto	i1l3902
 12802     0BFE  2C22               	goto	i1l3904
 12803     0BFF                     i1l3890:
 12804                           
 12805                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12806     0BFF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12807     0C00  1D03               	btfss	3,2
 12808     0C01  2C22               	goto	i1l3904
 12809                           
 12810                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12811     0C02  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12812     0C03  0021               	movlb	1	; select bank1
 12813     0C04  00E9               	movwf	_inPipes^(0+128)	;volatile
 12814     0C05  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12815     0C06  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12816     0C07  3000               	movlw	0
 12817     0C08  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12818     0C09  3009               	movlw	9
 12819     0C0A  2C13               	goto	L14
 12820     0C0B                     i1l3896:
 12821                           
 12822                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12823     0C0B  3000               	movlw	low (_hid_rpt01| (0+32768))
 12824     0C0C  0021               	movlb	1	; select bank1
 12825     0C0D  00E9               	movwf	_inPipes^(0+128)	;volatile
 12826     0C0E  3098               	movlw	high (_hid_rpt01| (0+32768))
 12827     0C0F  00EA               	movwf	(_inPipes^(0+128)+1)	;volatile
 12828     0C10  3000               	movlw	0
 12829     0C11  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12830     0C12  303F               	movlw	63
 12831     0C13                     L14:
 12832     0C13  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12833     0C14  30C0               	movlw	192
 12834     0C15  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12835                           
 12836                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12837     0C16  2C22               	goto	i1l3904
 12838     0C17                     i1l3902:
 12839     0C17  0843               	movf	67,w	;volatile
 12840                           
 12841                           ; Switch size 1, requested type "simple"
 12842                           ; Number of cases is 3, Range of values is 33 to 35
 12843                           ; switch strategies available:
 12844                           ; Name         Instructions Cycles
 12845                           ; simple_byte           10     6 (average)
 12846                           ; direct_byte           15     9 (fixed)
 12847                           ; jumptable            263     9 (fixed)
 12848                           ;	Chosen strategy is simple_byte
 12849     0C18  3A21               	xorlw	33	; case 33
 12850     0C19  1903               	skipnz
 12851     0C1A  2BFF               	goto	i1l3890
 12852     0C1B  3A03               	xorlw	3	; case 34
 12853     0C1C  1903               	skipnz
 12854     0C1D  2C0B               	goto	i1l3896
 12855     0C1E  3A01               	xorlw	1	; case 35
 12856     0C1F  1903               	skipnz
 12857     0C20  2C22               	goto	i1l3904
 12858     0C21  2C22               	goto	i1l3904
 12859     0C22                     i1l3904:
 12860                           
 12861                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12862     0C22  0020               	movlb	0	; select bank0
 12863     0C23  0E40               	swapf	64,w	;volatile
 12864     0C24  0C89               	rrf	9,f
 12865     0C25  3903               	andlw	3
 12866     0C26  3A01               	xorlw	1
 12867     0C27  1D03               	btfss	3,2
 12868     0C28  0008               	return
 12869     0C29  2C5B               	goto	i1l3930
 12870     0C2A                     i1l3908:
 12871                           
 12872                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12873     0C2A  319F  2768         	fcall	_USBHIDCBSetReportHandler
 12874                           
 12875                           ;usb/usb_device_hid.c: 225:             break;
 12876     0C2C  0008               	return
 12877     0C2D                     i1l3910:
 12878                           
 12879                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12880     0C2D  306A               	movlw	low _idle_rate
 12881     0C2E  0021               	movlb	1	; select bank1
 12882     0C2F  00E9               	movwf	_inPipes^(0+128)	;volatile
 12883     0C30  3001               	movlw	high _idle_rate
 12884     0C31  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12885     0C32  3000               	movlw	0
 12886     0C33  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12887     0C34  3001               	movlw	1
 12888     0C35  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12889     0C36  30C1               	movlw	193
 12890     0C37  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12891                           
 12892                           ;usb/usb_device_hid.c: 231:             break;
 12893     0C38  0008               	return
 12894     0C39                     i1l3916:
 12895                           
 12896                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12897     0C39  3080               	movlw	128
 12898     0C3A  0021               	movlb	1	; select bank1
 12899     0C3B  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12900                           
 12901                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12902     0C3C  0020               	movlb	0	; select bank0
 12903     0C3D  0843               	movf	67,w	;volatile
 12904     0C3E  0022               	movlb	2	; select bank2
 12905     0C3F  00EA               	movwf	_idle_rate^(0+256)
 12906                           
 12907                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12908     0C40  086A               	movf	_idle_rate^(0+256),w
 12909     0C41  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12910     0C42  0020               	movlb	0	; select bank0
 12911     0C43  0842               	movf	66,w	;volatile
 12912     0C44  319F  275B         	fcall	_USBHIDCBSetIdleRateHandler
 12913                           
 12914                           ;usb/usb_device_hid.c: 236:             break;
 12915     0C46  0008               	return
 12916     0C47                     i1l3920:
 12917                           
 12918                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12919     0C47  3069               	movlw	low _active_protocol
 12920     0C48  0021               	movlb	1	; select bank1
 12921     0C49  00E9               	movwf	_inPipes^(0+128)	;volatile
 12922     0C4A  3001               	movlw	high _active_protocol
 12923     0C4B  00EA               	movwf	(_inPipes+1)^(0+128)	;volatile
 12924     0C4C  3000               	movlw	0
 12925     0C4D  00ED               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12926     0C4E  3001               	movlw	1
 12927     0C4F  00EC               	movwf	(_inPipes^(0+128)+3)	;volatile
 12928     0C50  3081               	movlw	129
 12929     0C51  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12930                           
 12931                           ;usb/usb_device_hid.c: 242:             break;
 12932     0C52  0008               	return
 12933     0C53                     i1l3926:
 12934                           
 12935                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12936     0C53  3080               	movlw	128
 12937     0C54  0021               	movlb	1	; select bank1
 12938     0C55  00EB               	movwf	(_inPipes^(0+128)+2)	;volatile
 12939                           
 12940                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12941     0C56  0020               	movlb	0	; select bank0
 12942     0C57  0842               	movf	66,w	;volatile
 12943     0C58  0022               	movlb	2	; select bank2
 12944     0C59  00E9               	movwf	_active_protocol^(0+256)
 12945                           
 12946                           ;usb/usb_device_hid.c: 246:             break;
 12947     0C5A  0008               	return
 12948     0C5B                     i1l3930:
 12949     0C5B  0841               	movf	65,w	;volatile
 12950                           
 12951                           ; Switch size 1, requested type "simple"
 12952                           ; Number of cases is 6, Range of values is 1 to 11
 12953                           ; switch strategies available:
 12954                           ; Name         Instructions Cycles
 12955                           ; simple_byte           19    10 (average)
 12956                           ; direct_byte           31     9 (fixed)
 12957                           ; jumptable            263     9 (fixed)
 12958                           ;	Chosen strategy is simple_byte
 12959     0C5C  3A01               	xorlw	1	; case 1
 12960     0C5D  1903               	skipnz
 12961     0C5E  2C6F               	goto	i1l764
 12962     0C5F  3A03               	xorlw	3	; case 2
 12963     0C60  1903               	skipnz
 12964     0C61  2C2D               	goto	i1l3910
 12965     0C62  3A01               	xorlw	1	; case 3
 12966     0C63  1903               	skipnz
 12967     0C64  2C47               	goto	i1l3920
 12968     0C65  3A0A               	xorlw	10	; case 9
 12969     0C66  1903               	skipnz
 12970     0C67  2C2A               	goto	i1l3908
 12971     0C68  3A03               	xorlw	3	; case 10
 12972     0C69  1903               	skipnz
 12973     0C6A  2C39               	goto	i1l3916
 12974     0C6B  3A01               	xorlw	1	; case 11
 12975     0C6C  1903               	skipnz
 12976     0C6D  2C53               	goto	i1l3926
 12977     0C6E  2C6F               	goto	i1l764
 12978     0C6F                     i1l764:
 12979     0C6F  0008               	return
 12980     0C70                     __end_of_USBCheckHIDRequest:
 12981                           
 12982                           	psect	text66
 12983     1F68                     __ptext66:	
 12984 ;; *************** function _USBHIDCBSetReportHandler *****************
 12985 ;; Defined at:
 12986 ;;		line 531 in file "app_device_keyboard.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;		None
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg
 12995 ;; Tracked objects:
 12996 ;;		On entry : 1F/0
 12997 ;;		On exit  : 1F/2
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;Total ram usage:        0 bytes
 13005 ;; Hardware stack levels used: 1
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_USBCheckHIDRequest
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013     1F68                     _USBHIDCBSetReportHandler:	
 13014                           ;psect for function _USBHIDCBSetReportHandler
 13015                           
 13016                           
 13017                           ;app_device_keyboard.c: 535:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 13021     1F68  3048               	movlw	72
 13022     1F69  0022               	movlb	2	; select bank2
 13023     1F6A  00A1               	movwf	_outPipes^(0+256)	;volatile
 13024     1F6B  3000               	movlw	0
 13025     1F6C  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13026     1F6D  3008               	movlw	8
 13027     1F6E  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13028     1F6F  301E               	movlw	high _USBHIDCBSetReportComplete
 13029     1F70  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 13030     1F71  30A8               	movlw	low _USBHIDCBSetReportComplete
 13031     1F72  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 13032     1F73  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13033     1F74  0008               	return
 13034     1F75                     __end_of_USBHIDCBSetReportHandler:
 13035                           
 13036                           	psect	text67
 13037     1F5B                     __ptext67:	
 13038 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 13039 ;; Defined at:
 13040 ;;		line 542 in file "app_device_keyboard.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  reportID        1    wreg     unsigned char 
 13043 ;;  newIdleRate     1    0[COMMON] unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  reportID        1    3[COMMON] unsigned char 
 13046 ;; Return value:  Size  Location     Type
 13047 ;;                  1    wreg      void 
 13048 ;; Registers used:
 13049 ;;		wreg, status,2, status,0
 13050 ;; Tracked objects:
 13051 ;;		On entry : 1F/0
 13052 ;;		On exit  : 1D/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13055 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;Total ram usage:        4 bytes
 13060 ;; Hardware stack levels used: 1
 13061 ;; This function calls:
 13062 ;;		Nothing
 13063 ;; This function is called by:
 13064 ;;		_USBCheckHIDRequest
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068     1F5B                     _USBHIDCBSetIdleRateHandler:	
 13069                           ;psect for function _USBHIDCBSetIdleRateHandler
 13070                           
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 13074                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 13075     1F5B  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 13076                           
 13077                           ;app_device_keyboard.c: 546:     if (reportID == 0) {
 13078     1F5C  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 13079     1F5D  1D03               	btfss	3,2
 13080     1F5E  0008               	return
 13081                           
 13082                           ;app_device_keyboard.c: 547:         keyboardIdleRate = newIdleRate;
 13083     1F5F  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 13084     1F60  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 13085     1F61  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 13086     1F62  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 13087     1F63  0022               	movlb	2	; select bank2
 13088     1F64  00B8               	movwf	_keyboardIdleRate^(0+256)
 13089     1F65  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 13090     1F66  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 13091     1F67  0008               	return
 13092     1F68                     __end_of_USBHIDCBSetIdleRateHandler:
 13093                           
 13094                           	psect	text68
 13095     15C9                     __ptext68:	
 13096 ;; *************** function _APP_KeyboardInit *****************
 13097 ;; Defined at:
 13098 ;;		line 309 in file "app_device_keyboard.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;		None
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;		None
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  1    wreg      void 
 13105 ;; Registers used:
 13106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13107 ;; Tracked objects:
 13108 ;;		On entry : 1F/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        0 bytes
 13117 ;; Hardware stack levels used: 1
 13118 ;; Hardware stack levels required when called: 2
 13119 ;; This function calls:
 13120 ;;		_USBEnableEndpoint
 13121 ;;		i1_GenericQueue_Init
 13122 ;;		i1_USBTransferOnePacket
 13123 ;; This function is called by:
 13124 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128     15C9                     _APP_KeyboardInit:	
 13129                           ;psect for function _APP_KeyboardInit
 13130                           
 13131                           
 13132                           ;app_device_keyboard.c: 310:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 13133                           
 13134                           ;incstack = 0
 13135                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13136     15C9  3030               	movlw	48
 13137     15CA  00F0               	movwf	i1GenericQueue_Init@q
 13138     15CB  3023               	movlw	35
 13139     15CC  00F1               	movwf	i1GenericQueue_Init@q+1
 13140     15CD  3001               	movlw	1
 13141     15CE  00F2               	movwf	i1GenericQueue_Init@element_size
 13142     15CF  3000               	movlw	0
 13143     15D0  00F3               	movwf	i1GenericQueue_Init@element_size+1
 13144     15D1  3192  2263  3195   	fcall	i1_GenericQueue_Init
 13145                           
 13146                           ;app_device_keyboard.c: 311:     keyboard.modifiers.value = 0;
 13147     15D4  308F               	movlw	143
 13148     15D5  0086               	movwf	6
 13149     15D6  3023               	movlw	35
 13150     15D7  0087               	movwf	7
 13151     15D8  0181               	clrf	1
 13152                           
 13153                           ;app_device_keyboard.c: 312:     keyboard.leds.value = 0;
 13154     15D9  3090               	movlw	144
 13155     15DA  0086               	movwf	6
 13156     15DB  3023               	movlw	35
 13157     15DC  0087               	movwf	7
 13158     15DD  0181               	clrf	1
 13159                           
 13160                           ;app_device_keyboard.c: 315:     keyboard.lastINTransmission = 0;
 13161     15DE  302C               	movlw	44
 13162     15DF  0086               	movwf	6
 13163     15E0  3023               	movlw	35
 13164     15E1  0087               	movwf	7
 13165     15E2  3000               	movlw	0
 13166     15E3  3FC0               	movwi [0]fsr1
 13167     15E4  3FC1               	movwi [1]fsr1
 13168                           
 13169                           ;app_device_keyboard.c: 318:     keyboardIdleRate = 250;
 13170     15E5  30FA               	movlw	250
 13171     15E6  0022               	movlb	2	; select bank2
 13172     15E7  00B8               	movwf	_keyboardIdleRate^(0+256)
 13173     15E8  3000               	movlw	0
 13174     15E9  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 13175     15EA                     i1l914:	
 13176                           ;app_device_keyboard.c: 325:     }
 13177                           
 13178                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 13179                           
 13180                           
 13181                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 13182     15EA  0020               	movlb	0	; select bank0
 13183     15EB  0866               	movf	_SOFCounter+1,w	;volatile
 13184     15EC  0022               	movlb	2	; select bank2
 13185     15ED  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 13186     15EE  1D03               	skipz
 13187     15EF  2DF4               	goto	u297_25
 13188     15F0  0020               	movlb	0	; select bank0
 13189     15F1  0865               	movf	_SOFCounter,w	;volatile
 13190     15F2  0022               	movlb	2	; select bank2
 13191     15F3  0634               	xorwf	_OldSOFCount^(0+256),w
 13192     15F4                     u297_25:
 13193     15F4  1903               	btfsc	3,2
 13194     15F5  2DFF               	goto	i1l3944
 13195                           
 13196                           ;app_device_keyboard.c: 324:         OldSOFCount = SOFCounter;
 13197     15F6  0020               	movlb	0	; select bank0
 13198     15F7  0866               	movf	_SOFCounter+1,w	;volatile
 13199     15F8  0022               	movlb	2	; select bank2
 13200     15F9  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 13201     15FA  0020               	movlb	0	; select bank0
 13202     15FB  0865               	movf	_SOFCounter,w	;volatile
 13203     15FC  0022               	movlb	2	; select bank2
 13204     15FD  00B4               	movwf	_OldSOFCount^(0+256)
 13205     15FE  2DEA               	goto	i1l914
 13206     15FF                     i1l3944:
 13207                           
 13208                           ;app_device_keyboard.c: 328:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 13209     15FF  301E               	movlw	30
 13210     1600  00F7               	movwf	USBEnableEndpoint@options
 13211     1601  3001               	movlw	1
 13212     1602  3192  2243  3195   	fcall	_USBEnableEndpoint
 13213                           
 13214                           ;app_device_keyboard.c: 331:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 13215     1605  01F0               	clrf	i1USBTransferOnePacket@dir
 13216     1606  3020               	movlw	32
 13217     1607  00F1               	movwf	i1USBTransferOnePacket@data
 13218     1608  3001               	movlw	1
 13219     1609  00F2               	movwf	i1USBTransferOnePacket@data+1
 13220     160A  01F3               	clrf	i1USBTransferOnePacket@len
 13221     160B  0AF3               	incf	i1USBTransferOnePacket@len,f
 13222     160C  3001               	movlw	1
 13223     160D  318C  2470         	fcall	i1_USBTransferOnePacket
 13224     160F  302C               	movlw	44
 13225     1610  0086               	movwf	6
 13226     1611  3023               	movlw	35
 13227     1612  0087               	movwf	7
 13228     1613  3142               	addfsr 1,2
 13229     1614  0870               	movf	?i1_USBTransferOnePacket,w
 13230     1615  3FC0               	movwi [0]fsr1
 13231     1616  0871               	movf	?i1_USBTransferOnePacket+1,w
 13232     1617  3FC1               	movwi [1]fsr1
 13233     1618  0008               	return
 13234     1619                     __end_of_APP_KeyboardInit:
 13235                           
 13236                           	psect	text69
 13237     0C70                     __ptext69:	
 13238 ;; *************** function i1_USBTransferOnePacket *****************
 13239 ;; Defined at:
 13240 ;;		line 999 in file "usb/usb_device.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  ep              1    wreg     unsigned char 
 13243 ;;  dir             1    0[COMMON] unsigned char 
 13244 ;;  data            2    1[COMMON] PTR unsigned char 
 13245 ;;		 -> inputReport(8), outputReport(1), 
 13246 ;;  len             1    3[COMMON] unsigned char 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  ep              1    8[COMMON] unsigned char 
 13249 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 13250 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  2    0[COMMON] PTR void 
 13253 ;; Registers used:
 13254 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/2
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;Total ram usage:       11 bytes
 13265 ;; Hardware stack levels used: 1
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_APP_KeyboardInit
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273     0C70                     i1_USBTransferOnePacket:	
 13274                           ;psect for function i1_USBTransferOnePacket
 13275                           
 13276                           
 13277                           ;incstack = 0
 13278                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 13279                           ;i1USBTransferOnePacket@ep stored from wreg
 13280     0C70  00F8               	movwf	i1USBTransferOnePacket@ep
 13281                           
 13282                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 13283     0C71  0870               	movf	i1USBTransferOnePacket@dir,w
 13284     0C72  1903               	btfsc	3,2
 13285     0C73  2C7C               	goto	i1l3852
 13286                           
 13287                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 13288     0C74  3578               	lslf	i1USBTransferOnePacket@ep,w
 13289     0C75  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13290     0C76  0086               	movwf	6
 13291     0C77  0187               	clrf	7
 13292     0C78  3F40               	moviw [0]fsr1
 13293     0C79  00F9               	movwf	i1USBTransferOnePacket@handle
 13294     0C7A  3F41               	moviw [1]fsr1
 13295     0C7B  2C84               	goto	L15
 13296     0C7C                     i1l3852:	
 13297                           ;usb/usb_device.c: 1008:     }
 13298                           
 13299                           
 13300                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 13301     0C7C  3578               	lslf	i1USBTransferOnePacket@ep,w
 13302     0C7D  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13303     0C7E  0086               	movwf	6
 13304     0C7F  3001               	movlw	1	; select bank2/3
 13305     0C80  0087               	movwf	7
 13306     0C81  3F40               	moviw [0]fsr1
 13307     0C82  00F9               	movwf	i1USBTransferOnePacket@handle
 13308     0C83  3F41               	moviw [1]fsr1
 13309     0C84                     L15:
 13310     0C84  00FA               	movwf	i1USBTransferOnePacket@handle+1
 13311                           
 13312                           ;usb/usb_device.c: 1017:     if(handle == 0)
 13313     0C85  0879               	movf	i1USBTransferOnePacket@handle,w
 13314     0C86  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 13315     0C87  1D03               	btfss	3,2
 13316     0C88  2C8C               	goto	i1l3860
 13317                           
 13318                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 13319     0C89  01F0               	clrf	?i1_USBTransferOnePacket
 13320     0C8A  01F1               	clrf	?i1_USBTransferOnePacket+1
 13321     0C8B  0008               	return
 13322     0C8C                     i1l3860:
 13323                           
 13324                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 13325     0C8C  30FF               	movlw	255
 13326     0C8D  0571               	andwf	i1USBTransferOnePacket@data,w
 13327     0C8E  00F4               	movwf	??i1_USBTransferOnePacket
 13328     0C8F  307F               	movlw	127
 13329     0C90  0572               	andwf	i1USBTransferOnePacket@data+1,w
 13330     0C91  00F5               	movwf	??i1_USBTransferOnePacket+1
 13331     0C92  0879               	movf	i1USBTransferOnePacket@handle,w
 13332     0C93  0086               	movwf	6
 13333     0C94  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13334     0C95  0087               	movwf	7
 13335     0C96  3142               	addfsr 1,2
 13336     0C97  0874               	movf	??i1_USBTransferOnePacket,w
 13337     0C98  3FC0               	movwi [0]fsr1
 13338     0C99  0875               	movf	??i1_USBTransferOnePacket+1,w
 13339     0C9A  3FC1               	movwi [1]fsr1
 13340                           
 13341                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 13342     0C9B  0879               	movf	i1USBTransferOnePacket@handle,w
 13343     0C9C  3E01               	addlw	1
 13344     0C9D  00F4               	movwf	??i1_USBTransferOnePacket
 13345     0C9E  3000               	movlw	0
 13346     0C9F  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 13347     0CA0  00F5               	movwf	??i1_USBTransferOnePacket+1
 13348     0CA1  0874               	movf	??i1_USBTransferOnePacket,w
 13349     0CA2  0086               	movwf	6
 13350     0CA3  0875               	movf	??i1_USBTransferOnePacket+1,w
 13351     0CA4  0087               	movwf	7
 13352     0CA5  0873               	movf	i1USBTransferOnePacket@len,w
 13353     0CA6  0081               	movwf	1
 13354                           
 13355                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 13356     0CA7  3040               	movlw	64
 13357     0CA8  00F4               	movwf	??i1_USBTransferOnePacket
 13358     0CA9  0879               	movf	i1USBTransferOnePacket@handle,w
 13359     0CAA  0086               	movwf	6
 13360     0CAB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13361     0CAC  0087               	movwf	7
 13362     0CAD  0874               	movf	??i1_USBTransferOnePacket,w
 13363     0CAE  0581               	andwf	1,f
 13364                           
 13365                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 13366     0CAF  0879               	movf	i1USBTransferOnePacket@handle,w
 13367     0CB0  0086               	movwf	6
 13368     0CB1  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13369     0CB2  0087               	movwf	7
 13370     0CB3  1581               	bsf	1,3
 13371                           
 13372                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 13373     0CB4  0879               	movf	i1USBTransferOnePacket@handle,w
 13374     0CB5  0086               	movwf	6
 13375     0CB6  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13376     0CB7  0087               	movwf	7
 13377     0CB8  1781               	bsf	1,7
 13378                           
 13379                           ;usb/usb_device.c: 1040:     if(dir != 0)
 13380     0CB9  0870               	movf	i1USBTransferOnePacket@dir,w
 13381     0CBA  1903               	btfsc	3,2
 13382     0CBB  2CD3               	goto	i1l3870
 13383                           
 13384                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 13385     0CBC  3578               	lslf	i1USBTransferOnePacket@ep,w
 13386     0CBD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13387     0CBE  0086               	movwf	6
 13388     0CBF  0187               	clrf	7
 13389     0CC0  3F40               	moviw [0]fsr1
 13390     0CC1  00F4               	movwf	??i1_USBTransferOnePacket
 13391     0CC2  3F41               	moviw [1]fsr1
 13392     0CC3  00F5               	movwf	??i1_USBTransferOnePacket+1
 13393     0CC4  3004               	movlw	4
 13394     0CC5  0674               	xorwf	??i1_USBTransferOnePacket,w
 13395     0CC6  00F6               	movwf	??i1_USBTransferOnePacket+2
 13396     0CC7  3000               	movlw	0
 13397     0CC8  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13398     0CC9  00F7               	movwf	??i1_USBTransferOnePacket+3
 13399     0CCA  3578               	lslf	i1USBTransferOnePacket@ep,w
 13400     0CCB  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13401     0CCC  0086               	movwf	6
 13402     0CCD  0187               	clrf	7
 13403     0CCE  0876               	movf	??i1_USBTransferOnePacket+2,w
 13404     0CCF  3FC0               	movwi [0]fsr1
 13405     0CD0  0877               	movf	??i1_USBTransferOnePacket+3,w
 13406     0CD1  3FC1               	movwi [1]fsr1
 13407                           
 13408                           ;usb/usb_device.c: 1044:     }
 13409     0CD2  2CEB               	goto	i1l3872
 13410     0CD3                     i1l3870:
 13411                           
 13412                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 13413     0CD3  3578               	lslf	i1USBTransferOnePacket@ep,w
 13414     0CD4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13415     0CD5  0086               	movwf	6
 13416     0CD6  3001               	movlw	1	; select bank2/3
 13417     0CD7  0087               	movwf	7
 13418     0CD8  3F40               	moviw [0]fsr1
 13419     0CD9  00F4               	movwf	??i1_USBTransferOnePacket
 13420     0CDA  3F41               	moviw [1]fsr1
 13421     0CDB  00F5               	movwf	??i1_USBTransferOnePacket+1
 13422     0CDC  3004               	movlw	4
 13423     0CDD  0674               	xorwf	??i1_USBTransferOnePacket,w
 13424     0CDE  00F6               	movwf	??i1_USBTransferOnePacket+2
 13425     0CDF  3000               	movlw	0
 13426     0CE0  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13427     0CE1  00F7               	movwf	??i1_USBTransferOnePacket+3
 13428     0CE2  3578               	lslf	i1USBTransferOnePacket@ep,w
 13429     0CE3  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13430     0CE4  0086               	movwf	6
 13431     0CE5  3001               	movlw	1	; select bank2/3
 13432     0CE6  0087               	movwf	7
 13433     0CE7  0876               	movf	??i1_USBTransferOnePacket+2,w
 13434     0CE8  3FC0               	movwi [0]fsr1
 13435     0CE9  0877               	movf	??i1_USBTransferOnePacket+3,w
 13436     0CEA  3FC1               	movwi [1]fsr1
 13437     0CEB                     i1l3872:
 13438                           
 13439                           ;usb/usb_device.c: 1050:     return (void*)handle;
 13440     0CEB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13441     0CEC  00F1               	movwf	?i1_USBTransferOnePacket+1
 13442     0CED  0879               	movf	i1USBTransferOnePacket@handle,w
 13443     0CEE  00F0               	movwf	?i1_USBTransferOnePacket
 13444     0CEF  0008               	return
 13445     0CF0                     __end_ofi1_USBTransferOnePacket:
 13446                           
 13447                           	psect	text70
 13448     1263                     __ptext70:	
 13449 ;; *************** function i1_GenericQueue_Init *****************
 13450 ;; Defined at:
 13451 ;;		line 4 in file "generic_queue.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  q               2    0[COMMON] PTR struct .
 13454 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 13455 ;;  element_size    2    2[COMMON] unsigned int 
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;		None
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  1    wreg      void 
 13460 ;; Registers used:
 13461 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 1F/0
 13464 ;;		On exit  : 1F/0
 13465 ;;		Unchanged: 1F/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;Total ram usage:        4 bytes
 13472 ;; Hardware stack levels used: 1
 13473 ;; This function calls:
 13474 ;;		Nothing
 13475 ;; This function is called by:
 13476 ;;		_APP_KeyboardInit
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480     1263                     i1_GenericQueue_Init:	
 13481                           ;psect for function i1_GenericQueue_Init
 13482                           
 13483                           
 13484                           ;generic_queue.c: 5:     q->element_size = element_size;
 13485                           
 13486                           ;incstack = 0
 13487                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13488     1263  0870               	movf	i1GenericQueue_Init@q,w
 13489     1264  3E5A               	addlw	90
 13490     1265  0086               	movwf	6
 13491     1266  3000               	movlw	0
 13492     1267  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13493     1268  0087               	movwf	7
 13494     1269  0872               	movf	i1GenericQueue_Init@element_size,w
 13495     126A  3FC0               	movwi [0]fsr1
 13496     126B  0873               	movf	i1GenericQueue_Init@element_size+1,w
 13497     126C  3FC1               	movwi [1]fsr1
 13498                           
 13499                           ;generic_queue.c: 6:     q->front = 0;
 13500     126D  0870               	movf	i1GenericQueue_Init@q,w
 13501     126E  3E5C               	addlw	92
 13502     126F  0086               	movwf	6
 13503     1270  3000               	movlw	0
 13504     1271  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13505     1272  0087               	movwf	7
 13506     1273  0181               	clrf	1
 13507                           
 13508                           ;generic_queue.c: 7:     q->rear = 0;
 13509     1274  0870               	movf	i1GenericQueue_Init@q,w
 13510     1275  3E5D               	addlw	93
 13511     1276  0086               	movwf	6
 13512     1277  3000               	movlw	0
 13513     1278  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13514     1279  0087               	movwf	7
 13515     127A  0181               	clrf	1
 13516                           
 13517                           ;generic_queue.c: 8:     q->size = 0;
 13518     127B  0870               	movf	i1GenericQueue_Init@q,w
 13519     127C  3E5E               	addlw	94
 13520     127D  0086               	movwf	6
 13521     127E  3000               	movlw	0
 13522     127F  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13523     1280  0087               	movwf	7
 13524     1281  0181               	clrf	1
 13525     1282  0008               	return
 13526     1283                     __end_ofi1_GenericQueue_Init:
 13527                           
 13528                           	psect	text71
 13529     1243                     __ptext71:	
 13530 ;; *************** function _USBEnableEndpoint *****************
 13531 ;; Defined at:
 13532 ;;		line 882 in file "usb/usb_device.c"
 13533 ;; Parameters:    Size  Location     Type
 13534 ;;  ep              1    wreg     unsigned char 
 13535 ;;  options         1    7[COMMON] unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  ep              1   12[COMMON] unsigned char 
 13538 ;;  p               2   10[COMMON] PTR unsigned char 
 13539 ;;		 -> UEP0(1), 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      void 
 13542 ;; Registers used:
 13543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13544 ;; Tracked objects:
 13545 ;;		On entry : 1F/2
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:        6 bytes
 13554 ;; Hardware stack levels used: 1
 13555 ;; Hardware stack levels required when called: 1
 13556 ;; This function calls:
 13557 ;;		_USBConfigureEndpoint
 13558 ;; This function is called by:
 13559 ;;		_APP_KeyboardInit
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563     1243                     _USBEnableEndpoint:	
 13564                           ;psect for function _USBEnableEndpoint
 13565                           
 13566                           
 13567                           ;incstack = 0
 13568                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13569                           ;USBEnableEndpoint@ep stored from wreg
 13570     1243  00FC               	movwf	USBEnableEndpoint@ep
 13571                           
 13572                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 13573     1244  1D77               	btfss	USBEnableEndpoint@options,2
 13574     1245  2A4B               	goto	i1l3828
 13575                           
 13576                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 13577     1246  01F0               	clrf	USBConfigureEndpoint@direction
 13578     1247  087C               	movf	USBEnableEndpoint@ep,w
 13579     1248  3194  2471  3192   	fcall	_USBConfigureEndpoint
 13580     124B                     i1l3828:
 13581                           
 13582                           ;usb/usb_device.c: 892:     if(options & 0x02)
 13583     124B  1CF7               	btfss	USBEnableEndpoint@options,1
 13584     124C  2A52               	goto	i1l3832
 13585                           
 13586                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 13587     124D  01F0               	clrf	USBConfigureEndpoint@direction
 13588     124E  0AF0               	incf	USBConfigureEndpoint@direction,f
 13589     124F  087C               	movf	USBEnableEndpoint@ep,w
 13590     1250  3194  2471         	fcall	_USBConfigureEndpoint
 13591     1252                     i1l3832:
 13592                           
 13593                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 13594     1252  087C               	movf	USBEnableEndpoint@ep,w
 13595     1253  3E98               	addlw	152
 13596     1254  00F8               	movwf	??_USBEnableEndpoint
 13597     1255  01F9               	clrf	??_USBEnableEndpoint+1
 13598     1256  300E               	movlw	14
 13599     1257  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 13600     1258  0878               	movf	??_USBEnableEndpoint,w
 13601     1259  00FA               	movwf	USBEnableEndpoint@p
 13602     125A  0879               	movf	??_USBEnableEndpoint+1,w
 13603     125B  00FB               	movwf	USBEnableEndpoint@p+1
 13604                           
 13605                           ;usb/usb_device.c: 905:     *p = options;
 13606     125C  087A               	movf	USBEnableEndpoint@p,w
 13607     125D  0086               	movwf	6
 13608     125E  087B               	movf	USBEnableEndpoint@p+1,w
 13609     125F  0087               	movwf	7
 13610     1260  0877               	movf	USBEnableEndpoint@options,w
 13611     1261  0081               	movwf	1
 13612     1262  0008               	return
 13613     1263                     __end_of_USBEnableEndpoint:
 13614                           
 13615                           	psect	text72
 13616     1471                     __ptext72:	
 13617 ;; *************** function _USBConfigureEndpoint *****************
 13618 ;; Defined at:
 13619 ;;		line 1547 in file "usb/usb_device.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  EPNum           1    wreg     unsigned char 
 13622 ;;  direction       1    0[COMMON] unsigned char 
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;  EPNum           1    5[COMMON] unsigned char 
 13625 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 13626 ;;		 -> BDT(32), 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      void 
 13629 ;; Registers used:
 13630 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/2
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13636 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;Total ram usage:        7 bytes
 13641 ;; Hardware stack levels used: 1
 13642 ;; This function calls:
 13643 ;;		Nothing
 13644 ;; This function is called by:
 13645 ;;		_USBEnableEndpoint
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649     1471                     _USBConfigureEndpoint:	
 13650                           ;psect for function _USBConfigureEndpoint
 13651                           
 13652                           
 13653                           ;incstack = 0
 13654                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13655                           ;USBConfigureEndpoint@EPNum stored from wreg
 13656     1471  00F5               	movwf	USBConfigureEndpoint@EPNum
 13657                           
 13658                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 13659     1472  3020               	movlw	32
 13660     1473  00F6               	movwf	USBConfigureEndpoint@handle
 13661                           
 13662                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 13663     1474  0870               	movf	USBConfigureEndpoint@direction,w
 13664     1475  00F1               	movwf	??_USBConfigureEndpoint
 13665     1476  3001               	movlw	1
 13666     1477                     u282_25:
 13667     1477  35F1               	lslf	??_USBConfigureEndpoint,f
 13668     1478  0B89               	decfsz	9,f
 13669     1479  2C77               	goto	u282_25
 13670     147A  0875               	movf	USBConfigureEndpoint@EPNum,w
 13671     147B  00F2               	movwf	??_USBConfigureEndpoint+1
 13672     147C  3001               	movlw	1
 13673     147D                     u283_25:
 13674     147D  35F2               	lslf	??_USBConfigureEndpoint+1,f
 13675     147E  3EFF               	addlw	-1
 13676     147F  1D03               	skipz
 13677     1480  2C7D               	goto	u283_25
 13678     1481  3572               	lslf	??_USBConfigureEndpoint+1,w
 13679     1482  0771               	addwf	??_USBConfigureEndpoint,w
 13680     1483  00F3               	movwf	??_USBConfigureEndpoint+2
 13681     1484  3001               	movlw	1
 13682     1485                     u284_25:
 13683     1485  35F3               	lslf	??_USBConfigureEndpoint+2,f
 13684     1486  3EFF               	addlw	-1
 13685     1487  1D03               	skipz
 13686     1488  2C85               	goto	u284_25
 13687     1489  3573               	lslf	??_USBConfigureEndpoint+2,w
 13688     148A  00F4               	movwf	??_USBConfigureEndpoint+3
 13689     148B  0874               	movf	??_USBConfigureEndpoint+3,w
 13690     148C  07F6               	addwf	USBConfigureEndpoint@handle,f
 13691                           
 13692                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 13693     148D  0876               	movf	USBConfigureEndpoint@handle,w
 13694     148E  0086               	movwf	6
 13695     148F  0187               	clrf	7
 13696     1490  1381               	bcf	1,7
 13697                           
 13698                           ;usb/usb_device.c: 1561:     if(direction == 0)
 13699     1491  0870               	movf	USBConfigureEndpoint@direction,w
 13700     1492  1D03               	btfss	3,2
 13701     1493  2C9E               	goto	i1l3818
 13702                           
 13703                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13704     1494  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13705     1495  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13706     1496  0086               	movwf	6
 13707     1497  3001               	movlw	1	; select bank2/3
 13708     1498  0087               	movwf	7
 13709     1499  0876               	movf	USBConfigureEndpoint@handle,w
 13710     149A  3FC0               	movwi [0]fsr1
 13711     149B  3000               	movlw	0
 13712     149C  3FC1               	movwi [1]fsr1
 13713                           
 13714                           ;usb/usb_device.c: 1564:     }
 13715     149D  2CA6               	goto	i1l3820
 13716     149E                     i1l3818:
 13717                           
 13718                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13719     149E  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13720     149F  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13721     14A0  0086               	movwf	6
 13722     14A1  0187               	clrf	7
 13723     14A2  0876               	movf	USBConfigureEndpoint@handle,w
 13724     14A3  3FC0               	movwi [0]fsr1
 13725     14A4  3000               	movlw	0
 13726     14A5  3FC1               	movwi [1]fsr1
 13727     14A6                     i1l3820:
 13728                           
 13729                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13730     14A6  0876               	movf	USBConfigureEndpoint@handle,w
 13731     14A7  0086               	movwf	6
 13732     14A8  0187               	clrf	7
 13733     14A9  1301               	bcf	1,6
 13734                           
 13735                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13736     14AA  0876               	movf	USBConfigureEndpoint@handle,w
 13737     14AB  3E04               	addlw	4
 13738     14AC  0086               	movwf	6
 13739     14AD  0187               	clrf	7
 13740     14AE  1701               	bsf	1,6
 13741     14AF  0008               	return
 13742     14B0                     __end_of_USBConfigureEndpoint:
 13743                           
 13744                           	psect	text73
 13745     13FA                     __ptext73:	
 13746 ;; *************** function _USBCtrlTrfOutHandler *****************
 13747 ;; Defined at:
 13748 ;;		line 2545 in file "usb/usb_device.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;		None
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;		None
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      void 
 13755 ;; Registers used:
 13756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 1F/0
 13759 ;;		On exit  : 1D/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;Total ram usage:        4 bytes
 13767 ;; Hardware stack levels used: 1
 13768 ;; Hardware stack levels required when called: 4
 13769 ;; This function calls:
 13770 ;;		_USBCtrlTrfRxService
 13771 ;; This function is called by:
 13772 ;;		_USBCtrlEPService
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776     13FA                     _USBCtrlTrfOutHandler:	
 13777                           ;psect for function _USBCtrlTrfOutHandler
 13778                           
 13779                           
 13780                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13781                           
 13782                           ;incstack = 0
 13783                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13784     13FA  3002               	movlw	2
 13785     13FB  066A               	xorwf	_controlTransferState,w	;volatile
 13786     13FC  1D03               	btfss	3,2
 13787     13FD  2C01               	goto	i1l4670
 13788                           
 13789                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13790     13FE  318F  274D         	fcall	_USBCtrlTrfRxService
 13791                           
 13792                           ;usb/usb_device.c: 2550:     }
 13793     1400  0008               	return
 13794     1401                     i1l4670:
 13795                           
 13796                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13797     1401  01EA               	clrf	_controlTransferState	;volatile
 13798                           
 13799                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13800     1402  0022               	movlb	2	; select bank2
 13801     1403  085B               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13802     1404  1D03               	btfss	3,2
 13803     1405  2C32               	goto	i1l4682
 13804                           
 13805                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13806     1406  0020               	movlb	0	; select bank0
 13807     1407  0867               	movf	_pBDTEntryEP0OutNext,w
 13808     1408  3E01               	addlw	1
 13809     1409  00FA               	movwf	??_USBCtrlTrfOutHandler
 13810     140A  3000               	movlw	0
 13811     140B  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13812     140C  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13813     140D  087A               	movf	??_USBCtrlTrfOutHandler,w
 13814     140E  0086               	movwf	6
 13815     140F  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13816     1410  0087               	movwf	7
 13817     1411  3008               	movlw	8
 13818     1412  0081               	movwf	1
 13819                           
 13820                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13821     1413  3040               	movlw	64
 13822     1414  00FA               	movwf	??_USBCtrlTrfOutHandler
 13823     1415  3000               	movlw	0
 13824     1416  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13825     1417  30FF               	movlw	255
 13826     1418  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13827     1419  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13828     141A  307F               	movlw	127
 13829     141B  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13830     141C  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13831     141D  0867               	movf	_pBDTEntryEP0OutNext,w
 13832     141E  0086               	movwf	6
 13833     141F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13834     1420  0087               	movwf	7
 13835     1421  3142               	addfsr 1,2
 13836     1422  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13837     1423  3FC0               	movwi [0]fsr1
 13838     1424  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13839     1425  3FC1               	movwi [1]fsr1
 13840                           
 13841                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13842     1426  0867               	movf	_pBDTEntryEP0OutNext,w
 13843     1427  0086               	movwf	6
 13844     1428  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13845     1429  0087               	movwf	7
 13846     142A  300C               	movlw	12
 13847     142B  0081               	movwf	1
 13848                           
 13849                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13850     142C  0867               	movf	_pBDTEntryEP0OutNext,w
 13851     142D  0086               	movwf	6
 13852     142E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13853     142F  0087               	movwf	7
 13854     1430  1781               	bsf	1,7
 13855                           
 13856                           ;usb/usb_device.c: 2568:         }
 13857     1431  0008               	return
 13858     1432                     i1l4682:
 13859                           
 13860                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13861     1432  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13862     1433  0008               	return
 13863     1434                     __end_of_USBCtrlTrfOutHandler:
 13864                           
 13865                           	psect	text74
 13866     0F4D                     __ptext74:	
 13867 ;; *************** function _USBCtrlTrfRxService *****************
 13868 ;; Defined at:
 13869 ;;		line 1856 in file "usb/usb_device.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;		None
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;  byteToRead      1    9[COMMON] unsigned char 
 13874 ;;  i               1    8[COMMON] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      void 
 13877 ;; Registers used:
 13878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 1F/0
 13881 ;;		On exit  : 1D/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        6 bytes
 13889 ;; Hardware stack levels used: 1
 13890 ;; Hardware stack levels required when called: 3
 13891 ;; This function calls:
 13892 ;;		_USBCtrlEPAllowStatusStage
 13893 ;;		_USBHIDCBSetReportComplete
 13894 ;; This function is called by:
 13895 ;;		_USBCtrlTrfOutHandler
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899     0F4D                     _USBCtrlTrfRxService:	
 13900                           ;psect for function _USBCtrlTrfRxService
 13901                           
 13902                           
 13903                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13904                           
 13905                           ;incstack = 0
 13906                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13907     0F4D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13908     0F4E  0086               	movwf	6
 13909     0F4F  0187               	clrf	7
 13910     0F50  3F41               	moviw [1]fsr1
 13911     0F51  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13912                           
 13913                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13914     0F52  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13915     0F53  00F4               	movwf	??_USBCtrlTrfRxService
 13916     0F54  01F5               	clrf	??_USBCtrlTrfRxService+1
 13917     0F55  0875               	movf	??_USBCtrlTrfRxService+1,w
 13918     0F56  0022               	movlb	2	; select bank2
 13919     0F57  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13920     0F58  1D03               	skipz
 13921     0F59  2F5C               	goto	u365_25
 13922     0F5A  0874               	movf	??_USBCtrlTrfRxService,w
 13923     0F5B  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13924     0F5C                     u365_25:
 13925     0F5C  1803               	skipnc
 13926     0F5D  2F60               	goto	i1l594
 13927                           
 13928                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13929     0F5E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13930     0F5F  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13931     0F60                     i1l594:	
 13932                           ;usb/usb_device.c: 1872:     }
 13933                           
 13934                           
 13935                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13936     0F60  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13937     0F61  00F4               	movwf	??_USBCtrlTrfRxService
 13938     0F62  01F5               	clrf	??_USBCtrlTrfRxService+1
 13939     0F63  0874               	movf	??_USBCtrlTrfRxService,w
 13940     0F64  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13941     0F65  0875               	movf	??_USBCtrlTrfRxService+1,w
 13942     0F66  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 13943                           
 13944                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 13945     0F67  01F8               	clrf	USBCtrlTrfRxService@i
 13946     0F68                     i1l4446:
 13947     0F68  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13948     0F69  0278               	subwf	USBCtrlTrfRxService@i,w
 13949     0F6A  1803               	btfsc	3,0
 13950     0F6B  2F7E               	goto	i1l4448
 13951                           
 13952                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 13953     0F6C  0821               	movf	_outPipes^(0+256),w	;volatile
 13954     0F6D  0086               	movwf	6
 13955     0F6E  0187               	clrf	7
 13956     0F6F  0878               	movf	USBCtrlTrfRxService@i,w
 13957     0F70  3E48               	addlw	72
 13958     0F71  0084               	movwf	4
 13959     0F72  0185               	clrf	5
 13960     0F73  0800               	movf	0,w
 13961     0F74  0081               	movwf	1
 13962     0F75  3001               	movlw	1
 13963     0F76  00F4               	movwf	??_USBCtrlTrfRxService
 13964     0F77  0874               	movf	??_USBCtrlTrfRxService,w
 13965     0F78  07A1               	addwf	_outPipes^(0+256),f	;volatile
 13966                           
 13967                           ;usb/usb_device.c: 1881:     }
 13968     0F79  3001               	movlw	1
 13969     0F7A  00F4               	movwf	??_USBCtrlTrfRxService
 13970     0F7B  0874               	movf	??_USBCtrlTrfRxService,w
 13971     0F7C  07F8               	addwf	USBCtrlTrfRxService@i,f
 13972     0F7D  2F68               	goto	i1l4446
 13973     0F7E                     i1l4448:
 13974                           
 13975                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 13976     0F7E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13977     0F7F  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13978     0F80  1903               	btfsc	3,2
 13979     0F81  2FBF               	goto	i1l4460
 13980                           
 13981                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13982     0F82  0020               	movlb	0	; select bank0
 13983     0F83  0867               	movf	_pBDTEntryEP0OutNext,w
 13984     0F84  3E01               	addlw	1
 13985     0F85  00F4               	movwf	??_USBCtrlTrfRxService
 13986     0F86  3000               	movlw	0
 13987     0F87  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13988     0F88  00F5               	movwf	??_USBCtrlTrfRxService+1
 13989     0F89  0874               	movf	??_USBCtrlTrfRxService,w
 13990     0F8A  0086               	movwf	6
 13991     0F8B  0875               	movf	??_USBCtrlTrfRxService+1,w
 13992     0F8C  0087               	movwf	7
 13993     0F8D  3008               	movlw	8
 13994     0F8E  0081               	movwf	1
 13995                           
 13996                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 13997     0F8F  3048               	movlw	72
 13998     0F90  00F4               	movwf	??_USBCtrlTrfRxService
 13999     0F91  3000               	movlw	0
 14000     0F92  00F5               	movwf	??_USBCtrlTrfRxService+1
 14001     0F93  30FF               	movlw	255
 14002     0F94  0574               	andwf	??_USBCtrlTrfRxService,w
 14003     0F95  00F6               	movwf	??_USBCtrlTrfRxService+2
 14004     0F96  307F               	movlw	127
 14005     0F97  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14006     0F98  00F7               	movwf	??_USBCtrlTrfRxService+3
 14007     0F99  0867               	movf	_pBDTEntryEP0OutNext,w
 14008     0F9A  0086               	movwf	6
 14009     0F9B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14010     0F9C  0087               	movwf	7
 14011     0F9D  3142               	addfsr 1,2
 14012     0F9E  0876               	movf	??_USBCtrlTrfRxService+2,w
 14013     0F9F  3FC0               	movwi [0]fsr1
 14014     0FA0  0877               	movf	??_USBCtrlTrfRxService+3,w
 14015     0FA1  3FC1               	movwi [1]fsr1
 14016                           
 14017                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 14018     0FA2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14019     0FA3  0086               	movwf	6
 14020     0FA4  0187               	clrf	7
 14021     0FA5  1B01               	btfsc	1,6
 14022     0FA6  2FB3               	goto	i1l4458
 14023                           
 14024                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 14025     0FA7  0867               	movf	_pBDTEntryEP0OutNext,w
 14026     0FA8  0086               	movwf	6
 14027     0FA9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14028     0FAA  0087               	movwf	7
 14029     0FAB  3048               	movlw	72
 14030     0FAC  0081               	movwf	1
 14031                           
 14032                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14033     0FAD  0867               	movf	_pBDTEntryEP0OutNext,w
 14034     0FAE  0086               	movwf	6
 14035     0FAF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14036     0FB0  0087               	movwf	7
 14037     0FB1  1781               	bsf	1,7
 14038                           
 14039                           ;usb/usb_device.c: 1893:         }
 14040     0FB2  0008               	return
 14041     0FB3                     i1l4458:
 14042                           
 14043                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 14044     0FB3  0867               	movf	_pBDTEntryEP0OutNext,w
 14045     0FB4  0086               	movwf	6
 14046     0FB5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14047     0FB6  0087               	movwf	7
 14048     0FB7  3008               	movlw	8
 14049     0FB8  0081               	movwf	1
 14050                           
 14051                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14052     0FB9  0867               	movf	_pBDTEntryEP0OutNext,w
 14053     0FBA  0086               	movwf	6
 14054     0FBB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14055     0FBC  0087               	movwf	7
 14056     0FBD  1781               	bsf	1,7
 14057     0FBE  0008               	return
 14058     0FBF                     i1l4460:
 14059                           
 14060                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14061     0FBF  0020               	movlb	0	; select bank0
 14062     0FC0  0867               	movf	_pBDTEntryEP0OutNext,w
 14063     0FC1  3E01               	addlw	1
 14064     0FC2  00F4               	movwf	??_USBCtrlTrfRxService
 14065     0FC3  3000               	movlw	0
 14066     0FC4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14067     0FC5  00F5               	movwf	??_USBCtrlTrfRxService+1
 14068     0FC6  0874               	movf	??_USBCtrlTrfRxService,w
 14069     0FC7  0086               	movwf	6
 14070     0FC8  0875               	movf	??_USBCtrlTrfRxService+1,w
 14071     0FC9  0087               	movwf	7
 14072     0FCA  3008               	movlw	8
 14073     0FCB  0081               	movwf	1
 14074                           
 14075                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 14076     0FCC  3040               	movlw	64
 14077     0FCD  00F4               	movwf	??_USBCtrlTrfRxService
 14078     0FCE  3000               	movlw	0
 14079     0FCF  00F5               	movwf	??_USBCtrlTrfRxService+1
 14080     0FD0  30FF               	movlw	255
 14081     0FD1  0574               	andwf	??_USBCtrlTrfRxService,w
 14082     0FD2  00F6               	movwf	??_USBCtrlTrfRxService+2
 14083     0FD3  307F               	movlw	127
 14084     0FD4  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14085     0FD5  00F7               	movwf	??_USBCtrlTrfRxService+3
 14086     0FD6  0867               	movf	_pBDTEntryEP0OutNext,w
 14087     0FD7  0086               	movwf	6
 14088     0FD8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14089     0FD9  0087               	movwf	7
 14090     0FDA  3142               	addfsr 1,2
 14091     0FDB  0876               	movf	??_USBCtrlTrfRxService+2,w
 14092     0FDC  3FC0               	movwi [0]fsr1
 14093     0FDD  0877               	movf	??_USBCtrlTrfRxService+3,w
 14094     0FDE  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 14097     0FDF  0867               	movf	_pBDTEntryEP0OutNext,w
 14098     0FE0  0086               	movwf	6
 14099     0FE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14100     0FE2  0087               	movwf	7
 14101     0FE3  3004               	movlw	4
 14102     0FE4  0081               	movwf	1
 14103                           
 14104                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14105     0FE5  0867               	movf	_pBDTEntryEP0OutNext,w
 14106     0FE6  0086               	movwf	6
 14107     0FE7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14108     0FE8  0087               	movwf	7
 14109     0FE9  1781               	bsf	1,7
 14110                           
 14111                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 14112     0FEA  0022               	movlb	2	; select bank2
 14113     0FEB  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14114     0FEC  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14115     0FED  1903               	btfsc	3,2
 14116     0FEE  2FF9               	goto	i1l4472
 14117                           
 14118                           ;usb/usb_device.c: 1919:         {
 14119     0FEF  3005               	movlw	5
 14120     0FF0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14121     0FF1  0086               	movwf	6
 14122     0FF2  3001               	movlw	1	; select bank2/3
 14123     0FF3  0087               	movwf	7
 14124     0FF4  3F41               	moviw [1]fsr1
 14125     0FF5  008A               	movwf	10
 14126     0FF6  3F40               	moviw [0]fsr1
 14127     0FF7  000A               	callw
 14128     0FF8  318F               	pagesel	$
 14129     0FF9                     i1l4472:
 14130     0FF9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14131                           
 14132                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 14133     0FFA  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 14134     0FFB  1D03               	btfss	3,2
 14135     0FFC  0008               	return
 14136                           
 14137                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 14138     0FFD  318A  2218         	fcall	_USBCtrlEPAllowStatusStage
 14139     0FFF  0008               	return
 14140     1000                     __end_of_USBCtrlTrfRxService:
 14141                           
 14142                           	psect	text75
 14143     0A18                     __ptext75:	
 14144 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 14145 ;; Defined at:
 14146 ;;		line 1420 in file "usb/usb_device.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;		None
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;		None
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/2
 14157 ;;		On exit  : 1D/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;Total ram usage:        4 bytes
 14165 ;; Hardware stack levels used: 1
 14166 ;; This function calls:
 14167 ;;		Nothing
 14168 ;; This function is called by:
 14169 ;;		_USBDeviceTasks
 14170 ;;		_USBCtrlEPServiceComplete
 14171 ;;		_USBCtrlTrfRxService
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175     0A18                     _USBCtrlEPAllowStatusStage:	
 14176                           ;psect for function _USBCtrlEPAllowStatusStage
 14177                           
 14178                           
 14179                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 14183     0A18  0022               	movlb	2	; select bank2
 14184     0A19  0858               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 14185     0A1A  1D03               	btfss	3,2
 14186     0A1B  0008               	return
 14187                           
 14188                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 14189     0A1C  3001               	movlw	1
 14190     0A1D  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 14191                           
 14192                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 14193     0A1E  0857               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 14194     0A1F  1D03               	btfss	3,2
 14195     0A20  0008               	return
 14196                           
 14197                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 14198     0A21  3001               	movlw	1
 14199     0A22  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 14200                           
 14201                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 14202     0A23  3002               	movlw	2
 14203     0A24  0020               	movlb	0	; select bank0
 14204     0A25  066A               	xorwf	_controlTransferState,w	;volatile
 14205     0A26  1D03               	btfss	3,2
 14206     0A27  2A3A               	goto	i1l4062
 14207                           
 14208                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 14209     0A28  0861               	movf	_pBDTEntryIn,w
 14210     0A29  0086               	movwf	6
 14211     0A2A  0862               	movf	_pBDTEntryIn+1,w
 14212     0A2B  0087               	movwf	7
 14213     0A2C  3141               	addfsr 1,1
 14214     0A2D  0181               	clrf	1
 14215                           
 14216                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14217     0A2E  0861               	movf	_pBDTEntryIn,w
 14218     0A2F  0086               	movwf	6
 14219     0A30  0862               	movf	_pBDTEntryIn+1,w
 14220     0A31  0087               	movwf	7
 14221     0A32  3048               	movlw	72
 14222     0A33  0081               	movwf	1
 14223                           
 14224                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14225     0A34  0861               	movf	_pBDTEntryIn,w
 14226     0A35  0086               	movwf	6
 14227     0A36  0862               	movf	_pBDTEntryIn+1,w
 14228     0A37  0087               	movwf	7
 14229     0A38  1781               	bsf	1,7
 14230                           
 14231                           ;usb/usb_device.c: 1441:             }
 14232     0A39  0008               	return
 14233     0A3A                     i1l4062:
 14234     0A3A  036A               	decf	_controlTransferState,w	;volatile
 14235     0A3B  1D03               	btfss	3,2
 14236     0A3C  0008               	return
 14237                           
 14238                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 14239     0A3D  0022               	movlb	2	; select bank2
 14240     0A3E  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14241                           
 14242                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 14243     0A3F  0020               	movlb	0	; select bank0
 14244     0A40  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 14245     0A41  0086               	movwf	6
 14246     0A42  0187               	clrf	7
 14247     0A43  3008               	movlw	8
 14248     0A44  0081               	movwf	1
 14249                           
 14250                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 14251     0A45  3040               	movlw	64
 14252     0A46  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14253     0A47  3000               	movlw	0
 14254     0A48  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14255     0A49  30FF               	movlw	255
 14256     0A4A  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14257     0A4B  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14258     0A4C  307F               	movlw	127
 14259     0A4D  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14260     0A4E  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14261     0A4F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14262     0A50  3E02               	addlw	2
 14263     0A51  0086               	movwf	6
 14264     0A52  0187               	clrf	7
 14265     0A53  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14266     0A54  3FC0               	movwi [0]fsr1
 14267     0A55  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14268     0A56  3FC1               	movwi [1]fsr1
 14269                           
 14270                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 14271     0A57  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14272     0A58  0086               	movwf	6
 14273     0A59  0187               	clrf	7
 14274     0A5A  3004               	movlw	4
 14275     0A5B  0081               	movwf	1
 14276                           
 14277                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 14278     0A5C  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14279     0A5D  0086               	movwf	6
 14280     0A5E  0187               	clrf	7
 14281     0A5F  1781               	bsf	1,7
 14282                           
 14283                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 14284     0A60  3001               	movlw	1
 14285     0A61  0022               	movlb	2	; select bank2
 14286     0A62  00DB               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14287                           
 14288                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 14289     0A63  0020               	movlb	0	; select bank0
 14290     0A64  0867               	movf	_pBDTEntryEP0OutNext,w
 14291     0A65  3E01               	addlw	1
 14292     0A66  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14293     0A67  3000               	movlw	0
 14294     0A68  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14295     0A69  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14296     0A6A  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 14297     0A6B  0086               	movwf	6
 14298     0A6C  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 14299     0A6D  0087               	movwf	7
 14300     0A6E  3008               	movlw	8
 14301     0A6F  0081               	movwf	1
 14302                           
 14303                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 14304     0A70  3040               	movlw	64
 14305     0A71  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14306     0A72  3000               	movlw	0
 14307     0A73  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14308     0A74  30FF               	movlw	255
 14309     0A75  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14310     0A76  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14311     0A77  307F               	movlw	127
 14312     0A78  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14313     0A79  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14314     0A7A  0867               	movf	_pBDTEntryEP0OutNext,w
 14315     0A7B  0086               	movwf	6
 14316     0A7C  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14317     0A7D  0087               	movwf	7
 14318     0A7E  3142               	addfsr 1,2
 14319     0A7F  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14320     0A80  3FC0               	movwi [0]fsr1
 14321     0A81  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14322     0A82  3FC1               	movwi [1]fsr1
 14323                           
 14324                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 14325     0A83  0867               	movf	_pBDTEntryEP0OutNext,w
 14326     0A84  0086               	movwf	6
 14327     0A85  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14328     0A86  0087               	movwf	7
 14329     0A87  3080               	movlw	128
 14330     0A88  0081               	movwf	1
 14331     0A89  0008               	return
 14332     0A8A                     __end_of_USBCtrlEPAllowStatusStage:	
 14333                           ;usb/usb_device.c: 1461:         }
 14334                           
 14335                           
 14336                           	psect	text76
 14337     0B77                     __ptext76:	
 14338 ;; *************** function _USBCtrlTrfInHandler *****************
 14339 ;; Defined at:
 14340 ;;		line 2599 in file "usb/usb_device.c"
 14341 ;; Parameters:    Size  Location     Type
 14342 ;;		None
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;  lastDTS         1    7[COMMON] unsigned char 
 14345 ;; Return value:  Size  Location     Type
 14346 ;;                  1    wreg      void 
 14347 ;; Registers used:
 14348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14349 ;; Tracked objects:
 14350 ;;		On entry : 1F/0
 14351 ;;		On exit  : 1F/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;Total ram usage:        5 bytes
 14359 ;; Hardware stack levels used: 1
 14360 ;; Hardware stack levels required when called: 3
 14361 ;; This function calls:
 14362 ;;		_USBCtrlTrfTxService
 14363 ;;		_USBHIDCBSetReportComplete
 14364 ;; This function is called by:
 14365 ;;		_USBCtrlEPService
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369     0B77                     _USBCtrlTrfInHandler:	
 14370                           ;psect for function _USBCtrlTrfInHandler
 14371                           
 14372                           
 14373                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14377     0B77  0861               	movf	_pBDTEntryIn,w
 14378     0B78  0086               	movwf	6
 14379     0B79  0862               	movf	_pBDTEntryIn+1,w
 14380     0B7A  0087               	movwf	7
 14381     0B7B  3000               	movlw	0
 14382     0B7C  1B01               	btfsc	1,6
 14383     0B7D  3001               	movlw	1
 14384     0B7E  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 14385                           
 14386                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 14387     0B7F  3004               	movlw	4
 14388     0B80  0661               	xorwf	_pBDTEntryIn,w
 14389     0B81  00E1               	movwf	_pBDTEntryIn
 14390     0B82  3000               	movlw	0
 14391     0B83  0662               	xorwf	_pBDTEntryIn+1,w
 14392     0B84  00E2               	movwf	_pBDTEntryIn+1
 14393                           
 14394                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 14395     0B85  3008               	movlw	8
 14396     0B86  066C               	xorwf	_USBDeviceState,w
 14397     0B87  1D03               	btfss	3,2
 14398     0B88  2B95               	goto	i1l4698
 14399                           
 14400                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 14401     0B89  0842               	movf	66,w	;volatile
 14402     0B8A  397F               	andlw	127
 14403     0B8B  003D               	movlb	29	; select bank29
 14404     0B8C  0096               	movwf	22	;volatile
 14405                           
 14406                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 14407     0B8D  0816               	movf	22,w
 14408     0B8E  1903               	btfsc	3,2
 14409     0B8F  2B92               	goto	i1l4696
 14410                           
 14411                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 14412     0B90  3010               	movlw	16
 14413     0B91  2B93               	goto	L16
 14414     0B92                     i1l4696:	
 14415                           ;usb/usb_device.c: 2617:         }
 14416                           
 14417                           
 14418                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 14419     0B92  3004               	movlw	4
 14420     0B93                     L16:
 14421     0B93  0020               	movlb	0	; select bank0
 14422     0B94  00EC               	movwf	_USBDeviceState	;volatile
 14423     0B95                     i1l4698:
 14424                           
 14425                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 14426     0B95  036A               	decf	_controlTransferState,w	;volatile
 14427     0B96  1D03               	btfss	3,2
 14428     0B97  2BDD               	goto	i1l680
 14429                           
 14430                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 14431     0B98  3048               	movlw	72
 14432     0B99  00F3               	movwf	??_USBCtrlTrfInHandler
 14433     0B9A  3000               	movlw	0
 14434     0B9B  00F4               	movwf	??_USBCtrlTrfInHandler+1
 14435     0B9C  30FF               	movlw	255
 14436     0B9D  0573               	andwf	??_USBCtrlTrfInHandler,w
 14437     0B9E  00F5               	movwf	??_USBCtrlTrfInHandler+2
 14438     0B9F  307F               	movlw	127
 14439     0BA0  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 14440     0BA1  00F6               	movwf	??_USBCtrlTrfInHandler+3
 14441     0BA2  0861               	movf	_pBDTEntryIn,w
 14442     0BA3  0086               	movwf	6
 14443     0BA4  0862               	movf	_pBDTEntryIn+1,w
 14444     0BA5  0087               	movwf	7
 14445     0BA6  3142               	addfsr 1,2
 14446     0BA7  0875               	movf	??_USBCtrlTrfInHandler+2,w
 14447     0BA8  3FC0               	movwi [0]fsr1
 14448     0BA9  0876               	movf	??_USBCtrlTrfInHandler+3,w
 14449     0BAA  3FC1               	movwi [1]fsr1
 14450                           
 14451                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 14452     0BAB  3197  2732  318B   	fcall	_USBCtrlTrfTxService
 14453                           
 14454                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 14455     0BAE  3002               	movlw	2
 14456     0BAF  0022               	movlb	2	; select bank2
 14457     0BB0  0660               	xorwf	_shortPacketStatus^(0+256),w	;volatile
 14458     0BB1  1D03               	btfss	3,2
 14459     0BB2  2BC0               	goto	i1l4708
 14460                           
 14461                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 14462     0BB3  0020               	movlb	0	; select bank0
 14463     0BB4  0861               	movf	_pBDTEntryIn,w
 14464     0BB5  0086               	movwf	6
 14465     0BB6  0862               	movf	_pBDTEntryIn+1,w
 14466     0BB7  0087               	movwf	7
 14467     0BB8  3004               	movlw	4
 14468     0BB9  0081               	movwf	1
 14469                           
 14470                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 14471     0BBA  0861               	movf	_pBDTEntryIn,w
 14472     0BBB  0086               	movwf	6
 14473     0BBC  0862               	movf	_pBDTEntryIn+1,w
 14474     0BBD  0087               	movwf	7
 14475     0BBE  1781               	bsf	1,7
 14476                           
 14477                           ;usb/usb_device.c: 2640:         }
 14478     0BBF  0008               	return
 14479     0BC0                     i1l4708:
 14480                           
 14481                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 14482     0BC0  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 14483     0BC1  1D03               	btfss	3,2
 14484     0BC2  2BD0               	goto	i1l4712
 14485                           
 14486                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14487     0BC3  0020               	movlb	0	; select bank0
 14488     0BC4  0861               	movf	_pBDTEntryIn,w
 14489     0BC5  0086               	movwf	6
 14490     0BC6  0862               	movf	_pBDTEntryIn+1,w
 14491     0BC7  0087               	movwf	7
 14492     0BC8  3048               	movlw	72
 14493     0BC9  0081               	movwf	1
 14494                           
 14495                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14496     0BCA  0861               	movf	_pBDTEntryIn,w
 14497     0BCB  0086               	movwf	6
 14498     0BCC  0862               	movf	_pBDTEntryIn+1,w
 14499     0BCD  0087               	movwf	7
 14500     0BCE  1781               	bsf	1,7
 14501                           
 14502                           ;usb/usb_device.c: 2647:             }
 14503     0BCF  0008               	return
 14504     0BD0                     i1l4712:
 14505                           
 14506                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 14507     0BD0  0020               	movlb	0	; select bank0
 14508     0BD1  0861               	movf	_pBDTEntryIn,w
 14509     0BD2  0086               	movwf	6
 14510     0BD3  0862               	movf	_pBDTEntryIn+1,w
 14511     0BD4  0087               	movwf	7
 14512     0BD5  3008               	movlw	8
 14513     0BD6  0081               	movwf	1
 14514                           
 14515                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14516     0BD7  0861               	movf	_pBDTEntryIn,w
 14517     0BD8  0086               	movwf	6
 14518     0BD9  0862               	movf	_pBDTEntryIn+1,w
 14519     0BDA  0087               	movwf	7
 14520     0BDB  1781               	bsf	1,7
 14521     0BDC  0008               	return
 14522     0BDD                     i1l680:	
 14523                           ;usb/usb_device.c: 2655:  else
 14524                           
 14525                           
 14526                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 14527     0BDD  0022               	movlb	2	; select bank2
 14528     0BDE  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 14529     0BDF  2BEF               	goto	i1l4720
 14530                           
 14531                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 14532     0BE0  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14533     0BE1  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14534     0BE2  1903               	btfsc	3,2
 14535     0BE3  2BEE               	goto	i1l4718
 14536                           
 14537                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 14538     0BE4  3005               	movlw	5
 14539     0BE5  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14540     0BE6  0086               	movwf	6
 14541     0BE7  3001               	movlw	1	; select bank2/3
 14542     0BE8  0087               	movwf	7
 14543     0BE9  3F41               	moviw [1]fsr1
 14544     0BEA  008A               	movwf	10
 14545     0BEB  3F40               	moviw [0]fsr1
 14546     0BEC  000A               	callw
 14547     0BED  318B               	pagesel	$
 14548     0BEE                     i1l4718:
 14549                           
 14550                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 14551     0BEE  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14552     0BEF                     i1l4720:
 14553                           
 14554                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 14555     0BEF  0020               	movlb	0	; select bank0
 14556     0BF0  01EA               	clrf	_controlTransferState	;volatile
 14557     0BF1  0008               	return
 14558     0BF2                     __end_of_USBCtrlTrfInHandler:
 14559                           
 14560                           	psect	text77
 14561     1EA8                     __ptext77:	
 14562 ;; *************** function _USBHIDCBSetReportComplete *****************
 14563 ;; Defined at:
 14564 ;;		line 522 in file "app_device_keyboard.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;		None
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;		None
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  1    wreg      void 
 14571 ;; Registers used:
 14572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14573 ;; Tracked objects:
 14574 ;;		On entry : 1F/2
 14575 ;;		On exit  : 1F/2
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        0 bytes
 14583 ;; Hardware stack levels used: 1
 14584 ;; Hardware stack levels required when called: 2
 14585 ;; This function calls:
 14586 ;;		i1_APP_KeyboardProcessOutputReport
 14587 ;; This function is called by:
 14588 ;;		_USBHIDCBSetReportHandler
 14589 ;;		_USBCtrlTrfRxService
 14590 ;;		_USBCtrlTrfInHandler
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594     1EA8                     _USBHIDCBSetReportComplete:	
 14595                           ;psect for function _USBHIDCBSetReportComplete
 14596                           
 14597                           
 14598                           ;app_device_keyboard.c: 525:     outputReport.value = CtrlTrfData[0];
 14599                           
 14600                           ;incstack = 0
 14601                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14602     1EA8  0020               	movlb	0	; select bank0
 14603     1EA9  0848               	movf	72,w	;volatile
 14604     1EAA  0022               	movlb	2	; select bank2
 14605     1EAB  00A0               	movwf	32	;volatile
 14606                           
 14607                           ;app_device_keyboard.c: 528:     APP_KeyboardProcessOutputReport();
 14608     1EAC  3188  2000         	fcall	i1_APP_KeyboardProcessOutputReport
 14609     1EAE  0008               	return
 14610     1EAF                     __end_of_USBHIDCBSetReportComplete:
 14611                           
 14612                           	psect	text78
 14613     0800                     __ptext78:	
 14614 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 14615 ;; Defined at:
 14616 ;;		line 517 in file "app_device_keyboard.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 1F/2
 14627 ;;		On exit  : 1F/2
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used: 1
 14636 ;; Hardware stack levels required when called: 1
 14637 ;; This function calls:
 14638 ;;		i1_PS2Keyboard_SendCommand
 14639 ;; This function is called by:
 14640 ;;		_USBHIDCBSetReportComplete
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644     0800                     i1_APP_KeyboardProcessOutputReport:	
 14645                           ;psect for function i1_APP_KeyboardProcessOutputReport
 14646                           
 14647                           
 14648                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
 14649                           
 14650                           ;incstack = 0
 14651                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 14652     0800  3090               	movlw	144
 14653     0801  0086               	movwf	6
 14654     0802  3023               	movlw	35
 14655     0803  0087               	movwf	7
 14656     0804  0820               	movf	32,w	;volatile
 14657     0805  0081               	movwf	1
 14658                           
 14659                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
 14660     0806  30ED               	movlw	237
 14661     0807  3191  212A         	fcall	i1_PS2Keyboard_SendCommand
 14662     0809  0008               	return
 14663     080A                     __end_ofi1_APP_KeyboardProcessOutputReport:
 14664                           
 14665                           	psect	text79
 14666     112A                     __ptext79:	
 14667 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 14668 ;; Defined at:
 14669 ;;		line 60 in file "ps2_keyboard.c"
 14670 ;; Parameters:    Size  Location     Type
 14671 ;;  cmd             1    wreg     unsigned char 
 14672 ;; Auto vars:     Size  Location     Type
 14673 ;;  cmd             1    0[COMMON] unsigned char 
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  1    wreg      void 
 14676 ;; Registers used:
 14677 ;;		wreg, status,2
 14678 ;; Tracked objects:
 14679 ;;		On entry : 1F/2
 14680 ;;		On exit  : 1F/2
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;Total ram usage:        1 bytes
 14688 ;; Hardware stack levels used: 1
 14689 ;; This function calls:
 14690 ;;		Nothing
 14691 ;; This function is called by:
 14692 ;;		i1_APP_KeyboardProcessOutputReport
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696     112A                     i1_PS2Keyboard_SendCommand:	
 14697                           ;psect for function i1_PS2Keyboard_SendCommand
 14698                           
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 14702                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 14703     112A  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14704                           
 14705                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14706     112B  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14707     112C  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
 14708                           
 14709                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14710     112D  138B               	bcf	11,7	;volatile
 14711     112E  0021               	movlb	1	; select bank1
 14712     112F  120C               	bcf	12,4	;volatile
 14713     1130  0022               	movlb	2	; select bank2
 14714     1131  120C               	bcf	12,4	;volatile
 14715                           
 14716                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14717     1132  30F0               	movlw	240
 14718     1133                     u643_27:
 14719     1133  3200               	nop2
 14720     1134  0B89               	decfsz	9,f
 14721     1135  2933               	goto	u643_27
 14722     1136  0021               	movlb	1	; select bank1
 14723     1137  160C               	bsf	12,4	;volatile
 14724                           
 14725                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14726     1138  0020               	movlb	0	; select bank0
 14727     1139  01E9               	clrf	_keyboardCommandCount	;volatile
 14728                           
 14729                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14730     113A  300C               	movlw	12
 14731     113B  0022               	movlb	2	; select bank2
 14732     113C  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14733                           
 14734                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14735     113D  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14736     113E  0021               	movlb	1	; select bank1
 14737     113F  128C               	bcf	12,5	;volatile
 14738     1140  0022               	movlb	2	; select bank2
 14739     1141  128C               	bcf	12,5	;volatile
 14740                           
 14741                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14742     1142  178B               	bsf	11,7	;volatile
 14743     1143  0008               	return
 14744     1144                     __end_ofi1_PS2Keyboard_SendCommand:
 14745                           
 14746                           	psect	text80
 14747     1732                     __ptext80:	
 14748 ;; *************** function _USBCtrlTrfTxService *****************
 14749 ;; Defined at:
 14750 ;;		line 1775 in file "usb/usb_device.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;		None
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;  byteToSend      1    2[COMMON] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14759 ;; Tracked objects:
 14760 ;;		On entry : 1E/0
 14761 ;;		On exit  : 1C/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;Total ram usage:        3 bytes
 14769 ;; Hardware stack levels used: 1
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		_USBCtrlEPAllowDataStage
 14774 ;;		_USBCtrlTrfInHandler
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778     1732                     _USBCtrlTrfTxService:	
 14779                           ;psect for function _USBCtrlTrfTxService
 14780                           
 14781                           
 14782                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14786     1732  3008               	movlw	8
 14787     1733  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14788                           
 14789                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14790     1734  3000               	movlw	0
 14791     1735  0021               	movlb	1	; select bank1
 14792     1736  026D               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14793     1737  3008               	movlw	8
 14794     1738  1903               	skipnz
 14795     1739  026C               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14796     173A  1803               	skipnc
 14797     173B  2F49               	goto	i1l579
 14798                           
 14799                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14800     173C  086C               	movf	(_inPipes^(0+128)+3),w	;volatile
 14801     173D  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14802                           
 14803                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14804     173E  0022               	movlb	2	; select bank2
 14805     173F  0860               	movf	_shortPacketStatus^(0+256),w	;volatile
 14806     1740  1D03               	btfss	3,2
 14807     1741  2F44               	goto	i1l4002
 14808                           
 14809                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14810     1742  3001               	movlw	1
 14811     1743  2F48               	goto	L17
 14812     1744                     i1l4002:	
 14813                           ;usb/usb_device.c: 1794:         }
 14814                           
 14815     1744  0360               	decf	_shortPacketStatus^(0+256),w	;volatile
 14816     1745  1D03               	btfss	3,2
 14817     1746  2F49               	goto	i1l579
 14818                           
 14819                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14820     1747  3002               	movlw	2
 14821     1748                     L17:
 14822     1748  00E0               	movwf	_shortPacketStatus^(0+256)	;volatile
 14823     1749                     i1l579:	
 14824                           ;usb/usb_device.c: 1799:     }
 14825                           
 14826                           
 14827                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14828     1749  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14829     174A  00F0               	movwf	??_USBCtrlTrfTxService
 14830     174B  01F1               	clrf	??_USBCtrlTrfTxService+1
 14831     174C  0870               	movf	??_USBCtrlTrfTxService,w
 14832     174D  0021               	movlb	1	; select bank1
 14833     174E  02EC               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14834     174F  0871               	movf	??_USBCtrlTrfTxService+1,w
 14835     1750  3BED               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14836                           
 14837                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14838     1751  0020               	movlb	0	; select bank0
 14839     1752  0861               	movf	_pBDTEntryIn,w
 14840     1753  3E01               	addlw	1
 14841     1754  00F0               	movwf	??_USBCtrlTrfTxService
 14842     1755  3000               	movlw	0
 14843     1756  3D62               	addwfc	_pBDTEntryIn+1,w
 14844     1757  00F1               	movwf	??_USBCtrlTrfTxService+1
 14845     1758  0870               	movf	??_USBCtrlTrfTxService,w
 14846     1759  0086               	movwf	6
 14847     175A  0871               	movf	??_USBCtrlTrfTxService+1,w
 14848     175B  0087               	movwf	7
 14849     175C  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14850     175D  0081               	movwf	1
 14851                           
 14852                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14853     175E  3048               	movlw	72
 14854     175F  0022               	movlb	2	; select bank2
 14855     1760  00DF               	movwf	_pDst^(0+256)
 14856                           
 14857                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14858     1761  0021               	movlb	1	; select bank1
 14859     1762  1C6B               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14860     1763  2F7B               	goto	i1l4022
 14861     1764  2F95               	goto	i1l4032
 14862     1765                     i1l4014:
 14863                           
 14864                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14865     1765  0022               	movlb	2	; select bank2
 14866     1766  085F               	movf	_pDst^(0+256),w
 14867     1767  0086               	movwf	6
 14868     1768  0187               	clrf	7
 14869     1769  0021               	movlb	1	; select bank1
 14870     176A  0869               	movf	_inPipes^(0+128),w	;volatile
 14871     176B  0084               	movwf	4
 14872     176C  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14873     176D  0085               	movwf	5
 14874     176E  0800               	movf	0,w	;code access
 14875     176F  0081               	movwf	1
 14876     1770  3001               	movlw	1
 14877     1771  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14878     1772  3000               	movlw	0
 14879     1773  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14880     1774  3001               	movlw	1
 14881     1775  00F0               	movwf	??_USBCtrlTrfTxService
 14882     1776  0870               	movf	??_USBCtrlTrfTxService,w
 14883     1777  0022               	movlb	2	; select bank2
 14884     1778  07DF               	addwf	_pDst^(0+256),f
 14885                           
 14886                           ;usb/usb_device.c: 1818:             byteToSend--;
 14887     1779  3001               	movlw	1
 14888     177A  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14889     177B                     i1l4022:
 14890                           
 14891                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14892     177B  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14893     177C  1903               	btfsc	3,2
 14894     177D  0008               	return
 14895     177E  2F65               	goto	i1l4014
 14896     177F                     i1l4024:
 14897                           
 14898                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14899     177F  0022               	movlb	2	; select bank2
 14900     1780  085F               	movf	_pDst^(0+256),w
 14901     1781  0086               	movwf	6
 14902     1782  0187               	clrf	7
 14903     1783  0021               	movlb	1	; select bank1
 14904     1784  0869               	movf	_inPipes^(0+128),w	;volatile
 14905     1785  0084               	movwf	4
 14906     1786  086A               	movf	(_inPipes+1)^(0+128),w	;volatile
 14907     1787  0085               	movwf	5
 14908     1788  0800               	movf	0,w	;code access
 14909     1789  0081               	movwf	1
 14910     178A  3001               	movlw	1
 14911     178B  07E9               	addwf	_inPipes^(0+128),f	;volatile
 14912     178C  3000               	movlw	0
 14913     178D  3DEA               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14914     178E  3001               	movlw	1
 14915     178F  00F0               	movwf	??_USBCtrlTrfTxService
 14916     1790  0870               	movf	??_USBCtrlTrfTxService,w
 14917     1791  0022               	movlb	2	; select bank2
 14918     1792  07DF               	addwf	_pDst^(0+256),f
 14919                           
 14920                           ;usb/usb_device.c: 1826:             byteToSend--;
 14921     1793  3001               	movlw	1
 14922     1794  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14923     1795                     i1l4032:
 14924                           
 14925                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14926     1795  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14927     1796  1903               	btfsc	3,2
 14928     1797  0008               	return
 14929     1798  2F7F               	goto	i1l4024
 14930     1799                     __end_of_USBCtrlTrfTxService:
 14931                           
 14932                           	psect	text81
 14933     1F29                     __ptext81:	
 14934 ;; *************** function _TMR2_ISR *****************
 14935 ;; Defined at:
 14936 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14937 ;; Parameters:    Size  Location     Type
 14938 ;;		None
 14939 ;; Auto vars:     Size  Location     Type
 14940 ;;		None
 14941 ;; Return value:  Size  Location     Type
 14942 ;;                  1    wreg      void 
 14943 ;; Registers used:
 14944 ;;		wreg, status,2, status,0, pclath, cstack
 14945 ;; Tracked objects:
 14946 ;;		On entry : 1F/0
 14947 ;;		On exit  : 0/0
 14948 ;;		Unchanged: 0/0
 14949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;Total ram usage:        0 bytes
 14955 ;; Hardware stack levels used: 1
 14956 ;; Hardware stack levels required when called: 1
 14957 ;; This function calls:
 14958 ;;		NULL
 14959 ;;		_SysTimeInterrupt
 14960 ;;		_TMR2_DefaultInterruptHandler
 14961 ;; This function is called by:
 14962 ;;		_INTERRUPT_InterruptManager
 14963 ;; This function uses a non-reentrant model
 14964 ;;
 14965                           
 14966     1F29                     _TMR2_ISR:	
 14967                           ;psect for function _TMR2_ISR
 14968                           
 14969                           
 14970                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 14971                           
 14972                           ;incstack = 0
 14973                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14974     1F29  1091               	bcf	17,1	;volatile
 14975                           
 14976                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 14977     1F2A  0022               	movlb	2	; select bank2
 14978     1F2B  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14979     1F2C  0445               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14980     1F2D  1903               	btfsc	3,2
 14981     1F2E  0008               	return
 14982                           
 14983                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 14984     1F2F  0845               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14985     1F30  008A               	movwf	10
 14986     1F31  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14987     1F32  000A               	callw
 14988     1F33  319F               	pagesel	$
 14989     1F34  0008               	return
 14990     1F35                     __end_of_TMR2_ISR:
 14991                           
 14992                           	psect	text82
 14993     1EFF                     __ptext82:	
 14994 ;; *************** function _SysTimeInterrupt *****************
 14995 ;; Defined at:
 14996 ;;		line 24 in file "systime.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;		None
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;		None
 15001 ;; Return value:  Size  Location     Type
 15002 ;;                  1    wreg      void 
 15003 ;; Registers used:
 15004 ;;		wreg
 15005 ;; Tracked objects:
 15006 ;;		On entry : 1F/2
 15007 ;;		On exit  : 1F/2
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;Total ram usage:        0 bytes
 15015 ;; Hardware stack levels used: 1
 15016 ;; This function calls:
 15017 ;;		Nothing
 15018 ;; This function is called by:
 15019 ;;		_SysTime_Init
 15020 ;;		_TMR2_ISR
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024     1EFF                     _SysTimeInterrupt:	
 15025                           ;psect for function _SysTimeInterrupt
 15026                           
 15027                           
 15028                           ;systime.c: 26:     ++timeMs;
 15029                           
 15030                           ;incstack = 0
 15031                           ; Regs used in _SysTimeInterrupt: [wreg]
 15032     1EFF  3001               	movlw	1
 15033     1F00  07A8               	addwf	_timeMs^(0+256),f
 15034     1F01  3000               	movlw	0
 15035     1F02  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 15036     1F03  3000               	movlw	0
 15037     1F04  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 15038     1F05  3000               	movlw	0
 15039     1F06  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 15040     1F07  0008               	return
 15041     1F08                     __end_of_SysTimeInterrupt:
 15042                           
 15043                           	psect	text83
 15044     07FE                     __ptext83:	
 15045 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15046 ;; Defined at:
 15047 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15048 ;; Parameters:    Size  Location     Type
 15049 ;;		None
 15050 ;; Auto vars:     Size  Location     Type
 15051 ;;		None
 15052 ;; Return value:  Size  Location     Type
 15053 ;;                  1    wreg      void 
 15054 ;; Registers used:
 15055 ;;		None
 15056 ;; Tracked objects:
 15057 ;;		On entry : 1F/2
 15058 ;;		On exit  : 1F/2
 15059 ;;		Unchanged: 1F/0
 15060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;Total ram usage:        0 bytes
 15066 ;; Hardware stack levels used: 1
 15067 ;; This function calls:
 15068 ;;		Nothing
 15069 ;; This function is called by:
 15070 ;;		_TMR2_Initialize
 15071 ;;		_TMR2_ISR
 15072 ;; This function uses a non-reentrant model
 15073 ;;
 15074                           
 15075     07FE                     _TMR2_DefaultInterruptHandler:	
 15076                           ;psect for function _TMR2_DefaultInterruptHandler
 15077                           
 15078                           
 15079                           ;incstack = 0
 15080                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15081     07FE  0008               	return
 15082     07FF                     __end_of_TMR2_DefaultInterruptHandler:
 15083                           
 15084                           	psect	text84
 15085     1F08                     __ptext84:	
 15086 ;; *************** function _PIN_MANAGER_IOC *****************
 15087 ;; Defined at:
 15088 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 15089 ;; Parameters:    Size  Location     Type
 15090 ;;		None
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;		None
 15093 ;; Return value:  Size  Location     Type
 15094 ;;                  1    wreg      void 
 15095 ;; Registers used:
 15096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15097 ;; Tracked objects:
 15098 ;;		On entry : 0/0
 15099 ;;		On exit  : 1F/7
 15100 ;;		Unchanged: 0/0
 15101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15106 ;;Total ram usage:        0 bytes
 15107 ;; Hardware stack levels used: 1
 15108 ;; Hardware stack levels required when called: 4
 15109 ;; This function calls:
 15110 ;;		_IOCAF4_ISR
 15111 ;;		_IOCAF5_ISR
 15112 ;; This function is called by:
 15113 ;;		_INTERRUPT_InterruptManager
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117     1F08                     _PIN_MANAGER_IOC:	
 15118                           ;psect for function _PIN_MANAGER_IOC
 15119                           
 15120                           
 15121                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 15122                           
 15123                           ;incstack = 0
 15124                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15125     1F08  0027               	movlb	7	; select bank7
 15126     1F09  1E13               	btfss	19,4	;volatile
 15127     1F0A  2F0E               	goto	i1l6032
 15128                           
 15129                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 15130     1F0B  319F  2741  319F   	fcall	_IOCAF4_ISR
 15131     1F0E                     i1l6032:
 15132                           
 15133                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 15134     1F0E  1E93               	btfss	19,5	;volatile
 15135     1F0F  0008               	return
 15136                           
 15137                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 15138     1F10  319F  274E         	fcall	_IOCAF5_ISR
 15139     1F12  0008               	return
 15140     1F13                     __end_of_PIN_MANAGER_IOC:
 15141                           
 15142                           	psect	text85
 15143     1F4E                     __ptext85:	
 15144 ;; *************** function _IOCAF5_ISR *****************
 15145 ;; Defined at:
 15146 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 15147 ;; Parameters:    Size  Location     Type
 15148 ;;		None
 15149 ;; Auto vars:     Size  Location     Type
 15150 ;;		None
 15151 ;; Return value:  Size  Location     Type
 15152 ;;                  1    wreg      void 
 15153 ;; Registers used:
 15154 ;;		wreg, status,2, status,0, pclath, cstack
 15155 ;; Tracked objects:
 15156 ;;		On entry : 1F/7
 15157 ;;		On exit  : 1F/7
 15158 ;;		Unchanged: 0/0
 15159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15164 ;;Total ram usage:        0 bytes
 15165 ;; Hardware stack levels used: 1
 15166 ;; Hardware stack levels required when called: 2
 15167 ;; This function calls:
 15168 ;;		NULL
 15169 ;;		_IOCAF5_DefaultInterruptHandler
 15170 ;;		_PS2Keyboard_DataInterrupt
 15171 ;; This function is called by:
 15172 ;;		_PIN_MANAGER_IOC
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176     1F4E                     _IOCAF5_ISR:	
 15177                           ;psect for function _IOCAF5_ISR
 15178                           
 15179                           
 15180                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 15181                           
 15182                           ;incstack = 0
 15183                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 15184     1F4E  0022               	movlb	2	; select bank2
 15185     1F4F  086B               	movf	_IOCAF5_InterruptHandler^(0+256),w
 15186     1F50  046C               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 15187     1F51  1903               	btfsc	3,2
 15188     1F52  2F58               	goto	i1l4948
 15189                           
 15190                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 15191     1F53  086C               	movf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 15192     1F54  008A               	movwf	10
 15193     1F55  086B               	movf	_IOCAF5_InterruptHandler^(0+256),w
 15194     1F56  000A               	callw
 15195     1F57  319F               	pagesel	$
 15196     1F58                     i1l4948:
 15197                           
 15198                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 15199     1F58  0027               	movlb	7	; select bank7
 15200     1F59  1293               	bcf	19,5	;volatile
 15201     1F5A  0008               	return
 15202     1F5B                     __end_of_IOCAF5_ISR:
 15203                           
 15204                           	psect	text86
 15205     07FF                     __ptext86:	
 15206 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 15207 ;; Defined at:
 15208 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;		None
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  1    wreg      void 
 15215 ;; Registers used:
 15216 ;;		None
 15217 ;; Tracked objects:
 15218 ;;		On entry : 1F/2
 15219 ;;		On exit  : 1F/2
 15220 ;;		Unchanged: 1F/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;Total ram usage:        0 bytes
 15227 ;; Hardware stack levels used: 1
 15228 ;; This function calls:
 15229 ;;		Nothing
 15230 ;; This function is called by:
 15231 ;;		_PIN_MANAGER_Initialize
 15232 ;;		_IOCAF5_ISR
 15233 ;; This function uses a non-reentrant model
 15234 ;;
 15235                           
 15236     07FF                     _IOCAF5_DefaultInterruptHandler:	
 15237                           ;psect for function _IOCAF5_DefaultInterruptHandler
 15238                           
 15239                           
 15240                           ;incstack = 0
 15241                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 15242     07FF  0008               	return
 15243     0800                     __end_of_IOCAF5_DefaultInterruptHandler:
 15244                           
 15245                           	psect	text87
 15246     1F82                     __ptext87:	
 15247 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 15248 ;; Defined at:
 15249 ;;		line 79 in file "ps2_keyboard.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;		None
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;		None
 15254 ;; Return value:  Size  Location     Type
 15255 ;;                  1    wreg      void 
 15256 ;; Registers used:
 15257 ;;		wreg, status,2, status,0, pclath, cstack
 15258 ;; Tracked objects:
 15259 ;;		On entry : 1F/2
 15260 ;;		On exit  : 1F/2
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;Total ram usage:        0 bytes
 15268 ;; Hardware stack levels used: 1
 15269 ;; Hardware stack levels required when called: 1
 15270 ;; This function calls:
 15271 ;;		_SysTime_GetCurrentTimeMs
 15272 ;; This function is called by:
 15273 ;;		_PS2Keyboard_Init
 15274 ;;		_IOCAF5_ISR
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278     1F82                     _PS2Keyboard_DataInterrupt:	
 15279                           ;psect for function _PS2Keyboard_DataInterrupt
 15280                           
 15281                           
 15282                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 15283                           
 15284                           ;incstack = 0
 15285                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 15286     1F82  0853               	movf	_keyboardState^(0+256),w
 15287     1F83  1D03               	btfss	3,2
 15288     1F84  0008               	return
 15289                           
 15290                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 15291     1F85  3001               	movlw	1
 15292     1F86  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15293                           
 15294                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15295     1F87  319E  26F6         	fcall	_SysTime_GetCurrentTimeMs
 15296     1F89  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15297     1F8A  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15298     1F8B  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15299     1F8C  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15300     1F8D  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15301     1F8E  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15302     1F8F  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15303     1F90  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15304     1F91  0008               	return
 15305     1F92                     __end_of_PS2Keyboard_DataInterrupt:
 15306                           
 15307                           	psect	text88
 15308     1F41                     __ptext88:	
 15309 ;; *************** function _IOCAF4_ISR *****************
 15310 ;; Defined at:
 15311 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 15312 ;; Parameters:    Size  Location     Type
 15313 ;;		None
 15314 ;; Auto vars:     Size  Location     Type
 15315 ;;		None
 15316 ;; Return value:  Size  Location     Type
 15317 ;;                  1    wreg      void 
 15318 ;; Registers used:
 15319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15320 ;; Tracked objects:
 15321 ;;		On entry : 1F/7
 15322 ;;		On exit  : 1F/7
 15323 ;;		Unchanged: 0/0
 15324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;Total ram usage:        0 bytes
 15330 ;; Hardware stack levels used: 1
 15331 ;; Hardware stack levels required when called: 3
 15332 ;; This function calls:
 15333 ;;		NULL
 15334 ;;		_IOCAF4_DefaultInterruptHandler
 15335 ;;		_PS2Keyboard_ClockInterrupt
 15336 ;; This function is called by:
 15337 ;;		_PIN_MANAGER_IOC
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341     1F41                     _IOCAF4_ISR:	
 15342                           ;psect for function _IOCAF4_ISR
 15343                           
 15344                           
 15345                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 15346                           
 15347                           ;incstack = 0
 15348                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15349     1F41  0022               	movlb	2	; select bank2
 15350     1F42  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15351     1F43  046E               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15352     1F44  1903               	btfsc	3,2
 15353     1F45  2F4B               	goto	i1l5944
 15354                           
 15355                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 15356     1F46  086E               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15357     1F47  008A               	movwf	10
 15358     1F48  086D               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15359     1F49  000A               	callw
 15360     1F4A  319F               	pagesel	$
 15361     1F4B                     i1l5944:
 15362                           
 15363                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 15364     1F4B  0027               	movlb	7	; select bank7
 15365     1F4C  1213               	bcf	19,4	;volatile
 15366     1F4D  0008               	return
 15367     1F4E                     __end_of_IOCAF4_ISR:
 15368                           
 15369                           	psect	text89
 15370     0003                     __ptext89:	
 15371 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 15372 ;; Defined at:
 15373 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 15374 ;; Parameters:    Size  Location     Type
 15375 ;;		None
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;		None
 15378 ;; Return value:  Size  Location     Type
 15379 ;;                  1    wreg      void 
 15380 ;; Registers used:
 15381 ;;		None
 15382 ;; Tracked objects:
 15383 ;;		On entry : 1F/2
 15384 ;;		On exit  : 1F/2
 15385 ;;		Unchanged: 1F/0
 15386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;Total ram usage:        0 bytes
 15392 ;; Hardware stack levels used: 1
 15393 ;; This function calls:
 15394 ;;		Nothing
 15395 ;; This function is called by:
 15396 ;;		_PIN_MANAGER_Initialize
 15397 ;;		_IOCAF4_ISR
 15398 ;; This function uses a non-reentrant model
 15399 ;;
 15400                           
 15401     0003                     _IOCAF4_DefaultInterruptHandler:	
 15402                           ;psect for function _IOCAF4_DefaultInterruptHandler
 15403                           
 15404                           
 15405                           ;incstack = 0
 15406                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 15407     0003  0008               	return
 15408     0004                     __end_of_IOCAF4_DefaultInterruptHandler:
 15409                           
 15410                           	psect	text90
 15411     0501                     __ptext90:	
 15412 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 15413 ;; Defined at:
 15414 ;;		line 86 in file "ps2_keyboard.c"
 15415 ;; Parameters:    Size  Location     Type
 15416 ;;		None
 15417 ;; Auto vars:     Size  Location     Type
 15418 ;;  bit             1   13[COMMON] _Bool 
 15419 ;;  bitPos          1   12[COMMON] unsigned char 
 15420 ;; Return value:  Size  Location     Type
 15421 ;;                  1    wreg      void 
 15422 ;; Registers used:
 15423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15424 ;; Tracked objects:
 15425 ;;		On entry : 1F/2
 15426 ;;		On exit  : 1F/2
 15427 ;;		Unchanged: 0/0
 15428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15432 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;Total ram usage:        6 bytes
 15434 ;; Hardware stack levels used: 1
 15435 ;; Hardware stack levels required when called: 2
 15436 ;; This function calls:
 15437 ;;		_SysTime_GetCurrentTimeMs
 15438 ;;		i1_GenericQueue_Enqueue
 15439 ;; This function is called by:
 15440 ;;		_PS2Keyboard_Init
 15441 ;;		_IOCAF4_ISR
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445     0501                     _PS2Keyboard_ClockInterrupt:	
 15446                           ;psect for function _PS2Keyboard_ClockInterrupt
 15447                           
 15448                           
 15449                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 15450                           
 15451                           ;incstack = 0
 15452                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15453     0501  084B               	movf	_keyboardCommandBits^(0+256),w	;volatile
 15454     0502  1903               	btfsc	3,2
 15455     0503  2D44               	goto	i1l5878
 15456                           
 15457                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 15458     0504  0020               	movlb	0	; select bank0
 15459     0505  0869               	movf	_keyboardCommandCount,w	;volatile
 15460     0506  1903               	btfsc	3,2
 15461     0507  2D2C               	goto	i1l5870
 15462     0508  3009               	movlw	9
 15463     0509  0269               	subwf	_keyboardCommandCount,w	;volatile
 15464     050A  1803               	skipnc
 15465     050B  2D2C               	goto	i1l5870
 15466                           
 15467                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 15468     050C  0869               	movf	_keyboardCommandCount,w	;volatile
 15469     050D  3EFF               	addlw	255
 15470     050E  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 15471                           
 15472                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 15473     050F  0022               	movlb	2	; select bank2
 15474     0510  084C               	movf	_keyboardCommand^(0+256),w	;volatile
 15475     0511  0020               	movlb	0	; select bank0
 15476     0512  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15477     0513  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 15478     0514  2D16               	goto	u568_24
 15479     0515                     u568_25:
 15480     0515  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 15481     0516                     u568_24:
 15482     0516  0B89               	decfsz	9,f
 15483     0517  2D15               	goto	u568_25
 15484     0518  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 15485     0519  2D1C               	goto	u569_20
 15486     051A  3001               	movlw	1
 15487     051B  2D1D               	goto	u570_20
 15488     051C                     u569_20:
 15489     051C  3000               	movlw	0
 15490     051D                     u570_20:
 15491     051D  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 15492                           
 15493                           ;ps2_keyboard.c: 92:             if(bit) {
 15494     051E  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 15495     051F  1903               	btfsc	3,2
 15496     0520  2D2A               	goto	i1l1088
 15497                           
 15498                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 15499     0521  0022               	movlb	2	; select bank2
 15500     0522  168C               	bsf	12,5	;volatile
 15501                           
 15502                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 15503     0523  3001               	movlw	1
 15504     0524  0020               	movlb	0	; select bank0
 15505     0525  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15506     0526  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15507     0527  0022               	movlb	2	; select bank2
 15508     0528  07CA               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 15509                           
 15510                           ;ps2_keyboard.c: 95:             } else {
 15511     0529  2D3B               	goto	i1l5876
 15512     052A                     i1l1088:	
 15513                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 15514                           
 15515     052A  0022               	movlb	2	; select bank2
 15516     052B  2D33               	goto	i1l1093
 15517     052C                     i1l5870:
 15518     052C  3009               	movlw	9
 15519     052D  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15520     052E  1D03               	btfss	3,2
 15521     052F  2D35               	goto	i1l5874
 15522                           
 15523                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 15524     0530  0022               	movlb	2	; select bank2
 15525     0531  1C4A               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 15526     0532  2D3A               	goto	L18
 15527     0533                     i1l1093:	
 15528                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 15529                           
 15530     0533  128C               	bcf	12,5	;volatile
 15531     0534  2D3B               	goto	i1l5876
 15532     0535                     i1l5874:	
 15533                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 15534                           
 15535     0535  300A               	movlw	10
 15536     0536  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15537     0537  1D03               	btfss	3,2
 15538     0538  2D3B               	goto	i1l5876
 15539                           
 15540                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 15541     0539  0021               	movlb	1	; select bank1
 15542     053A                     L18:
 15543     053A  168C               	bsf	12,5	;volatile
 15544     053B                     i1l5876:
 15545                           
 15546                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 15547     053B  3001               	movlw	1
 15548     053C  0020               	movlb	0	; select bank0
 15549     053D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15550     053E  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15551     053F  07E9               	addwf	_keyboardCommandCount,f	;volatile
 15552                           
 15553                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 15554     0540  3001               	movlw	1
 15555     0541  0022               	movlb	2	; select bank2
 15556     0542  02CB               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 15557                           
 15558                           ;ps2_keyboard.c: 109:     } else {
 15559     0543  0008               	return
 15560     0544                     i1l5878:
 15561                           
 15562                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 15563     0544  319E  26F6  3185   	fcall	_SysTime_GetCurrentTimeMs
 15564     0547  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 15565     0548  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 15566     0549  0020               	movlb	0	; select bank0
 15567     054A  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15568     054B  0022               	movlb	2	; select bank2
 15569     054C  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 15570     054D  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 15571     054E  0020               	movlb	0	; select bank0
 15572     054F  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15573     0550  0022               	movlb	2	; select bank2
 15574     0551  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 15575     0552  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 15576     0553  0020               	movlb	0	; select bank0
 15577     0554  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 15578     0555  0022               	movlb	2	; select bank2
 15579     0556  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 15580     0557  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 15581     0558  0020               	movlb	0	; select bank0
 15582     0559  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 15583     055A  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 15584     055B  1D03               	btfss	3,2
 15585     055C  2D67               	goto	i1l5880
 15586     055D  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 15587     055E  1D03               	btfss	3,2
 15588     055F  2D67               	goto	i1l5880
 15589     0560  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15590     0561  1D03               	btfss	3,2
 15591     0562  2D67               	goto	i1l5880
 15592     0563  30FA               	movlw	250
 15593     0564  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 15594     0565  1C03               	btfss	3,0
 15595     0566  2DD3               	goto	i1l5932
 15596     0567                     i1l5880:
 15597                           
 15598                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 15599     0567  3001               	movlw	1
 15600     0568  0022               	movlb	2	; select bank2
 15601     0569  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15602     056A  2DD3               	goto	i1l5932
 15603     056B                     i1l5882:
 15604                           
 15605                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 15606     056B  0022               	movlb	2	; select bank2
 15607     056C  01D2               	clrf	_keyboardIndexData^(0+256)	;volatile
 15608                           
 15609                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 15610     056D  01D1               	clrf	_keyboardOnesCount^(0+256)	;volatile
 15611                           
 15612                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 15613     056E  01E6               	clrf	_keyboardScanCode^(0+256)
 15614     056F                     i1l5884:
 15615                           
 15616                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 15617     056F  3002               	movlw	2
 15618     0570  2DA9               	goto	L20
 15619     0571                     i1l5886:	
 15620                           ;ps2_keyboard.c: 119:                 break;
 15621                           
 15622                           
 15623                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 15624     0571  3000               	movlw	0
 15625     0572  1A8C               	btfsc	12,5	;volatile
 15626     0573  3001               	movlw	1
 15627     0574  0022               	movlb	2	; select bank2
 15628     0575  00CF               	movwf	_keyboardData^(0+256)	;volatile
 15629                           
 15630                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 15631     0576  084F               	movf	_keyboardData^(0+256),w	;volatile
 15632     0577  0020               	movlb	0	; select bank0
 15633     0578  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15634     0579  0022               	movlb	2	; select bank2
 15635     057A  0A52               	incf	_keyboardIndexData^(0+256),w	;volatile
 15636     057B  0020               	movlb	0	; select bank0
 15637     057C  2D7E               	goto	u576_24
 15638     057D                     u576_25:
 15639     057D  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 15640     057E                     u576_24:
 15641     057E  0B89               	decfsz	9,f
 15642     057F  2D7D               	goto	u576_25
 15643     0580  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15644     0581  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15645     0582  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15646     0583  0022               	movlb	2	; select bank2
 15647     0584  04E6               	iorwf	_keyboardScanCode^(0+256),f
 15648                           
 15649                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 15650     0585  084F               	movf	_keyboardData^(0+256),w	;volatile
 15651     0586  0020               	movlb	0	; select bank0
 15652     0587  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15653     0588  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15654     0589  0022               	movlb	2	; select bank2
 15655     058A  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15656                           
 15657                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 15658     058B  3001               	movlw	1
 15659     058C  0020               	movlb	0	; select bank0
 15660     058D  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15661     058E  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15662     058F  0022               	movlb	2	; select bank2
 15663     0590  07D2               	addwf	_keyboardIndexData^(0+256),f	;volatile
 15664                           
 15665                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 15666     0591  3008               	movlw	8
 15667     0592  0652               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 15668     0593  1D03               	btfss	3,2
 15669     0594  2D6F               	goto	i1l5884
 15670                           
 15671                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 15672     0595  3003               	movlw	3
 15673     0596  2DA9               	goto	L20
 15674     0597                     i1l5900:	
 15675                           ;ps2_keyboard.c: 127:                 } else {
 15676                           
 15677                           
 15678                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 15679     0597  3000               	movlw	0
 15680     0598  1A8C               	btfsc	12,5	;volatile
 15681     0599  3001               	movlw	1
 15682     059A  0022               	movlb	2	; select bank2
 15683     059B  00CF               	movwf	_keyboardData^(0+256)	;volatile
 15684                           
 15685                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 15686     059C  084F               	movf	_keyboardData^(0+256),w	;volatile
 15687     059D  0020               	movlb	0	; select bank0
 15688     059E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15689     059F  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15690     05A0  0022               	movlb	2	; select bank2
 15691     05A1  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15692                           
 15693                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 15694     05A2  1C51               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 15695     05A3  2DA6               	goto	u578_20
 15696     05A4  3001               	movlw	1
 15697     05A5  2DA7               	goto	u579_20
 15698     05A6                     u578_20:
 15699     05A6  3000               	movlw	0
 15700     05A7                     u579_20:
 15701     05A7  00D0               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 15702                           
 15703                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 15704     05A8  3004               	movlw	4
 15705     05A9                     L20:
 15706     05A9  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15707                           
 15708                           ;ps2_keyboard.c: 136:                 break;
 15709     05AA  2DEB               	goto	i1l5934
 15710     05AB                     i1l5908:
 15711                           
 15712                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15713     05AB  30E0               	movlw	224
 15714     05AC  0022               	movlb	2	; select bank2
 15715     05AD  0666               	xorwf	_keyboardScanCode^(0+256),w
 15716     05AE  1D03               	btfss	3,2
 15717     05AF  2DB3               	goto	i1l5912
 15718                           
 15719                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15720     05B0  3001               	movlw	1
 15721     05B1  00CE               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15722                           
 15723                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15724     05B2  2DD0               	goto	i1l5926
 15725     05B3                     i1l5912:
 15726     05B3  30F0               	movlw	240
 15727     05B4  0666               	xorwf	_keyboardScanCode^(0+256),w
 15728     05B5  1D03               	btfss	3,2
 15729     05B6  2DBA               	goto	i1l5916
 15730                           
 15731                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15732     05B7  3001               	movlw	1
 15733     05B8  00CD               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15734                           
 15735                           ;ps2_keyboard.c: 142:                 } else {
 15736     05B9  2DD0               	goto	i1l5926
 15737     05BA                     i1l5916:
 15738                           
 15739                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15740     05BA  084D               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15741     05BB  00E8               	movwf	(_keyboardScanCode^(0+256)+2)
 15742                           
 15743                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15744     05BC  084E               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15745     05BD  00E7               	movwf	(_keyboardScanCode^(0+256)+1)
 15746                           
 15747                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15748     05BE  0850               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15749     05BF  1903               	btfsc	3,2
 15750     05C0  2DCD               	goto	i1l5922
 15751                           
 15752                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15753     05C1  3091               	movlw	145
 15754     05C2  0020               	movlb	0	; select bank0
 15755     05C3  00D5               	movwf	i1GenericQueue_Enqueue@q
 15756     05C4  3023               	movlw	35
 15757     05C5  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15758     05C6  3066               	movlw	low _keyboardScanCode
 15759     05C7  00D7               	movwf	i1GenericQueue_Enqueue@item
 15760     05C8  3001               	movlw	high _keyboardScanCode
 15761     05C9  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15762     05CA  3188  200A  3185   	fcall	i1_GenericQueue_Enqueue
 15763     05CD                     i1l5922:
 15764                           
 15765                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15766     05CD  0022               	movlb	2	; select bank2
 15767     05CE  01CD               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15768                           
 15769                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15770     05CF  01CE               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15771     05D0                     i1l5926:
 15772                           
 15773                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15774     05D0  0022               	movlb	2	; select bank2
 15775     05D1  01D3               	clrf	_keyboardState^(0+256)	;volatile
 15776                           
 15777                           ;ps2_keyboard.c: 152:                 break;
 15778     05D2  2DEB               	goto	i1l5934
 15779     05D3                     i1l5932:
 15780     05D3  0022               	movlb	2	; select bank2
 15781     05D4  0853               	movf	_keyboardState^(0+256),w	;volatile
 15782     05D5  0020               	movlb	0	; select bank0
 15783     05D6  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15784     05D7  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15785                           
 15786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15787                           ; Switch size 1, requested type "simple"
 15788                           ; Number of cases is 1, Range of values is 0 to 0
 15789                           ; switch strategies available:
 15790                           ; Name         Instructions Cycles
 15791                           ; simple_byte            4     3 (average)
 15792                           ; direct_byte            8     6 (fixed)
 15793                           ; jumptable            260     6 (fixed)
 15794                           ;	Chosen strategy is simple_byte
 15795     05D8  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15796     05D9  3A00               	xorlw	0	; case 0
 15797     05DA  1903               	skipnz
 15798     05DB  2DDD               	goto	i1l6244
 15799     05DC  2DD0               	goto	i1l5926
 15800     05DD                     i1l6244:
 15801                           
 15802                           ; Switch size 1, requested type "simple"
 15803                           ; Number of cases is 4, Range of values is 1 to 4
 15804                           ; switch strategies available:
 15805                           ; Name         Instructions Cycles
 15806                           ; simple_byte           13     7 (average)
 15807                           ; direct_byte           17     9 (fixed)
 15808                           ; jumptable            263     9 (fixed)
 15809                           ;	Chosen strategy is simple_byte
 15810     05DD  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15811     05DE  3A01               	xorlw	1	; case 1
 15812     05DF  1903               	skipnz
 15813     05E0  2D6B               	goto	i1l5882
 15814     05E1  3A03               	xorlw	3	; case 2
 15815     05E2  1903               	skipnz
 15816     05E3  2D71               	goto	i1l5886
 15817     05E4  3A01               	xorlw	1	; case 3
 15818     05E5  1903               	skipnz
 15819     05E6  2D97               	goto	i1l5900
 15820     05E7  3A07               	xorlw	7	; case 4
 15821     05E8  1903               	skipnz
 15822     05E9  2DAB               	goto	i1l5908
 15823     05EA  2DD0               	goto	i1l5926
 15824     05EB                     i1l5934:
 15825                           
 15826                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15827     05EB  319E  26F6         	fcall	_SysTime_GetCurrentTimeMs
 15828     05ED  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15829     05EE  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15830     05EF  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15831     05F0  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15832     05F1  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15833     05F2  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15834     05F3  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15835     05F4  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15836     05F5  0008               	return
 15837     05F6                     __end_of_PS2Keyboard_ClockInterrupt:
 15838                           
 15839                           	psect	text91
 15840     080A                     __ptext91:	
 15841 ;; *************** function i1_GenericQueue_Enqueue *****************
 15842 ;; Defined at:
 15843 ;;		line 19 in file "generic_queue.c"
 15844 ;; Parameters:    Size  Location     Type
 15845 ;;  q               2    5[BANK0 ] PTR struct .
 15846 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15847 ;;  item            2    7[BANK0 ] PTR const void 
 15848 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateState@usbHidCode_2934(1), 
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;		None
 15851 ;; Return value:  Size  Location     Type
 15852 ;;                  1    wreg      void 
 15853 ;; Registers used:
 15854 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15855 ;; Tracked objects:
 15856 ;;		On entry : 1F/0
 15857 ;;		On exit  : 1F/0
 15858 ;;		Unchanged: 0/0
 15859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;Total ram usage:        7 bytes
 15865 ;; Hardware stack levels used: 1
 15866 ;; Hardware stack levels required when called: 1
 15867 ;; This function calls:
 15868 ;;		i1_GenericQueue_IsFull
 15869 ;;		i1___awmod
 15870 ;;		i1___wmul
 15871 ;;		i1_memcpy
 15872 ;; This function is called by:
 15873 ;;		_PS2Keyboard_ClockInterrupt
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877     080A                     i1_GenericQueue_Enqueue:	
 15878                           ;psect for function i1_GenericQueue_Enqueue
 15879                           
 15880                           
 15881                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15882                           
 15883                           ;incstack = 0
 15884                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15885     080A  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15886     080B  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15887     080C  0855               	movf	i1GenericQueue_Enqueue@q,w
 15888     080D  00F0               	movwf	i1GenericQueue_IsFull@q
 15889     080E  319F  27D8  3188   	fcall	i1_GenericQueue_IsFull
 15890     0811  0870               	movf	?i1_GenericQueue_IsFull,w
 15891     0812  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15892     0813  1D03               	btfss	3,2
 15893     0814  0008               	return
 15894                           
 15895                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15896     0815  0855               	movf	i1GenericQueue_Enqueue@q,w
 15897     0816  3E5D               	addlw	93
 15898     0817  0086               	movwf	6
 15899     0818  3000               	movlw	0
 15900     0819  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15901     081A  0087               	movwf	7
 15902     081B  0801               	movf	1,w
 15903     081C  00D9               	movwf	??i1_GenericQueue_Enqueue
 15904     081D  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15905     081E  0859               	movf	??i1_GenericQueue_Enqueue,w
 15906     081F  00F0               	movwf	i1___wmul@multiplier
 15907     0820  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15908     0821  00F1               	movwf	i1___wmul@multiplier+1
 15909     0822  0855               	movf	i1GenericQueue_Enqueue@q,w
 15910     0823  3E5A               	addlw	90
 15911     0824  0086               	movwf	6
 15912     0825  3000               	movlw	0
 15913     0826  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15914     0827  0087               	movwf	7
 15915     0828  3F40               	moviw [0]fsr1
 15916     0829  00F2               	movwf	i1___wmul@multiplicand
 15917     082A  3F41               	moviw [1]fsr1
 15918     082B  00F3               	movwf	i1___wmul@multiplicand+1
 15919     082C  3191  2144  3188   	fcall	i1___wmul
 15920     082F  0870               	movf	?i1___wmul,w
 15921     0830  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15922     0831  00F6               	movwf	i1memcpy@d1
 15923     0832  0871               	movf	?i1___wmul+1,w
 15924     0833  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15925     0834  00F7               	movwf	i1memcpy@d1+1
 15926     0835  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15927     0836  00F9               	movwf	i1memcpy@s1+1
 15928     0837  0857               	movf	i1GenericQueue_Enqueue@item,w
 15929     0838  00F8               	movwf	i1memcpy@s1
 15930     0839  0855               	movf	i1GenericQueue_Enqueue@q,w
 15931     083A  3E5A               	addlw	90
 15932     083B  0086               	movwf	6
 15933     083C  3000               	movlw	0
 15934     083D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15935     083E  0087               	movwf	7
 15936     083F  3F40               	moviw [0]fsr1
 15937     0840  00FA               	movwf	i1memcpy@n
 15938     0841  3F41               	moviw [1]fsr1
 15939     0842  00FB               	movwf	i1memcpy@n+1
 15940     0843  3193  230D  3188   	fcall	i1_memcpy
 15941                           
 15942                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 15943     0846  300F               	movlw	15
 15944     0847  00F0               	movwf	i1___awmod@divisor
 15945     0848  3000               	movlw	0
 15946     0849  00F1               	movwf	i1___awmod@divisor+1
 15947     084A  0855               	movf	i1GenericQueue_Enqueue@q,w
 15948     084B  3E5D               	addlw	93
 15949     084C  0086               	movwf	6
 15950     084D  3000               	movlw	0
 15951     084E  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15952     084F  0087               	movwf	7
 15953     0850  0801               	movf	1,w
 15954     0851  3E01               	addlw	1
 15955     0852  00F2               	movwf	i1___awmod@dividend
 15956     0853  3000               	movlw	0
 15957     0854  1803               	skipnc
 15958     0855  3001               	movlw	1
 15959     0856  00F3               	movwf	i1___awmod@dividend+1
 15960     0857  3194  24B0         	fcall	i1___awmod
 15961     0859  0870               	movf	?i1___awmod,w
 15962     085A  00D9               	movwf	??i1_GenericQueue_Enqueue
 15963     085B  0855               	movf	i1GenericQueue_Enqueue@q,w
 15964     085C  3E5D               	addlw	93
 15965     085D  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 15966     085E  3000               	movlw	0
 15967     085F  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15968     0860  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 15969     0861  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15970     0862  0086               	movwf	6
 15971     0863  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 15972     0864  0087               	movwf	7
 15973     0865  0859               	movf	??i1_GenericQueue_Enqueue,w
 15974     0866  0081               	movwf	1
 15975                           
 15976                           ;generic_queue.c: 23:         q->size++;
 15977     0867  3001               	movlw	1
 15978     0868  00D9               	movwf	??i1_GenericQueue_Enqueue
 15979     0869  0855               	movf	i1GenericQueue_Enqueue@q,w
 15980     086A  3E5E               	addlw	94
 15981     086B  0086               	movwf	6
 15982     086C  3000               	movlw	0
 15983     086D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15984     086E  0087               	movwf	7
 15985     086F  0859               	movf	??i1_GenericQueue_Enqueue,w
 15986     0870  0781               	addwf	1,f
 15987     0871  0008               	return
 15988     0872                     __end_ofi1_GenericQueue_Enqueue:
 15989                           
 15990                           	psect	text92
 15991     130D                     __ptext92:	
 15992 ;; *************** function i1_memcpy *****************
 15993 ;; Defined at:
 15994 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 15995 ;; Parameters:    Size  Location     Type
 15996 ;;  d1              2    6[COMMON] PTR void 
 15997 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15998 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15999 ;;  s1              2    8[COMMON] PTR const void 
 16000 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2934(1), 
 16001 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16002 ;;  n               2   10[COMMON] unsigned int 
 16003 ;; Auto vars:     Size  Location     Type
 16004 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 16005 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2943(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2934(1), 
 16006 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16007 ;;  d               2    0[BANK0 ] PTR unsigned char 
 16008 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 16009 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 16010 ;;  tmp             1    4[BANK0 ] unsigned char 
 16011 ;; Return value:  Size  Location     Type
 16012 ;;                  2    6[COMMON] PTR void 
 16013 ;; Registers used:
 16014 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16015 ;; Tracked objects:
 16016 ;;		On entry : 1F/0
 16017 ;;		On exit  : 1F/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16020 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;Total ram usage:       11 bytes
 16025 ;; Hardware stack levels used: 1
 16026 ;; This function calls:
 16027 ;;		Nothing
 16028 ;; This function is called by:
 16029 ;;		_USBCtrlEPService
 16030 ;;		i1_GenericQueue_Enqueue
 16031 ;; This function uses a non-reentrant model
 16032 ;;
 16033                           
 16034     130D                     i1_memcpy:	
 16035                           ;psect for function i1_memcpy
 16036                           
 16037                           
 16038                           ;incstack = 0
 16039                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 16040     130D  0879               	movf	i1memcpy@s1+1,w
 16041     130E  00D3               	movwf	i1memcpy@s+1
 16042     130F  0878               	movf	i1memcpy@s1,w
 16043     1310  00D2               	movwf	i1memcpy@s
 16044     1311  0877               	movf	i1memcpy@d1+1,w
 16045     1312  00D1               	movwf	i1memcpy@d+1
 16046     1313  0876               	movf	i1memcpy@d1,w
 16047     1314  00D0               	movwf	i1memcpy@d
 16048     1315                     i1l4374:
 16049     1315  3001               	movlw	1
 16050     1316  02FA               	subwf	i1memcpy@n,f
 16051     1317  3000               	movlw	0
 16052     1318  3BFB               	subwfb	i1memcpy@n+1,f
 16053     1319  0A7A               	incf	i1memcpy@n,w
 16054     131A  1903               	btfsc	3,2
 16055     131B  0A7B               	incf	i1memcpy@n+1,w
 16056     131C  1903               	btfsc	3,2
 16057     131D  0008               	return
 16058     131E  0852               	movf	i1memcpy@s,w
 16059     131F  0086               	movwf	6
 16060     1320  0853               	movf	i1memcpy@s+1,w
 16061     1321  0087               	movwf	7
 16062     1322  0801               	movf	1,w
 16063     1323  00D4               	movwf	i1memcpy@tmp
 16064     1324  3001               	movlw	1
 16065     1325  07D2               	addwf	i1memcpy@s,f
 16066     1326  3000               	movlw	0
 16067     1327  3DD3               	addwfc	i1memcpy@s+1,f
 16068     1328  0850               	movf	i1memcpy@d,w
 16069     1329  0086               	movwf	6
 16070     132A  0851               	movf	i1memcpy@d+1,w
 16071     132B  0087               	movwf	7
 16072     132C  0854               	movf	i1memcpy@tmp,w
 16073     132D  0081               	movwf	1
 16074     132E  3001               	movlw	1
 16075     132F  07D0               	addwf	i1memcpy@d,f
 16076     1330  3000               	movlw	0
 16077     1331  3DD1               	addwfc	i1memcpy@d+1,f
 16078     1332  2B15               	goto	i1l4374
 16079     1333                     __end_ofi1_memcpy:
 16080                           
 16081                           	psect	text93
 16082     1144                     __ptext93:	
 16083 ;; *************** function i1___wmul *****************
 16084 ;; Defined at:
 16085 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;  multiplier      2    0[COMMON] unsigned int 
 16088 ;;  multiplicand    2    2[COMMON] unsigned int 
 16089 ;; Auto vars:     Size  Location     Type
 16090 ;;  product         2    4[COMMON] unsigned int 
 16091 ;; Return value:  Size  Location     Type
 16092 ;;                  2    0[COMMON] unsigned int 
 16093 ;; Registers used:
 16094 ;;		wreg, status,2, status,0
 16095 ;; Tracked objects:
 16096 ;;		On entry : 1F/0
 16097 ;;		On exit  : 1F/0
 16098 ;;		Unchanged: 1F/0
 16099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;Total ram usage:        6 bytes
 16105 ;; Hardware stack levels used: 1
 16106 ;; This function calls:
 16107 ;;		Nothing
 16108 ;; This function is called by:
 16109 ;;		i1_GenericQueue_Enqueue
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113     1144                     i1___wmul:	
 16114                           ;psect for function i1___wmul
 16115                           
 16116                           
 16117                           ;incstack = 0
 16118                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16119     1144  01F4               	clrf	i1___wmul@product
 16120     1145  01F5               	clrf	i1___wmul@product+1
 16121     1146                     i1l4316:
 16122     1146  1C70               	btfss	i1___wmul@multiplier,0
 16123     1147  294C               	goto	i1l1282
 16124     1148  0872               	movf	i1___wmul@multiplicand,w
 16125     1149  07F4               	addwf	i1___wmul@product,f
 16126     114A  0873               	movf	i1___wmul@multiplicand+1,w
 16127     114B  3DF5               	addwfc	i1___wmul@product+1,f
 16128     114C                     i1l1282:
 16129     114C  3001               	movlw	1
 16130     114D                     u345_25:
 16131     114D  35F2               	lslf	i1___wmul@multiplicand,f
 16132     114E  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16133     114F  0B89               	decfsz	9,f
 16134     1150  294D               	goto	u345_25
 16135     1151  3001               	movlw	1
 16136     1152                     u346_25:
 16137     1152  36F1               	lsrf	i1___wmul@multiplier+1,f
 16138     1153  0CF0               	rrf	i1___wmul@multiplier,f
 16139     1154  0B89               	decfsz	9,f
 16140     1155  2952               	goto	u346_25
 16141     1156  0870               	movf	i1___wmul@multiplier,w
 16142     1157  0471               	iorwf	i1___wmul@multiplier+1,w
 16143     1158  1D03               	btfss	3,2
 16144     1159  2946               	goto	i1l4316
 16145     115A  0875               	movf	i1___wmul@product+1,w
 16146     115B  00F1               	movwf	?i1___wmul+1
 16147     115C  0874               	movf	i1___wmul@product,w
 16148     115D  00F0               	movwf	?i1___wmul
 16149     115E  0008               	return
 16150     115F                     __end_ofi1___wmul:
 16151                           
 16152                           	psect	text94
 16153     14B0                     __ptext94:	
 16154 ;; *************** function i1___awmod *****************
 16155 ;; Defined at:
 16156 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;  divisor         2    0[COMMON] int 
 16159 ;;  dividend        2    2[COMMON] int 
 16160 ;; Auto vars:     Size  Location     Type
 16161 ;;  sign            1    6[COMMON] unsigned char 
 16162 ;;  counter         1    5[COMMON] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;                  2    0[COMMON] int 
 16165 ;; Registers used:
 16166 ;;		wreg, status,2, status,0
 16167 ;; Tracked objects:
 16168 ;;		On entry : 1F/0
 16169 ;;		On exit  : 1F/0
 16170 ;;		Unchanged: 1F/0
 16171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16172 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16175 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;Total ram usage:        7 bytes
 16177 ;; Hardware stack levels used: 1
 16178 ;; This function calls:
 16179 ;;		Nothing
 16180 ;; This function is called by:
 16181 ;;		i1_GenericQueue_Enqueue
 16182 ;; This function uses a non-reentrant model
 16183 ;;
 16184                           
 16185     14B0                     i1___awmod:	
 16186                           ;psect for function i1___awmod
 16187                           
 16188                           
 16189                           ;incstack = 0
 16190                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 16191     14B0  01F6               	clrf	i1___awmod@sign
 16192     14B1  1FF3               	btfss	i1___awmod@dividend+1,7
 16193     14B2  2CBA               	goto	i1l4336
 16194     14B3  09F2               	comf	i1___awmod@dividend,f
 16195     14B4  09F3               	comf	i1___awmod@dividend+1,f
 16196     14B5  0AF2               	incf	i1___awmod@dividend,f
 16197     14B6  1903               	skipnz
 16198     14B7  0AF3               	incf	i1___awmod@dividend+1,f
 16199     14B8  01F6               	clrf	i1___awmod@sign
 16200     14B9  0AF6               	incf	i1___awmod@sign,f
 16201     14BA                     i1l4336:
 16202     14BA  1FF1               	btfss	i1___awmod@divisor+1,7
 16203     14BB  2CC1               	goto	i1l4340
 16204     14BC  09F0               	comf	i1___awmod@divisor,f
 16205     14BD  09F1               	comf	i1___awmod@divisor+1,f
 16206     14BE  0AF0               	incf	i1___awmod@divisor,f
 16207     14BF  1903               	skipnz
 16208     14C0  0AF1               	incf	i1___awmod@divisor+1,f
 16209     14C1                     i1l4340:
 16210     14C1  0870               	movf	i1___awmod@divisor,w
 16211     14C2  0471               	iorwf	i1___awmod@divisor+1,w
 16212     14C3  1903               	btfsc	3,2
 16213     14C4  2CE8               	goto	i1l4358
 16214     14C5  01F5               	clrf	i1___awmod@counter
 16215     14C6  0AF5               	incf	i1___awmod@counter,f
 16216     14C7                     i1l4348:
 16217     14C7  1BF1               	btfsc	i1___awmod@divisor+1,7
 16218     14C8  2CD3               	goto	i1l4350
 16219     14C9  3001               	movlw	1
 16220     14CA                     u351_25:
 16221     14CA  35F0               	lslf	i1___awmod@divisor,f
 16222     14CB  0DF1               	rlf	i1___awmod@divisor+1,f
 16223     14CC  0B89               	decfsz	9,f
 16224     14CD  2CCA               	goto	u351_25
 16225     14CE  3001               	movlw	1
 16226     14CF  00F4               	movwf	??i1___awmod
 16227     14D0  0874               	movf	??i1___awmod,w
 16228     14D1  07F5               	addwf	i1___awmod@counter,f
 16229     14D2  2CC7               	goto	i1l4348
 16230     14D3                     i1l4350:
 16231     14D3  0871               	movf	i1___awmod@divisor+1,w
 16232     14D4  0273               	subwf	i1___awmod@dividend+1,w
 16233     14D5  1D03               	skipz
 16234     14D6  2CD9               	goto	u353_25
 16235     14D7  0870               	movf	i1___awmod@divisor,w
 16236     14D8  0272               	subwf	i1___awmod@dividend,w
 16237     14D9                     u353_25:
 16238     14D9  1C03               	skipc
 16239     14DA  2CDF               	goto	i1l4354
 16240     14DB  0870               	movf	i1___awmod@divisor,w
 16241     14DC  02F2               	subwf	i1___awmod@dividend,f
 16242     14DD  0871               	movf	i1___awmod@divisor+1,w
 16243     14DE  3BF3               	subwfb	i1___awmod@dividend+1,f
 16244     14DF                     i1l4354:
 16245     14DF  3001               	movlw	1
 16246     14E0                     u354_25:
 16247     14E0  36F1               	lsrf	i1___awmod@divisor+1,f
 16248     14E1  0CF0               	rrf	i1___awmod@divisor,f
 16249     14E2  0B89               	decfsz	9,f
 16250     14E3  2CE0               	goto	u354_25
 16251     14E4  3001               	movlw	1
 16252     14E5  02F5               	subwf	i1___awmod@counter,f
 16253     14E6  1D03               	btfss	3,2
 16254     14E7  2CD3               	goto	i1l4350
 16255     14E8                     i1l4358:
 16256     14E8  0876               	movf	i1___awmod@sign,w
 16257     14E9  1903               	btfsc	3,2
 16258     14EA  2CF0               	goto	i1l4362
 16259     14EB  09F2               	comf	i1___awmod@dividend,f
 16260     14EC  09F3               	comf	i1___awmod@dividend+1,f
 16261     14ED  0AF2               	incf	i1___awmod@dividend,f
 16262     14EE  1903               	skipnz
 16263     14EF  0AF3               	incf	i1___awmod@dividend+1,f
 16264     14F0                     i1l4362:
 16265     14F0  0873               	movf	i1___awmod@dividend+1,w
 16266     14F1  00F1               	movwf	?i1___awmod+1
 16267     14F2  0872               	movf	i1___awmod@dividend,w
 16268     14F3  00F0               	movwf	?i1___awmod
 16269     14F4  0008               	return
 16270     14F5                     __end_ofi1___awmod:
 16271                           
 16272                           	psect	text95
 16273     1FD8                     __ptext95:	
 16274 ;; *************** function i1_GenericQueue_IsFull *****************
 16275 ;; Defined at:
 16276 ;;		line 15 in file "generic_queue.c"
 16277 ;; Parameters:    Size  Location     Type
 16278 ;;  q               2    0[COMMON] PTR struct .
 16279 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 16280 ;; Auto vars:     Size  Location     Type
 16281 ;;		None
 16282 ;; Return value:  Size  Location     Type
 16283 ;;                  2    0[COMMON] int 
 16284 ;; Registers used:
 16285 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16286 ;; Tracked objects:
 16287 ;;		On entry : 1F/0
 16288 ;;		On exit  : 1F/0
 16289 ;;		Unchanged: 1F/0
 16290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16291 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;Total ram usage:        4 bytes
 16296 ;; Hardware stack levels used: 1
 16297 ;; This function calls:
 16298 ;;		Nothing
 16299 ;; This function is called by:
 16300 ;;		i1_GenericQueue_Enqueue
 16301 ;; This function uses a non-reentrant model
 16302 ;;
 16303                           
 16304     1FD8                     i1_GenericQueue_IsFull:	
 16305                           ;psect for function i1_GenericQueue_IsFull
 16306                           
 16307                           
 16308                           ;generic_queue.c: 16:     return (q->size == 15);
 16309                           
 16310                           ;incstack = 0
 16311                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 16312     1FD8  0870               	movf	i1GenericQueue_IsFull@q,w
 16313     1FD9  3E5E               	addlw	94
 16314     1FDA  0086               	movwf	6
 16315     1FDB  3000               	movlw	0
 16316     1FDC  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 16317     1FDD  0087               	movwf	7
 16318     1FDE  300F               	movlw	15
 16319     1FDF  0601               	xorwf	1,w
 16320     1FE0  1D03               	btfss	3,2
 16321     1FE1  2FE4               	goto	u342_20
 16322     1FE2  3001               	movlw	1
 16323     1FE3  2FE5               	goto	u343_20
 16324     1FE4                     u342_20:
 16325     1FE4  3000               	movlw	0
 16326     1FE5                     u343_20:
 16327     1FE5  00F2               	movwf	??i1_GenericQueue_IsFull
 16328     1FE6  01F3               	clrf	??i1_GenericQueue_IsFull+1
 16329     1FE7  0872               	movf	??i1_GenericQueue_IsFull,w
 16330     1FE8  00F0               	movwf	?i1_GenericQueue_IsFull
 16331     1FE9  0873               	movf	??i1_GenericQueue_IsFull+1,w
 16332     1FEA  00F1               	movwf	?i1_GenericQueue_IsFull+1
 16333     1FEB  0008               	return
 16334     1FEC                     __end_ofi1_GenericQueue_IsFull:
 16335                           
 16336                           	psect	text96
 16337     1EF6                     __ptext96:	
 16338 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 16339 ;; Defined at:
 16340 ;;		line 19 in file "systime.c"
 16341 ;; Parameters:    Size  Location     Type
 16342 ;;		None
 16343 ;; Auto vars:     Size  Location     Type
 16344 ;;		None
 16345 ;; Return value:  Size  Location     Type
 16346 ;;                  4    0[COMMON] unsigned long 
 16347 ;; Registers used:
 16348 ;;		wreg
 16349 ;; Tracked objects:
 16350 ;;		On entry : 1F/2
 16351 ;;		On exit  : 1F/2
 16352 ;;		Unchanged: 0/0
 16353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16354 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;Total ram usage:        4 bytes
 16359 ;; Hardware stack levels used: 1
 16360 ;; This function calls:
 16361 ;;		Nothing
 16362 ;; This function is called by:
 16363 ;;		_PS2Keyboard_DataInterrupt
 16364 ;;		_PS2Keyboard_ClockInterrupt
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368     1EF6                     _SysTime_GetCurrentTimeMs:	
 16369                           ;psect for function _SysTime_GetCurrentTimeMs
 16370                           
 16371                           
 16372                           ;systime.c: 21:     return timeMs;
 16373                           
 16374                           ;incstack = 0
 16375                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 16376     1EF6  082B               	movf	(_timeMs+3)^(0+256),w
 16377     1EF7  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 16378     1EF8  082A               	movf	(_timeMs+2)^(0+256),w
 16379     1EF9  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 16380     1EFA  0829               	movf	(_timeMs+1)^(0+256),w
 16381     1EFB  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 16382     1EFC  0828               	movf	_timeMs^(0+256),w
 16383     1EFD  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 16384     1EFE  0008               	return
 16385     1EFF                     __end_of_SysTime_GetCurrentTimeMs:
 16386                           
 16387                           	psect	text97
 16388     1205                     __ptext97:	
 16389 ;; *************** function _EUSART_Transmit_ISR *****************
 16390 ;; Defined at:
 16391 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16392 ;; Parameters:    Size  Location     Type
 16393 ;;		None
 16394 ;; Auto vars:     Size  Location     Type
 16395 ;;		None
 16396 ;; Return value:  Size  Location     Type
 16397 ;;                  1    wreg      void 
 16398 ;; Registers used:
 16399 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16400 ;; Tracked objects:
 16401 ;;		On entry : 1F/2
 16402 ;;		On exit  : 1F/1
 16403 ;;		Unchanged: 0/0
 16404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;Total ram usage:        1 bytes
 16410 ;; Hardware stack levels used: 1
 16411 ;; This function calls:
 16412 ;;		Nothing
 16413 ;; This function is called by:
 16414 ;;		_EUSART_Initialize
 16415 ;;		_INTERRUPT_InterruptManager
 16416 ;; This function uses a non-reentrant model
 16417 ;;
 16418                           
 16419     1205                     _EUSART_Transmit_ISR:	
 16420                           ;psect for function _EUSART_Transmit_ISR
 16421                           
 16422                           
 16423                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16424                           
 16425                           ;incstack = 0
 16426                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16427     1205  3008               	movlw	8
 16428     1206  0021               	movlb	1	; select bank1
 16429     1207  026F               	subwf	_eusartTxBufferRemaining^(0+128),w
 16430     1208  1803               	skipnc
 16431     1209  2A22               	goto	i1l305
 16432                           
 16433                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16434     120A  0022               	movlb	2	; select bank2
 16435     120B  0864               	movf	_eusartTxTail^(0+256),w
 16436     120C  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16437     120D  0086               	movwf	6
 16438     120E  3001               	movlw	1	; select bank3/4
 16439     120F  0087               	movwf	7
 16440     1210  0801               	movf	1,w
 16441     1211  0023               	movlb	3	; select bank3
 16442     1212  009A               	movwf	26	;volatile
 16443     1213  3001               	movlw	1
 16444     1214  00F0               	movwf	??_EUSART_Transmit_ISR
 16445     1215  0870               	movf	??_EUSART_Transmit_ISR,w
 16446     1216  0022               	movlb	2	; select bank2
 16447     1217  07E4               	addwf	_eusartTxTail^(0+256),f	;volatile
 16448                           
 16449                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16450     1218  3008               	movlw	8
 16451     1219  0264               	subwf	_eusartTxTail^(0+256),w
 16452     121A  1803               	btfsc	3,0
 16453                           
 16454                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16455     121B  01E4               	clrf	_eusartTxTail^(0+256)	;volatile
 16456                           
 16457                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16458     121C  3001               	movlw	1
 16459     121D  00F0               	movwf	??_EUSART_Transmit_ISR
 16460     121E  0870               	movf	??_EUSART_Transmit_ISR,w
 16461     121F  0021               	movlb	1	; select bank1
 16462     1220  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16463                           
 16464                           ;mcc_generated_files/eusart.c: 209:     }
 16465     1221  0008               	return
 16466     1222                     i1l305:	
 16467                           ;mcc_generated_files/eusart.c: 210:     else
 16468                           
 16469                           
 16470                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16471     1222  1211               	bcf	17,4	;volatile
 16472     1223  0008               	return
 16473     1224                     __end_of_EUSART_Transmit_ISR:
 16474                           
 16475                           	psect	text98
 16476     13C0                     __ptext98:	
 16477 ;; *************** function _EUSART_Receive_ISR *****************
 16478 ;; Defined at:
 16479 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;		None
 16482 ;; Auto vars:     Size  Location     Type
 16483 ;;		None
 16484 ;; Return value:  Size  Location     Type
 16485 ;;                  1    wreg      void 
 16486 ;; Registers used:
 16487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16488 ;; Tracked objects:
 16489 ;;		On entry : 1F/2
 16490 ;;		On exit  : 0/0
 16491 ;;		Unchanged: 0/0
 16492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;Total ram usage:        0 bytes
 16498 ;; Hardware stack levels used: 1
 16499 ;; Hardware stack levels required when called: 2
 16500 ;; This function calls:
 16501 ;;		NULL
 16502 ;;		_EUSART_DefaultErrorHandler
 16503 ;;		_EUSART_DefaultFramingErrorHandler
 16504 ;;		_EUSART_DefaultOverrunErrorHandler
 16505 ;;		_EUSART_RxDataHandler
 16506 ;; This function is called by:
 16507 ;;		_EUSART_Initialize
 16508 ;;		_INTERRUPT_InterruptManager
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512     13C0                     _EUSART_Receive_ISR:	
 16513                           ;psect for function _EUSART_Receive_ISR
 16514                           
 16515                           
 16516                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16517                           
 16518                           ;incstack = 0
 16519                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16520     13C0  0021               	movlb	1	; select bank1
 16521     13C1  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16522     13C2  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16523     13C3  0086               	movwf	6
 16524     13C4  3001               	movlw	1	; select bank3/4
 16525     13C5  0087               	movwf	7
 16526     13C6  0181               	clrf	1
 16527                           
 16528                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16529     13C7  0023               	movlb	3	; select bank3
 16530     13C8  1D1D               	btfss	29,2	;volatile
 16531     13C9  2BD7               	goto	i1l5592
 16532                           
 16533                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16534     13CA  0021               	movlb	1	; select bank1
 16535     13CB  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16536     13CC  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16537     13CD  0086               	movwf	6
 16538     13CE  3001               	movlw	1	; select bank3/4
 16539     13CF  0087               	movwf	7
 16540     13D0  1481               	bsf	1,1
 16541                           
 16542                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16543     13D1  0022               	movlb	2	; select bank2
 16544     13D2  0843               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16545     13D3  008A               	movwf	10
 16546     13D4  0842               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16547     13D5  000A               	callw
 16548     13D6  3193               	pagesel	$
 16549     13D7                     i1l5592:
 16550                           
 16551                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16552     13D7  0023               	movlb	3	; select bank3
 16553     13D8  1C9D               	btfss	29,1	;volatile
 16554     13D9  2BE7               	goto	i1l5598
 16555                           
 16556                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16557     13DA  0021               	movlb	1	; select bank1
 16558     13DB  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16559     13DC  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16560     13DD  0086               	movwf	6
 16561     13DE  3001               	movlw	1	; select bank3/4
 16562     13DF  0087               	movwf	7
 16563     13E0  1501               	bsf	1,2
 16564                           
 16565                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16566     13E1  0022               	movlb	2	; select bank2
 16567     13E2  0841               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16568     13E3  008A               	movwf	10
 16569     13E4  0840               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16570     13E5  000A               	callw
 16571     13E6  3193               	pagesel	$
 16572     13E7                     i1l5598:
 16573                           
 16574                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16575     13E7  0021               	movlb	1	; select bank1
 16576     13E8  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16577     13E9  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16578     13EA  0086               	movwf	6
 16579     13EB  3001               	movlw	1	; select bank3/4
 16580     13EC  0087               	movwf	7
 16581     13ED  0801               	movf	1,w
 16582     13EE  1903               	btfsc	3,2
 16583     13EF  2BF7               	goto	i1l5602
 16584                           
 16585                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16586     13F0  0022               	movlb	2	; select bank2
 16587     13F1  083F               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16588     13F2  008A               	movwf	10
 16589     13F3  083E               	movf	_EUSART_ErrorHandler^(0+256),w
 16590     13F4  000A               	callw
 16591     13F5  3193               	pagesel	$
 16592                           
 16593                           ;mcc_generated_files/eusart.c: 233:     } else {
 16594     13F6  0008               	return
 16595     13F7                     i1l5602:
 16596                           
 16597                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16598     13F7  3190  20E1         	fcall	_EUSART_RxDataHandler
 16599     13F9  0008               	return
 16600     13FA                     __end_of_EUSART_Receive_ISR:
 16601                           
 16602                           	psect	text99
 16603     1085                     __ptext99:	
 16604 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16605 ;; Defined at:
 16606 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16607 ;; Parameters:    Size  Location     Type
 16608 ;;		None
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;		None
 16611 ;; Return value:  Size  Location     Type
 16612 ;;                  1    wreg      void 
 16613 ;; Registers used:
 16614 ;;		None
 16615 ;; Tracked objects:
 16616 ;;		On entry : 1F/2
 16617 ;;		On exit  : 1F/3
 16618 ;;		Unchanged: 0/0
 16619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;Total ram usage:        0 bytes
 16625 ;; Hardware stack levels used: 1
 16626 ;; This function calls:
 16627 ;;		Nothing
 16628 ;; This function is called by:
 16629 ;;		_EUSART_Initialize
 16630 ;;		_EUSART_Receive_ISR
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634     1085                     _EUSART_DefaultOverrunErrorHandler:	
 16635                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16636                           
 16637                           
 16638                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16639                           
 16640                           ;incstack = 0
 16641                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16642     1085  0023               	movlb	3	; select bank3
 16643     1086  121D               	bcf	29,4	;volatile
 16644                           
 16645                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16646     1087  161D               	bsf	29,4	;volatile
 16647     1088  0008               	return
 16648     1089                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16649                           
 16650                           	psect	text100
 16651     0002                     __ptext100:	
 16652 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16653 ;; Defined at:
 16654 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16655 ;; Parameters:    Size  Location     Type
 16656 ;;		None
 16657 ;; Auto vars:     Size  Location     Type
 16658 ;;		None
 16659 ;; Return value:  Size  Location     Type
 16660 ;;                  1    wreg      void 
 16661 ;; Registers used:
 16662 ;;		None
 16663 ;; Tracked objects:
 16664 ;;		On entry : 1F/2
 16665 ;;		On exit  : 1F/2
 16666 ;;		Unchanged: 1F/0
 16667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;Total ram usage:        0 bytes
 16673 ;; Hardware stack levels used: 1
 16674 ;; This function calls:
 16675 ;;		Nothing
 16676 ;; This function is called by:
 16677 ;;		_EUSART_Initialize
 16678 ;;		_EUSART_Receive_ISR
 16679 ;; This function uses a non-reentrant model
 16680 ;;
 16681                           
 16682     0002                     _EUSART_DefaultFramingErrorHandler:	
 16683                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16684                           
 16685                           
 16686                           ;incstack = 0
 16687                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16688     0002  0008               	return
 16689     0003                     __end_of_EUSART_DefaultFramingErrorHandler:
 16690                           
 16691                           	psect	text101
 16692     1E96                     __ptext101:	
 16693 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16694 ;; Defined at:
 16695 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16696 ;; Parameters:    Size  Location     Type
 16697 ;;		None
 16698 ;; Auto vars:     Size  Location     Type
 16699 ;;		None
 16700 ;; Return value:  Size  Location     Type
 16701 ;;                  1    wreg      void 
 16702 ;; Registers used:
 16703 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16704 ;; Tracked objects:
 16705 ;;		On entry : 1F/2
 16706 ;;		On exit  : 1F/2
 16707 ;;		Unchanged: 0/0
 16708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;Total ram usage:        0 bytes
 16714 ;; Hardware stack levels used: 1
 16715 ;; Hardware stack levels required when called: 1
 16716 ;; This function calls:
 16717 ;;		_EUSART_RxDataHandler
 16718 ;; This function is called by:
 16719 ;;		_EUSART_Initialize
 16720 ;;		_EUSART_Receive_ISR
 16721 ;; This function uses a non-reentrant model
 16722 ;;
 16723                           
 16724     1E96                     _EUSART_DefaultErrorHandler:	
 16725                           ;psect for function _EUSART_DefaultErrorHandler
 16726                           
 16727                           
 16728                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16729                           
 16730                           ;incstack = 0
 16731                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16732     1E96  3190  20E1         	fcall	_EUSART_RxDataHandler
 16733     1E98  0008               	return
 16734     1E99                     __end_of_EUSART_DefaultErrorHandler:
 16735                           
 16736                           	psect	text102
 16737     10E1                     __ptext102:	
 16738 ;; *************** function _EUSART_RxDataHandler *****************
 16739 ;; Defined at:
 16740 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16741 ;; Parameters:    Size  Location     Type
 16742 ;;		None
 16743 ;; Auto vars:     Size  Location     Type
 16744 ;;		None
 16745 ;; Return value:  Size  Location     Type
 16746 ;;                  1    wreg      void 
 16747 ;; Registers used:
 16748 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16749 ;; Tracked objects:
 16750 ;;		On entry : 1C/1
 16751 ;;		On exit  : 1F/2
 16752 ;;		Unchanged: 0/0
 16753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16758 ;;Total ram usage:        1 bytes
 16759 ;; Hardware stack levels used: 1
 16760 ;; This function calls:
 16761 ;;		Nothing
 16762 ;; This function is called by:
 16763 ;;		_EUSART_Receive_ISR
 16764 ;;		_EUSART_DefaultErrorHandler
 16765 ;; This function uses a non-reentrant model
 16766 ;;
 16767                           
 16768     10E1                     _EUSART_RxDataHandler:	
 16769                           ;psect for function _EUSART_RxDataHandler
 16770                           
 16771                           
 16772                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16773                           
 16774                           ;incstack = 0
 16775                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16776     10E1  0021               	movlb	1	; select bank1
 16777     10E2  086E               	movf	_eusartRxHead^(0+128),w
 16778     10E3  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16779     10E4  0086               	movwf	6
 16780     10E5  3001               	movlw	1	; select bank3/4
 16781     10E6  0087               	movwf	7
 16782     10E7  0023               	movlb	3	; select bank3
 16783     10E8  0819               	movf	25,w	;volatile
 16784     10E9  0081               	movwf	1
 16785     10EA  3001               	movlw	1
 16786     10EB  00F0               	movwf	??_EUSART_RxDataHandler
 16787     10EC  0870               	movf	??_EUSART_RxDataHandler,w
 16788     10ED  0021               	movlb	1	; select bank1
 16789     10EE  07EE               	addwf	_eusartRxHead^(0+128),f	;volatile
 16790                           
 16791                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16792     10EF  3008               	movlw	8
 16793     10F0  026E               	subwf	_eusartRxHead^(0+128),w
 16794     10F1  1803               	btfsc	3,0
 16795                           
 16796                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16797     10F2  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
 16798                           
 16799                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16800     10F3  3001               	movlw	1
 16801     10F4  00F0               	movwf	??_EUSART_RxDataHandler
 16802     10F5  0870               	movf	??_EUSART_RxDataHandler,w
 16803     10F6  0022               	movlb	2	; select bank2
 16804     10F7  07E2               	addwf	_eusartRxCount^(0+256),f	;volatile
 16805     10F8  0008               	return
 16806     10F9                     __end_of_EUSART_RxDataHandler:
 16807     007E                     btemp	set	126	;btemp
 16808     007E                     int$flags	set	126
 16809     007E                     wtemp0	set	126
 16810     232C                     
 16811                           	psect	config
 16812                           
 16813                           ;Config register CONFIG1 @ 0x8007
 16814                           ;	Oscillator Selection Bits
 16815                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16816                           ;	Watchdog Timer Enable
 16817                           ;	WDTE = OFF, WDT disabled
 16818                           ;	Power-up Timer Enable
 16819                           ;	PWRTE = OFF, PWRT disabled
 16820                           ;	MCLR Pin Function Select
 16821                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16822                           ;	Flash Program Memory Code Protection
 16823                           ;	CP = OFF, Program memory code protection is disabled
 16824                           ;	Brown-out Reset Enable
 16825                           ;	BOREN = OFF, Brown-out Reset disabled
 16826                           ;	Clock Out Enable
 16827                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16828                           ;	Internal/External Switchover Mode
 16829                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16830                           ;	Fail-Safe Clock Monitor Enable
 16831                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16832     8007                     	org	32775
 16833     8007  39E4               	dw	14820
 16834                           
 16835                           ;Config register CONFIG2 @ 0x8008
 16836                           ;	Flash Memory Self-Write Protection
 16837                           ;	WRT = OFF, Write protection off
 16838                           ;	CPU System Clock Selection Bit
 16839                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16840                           ;	USB Low Speed Clock Selection bit
 16841                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16842                           ;	PLL Multiplier Selection Bit
 16843                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16844                           ;	PLL Enable Bit
 16845                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16846                           ;	Stack Overflow/Underflow Reset Enable
 16847                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16848                           ;	Brown-out Reset Voltage Selection
 16849                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16850                           ;	Low-Power Brown Out Reset
 16851                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16852                           ;	Low-Voltage Programming Enable
 16853                           ;	LVP = ON, Low-voltage programming enabled
 16854     8008                     	org	32776
 16855     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    587
    Data        6
    BSS         135
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     65      72
    BANK2            79      0      78
    BANK3            80      0      45
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2935(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    Log_Message@buf	PTR const unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    Log_UtilityConvertByteToHex@buf	PTR unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2935(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2935(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2934(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2943(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2690$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2690$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[14]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _Log_UtilityConvertByteToHex->___bmul
    _Log_Message->_EUSART_Write
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   50053
                                             48 BANK1     17    17      0
                  _APP_KeyboardTasks
                        _Log_Message
        _Log_UtilityConvertByteToHex
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    8747
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    8286
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _Log_UtilityConvertByteToHex                          6     4      2     689
                                              4 BANK1      6     4      2
                             ___bmul
                            _hex2str
 ---------------------------------------------------------------------------------
 (2) _hex2str                                              1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Log_Message                                          4     3      1     259
                                              2 BANK1      4     3      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   37370
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    8201
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     245
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   27075
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    9513
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    8476
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7803
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4412
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   0     0      0   13132
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _Log_Message
     _EUSART_Write
     _EUSART_is_tx_ready
   _Log_UtilityConvertByteToHex
     ___bmul
     _hex2str
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     41      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4E       9       98.7%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2D      11       56.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 21 21:25:39 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1EF6  
                                   _USB_SD_Ptr 18BC                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 11B0                                  _USBDeviceInit 0EA1  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0BF2  
             __end_of_USBHIDCBSetReportHandler 1F75                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l110 1F7E  
                  __end_of_USBStdGetDscHandler 0B77                                            l541 1121  
                                          l299 12CF                                            l923 02FF  
                                          _BDT 0020                       _GenericQueue_CopyToArray 16D0  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                   _USBSuspend 10F9                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1FB4  
                                          wreg 0009                                 _USBDeviceTasks 06EA  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 1FEC  
                               _USBDeviceState 006C             __end_of_IOCAF5_SetInterruptHandler 1EC6  
                   _IOCAF5_SetInterruptHandler 1EBE                              main@scanCodeValid 00E4  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 05F6                       USBEnableEndpoint@options 0077  
                  ?_PS2Keyboard_GetLastCommand 0070                                           l1282 1167  
                                         l1187 16D9                                           l5012 0EAC  
                   USBConfigureEndpoint@handle 0076                                           l5104 1126  
                                         l5040 0EE3                                           l6002 016E  
                                         l5114 12C6                                           l6020 01A9  
                                         l6012 018F                                           l6100 03D1  
                                         l5028 0EC5                                           l5214 0D0C  
                                         l5206 0CFC                                           l5062 0EFC  
                                         l4600 152D                                           l6024 01B6  
                                         l6016 019C                                           l5224 0D53  
                                         l6104 03EA                                           l5128 12E5  
                                         l5226 0D6B                                           l4604 1535  
                                         l5236 10B7                                           l6052 0314  
                                         l6062 0341                                           l4552 13B2  
                                         l4544 13A7                                           l5360 1FB2  
                                         l5352 1FAB                                           l6160 0AC8  
                                         l6152 0ABC                                           l4546 1390  
                                         l4730 1237                                           l6082 0385  
                                         l6066 0358                                           l6058 032F  
                                         l4548 13AB                                           l6092 03A6  
                                         l6172 0AE2                                           l4590 150C  
                                         l4582 1506                                           l4558 1161  
                                         l4486 133B                                           l6086 038D  
                                         l6078 0375                                           l5622 11E5  
                                         l6166 0AD3                                           l6158 0AC7  
                                         l4592 1518                                           l4752 06DA  
                                         l5624 11E6                                           l4578 14FF  
                                         l4770 16CE                                           l5642 1180  
                                         l6178 0AF9                                           l4596 1524  
                                         l4748 06B0                                           l4766 16BE  
                                         l5648 117C                                           l4892 1F94  
                                         l5960 00B2                                           l4896 1F9A  
                                         l5970 00DA                                           l5962 00C0  
                                         l5980 010A                                           l5956 00A5  
                                         l5966 00CD                                           l5974 00F6  
                                         l5992 0131                                           l5984 0117  
                                         l5994 013F                                           l5988 0124  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u4440 1EB4  
                                         u3730 1FD0                                           u3740 1FD1  
                                         u6220 03B4                                           u6205 03A1  
                                         u6125 0309                                           u3750 1FF8  
                                         u3815 1168                                           u3760 1FF9  
                                         u3905 1525                                           u3825 116D  
                                         u6145 0338                                           u4385 0EC8  
                                         u5295 12F0                                           u6360 0AB8  
                                         u6417 0A99                                           u6427 11BB  
                                         u3875 150F                                           u3895 151E  
                        ??_USBCtrlTrfTxService 0070                                           _UCFG 0E91  
                                         _UEP0 0E98                                           _UEP1 0E99  
                                         u5995 015D                                           _UEIE 0E97  
                                         _UEIR 0E93                                           _UCON 0E8E  
                                         _TMR2 001A                                           _WPUA 020C  
                                         _WPUB 020D         USBStdFeatureReqHandler@current_ep_data 005A  
                                         _pDst 015F                                           _main 0A8A  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                              _USBDeviceAttach 1111                      ?_SysTime_GetCurrentTimeMs 0070  
                                         btemp 007E                                           start 003D  
                                 _SysTime_Init 1F1E                           _GenericQueue_Dequeue 0943  
                         _GenericQueue_IsEmpty 1FC5                           ??_USBCheckHIDRequest 0074  
                         ?_GenericQueue_IsFull 00A8                     __end_of_USBCheckStdRequest 0943  
                       ??_USBCtrlTrfOutHandler 007A                              ___bmul@multiplier 00AB  
                                _LocalSOFCount 0136                           _GenericQueue_Enqueue 0872  
              APP_KeyboardUpdateState@scanCode 00D0                            USBDeviceInit@i_1369 00AE  
                    ??_USBStdFeatureReqHandler 0056                           ?_GenericQueue_Remove 00C0  
                                ??_Log_Message 00AB                       ?_APP_KeyboardUpdateState 0070  
                     GenericQueue_Dequeue@item 00C2                       ??_USBStdGetStatusHandler 0070  
                               ?_USBDeviceInit 0070                                  ?_EUSART_Write 0070  
                __end_of_OSCILLATOR_Initialize 1F82                __end_of_PS2Keyboard_GetScanCode 11E8  
                                        ?_main 0070                                __end_of___awmod 153A  
                       __end_of_USBDeviceTasks 07BD                                          _T2CON 001C  
                    ?_USBCtrlEPServiceComplete 0070                                          i1l141 000D  
                                        i1l144 0019                                          i1l305 1222  
                                        i1l153 003B                                          i1l146 0026  
                                        i1l148 0033                                          i1l502 0769  
                                        i1l503 07BA                                          i1l504 07B7  
                                   i1memcpy@d1 0076                                          i1l631 161D  
                                        i1l703 0908                                          i1l634 1663  
                                        i1l635 1626                                          i1l636 1629  
                                        i1l492 0709                                          i1l566 0DBC  
                                        i1l680 0BDD                                          i1l728 02B0  
                                        i1l594 0F60                                          i1l914 15EA  
                                        i1l818 1470                                          i1l498 0741  
                                        i1l579 1749                                          i1l764 0C6F  
                                        i1l692 0942                                          i1l694 08E2  
                                   i1memcpy@s1 0078                                          _UADDR 0E96  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _USTAT 0E8F  
                                        _TXREG 019A                                   main@scanCode 00E6  
                                        _TXSTA 019E                                   _outputReport 0120  
                              __end_of_hex2str 1FB4             __end_of_USBHIDCBSetIdleRateHandler 1F68  
                   _USBHIDCBSetIdleRateHandler 1F5B                __end_of_USBCtrlEPAllowDataStage 1800  
                                        _sd000 18C2                                          _sd001 183F  
                                        _sd002 18AE                               __end_of_TMR2_ISR 1F35  
               ?_USBIncrement1msInternalTimers 0070                                 i1___awmod@sign 0076  
                      __end_of_PIN_MANAGER_IOC 1F13                        _PS2USB_ScanCodeToUSBHID 1224  
                               _WDT_Initialize 1E9C                                          pclath 000A  
                             __end_ofi1___wmul 115F                                          status 0003  
                          i1___wmul@multiplier 0070                                          wtemp0 007E  
                             __end_ofi1_memcpy 1333                                _TMR2_StartTimer 1E9F  
                             __end_ofi1_memset 10B4                          ?_GenericQueue_Dequeue 00C0  
                        ?_GenericQueue_IsEmpty 00A8                          ??_GenericQueue_IsFull 00AA  
                         __end_of_ps2ExtUsbMap 0501                          _GenericQueue_Contains 166E  
              PS2USB_ScanCodeToUSBHID@scanCode 00A8                          ?_GenericQueue_Enqueue 00C0  
                        ??_GenericQueue_Remove 00C3                      _PS2Keyboard_DataInterrupt 1F82  
                              __initialization 003F                    ?_PS2Keyboard_ClockInterrupt 0070  
                                 __end_of_main 0AFE                                 ??_EUSART_Write 00A8  
                      __end_of_TMR2_Initialize 1FC5                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 00AA                       _TMR2_SetInterruptHandler 1EEE  
                                       ??_main 00D8                  __end_ofi1_GenericQueue_IsFull 1FEC  
                          __end_of_Log_Message 1195                                ?_USBDeviceTasks 0070  
                     ?_PS2Keyboard_SendCommand 0070                  GenericQueue_Init@element_size 00AA  
                                  ?_USBSuspend 0070                        _IOCAF4_InterruptHandler 016D  
                              i1_USBDeviceInit 0DFE                       _USBHIDCBSetReportHandler 1F68  
                       __end_of_WDT_Initialize 1E9F      __end_of_EUSART_DefaultFramingErrorHandler 0003  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 0002                        __end_of_USBDeviceAttach 112A  
                   _EUSART_OverrunErrorHandler 0140                                         _ACTCON 039B  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                       __end_of_SysTimeInterrupt 1F08  
                                       i1l1093 0533                                         i1l1088 052A  
                                       i1l1282 114C                                         i1l4002 1744  
                                       i1l4014 1765                                         i1l4022 177B  
                                       i1l4024 177F                                         i1l4032 1795  
                                       i1l4114 09B4                                         i1l4300 02D5  
                                       i1l4204 163E                                         i1l4044 10A1  
                                       i1l4132 09D3                                         i1l4062 0A3A  
                                       i1l4302 02DD                                         i1l4214 1657  
                                       i1l4232 01E6                                         i1l4234 01E8  
                                       i1l4162 0B07                                         i1l4154 0A06  
                                       i1l4340 14C1                                         i1l4316 1146  
                                       i1l4260 0247                                         i1l4350 14D3  
                                       i1l4270 0261                                         i1l4262 0251  
                                       i1l4254 0233                                         i1l4182 0B64  
                                       i1l4174 0B40                                         i1l4166 0B11  
                                       i1l4510 08FE                                         i1l4094 17CB  
                                       i1l4336 14BA                                         i1l6032 1F0E  
                                       i1l4272 0268                                         i1l4248 0215  
                                       i1l4184 0B67                                         i1l4176 0B43  
                                       i1l4520 0912                                         i1l4408 0DC8  
                                       i1l4416 0DD1                                         i1l5144 11FB  
                                       i1l4362 14F0                                         i1l4354 14DF  
                                       i1l4506 08F8                                         i1l4098 17DE  
                                       i1l5146 1202                                         i1l5402 0E3D  
                                       i1l4348 14C7                                         i1l4460 0FBF  
                                       i1l3820 14A6                                         i1l4276 0273  
                                       i1l4188 0B6A                                         i1l4508 08FB  
                                       i1l4524 091F                                         i1l4358 14E8  
                                       i1l4374 1315                                         i1l4446 0F68  
                                       i1l3910 0C2D                                         i1l3902 0C17  
                                       i1l4286 029C                                         i1l4390 0D85  
                                       i1l5510 0733                                         i1l4720 0BEF  
                                       i1l4712 0BD0                                         i1l4472 0FF9  
                                       i1l4448 0F7E                                         i1l3832 1252  
                                       i1l3920 0C47                                         i1l3904 0C22  
                                       i1l6240 1451                                         i1l4296 02B6  
                                       i1l4288 02A1                                         i1l5176 12BE  
                                       i1l5424 0E53                                         i1l5520 0747  
                                       i1l5504 071F                                         i1l5602 13F7  
                                       i1l4458 0FB3                                         i1l3818 149E  
                                       i1l3930 0C5B                                         i1l6242 146B  
                                       i1l4386 0D81                                         i1l5178 12C0  
                                       i1l6244 05DD                                         i1l4708 0BC0  
                                       i1l3828 124B                                         i1l3860 0C8C  
                                       i1l3852 0C7C                                         i1l3916 0C39  
                                       i1l3908 0C2A                                         i1l5196 1574  
                                       i1l4718 0BEE                                         i1l4670 1401  
                                       i1l3870 0CD3                                         i1l3926 0C53  
                                       i1l4494 08E8                                         i1l5198 1577  
                                       i1l5390 0E20                                         i1l5374 0E09  
                                       i1l5534 0762                                         i1l5526 074E  
                                       i1l3872 0CEB                                         i1l3944 15FF  
                                       i1l4496 08EB                                         i1l5560 079F  
                                       i1l5544 076F                                         i1l4682 1432  
                                       i1l3890 0BFF                                         i1l4498 08EE  
                                       i1l5562 07AE                                         i1l5554 0786  
                                       i1l5900 0597                                         i1l3972 1440  
                                       i1l3980 1449                                         i1l5484 0703  
                                       i1l5476 06F6                                         i1l3974 1443  
                                       i1l5592 13D7                                         i1l5912 05B3  
                                       i1l4696 0B92                                         i1l3896 0C0B  
                                       i1l3976 1446                                         i1l3968 1435  
                                       i1l5922 05CD                                         i1l4698 0B95  
                                       i1l5498 0719                                         i1l5916 05BA  
                                       i1l5908 05AB                                         i1l5932 05D3  
                                       i1l4948 1F58                                         i1l5598 13E7  
                                       i1l5926 05D0                                         i1l5934 05EB  
                                       i1l5870 052C                                         i1l5880 0567  
                                       i1l5944 1F4B                                         i1l5882 056B  
                                       i1l5874 0535                                         i1l5884 056F  
                                       i1l5876 053B                                         u311_25 17D5  
                                       i1l5886 0571                                         i1l5878 0544  
                   __end_of_EUSART_is_tx_ready 1EB6                                         u342_20 1FE4  
                                       u343_20 1FE5                                         u351_25 14CA  
                                       u353_25 14D9                                         u345_25 114D  
                                       u354_25 14E0                                         u346_25 1152  
                                       u282_25 1477                                         u283_25 147D  
                                       u284_25 1485                                         u365_25 0F5C  
                                       u456_25 1545                                         u297_25 15F4  
                                       u570_20 051D                                         _OSCCON 0099  
                                       u643_27 1133                                         u492_25 0E23  
                                       _PLLRDY 04D6                                         u576_24 057E  
                                       u568_24 0516                                         u576_25 057D  
                                       u568_25 0515                                         u569_20 051C  
                                  i1memcpy@tmp 0054                                         u578_20 05A6  
                                       u579_20 05A7                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                 i1USBTransferOnePacket@handle 0079                __end_of_APP_KeyboardUpdateState 01D2  
                            _shortPacketStatus 0160                               _APP_KeyboardInit 15C9  
                              USBDeviceTasks@i 0060                    USBStdFeatureReqHandler@pUEP 0058  
                     USBTransferOnePacket@data 00A9                     USBCtrlTrfInHandler@lastDTS 0077  
                              ??_USBDeviceInit 00A8                                         ___bmul 1F92  
                              _keyboardIsBreak 014D                                         ___wmul 115F  
                                    ??___awmod 00AC                                _keyboardCommand 014C  
                            _USBEnableEndpoint 1243                            _EUSART_Transmit_ISR 1205  
                                       _memcmp 1389                                         _memcpy 1333  
                 i1PS2Keyboard_SendCommand@cmd 0070                                         _memset 10B4  
                              ___awmod@divisor 00A8                                         _timeMs 0128  
                                    ??_hex2str 00A8                                ___awmod@counter 00AD  
                           ?_USBEnableEndpoint 0077                              __end_ofi1___awmod 14F5  
                                 Log_Message@i 00AD                      ??_PS2USB_ScanCodeToUSBHID 00A8  
                              ?_WDT_Initialize 0070                                    _OldSOFCount 0134  
                          ??_USBEnableEndpoint 0078                             APP_KeyboardTasks@i 00D7  
                      __end_of_TMR2_StartTimer 1EA2       TMR2_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF5_SetInterruptHandler@InterruptHandler 00A8     IOCAF4_SetInterruptHandler@InterruptHandler 00A8  
                             ?_PIN_MANAGER_IOC 0070                                    _CtrlTrfData 0048  
                                 ??_IOCAF4_ISR 007E                                   ??_IOCAF5_ISR 0074  
                         ?_EUSART_Transmit_ISR 0070             USBHIDCBSetIdleRateHandler@reportID 0073  
                         _controlTransferState 006A                  PS2Keyboard_ClockInterrupt@bit 007D  
                            _SYSTEM_Initialize 1089                        __end_of__initialization 0083  
                   i1USBTransferOnePacket@data 0071                        ?i1_GenericQueue_Enqueue 0055  
                       ??_GenericQueue_Dequeue 00C3                         ??_GenericQueue_IsEmpty 00AA  
                       ?_GenericQueue_Contains 00BE                             ?_SYSTEM_Initialize 0070  
                       ??_GenericQueue_Enqueue 00C4                       GenericQueue_Enqueue@item 00C2  
         __end_of_EUSART_SetTxInterruptHandler 1EEE                   _EUSART_SetTxInterruptHandler 1EE6  
                          ___bmul@multiplicand 00A8                        i1GenericQueue_Enqueue@q 0055  
                               __pcstackCOMMON 0070                     ??_GenericQueue_CopyToArray 00C3  
                    __end_of_USBEnableEndpoint 1263                                  __end_of_sd000 18C6  
                                __end_of_sd001 1873                                  __end_of_sd002 18BC  
                                 __pidataBANK3 1EA2                            ??_SYSTEM_Initialize 00B0  
                                  _Log_Message 117A                                      ?_TMR2_ISR 0070  
                              _active_protocol 0169                __end_of_PS2Keyboard_SendCommand 11CC  
       __end_of_IOCAF4_DefaultInterruptHandler 0004                 _IOCAF4_DefaultInterruptHandler 0003  
                      __end_ofi1_USBDeviceInit 0EA1                    __end_of_USBCtrlTrfInHandler 0BF2  
                             ?_TMR2_Initialize 0070                              ?_PS2Keyboard_Init 0070  
                 ?_Log_UtilityConvertByteToHex 00AC                             __end_of_IOCAF4_ISR 1F4E  
                           __end_of_IOCAF5_ISR 1F5B                                      ?i1___wmul 0070  
                  __end_ofi1_GenericQueue_Init 1283                             ??_PS2Keyboard_Init 00AC  
                               _OPTION_REGbits 0095                                      ?i1_memcpy 0076  
                                    ?i1_memset 0070                           _eusartRxStatusBuffer 01A8  
                  ?_IOCAF5_SetInterruptHandler 00A8                ??_EUSART_SetOverrunErrorHandler 00AA  
                     ??_USBCtrlTrfSetupHandler 005D                        _USBTicksSinceSuspendEnd 0154  
                   ?i1_PS2Keyboard_SendCommand 0070                i1GenericQueue_Init@element_size 0072  
                                _keyboardState 0153                               ?_USBDeviceAttach 0070  
                    __end_of_SYSTEM_Initialize 109E                          ??_EUSART_Transmit_ISR 0070  
                       _USBStdGetStatusHandler 1619                     i1GenericQueue_Enqueue@item 0057  
               __end_ofi1_GenericQueue_Enqueue 0872                                     __pbssBANK0 0061  
                                   __pbssBANK1 00E9                                     __pbssBANK2 0121  
                                   __pbssBANK3 01A0                           __end_of_EUSART_Write 12E8  
             ??_IOCAF5_DefaultInterruptHandler 0070                ?_IOCAF5_DefaultInterruptHandler 0070  
                                  _pBDTEntryIn 0061                        _IOCAF5_InterruptHandler 016B  
                          _keyboardCommandBits 014B               __end_of_USBCtrlEPServiceComplete 0DFE  
                          _keyboardCommandOnes 014A               PS2Keyboard_ClockInterrupt@bitPos 007C  
           Log_UtilityConvertByteToHex@bufSize 00AD                                     __pmaintext 0A8A  
            APP_KeyboardUpdateState@usbHidCode 00CC         APP_KeyboardUpdateState@usbHidCode_2934 00CE  
       APP_KeyboardUpdateState@usbHidCode_2943 00CF         APP_KeyboardUpdateState@usbHidCode_2935 00CD  
                         USBCtrlTrfRxService@i 0078                 Log_UtilityConvertByteToHex@buf 00AC  
                                      ?___bmul 00A8                  ?_EUSART_SetTxInterruptHandler 00A8  
             _EUSART_TxDefaultInterruptHandler 0148                                        ?___wmul 00AF  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                      ?_memcmp 00B5                                        ?_memcpy 00B5  
                                      _BAUDCON 019F                                        ?_memset 00A8  
                                   _device_dsc 189C                               _USBCtrlEPService 153A  
                 ??_EUSART_DefaultErrorHandler 0071                                     _ep_data_in 013C  
                                   ??i1___wmul 0074                    __end_of_USBCtrlTrfRxService 1000  
                           _USBCheckStdRequest 08DA                                  _eusartRxCount 0162  
                            _configDescriptor1 1873                  ??_Log_UtilityConvertByteToHex 00AE  
                                   ??i1_memcpy 007C                                     ??i1_memset 0074  
                                 _ps2ExtUsbMap 0402         APP_KeyboardTasks@TimeDeltaMilliseconds 00D5  
                  __end_of_USBCtrlTrfTxService 1799                            _USBStdSetCfgHandler 09AC  
                  ?_USBHIDCBSetIdleRateHandler 0070                               main@hndlScanCode 00E5  
                                      _OSCTUNE 0098                  Log_UtilityConvertByteToHex@d0 00AF  
                Log_UtilityConvertByteToHex@d1 00B1                       ??_EUSART_SetErrorHandler 00AA  
                          ?_USBCheckStdRequest 0070                               ?_TMR2_StartTimer 0070  
                                      _UIEbits 0E92              __end_ofi1_PS2Keyboard_SendCommand 1144  
                                      _UIRbits 0E90                          GenericQueue_Dequeue@q 00C0  
                  APP_KeyboardUpdateState@leds 00CB                                   i1memset@dest 0075  
                     ??i1_USBTransferOnePacket 0074                          GenericQueue_IsEmpty@q 00A8  
                            __end_of_ps2UsbMap 1084                ??_USBIncrement1msInternalTimers 0070  
                         ?_USBStdSetCfgHandler 0070                              _APP_KeyboardTasks 02F2  
                   ??_TMR2_SetInterruptHandler 00AA                              __end_of_hid_rpt01 183F  
                           Log_Message@bufSize 00AA                           ??_USBCheckStdRequest 007E  
                           ?_APP_KeyboardTasks 0070                                        ___awmod 14F5  
                        GenericQueue_Enqueue@q 00C0                           i1GenericQueue_Init@q 0070  
                             ??_USBDeviceTasks 005F                     ??_USBHIDCBSetReportHandler 0070  
                            ??_USBStallHandler 0070                               _keyboardIdleRate 0138  
                             ?i1_USBDeviceInit 0070                      __end_of_configDescriptor1 189C  
                             _keyboardIsExtend 014E                                        _hex2str 1FA3  
                                      __ptext1 1F1E                                        __ptext2 1E9F  
                                      __ptext3 1089                                        __ptext4 1E9C  
                                      __ptext5 0EA1                                        __ptext6 1111  
                                      __ptext7 1FB4                                        __ptext8 1EEE  
                                      __ptext9 1359                                        _inPipes 00E9  
                  _USBDeferOUTDataStagePackets 0155                            ??_APP_KeyboardTasks 00D1  
                        _OSCILLATOR_Initialize 1F75                                   ??_USBSuspend 007D  
                                    _T2CONbits 001C                               _keyboardScanCode 0166  
                             ___awmod@dividend 00AA                       ??_PIN_MANAGER_Initialize 00AA  
                                    _IOCAFbits 0393                       __end_of_APP_KeyboardInit 1619  
                                    _IOCANbits 0392                                      _IOCAPbits 0391  
                           __end_of_USB_CD_Ptr 18C8                                        clrloop0 1F36  
                     _SysTime_GetCurrentTimeMs 1EF6                           end_of_initialization 0083  
                  __end_of_GenericQueue_IsFull 2000                             __end_of_USB_SD_Ptr 18C2  
                                      memcmp@l 00BB                                        memcmp@n 00B8  
                                      memcmp@r 00BD                              ?_SysTimeInterrupt 0070  
        __end_of_EUSART_SetOverrunErrorHandler 1EDE                  _EUSART_SetOverrunErrorHandler 1ED6  
                                      memcpy@d 00BB                                        memcpy@n 00B9  
                                      memcpy@s 00BD                            _pBDTEntryEP0OutNext 0067  
                  __end_of_GenericQueue_Remove 06EA                                        memset@c 00A8  
                                      memset@n 00AA                                        memset@p 00AD  
                              _USB1msTickCount 01C0                        _PS2Keyboard_GetScanCode 11CC  
                     ?_USBStdFeatureReqHandler 0070                             ??_SysTimeInterrupt 0070  
                    __end_of_APP_KeyboardTasks 0402                              _EUSART_Initialize 07BD  
                        ??_USBStdSetCfgHandler 007D                                     hex2str@val 00A8  
                           ?_EUSART_Initialize 0070                             __end_of_USBSuspend 1111  
                      _USBCtrlEPAllowDataStage 1799                                      _RCSTAbits 019D  
                           _EUSART_is_tx_ready 1EAF                                     _prevTimeMs 012C  
                     _USBCtrlEPServiceComplete 0D70                          i1___wmul@multiplicand 0072  
                   _USBStatusStageEnabledFlag1 0158                     _USBStatusStageEnabledFlag2 0157  
                          ??_EUSART_Initialize 00AA                               ??_WDT_Initialize 00A8  
               ??_EUSART_SetTxInterruptHandler 00AA                             USBEnableEndpoint@p 007A  
                                    _PORTAbits 000C                            ?_EUSART_is_tx_ready 0070  
                        i1_GenericQueue_IsFull 1FD8                                      _TRISAbits 008C  
                           _BothEP0OutUOWNsSet 015B                      USBStdSetCfgHandler@i_2097 0058  
                                    i1___awmod 14B0                   ??_IOCAF4_SetInterruptHandler 00AA  
                    USBConfigureEndpoint@EPNum 0075                              _GenericQueue_Init 1283  
                   ?_USBCtrlEPAllowStatusStage 0070                        ??_GenericQueue_Contains 00C1  
          USER_USB_CALLBACK_EVENT_HANDLER@size 0054                                      _USTATcopy 006D  
                           ?_GenericQueue_Init 00A8                      __end_of_EUSART_Initialize 07FE  
                     i1USBTransferOnePacket@ep 0078                   __end_of_USBTransferOnePacket 0D70  
                         ??_EUSART_is_tx_ready 00A8                            ??_GenericQueue_Init 00AC  
                        i1USBDeviceInit@i_1369 0076                         _USBCtrlTrfSetupHandler 1581  
                                 ?_Log_Message 00AA           __end_of_TMR2_DefaultInterruptHandler 07FF  
                 _TMR2_DefaultInterruptHandler 07FE                                 __end_of___bmul 1FA3  
                        __end_of_USBDeviceInit 0F4D          __end_of_USBIncrement1msInternalTimers 10E1  
                _USBIncrement1msInternalTimers 10CA             __end_of_EUSART_DefaultErrorHandler 1E99  
                   _EUSART_DefaultErrorHandler 1E96                                      i1memcpy@d 0050  
                                    i1memcpy@n 007A                                      i1memcpy@s 0052  
                               __end_of___wmul 117A                                      i1memset@c 0070  
                                    i1memset@n 0072                                      i1memset@p 0076  
                                 _EUSART_Write 12C5                                 __end_of_memcmp 13C0  
                               __end_of_memcpy 1359                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_memset 10CA                     ?_USBHIDCBSetReportComplete 0070  
                            _USBBusIsSuspended 015D                            start_initialization 003F  
                      _APP_KeyboardUpdateState 0087                        ?_USBStdGetStatusHandler 0070  
                USBCtrlTrfRxService@byteToRead 0079                      __end_of_GenericQueue_Init 12A3  
                                   ?i1___awmod 0070                                 _oldInputReport 01A0  
 EUSART_SetRxInterruptHandler@interruptHandler 00A8   EUSART_SetTxInterruptHandler@interruptHandler 00A8  
                  ??i1_PS2Keyboard_SendCommand 0070                   __end_of_USBConfigureEndpoint 14B0  
              __end_of_USBStdFeatureReqHandler 02F2                      ??_PS2Keyboard_GetScanCode 00C7  
                 ??_PS2Keyboard_GetLastCommand 00A8              __end_of_USBCtrlEPAllowStatusStage 0A8A  
                     __end_of_USBCtrlEPService 1581                                  ?_SysTime_Init 0070  
                    ??_USBCtrlEPAllowDataStage 0073                                 USBDeviceInit@i 00AF  
                               USBDeviceInit@p 00AC                 ?_EUSART_SetOverrunErrorHandler 00A8  
                       _pBDTEntryEP0OutCurrent 006B                        USBTransferOnePacket@dir 00A8  
                      USBTransferOnePacket@len 00AB                     _EUSART_FramingErrorHandler 0142  
                                     ??___bmul 00A9                                       ??___wmul 00B3  
                       _EUSART_SetErrorHandler 1EC6                            _USBStdGetDscHandler 0AFE  
                                  __pdataBANK3 01C7                             i1___awmod@dividend 0072  
                                     ??_memcmp 00BA                                       ??_memcpy 00BB  
                                     ??_memset 00AC                  ?_TMR2_DefaultInterruptHandler 0070  
                     ?_PS2USB_ScanCodeToUSBHID 0070                                     memset@dest 00AE  
              PS2Keyboard_GetScanCode@scanCode 00C7                         i1_USBTransferOnePacket 0C70  
       __end_of_IOCAF5_DefaultInterruptHandler 0800                 _IOCAF5_DefaultInterruptHandler 07FF  
                       ?i1_GenericQueue_IsFull 0070                         i1GenericQueue_IsFull@q 0070  
                       _USBActiveConfiguration 006F                 __end_of_USBStdGetStatusHandler 166E  
                    i1USBTransferOnePacket@dir 0070                                    __pbssBIGRAM 232C  
                  __end_of_EUSART_Transmit_ISR 1224                      i1USBTransferOnePacket@len 0073  
            __end_of_USBHIDCBSetReportComplete 1EAF                                      ___latbits 0002  
                                __pcstackBANK0 0050                                  __pcstackBANK1 00A8  
                    ?_GenericQueue_CopyToArray 00C0                           ?_USBStdGetDscHandler 0070  
                      _PS2Keyboard_SendCommand 11B0      __end_ofi1_APP_KeyboardProcessOutputReport 080A  
      __end_of_APP_KeyboardProcessOutputReport 1F1E            ??i1_APP_KeyboardProcessOutputReport 0071  
           ?i1_APP_KeyboardProcessOutputReport 0070               ?_APP_KeyboardProcessOutputReport 0070  
            ??_APP_KeyboardProcessOutputReport 00A9              i1_APP_KeyboardProcessOutputReport 0800  
              _APP_KeyboardProcessOutputReport 1F13                     __end_of_EUSART_Receive_ISR 13FA  
                                 _keyboardData 014F                     __end_of_USBWakeFromSuspend 1205  
             _EUSART_RxDefaultInterruptHandler 0146                                 ??_SysTime_Init 00AA  
                              _USBStallHandler 12A3                                   _pBDTEntryOut 0130  
                                    __pnvBANK2 016B                           _keyboardCommandCount 0069  
                 __end_of_EUSART_RxDataHandler 10F9                                      _main$2658 00E0  
                                    _main$2659 00E2                         _PIN_MANAGER_Initialize 1359  
                    i1_PS2Keyboard_SendCommand 112A                                      __ptext100 0002  
                                    __ptext101 1E96                                      __ptext102 10E1  
              Log_UtilityConvertByteToHex@byte 00B0                                       ?___awmod 00A8  
                                    _ps2UsbMap 1000                   ??_PS2Keyboard_ClockInterrupt 005C  
                           GenericQueue_Init@q 00A8                                   _eusartRxHead 00EE  
                                 _eusartTxHead 0165                                      _hid_rpt01 1800  
                                 _eusartRxTail 0163                                   _eusartTxTail 0164  
                                    _idle_rate 016A                   ??_INTERRUPT_InterruptManager 007E  
                        _keyboardScanCodeValid 0150                                       ?_hex2str 0070  
                        _keyboardScanCodeQueue 2391                      ??_APP_KeyboardUpdateState 00C9  
                      _eusartTxBufferRemaining 00EF                     ??_SysTime_GetCurrentTimeMs 0074  
                         _USBTransferOnePacket 0CF0                           GenericQueue_IsFull@q 00A8  
           __end_of_IOCAF4_SetInterruptHandler 1EBE                     _IOCAF4_SetInterruptHandler 1EB6  
                 __end_of_USBCtrlTrfOutHandler 1434                              ?_APP_KeyboardInit 0070  
                                  ??i1___awmod 0074                          ??_USBStdGetDscHandler 0070  
                                  _ep_data_out 013A                  USBConfigureEndpoint@direction 0070  
                           ??_APP_KeyboardInit 007D                                 _eusartRxBuffer 01B0  
                               _eusartTxBuffer 01B8                           GenericQueue_Remove@i 00C7  
                         GenericQueue_Remove@j 00C8                           GenericQueue_Remove@q 00C0  
                               ___wmul@product 00B3                                       _LATAbits 010C  
       EUSART_SetErrorHandler@interruptHandler 00A8                     __end_of_USBCheckHIDRequest 0C70  
                   ??_USBCtrlEPServiceComplete 0077                                      clear_ram0 1F35  
                                     _PIE1bits 0091                                       _PIE2bits 0092  
                            _eusartRxLastError 0161                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 00AA                                       _PIR2bits 0012  
              __end_of_PS2USB_ScanCodeToUSBHID 1243                                       _UEP0bits 0E98  
                                    main@F3452 01C7                                      main@F3448 01C4  
                   _USBDeferINDataStagePackets 0156      __end_of_EUSART_DefaultOverrunErrorHandler 1089  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 1085                                       _TMR2_ISR 1F29  
                                     _UCONbits 0E8E                              ??_PIN_MANAGER_IOC 007E  
                         _USBConfigureEndpoint 1471            __end_of_Log_UtilityConvertByteToHex 130D  
                  _Log_UtilityConvertByteToHex 12E8                        GenericQueue_Remove@item 00C2  
                    APP_KeyboardTasks@scanCode 00D3                              ___wmul@multiplier 00AF  
                        ?_USBTransferOnePacket 00A8                                       i1___wmul 1144  
                              main@scanCodeStr 00DA                                       i1_memcpy 130D  
                                     i1_memset 109E                       ??i1_GenericQueue_Enqueue 0059  
                                 _RemoteWakeup 015E                 ??_TMR2_DefaultInterruptHandler 0070  
                    ?_TMR2_SetInterruptHandler 00A8                     ?_PS2Keyboard_DataInterrupt 0070  
                    ??_PS2Keyboard_SendCommand 00A8                        __end_of_USBStallHandler 12C5  
           __end_of_PS2Keyboard_GetLastCommand 1E9C                     _PS2Keyboard_GetLastCommand 1E99  
                    ?_USBHIDCBSetReportHandler 0070                               _PS2Keyboard_Init 1195  
                  ??_USBCtrlEPAllowStatusStage 0070                    __end_of_USBStdSetCfgHandler 0A18  
                            ??_TMR2_Initialize 00AA                  __end_of_GenericQueue_Contains 16D0  
                           __end_of_device_dsc 18AE                         GenericQueue_Contains@i 00C5  
                       GenericQueue_Contains@q 00BE                        ?_USBCtrlTrfSetupHandler 0070  
                      USBStdGetStatusHandler@p 0070                                      memcpy@tmp 00BF  
                       USBTransferOnePacket@ep 00B0                                       _SetupPkt 0040  
                            i1___awmod@divisor 0070                        ??_OSCILLATOR_Initialize 00A8  
                          _EUSART_ErrorHandler 013E                          ?_USBConfigureEndpoint 0070  
                            i1___awmod@counter 0075                              ??_USBDeviceAttach 00A8  
                  ?_EUSART_DefaultErrorHandler 0070                           __end_of_SysTime_Init 1F29  
                  ??_USBHIDCBSetReportComplete 0071                           _EUSART_RxDataHandler 10E1  
                                     __ptext10 1F75                                       __ptext11 07BD  
                                     __ptext20 1283                                       __ptext12 1EE6  
                                     __ptext21 11CC                                       __ptext13 1EDE  
                                     __ptext30 0CF0                                       __ptext22 0943  
                                     __ptext14 1ED6                                       __ptext31 16D0  
                                     __ptext23 12E8                                       __ptext15 1ECE  
                                     __ptext40 166E                                       __ptext32 1F92  
                                     __ptext24 1FA3                                       __ptext16 1EC6  
                                     __ptext41 1389                                       __ptext33 0087  
                                     __ptext25 117A                                       __ptext17 1195  
                                     __ptext50 11E8                                       __ptext42 115F  
                                     __ptext34 1224                                       __ptext26 1EAF  
                                     __ptext18 1EBE                                       __ptext51 10F9  
                                     __ptext43 14F5                                       __ptext35 1E99  
                                     __ptext27 12C5                                       __ptext19 1EB6  
                                     __ptext60 109E                                       __ptext52 12A3  
                                     __ptext44 1FC5                                       __ptext36 05F6  
                                     __ptext28 02F2                                       __ptext61 1619  
                                     __ptext53 10CA                                       __ptext45 1F13  
                                     __ptext37 0872                                       __ptext29 10B4  
                                     __ptext70 1263                                       __ptext62 0AFE  
                                     __ptext54 153A                                       __ptext46 11B0  
                                     __ptext38 1333                                       __ptext71 1243  
                                     __ptext63 01D2                                       __ptext55 1581  
                                     __ptext39 1FEC                                       __ptext80 1732  
                                     __ptext72 1471                                       __ptext64 1434  
                                     __ptext56 0D70                                       __ptext48 06EA  
                                     __ptext81 1F29                                       __ptext73 13FA  
                                     __ptext65 0BF2                                       __ptext57 1799  
                                     __ptext49 0DFE                                       __ptext90 0501  
                                     __ptext82 1EFF                                       __ptext74 0F4D  
                                     __ptext66 1F68                                       __ptext58 08DA  
                                     __ptext91 080A                                       __ptext83 07FE  
                                     __ptext75 0A18                                       __ptext67 1F5B  
                                     __ptext59 09AC                                       __ptext92 130D  
                                     __ptext84 1F08                                       __ptext76 0B77  
                                     __ptext68 15C9                                       __ptext93 1144  
                                     __ptext85 1F4E                                       __ptext77 1EA8  
                                     __ptext69 0C70                                       __ptext94 14B0  
                                     __ptext86 07FF                                       __ptext78 0800  
                                     __ptext95 1FD8                                       __ptext87 1F82  
                                     __ptext79 112A                                       __ptext96 1EF6  
                                     __ptext88 1F41                                       __ptext97 1205  
                                     __ptext89 0003                                       __ptext98 13C0  
                                     __ptext99 1085                   ??_IOCAF5_SetInterruptHandler 00AA  
            __end_of_PS2Keyboard_DataInterrupt 1F92                              _keyboardIndexData 0152  
                                   _IOCAF4_ISR 1F41                  GenericQueue_CopyToArray@array 00C2  
                                   _IOCAF5_ISR 1F4E                  GenericQueue_CopyToArray@count 00C8  
                GenericQueue_CopyToArray@index 00C7                                       _keyboard 232C  
               __end_of_USBCtrlTrfSetupHandler 15C9                              ?_USBCtrlEPService 0070  
                           ??_USBCtrlEPService 005E                        ?_EUSART_SetErrorHandler 00A8  
                          _USBCtrlTrfInHandler 0B77  EUSART_SetOverrunErrorHandler@interruptHandler 00A8  
                                  _inputReport 00A0             __end_of_PS2Keyboard_ClockInterrupt 05F6  
                   _PS2Keyboard_ClockInterrupt 0501                              _keyboardOnesCount 0151  
                                     _outPipes 0121                           _USBCtrlTrfOutHandler 13FA  
                                     int$flags 007E                            i1_GenericQueue_Init 1263  
                      ?i1_USBTransferOnePacket 0070               __end_of_GenericQueue_CopyToArray 1732  
                    _USBCtrlEPAllowStatusStage 0A18                              ??_TMR2_StartTimer 00A8  
           __end_of_INTERRUPT_InterruptManager 003D                     _INTERRUPT_InterruptManager 0004  
                      ??i1_GenericQueue_IsFull 0072          __end_of_EUSART_SetFramingErrorHandler 1ED6  
                _EUSART_SetFramingErrorHandler 1ECE                         ??_USBTransferOnePacket 00AC  
             __end_of_SysTime_GetCurrentTimeMs 1EFF                   __end_of_GenericQueue_Dequeue 09AC  
                 __end_of_GenericQueue_IsEmpty 1FD8                      _USBDeferStatusStagePacket 0159  
                             i1USBDeviceInit@i 0077                               i1USBDeviceInit@p 0074  
                                   _INTCONbits 000B                   __end_of_GenericQueue_Enqueue 08DA  
                         ?_USBCtrlTrfInHandler 0070                                       memcmp@vl 00B5  
                                     memcmp@vr 00B7                          ?_EUSART_RxDataHandler 0070  
                                     memcpy@d1 00B5                                       memcpy@s1 00B7  
                USBCtrlTrfTxService@byteToSend 0072                                 Log_Message@buf 00AC  
                               __pstringtext10 18C2                   ??_USBHIDCBSetIdleRateHandler 0071  
                             ?_USBStallHandler 0070                           ?i1_GenericQueue_Init 0070  
                     USBStdFeatureReqHandler@p 005B                                       intlevel1 0000  
      __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1471               ?_USER_USB_CALLBACK_EVENT_HANDLER 0050  
            ??_USER_USB_CALLBACK_EVENT_HANDLER 007D                _USER_USB_CALLBACK_EVENT_HANDLER 1434  
                            ??i1_USBDeviceInit 0070                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 1ECE                      _USBHIDCBSetReportComplete 1EA8  
         __end_of_EUSART_SetRxInterruptHandler 1EE6                   _EUSART_SetRxInterruptHandler 1EDE  
                    GenericQueue_CopyToArray@q 00C0                      GenericQueue_Contains@item 00C0  
               __end_ofi1_USBTransferOnePacket 0CF0                         ??_USBConfigureEndpoint 0071  
                        ?_USBCtrlTrfOutHandler 0070                             _EUSART_Receive_ISR 13C0  
                          _USBCtrlTrfRxService 0F4D  EUSART_SetFramingErrorHandler@interruptHandler 00A8  
                           _USBWakeFromSuspend 11E8                               _SysTimeInterrupt 1EFF  
                      _USBStdFeatureReqHandler 01D2                     PS2Keyboard_GetScanCode@ret 00C8  
                          _USBCtrlTrfTxService 1732                                  __pstringtext1 0402  
                                __pstringtext2 1000                                  __pstringtext3 18BC  
                                __pstringtext4 18C6                                  __pstringtext5 1800  
                                __pstringtext6 183F                                  __pstringtext7 1873  
                                __pstringtext8 189C                                  __pstringtext9 18AE  
                          ?_EUSART_Receive_ISR 0070                            ?_USBWakeFromSuspend 0070  
                        ??_USBCtrlTrfInHandler 0073                          _USBAlternateInterface 006E  
                     ?_PS2Keyboard_GetScanCode 0070                    ?_IOCAF4_SetInterruptHandler 00A8  
        USBHIDCBSetIdleRateHandler@newIdleRate 0070                            USBEnableEndpoint@ep 007C  
                              _endpoint_number 015C                          ??i1_GenericQueue_Init 0074  
                         ?_USBCtrlTrfRxService 0070                                    ?_IOCAF4_ISR 0070  
                                  ?_IOCAF5_ISR 0070                             EUSART_Write@txData 00A9  
               __end_of_PIN_MANAGER_Initialize 1389                       ?_USBCtrlEPAllowDataStage 0070  
                         ?_USBCtrlTrfTxService 0070                                     _SOFCounter 0065  
             ??_IOCAF4_DefaultInterruptHandler 0070                ?_IOCAF4_DefaultInterruptHandler 0070  
                 _USBStatusStageTimeoutCounter 015A                                _PIN_MANAGER_IOC 1F08  
                         ??_EUSART_Receive_ISR 0071                          _TMR2_InterruptHandler 0144  
                         ??_USBWakeFromSuspend 007D                     USBTransferOnePacket@handle 00B1  
   APP_KeyboardTasks@needToSendNewReportPacket 00D4                         i1_GenericQueue_Enqueue 080A  
                                   _USB_CD_Ptr 18C6  
