

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon May 20 23:41:38 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	16F1459
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	stringtext8,global,class=STRCODE,delta=2,noexec
    13                           	psect	stringtext9,global,class=STRCODE,delta=2,noexec
    14                           	psect	stringtext10,global,class=STRCODE,delta=2,noexec
    15                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    22                           	psect	clrtext,global,class=CODE,delta=2
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2
    46                           	psect	text20,local,class=CODE,merge=1,delta=2
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text42,local,class=CODE,merge=1,delta=2,group=1
    69                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
    70                           	psect	text44,local,class=CODE,merge=1,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	text57,local,class=CODE,merge=1,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	psect	text65,local,class=CODE,merge=1,delta=2
    92                           	psect	text66,local,class=CODE,merge=1,delta=2
    93                           	psect	text67,local,class=CODE,merge=1,delta=2
    94                           	psect	text68,local,class=CODE,merge=1,delta=2
    95                           	psect	text69,local,class=CODE,merge=1,delta=2
    96                           	psect	text70,local,class=CODE,merge=1,delta=2
    97                           	psect	text71,local,class=CODE,merge=1,delta=2
    98                           	psect	text72,local,class=CODE,merge=1,delta=2
    99                           	psect	text73,local,class=CODE,merge=1,delta=2
   100                           	psect	text74,local,class=CODE,merge=1,delta=2
   101                           	psect	text75,local,class=CODE,merge=1,delta=2
   102                           	psect	text76,local,class=CODE,merge=1,delta=2
   103                           	psect	text77,local,class=CODE,merge=1,delta=2
   104                           	psect	text78,local,class=CODE,merge=1,delta=2
   105                           	psect	text79,local,class=CODE,merge=1,delta=2
   106                           	psect	text80,local,class=CODE,merge=1,delta=2
   107                           	psect	text81,local,class=CODE,merge=1,delta=2
   108                           	psect	text82,local,class=CODE,merge=1,delta=2
   109                           	psect	text83,local,class=CODE,merge=1,delta=2
   110                           	psect	text84,local,class=CODE,merge=1,delta=2
   111                           	psect	text85,local,class=CODE,merge=1,delta=2
   112                           	psect	text86,local,class=CODE,merge=1,delta=2
   113                           	psect	text87,local,class=CODE,merge=1,delta=2
   114                           	psect	text88,local,class=CODE,merge=1,delta=2
   115                           	psect	text89,local,class=CODE,merge=1,delta=2
   116                           	psect	text90,local,class=CODE,merge=1,delta=2
   117                           	psect	text91,local,class=CODE,merge=1,delta=2
   118                           	psect	text92,local,class=CODE,merge=1,delta=2
   119                           	psect	text93,local,class=CODE,merge=1,delta=2
   120                           	psect	text94,local,class=CODE,merge=1,delta=2
   121                           	psect	text95,local,class=CODE,merge=1,delta=2
   122                           	psect	text96,local,class=CODE,merge=1,delta=2
   123                           	psect	text97,local,class=CODE,merge=1,delta=2
   124                           	psect	text98,local,class=CODE,merge=1,delta=2
   125                           	psect	text99,local,class=CODE,merge=1,delta=2
   126                           	psect	text100,local,class=CODE,merge=1,delta=2
   127                           	psect	text101,local,class=CODE,merge=1,delta=2
   128                           	psect	text102,local,class=CODE,merge=1,delta=2
   129                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   130                           	dabs	1,0x620,48
   131                           	dabs	1,0x5C1,47
   132                           	dabs	1,0x5A0,33
   133                           	dabs	1,0x52C,68
   134                           	dabs	1,0x20,32,_BDT
   135                           	dabs	1,0x48,8,_CtrlTrfData
   136                           	dabs	1,0x40,8,_SetupPkt
   137                           	dabs	1,0xA0,8,_inputReport
   138                           	dabs	1,0x120,1,_outputReport
   139                           	dabs	1,0x232C,0,_keyboard
   140                           	dabs	1,0x2391,0,_keyboardScanCodeQueue
   141                           	dabs	1,0x7E,2
   142     0000                     
   143                           ; Generated 07/09/2023 GMT
   144                           ; 
   145                           ; Copyright © 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution. Publication is not required when
   159                           ;        this file is used in an embedded application.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC16F1459 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177     0000                     	;# 
   178     0001                     	;# 
   179     0002                     	;# 
   180     0003                     	;# 
   181     0004                     	;# 
   182     0005                     	;# 
   183     0006                     	;# 
   184     0007                     	;# 
   185     0008                     	;# 
   186     0009                     	;# 
   187     000A                     	;# 
   188     000B                     	;# 
   189     000C                     	;# 
   190     000D                     	;# 
   191     000E                     	;# 
   192     0011                     	;# 
   193     0012                     	;# 
   194     0015                     	;# 
   195     0016                     	;# 
   196     0016                     	;# 
   197     0017                     	;# 
   198     0018                     	;# 
   199     0019                     	;# 
   200     001A                     	;# 
   201     001B                     	;# 
   202     001C                     	;# 
   203     008C                     	;# 
   204     008D                     	;# 
   205     008E                     	;# 
   206     0091                     	;# 
   207     0092                     	;# 
   208     0095                     	;# 
   209     0096                     	;# 
   210     0097                     	;# 
   211     0098                     	;# 
   212     0099                     	;# 
   213     009A                     	;# 
   214     009B                     	;# 
   215     009B                     	;# 
   216     009C                     	;# 
   217     009D                     	;# 
   218     009E                     	;# 
   219     009F                     	;# 
   220     010C                     	;# 
   221     010D                     	;# 
   222     010E                     	;# 
   223     0111                     	;# 
   224     0112                     	;# 
   225     0113                     	;# 
   226     0114                     	;# 
   227     0115                     	;# 
   228     0116                     	;# 
   229     0117                     	;# 
   230     0118                     	;# 
   231     0119                     	;# 
   232     011D                     	;# 
   233     018C                     	;# 
   234     018D                     	;# 
   235     018E                     	;# 
   236     0191                     	;# 
   237     0191                     	;# 
   238     0192                     	;# 
   239     0193                     	;# 
   240     0193                     	;# 
   241     0194                     	;# 
   242     0195                     	;# 
   243     0196                     	;# 
   244     0197                     	;# 
   245     0199                     	;# 
   246     019A                     	;# 
   247     019B                     	;# 
   248     019B                     	;# 
   249     019C                     	;# 
   250     019D                     	;# 
   251     019E                     	;# 
   252     019F                     	;# 
   253     020C                     	;# 
   254     020D                     	;# 
   255     0211                     	;# 
   256     0211                     	;# 
   257     0212                     	;# 
   258     0212                     	;# 
   259     0213                     	;# 
   260     0213                     	;# 
   261     0214                     	;# 
   262     0214                     	;# 
   263     0215                     	;# 
   264     0215                     	;# 
   265     0215                     	;# 
   266     0216                     	;# 
   267     0216                     	;# 
   268     0217                     	;# 
   269     0217                     	;# 
   270     0391                     	;# 
   271     0392                     	;# 
   272     0393                     	;# 
   273     0394                     	;# 
   274     0395                     	;# 
   275     0396                     	;# 
   276     039A                     	;# 
   277     039B                     	;# 
   278     0611                     	;# 
   279     0612                     	;# 
   280     0613                     	;# 
   281     0613                     	;# 
   282     0614                     	;# 
   283     0615                     	;# 
   284     0616                     	;# 
   285     0616                     	;# 
   286     0691                     	;# 
   287     0692                     	;# 
   288     0693                     	;# 
   289     0694                     	;# 
   290     0695                     	;# 
   291     0E8E                     	;# 
   292     0E8F                     	;# 
   293     0E90                     	;# 
   294     0E91                     	;# 
   295     0E92                     	;# 
   296     0E93                     	;# 
   297     0E94                     	;# 
   298     0E94                     	;# 
   299     0E95                     	;# 
   300     0E96                     	;# 
   301     0E97                     	;# 
   302     0E98                     	;# 
   303     0E99                     	;# 
   304     0E9A                     	;# 
   305     0E9B                     	;# 
   306     0E9C                     	;# 
   307     0E9D                     	;# 
   308     0E9E                     	;# 
   309     0E9F                     	;# 
   310     0FE4                     	;# 
   311     0FE5                     	;# 
   312     0FE6                     	;# 
   313     0FE7                     	;# 
   314     0FE8                     	;# 
   315     0FE9                     	;# 
   316     0FEA                     	;# 
   317     0FEB                     	;# 
   318     0FED                     	;# 
   319     0FEE                     	;# 
   320     0FEF                     	;# 
   321     0000                     	;# 
   322     0001                     	;# 
   323     0002                     	;# 
   324     0003                     	;# 
   325     0004                     	;# 
   326     0005                     	;# 
   327     0006                     	;# 
   328     0007                     	;# 
   329     0008                     	;# 
   330     0009                     	;# 
   331     000A                     	;# 
   332     000B                     	;# 
   333     000C                     	;# 
   334     000D                     	;# 
   335     000E                     	;# 
   336     0011                     	;# 
   337     0012                     	;# 
   338     0015                     	;# 
   339     0016                     	;# 
   340     0016                     	;# 
   341     0017                     	;# 
   342     0018                     	;# 
   343     0019                     	;# 
   344     001A                     	;# 
   345     001B                     	;# 
   346     001C                     	;# 
   347     008C                     	;# 
   348     008D                     	;# 
   349     008E                     	;# 
   350     0091                     	;# 
   351     0092                     	;# 
   352     0095                     	;# 
   353     0096                     	;# 
   354     0097                     	;# 
   355     0098                     	;# 
   356     0099                     	;# 
   357     009A                     	;# 
   358     009B                     	;# 
   359     009B                     	;# 
   360     009C                     	;# 
   361     009D                     	;# 
   362     009E                     	;# 
   363     009F                     	;# 
   364     010C                     	;# 
   365     010D                     	;# 
   366     010E                     	;# 
   367     0111                     	;# 
   368     0112                     	;# 
   369     0113                     	;# 
   370     0114                     	;# 
   371     0115                     	;# 
   372     0116                     	;# 
   373     0117                     	;# 
   374     0118                     	;# 
   375     0119                     	;# 
   376     011D                     	;# 
   377     018C                     	;# 
   378     018D                     	;# 
   379     018E                     	;# 
   380     0191                     	;# 
   381     0191                     	;# 
   382     0192                     	;# 
   383     0193                     	;# 
   384     0193                     	;# 
   385     0194                     	;# 
   386     0195                     	;# 
   387     0196                     	;# 
   388     0197                     	;# 
   389     0199                     	;# 
   390     019A                     	;# 
   391     019B                     	;# 
   392     019B                     	;# 
   393     019C                     	;# 
   394     019D                     	;# 
   395     019E                     	;# 
   396     019F                     	;# 
   397     020C                     	;# 
   398     020D                     	;# 
   399     0211                     	;# 
   400     0211                     	;# 
   401     0212                     	;# 
   402     0212                     	;# 
   403     0213                     	;# 
   404     0213                     	;# 
   405     0214                     	;# 
   406     0214                     	;# 
   407     0215                     	;# 
   408     0215                     	;# 
   409     0215                     	;# 
   410     0216                     	;# 
   411     0216                     	;# 
   412     0217                     	;# 
   413     0217                     	;# 
   414     0391                     	;# 
   415     0392                     	;# 
   416     0393                     	;# 
   417     0394                     	;# 
   418     0395                     	;# 
   419     0396                     	;# 
   420     039A                     	;# 
   421     039B                     	;# 
   422     0611                     	;# 
   423     0612                     	;# 
   424     0613                     	;# 
   425     0613                     	;# 
   426     0614                     	;# 
   427     0615                     	;# 
   428     0616                     	;# 
   429     0616                     	;# 
   430     0691                     	;# 
   431     0692                     	;# 
   432     0693                     	;# 
   433     0694                     	;# 
   434     0695                     	;# 
   435     0E8E                     	;# 
   436     0E8F                     	;# 
   437     0E90                     	;# 
   438     0E91                     	;# 
   439     0E92                     	;# 
   440     0E93                     	;# 
   441     0E94                     	;# 
   442     0E94                     	;# 
   443     0E95                     	;# 
   444     0E96                     	;# 
   445     0E97                     	;# 
   446     0E98                     	;# 
   447     0E99                     	;# 
   448     0E9A                     	;# 
   449     0E9B                     	;# 
   450     0E9C                     	;# 
   451     0E9D                     	;# 
   452     0E9E                     	;# 
   453     0E9F                     	;# 
   454     0FE4                     	;# 
   455     0FE5                     	;# 
   456     0FE6                     	;# 
   457     0FE7                     	;# 
   458     0FE8                     	;# 
   459     0FE9                     	;# 
   460     0FEA                     	;# 
   461     0FEB                     	;# 
   462     0FED                     	;# 
   463     0FEE                     	;# 
   464     0FEF                     	;# 
   465     0000                     	;# 
   466     0001                     	;# 
   467     0002                     	;# 
   468     0003                     	;# 
   469     0004                     	;# 
   470     0005                     	;# 
   471     0006                     	;# 
   472     0007                     	;# 
   473     0008                     	;# 
   474     0009                     	;# 
   475     000A                     	;# 
   476     000B                     	;# 
   477     000C                     	;# 
   478     000D                     	;# 
   479     000E                     	;# 
   480     0011                     	;# 
   481     0012                     	;# 
   482     0015                     	;# 
   483     0016                     	;# 
   484     0016                     	;# 
   485     0017                     	;# 
   486     0018                     	;# 
   487     0019                     	;# 
   488     001A                     	;# 
   489     001B                     	;# 
   490     001C                     	;# 
   491     008C                     	;# 
   492     008D                     	;# 
   493     008E                     	;# 
   494     0091                     	;# 
   495     0092                     	;# 
   496     0095                     	;# 
   497     0096                     	;# 
   498     0097                     	;# 
   499     0098                     	;# 
   500     0099                     	;# 
   501     009A                     	;# 
   502     009B                     	;# 
   503     009B                     	;# 
   504     009C                     	;# 
   505     009D                     	;# 
   506     009E                     	;# 
   507     009F                     	;# 
   508     010C                     	;# 
   509     010D                     	;# 
   510     010E                     	;# 
   511     0111                     	;# 
   512     0112                     	;# 
   513     0113                     	;# 
   514     0114                     	;# 
   515     0115                     	;# 
   516     0116                     	;# 
   517     0117                     	;# 
   518     0118                     	;# 
   519     0119                     	;# 
   520     011D                     	;# 
   521     018C                     	;# 
   522     018D                     	;# 
   523     018E                     	;# 
   524     0191                     	;# 
   525     0191                     	;# 
   526     0192                     	;# 
   527     0193                     	;# 
   528     0193                     	;# 
   529     0194                     	;# 
   530     0195                     	;# 
   531     0196                     	;# 
   532     0197                     	;# 
   533     0199                     	;# 
   534     019A                     	;# 
   535     019B                     	;# 
   536     019B                     	;# 
   537     019C                     	;# 
   538     019D                     	;# 
   539     019E                     	;# 
   540     019F                     	;# 
   541     020C                     	;# 
   542     020D                     	;# 
   543     0211                     	;# 
   544     0211                     	;# 
   545     0212                     	;# 
   546     0212                     	;# 
   547     0213                     	;# 
   548     0213                     	;# 
   549     0214                     	;# 
   550     0214                     	;# 
   551     0215                     	;# 
   552     0215                     	;# 
   553     0215                     	;# 
   554     0216                     	;# 
   555     0216                     	;# 
   556     0217                     	;# 
   557     0217                     	;# 
   558     0391                     	;# 
   559     0392                     	;# 
   560     0393                     	;# 
   561     0394                     	;# 
   562     0395                     	;# 
   563     0396                     	;# 
   564     039A                     	;# 
   565     039B                     	;# 
   566     0611                     	;# 
   567     0612                     	;# 
   568     0613                     	;# 
   569     0613                     	;# 
   570     0614                     	;# 
   571     0615                     	;# 
   572     0616                     	;# 
   573     0616                     	;# 
   574     0691                     	;# 
   575     0692                     	;# 
   576     0693                     	;# 
   577     0694                     	;# 
   578     0695                     	;# 
   579     0E8E                     	;# 
   580     0E8F                     	;# 
   581     0E90                     	;# 
   582     0E91                     	;# 
   583     0E92                     	;# 
   584     0E93                     	;# 
   585     0E94                     	;# 
   586     0E94                     	;# 
   587     0E95                     	;# 
   588     0E96                     	;# 
   589     0E97                     	;# 
   590     0E98                     	;# 
   591     0E99                     	;# 
   592     0E9A                     	;# 
   593     0E9B                     	;# 
   594     0E9C                     	;# 
   595     0E9D                     	;# 
   596     0E9E                     	;# 
   597     0E9F                     	;# 
   598     0FE4                     	;# 
   599     0FE5                     	;# 
   600     0FE6                     	;# 
   601     0FE7                     	;# 
   602     0FE8                     	;# 
   603     0FE9                     	;# 
   604     0FEA                     	;# 
   605     0FEB                     	;# 
   606     0FED                     	;# 
   607     0FEE                     	;# 
   608     0FEF                     	;# 
   609     0000                     	;# 
   610     0001                     	;# 
   611     0002                     	;# 
   612     0003                     	;# 
   613     0004                     	;# 
   614     0005                     	;# 
   615     0006                     	;# 
   616     0007                     	;# 
   617     0008                     	;# 
   618     0009                     	;# 
   619     000A                     	;# 
   620     000B                     	;# 
   621     000C                     	;# 
   622     000D                     	;# 
   623     000E                     	;# 
   624     0011                     	;# 
   625     0012                     	;# 
   626     0015                     	;# 
   627     0016                     	;# 
   628     0016                     	;# 
   629     0017                     	;# 
   630     0018                     	;# 
   631     0019                     	;# 
   632     001A                     	;# 
   633     001B                     	;# 
   634     001C                     	;# 
   635     008C                     	;# 
   636     008D                     	;# 
   637     008E                     	;# 
   638     0091                     	;# 
   639     0092                     	;# 
   640     0095                     	;# 
   641     0096                     	;# 
   642     0097                     	;# 
   643     0098                     	;# 
   644     0099                     	;# 
   645     009A                     	;# 
   646     009B                     	;# 
   647     009B                     	;# 
   648     009C                     	;# 
   649     009D                     	;# 
   650     009E                     	;# 
   651     009F                     	;# 
   652     010C                     	;# 
   653     010D                     	;# 
   654     010E                     	;# 
   655     0111                     	;# 
   656     0112                     	;# 
   657     0113                     	;# 
   658     0114                     	;# 
   659     0115                     	;# 
   660     0116                     	;# 
   661     0117                     	;# 
   662     0118                     	;# 
   663     0119                     	;# 
   664     011D                     	;# 
   665     018C                     	;# 
   666     018D                     	;# 
   667     018E                     	;# 
   668     0191                     	;# 
   669     0191                     	;# 
   670     0192                     	;# 
   671     0193                     	;# 
   672     0193                     	;# 
   673     0194                     	;# 
   674     0195                     	;# 
   675     0196                     	;# 
   676     0197                     	;# 
   677     0199                     	;# 
   678     019A                     	;# 
   679     019B                     	;# 
   680     019B                     	;# 
   681     019C                     	;# 
   682     019D                     	;# 
   683     019E                     	;# 
   684     019F                     	;# 
   685     020C                     	;# 
   686     020D                     	;# 
   687     0211                     	;# 
   688     0211                     	;# 
   689     0212                     	;# 
   690     0212                     	;# 
   691     0213                     	;# 
   692     0213                     	;# 
   693     0214                     	;# 
   694     0214                     	;# 
   695     0215                     	;# 
   696     0215                     	;# 
   697     0215                     	;# 
   698     0216                     	;# 
   699     0216                     	;# 
   700     0217                     	;# 
   701     0217                     	;# 
   702     0391                     	;# 
   703     0392                     	;# 
   704     0393                     	;# 
   705     0394                     	;# 
   706     0395                     	;# 
   707     0396                     	;# 
   708     039A                     	;# 
   709     039B                     	;# 
   710     0611                     	;# 
   711     0612                     	;# 
   712     0613                     	;# 
   713     0613                     	;# 
   714     0614                     	;# 
   715     0615                     	;# 
   716     0616                     	;# 
   717     0616                     	;# 
   718     0691                     	;# 
   719     0692                     	;# 
   720     0693                     	;# 
   721     0694                     	;# 
   722     0695                     	;# 
   723     0E8E                     	;# 
   724     0E8F                     	;# 
   725     0E90                     	;# 
   726     0E91                     	;# 
   727     0E92                     	;# 
   728     0E93                     	;# 
   729     0E94                     	;# 
   730     0E94                     	;# 
   731     0E95                     	;# 
   732     0E96                     	;# 
   733     0E97                     	;# 
   734     0E98                     	;# 
   735     0E99                     	;# 
   736     0E9A                     	;# 
   737     0E9B                     	;# 
   738     0E9C                     	;# 
   739     0E9D                     	;# 
   740     0E9E                     	;# 
   741     0E9F                     	;# 
   742     0FE4                     	;# 
   743     0FE5                     	;# 
   744     0FE6                     	;# 
   745     0FE7                     	;# 
   746     0FE8                     	;# 
   747     0FE9                     	;# 
   748     0FEA                     	;# 
   749     0FEB                     	;# 
   750     0FED                     	;# 
   751     0FEE                     	;# 
   752     0FEF                     	;# 
   753     0000                     	;# 
   754     0001                     	;# 
   755     0002                     	;# 
   756     0003                     	;# 
   757     0004                     	;# 
   758     0005                     	;# 
   759     0006                     	;# 
   760     0007                     	;# 
   761     0008                     	;# 
   762     0009                     	;# 
   763     000A                     	;# 
   764     000B                     	;# 
   765     000C                     	;# 
   766     000D                     	;# 
   767     000E                     	;# 
   768     0011                     	;# 
   769     0012                     	;# 
   770     0015                     	;# 
   771     0016                     	;# 
   772     0016                     	;# 
   773     0017                     	;# 
   774     0018                     	;# 
   775     0019                     	;# 
   776     001A                     	;# 
   777     001B                     	;# 
   778     001C                     	;# 
   779     008C                     	;# 
   780     008D                     	;# 
   781     008E                     	;# 
   782     0091                     	;# 
   783     0092                     	;# 
   784     0095                     	;# 
   785     0096                     	;# 
   786     0097                     	;# 
   787     0098                     	;# 
   788     0099                     	;# 
   789     009A                     	;# 
   790     009B                     	;# 
   791     009B                     	;# 
   792     009C                     	;# 
   793     009D                     	;# 
   794     009E                     	;# 
   795     009F                     	;# 
   796     010C                     	;# 
   797     010D                     	;# 
   798     010E                     	;# 
   799     0111                     	;# 
   800     0112                     	;# 
   801     0113                     	;# 
   802     0114                     	;# 
   803     0115                     	;# 
   804     0116                     	;# 
   805     0117                     	;# 
   806     0118                     	;# 
   807     0119                     	;# 
   808     011D                     	;# 
   809     018C                     	;# 
   810     018D                     	;# 
   811     018E                     	;# 
   812     0191                     	;# 
   813     0191                     	;# 
   814     0192                     	;# 
   815     0193                     	;# 
   816     0193                     	;# 
   817     0194                     	;# 
   818     0195                     	;# 
   819     0196                     	;# 
   820     0197                     	;# 
   821     0199                     	;# 
   822     019A                     	;# 
   823     019B                     	;# 
   824     019B                     	;# 
   825     019C                     	;# 
   826     019D                     	;# 
   827     019E                     	;# 
   828     019F                     	;# 
   829     020C                     	;# 
   830     020D                     	;# 
   831     0211                     	;# 
   832     0211                     	;# 
   833     0212                     	;# 
   834     0212                     	;# 
   835     0213                     	;# 
   836     0213                     	;# 
   837     0214                     	;# 
   838     0214                     	;# 
   839     0215                     	;# 
   840     0215                     	;# 
   841     0215                     	;# 
   842     0216                     	;# 
   843     0216                     	;# 
   844     0217                     	;# 
   845     0217                     	;# 
   846     0391                     	;# 
   847     0392                     	;# 
   848     0393                     	;# 
   849     0394                     	;# 
   850     0395                     	;# 
   851     0396                     	;# 
   852     039A                     	;# 
   853     039B                     	;# 
   854     0611                     	;# 
   855     0612                     	;# 
   856     0613                     	;# 
   857     0613                     	;# 
   858     0614                     	;# 
   859     0615                     	;# 
   860     0616                     	;# 
   861     0616                     	;# 
   862     0691                     	;# 
   863     0692                     	;# 
   864     0693                     	;# 
   865     0694                     	;# 
   866     0695                     	;# 
   867     0E8E                     	;# 
   868     0E8F                     	;# 
   869     0E90                     	;# 
   870     0E91                     	;# 
   871     0E92                     	;# 
   872     0E93                     	;# 
   873     0E94                     	;# 
   874     0E94                     	;# 
   875     0E95                     	;# 
   876     0E96                     	;# 
   877     0E97                     	;# 
   878     0E98                     	;# 
   879     0E99                     	;# 
   880     0E9A                     	;# 
   881     0E9B                     	;# 
   882     0E9C                     	;# 
   883     0E9D                     	;# 
   884     0E9E                     	;# 
   885     0E9F                     	;# 
   886     0FE4                     	;# 
   887     0FE5                     	;# 
   888     0FE6                     	;# 
   889     0FE7                     	;# 
   890     0FE8                     	;# 
   891     0FE9                     	;# 
   892     0FEA                     	;# 
   893     0FEB                     	;# 
   894     0FED                     	;# 
   895     0FEE                     	;# 
   896     0FEF                     	;# 
   897     0000                     	;# 
   898     0001                     	;# 
   899     0002                     	;# 
   900     0003                     	;# 
   901     0004                     	;# 
   902     0005                     	;# 
   903     0006                     	;# 
   904     0007                     	;# 
   905     0008                     	;# 
   906     0009                     	;# 
   907     000A                     	;# 
   908     000B                     	;# 
   909     000C                     	;# 
   910     000D                     	;# 
   911     000E                     	;# 
   912     0011                     	;# 
   913     0012                     	;# 
   914     0015                     	;# 
   915     0016                     	;# 
   916     0016                     	;# 
   917     0017                     	;# 
   918     0018                     	;# 
   919     0019                     	;# 
   920     001A                     	;# 
   921     001B                     	;# 
   922     001C                     	;# 
   923     008C                     	;# 
   924     008D                     	;# 
   925     008E                     	;# 
   926     0091                     	;# 
   927     0092                     	;# 
   928     0095                     	;# 
   929     0096                     	;# 
   930     0097                     	;# 
   931     0098                     	;# 
   932     0099                     	;# 
   933     009A                     	;# 
   934     009B                     	;# 
   935     009B                     	;# 
   936     009C                     	;# 
   937     009D                     	;# 
   938     009E                     	;# 
   939     009F                     	;# 
   940     010C                     	;# 
   941     010D                     	;# 
   942     010E                     	;# 
   943     0111                     	;# 
   944     0112                     	;# 
   945     0113                     	;# 
   946     0114                     	;# 
   947     0115                     	;# 
   948     0116                     	;# 
   949     0117                     	;# 
   950     0118                     	;# 
   951     0119                     	;# 
   952     011D                     	;# 
   953     018C                     	;# 
   954     018D                     	;# 
   955     018E                     	;# 
   956     0191                     	;# 
   957     0191                     	;# 
   958     0192                     	;# 
   959     0193                     	;# 
   960     0193                     	;# 
   961     0194                     	;# 
   962     0195                     	;# 
   963     0196                     	;# 
   964     0197                     	;# 
   965     0199                     	;# 
   966     019A                     	;# 
   967     019B                     	;# 
   968     019B                     	;# 
   969     019C                     	;# 
   970     019D                     	;# 
   971     019E                     	;# 
   972     019F                     	;# 
   973     020C                     	;# 
   974     020D                     	;# 
   975     0211                     	;# 
   976     0211                     	;# 
   977     0212                     	;# 
   978     0212                     	;# 
   979     0213                     	;# 
   980     0213                     	;# 
   981     0214                     	;# 
   982     0214                     	;# 
   983     0215                     	;# 
   984     0215                     	;# 
   985     0215                     	;# 
   986     0216                     	;# 
   987     0216                     	;# 
   988     0217                     	;# 
   989     0217                     	;# 
   990     0391                     	;# 
   991     0392                     	;# 
   992     0393                     	;# 
   993     0394                     	;# 
   994     0395                     	;# 
   995     0396                     	;# 
   996     039A                     	;# 
   997     039B                     	;# 
   998     0611                     	;# 
   999     0612                     	;# 
  1000     0613                     	;# 
  1001     0613                     	;# 
  1002     0614                     	;# 
  1003     0615                     	;# 
  1004     0616                     	;# 
  1005     0616                     	;# 
  1006     0691                     	;# 
  1007     0692                     	;# 
  1008     0693                     	;# 
  1009     0694                     	;# 
  1010     0695                     	;# 
  1011     0E8E                     	;# 
  1012     0E8F                     	;# 
  1013     0E90                     	;# 
  1014     0E91                     	;# 
  1015     0E92                     	;# 
  1016     0E93                     	;# 
  1017     0E94                     	;# 
  1018     0E94                     	;# 
  1019     0E95                     	;# 
  1020     0E96                     	;# 
  1021     0E97                     	;# 
  1022     0E98                     	;# 
  1023     0E99                     	;# 
  1024     0E9A                     	;# 
  1025     0E9B                     	;# 
  1026     0E9C                     	;# 
  1027     0E9D                     	;# 
  1028     0E9E                     	;# 
  1029     0E9F                     	;# 
  1030     0FE4                     	;# 
  1031     0FE5                     	;# 
  1032     0FE6                     	;# 
  1033     0FE7                     	;# 
  1034     0FE8                     	;# 
  1035     0FE9                     	;# 
  1036     0FEA                     	;# 
  1037     0FEB                     	;# 
  1038     0FED                     	;# 
  1039     0FEE                     	;# 
  1040     0FEF                     	;# 
  1041     0000                     	;# 
  1042     0001                     	;# 
  1043     0002                     	;# 
  1044     0003                     	;# 
  1045     0004                     	;# 
  1046     0005                     	;# 
  1047     0006                     	;# 
  1048     0007                     	;# 
  1049     0008                     	;# 
  1050     0009                     	;# 
  1051     000A                     	;# 
  1052     000B                     	;# 
  1053     000C                     	;# 
  1054     000D                     	;# 
  1055     000E                     	;# 
  1056     0011                     	;# 
  1057     0012                     	;# 
  1058     0015                     	;# 
  1059     0016                     	;# 
  1060     0016                     	;# 
  1061     0017                     	;# 
  1062     0018                     	;# 
  1063     0019                     	;# 
  1064     001A                     	;# 
  1065     001B                     	;# 
  1066     001C                     	;# 
  1067     008C                     	;# 
  1068     008D                     	;# 
  1069     008E                     	;# 
  1070     0091                     	;# 
  1071     0092                     	;# 
  1072     0095                     	;# 
  1073     0096                     	;# 
  1074     0097                     	;# 
  1075     0098                     	;# 
  1076     0099                     	;# 
  1077     009A                     	;# 
  1078     009B                     	;# 
  1079     009B                     	;# 
  1080     009C                     	;# 
  1081     009D                     	;# 
  1082     009E                     	;# 
  1083     009F                     	;# 
  1084     010C                     	;# 
  1085     010D                     	;# 
  1086     010E                     	;# 
  1087     0111                     	;# 
  1088     0112                     	;# 
  1089     0113                     	;# 
  1090     0114                     	;# 
  1091     0115                     	;# 
  1092     0116                     	;# 
  1093     0117                     	;# 
  1094     0118                     	;# 
  1095     0119                     	;# 
  1096     011D                     	;# 
  1097     018C                     	;# 
  1098     018D                     	;# 
  1099     018E                     	;# 
  1100     0191                     	;# 
  1101     0191                     	;# 
  1102     0192                     	;# 
  1103     0193                     	;# 
  1104     0193                     	;# 
  1105     0194                     	;# 
  1106     0195                     	;# 
  1107     0196                     	;# 
  1108     0197                     	;# 
  1109     0199                     	;# 
  1110     019A                     	;# 
  1111     019B                     	;# 
  1112     019B                     	;# 
  1113     019C                     	;# 
  1114     019D                     	;# 
  1115     019E                     	;# 
  1116     019F                     	;# 
  1117     020C                     	;# 
  1118     020D                     	;# 
  1119     0211                     	;# 
  1120     0211                     	;# 
  1121     0212                     	;# 
  1122     0212                     	;# 
  1123     0213                     	;# 
  1124     0213                     	;# 
  1125     0214                     	;# 
  1126     0214                     	;# 
  1127     0215                     	;# 
  1128     0215                     	;# 
  1129     0215                     	;# 
  1130     0216                     	;# 
  1131     0216                     	;# 
  1132     0217                     	;# 
  1133     0217                     	;# 
  1134     0391                     	;# 
  1135     0392                     	;# 
  1136     0393                     	;# 
  1137     0394                     	;# 
  1138     0395                     	;# 
  1139     0396                     	;# 
  1140     039A                     	;# 
  1141     039B                     	;# 
  1142     0611                     	;# 
  1143     0612                     	;# 
  1144     0613                     	;# 
  1145     0613                     	;# 
  1146     0614                     	;# 
  1147     0615                     	;# 
  1148     0616                     	;# 
  1149     0616                     	;# 
  1150     0691                     	;# 
  1151     0692                     	;# 
  1152     0693                     	;# 
  1153     0694                     	;# 
  1154     0695                     	;# 
  1155     0E8E                     	;# 
  1156     0E8F                     	;# 
  1157     0E90                     	;# 
  1158     0E91                     	;# 
  1159     0E92                     	;# 
  1160     0E93                     	;# 
  1161     0E94                     	;# 
  1162     0E94                     	;# 
  1163     0E95                     	;# 
  1164     0E96                     	;# 
  1165     0E97                     	;# 
  1166     0E98                     	;# 
  1167     0E99                     	;# 
  1168     0E9A                     	;# 
  1169     0E9B                     	;# 
  1170     0E9C                     	;# 
  1171     0E9D                     	;# 
  1172     0E9E                     	;# 
  1173     0E9F                     	;# 
  1174     0FE4                     	;# 
  1175     0FE5                     	;# 
  1176     0FE6                     	;# 
  1177     0FE7                     	;# 
  1178     0FE8                     	;# 
  1179     0FE9                     	;# 
  1180     0FEA                     	;# 
  1181     0FEB                     	;# 
  1182     0FED                     	;# 
  1183     0FEE                     	;# 
  1184     0FEF                     	;# 
  1185     0000                     	;# 
  1186     0001                     	;# 
  1187     0002                     	;# 
  1188     0003                     	;# 
  1189     0004                     	;# 
  1190     0005                     	;# 
  1191     0006                     	;# 
  1192     0007                     	;# 
  1193     0008                     	;# 
  1194     0009                     	;# 
  1195     000A                     	;# 
  1196     000B                     	;# 
  1197     000C                     	;# 
  1198     000D                     	;# 
  1199     000E                     	;# 
  1200     0011                     	;# 
  1201     0012                     	;# 
  1202     0015                     	;# 
  1203     0016                     	;# 
  1204     0016                     	;# 
  1205     0017                     	;# 
  1206     0018                     	;# 
  1207     0019                     	;# 
  1208     001A                     	;# 
  1209     001B                     	;# 
  1210     001C                     	;# 
  1211     008C                     	;# 
  1212     008D                     	;# 
  1213     008E                     	;# 
  1214     0091                     	;# 
  1215     0092                     	;# 
  1216     0095                     	;# 
  1217     0096                     	;# 
  1218     0097                     	;# 
  1219     0098                     	;# 
  1220     0099                     	;# 
  1221     009A                     	;# 
  1222     009B                     	;# 
  1223     009B                     	;# 
  1224     009C                     	;# 
  1225     009D                     	;# 
  1226     009E                     	;# 
  1227     009F                     	;# 
  1228     010C                     	;# 
  1229     010D                     	;# 
  1230     010E                     	;# 
  1231     0111                     	;# 
  1232     0112                     	;# 
  1233     0113                     	;# 
  1234     0114                     	;# 
  1235     0115                     	;# 
  1236     0116                     	;# 
  1237     0117                     	;# 
  1238     0118                     	;# 
  1239     0119                     	;# 
  1240     011D                     	;# 
  1241     018C                     	;# 
  1242     018D                     	;# 
  1243     018E                     	;# 
  1244     0191                     	;# 
  1245     0191                     	;# 
  1246     0192                     	;# 
  1247     0193                     	;# 
  1248     0193                     	;# 
  1249     0194                     	;# 
  1250     0195                     	;# 
  1251     0196                     	;# 
  1252     0197                     	;# 
  1253     0199                     	;# 
  1254     019A                     	;# 
  1255     019B                     	;# 
  1256     019B                     	;# 
  1257     019C                     	;# 
  1258     019D                     	;# 
  1259     019E                     	;# 
  1260     019F                     	;# 
  1261     020C                     	;# 
  1262     020D                     	;# 
  1263     0211                     	;# 
  1264     0211                     	;# 
  1265     0212                     	;# 
  1266     0212                     	;# 
  1267     0213                     	;# 
  1268     0213                     	;# 
  1269     0214                     	;# 
  1270     0214                     	;# 
  1271     0215                     	;# 
  1272     0215                     	;# 
  1273     0215                     	;# 
  1274     0216                     	;# 
  1275     0216                     	;# 
  1276     0217                     	;# 
  1277     0217                     	;# 
  1278     0391                     	;# 
  1279     0392                     	;# 
  1280     0393                     	;# 
  1281     0394                     	;# 
  1282     0395                     	;# 
  1283     0396                     	;# 
  1284     039A                     	;# 
  1285     039B                     	;# 
  1286     0611                     	;# 
  1287     0612                     	;# 
  1288     0613                     	;# 
  1289     0613                     	;# 
  1290     0614                     	;# 
  1291     0615                     	;# 
  1292     0616                     	;# 
  1293     0616                     	;# 
  1294     0691                     	;# 
  1295     0692                     	;# 
  1296     0693                     	;# 
  1297     0694                     	;# 
  1298     0695                     	;# 
  1299     0E8E                     	;# 
  1300     0E8F                     	;# 
  1301     0E90                     	;# 
  1302     0E91                     	;# 
  1303     0E92                     	;# 
  1304     0E93                     	;# 
  1305     0E94                     	;# 
  1306     0E94                     	;# 
  1307     0E95                     	;# 
  1308     0E96                     	;# 
  1309     0E97                     	;# 
  1310     0E98                     	;# 
  1311     0E99                     	;# 
  1312     0E9A                     	;# 
  1313     0E9B                     	;# 
  1314     0E9C                     	;# 
  1315     0E9D                     	;# 
  1316     0E9E                     	;# 
  1317     0E9F                     	;# 
  1318     0FE4                     	;# 
  1319     0FE5                     	;# 
  1320     0FE6                     	;# 
  1321     0FE7                     	;# 
  1322     0FE8                     	;# 
  1323     0FE9                     	;# 
  1324     0FEA                     	;# 
  1325     0FEB                     	;# 
  1326     0FED                     	;# 
  1327     0FEE                     	;# 
  1328     0FEF                     	;# 
  1329     0000                     	;# 
  1330     0001                     	;# 
  1331     0002                     	;# 
  1332     0003                     	;# 
  1333     0004                     	;# 
  1334     0005                     	;# 
  1335     0006                     	;# 
  1336     0007                     	;# 
  1337     0008                     	;# 
  1338     0009                     	;# 
  1339     000A                     	;# 
  1340     000B                     	;# 
  1341     000C                     	;# 
  1342     000D                     	;# 
  1343     000E                     	;# 
  1344     0011                     	;# 
  1345     0012                     	;# 
  1346     0015                     	;# 
  1347     0016                     	;# 
  1348     0016                     	;# 
  1349     0017                     	;# 
  1350     0018                     	;# 
  1351     0019                     	;# 
  1352     001A                     	;# 
  1353     001B                     	;# 
  1354     001C                     	;# 
  1355     008C                     	;# 
  1356     008D                     	;# 
  1357     008E                     	;# 
  1358     0091                     	;# 
  1359     0092                     	;# 
  1360     0095                     	;# 
  1361     0096                     	;# 
  1362     0097                     	;# 
  1363     0098                     	;# 
  1364     0099                     	;# 
  1365     009A                     	;# 
  1366     009B                     	;# 
  1367     009B                     	;# 
  1368     009C                     	;# 
  1369     009D                     	;# 
  1370     009E                     	;# 
  1371     009F                     	;# 
  1372     010C                     	;# 
  1373     010D                     	;# 
  1374     010E                     	;# 
  1375     0111                     	;# 
  1376     0112                     	;# 
  1377     0113                     	;# 
  1378     0114                     	;# 
  1379     0115                     	;# 
  1380     0116                     	;# 
  1381     0117                     	;# 
  1382     0118                     	;# 
  1383     0119                     	;# 
  1384     011D                     	;# 
  1385     018C                     	;# 
  1386     018D                     	;# 
  1387     018E                     	;# 
  1388     0191                     	;# 
  1389     0191                     	;# 
  1390     0192                     	;# 
  1391     0193                     	;# 
  1392     0193                     	;# 
  1393     0194                     	;# 
  1394     0195                     	;# 
  1395     0196                     	;# 
  1396     0197                     	;# 
  1397     0199                     	;# 
  1398     019A                     	;# 
  1399     019B                     	;# 
  1400     019B                     	;# 
  1401     019C                     	;# 
  1402     019D                     	;# 
  1403     019E                     	;# 
  1404     019F                     	;# 
  1405     020C                     	;# 
  1406     020D                     	;# 
  1407     0211                     	;# 
  1408     0211                     	;# 
  1409     0212                     	;# 
  1410     0212                     	;# 
  1411     0213                     	;# 
  1412     0213                     	;# 
  1413     0214                     	;# 
  1414     0214                     	;# 
  1415     0215                     	;# 
  1416     0215                     	;# 
  1417     0215                     	;# 
  1418     0216                     	;# 
  1419     0216                     	;# 
  1420     0217                     	;# 
  1421     0217                     	;# 
  1422     0391                     	;# 
  1423     0392                     	;# 
  1424     0393                     	;# 
  1425     0394                     	;# 
  1426     0395                     	;# 
  1427     0396                     	;# 
  1428     039A                     	;# 
  1429     039B                     	;# 
  1430     0611                     	;# 
  1431     0612                     	;# 
  1432     0613                     	;# 
  1433     0613                     	;# 
  1434     0614                     	;# 
  1435     0615                     	;# 
  1436     0616                     	;# 
  1437     0616                     	;# 
  1438     0691                     	;# 
  1439     0692                     	;# 
  1440     0693                     	;# 
  1441     0694                     	;# 
  1442     0695                     	;# 
  1443     0E8E                     	;# 
  1444     0E8F                     	;# 
  1445     0E90                     	;# 
  1446     0E91                     	;# 
  1447     0E92                     	;# 
  1448     0E93                     	;# 
  1449     0E94                     	;# 
  1450     0E94                     	;# 
  1451     0E95                     	;# 
  1452     0E96                     	;# 
  1453     0E97                     	;# 
  1454     0E98                     	;# 
  1455     0E99                     	;# 
  1456     0E9A                     	;# 
  1457     0E9B                     	;# 
  1458     0E9C                     	;# 
  1459     0E9D                     	;# 
  1460     0E9E                     	;# 
  1461     0E9F                     	;# 
  1462     0FE4                     	;# 
  1463     0FE5                     	;# 
  1464     0FE6                     	;# 
  1465     0FE7                     	;# 
  1466     0FE8                     	;# 
  1467     0FE9                     	;# 
  1468     0FEA                     	;# 
  1469     0FEB                     	;# 
  1470     0FED                     	;# 
  1471     0FEE                     	;# 
  1472     0FEF                     	;# 
  1473     0000                     	;# 
  1474     0001                     	;# 
  1475     0002                     	;# 
  1476     0003                     	;# 
  1477     0004                     	;# 
  1478     0005                     	;# 
  1479     0006                     	;# 
  1480     0007                     	;# 
  1481     0008                     	;# 
  1482     0009                     	;# 
  1483     000A                     	;# 
  1484     000B                     	;# 
  1485     000C                     	;# 
  1486     000D                     	;# 
  1487     000E                     	;# 
  1488     0011                     	;# 
  1489     0012                     	;# 
  1490     0015                     	;# 
  1491     0016                     	;# 
  1492     0016                     	;# 
  1493     0017                     	;# 
  1494     0018                     	;# 
  1495     0019                     	;# 
  1496     001A                     	;# 
  1497     001B                     	;# 
  1498     001C                     	;# 
  1499     008C                     	;# 
  1500     008D                     	;# 
  1501     008E                     	;# 
  1502     0091                     	;# 
  1503     0092                     	;# 
  1504     0095                     	;# 
  1505     0096                     	;# 
  1506     0097                     	;# 
  1507     0098                     	;# 
  1508     0099                     	;# 
  1509     009A                     	;# 
  1510     009B                     	;# 
  1511     009B                     	;# 
  1512     009C                     	;# 
  1513     009D                     	;# 
  1514     009E                     	;# 
  1515     009F                     	;# 
  1516     010C                     	;# 
  1517     010D                     	;# 
  1518     010E                     	;# 
  1519     0111                     	;# 
  1520     0112                     	;# 
  1521     0113                     	;# 
  1522     0114                     	;# 
  1523     0115                     	;# 
  1524     0116                     	;# 
  1525     0117                     	;# 
  1526     0118                     	;# 
  1527     0119                     	;# 
  1528     011D                     	;# 
  1529     018C                     	;# 
  1530     018D                     	;# 
  1531     018E                     	;# 
  1532     0191                     	;# 
  1533     0191                     	;# 
  1534     0192                     	;# 
  1535     0193                     	;# 
  1536     0193                     	;# 
  1537     0194                     	;# 
  1538     0195                     	;# 
  1539     0196                     	;# 
  1540     0197                     	;# 
  1541     0199                     	;# 
  1542     019A                     	;# 
  1543     019B                     	;# 
  1544     019B                     	;# 
  1545     019C                     	;# 
  1546     019D                     	;# 
  1547     019E                     	;# 
  1548     019F                     	;# 
  1549     020C                     	;# 
  1550     020D                     	;# 
  1551     0211                     	;# 
  1552     0211                     	;# 
  1553     0212                     	;# 
  1554     0212                     	;# 
  1555     0213                     	;# 
  1556     0213                     	;# 
  1557     0214                     	;# 
  1558     0214                     	;# 
  1559     0215                     	;# 
  1560     0215                     	;# 
  1561     0215                     	;# 
  1562     0216                     	;# 
  1563     0216                     	;# 
  1564     0217                     	;# 
  1565     0217                     	;# 
  1566     0391                     	;# 
  1567     0392                     	;# 
  1568     0393                     	;# 
  1569     0394                     	;# 
  1570     0395                     	;# 
  1571     0396                     	;# 
  1572     039A                     	;# 
  1573     039B                     	;# 
  1574     0611                     	;# 
  1575     0612                     	;# 
  1576     0613                     	;# 
  1577     0613                     	;# 
  1578     0614                     	;# 
  1579     0615                     	;# 
  1580     0616                     	;# 
  1581     0616                     	;# 
  1582     0691                     	;# 
  1583     0692                     	;# 
  1584     0693                     	;# 
  1585     0694                     	;# 
  1586     0695                     	;# 
  1587     0E8E                     	;# 
  1588     0E8F                     	;# 
  1589     0E90                     	;# 
  1590     0E91                     	;# 
  1591     0E92                     	;# 
  1592     0E93                     	;# 
  1593     0E94                     	;# 
  1594     0E94                     	;# 
  1595     0E95                     	;# 
  1596     0E96                     	;# 
  1597     0E97                     	;# 
  1598     0E98                     	;# 
  1599     0E99                     	;# 
  1600     0E9A                     	;# 
  1601     0E9B                     	;# 
  1602     0E9C                     	;# 
  1603     0E9D                     	;# 
  1604     0E9E                     	;# 
  1605     0E9F                     	;# 
  1606     0FE4                     	;# 
  1607     0FE5                     	;# 
  1608     0FE6                     	;# 
  1609     0FE7                     	;# 
  1610     0FE8                     	;# 
  1611     0FE9                     	;# 
  1612     0FEA                     	;# 
  1613     0FEB                     	;# 
  1614     0FED                     	;# 
  1615     0FEE                     	;# 
  1616     0FEF                     	;# 
  1617     0000                     	;# 
  1618     0001                     	;# 
  1619     0002                     	;# 
  1620     0003                     	;# 
  1621     0004                     	;# 
  1622     0005                     	;# 
  1623     0006                     	;# 
  1624     0007                     	;# 
  1625     0008                     	;# 
  1626     0009                     	;# 
  1627     000A                     	;# 
  1628     000B                     	;# 
  1629     000C                     	;# 
  1630     000D                     	;# 
  1631     000E                     	;# 
  1632     0011                     	;# 
  1633     0012                     	;# 
  1634     0015                     	;# 
  1635     0016                     	;# 
  1636     0016                     	;# 
  1637     0017                     	;# 
  1638     0018                     	;# 
  1639     0019                     	;# 
  1640     001A                     	;# 
  1641     001B                     	;# 
  1642     001C                     	;# 
  1643     008C                     	;# 
  1644     008D                     	;# 
  1645     008E                     	;# 
  1646     0091                     	;# 
  1647     0092                     	;# 
  1648     0095                     	;# 
  1649     0096                     	;# 
  1650     0097                     	;# 
  1651     0098                     	;# 
  1652     0099                     	;# 
  1653     009A                     	;# 
  1654     009B                     	;# 
  1655     009B                     	;# 
  1656     009C                     	;# 
  1657     009D                     	;# 
  1658     009E                     	;# 
  1659     009F                     	;# 
  1660     010C                     	;# 
  1661     010D                     	;# 
  1662     010E                     	;# 
  1663     0111                     	;# 
  1664     0112                     	;# 
  1665     0113                     	;# 
  1666     0114                     	;# 
  1667     0115                     	;# 
  1668     0116                     	;# 
  1669     0117                     	;# 
  1670     0118                     	;# 
  1671     0119                     	;# 
  1672     011D                     	;# 
  1673     018C                     	;# 
  1674     018D                     	;# 
  1675     018E                     	;# 
  1676     0191                     	;# 
  1677     0191                     	;# 
  1678     0192                     	;# 
  1679     0193                     	;# 
  1680     0193                     	;# 
  1681     0194                     	;# 
  1682     0195                     	;# 
  1683     0196                     	;# 
  1684     0197                     	;# 
  1685     0199                     	;# 
  1686     019A                     	;# 
  1687     019B                     	;# 
  1688     019B                     	;# 
  1689     019C                     	;# 
  1690     019D                     	;# 
  1691     019E                     	;# 
  1692     019F                     	;# 
  1693     020C                     	;# 
  1694     020D                     	;# 
  1695     0211                     	;# 
  1696     0211                     	;# 
  1697     0212                     	;# 
  1698     0212                     	;# 
  1699     0213                     	;# 
  1700     0213                     	;# 
  1701     0214                     	;# 
  1702     0214                     	;# 
  1703     0215                     	;# 
  1704     0215                     	;# 
  1705     0215                     	;# 
  1706     0216                     	;# 
  1707     0216                     	;# 
  1708     0217                     	;# 
  1709     0217                     	;# 
  1710     0391                     	;# 
  1711     0392                     	;# 
  1712     0393                     	;# 
  1713     0394                     	;# 
  1714     0395                     	;# 
  1715     0396                     	;# 
  1716     039A                     	;# 
  1717     039B                     	;# 
  1718     0611                     	;# 
  1719     0612                     	;# 
  1720     0613                     	;# 
  1721     0613                     	;# 
  1722     0614                     	;# 
  1723     0615                     	;# 
  1724     0616                     	;# 
  1725     0616                     	;# 
  1726     0691                     	;# 
  1727     0692                     	;# 
  1728     0693                     	;# 
  1729     0694                     	;# 
  1730     0695                     	;# 
  1731     0E8E                     	;# 
  1732     0E8F                     	;# 
  1733     0E90                     	;# 
  1734     0E91                     	;# 
  1735     0E92                     	;# 
  1736     0E93                     	;# 
  1737     0E94                     	;# 
  1738     0E94                     	;# 
  1739     0E95                     	;# 
  1740     0E96                     	;# 
  1741     0E97                     	;# 
  1742     0E98                     	;# 
  1743     0E99                     	;# 
  1744     0E9A                     	;# 
  1745     0E9B                     	;# 
  1746     0E9C                     	;# 
  1747     0E9D                     	;# 
  1748     0E9E                     	;# 
  1749     0E9F                     	;# 
  1750     0FE4                     	;# 
  1751     0FE5                     	;# 
  1752     0FE6                     	;# 
  1753     0FE7                     	;# 
  1754     0FE8                     	;# 
  1755     0FE9                     	;# 
  1756     0FEA                     	;# 
  1757     0FEB                     	;# 
  1758     0FED                     	;# 
  1759     0FEE                     	;# 
  1760     0FEF                     	;# 
  1761     0000                     	;# 
  1762     0001                     	;# 
  1763     0002                     	;# 
  1764     0003                     	;# 
  1765     0004                     	;# 
  1766     0005                     	;# 
  1767     0006                     	;# 
  1768     0007                     	;# 
  1769     0008                     	;# 
  1770     0009                     	;# 
  1771     000A                     	;# 
  1772     000B                     	;# 
  1773     000C                     	;# 
  1774     000D                     	;# 
  1775     000E                     	;# 
  1776     0011                     	;# 
  1777     0012                     	;# 
  1778     0015                     	;# 
  1779     0016                     	;# 
  1780     0016                     	;# 
  1781     0017                     	;# 
  1782     0018                     	;# 
  1783     0019                     	;# 
  1784     001A                     	;# 
  1785     001B                     	;# 
  1786     001C                     	;# 
  1787     008C                     	;# 
  1788     008D                     	;# 
  1789     008E                     	;# 
  1790     0091                     	;# 
  1791     0092                     	;# 
  1792     0095                     	;# 
  1793     0096                     	;# 
  1794     0097                     	;# 
  1795     0098                     	;# 
  1796     0099                     	;# 
  1797     009A                     	;# 
  1798     009B                     	;# 
  1799     009B                     	;# 
  1800     009C                     	;# 
  1801     009D                     	;# 
  1802     009E                     	;# 
  1803     009F                     	;# 
  1804     010C                     	;# 
  1805     010D                     	;# 
  1806     010E                     	;# 
  1807     0111                     	;# 
  1808     0112                     	;# 
  1809     0113                     	;# 
  1810     0114                     	;# 
  1811     0115                     	;# 
  1812     0116                     	;# 
  1813     0117                     	;# 
  1814     0118                     	;# 
  1815     0119                     	;# 
  1816     011D                     	;# 
  1817     018C                     	;# 
  1818     018D                     	;# 
  1819     018E                     	;# 
  1820     0191                     	;# 
  1821     0191                     	;# 
  1822     0192                     	;# 
  1823     0193                     	;# 
  1824     0193                     	;# 
  1825     0194                     	;# 
  1826     0195                     	;# 
  1827     0196                     	;# 
  1828     0197                     	;# 
  1829     0199                     	;# 
  1830     019A                     	;# 
  1831     019B                     	;# 
  1832     019B                     	;# 
  1833     019C                     	;# 
  1834     019D                     	;# 
  1835     019E                     	;# 
  1836     019F                     	;# 
  1837     020C                     	;# 
  1838     020D                     	;# 
  1839     0211                     	;# 
  1840     0211                     	;# 
  1841     0212                     	;# 
  1842     0212                     	;# 
  1843     0213                     	;# 
  1844     0213                     	;# 
  1845     0214                     	;# 
  1846     0214                     	;# 
  1847     0215                     	;# 
  1848     0215                     	;# 
  1849     0215                     	;# 
  1850     0216                     	;# 
  1851     0216                     	;# 
  1852     0217                     	;# 
  1853     0217                     	;# 
  1854     0391                     	;# 
  1855     0392                     	;# 
  1856     0393                     	;# 
  1857     0394                     	;# 
  1858     0395                     	;# 
  1859     0396                     	;# 
  1860     039A                     	;# 
  1861     039B                     	;# 
  1862     0611                     	;# 
  1863     0612                     	;# 
  1864     0613                     	;# 
  1865     0613                     	;# 
  1866     0614                     	;# 
  1867     0615                     	;# 
  1868     0616                     	;# 
  1869     0616                     	;# 
  1870     0691                     	;# 
  1871     0692                     	;# 
  1872     0693                     	;# 
  1873     0694                     	;# 
  1874     0695                     	;# 
  1875     0E8E                     	;# 
  1876     0E8F                     	;# 
  1877     0E90                     	;# 
  1878     0E91                     	;# 
  1879     0E92                     	;# 
  1880     0E93                     	;# 
  1881     0E94                     	;# 
  1882     0E94                     	;# 
  1883     0E95                     	;# 
  1884     0E96                     	;# 
  1885     0E97                     	;# 
  1886     0E98                     	;# 
  1887     0E99                     	;# 
  1888     0E9A                     	;# 
  1889     0E9B                     	;# 
  1890     0E9C                     	;# 
  1891     0E9D                     	;# 
  1892     0E9E                     	;# 
  1893     0E9F                     	;# 
  1894     0FE4                     	;# 
  1895     0FE5                     	;# 
  1896     0FE6                     	;# 
  1897     0FE7                     	;# 
  1898     0FE8                     	;# 
  1899     0FE9                     	;# 
  1900     0FEA                     	;# 
  1901     0FEB                     	;# 
  1902     0FED                     	;# 
  1903     0FEE                     	;# 
  1904     0FEF                     	;# 
  1905     0000                     	;# 
  1906     0001                     	;# 
  1907     0002                     	;# 
  1908     0003                     	;# 
  1909     0004                     	;# 
  1910     0005                     	;# 
  1911     0006                     	;# 
  1912     0007                     	;# 
  1913     0008                     	;# 
  1914     0009                     	;# 
  1915     000A                     	;# 
  1916     000B                     	;# 
  1917     000C                     	;# 
  1918     000D                     	;# 
  1919     000E                     	;# 
  1920     0011                     	;# 
  1921     0012                     	;# 
  1922     0015                     	;# 
  1923     0016                     	;# 
  1924     0016                     	;# 
  1925     0017                     	;# 
  1926     0018                     	;# 
  1927     0019                     	;# 
  1928     001A                     	;# 
  1929     001B                     	;# 
  1930     001C                     	;# 
  1931     008C                     	;# 
  1932     008D                     	;# 
  1933     008E                     	;# 
  1934     0091                     	;# 
  1935     0092                     	;# 
  1936     0095                     	;# 
  1937     0096                     	;# 
  1938     0097                     	;# 
  1939     0098                     	;# 
  1940     0099                     	;# 
  1941     009A                     	;# 
  1942     009B                     	;# 
  1943     009B                     	;# 
  1944     009C                     	;# 
  1945     009D                     	;# 
  1946     009E                     	;# 
  1947     009F                     	;# 
  1948     010C                     	;# 
  1949     010D                     	;# 
  1950     010E                     	;# 
  1951     0111                     	;# 
  1952     0112                     	;# 
  1953     0113                     	;# 
  1954     0114                     	;# 
  1955     0115                     	;# 
  1956     0116                     	;# 
  1957     0117                     	;# 
  1958     0118                     	;# 
  1959     0119                     	;# 
  1960     011D                     	;# 
  1961     018C                     	;# 
  1962     018D                     	;# 
  1963     018E                     	;# 
  1964     0191                     	;# 
  1965     0191                     	;# 
  1966     0192                     	;# 
  1967     0193                     	;# 
  1968     0193                     	;# 
  1969     0194                     	;# 
  1970     0195                     	;# 
  1971     0196                     	;# 
  1972     0197                     	;# 
  1973     0199                     	;# 
  1974     019A                     	;# 
  1975     019B                     	;# 
  1976     019B                     	;# 
  1977     019C                     	;# 
  1978     019D                     	;# 
  1979     019E                     	;# 
  1980     019F                     	;# 
  1981     020C                     	;# 
  1982     020D                     	;# 
  1983     0211                     	;# 
  1984     0211                     	;# 
  1985     0212                     	;# 
  1986     0212                     	;# 
  1987     0213                     	;# 
  1988     0213                     	;# 
  1989     0214                     	;# 
  1990     0214                     	;# 
  1991     0215                     	;# 
  1992     0215                     	;# 
  1993     0215                     	;# 
  1994     0216                     	;# 
  1995     0216                     	;# 
  1996     0217                     	;# 
  1997     0217                     	;# 
  1998     0391                     	;# 
  1999     0392                     	;# 
  2000     0393                     	;# 
  2001     0394                     	;# 
  2002     0395                     	;# 
  2003     0396                     	;# 
  2004     039A                     	;# 
  2005     039B                     	;# 
  2006     0611                     	;# 
  2007     0612                     	;# 
  2008     0613                     	;# 
  2009     0613                     	;# 
  2010     0614                     	;# 
  2011     0615                     	;# 
  2012     0616                     	;# 
  2013     0616                     	;# 
  2014     0691                     	;# 
  2015     0692                     	;# 
  2016     0693                     	;# 
  2017     0694                     	;# 
  2018     0695                     	;# 
  2019     0E8E                     	;# 
  2020     0E8F                     	;# 
  2021     0E90                     	;# 
  2022     0E91                     	;# 
  2023     0E92                     	;# 
  2024     0E93                     	;# 
  2025     0E94                     	;# 
  2026     0E94                     	;# 
  2027     0E95                     	;# 
  2028     0E96                     	;# 
  2029     0E97                     	;# 
  2030     0E98                     	;# 
  2031     0E99                     	;# 
  2032     0E9A                     	;# 
  2033     0E9B                     	;# 
  2034     0E9C                     	;# 
  2035     0E9D                     	;# 
  2036     0E9E                     	;# 
  2037     0E9F                     	;# 
  2038     0FE4                     	;# 
  2039     0FE5                     	;# 
  2040     0FE6                     	;# 
  2041     0FE7                     	;# 
  2042     0FE8                     	;# 
  2043     0FE9                     	;# 
  2044     0FEA                     	;# 
  2045     0FEB                     	;# 
  2046     0FED                     	;# 
  2047     0FEE                     	;# 
  2048     0FEF                     	;# 
  2049     0000                     	;# 
  2050     0001                     	;# 
  2051     0002                     	;# 
  2052     0003                     	;# 
  2053     0004                     	;# 
  2054     0005                     	;# 
  2055     0006                     	;# 
  2056     0007                     	;# 
  2057     0008                     	;# 
  2058     0009                     	;# 
  2059     000A                     	;# 
  2060     000B                     	;# 
  2061     000C                     	;# 
  2062     000D                     	;# 
  2063     000E                     	;# 
  2064     0011                     	;# 
  2065     0012                     	;# 
  2066     0015                     	;# 
  2067     0016                     	;# 
  2068     0016                     	;# 
  2069     0017                     	;# 
  2070     0018                     	;# 
  2071     0019                     	;# 
  2072     001A                     	;# 
  2073     001B                     	;# 
  2074     001C                     	;# 
  2075     008C                     	;# 
  2076     008D                     	;# 
  2077     008E                     	;# 
  2078     0091                     	;# 
  2079     0092                     	;# 
  2080     0095                     	;# 
  2081     0096                     	;# 
  2082     0097                     	;# 
  2083     0098                     	;# 
  2084     0099                     	;# 
  2085     009A                     	;# 
  2086     009B                     	;# 
  2087     009B                     	;# 
  2088     009C                     	;# 
  2089     009D                     	;# 
  2090     009E                     	;# 
  2091     009F                     	;# 
  2092     010C                     	;# 
  2093     010D                     	;# 
  2094     010E                     	;# 
  2095     0111                     	;# 
  2096     0112                     	;# 
  2097     0113                     	;# 
  2098     0114                     	;# 
  2099     0115                     	;# 
  2100     0116                     	;# 
  2101     0117                     	;# 
  2102     0118                     	;# 
  2103     0119                     	;# 
  2104     011D                     	;# 
  2105     018C                     	;# 
  2106     018D                     	;# 
  2107     018E                     	;# 
  2108     0191                     	;# 
  2109     0191                     	;# 
  2110     0192                     	;# 
  2111     0193                     	;# 
  2112     0193                     	;# 
  2113     0194                     	;# 
  2114     0195                     	;# 
  2115     0196                     	;# 
  2116     0197                     	;# 
  2117     0199                     	;# 
  2118     019A                     	;# 
  2119     019B                     	;# 
  2120     019B                     	;# 
  2121     019C                     	;# 
  2122     019D                     	;# 
  2123     019E                     	;# 
  2124     019F                     	;# 
  2125     020C                     	;# 
  2126     020D                     	;# 
  2127     0211                     	;# 
  2128     0211                     	;# 
  2129     0212                     	;# 
  2130     0212                     	;# 
  2131     0213                     	;# 
  2132     0213                     	;# 
  2133     0214                     	;# 
  2134     0214                     	;# 
  2135     0215                     	;# 
  2136     0215                     	;# 
  2137     0215                     	;# 
  2138     0216                     	;# 
  2139     0216                     	;# 
  2140     0217                     	;# 
  2141     0217                     	;# 
  2142     0391                     	;# 
  2143     0392                     	;# 
  2144     0393                     	;# 
  2145     0394                     	;# 
  2146     0395                     	;# 
  2147     0396                     	;# 
  2148     039A                     	;# 
  2149     039B                     	;# 
  2150     0611                     	;# 
  2151     0612                     	;# 
  2152     0613                     	;# 
  2153     0613                     	;# 
  2154     0614                     	;# 
  2155     0615                     	;# 
  2156     0616                     	;# 
  2157     0616                     	;# 
  2158     0691                     	;# 
  2159     0692                     	;# 
  2160     0693                     	;# 
  2161     0694                     	;# 
  2162     0695                     	;# 
  2163     0E8E                     	;# 
  2164     0E8F                     	;# 
  2165     0E90                     	;# 
  2166     0E91                     	;# 
  2167     0E92                     	;# 
  2168     0E93                     	;# 
  2169     0E94                     	;# 
  2170     0E94                     	;# 
  2171     0E95                     	;# 
  2172     0E96                     	;# 
  2173     0E97                     	;# 
  2174     0E98                     	;# 
  2175     0E99                     	;# 
  2176     0E9A                     	;# 
  2177     0E9B                     	;# 
  2178     0E9C                     	;# 
  2179     0E9D                     	;# 
  2180     0E9E                     	;# 
  2181     0E9F                     	;# 
  2182     0FE4                     	;# 
  2183     0FE5                     	;# 
  2184     0FE6                     	;# 
  2185     0FE7                     	;# 
  2186     0FE8                     	;# 
  2187     0FE9                     	;# 
  2188     0FEA                     	;# 
  2189     0FEB                     	;# 
  2190     0FED                     	;# 
  2191     0FEE                     	;# 
  2192     0FEF                     	;_keyboard
  2193                           
  2194                           	psect	idataBANK3
  2195     1EB5                     __pidataBANK3:
  2196                           
  2197                           ;initializer for main@F3452
  2198     1EB5  3420               	retlw	32
  2199     1EB6  3420               	retlw	32
  2200     1EB7  3420               	retlw	32
  2201     1EB8  3420               	retlw	32
  2202     1EB9  340D               	retlw	13
  2203     1EBA  340A               	retlw	10
  2204                           
  2205                           	psect	stringtext1
  2206     0403                     __pstringtext1:
  2207     0403                     _ps2ExtUsbMap:
  2208     0403  3400               	retlw	0
  2209     0404  3400               	retlw	0
  2210     0405  3400               	retlw	0
  2211     0406  3400               	retlw	0
  2212     0407  3400               	retlw	0
  2213     0408  3400               	retlw	0
  2214     0409  3400               	retlw	0
  2215     040A  3400               	retlw	0
  2216     040B  3400               	retlw	0
  2217     040C  3400               	retlw	0
  2218     040D  3400               	retlw	0
  2219     040E  3400               	retlw	0
  2220     040F  3400               	retlw	0
  2221     0410  3400               	retlw	0
  2222     0411  3400               	retlw	0
  2223     0412  3400               	retlw	0
  2224     0413  3400               	retlw	0
  2225     0414  34E6               	retlw	230
  2226     0415  3400               	retlw	0
  2227     0416  3400               	retlw	0
  2228     0417  34E4               	retlw	228
  2229     0418  3400               	retlw	0
  2230     0419  3400               	retlw	0
  2231     041A  3400               	retlw	0
  2232     041B  3400               	retlw	0
  2233     041C  3400               	retlw	0
  2234     041D  3400               	retlw	0
  2235     041E  3400               	retlw	0
  2236     041F  3400               	retlw	0
  2237     0420  3400               	retlw	0
  2238     0421  3400               	retlw	0
  2239     0422  34E3               	retlw	227
  2240     0423  3400               	retlw	0
  2241     0424  3400               	retlw	0
  2242     0425  3400               	retlw	0
  2243     0426  3400               	retlw	0
  2244     0427  3400               	retlw	0
  2245     0428  3400               	retlw	0
  2246     0429  3400               	retlw	0
  2247     042A  34E7               	retlw	231
  2248     042B  3400               	retlw	0
  2249     042C  3400               	retlw	0
  2250     042D  3400               	retlw	0
  2251     042E  3400               	retlw	0
  2252     042F  3400               	retlw	0
  2253     0430  3400               	retlw	0
  2254     0431  3400               	retlw	0
  2255     0432  3465               	retlw	101
  2256     0433  3400               	retlw	0
  2257     0434  3400               	retlw	0
  2258     0435  3400               	retlw	0
  2259     0436  3400               	retlw	0
  2260     0437  3400               	retlw	0
  2261     0438  3400               	retlw	0
  2262     0439  3400               	retlw	0
  2263     043A  3400               	retlw	0
  2264     043B  3400               	retlw	0
  2265     043C  3400               	retlw	0
  2266     043D  3400               	retlw	0
  2267     043E  3400               	retlw	0
  2268     043F  3400               	retlw	0
  2269     0440  3400               	retlw	0
  2270     0441  3400               	retlw	0
  2271     0442  3400               	retlw	0
  2272     0443  3400               	retlw	0
  2273     0444  3400               	retlw	0
  2274     0445  3400               	retlw	0
  2275     0446  3400               	retlw	0
  2276     0447  3400               	retlw	0
  2277     0448  3400               	retlw	0
  2278     0449  3400               	retlw	0
  2279     044A  3400               	retlw	0
  2280     044B  3400               	retlw	0
  2281     044C  3400               	retlw	0
  2282     044D  3454               	retlw	84
  2283     044E  3400               	retlw	0
  2284     044F  3400               	retlw	0
  2285     0450  3400               	retlw	0
  2286     0451  3400               	retlw	0
  2287     0452  3400               	retlw	0
  2288     0453  3400               	retlw	0
  2289     0454  3400               	retlw	0
  2290     0455  3400               	retlw	0
  2291     0456  3400               	retlw	0
  2292     0457  3400               	retlw	0
  2293     0458  3400               	retlw	0
  2294     0459  3400               	retlw	0
  2295     045A  3400               	retlw	0
  2296     045B  3400               	retlw	0
  2297     045C  3400               	retlw	0
  2298     045D  3458               	retlw	88
  2299     045E  3400               	retlw	0
  2300     045F  3400               	retlw	0
  2301     0460  3400               	retlw	0
  2302     0461  3400               	retlw	0
  2303     0462  3400               	retlw	0
  2304     0463  3400               	retlw	0
  2305     0464  3400               	retlw	0
  2306     0465  3400               	retlw	0
  2307     0466  3400               	retlw	0
  2308     0467  3400               	retlw	0
  2309     0468  3400               	retlw	0
  2310     0469  3400               	retlw	0
  2311     046A  3400               	retlw	0
  2312     046B  3400               	retlw	0
  2313     046C  344D               	retlw	77
  2314     046D  3400               	retlw	0
  2315     046E  3450               	retlw	80
  2316     046F  344A               	retlw	74
  2317     0470  3400               	retlw	0
  2318     0471  3400               	retlw	0
  2319     0472  3400               	retlw	0
  2320     0473  3449               	retlw	73
  2321     0474  344C               	retlw	76
  2322     0475  3451               	retlw	81
  2323     0476  3400               	retlw	0
  2324     0477  344F               	retlw	79
  2325     0478  3452               	retlw	82
  2326     0479  3400               	retlw	0
  2327     047A  3400               	retlw	0
  2328     047B  3400               	retlw	0
  2329     047C  3400               	retlw	0
  2330     047D  344E               	retlw	78
  2331     047E  3400               	retlw	0
  2332     047F  3446               	retlw	70
  2333     0480  344B               	retlw	75
  2334     0481  3400               	retlw	0
  2335     0482  3400               	retlw	0
  2336     0483  3400               	retlw	0
  2337     0484  3400               	retlw	0
  2338     0485  3400               	retlw	0
  2339     0486  3400               	retlw	0
  2340     0487  3400               	retlw	0
  2341     0488  3400               	retlw	0
  2342     0489  3400               	retlw	0
  2343     048A  3400               	retlw	0
  2344     048B  3400               	retlw	0
  2345     048C  3400               	retlw	0
  2346     048D  3400               	retlw	0
  2347     048E  3400               	retlw	0
  2348     048F  3400               	retlw	0
  2349     0490  3400               	retlw	0
  2350     0491  3400               	retlw	0
  2351     0492  3400               	retlw	0
  2352     0493  3400               	retlw	0
  2353     0494  3400               	retlw	0
  2354     0495  3400               	retlw	0
  2355     0496  3400               	retlw	0
  2356     0497  3400               	retlw	0
  2357     0498  3400               	retlw	0
  2358     0499  3400               	retlw	0
  2359     049A  3400               	retlw	0
  2360     049B  3400               	retlw	0
  2361     049C  3400               	retlw	0
  2362     049D  3400               	retlw	0
  2363     049E  3400               	retlw	0
  2364     049F  3400               	retlw	0
  2365     04A0  3400               	retlw	0
  2366     04A1  3400               	retlw	0
  2367     04A2  3400               	retlw	0
  2368     04A3  3400               	retlw	0
  2369     04A4  3400               	retlw	0
  2370     04A5  3400               	retlw	0
  2371     04A6  3400               	retlw	0
  2372     04A7  3400               	retlw	0
  2373     04A8  3400               	retlw	0
  2374     04A9  3400               	retlw	0
  2375     04AA  3400               	retlw	0
  2376     04AB  3400               	retlw	0
  2377     04AC  3400               	retlw	0
  2378     04AD  3400               	retlw	0
  2379     04AE  3400               	retlw	0
  2380     04AF  3400               	retlw	0
  2381     04B0  3400               	retlw	0
  2382     04B1  3400               	retlw	0
  2383     04B2  3400               	retlw	0
  2384     04B3  3400               	retlw	0
  2385     04B4  3400               	retlw	0
  2386     04B5  3400               	retlw	0
  2387     04B6  3400               	retlw	0
  2388     04B7  3400               	retlw	0
  2389     04B8  3400               	retlw	0
  2390     04B9  3400               	retlw	0
  2391     04BA  3400               	retlw	0
  2392     04BB  3400               	retlw	0
  2393     04BC  3400               	retlw	0
  2394     04BD  3400               	retlw	0
  2395     04BE  3400               	retlw	0
  2396     04BF  3400               	retlw	0
  2397     04C0  3400               	retlw	0
  2398     04C1  3400               	retlw	0
  2399     04C2  3400               	retlw	0
  2400     04C3  3400               	retlw	0
  2401     04C4  3400               	retlw	0
  2402     04C5  3400               	retlw	0
  2403     04C6  3400               	retlw	0
  2404     04C7  3400               	retlw	0
  2405     04C8  3400               	retlw	0
  2406     04C9  3400               	retlw	0
  2407     04CA  3400               	retlw	0
  2408     04CB  3400               	retlw	0
  2409     04CC  3400               	retlw	0
  2410     04CD  3400               	retlw	0
  2411     04CE  3400               	retlw	0
  2412     04CF  3400               	retlw	0
  2413     04D0  3400               	retlw	0
  2414     04D1  3400               	retlw	0
  2415     04D2  3400               	retlw	0
  2416     04D3  3400               	retlw	0
  2417     04D4  3400               	retlw	0
  2418     04D5  3400               	retlw	0
  2419     04D6  3400               	retlw	0
  2420     04D7  3400               	retlw	0
  2421     04D8  3400               	retlw	0
  2422     04D9  3400               	retlw	0
  2423     04DA  3400               	retlw	0
  2424     04DB  3400               	retlw	0
  2425     04DC  3400               	retlw	0
  2426     04DD  3400               	retlw	0
  2427     04DE  3400               	retlw	0
  2428     04DF  3400               	retlw	0
  2429     04E0  3400               	retlw	0
  2430     04E1  3400               	retlw	0
  2431     04E2  3400               	retlw	0
  2432     04E3  3400               	retlw	0
  2433     04E4  3400               	retlw	0
  2434     04E5  3400               	retlw	0
  2435     04E6  3400               	retlw	0
  2436     04E7  3400               	retlw	0
  2437     04E8  3400               	retlw	0
  2438     04E9  3400               	retlw	0
  2439     04EA  3400               	retlw	0
  2440     04EB  3400               	retlw	0
  2441     04EC  3400               	retlw	0
  2442     04ED  3400               	retlw	0
  2443     04EE  3400               	retlw	0
  2444     04EF  3400               	retlw	0
  2445     04F0  3400               	retlw	0
  2446     04F1  3400               	retlw	0
  2447     04F2  3400               	retlw	0
  2448     04F3  3400               	retlw	0
  2449     04F4  3400               	retlw	0
  2450     04F5  3400               	retlw	0
  2451     04F6  3400               	retlw	0
  2452     04F7  3400               	retlw	0
  2453     04F8  3400               	retlw	0
  2454     04F9  3400               	retlw	0
  2455     04FA  3400               	retlw	0
  2456     04FB  3400               	retlw	0
  2457     04FC  3400               	retlw	0
  2458     04FD  3400               	retlw	0
  2459     04FE  3400               	retlw	0
  2460     04FF  3400               	retlw	0
  2461     0500  3400               	retlw	0
  2462     0501  3400               	retlw	0
  2463     0502                     __end_of_ps2ExtUsbMap:
  2464                           
  2465                           	psect	stringtext2
  2466     1000                     __pstringtext2:
  2467     1000                     _ps2UsbMap:
  2468     1000  3400               	retlw	0
  2469     1001  3442               	retlw	66
  2470     1002  3400               	retlw	0
  2471     1003  343E               	retlw	62
  2472     1004  343C               	retlw	60
  2473     1005  343A               	retlw	58
  2474     1006  343B               	retlw	59
  2475     1007  3445               	retlw	69
  2476     1008  3400               	retlw	0
  2477     1009  3443               	retlw	67
  2478     100A  3441               	retlw	65
  2479     100B  343F               	retlw	63
  2480     100C  343D               	retlw	61
  2481     100D  342B               	retlw	43
  2482     100E  3435               	retlw	53
  2483     100F  3400               	retlw	0
  2484     1010  3400               	retlw	0
  2485     1011  34E2               	retlw	226
  2486     1012  34E1               	retlw	225
  2487     1013  3400               	retlw	0
  2488     1014  34E0               	retlw	224
  2489     1015  3414               	retlw	20
  2490     1016  341E               	retlw	30
  2491     1017  3400               	retlw	0
  2492     1018  3400               	retlw	0
  2493     1019  3400               	retlw	0
  2494     101A  341D               	retlw	29
  2495     101B  3416               	retlw	22
  2496     101C  3404               	retlw	4
  2497     101D  341A               	retlw	26
  2498     101E  341F               	retlw	31
  2499     101F  3400               	retlw	0
  2500     1020  3400               	retlw	0
  2501     1021  3406               	retlw	6
  2502     1022  341B               	retlw	27
  2503     1023  3407               	retlw	7
  2504     1024  3408               	retlw	8
  2505     1025  3421               	retlw	33
  2506     1026  3420               	retlw	32
  2507     1027  3400               	retlw	0
  2508     1028  3400               	retlw	0
  2509     1029  342C               	retlw	44
  2510     102A  3419               	retlw	25
  2511     102B  3409               	retlw	9
  2512     102C  3417               	retlw	23
  2513     102D  3415               	retlw	21
  2514     102E  3422               	retlw	34
  2515     102F  3400               	retlw	0
  2516     1030  3400               	retlw	0
  2517     1031  3411               	retlw	17
  2518     1032  3405               	retlw	5
  2519     1033  340B               	retlw	11
  2520     1034  340A               	retlw	10
  2521     1035  341C               	retlw	28
  2522     1036  3423               	retlw	35
  2523     1037  3400               	retlw	0
  2524     1038  3400               	retlw	0
  2525     1039  3400               	retlw	0
  2526     103A  3410               	retlw	16
  2527     103B  340D               	retlw	13
  2528     103C  3418               	retlw	24
  2529     103D  3424               	retlw	36
  2530     103E  3425               	retlw	37
  2531     103F  3400               	retlw	0
  2532     1040  3400               	retlw	0
  2533     1041  3436               	retlw	54
  2534     1042  340E               	retlw	14
  2535     1043  340C               	retlw	12
  2536     1044  3412               	retlw	18
  2537     1045  3427               	retlw	39
  2538     1046  3426               	retlw	38
  2539     1047  3400               	retlw	0
  2540     1048  3400               	retlw	0
  2541     1049  3437               	retlw	55
  2542     104A  3438               	retlw	56
  2543     104B  340F               	retlw	15
  2544     104C  3433               	retlw	51
  2545     104D  3413               	retlw	19
  2546     104E  342D               	retlw	45
  2547     104F  3400               	retlw	0
  2548     1050  3400               	retlw	0
  2549     1051  3400               	retlw	0
  2550     1052  3434               	retlw	52
  2551     1053  3400               	retlw	0
  2552     1054  342F               	retlw	47
  2553     1055  342E               	retlw	46
  2554     1056  3400               	retlw	0
  2555     1057  3400               	retlw	0
  2556     1058  3439               	retlw	57
  2557     1059  34E5               	retlw	229
  2558     105A  3428               	retlw	40
  2559     105B  3430               	retlw	48
  2560     105C  3400               	retlw	0
  2561     105D  3431               	retlw	49
  2562     105E  3400               	retlw	0
  2563     105F  3400               	retlw	0
  2564     1060  3400               	retlw	0
  2565     1061  3400               	retlw	0
  2566     1062  3400               	retlw	0
  2567     1063  3400               	retlw	0
  2568     1064  3400               	retlw	0
  2569     1065  3400               	retlw	0
  2570     1066  342A               	retlw	42
  2571     1067  3400               	retlw	0
  2572     1068  3400               	retlw	0
  2573     1069  341E               	retlw	30
  2574     106A  3400               	retlw	0
  2575     106B  3421               	retlw	33
  2576     106C  3424               	retlw	36
  2577     106D  3400               	retlw	0
  2578     106E  3400               	retlw	0
  2579     106F  3400               	retlw	0
  2580     1070  3427               	retlw	39
  2581     1071  3437               	retlw	55
  2582     1072  341F               	retlw	31
  2583     1073  3422               	retlw	34
  2584     1074  3423               	retlw	35
  2585     1075  3425               	retlw	37
  2586     1076  3429               	retlw	41
  2587     1077  3453               	retlw	83
  2588     1078  3444               	retlw	68
  2589     1079  342E               	retlw	46
  2590     107A  3420               	retlw	32
  2591     107B  342D               	retlw	45
  2592     107C  3425               	retlw	37
  2593     107D  3426               	retlw	38
  2594     107E  3400               	retlw	0
  2595     107F  3400               	retlw	0
  2596     1080  3400               	retlw	0
  2597     1081  3400               	retlw	0
  2598     1082  3400               	retlw	0
  2599     1083  3440               	retlw	64
  2600     1084                     __end_of_ps2UsbMap:
  2601                           
  2602                           	psect	stringtext3
  2603     18CA                     __pstringtext3:
  2604     18CA                     _USB_SD_Ptr:
  2605     18CA  34D0               	retlw	low (_sd000| (0+32768))
  2606     18CB  3498               	retlw	high (_sd000| (0+32768))
  2607     18CC  343F               	retlw	low (_sd001| (0+32768))
  2608     18CD  3498               	retlw	high (_sd001| (0+32768))
  2609     18CE  349C               	retlw	low (_sd002| (0+32768))
  2610     18CF  3498               	retlw	high (_sd002| (0+32768))
  2611     18D0                     __end_of_USB_SD_Ptr:
  2612                           
  2613                           	psect	stringtext4
  2614     18D4                     __pstringtext4:
  2615     18D4                     _USB_CD_Ptr:
  2616     18D4  3473               	retlw	low (_configDescriptor1| (0+32768))
  2617     18D5  3498               	retlw	high (_configDescriptor1| (0+32768))
  2618     18D6                     __end_of_USB_CD_Ptr:
  2619                           
  2620                           	psect	stringtext5
  2621     1800                     __pstringtext5:
  2622     1800                     _hid_rpt01:
  2623     1800  3405               	retlw	5
  2624     1801  3401               	retlw	1
  2625     1802  3409               	retlw	9
  2626     1803  3406               	retlw	6
  2627     1804  34A1               	retlw	161
  2628     1805  3401               	retlw	1
  2629     1806  3405               	retlw	5
  2630     1807  3407               	retlw	7
  2631     1808  3419               	retlw	25
  2632     1809  34E0               	retlw	224
  2633     180A  3429               	retlw	41
  2634     180B  34E7               	retlw	231
  2635     180C  3415               	retlw	21
  2636     180D  3400               	retlw	0
  2637     180E  3425               	retlw	37
  2638     180F  3401               	retlw	1
  2639     1810  3475               	retlw	117
  2640     1811  3401               	retlw	1
  2641     1812  3495               	retlw	149
  2642     1813  3408               	retlw	8
  2643     1814  3481               	retlw	129
  2644     1815  3402               	retlw	2
  2645     1816  3495               	retlw	149
  2646     1817  3401               	retlw	1
  2647     1818  3475               	retlw	117
  2648     1819  3408               	retlw	8
  2649     181A  3481               	retlw	129
  2650     181B  3403               	retlw	3
  2651     181C  3495               	retlw	149
  2652     181D  3405               	retlw	5
  2653     181E  3475               	retlw	117
  2654     181F  3401               	retlw	1
  2655     1820  3405               	retlw	5
  2656     1821  3408               	retlw	8
  2657     1822  3419               	retlw	25
  2658     1823  3401               	retlw	1
  2659     1824  3429               	retlw	41
  2660     1825  3405               	retlw	5
  2661     1826  3491               	retlw	145
  2662     1827  3402               	retlw	2
  2663     1828  3495               	retlw	149
  2664     1829  3401               	retlw	1
  2665     182A  3475               	retlw	117
  2666     182B  3403               	retlw	3
  2667     182C  3491               	retlw	145
  2668     182D  3403               	retlw	3
  2669     182E  3495               	retlw	149
  2670     182F  3406               	retlw	6
  2671     1830  3475               	retlw	117
  2672     1831  3408               	retlw	8
  2673     1832  3415               	retlw	21
  2674     1833  3400               	retlw	0
  2675     1834  3425               	retlw	37
  2676     1835  3465               	retlw	101
  2677     1836  3405               	retlw	5
  2678     1837  3407               	retlw	7
  2679     1838  3419               	retlw	25
  2680     1839  3400               	retlw	0
  2681     183A  3429               	retlw	41
  2682     183B  3465               	retlw	101
  2683     183C  3481               	retlw	129
  2684     183D  3400               	retlw	0
  2685     183E  34C0               	retlw	192
  2686     183F                     __end_of_hid_rpt01:
  2687                           
  2688                           	psect	stringtext6
  2689     183F                     __pstringtext6:
  2690     183F                     _sd001:
  2691     183F  3434               	retlw	52
  2692     1840  3403               	retlw	3
  2693     1841  344D               	retlw	77
  2694     1842  3400               	retlw	0
  2695     1843  3469               	retlw	105
  2696     1844  3400               	retlw	0
  2697     1845  3463               	retlw	99
  2698     1846  3400               	retlw	0
  2699     1847  3472               	retlw	114
  2700     1848  3400               	retlw	0
  2701     1849  346F               	retlw	111
  2702     184A  3400               	retlw	0
  2703     184B  3463               	retlw	99
  2704     184C  3400               	retlw	0
  2705     184D  3468               	retlw	104
  2706     184E  3400               	retlw	0
  2707     184F  3469               	retlw	105
  2708     1850  3400               	retlw	0
  2709     1851  3470               	retlw	112
  2710     1852  3400               	retlw	0
  2711     1853  3420               	retlw	32
  2712     1854  3400               	retlw	0
  2713     1855  3454               	retlw	84
  2714     1856  3400               	retlw	0
  2715     1857  3465               	retlw	101
  2716     1858  3400               	retlw	0
  2717     1859  3463               	retlw	99
  2718     185A  3400               	retlw	0
  2719     185B  3468               	retlw	104
  2720     185C  3400               	retlw	0
  2721     185D  346E               	retlw	110
  2722     185E  3400               	retlw	0
  2723     185F  346F               	retlw	111
  2724     1860  3400               	retlw	0
  2725     1861  346C               	retlw	108
  2726     1862  3400               	retlw	0
  2727     1863  346F               	retlw	111
  2728     1864  3400               	retlw	0
  2729     1865  3467               	retlw	103
  2730     1866  3400               	retlw	0
  2731     1867  3479               	retlw	121
  2732     1868  3400               	retlw	0
  2733     1869  3420               	retlw	32
  2734     186A  3400               	retlw	0
  2735     186B  3449               	retlw	73
  2736     186C  3400               	retlw	0
  2737     186D  346E               	retlw	110
  2738     186E  3400               	retlw	0
  2739     186F  3463               	retlw	99
  2740     1870  3400               	retlw	0
  2741     1871  342E               	retlw	46
  2742     1872  3400               	retlw	0
  2743     1873                     __end_of_sd001:
  2744                           
  2745                           	psect	stringtext7
  2746     1873                     __pstringtext7:
  2747     1873                     _configDescriptor1:
  2748     1873  3409               	retlw	9
  2749     1874  3402               	retlw	2
  2750     1875  3429               	retlw	41
  2751     1876  3400               	retlw	0
  2752     1877  3401               	retlw	1
  2753     1878  3401               	retlw	1
  2754     1879  3400               	retlw	0
  2755     187A  34C0               	retlw	192
  2756     187B  3432               	retlw	50
  2757     187C  3409               	retlw	9
  2758     187D  3404               	retlw	4
  2759     187E  3400               	retlw	0
  2760     187F  3400               	retlw	0
  2761     1880  3402               	retlw	2
  2762     1881  3403               	retlw	3
  2763     1882  3401               	retlw	1
  2764     1883  3401               	retlw	1
  2765     1884  3400               	retlw	0
  2766     1885  3409               	retlw	9
  2767     1886  3421               	retlw	33
  2768     1887  3411               	retlw	17
  2769     1888  3401               	retlw	1
  2770     1889  3400               	retlw	0
  2771     188A  3401               	retlw	1
  2772     188B  3422               	retlw	34
  2773     188C  343F               	retlw	63
  2774     188D  3400               	retlw	0
  2775     188E  3407               	retlw	7
  2776     188F  3405               	retlw	5
  2777     1890  3481               	retlw	129
  2778     1891  3403               	retlw	3
  2779     1892  3408               	retlw	8
  2780     1893  3400               	retlw	0
  2781     1894  3401               	retlw	1
  2782     1895  3407               	retlw	7
  2783     1896  3405               	retlw	5
  2784     1897  3401               	retlw	1
  2785     1898  3403               	retlw	3
  2786     1899  3408               	retlw	8
  2787     189A  3400               	retlw	0
  2788     189B  3401               	retlw	1
  2789     189C                     __end_of_configDescriptor1:
  2790                           
  2791                           	psect	stringtext8
  2792     189C                     __pstringtext8:
  2793     189C                     _sd002:
  2794     189C  341C               	retlw	28
  2795     189D  3403               	retlw	3
  2796     189E  344B               	retlw	75
  2797     189F  3400               	retlw	0
  2798     18A0  3465               	retlw	101
  2799     18A1  3400               	retlw	0
  2800     18A2  3479               	retlw	121
  2801     18A3  3400               	retlw	0
  2802     18A4  3462               	retlw	98
  2803     18A5  3400               	retlw	0
  2804     18A6  346F               	retlw	111
  2805     18A7  3400               	retlw	0
  2806     18A8  3461               	retlw	97
  2807     18A9  3400               	retlw	0
  2808     18AA  3472               	retlw	114
  2809     18AB  3400               	retlw	0
  2810     18AC  3464               	retlw	100
  2811     18AD  3400               	retlw	0
  2812     18AE  3420               	retlw	32
  2813     18AF  3400               	retlw	0
  2814     18B0  3444               	retlw	68
  2815     18B1  3400               	retlw	0
  2816     18B2  3465               	retlw	101
  2817     18B3  3400               	retlw	0
  2818     18B4  346D               	retlw	109
  2819     18B5  3400               	retlw	0
  2820     18B6  346F               	retlw	111
  2821     18B7  3400               	retlw	0
  2822     18B8                     __end_of_sd002:
  2823                           
  2824                           	psect	stringtext9
  2825     18B8                     __pstringtext9:
  2826     18B8                     _device_dsc:
  2827     18B8  3412               	retlw	18
  2828     18B9  3401               	retlw	1
  2829     18BA  3400               	retlw	0
  2830     18BB  3402               	retlw	2
  2831     18BC  3400               	retlw	0
  2832     18BD  3400               	retlw	0
  2833     18BE  3400               	retlw	0
  2834     18BF  3408               	retlw	8
  2835     18C0  34D8               	retlw	216
  2836     18C1  3404               	retlw	4
  2837     18C2  3455               	retlw	85
  2838     18C3  3400               	retlw	0
  2839     18C4  3401               	retlw	1
  2840     18C5  3400               	retlw	0
  2841     18C6  3401               	retlw	1
  2842     18C7  3402               	retlw	2
  2843     18C8  3400               	retlw	0
  2844     18C9  3401               	retlw	1
  2845     18CA                     __end_of_device_dsc:
  2846                           
  2847                           	psect	stringtext10
  2848     18D0                     __pstringtext10:
  2849     18D0                     _sd000:
  2850     18D0  3404               	retlw	4
  2851     18D1  3403               	retlw	3
  2852     18D2  3409               	retlw	9
  2853     18D3  3404               	retlw	4
  2854     18D4                     __end_of_sd000:
  2855                           
  2856                           	psect	nvBANK2
  2857     016A                     __pnvBANK2:
  2858     016A                     _IOCAF5_InterruptHandler:
  2859     016A                     	ds	2
  2860     016C                     _IOCAF4_InterruptHandler:
  2861     016C                     	ds	2
  2862     000C                     _PORTAbits	set	12
  2863     001C                     _T2CONbits	set	28
  2864     001C                     _T2CON	set	28
  2865     001A                     _TMR2	set	26
  2866     001B                     _PR2	set	27
  2867     0011                     _PIR1bits	set	17
  2868     0012                     _PIR2bits	set	18
  2869     000B                     _INTCONbits	set	11
  2870     008C                     _TRISAbits	set	140
  2871     0091                     _PIE1bits	set	145
  2872     0092                     _PIE2bits	set	146
  2873     0097                     _WDTCON	set	151
  2874     0098                     _OSCTUNE	set	152
  2875     0099                     _OSCCON	set	153
  2876     0095                     _OPTION_REGbits	set	149
  2877     008E                     _TRISC	set	142
  2878     008D                     _TRISB	set	141
  2879     008C                     _TRISA	set	140
  2880     04D6                     _PLLRDY	set	1238
  2881     010C                     _LATAbits	set	268
  2882     0116                     _BORCON	set	278
  2883     011D                     _APFCON	set	285
  2884     010E                     _LATC	set	270
  2885     010D                     _LATB	set	269
  2886     010C                     _LATA	set	268
  2887     0199                     _RCREG	set	409
  2888     019D                     _RCSTAbits	set	413
  2889     019A                     _TXREG	set	410
  2890     019C                     _SPBRGH	set	412
  2891     019B                     _SPBRGL	set	411
  2892     019E                     _TXSTA	set	414
  2893     019D                     _RCSTA	set	413
  2894     019F                     _BAUDCON	set	415
  2895     018C                     _ANSELA	set	396
  2896     018D                     _ANSELB	set	397
  2897     018E                     _ANSELC	set	398
  2898     020C                     _WPUA	set	524
  2899     020D                     _WPUB	set	525
  2900     039B                     _ACTCON	set	923
  2901     0391                     _IOCAPbits	set	913
  2902     0392                     _IOCANbits	set	914
  2903     0393                     _IOCAFbits	set	915
  2904     0E98                     _UEP0bits	set	3736
  2905     0E8E                     _UCON	set	3726
  2906     0E8F                     _USTAT	set	3727
  2907     0E92                     _UIEbits	set	3730
  2908     0E90                     _UIRbits	set	3728
  2909     0E96                     _UADDR	set	3734
  2910     0E8E                     _UCONbits	set	3726
  2911     0E92                     _UIE	set	3730
  2912     0E97                     _UEIE	set	3735
  2913     0E91                     _UCFG	set	3729
  2914     0E90                     _UIR	set	3728
  2915     0E93                     _UEIR	set	3731
  2916     0E99                     _UEP1	set	3737
  2917     0E98                     _UEP0	set	3736
  2918                           
  2919                           	psect	cinit
  2920     003F                     start_initialization:	
  2921                           ; #config settings
  2922                           
  2923     003F                     __initialization:	;BIGRAM
  2924                           
  2925                           ; Initialize objects allocated to BANK3
  2926     003F  30B5               	movlw	low __pidataBANK3
  2927     0040  0084               	movwf	4
  2928     0041  309E               	movlw	(high __pidataBANK3)| (0+128)
  2929     0042  0085               	movwf	5
  2930     0043  0023               	movlb	3	; select bank3
  2931     0044  0012               	moviw fsr0++
  2932     0045  00C7               	movwf	__pdataBANK3& (0+127)
  2933     0046  0012               	moviw fsr0++
  2934     0047  00C8               	movwf	(__pdataBANK3+1)& (0+127)
  2935     0048  0012               	moviw fsr0++
  2936     0049  00C9               	movwf	(__pdataBANK3+2)& (0+127)
  2937     004A  0012               	moviw fsr0++
  2938     004B  00CA               	movwf	(__pdataBANK3+3)& (0+127)
  2939     004C  0012               	moviw fsr0++
  2940     004D  00CB               	movwf	(__pdataBANK3+4)& (0+127)
  2941     004E  0012               	moviw fsr0++
  2942     004F  00CC               	movwf	(__pdataBANK3+5)& (0+127)
  2943                           
  2944                           ; Clear objects allocated to BIGRAM
  2945     0050  302C               	movlw	low (0+9004)
  2946     0051  0084               	movwf	4
  2947     0052  3023               	movlw	high (0+9004)
  2948     0053  0085               	movwf	5
  2949     0054  30C4               	movlw	196
  2950     0055  00FE               	movwf	btemp
  2951     0056  3000               	movlw	0
  2952     0057  00FF               	movwf	btemp+1
  2953     0058  319F  2749  3180   	fcall	clear_ram0
  2954                           
  2955                           ; Clear objects allocated to BANK0
  2956     005B  3061               	movlw	low __pbssBANK0
  2957     005C  0084               	movwf	4
  2958     005D  3000               	movlw	high __pbssBANK0
  2959     005E  0085               	movwf	5
  2960     005F  300F               	movlw	15
  2961     0060  00FE               	movwf	btemp
  2962     0061  3000               	movlw	0
  2963     0062  00FF               	movwf	btemp+1
  2964     0063  319F  2749  3180   	fcall	clear_ram0
  2965                           
  2966                           ; Clear objects allocated to BANK1
  2967     0066  0021               	movlb	1	; select bank1
  2968     0067  01E8               	clrf	__pbssBANK1& (0+127)
  2969     0068  01E9               	clrf	(__pbssBANK1+1)& (0+127)
  2970     0069  01EA               	clrf	(__pbssBANK1+2)& (0+127)
  2971     006A  01EB               	clrf	(__pbssBANK1+3)& (0+127)
  2972     006B  01EC               	clrf	(__pbssBANK1+4)& (0+127)
  2973     006C  01ED               	clrf	(__pbssBANK1+5)& (0+127)
  2974     006D  01EE               	clrf	(__pbssBANK1+6)& (0+127)
  2975     006E  01EF               	clrf	(__pbssBANK1+7)& (0+127)
  2976                           
  2977                           ; Clear objects allocated to BANK2
  2978     006F  3021               	movlw	low __pbssBANK2
  2979     0070  0084               	movwf	4
  2980     0071  3001               	movlw	high __pbssBANK2
  2981     0072  0085               	movwf	5
  2982     0073  3049               	movlw	73
  2983     0074  00FE               	movwf	btemp
  2984     0075  3000               	movlw	0
  2985     0076  00FF               	movwf	btemp+1
  2986     0077  319F  2749  3180   	fcall	clear_ram0
  2987                           
  2988                           ; Clear objects allocated to BANK3
  2989     007A  30A0               	movlw	low __pbssBANK3
  2990     007B  0084               	movwf	4
  2991     007C  3001               	movlw	high __pbssBANK3
  2992     007D  0085               	movwf	5
  2993     007E  3027               	movlw	39
  2994     007F  00FE               	movwf	btemp
  2995     0080  3000               	movlw	0
  2996     0081  00FF               	movwf	btemp+1
  2997     0082  319F  2749         	fcall	clear_ram0
  2998     0084                     end_of_initialization:	
  2999                           ;End of C runtime variable initialization code
  3000                           
  3001     0084                     __end_of__initialization:
  3002     0084  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3003     0085  0020               	movlb	0
  3004     0086  3188  2817         	ljmp	_main	;jump to C main() function
  3005                           
  3006                           	psect	bssBANK0
  3007     0061                     __pbssBANK0:
  3008     0061                     _pBDTEntryIn:
  3009     0061                     	ds	4
  3010     0065                     _SOFCounter:
  3011     0065                     	ds	2
  3012     0067                     _pBDTEntryEP0OutNext:
  3013     0067                     	ds	2
  3014     0069                     _keyboardCommandCount:
  3015     0069                     	ds	1
  3016     006A                     _controlTransferState:
  3017     006A                     	ds	1
  3018     006B                     _pBDTEntryEP0OutCurrent:
  3019     006B                     	ds	1
  3020     006C                     _USBDeviceState:
  3021     006C                     	ds	1
  3022     006D                     _USTATcopy:
  3023     006D                     	ds	1
  3024     006E                     _USBAlternateInterface:
  3025     006E                     	ds	1
  3026     006F                     _USBActiveConfiguration:
  3027     006F                     	ds	1
  3028                           
  3029                           	psect	bssBANK1
  3030     00E8                     __pbssBANK1:
  3031     00E8                     _inPipes:
  3032     00E8                     	ds	5
  3033     00ED                     _shortPacketStatus:
  3034     00ED                     	ds	1
  3035     00EE                     _eusartRxHead:
  3036     00EE                     	ds	1
  3037     00EF                     _eusartTxBufferRemaining:
  3038     00EF                     	ds	1
  3039                           
  3040                           	psect	bssBANK2
  3041     0121                     __pbssBANK2:
  3042     0121                     _outPipes:
  3043     0121                     	ds	7
  3044     0128                     _timeMs:
  3045     0128                     	ds	4
  3046     012C                     _prevTimeMs:
  3047     012C                     	ds	4
  3048     0130                     _pBDTEntryOut:
  3049     0130                     	ds	4
  3050     0134                     _OldSOFCount:
  3051     0134                     	ds	2
  3052     0136                     _LocalSOFCount:
  3053     0136                     	ds	2
  3054     0138                     _keyboardIdleRate:
  3055     0138                     	ds	2
  3056     013A                     _ep_data_out:
  3057     013A                     	ds	2
  3058     013C                     _ep_data_in:
  3059     013C                     	ds	2
  3060     013E                     _EUSART_ErrorHandler:
  3061     013E                     	ds	2
  3062     0140                     _EUSART_OverrunErrorHandler:
  3063     0140                     	ds	2
  3064     0142                     _EUSART_FramingErrorHandler:
  3065     0142                     	ds	2
  3066     0144                     _TMR2_InterruptHandler:
  3067     0144                     	ds	2
  3068     0146                     _EUSART_RxDefaultInterruptHandler:
  3069     0146                     	ds	2
  3070     0148                     _EUSART_TxDefaultInterruptHandler:
  3071     0148                     	ds	2
  3072     014A                     _keyboardCommandOnes:
  3073     014A                     	ds	1
  3074     014B                     _keyboardCommandBits:
  3075     014B                     	ds	1
  3076     014C                     _keyboardCommand:
  3077     014C                     	ds	1
  3078     014D                     _keyboardIsBreak:
  3079     014D                     	ds	1
  3080     014E                     _keyboardIsExtend:
  3081     014E                     	ds	1
  3082     014F                     _keyboardData:
  3083     014F                     	ds	1
  3084     0150                     _keyboardScanCodeValid:
  3085     0150                     	ds	1
  3086     0151                     _keyboardOnesCount:
  3087     0151                     	ds	1
  3088     0152                     _keyboardIndexData:
  3089     0152                     	ds	1
  3090     0153                     _keyboardState:
  3091     0153                     	ds	1
  3092     0154                     _USBTicksSinceSuspendEnd:
  3093     0154                     	ds	1
  3094     0155                     _USBDeferOUTDataStagePackets:
  3095     0155                     	ds	1
  3096     0156                     _USBDeferINDataStagePackets:
  3097     0156                     	ds	1
  3098     0157                     _USBStatusStageEnabledFlag2:
  3099     0157                     	ds	1
  3100     0158                     _USBStatusStageEnabledFlag1:
  3101     0158                     	ds	1
  3102     0159                     _USBDeferStatusStagePacket:
  3103     0159                     	ds	1
  3104     015A                     _USBStatusStageTimeoutCounter:
  3105     015A                     	ds	1
  3106     015B                     _BothEP0OutUOWNsSet:
  3107     015B                     	ds	1
  3108     015C                     _endpoint_number:
  3109     015C                     	ds	1
  3110     015D                     _USBBusIsSuspended:
  3111     015D                     	ds	1
  3112     015E                     _RemoteWakeup:
  3113     015E                     	ds	1
  3114     015F                     _pDst:
  3115     015F                     	ds	1
  3116     0160                     _eusartRxLastError:
  3117     0160                     	ds	1
  3118     0161                     _eusartRxCount:
  3119     0161                     	ds	1
  3120     0162                     _eusartRxTail:
  3121     0162                     	ds	1
  3122     0163                     _eusartTxTail:
  3123     0163                     	ds	1
  3124     0164                     _eusartTxHead:
  3125     0164                     	ds	1
  3126     0165                     _keyboardScanCode:
  3127     0165                     	ds	3
  3128     0168                     _active_protocol:
  3129     0168                     	ds	1
  3130     0169                     _idle_rate:
  3131     0169                     	ds	1
  3132                           
  3133                           	psect	bssBANK3
  3134     01A0                     __pbssBANK3:
  3135     01A0                     _oldInputReport:
  3136     01A0                     	ds	8
  3137     01A8                     _eusartRxStatusBuffer:
  3138     01A8                     	ds	8
  3139     01B0                     _eusartRxBuffer:
  3140     01B0                     	ds	8
  3141     01B8                     _eusartTxBuffer:
  3142     01B8                     	ds	8
  3143     01C0                     _USB1msTickCount:
  3144     01C0                     	ds	4
  3145     01C4                     main@F3448:
  3146     01C4                     	ds	3
  3147                           
  3148                           	psect	dataBANK3
  3149     01C7                     __pdataBANK3:
  3150     01C7                     main@F3452:
  3151     01C7                     	ds	6
  3152                           
  3153                           	psect	clrtext
  3154     1F49                     clear_ram0:	
  3155                           ;	Called with FSR0 containing the base address, and
  3156                           ;	btemp/btemp+1 has the size to clear
  3157                           
  3158     1F49  0064               	clrwdt	;clear the watchdog before getting into this loop
  3159     1F4A                     clrloop0:
  3160     1F4A  0180               	clrf	0	;clear RAM location pointed to by FSR
  3161     1F4B  3101               	addfsr 0,1
  3162     1F4C  3001               	movlw	1
  3163     1F4D  02FE               	subwf	126,f
  3164     1F4E  3000               	movlw	0
  3165     1F4F  3BFF               	subwfb	127,f
  3166     1F50  087F               	movf	127,w
  3167     1F51  047E               	iorwf	126,w
  3168     1F52  1903               	btfsc	3,2
  3169     1F53  3400               	retlw	0	;all done for this memory range, return
  3170     1F54  2F4A               	goto	clrloop0	;have we reached the end yet?
  3171                           
  3172                           	psect	cstackBANK1
  3173     00A8                     __pcstackBANK1:
  3174     00A8                     ?_IOCAF4_SetInterruptHandler:
  3175     00A8                     ?_IOCAF5_SetInterruptHandler:	
  3176                           ; 1 bytes @ 0x0
  3177                           
  3178     00A8                     ??_OSCILLATOR_Initialize:	
  3179                           ; 1 bytes @ 0x0
  3180                           
  3181     00A8                     ??_WDT_Initialize:	
  3182                           ; 1 bytes @ 0x0
  3183                           
  3184     00A8                     ??_USBDeviceInit:	
  3185                           ; 1 bytes @ 0x0
  3186                           
  3187     00A8                     ??_USBDeviceAttach:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190     00A8                     ?_TMR2_SetInterruptHandler:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193     00A8                     ?_EUSART_SetRxInterruptHandler:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196     00A8                     ?_EUSART_SetTxInterruptHandler:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199     00A8                     ?_EUSART_SetFramingErrorHandler:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202     00A8                     ?_EUSART_SetOverrunErrorHandler:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205     00A8                     ?_EUSART_SetErrorHandler:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208     00A8                     ?_memset:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211     00A8                     ?_GenericQueue_Init:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214     00A8                     ??_PS2USB_ScanCodeToUSBHID:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217     00A8                     ??_PS2Keyboard_GetLastCommand:	
  3218                           ; 1 bytes @ 0x0
  3219                           
  3220     00A8                     ??_PS2Keyboard_SendCommand:	
  3221                           ; 1 bytes @ 0x0
  3222                           
  3223     00A8                     ??_TMR2_StartTimer:	
  3224                           ; 1 bytes @ 0x0
  3225                           
  3226     00A8                     ??_EUSART_is_tx_ready:	
  3227                           ; 1 bytes @ 0x0
  3228                           
  3229     00A8                     ??_EUSART_Write:	
  3230                           ; 1 bytes @ 0x0
  3231                           
  3232     00A8                     ??_hex2str:	
  3233                           ; 1 bytes @ 0x0
  3234                           
  3235     00A8                     ?___bmul:	
  3236                           ; 1 bytes @ 0x0
  3237                           
  3238     00A8                     ?_USBTransferOnePacket:	
  3239                           ; 1 bytes @ 0x0
  3240                           
  3241     00A8                     ?_GenericQueue_IsEmpty:	
  3242                           ; 2 bytes @ 0x0
  3243                           
  3244     00A8                     ?_GenericQueue_IsFull:	
  3245                           ; 2 bytes @ 0x0
  3246                           
  3247     00A8                     ?___awmod:	
  3248                           ; 2 bytes @ 0x0
  3249                           
  3250     00A8                     USBTransferOnePacket@dir:	
  3251                           ; 2 bytes @ 0x0
  3252                           
  3253     00A8                     PS2Keyboard_SendCommand@cmd:	
  3254                           ; 1 bytes @ 0x0
  3255                           
  3256     00A8                     PS2USB_ScanCodeToUSBHID@scanCode:	
  3257                           ; 1 bytes @ 0x0
  3258                           
  3259     00A8                     hex2str@val:	
  3260                           ; 1 bytes @ 0x0
  3261                           
  3262     00A8                     ___bmul@multiplicand:	
  3263                           ; 1 bytes @ 0x0
  3264                           
  3265     00A8                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  3266                           ; 1 bytes @ 0x0
  3267                           
  3268     00A8                     IOCAF5_SetInterruptHandler@InterruptHandler:	
  3269                           ; 2 bytes @ 0x0
  3270                           
  3271     00A8                     TMR2_SetInterruptHandler@InterruptHandler:	
  3272                           ; 2 bytes @ 0x0
  3273                           
  3274     00A8                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3275                           ; 2 bytes @ 0x0
  3276                           
  3277     00A8                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3278                           ; 2 bytes @ 0x0
  3279                           
  3280     00A8                     EUSART_SetErrorHandler@interruptHandler:	
  3281                           ; 2 bytes @ 0x0
  3282                           
  3283     00A8                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3284                           ; 2 bytes @ 0x0
  3285                           
  3286     00A8                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3287                           ; 2 bytes @ 0x0
  3288                           
  3289     00A8                     GenericQueue_Init@q:	
  3290                           ; 2 bytes @ 0x0
  3291                           
  3292     00A8                     GenericQueue_IsEmpty@q:	
  3293                           ; 2 bytes @ 0x0
  3294                           
  3295     00A8                     GenericQueue_IsFull@q:	
  3296                           ; 2 bytes @ 0x0
  3297                           
  3298     00A8                     ___awmod@divisor:	
  3299                           ; 2 bytes @ 0x0
  3300                           
  3301     00A8                     memset@c:	
  3302                           ; 2 bytes @ 0x0
  3303                           
  3304                           
  3305                           ; 2 bytes @ 0x0
  3306     00A8                     	ds	1
  3307     00A9                     ??_APP_KeyboardProcessOutputReport:
  3308     00A9                     ??___bmul:	
  3309                           ; 1 bytes @ 0x1
  3310                           
  3311     00A9                     EUSART_Write@txData:	
  3312                           ; 1 bytes @ 0x1
  3313                           
  3314     00A9                     USBTransferOnePacket@data:	
  3315                           ; 1 bytes @ 0x1
  3316                           
  3317                           
  3318                           ; 2 bytes @ 0x1
  3319     00A9                     	ds	1
  3320     00AA                     ??_IOCAF4_SetInterruptHandler:
  3321     00AA                     ??_IOCAF5_SetInterruptHandler:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324     00AA                     ??_TMR2_Initialize:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327     00AA                     ??_EUSART_Initialize:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330     00AA                     ??_TMR2_SetInterruptHandler:	
  3331                           ; 1 bytes @ 0x2
  3332                           
  3333     00AA                     ??_EUSART_SetRxInterruptHandler:	
  3334                           ; 1 bytes @ 0x2
  3335                           
  3336     00AA                     ??_EUSART_SetTxInterruptHandler:	
  3337                           ; 1 bytes @ 0x2
  3338                           
  3339     00AA                     ??_EUSART_SetFramingErrorHandler:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342     00AA                     ??_EUSART_SetOverrunErrorHandler:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345     00AA                     ??_EUSART_SetErrorHandler:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348     00AA                     ??_SysTime_Init:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351     00AA                     ?_Log_Message:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354     00AA                     ??_GenericQueue_IsEmpty:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357     00AA                     ??_PIN_MANAGER_Initialize:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360     00AA                     ??_GenericQueue_IsFull:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363     00AA                     Log_Message@bufSize:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366     00AA                     ___bmul@product:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369     00AA                     GenericQueue_Init@element_size:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372     00AA                     ___awmod@dividend:	
  3373                           ; 2 bytes @ 0x2
  3374                           
  3375     00AA                     memset@n:	
  3376                           ; 2 bytes @ 0x2
  3377                           
  3378                           
  3379                           ; 2 bytes @ 0x2
  3380     00AA                     	ds	1
  3381     00AB                     ??_Log_Message:
  3382     00AB                     USBTransferOnePacket@len:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385     00AB                     ___bmul@multiplier:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388                           
  3389                           ; 1 bytes @ 0x3
  3390     00AB                     	ds	1
  3391     00AC                     ??_memset:
  3392     00AC                     ??_USBTransferOnePacket:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395     00AC                     ??_PS2Keyboard_Init:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398     00AC                     ?_Log_UtilityConvertByteToHex:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401     00AC                     ??_GenericQueue_Init:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404     00AC                     ??___awmod:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407     00AC                     Log_UtilityConvertByteToHex@buf:	
  3408                           ; 1 bytes @ 0x4
  3409                           
  3410     00AC                     Log_Message@buf:	
  3411                           ; 1 bytes @ 0x4
  3412                           
  3413     00AC                     USBDeviceInit@p:	
  3414                           ; 1 bytes @ 0x4
  3415                           
  3416                           
  3417                           ; 2 bytes @ 0x4
  3418     00AC                     	ds	1
  3419     00AD                     Log_UtilityConvertByteToHex@bufSize:
  3420     00AD                     Log_Message@i:	
  3421                           ; 1 bytes @ 0x5
  3422                           
  3423     00AD                     ___awmod@counter:	
  3424                           ; 1 bytes @ 0x5
  3425                           
  3426     00AD                     memset@p:	
  3427                           ; 1 bytes @ 0x5
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0x5
  3431     00AD                     	ds	1
  3432     00AE                     ??_Log_UtilityConvertByteToHex:
  3433     00AE                     USBDeviceInit@i_1369:	
  3434                           ; 1 bytes @ 0x6
  3435                           
  3436     00AE                     ___awmod@sign:	
  3437                           ; 1 bytes @ 0x6
  3438                           
  3439     00AE                     memset@dest:	
  3440                           ; 1 bytes @ 0x6
  3441                           
  3442                           
  3443                           ; 1 bytes @ 0x6
  3444     00AE                     	ds	1
  3445     00AF                     ?___wmul:
  3446     00AF                     USBDeviceInit@i:	
  3447                           ; 2 bytes @ 0x7
  3448                           
  3449     00AF                     Log_UtilityConvertByteToHex@d0:	
  3450                           ; 1 bytes @ 0x7
  3451                           
  3452     00AF                     ___wmul@multiplier:	
  3453                           ; 1 bytes @ 0x7
  3454                           
  3455                           
  3456                           ; 2 bytes @ 0x7
  3457     00AF                     	ds	1
  3458     00B0                     ??_SYSTEM_Initialize:
  3459     00B0                     USBTransferOnePacket@ep:	
  3460                           ; 1 bytes @ 0x8
  3461                           
  3462     00B0                     Log_UtilityConvertByteToHex@byte:	
  3463                           ; 1 bytes @ 0x8
  3464                           
  3465                           
  3466                           ; 1 bytes @ 0x8
  3467     00B0                     	ds	1
  3468     00B1                     Log_UtilityConvertByteToHex@d1:
  3469     00B1                     USBTransferOnePacket@handle:	
  3470                           ; 1 bytes @ 0x9
  3471                           
  3472     00B1                     ___wmul@multiplicand:	
  3473                           ; 2 bytes @ 0x9
  3474                           
  3475                           
  3476                           ; 2 bytes @ 0x9
  3477     00B1                     	ds	2
  3478     00B3                     ??___wmul:
  3479     00B3                     ___wmul@product:	
  3480                           ; 1 bytes @ 0xB
  3481                           
  3482                           
  3483                           ; 2 bytes @ 0xB
  3484     00B3                     	ds	2
  3485     00B5                     ?_memcpy:
  3486     00B5                     ?_memcmp:	
  3487                           ; 2 bytes @ 0xD
  3488                           
  3489     00B5                     memcmp@vl:	
  3490                           ; 2 bytes @ 0xD
  3491                           
  3492     00B5                     memcpy@d1:	
  3493                           ; 2 bytes @ 0xD
  3494                           
  3495                           
  3496                           ; 2 bytes @ 0xD
  3497     00B5                     	ds	2
  3498     00B7                     memcmp@vr:
  3499     00B7                     memcpy@s1:	
  3500                           ; 1 bytes @ 0xF
  3501                           
  3502                           
  3503                           ; 2 bytes @ 0xF
  3504     00B7                     	ds	1
  3505     00B8                     memcmp@n:
  3506                           
  3507                           ; 2 bytes @ 0x10
  3508     00B8                     	ds	1
  3509     00B9                     memcpy@n:
  3510                           
  3511                           ; 2 bytes @ 0x11
  3512     00B9                     	ds	1
  3513     00BA                     ??_memcmp:
  3514                           
  3515                           ; 1 bytes @ 0x12
  3516     00BA                     	ds	1
  3517     00BB                     ??_memcpy:
  3518     00BB                     memcmp@l:	
  3519                           ; 1 bytes @ 0x13
  3520                           
  3521     00BB                     memcpy@d:	
  3522                           ; 2 bytes @ 0x13
  3523                           
  3524                           
  3525                           ; 2 bytes @ 0x13
  3526     00BB                     	ds	2
  3527     00BD                     memcmp@r:
  3528     00BD                     memcpy@s:	
  3529                           ; 1 bytes @ 0x15
  3530                           
  3531                           
  3532                           ; 2 bytes @ 0x15
  3533     00BD                     	ds	1
  3534     00BE                     ?_GenericQueue_Contains:
  3535     00BE                     GenericQueue_Contains@q:	
  3536                           ; 1 bytes @ 0x16
  3537                           
  3538                           
  3539                           ; 2 bytes @ 0x16
  3540     00BE                     	ds	1
  3541     00BF                     memcpy@tmp:
  3542                           
  3543                           ; 1 bytes @ 0x17
  3544     00BF                     	ds	1
  3545     00C0                     ?_GenericQueue_CopyToArray:
  3546     00C0                     ?_GenericQueue_Remove:	
  3547                           ; 1 bytes @ 0x18
  3548                           
  3549     00C0                     ?_GenericQueue_Enqueue:	
  3550                           ; 1 bytes @ 0x18
  3551                           
  3552     00C0                     ?_GenericQueue_Dequeue:	
  3553                           ; 1 bytes @ 0x18
  3554                           
  3555     00C0                     GenericQueue_Contains@item:	
  3556                           ; 1 bytes @ 0x18
  3557                           
  3558     00C0                     GenericQueue_Enqueue@q:	
  3559                           ; 1 bytes @ 0x18
  3560                           
  3561     00C0                     GenericQueue_Dequeue@q:	
  3562                           ; 2 bytes @ 0x18
  3563                           
  3564     00C0                     GenericQueue_Remove@q:	
  3565                           ; 2 bytes @ 0x18
  3566                           
  3567     00C0                     GenericQueue_CopyToArray@q:	
  3568                           ; 2 bytes @ 0x18
  3569                           
  3570                           
  3571                           ; 2 bytes @ 0x18
  3572     00C0                     	ds	1
  3573     00C1                     ??_GenericQueue_Contains:
  3574                           
  3575                           ; 1 bytes @ 0x19
  3576     00C1                     	ds	1
  3577     00C2                     GenericQueue_Dequeue@item:
  3578     00C2                     GenericQueue_Remove@item:	
  3579                           ; 1 bytes @ 0x1A
  3580                           
  3581     00C2                     GenericQueue_CopyToArray@array:	
  3582                           ; 1 bytes @ 0x1A
  3583                           
  3584     00C2                     GenericQueue_Enqueue@item:	
  3585                           ; 1 bytes @ 0x1A
  3586                           
  3587                           
  3588                           ; 2 bytes @ 0x1A
  3589     00C2                     	ds	1
  3590     00C3                     ??_GenericQueue_CopyToArray:
  3591     00C3                     ??_GenericQueue_Remove:	
  3592                           ; 1 bytes @ 0x1B
  3593                           
  3594     00C3                     ??_GenericQueue_Dequeue:	
  3595                           ; 1 bytes @ 0x1B
  3596                           
  3597                           
  3598                           ; 1 bytes @ 0x1B
  3599     00C3                     	ds	1
  3600     00C4                     ??_GenericQueue_Enqueue:
  3601                           
  3602                           ; 1 bytes @ 0x1C
  3603     00C4                     	ds	1
  3604     00C5                     GenericQueue_Contains@i:
  3605                           
  3606                           ; 1 bytes @ 0x1D
  3607     00C5                     	ds	2
  3608     00C7                     ??_PS2Keyboard_GetScanCode:
  3609     00C7                     PS2Keyboard_GetScanCode@scanCode:	
  3610                           ; 1 bytes @ 0x1F
  3611                           
  3612     00C7                     GenericQueue_Remove@i:	
  3613                           ; 1 bytes @ 0x1F
  3614                           
  3615     00C7                     GenericQueue_CopyToArray@index:	
  3616                           ; 1 bytes @ 0x1F
  3617                           
  3618                           
  3619                           ; 1 bytes @ 0x1F
  3620     00C7                     	ds	1
  3621     00C8                     PS2Keyboard_GetScanCode@ret:
  3622     00C8                     GenericQueue_Remove@j:	
  3623                           ; 1 bytes @ 0x20
  3624                           
  3625     00C8                     GenericQueue_CopyToArray@count:	
  3626                           ; 1 bytes @ 0x20
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x20
  3630     00C8                     	ds	1
  3631     00C9                     ??_APP_KeyboardUpdateState:
  3632                           
  3633                           ; 1 bytes @ 0x21
  3634     00C9                     	ds	2
  3635     00CB                     APP_KeyboardUpdateState@leds:
  3636                           
  3637                           ; 1 bytes @ 0x23
  3638     00CB                     	ds	1
  3639     00CC                     APP_KeyboardUpdateState@usbHidCode:
  3640                           
  3641                           ; 1 bytes @ 0x24
  3642     00CC                     	ds	1
  3643     00CD                     APP_KeyboardUpdateState@usbHidCode_2929:
  3644                           
  3645                           ; 1 bytes @ 0x25
  3646     00CD                     	ds	1
  3647     00CE                     APP_KeyboardUpdateState@usbHidCode_2928:
  3648                           
  3649                           ; 1 bytes @ 0x26
  3650     00CE                     	ds	1
  3651     00CF                     APP_KeyboardUpdateState@usbHidCode_2937:
  3652                           
  3653                           ; 1 bytes @ 0x27
  3654     00CF                     	ds	1
  3655     00D0                     APP_KeyboardUpdateState@scanCode:
  3656                           
  3657                           ; 1 bytes @ 0x28
  3658     00D0                     	ds	1
  3659     00D1                     ??_APP_KeyboardTasks:
  3660                           
  3661                           ; 1 bytes @ 0x29
  3662     00D1                     	ds	2
  3663     00D3                     APP_KeyboardTasks@scanCode:
  3664                           
  3665                           ; 1 bytes @ 0x2B
  3666     00D3                     	ds	1
  3667     00D4                     APP_KeyboardTasks@needToSendNewReportPacket:
  3668                           
  3669                           ; 1 bytes @ 0x2C
  3670     00D4                     	ds	1
  3671     00D5                     APP_KeyboardTasks@TimeDeltaMilliseconds:
  3672                           
  3673                           ; 2 bytes @ 0x2D
  3674     00D5                     	ds	2
  3675     00D7                     APP_KeyboardTasks@i:
  3676                           
  3677                           ; 1 bytes @ 0x2F
  3678     00D7                     	ds	1
  3679     00D8                     ??_main:
  3680                           
  3681                           ; 1 bytes @ 0x30
  3682     00D8                     	ds	1
  3683     00D9                     main@scanCodeStr:
  3684                           
  3685                           ; 6 bytes @ 0x31
  3686     00D9                     	ds	6
  3687     00DF                     _main$2652:
  3688                           
  3689                           ; 2 bytes @ 0x37
  3690     00DF                     	ds	2
  3691     00E1                     _main$2653:
  3692                           
  3693                           ; 2 bytes @ 0x39
  3694     00E1                     	ds	2
  3695     00E3                     main@scanCodeValid:
  3696                           
  3697                           ; 1 bytes @ 0x3B
  3698     00E3                     	ds	1
  3699     00E4                     main@hndlScanCode:
  3700                           
  3701                           ; 1 bytes @ 0x3C
  3702     00E4                     	ds	1
  3703     00E5                     main@scanCode:
  3704                           
  3705                           ; 3 bytes @ 0x3D
  3706     00E5                     	ds	3
  3707                           
  3708                           	psect	cstackCOMMON
  3709     0070                     __pcstackCOMMON:
  3710     0070                     ?_IOCAF4_DefaultInterruptHandler:
  3711     0070                     ??_IOCAF4_DefaultInterruptHandler:	
  3712                           ; 1 bytes @ 0x0
  3713                           
  3714     0070                     ?_IOCAF5_DefaultInterruptHandler:	
  3715                           ; 1 bytes @ 0x0
  3716                           
  3717     0070                     ??_IOCAF5_DefaultInterruptHandler:	
  3718                           ; 1 bytes @ 0x0
  3719                           
  3720     0070                     ?_IOCAF4_ISR:	
  3721                           ; 1 bytes @ 0x0
  3722                           
  3723     0070                     ?_IOCAF5_ISR:	
  3724                           ; 1 bytes @ 0x0
  3725                           
  3726     0070                     ?_OSCILLATOR_Initialize:	
  3727                           ; 1 bytes @ 0x0
  3728                           
  3729     0070                     ?_WDT_Initialize:	
  3730                           ; 1 bytes @ 0x0
  3731                           
  3732     0070                     ?_TMR2_Initialize:	
  3733                           ; 1 bytes @ 0x0
  3734                           
  3735     0070                     ?_EUSART_Initialize:	
  3736                           ; 1 bytes @ 0x0
  3737                           
  3738     0070                     ?_USBDeviceInit:	
  3739                           ; 1 bytes @ 0x0
  3740                           
  3741     0070                     ?_USBDeviceAttach:	
  3742                           ; 1 bytes @ 0x0
  3743                           
  3744     0070                     ?_USBDeviceTasks:	
  3745                           ; 1 bytes @ 0x0
  3746                           
  3747     0070                     ?_TMR2_ISR:	
  3748                           ; 1 bytes @ 0x0
  3749                           
  3750     0070                     ??_TMR2_ISR:	
  3751                           ; 1 bytes @ 0x0
  3752                           
  3753     0070                     ?_TMR2_DefaultInterruptHandler:	
  3754                           ; 1 bytes @ 0x0
  3755                           
  3756     0070                     ??_TMR2_DefaultInterruptHandler:	
  3757                           ; 1 bytes @ 0x0
  3758                           
  3759     0070                     ?_EUSART_Receive_ISR:	
  3760                           ; 1 bytes @ 0x0
  3761                           
  3762     0070                     ?_EUSART_Transmit_ISR:	
  3763                           ; 1 bytes @ 0x0
  3764                           
  3765     0070                     ??_EUSART_Transmit_ISR:	
  3766                           ; 1 bytes @ 0x0
  3767                           
  3768     0070                     ?_EUSART_DefaultFramingErrorHandler:	
  3769                           ; 1 bytes @ 0x0
  3770                           
  3771     0070                     ??_EUSART_DefaultFramingErrorHandler:	
  3772                           ; 1 bytes @ 0x0
  3773                           
  3774     0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  3775                           ; 1 bytes @ 0x0
  3776                           
  3777     0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  3778                           ; 1 bytes @ 0x0
  3779                           
  3780     0070                     ?_EUSART_DefaultErrorHandler:	
  3781                           ; 1 bytes @ 0x0
  3782                           
  3783     0070                     ?_EUSART_RxDataHandler:	
  3784                           ; 1 bytes @ 0x0
  3785                           
  3786     0070                     ??_EUSART_RxDataHandler:	
  3787                           ; 1 bytes @ 0x0
  3788                           
  3789     0070                     ?_USBWakeFromSuspend:	
  3790                           ; 1 bytes @ 0x0
  3791                           
  3792     0070                     ?_USBSuspend:	
  3793                           ; 1 bytes @ 0x0
  3794                           
  3795     0070                     ?_USBIncrement1msInternalTimers:	
  3796                           ; 1 bytes @ 0x0
  3797                           
  3798     0070                     ??_USBIncrement1msInternalTimers:	
  3799                           ; 1 bytes @ 0x0
  3800                           
  3801     0070                     ?_USBCtrlEPAllowStatusStage:	
  3802                           ; 1 bytes @ 0x0
  3803                           
  3804     0070                     ??_USBCtrlEPAllowStatusStage:	
  3805                           ; 1 bytes @ 0x0
  3806                           
  3807     0070                     ?_USBStallHandler:	
  3808                           ; 1 bytes @ 0x0
  3809                           
  3810     0070                     ??_USBStallHandler:	
  3811                           ; 1 bytes @ 0x0
  3812                           
  3813     0070                     ?_USBCtrlEPService:	
  3814                           ; 1 bytes @ 0x0
  3815                           
  3816     0070                     ?_USBConfigureEndpoint:	
  3817                           ; 1 bytes @ 0x0
  3818                           
  3819     0070                     ?_USBCtrlTrfTxService:	
  3820                           ; 1 bytes @ 0x0
  3821                           
  3822     0070                     ??_USBCtrlTrfTxService:	
  3823                           ; 1 bytes @ 0x0
  3824                           
  3825     0070                     ?_USBCtrlTrfSetupHandler:	
  3826                           ; 1 bytes @ 0x0
  3827                           
  3828     0070                     ?_USBCtrlTrfOutHandler:	
  3829                           ; 1 bytes @ 0x0
  3830                           
  3831     0070                     ?_USBCtrlTrfInHandler:	
  3832                           ; 1 bytes @ 0x0
  3833                           
  3834     0070                     ?_USBCheckStdRequest:	
  3835                           ; 1 bytes @ 0x0
  3836                           
  3837     0070                     ?_USBStdFeatureReqHandler:	
  3838                           ; 1 bytes @ 0x0
  3839                           
  3840     0070                     ?_USBHIDCBSetReportHandler:	
  3841                           ; 1 bytes @ 0x0
  3842                           
  3843     0070                     ??_USBHIDCBSetReportHandler:	
  3844                           ; 1 bytes @ 0x0
  3845                           
  3846     0070                     ?_USBHIDCBSetIdleRateHandler:	
  3847                           ; 1 bytes @ 0x0
  3848                           
  3849     0070                     ?_APP_KeyboardInit:	
  3850                           ; 1 bytes @ 0x0
  3851                           
  3852     0070                     ?_SysTime_Init:	
  3853                           ; 1 bytes @ 0x0
  3854                           
  3855     0070                     ?_PS2Keyboard_Init:	
  3856                           ; 1 bytes @ 0x0
  3857                           
  3858     0070                     ?_PS2Keyboard_GetScanCode:	
  3859                           ; 1 bytes @ 0x0
  3860                           
  3861     0070                     ?_APP_KeyboardTasks:	
  3862                           ; 1 bytes @ 0x0
  3863                           
  3864     0070                     ?_APP_KeyboardUpdateState:	
  3865                           ; 1 bytes @ 0x0
  3866                           
  3867     0070                     ?_APP_KeyboardProcessOutputReport:	
  3868                           ; 1 bytes @ 0x0
  3869                           
  3870     0070                     ?_PS2USB_ScanCodeToUSBHID:	
  3871                           ; 1 bytes @ 0x0
  3872                           
  3873     0070                     ?_PS2Keyboard_GetLastCommand:	
  3874                           ; 1 bytes @ 0x0
  3875                           
  3876     0070                     ?_PS2Keyboard_SendCommand:	
  3877                           ; 1 bytes @ 0x0
  3878                           
  3879     0070                     ?_PS2Keyboard_ClockInterrupt:	
  3880                           ; 1 bytes @ 0x0
  3881                           
  3882     0070                     ?_PS2Keyboard_DataInterrupt:	
  3883                           ; 1 bytes @ 0x0
  3884                           
  3885     0070                     ?_SysTimeInterrupt:	
  3886                           ; 1 bytes @ 0x0
  3887                           
  3888     0070                     ??_SysTimeInterrupt:	
  3889                           ; 1 bytes @ 0x0
  3890                           
  3891     0070                     ?_PIN_MANAGER_Initialize:	
  3892                           ; 1 bytes @ 0x0
  3893                           
  3894     0070                     ?_PIN_MANAGER_IOC:	
  3895                           ; 1 bytes @ 0x0
  3896                           
  3897     0070                     ?_SYSTEM_Initialize:	
  3898                           ; 1 bytes @ 0x0
  3899                           
  3900     0070                     ?_INTERRUPT_InterruptManager:	
  3901                           ; 1 bytes @ 0x0
  3902                           
  3903     0070                     ?_TMR2_StartTimer:	
  3904                           ; 1 bytes @ 0x0
  3905                           
  3906     0070                     ?_EUSART_is_tx_ready:	
  3907                           ; 1 bytes @ 0x0
  3908                           
  3909     0070                     ?_EUSART_Write:	
  3910                           ; 1 bytes @ 0x0
  3911                           
  3912     0070                     ?_USBCtrlEPAllowDataStage:	
  3913                           ; 1 bytes @ 0x0
  3914                           
  3915     0070                     ?_USBCtrlEPServiceComplete:	
  3916                           ; 1 bytes @ 0x0
  3917                           
  3918     0070                     ?_USBCtrlTrfRxService:	
  3919                           ; 1 bytes @ 0x0
  3920                           
  3921     0070                     ?_USBStdSetCfgHandler:	
  3922                           ; 1 bytes @ 0x0
  3923                           
  3924     0070                     ?_USBStdGetDscHandler:	
  3925                           ; 1 bytes @ 0x0
  3926                           
  3927     0070                     ??_USBStdGetDscHandler:	
  3928                           ; 1 bytes @ 0x0
  3929                           
  3930     0070                     ?_USBStdGetStatusHandler:	
  3931                           ; 1 bytes @ 0x0
  3932                           
  3933     0070                     ??_USBStdGetStatusHandler:	
  3934                           ; 1 bytes @ 0x0
  3935                           
  3936     0070                     ?_USBCheckHIDRequest:	
  3937                           ; 1 bytes @ 0x0
  3938                           
  3939     0070                     ?_USBHIDCBSetReportComplete:	
  3940                           ; 1 bytes @ 0x0
  3941                           
  3942     0070                     ?_hex2str:	
  3943                           ; 1 bytes @ 0x0
  3944                           
  3945     0070                     ?i1_USBDeviceInit:	
  3946                           ; 1 bytes @ 0x0
  3947                           
  3948     0070                     ??i1_USBDeviceInit:	
  3949                           ; 1 bytes @ 0x0
  3950                           
  3951     0070                     ?i1_APP_KeyboardProcessOutputReport:	
  3952                           ; 1 bytes @ 0x0
  3953                           
  3954     0070                     ?i1_PS2Keyboard_SendCommand:	
  3955                           ; 1 bytes @ 0x0
  3956                           
  3957     0070                     ??i1_PS2Keyboard_SendCommand:	
  3958                           ; 1 bytes @ 0x0
  3959                           
  3960     0070                     ?i1_GenericQueue_Init:	
  3961                           ; 1 bytes @ 0x0
  3962                           
  3963     0070                     ?_main:	
  3964                           ; 1 bytes @ 0x0
  3965                           
  3966     0070                     ?i1_USBTransferOnePacket:	
  3967                           ; 2 bytes @ 0x0
  3968                           
  3969     0070                     ?i1_GenericQueue_IsFull:	
  3970                           ; 2 bytes @ 0x0
  3971                           
  3972     0070                     ?i1___wmul:	
  3973                           ; 2 bytes @ 0x0
  3974                           
  3975     0070                     ?i1___awmod:	
  3976                           ; 2 bytes @ 0x0
  3977                           
  3978     0070                     ?i1_memset:	
  3979                           ; 2 bytes @ 0x0
  3980                           
  3981     0070                     ?_SysTime_GetCurrentTimeMs:	
  3982                           ; 2 bytes @ 0x0
  3983                           
  3984     0070                     USBConfigureEndpoint@direction:	
  3985                           ; 4 bytes @ 0x0
  3986                           
  3987     0070                     USBHIDCBSetIdleRateHandler@newIdleRate:	
  3988                           ; 1 bytes @ 0x0
  3989                           
  3990     0070                     i1USBTransferOnePacket@dir:	
  3991                           ; 1 bytes @ 0x0
  3992                           
  3993     0070                     i1PS2Keyboard_SendCommand@cmd:	
  3994                           ; 1 bytes @ 0x0
  3995                           
  3996     0070                     USBStdGetStatusHandler@p:	
  3997                           ; 1 bytes @ 0x0
  3998                           
  3999     0070                     i1GenericQueue_Init@q:	
  4000                           ; 2 bytes @ 0x0
  4001                           
  4002     0070                     i1GenericQueue_IsFull@q:	
  4003                           ; 2 bytes @ 0x0
  4004                           
  4005     0070                     i1___wmul@multiplier:	
  4006                           ; 2 bytes @ 0x0
  4007                           
  4008     0070                     i1___awmod@divisor:	
  4009                           ; 2 bytes @ 0x0
  4010                           
  4011     0070                     i1memset@c:	
  4012                           ; 2 bytes @ 0x0
  4013                           
  4014                           
  4015                           ; 2 bytes @ 0x0
  4016     0070                     	ds	1
  4017     0071                     ??_EUSART_Receive_ISR:
  4018     0071                     ??_EUSART_DefaultErrorHandler:	
  4019                           ; 1 bytes @ 0x1
  4020                           
  4021     0071                     ??_USBConfigureEndpoint:	
  4022                           ; 1 bytes @ 0x1
  4023                           
  4024     0071                     ??_USBHIDCBSetIdleRateHandler:	
  4025                           ; 1 bytes @ 0x1
  4026                           
  4027     0071                     ??_USBHIDCBSetReportComplete:	
  4028                           ; 1 bytes @ 0x1
  4029                           
  4030     0071                     ??i1_APP_KeyboardProcessOutputReport:	
  4031                           ; 1 bytes @ 0x1
  4032                           
  4033     0071                     i1USBTransferOnePacket@data:	
  4034                           ; 1 bytes @ 0x1
  4035                           
  4036                           
  4037                           ; 2 bytes @ 0x1
  4038     0071                     	ds	1
  4039     0072                     ??i1_GenericQueue_IsFull:
  4040     0072                     USBCtrlTrfTxService@byteToSend:	
  4041                           ; 1 bytes @ 0x2
  4042                           
  4043     0072                     i1GenericQueue_Init@element_size:	
  4044                           ; 1 bytes @ 0x2
  4045                           
  4046     0072                     i1___wmul@multiplicand:	
  4047                           ; 2 bytes @ 0x2
  4048                           
  4049     0072                     i1___awmod@dividend:	
  4050                           ; 2 bytes @ 0x2
  4051                           
  4052     0072                     i1memset@n:	
  4053                           ; 2 bytes @ 0x2
  4054                           
  4055                           
  4056                           ; 2 bytes @ 0x2
  4057     0072                     	ds	1
  4058     0073                     ??_USBCtrlTrfInHandler:
  4059     0073                     ??_USBCtrlEPAllowDataStage:	
  4060                           ; 1 bytes @ 0x3
  4061                           
  4062     0073                     USBHIDCBSetIdleRateHandler@reportID:	
  4063                           ; 1 bytes @ 0x3
  4064                           
  4065     0073                     i1USBTransferOnePacket@len:	
  4066                           ; 1 bytes @ 0x3
  4067                           
  4068                           
  4069                           ; 1 bytes @ 0x3
  4070     0073                     	ds	1
  4071     0074                     ??_IOCAF5_ISR:
  4072     0074                     ??_PS2Keyboard_DataInterrupt:	
  4073                           ; 1 bytes @ 0x4
  4074                           
  4075     0074                     ??_SysTime_GetCurrentTimeMs:	
  4076                           ; 1 bytes @ 0x4
  4077                           
  4078     0074                     ??_USBCtrlTrfRxService:	
  4079                           ; 1 bytes @ 0x4
  4080                           
  4081     0074                     ??_USBCheckHIDRequest:	
  4082                           ; 1 bytes @ 0x4
  4083                           
  4084     0074                     ??i1_USBTransferOnePacket:	
  4085                           ; 1 bytes @ 0x4
  4086                           
  4087     0074                     ??i1_GenericQueue_Init:	
  4088                           ; 1 bytes @ 0x4
  4089                           
  4090     0074                     ??i1___wmul:	
  4091                           ; 1 bytes @ 0x4
  4092                           
  4093     0074                     ??i1___awmod:	
  4094                           ; 1 bytes @ 0x4
  4095                           
  4096     0074                     ??i1_memset:	
  4097                           ; 1 bytes @ 0x4
  4098                           
  4099     0074                     i1USBDeviceInit@p:	
  4100                           ; 1 bytes @ 0x4
  4101                           
  4102     0074                     i1___wmul@product:	
  4103                           ; 2 bytes @ 0x4
  4104                           
  4105                           
  4106                           ; 2 bytes @ 0x4
  4107     0074                     	ds	1
  4108     0075                     USBConfigureEndpoint@EPNum:
  4109     0075                     i1___awmod@counter:	
  4110                           ; 1 bytes @ 0x5
  4111                           
  4112     0075                     i1memset@dest:	
  4113                           ; 1 bytes @ 0x5
  4114                           
  4115                           
  4116                           ; 1 bytes @ 0x5
  4117     0075                     	ds	1
  4118     0076                     ?i1_memcpy:
  4119     0076                     USBConfigureEndpoint@handle:	
  4120                           ; 2 bytes @ 0x6
  4121                           
  4122     0076                     i1USBDeviceInit@i_1369:	
  4123                           ; 1 bytes @ 0x6
  4124                           
  4125     0076                     i1___awmod@sign:	
  4126                           ; 1 bytes @ 0x6
  4127                           
  4128     0076                     i1memset@p:	
  4129                           ; 1 bytes @ 0x6
  4130                           
  4131     0076                     i1memcpy@d1:	
  4132                           ; 1 bytes @ 0x6
  4133                           
  4134                           
  4135                           ; 2 bytes @ 0x6
  4136     0076                     	ds	1
  4137     0077                     ?_USBEnableEndpoint:
  4138     0077                     ??_USBCtrlEPServiceComplete:	
  4139                           ; 1 bytes @ 0x7
  4140                           
  4141     0077                     USBEnableEndpoint@options:	
  4142                           ; 1 bytes @ 0x7
  4143                           
  4144     0077                     USBCtrlTrfInHandler@lastDTS:	
  4145                           ; 1 bytes @ 0x7
  4146                           
  4147     0077                     i1USBDeviceInit@i:	
  4148                           ; 1 bytes @ 0x7
  4149                           
  4150                           
  4151                           ; 1 bytes @ 0x7
  4152     0077                     	ds	1
  4153     0078                     ??_USBEnableEndpoint:
  4154     0078                     USBCtrlTrfRxService@i:	
  4155                           ; 1 bytes @ 0x8
  4156                           
  4157     0078                     i1USBTransferOnePacket@ep:	
  4158                           ; 1 bytes @ 0x8
  4159                           
  4160     0078                     i1memcpy@s1:	
  4161                           ; 1 bytes @ 0x8
  4162                           
  4163                           
  4164                           ; 2 bytes @ 0x8
  4165     0078                     	ds	1
  4166     0079                     USBCtrlTrfRxService@byteToRead:
  4167     0079                     i1USBTransferOnePacket@handle:	
  4168                           ; 1 bytes @ 0x9
  4169                           
  4170                           
  4171                           ; 2 bytes @ 0x9
  4172     0079                     	ds	1
  4173     007A                     ??_USBCtrlTrfOutHandler:
  4174     007A                     USBEnableEndpoint@p:	
  4175                           ; 1 bytes @ 0xA
  4176                           
  4177     007A                     i1memcpy@n:	
  4178                           ; 2 bytes @ 0xA
  4179                           
  4180                           
  4181                           ; 2 bytes @ 0xA
  4182     007A                     	ds	2
  4183     007C                     ??i1_memcpy:
  4184     007C                     USBEnableEndpoint@ep:	
  4185                           ; 1 bytes @ 0xC
  4186                           
  4187     007C                     PS2Keyboard_ClockInterrupt@bitPos:	
  4188                           ; 1 bytes @ 0xC
  4189                           
  4190                           
  4191                           ; 1 bytes @ 0xC
  4192     007C                     	ds	1
  4193     007D                     ??_USBWakeFromSuspend:
  4194     007D                     ??_USBSuspend:	
  4195                           ; 1 bytes @ 0xD
  4196                           
  4197     007D                     ??_USER_USB_CALLBACK_EVENT_HANDLER:	
  4198                           ; 1 bytes @ 0xD
  4199                           
  4200     007D                     ??_APP_KeyboardInit:	
  4201                           ; 1 bytes @ 0xD
  4202                           
  4203     007D                     ??_USBStdSetCfgHandler:	
  4204                           ; 1 bytes @ 0xD
  4205                           
  4206     007D                     PS2Keyboard_ClockInterrupt@bit:	
  4207                           ; 1 bytes @ 0xD
  4208                           
  4209                           
  4210                           ; 1 bytes @ 0xD
  4211     007D                     	ds	1
  4212     007E                     ??_IOCAF4_ISR:
  4213     007E                     ??_USBCheckStdRequest:	
  4214                           ; 1 bytes @ 0xE
  4215                           
  4216     007E                     ??_PIN_MANAGER_IOC:	
  4217                           ; 1 bytes @ 0xE
  4218                           
  4219     007E                     ??_INTERRUPT_InterruptManager:	
  4220                           ; 1 bytes @ 0xE
  4221                           
  4222                           
  4223                           	psect	cstackBANK0
  4224     0050                     __pcstackBANK0:	
  4225                           ; 1 bytes @ 0xE
  4226                           
  4227     0050                     ?_USER_USB_CALLBACK_EVENT_HANDLER:
  4228     0050                     USER_USB_CALLBACK_EVENT_HANDLER@event:	
  4229                           ; 1 bytes @ 0x0
  4230                           
  4231     0050                     i1memcpy@d:	
  4232                           ; 2 bytes @ 0x0
  4233                           
  4234                           
  4235                           ; 2 bytes @ 0x0
  4236     0050                     	ds	2
  4237     0052                     USER_USB_CALLBACK_EVENT_HANDLER@pdata:
  4238     0052                     i1memcpy@s:	
  4239                           ; 2 bytes @ 0x2
  4240                           
  4241                           
  4242                           ; 2 bytes @ 0x2
  4243     0052                     	ds	2
  4244     0054                     i1memcpy@tmp:
  4245     0054                     USER_USB_CALLBACK_EVENT_HANDLER@size:	
  4246                           ; 1 bytes @ 0x4
  4247                           
  4248                           
  4249                           ; 2 bytes @ 0x4
  4250     0054                     	ds	1
  4251     0055                     ?i1_GenericQueue_Enqueue:
  4252     0055                     i1GenericQueue_Enqueue@q:	
  4253                           ; 1 bytes @ 0x5
  4254                           
  4255                           
  4256                           ; 2 bytes @ 0x5
  4257     0055                     	ds	1
  4258     0056                     ??_USBStdFeatureReqHandler:
  4259     0056                     USBStdSetCfgHandler@p:	
  4260                           ; 1 bytes @ 0x6
  4261                           
  4262                           
  4263                           ; 2 bytes @ 0x6
  4264     0056                     	ds	1
  4265     0057                     i1GenericQueue_Enqueue@item:
  4266                           
  4267                           ; 2 bytes @ 0x7
  4268     0057                     	ds	1
  4269     0058                     USBStdSetCfgHandler@i_2097:
  4270     0058                     USBStdFeatureReqHandler@pUEP:	
  4271                           ; 1 bytes @ 0x8
  4272                           
  4273                           
  4274                           ; 2 bytes @ 0x8
  4275     0058                     	ds	1
  4276     0059                     ??i1_GenericQueue_Enqueue:
  4277     0059                     USBStdSetCfgHandler@i:	
  4278                           ; 1 bytes @ 0x9
  4279                           
  4280                           
  4281                           ; 1 bytes @ 0x9
  4282     0059                     	ds	1
  4283     005A                     USBStdFeatureReqHandler@current_ep_data:
  4284                           
  4285                           ; 1 bytes @ 0xA
  4286     005A                     	ds	1
  4287     005B                     USBStdFeatureReqHandler@p:
  4288                           
  4289                           ; 2 bytes @ 0xB
  4290     005B                     	ds	1
  4291     005C                     ??_PS2Keyboard_ClockInterrupt:
  4292                           
  4293                           ; 1 bytes @ 0xC
  4294     005C                     	ds	1
  4295     005D                     ??_USBCtrlTrfSetupHandler:
  4296                           
  4297                           ; 1 bytes @ 0xD
  4298     005D                     	ds	1
  4299     005E                     ??_USBCtrlEPService:
  4300                           
  4301                           ; 1 bytes @ 0xE
  4302     005E                     	ds	1
  4303     005F                     ??_USBDeviceTasks:
  4304                           
  4305                           ; 1 bytes @ 0xF
  4306     005F                     	ds	1
  4307     0060                     USBDeviceTasks@i:
  4308                           
  4309                           ; 1 bytes @ 0x10
  4310     0060                     	ds	1
  4311                           
  4312                           	psect	maintext
  4313     0817                     __pmaintext:	
  4314 ;;
  4315 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4316 ;;
  4317 ;; *************** function _main *****************
  4318 ;; Defined at:
  4319 ;;		line 11 in file "main.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;		None
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  scanCodeStr     6   49[BANK1 ] unsigned char [6]
  4324 ;;  scanCode        3   61[BANK1 ] struct PS2ScanCode
  4325 ;;  hndlScanCode    1   60[BANK1 ] PTR struct PS2ScanCode
  4326 ;;		 -> main@scanCode(3), NULL(0), 
  4327 ;;  scanCodeVali    1   59[BANK1 ] _Bool 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  2  838[None  ] int 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : B1F/0
  4334 ;;		On exit  : 2/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4338 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  4339 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4340 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0
  4341 ;;Total ram usage:       16 bytes
  4342 ;; Hardware stack levels required when called: 14
  4343 ;; This function calls:
  4344 ;;		_APP_KeyboardTasks
  4345 ;;		_Log_Message
  4346 ;;		_Log_UtilityConvertByteToHex
  4347 ;;		_PS2Keyboard_GetScanCode
  4348 ;;		_PS2Keyboard_Init
  4349 ;;		_SYSTEM_Initialize
  4350 ;;		_SysTime_Init
  4351 ;; This function is called by:
  4352 ;;		Startup code after reset
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356     0817                     _main:	
  4357                           ;psect for function _main
  4358                           
  4359                           
  4360                           ;main.c: 12:     SYSTEM_Initialize();
  4361                           
  4362                           ;incstack = 0
  4363                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4364     0817  3190  20A1  3188   	fcall	_SYSTEM_Initialize
  4365                           
  4366                           ;main.c: 13:     SysTime_Init();
  4367     081A  319F  2732  3188   	fcall	_SysTime_Init
  4368                           
  4369                           ;main.c: 14:     PS2Keyboard_Init();
  4370     081D  3191  2196  3188   	fcall	_PS2Keyboard_Init
  4371                           
  4372                           ;main.c: 22:     (INTCONbits.GIE = 1);
  4373     0820  178B               	bsf	11,7	;volatile
  4374                           
  4375                           ;main.c: 25:     (INTCONbits.PEIE = 1);
  4376     0821  170B               	bsf	11,6	;volatile
  4377                           
  4378                           ;main.c: 30:     PS2ScanCode scanCode = {0};
  4379     0822  0023               	movlb	3	; select bank3
  4380     0823  0844               	movf	main@F3448^(0+384),w
  4381     0824  0021               	movlb	1	; select bank1
  4382     0825  00E5               	movwf	main@scanCode^(0+128)
  4383     0826  0023               	movlb	3	; select bank3
  4384     0827  0845               	movf	(main@F3448+1)^(0+384),w
  4385     0828  0021               	movlb	1	; select bank1
  4386     0829  00E6               	movwf	(main@scanCode+1)^(0+128)
  4387     082A  0023               	movlb	3	; select bank3
  4388     082B  0846               	movf	(main@F3448+2)^(0+384),w
  4389     082C  0021               	movlb	1	; select bank1
  4390     082D  00E7               	movwf	(main@scanCode+2)^(0+128)
  4391                           
  4392                           ;main.c: 33:     char scanCodeStr[6] = {' ', ' ', ' ', ' ', '\r', '\n'};
  4393     082E  30C7               	movlw	low main@F3452
  4394     082F  0086               	movwf	6
  4395     0830  3001               	movlw	high main@F3452
  4396     0831  0087               	movwf	7
  4397     0832  30D9               	movlw	low main@scanCodeStr
  4398     0833  0084               	movwf	4
  4399     0834  3000               	movlw	high main@scanCodeStr
  4400     0835  0085               	movwf	5
  4401     0836  3006               	movlw	6
  4402     0837  00D8               	movwf	??_main^(0+128)
  4403     0838                     u6360:
  4404     0838  0016               	moviw fsr1++
  4405     0839  001A               	movwi fsr0++
  4406     083A  0BD8               	decfsz	??_main^(0+128),f
  4407     083B  2838               	goto	u6360
  4408     083C                     l6144:
  4409                           
  4410                           ;main.c: 36:         scanCodeValid = PS2Keyboard_GetScanCode(&scanCode);
  4411     083C  30E5               	movlw	(low (main@scanCode| 0))& (0+255)
  4412     083D  3191  21CD  3188   	fcall	_PS2Keyboard_GetScanCode
  4413     0840  00E3               	movwf	main@scanCodeValid^(0+128)
  4414                           
  4415                           ;main.c: 37:         if(scanCodeValid) {
  4416     0841  0863               	movf	main@scanCodeValid^(0+128),w
  4417     0842  1903               	btfsc	3,2
  4418     0843  2847               	goto	l6150
  4419                           
  4420                           ;main.c: 38:             hndlScanCode = &scanCode;
  4421     0844  30E5               	movlw	(low (main@scanCode| 0))& (0+255)
  4422     0845  00E4               	movwf	main@hndlScanCode^(0+128)
  4423                           
  4424                           ;main.c: 39:         } else {
  4425     0846  2848               	goto	l6152
  4426     0847                     l6150:
  4427                           
  4428                           ;main.c: 40:             hndlScanCode = ((void*)0);
  4429     0847  01E4               	clrf	main@hndlScanCode^(0+128)
  4430     0848                     l6152:
  4431                           
  4432                           ;main.c: 42:         if(hndlScanCode != ((void*)0)) {
  4433     0848  0864               	movf	main@hndlScanCode^(0+128),w
  4434     0849  1903               	btfsc	3,2
  4435     084A  2879               	goto	l6170
  4436                           
  4437                           ;main.c: 43:             scanCodeStr[0] = hndlScanCode->isExtend ? 'e' : ' ';
  4438     084B  0A64               	incf	main@hndlScanCode^(0+128),w
  4439     084C  0086               	movwf	6
  4440     084D  0187               	clrf	7
  4441     084E  0801               	movf	1,w
  4442     084F  1D03               	btfss	3,2
  4443     0850  2853               	goto	l6158
  4444     0851  3020               	movlw	32
  4445     0852  2854               	goto	L1
  4446     0853                     l6158:
  4447     0853  3065               	movlw	101
  4448     0854                     L1:
  4449     0854  00DF               	movwf	_main$2652^(0+128)
  4450     0855  3000               	movlw	0
  4451     0856  00E0               	movwf	(_main$2652^(0+128)+1)
  4452     0857  085F               	movf	_main$2652^(0+128),w
  4453     0858  00D9               	movwf	main@scanCodeStr^(0+128)
  4454                           
  4455                           ;main.c: 44:             scanCodeStr[1] = hndlScanCode->isBreak ? 'b' : ' ';
  4456     0859  0864               	movf	main@hndlScanCode^(0+128),w
  4457     085A  3E02               	addlw	2
  4458     085B  0086               	movwf	6
  4459     085C  0187               	clrf	7
  4460     085D  0801               	movf	1,w
  4461     085E  1D03               	btfss	3,2
  4462     085F  2862               	goto	l6164
  4463     0860  3020               	movlw	32
  4464     0861  2863               	goto	L2
  4465     0862                     l6164:
  4466     0862  3062               	movlw	98
  4467     0863                     L2:
  4468     0863  00E1               	movwf	_main$2653^(0+128)
  4469     0864  3000               	movlw	0
  4470     0865  00E2               	movwf	(_main$2653^(0+128)+1)
  4471     0866  0861               	movf	_main$2653^(0+128),w
  4472     0867  00DA               	movwf	(main@scanCodeStr^(0+128)+1)
  4473                           
  4474                           ;main.c: 45:             Log_UtilityConvertByteToHex(hndlScanCode->value, &scanCodeStr[2
      +                          ], 2);
  4475     0868  30DB               	movlw	(low ((main@scanCodeStr| 0+2)))& (0+255)
  4476     0869  00AC               	movwf	Log_UtilityConvertByteToHex@buf^(0+128)
  4477     086A  3002               	movlw	2
  4478     086B  00AD               	movwf	Log_UtilityConvertByteToHex@bufSize^(0+128)
  4479     086C  0864               	movf	main@hndlScanCode^(0+128),w
  4480     086D  0086               	movwf	6
  4481     086E  0187               	clrf	7
  4482     086F  0801               	movf	1,w
  4483     0870  3192  22E9  3188   	fcall	_Log_UtilityConvertByteToHex
  4484                           
  4485                           ;main.c: 46:             Log_Message((const uint8_t*)scanCodeStr, sizeof(scanCodeStr));
  4486     0873  3006               	movlw	6
  4487     0874  00AA               	movwf	Log_Message@bufSize^(0+128)
  4488     0875  30D9               	movlw	(low (main@scanCodeStr| 0))& (0+255)
  4489     0876  3191  217B  3188   	fcall	_Log_Message
  4490     0879                     l6170:
  4491                           
  4492                           ;main.c: 48:         APP_KeyboardTasks(hndlScanCode);
  4493     0879  0864               	movf	main@hndlScanCode^(0+128),w
  4494     087A  3182  22F3  3188   	fcall	_APP_KeyboardTasks
  4495     087D  283C               	goto	l6144
  4496     087E                     __end_of_main:
  4497                           
  4498                           	psect	text1
  4499     1F32                     __ptext1:	
  4500 ;; *************** function _SysTime_Init *****************
  4501 ;; Defined at:
  4502 ;;		line 12 in file "systime.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2, status,0, pclath, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : 1F/0
  4513 ;;		On exit  : 1F/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used: 1
  4522 ;; Hardware stack levels required when called: 11
  4523 ;; This function calls:
  4524 ;;		_TMR2_SetInterruptHandler
  4525 ;;		_TMR2_StartTimer
  4526 ;; This function is called by:
  4527 ;;		_main
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531     1F32                     _SysTime_Init:	
  4532                           ;psect for function _SysTime_Init
  4533                           
  4534                           
  4535                           ;systime.c: 14:     TMR2_SetInterruptHandler(SysTimeInterrupt);
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _SysTime_Init: [wreg+status,2+status,0+pclath+cstack]
  4539     1F32  3084               	movlw	low _SysTimeInterrupt
  4540     1F33  0021               	movlb	1	; select bank1
  4541     1F34  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  4542     1F35  3010               	movlw	high _SysTimeInterrupt
  4543     1F36  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  4544     1F37  319F  2701  319F   	fcall	_TMR2_SetInterruptHandler
  4545                           
  4546                           ;systime.c: 15:     TMR2_StartTimer();
  4547     1F3A  319E  26AE         	fcall	_TMR2_StartTimer
  4548     1F3C  0008               	return
  4549     1F3D                     __end_of_SysTime_Init:
  4550                           
  4551                           	psect	text2
  4552     1EAE                     __ptext2:	
  4553 ;; *************** function _TMR2_StartTimer *****************
  4554 ;; Defined at:
  4555 ;;		line 87 in file "mcc_generated_files/tmr2.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;		None
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		None
  4564 ;; Tracked objects:
  4565 ;;		On entry : 1F/2
  4566 ;;		On exit  : 1F/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4573 ;;Total ram usage:        0 bytes
  4574 ;; Hardware stack levels used: 1
  4575 ;; Hardware stack levels required when called: 10
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_SysTime_Init
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583     1EAE                     _TMR2_StartTimer:	
  4584                           ;psect for function _TMR2_StartTimer
  4585                           
  4586                           
  4587                           ;mcc_generated_files/tmr2.c: 90:     T2CONbits.TMR2ON = 1;
  4588                           
  4589                           ;incstack = 0
  4590                           ; Regs used in _TMR2_StartTimer: []
  4591     1EAE  0020               	movlb	0	; select bank0
  4592     1EAF  151C               	bsf	28,2	;volatile
  4593     1EB0  0008               	return
  4594     1EB1                     __end_of_TMR2_StartTimer:
  4595                           
  4596                           	psect	text3
  4597     10A1                     __ptext3:	
  4598 ;; *************** function _SYSTEM_Initialize *****************
  4599 ;; Defined at:
  4600 ;;		line 49 in file "mcc_generated_files/mcc.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;		None
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;		None
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      void 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : B1F/0
  4611 ;;		On exit  : 1F/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;Total ram usage:        0 bytes
  4619 ;; Hardware stack levels used: 1
  4620 ;; Hardware stack levels required when called: 12
  4621 ;; This function calls:
  4622 ;;		_EUSART_Initialize
  4623 ;;		_OSCILLATOR_Initialize
  4624 ;;		_PIN_MANAGER_Initialize
  4625 ;;		_TMR2_Initialize
  4626 ;;		_USBDeviceAttach
  4627 ;;		_USBDeviceInit
  4628 ;;		_WDT_Initialize
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634     10A1                     _SYSTEM_Initialize:	
  4635                           ;psect for function _SYSTEM_Initialize
  4636                           
  4637                           
  4638                           ;mcc_generated_files/mcc.c: 51:     PIN_MANAGER_Initialize();
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4642     10A1  3193  235A  3190   	fcall	_PIN_MANAGER_Initialize
  4643                           
  4644                           ;mcc_generated_files/mcc.c: 52:     OSCILLATOR_Initialize();
  4645     10A4  319F  2789  3190   	fcall	_OSCILLATOR_Initialize
  4646                           
  4647                           ;mcc_generated_files/mcc.c: 53:     WDT_Initialize();
  4648     10A7  319E  26AB  3190   	fcall	_WDT_Initialize
  4649                           
  4650                           ;mcc_generated_files/mcc.c: 54:     TMR2_Initialize();
  4651     10AA  319F  27C8  3190   	fcall	_TMR2_Initialize
  4652                           
  4653                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
  4654     10AD  3187  27BE  3190   	fcall	_EUSART_Initialize
  4655                           
  4656                           ;mcc_generated_files/mcc.c: 56:     USBDeviceInit();
  4657     10B0  318E  26A1  3190   	fcall	_USBDeviceInit
  4658                           
  4659                           ;mcc_generated_files/mcc.c: 57:     USBDeviceAttach();
  4660     10B3  3191  2112         	fcall	_USBDeviceAttach
  4661     10B5  0008               	return
  4662     10B6                     __end_of_SYSTEM_Initialize:
  4663                           
  4664                           	psect	text4
  4665     1EAB                     __ptext4:	
  4666 ;; *************** function _WDT_Initialize *****************
  4667 ;; Defined at:
  4668 ;;		line 76 in file "mcc_generated_files/mcc.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;                  1    wreg      void 
  4675 ;; Registers used:
  4676 ;;		wreg
  4677 ;; Tracked objects:
  4678 ;;		On entry : 1F/1
  4679 ;;		On exit  : 1F/1
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4686 ;;Total ram usage:        0 bytes
  4687 ;; Hardware stack levels used: 1
  4688 ;; Hardware stack levels required when called: 10
  4689 ;; This function calls:
  4690 ;;		Nothing
  4691 ;; This function is called by:
  4692 ;;		_SYSTEM_Initialize
  4693 ;; This function uses a non-reentrant model
  4694 ;;
  4695                           
  4696     1EAB                     _WDT_Initialize:	
  4697                           ;psect for function _WDT_Initialize
  4698                           
  4699                           
  4700                           ;mcc_generated_files/mcc.c: 79:     WDTCON = 0x16;
  4701                           
  4702                           ;incstack = 0
  4703                           ; Regs used in _WDT_Initialize: [wreg]
  4704     1EAB  3016               	movlw	22
  4705     1EAC  0097               	movwf	23	;volatile
  4706     1EAD  0008               	return
  4707     1EAE                     __end_of_WDT_Initialize:
  4708                           
  4709                           	psect	text5
  4710     0EA1                     __ptext5:	
  4711 ;; *************** function _USBDeviceInit *****************
  4712 ;; Defined at:
  4713 ;;		line 281 in file "usb/usb_device.c"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;  p               2    4[BANK1 ] PTR unsigned char 
  4718 ;;		 -> UEP1(1), 
  4719 ;;  i               1    6[BANK1 ] unsigned char 
  4720 ;;  i               1    7[BANK1 ] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4725 ;; Tracked objects:
  4726 ;;		On entry : 1F/1
  4727 ;;		On exit  : 1F/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4731 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4732 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;Total ram usage:        8 bytes
  4735 ;; Hardware stack levels used: 1
  4736 ;; Hardware stack levels required when called: 10
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_SYSTEM_Initialize
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744     0EA1                     _USBDeviceInit:	
  4745                           ;psect for function _USBDeviceInit
  4746                           
  4747                           
  4748                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  4749                           
  4750                           ;incstack = 0
  4751                           ; Regs used in _USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  4752     0EA1  1112               	bcf	18,2	;volatile
  4753                           
  4754                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  4755     0EA2  003D               	movlb	29	; select bank29
  4756     0EA3  0193               	clrf	19	;volatile
  4757                           
  4758                           ;usb/usb_device.c: 295:     {UIR = 0;};
  4759     0EA4  0190               	clrf	16	;volatile
  4760                           
  4761                           ;usb/usb_device.c: 298:     UEP0 = 0;
  4762     0EA5  0198               	clrf	24	;volatile
  4763                           
  4764                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
  4765     0EA6  300E               	movlw	14
  4766     0EA7  0021               	movlb	1	; select bank1
  4767     0EA8  00AD               	movwf	(USBDeviceInit@p+1)^(0+128)
  4768     0EA9  3099               	movlw	153
  4769     0EAA  00AC               	movwf	USBDeviceInit@p^(0+128)
  4770     0EAB  01AE               	clrf	USBDeviceInit@i_1369^(0+128)
  4771     0EAC                     l5008:
  4772     0EAC  082C               	movf	USBDeviceInit@p^(0+128),w
  4773     0EAD  0086               	movwf	6
  4774     0EAE  082D               	movf	(USBDeviceInit@p+1)^(0+128),w
  4775     0EAF  0087               	movwf	7
  4776     0EB0  0181               	clrf	1
  4777     0EB1  3001               	movlw	1
  4778     0EB2  07AC               	addwf	USBDeviceInit@p^(0+128),f
  4779     0EB3  3000               	movlw	0
  4780     0EB4  3DAD               	addwfc	(USBDeviceInit@p+1)^(0+128),f
  4781     0EB5  3001               	movlw	1
  4782     0EB6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4783     0EB7  0828               	movf	??_USBDeviceInit^(0+128),w
  4784     0EB8  07AE               	addwf	USBDeviceInit@i_1369^(0+128),f
  4785     0EB9  082E               	movf	USBDeviceInit@i_1369^(0+128),w
  4786     0EBA  1903               	btfsc	3,2
  4787     0EBB  2EAC               	goto	l5008
  4788                           
  4789                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
  4790     0EBC  3016               	movlw	22
  4791     0EBD  003D               	movlb	29	; select bank29
  4792     0EBE  0091               	movwf	17	;volatile
  4793     0EBF  309F               	movlw	159
  4794     0EC0  0097               	movwf	23	;volatile
  4795     0EC1  307B               	movlw	123
  4796     0EC2  0092               	movwf	18	;volatile
  4797                           
  4798                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
  4799     0EC3  0021               	movlb	1	; select bank1
  4800     0EC4  01AF               	clrf	USBDeviceInit@i^(0+128)
  4801     0EC5                     l5024:
  4802                           
  4803                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
  4804     0EC5  082F               	movf	USBDeviceInit@i^(0+128),w
  4805     0EC6  00A8               	movwf	??_USBDeviceInit^(0+128)
  4806     0EC7  3001               	movlw	1
  4807     0EC8                     u4385:
  4808     0EC8  35A8               	lslf	??_USBDeviceInit^(0+128),f
  4809     0EC9  3EFF               	addlw	-1
  4810     0ECA  1D03               	skipz
  4811     0ECB  2EC8               	goto	u4385
  4812     0ECC  3528               	lslf	??_USBDeviceInit^(0+128),w
  4813     0ECD  3E20               	addlw	32
  4814     0ECE  0086               	movwf	6
  4815     0ECF  0187               	clrf	7
  4816     0ED0  3000               	movlw	0
  4817     0ED1  3FC0               	movwi [0]fsr1
  4818     0ED2  3000               	movlw	0
  4819     0ED3  3FC1               	movwi [1]fsr1
  4820     0ED4  3FC2               	movwi [2]fsr1
  4821     0ED5  3FC3               	movwi [3]fsr1
  4822                           
  4823                           ;usb/usb_device.c: 314:     }
  4824     0ED6  3001               	movlw	1
  4825     0ED7  00A8               	movwf	??_USBDeviceInit^(0+128)
  4826     0ED8  0828               	movf	??_USBDeviceInit^(0+128),w
  4827     0ED9  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4828     0EDA  3008               	movlw	8
  4829     0EDB  022F               	subwf	USBDeviceInit@i^(0+128),w
  4830     0EDC  1C03               	skipc
  4831     0EDD  2EC5               	goto	l5024
  4832                           
  4833                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
  4834     0EDE  003D               	movlb	29	; select bank29
  4835     0EDF  170E               	bsf	14,6	;volatile
  4836                           
  4837                           ;usb/usb_device.c: 320:     UADDR = 0x00;
  4838     0EE0  0196               	clrf	22	;volatile
  4839                           
  4840                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
  4841     0EE1  120E               	bcf	14,4	;volatile
  4842                           
  4843                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
  4844     0EE2  130E               	bcf	14,6	;volatile
  4845     0EE3                     l5036:
  4846                           
  4847                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
  4848     0EE3  30F7               	movlw	247
  4849     0EE4  0021               	movlb	1	; select bank1
  4850     0EE5  00A8               	movwf	??_USBDeviceInit^(0+128)
  4851     0EE6  0828               	movf	??_USBDeviceInit^(0+128),w
  4852     0EE7  003D               	movlb	29	; select bank29
  4853     0EE8  0590               	andwf	16,f	;volatile
  4854                           
  4855                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
  4856     0EE9  0021               	movlb	1	; select bank1
  4857     0EEA  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
  4858                           
  4859                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
  4860     0EEB  0022               	movlb	2	; select bank2
  4861     0EEC  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
  4862                           
  4863                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
  4864     0EED  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
  4865     0EEE  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
  4866                           
  4867                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
  4868     0EEF  003D               	movlb	29	; select bank29
  4869     0EF0  1990               	btfsc	16,3	;volatile
  4870     0EF1  2EE3               	goto	l5036
  4871                           
  4872                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
  4873     0EF2  3001               	movlw	1
  4874     0EF3  0022               	movlb	2	; select bank2
  4875     0EF4  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
  4876                           
  4877                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
  4878     0EF5  3001               	movlw	1
  4879     0EF6  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
  4880                           
  4881                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
  4882     0EF7  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
  4883                           
  4884                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
  4885     0EF8  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
  4886                           
  4887                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
  4888     0EF9  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
  4889                           
  4890                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
  4891     0EFA  0021               	movlb	1	; select bank1
  4892     0EFB  01AF               	clrf	USBDeviceInit@i^(0+128)
  4893     0EFC                     l5058:
  4894                           
  4895                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
  4896     0EFC  352F               	lslf	USBDeviceInit@i^(0+128),w
  4897     0EFD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  4898     0EFE  0086               	movwf	6
  4899     0EFF  0187               	clrf	7
  4900     0F00  3000               	movlw	0
  4901     0F01  3FC0               	movwi [0]fsr1
  4902     0F02  3FC1               	movwi [1]fsr1
  4903                           
  4904                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
  4905     0F03  352F               	lslf	USBDeviceInit@i^(0+128),w
  4906     0F04  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  4907     0F05  0086               	movwf	6
  4908     0F06  3001               	movlw	1	; select bank2/3
  4909     0F07  0087               	movwf	7
  4910     0F08  3000               	movlw	0
  4911     0F09  3FC0               	movwi [0]fsr1
  4912     0F0A  3FC1               	movwi [1]fsr1
  4913                           
  4914                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
  4915     0F0B  082F               	movf	USBDeviceInit@i^(0+128),w
  4916     0F0C  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  4917     0F0D  0086               	movwf	6
  4918     0F0E  3001               	movlw	1	; select bank2/3
  4919     0F0F  0087               	movwf	7
  4920     0F10  0181               	clrf	1
  4921                           
  4922                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
  4923     0F11  082F               	movf	USBDeviceInit@i^(0+128),w
  4924     0F12  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  4925     0F13  0086               	movwf	6
  4926     0F14  3001               	movlw	1	; select bank2/3
  4927     0F15  0087               	movwf	7
  4928     0F16  0181               	clrf	1
  4929                           
  4930                           ;usb/usb_device.c: 355:     }
  4931     0F17  3001               	movlw	1
  4932     0F18  00A8               	movwf	??_USBDeviceInit^(0+128)
  4933     0F19  0828               	movf	??_USBDeviceInit^(0+128),w
  4934     0F1A  07AF               	addwf	USBDeviceInit@i^(0+128),f
  4935     0F1B  3002               	movlw	2
  4936     0F1C  022F               	subwf	USBDeviceInit@i^(0+128),w
  4937     0F1D  1C03               	skipc
  4938     0F1E  2EFC               	goto	l5058
  4939                           
  4940                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
  4941     0F1F  3028               	movlw	40
  4942     0F20  0020               	movlb	0	; select bank0
  4943     0F21  00E1               	movwf	_pBDTEntryIn
  4944     0F22  3000               	movlw	0
  4945     0F23  00E2               	movwf	_pBDTEntryIn+1
  4946                           
  4947                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
  4948     0F24  3016               	movlw	22
  4949     0F25  003D               	movlb	29	; select bank29
  4950     0F26  0098               	movwf	24	;volatile
  4951                           
  4952                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
  4953     0F27  3040               	movlw	64
  4954     0F28  0021               	movlb	1	; select bank1
  4955     0F29  00A8               	movwf	??_USBDeviceInit^(0+128)
  4956     0F2A  3000               	movlw	0
  4957     0F2B  00A9               	movwf	(??_USBDeviceInit^(0+128)+1)
  4958     0F2C  30FF               	movlw	255
  4959     0F2D  0528               	andwf	??_USBDeviceInit^(0+128),w
  4960     0F2E  00AA               	movwf	(??_USBDeviceInit+2)^(0+128)
  4961     0F2F  307F               	movlw	127
  4962     0F30  0529               	andwf	(??_USBDeviceInit+1)^(0+128),w
  4963     0F31  00AB               	movwf	(??_USBDeviceInit+3)^(0+128)
  4964     0F32  082A               	movf	(??_USBDeviceInit+2)^(0+128),w
  4965     0F33  0020               	movlb	0	; select bank0
  4966     0F34  00A2               	movwf	34	;volatile
  4967     0F35  0021               	movlb	1	; select bank1
  4968     0F36  082B               	movf	(??_USBDeviceInit+3)^(0+128),w
  4969     0F37  0020               	movlb	0	; select bank0
  4970     0F38  00A3               	movwf	35	;volatile
  4971                           
  4972                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
  4973     0F39  3008               	movlw	8
  4974     0F3A  00A1               	movwf	33	;volatile
  4975                           
  4976                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
  4977     0F3B  3004               	movlw	4
  4978     0F3C  00A0               	movwf	32	;volatile
  4979                           
  4980                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
  4981     0F3D  17A0               	bsf	32,7	;volatile
  4982                           
  4983                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
  4984     0F3E  01EF               	clrf	_USBActiveConfiguration	;volatile
  4985                           
  4986                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
  4987     0F3F  3000               	movlw	0
  4988     0F40  0023               	movlb	3	; select bank3
  4989     0F41  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
  4990     0F42  3000               	movlw	0
  4991     0F43  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
  4992     0F44  3000               	movlw	0
  4993     0F45  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
  4994     0F46  3000               	movlw	0
  4995     0F47  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
  4996                           
  4997                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
  4998     0F48  0022               	movlb	2	; select bank2
  4999     0F49  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
  5000                           
  5001                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
  5002     0F4A  0020               	movlb	0	; select bank0
  5003     0F4B  01EC               	clrf	_USBDeviceState	;volatile
  5004     0F4C  0008               	return
  5005     0F4D                     __end_of_USBDeviceInit:
  5006                           
  5007                           	psect	text6
  5008     1112                     __ptext6:	
  5009 ;; *************** function _USBDeviceAttach *****************
  5010 ;; Defined at:
  5011 ;;		line 1356 in file "usb/usb_device.c"
  5012 ;; Parameters:    Size  Location     Type
  5013 ;;		None
  5014 ;; Auto vars:     Size  Location     Type
  5015 ;;		None
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  1    wreg      void 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0
  5020 ;; Tracked objects:
  5021 ;;		On entry : 1F/0
  5022 ;;		On exit  : 1F/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5029 ;;Total ram usage:        0 bytes
  5030 ;; Hardware stack levels used: 1
  5031 ;; Hardware stack levels required when called: 10
  5032 ;; This function calls:
  5033 ;;		Nothing
  5034 ;; This function is called by:
  5035 ;;		_SYSTEM_Initialize
  5036 ;; This function uses a non-reentrant model
  5037 ;;
  5038                           
  5039     1112                     _USBDeviceAttach:	
  5040                           ;psect for function _USBDeviceAttach
  5041                           
  5042                           
  5043                           ;usb/usb_device.c: 1360:     {;usb/usb_device.c: 1361:         if(1 == 1)
  5044                           
  5045                           ;incstack = 0
  5046                           ; Regs used in _USBDeviceAttach: [wreg+status,2+status,0]
  5047     1112  086C               	movf	_USBDeviceState,w
  5048     1113  1D03               	btfss	3,2
  5049     1114  0008               	return
  5050                           
  5051                           ;usb/usb_device.c: 1362:         {;usb/usb_device.c: 1364:             UCON = 0;
  5052     1115  003D               	movlb	29	; select bank29
  5053     1116  018E               	clrf	14	;volatile
  5054                           
  5055                           ;usb/usb_device.c: 1367:             UIE = 0;
  5056     1117  0192               	clrf	18	;volatile
  5057                           
  5058                           ;usb/usb_device.c: 1371:             { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UI
      +                          E = 0x39 | 0x40 | 0x02; };
  5059     1118  3016               	movlw	22
  5060     1119  0091               	movwf	17	;volatile
  5061     111A  309F               	movlw	159
  5062     111B  0097               	movwf	23	;volatile
  5063     111C  307B               	movlw	123
  5064     111D  0092               	movwf	18	;volatile
  5065                           
  5066                           ;usb/usb_device.c: 1373:             {PIE2bits.USBIE = 1;INTCONbits.PEIE = 1; INTCONbits
      +                          .GIE = 1;};
  5067     111E  0021               	movlb	1	; select bank1
  5068     111F  1512               	bsf	18,2	;volatile
  5069     1120  170B               	bsf	11,6	;volatile
  5070     1121  178B               	bsf	11,7	;volatile
  5071     1122                     l541:	
  5072                           ;usb/usb_device.c: 1376:             while(!UCONbits.USBEN){UCONbits.USBEN = 1;}
  5073                           
  5074     1122  003D               	movlb	29	; select bank29
  5075     1123  198E               	btfsc	14,3	;volatile
  5076     1124  2927               	goto	l5100
  5077     1125  158E               	bsf	14,3	;volatile
  5078     1126  2922               	goto	l541
  5079     1127                     l5100:
  5080                           
  5081                           ;usb/usb_device.c: 1379:             USBDeviceState = ATTACHED_STATE;
  5082     1127  3001               	movlw	1
  5083     1128  0020               	movlb	0	; select bank0
  5084     1129  00EC               	movwf	_USBDeviceState	;volatile
  5085     112A  0008               	return
  5086     112B                     __end_of_USBDeviceAttach:
  5087                           
  5088                           	psect	text7
  5089     1FC8                     __ptext7:	
  5090 ;; *************** function _TMR2_Initialize *****************
  5091 ;; Defined at:
  5092 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;		None
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  1    wreg      void 
  5099 ;; Registers used:
  5100 ;;		wreg, status,2, status,0, pclath, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 1F/1
  5103 ;;		On exit  : 1F/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5110 ;;Total ram usage:        0 bytes
  5111 ;; Hardware stack levels used: 1
  5112 ;; Hardware stack levels required when called: 11
  5113 ;; This function calls:
  5114 ;;		_TMR2_SetInterruptHandler
  5115 ;; This function is called by:
  5116 ;;		_SYSTEM_Initialize
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120     1FC8                     _TMR2_Initialize:	
  5121                           ;psect for function _TMR2_Initialize
  5122                           
  5123                           
  5124                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0x5D;
  5125                           
  5126                           ;incstack = 0
  5127                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5128     1FC8  305D               	movlw	93
  5129     1FC9  0020               	movlb	0	; select bank0
  5130     1FCA  009B               	movwf	27	;volatile
  5131                           
  5132                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5133     1FCB  019A               	clrf	26	;volatile
  5134                           
  5135                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5136     1FCC  1091               	bcf	17,1	;volatile
  5137                           
  5138                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5139     1FCD  0021               	movlb	1	; select bank1
  5140     1FCE  1491               	bsf	17,1	;volatile
  5141                           
  5142                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5143     1FCF  30FF               	movlw	low _TMR2_DefaultInterruptHandler
  5144     1FD0  00A8               	movwf	TMR2_SetInterruptHandler@InterruptHandler^(0+128)
  5145     1FD1  3007               	movlw	high _TMR2_DefaultInterruptHandler
  5146     1FD2  00A9               	movwf	(TMR2_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5147     1FD3  319F  2701         	fcall	_TMR2_SetInterruptHandler
  5148                           
  5149                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x0F;
  5150     1FD5  300F               	movlw	15
  5151     1FD6  0020               	movlb	0	; select bank0
  5152     1FD7  009C               	movwf	28	;volatile
  5153     1FD8  0008               	return
  5154     1FD9                     __end_of_TMR2_Initialize:
  5155                           
  5156                           	psect	text8
  5157     1F01                     __ptext8:	
  5158 ;; *************** function _TMR2_SetInterruptHandler *****************
  5159 ;; Defined at:
  5160 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5163 ;;		 -> SysTimeInterrupt(1), TMR2_DefaultInterruptHandler(1), 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg
  5170 ;; Tracked objects:
  5171 ;;		On entry : 1F/1
  5172 ;;		On exit  : 1F/2
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5175 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5178 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5179 ;;Total ram usage:        2 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 10
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_TMR2_Initialize
  5186 ;;		_SysTime_Init
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190     1F01                     _TMR2_SetInterruptHandler:	
  5191                           ;psect for function _TMR2_SetInterruptHandler
  5192                           
  5193                           
  5194                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5195                           
  5196                           ;incstack = 0
  5197                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5198     1F01  0829               	movf	(TMR2_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5199     1F02  0022               	movlb	2	; select bank2
  5200     1F03  00C5               	movwf	(_TMR2_InterruptHandler+1)^(0+256)
  5201     1F04  0021               	movlb	1	; select bank1
  5202     1F05  0828               	movf	TMR2_SetInterruptHandler@InterruptHandler^(0+128),w
  5203     1F06  0022               	movlb	2	; select bank2
  5204     1F07  00C4               	movwf	_TMR2_InterruptHandler^(0+256)
  5205     1F08  0008               	return
  5206     1F09                     __end_of_TMR2_SetInterruptHandler:
  5207                           
  5208                           	psect	text9
  5209     135A                     __ptext9:	
  5210 ;; *************** function _PIN_MANAGER_Initialize *****************
  5211 ;; Defined at:
  5212 ;;		line 58 in file "mcc_generated_files/pin_manager.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;		None
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : B1F/0
  5223 ;;		On exit  : 1F/2
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;Total ram usage:        0 bytes
  5231 ;; Hardware stack levels used: 1
  5232 ;; Hardware stack levels required when called: 11
  5233 ;; This function calls:
  5234 ;;		_IOCAF4_SetInterruptHandler
  5235 ;;		_IOCAF5_SetInterruptHandler
  5236 ;; This function is called by:
  5237 ;;		_SYSTEM_Initialize
  5238 ;; This function uses a non-reentrant model
  5239 ;;
  5240                           
  5241     135A                     _PIN_MANAGER_Initialize:	
  5242                           ;psect for function _PIN_MANAGER_Initialize
  5243                           
  5244                           
  5245                           ;mcc_generated_files/pin_manager.c: 63:     LATA = 0x00;
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5249     135A  0022               	movlb	2	; select bank2
  5250     135B  018C               	clrf	12	;volatile
  5251                           
  5252                           ;mcc_generated_files/pin_manager.c: 64:     LATB = 0x00;
  5253     135C  018D               	clrf	13	;volatile
  5254                           
  5255                           ;mcc_generated_files/pin_manager.c: 65:     LATC = 0x00;
  5256     135D  018E               	clrf	14	;volatile
  5257                           
  5258                           ;mcc_generated_files/pin_manager.c: 70:     TRISA = 0x30;
  5259     135E  3030               	movlw	48
  5260     135F  0021               	movlb	1	; select bank1
  5261     1360  008C               	movwf	12	;volatile
  5262                           
  5263                           ;mcc_generated_files/pin_manager.c: 71:     TRISB = 0x70;
  5264     1361  3070               	movlw	112
  5265     1362  008D               	movwf	13	;volatile
  5266                           
  5267                           ;mcc_generated_files/pin_manager.c: 72:     TRISC = 0xFF;
  5268     1363  30FF               	movlw	255
  5269     1364  008E               	movwf	14	;volatile
  5270                           
  5271                           ;mcc_generated_files/pin_manager.c: 77:     ANSELC = 0xCF;
  5272     1365  30CF               	movlw	207
  5273     1366  0023               	movlb	3	; select bank3
  5274     1367  008E               	movwf	14	;volatile
  5275                           
  5276                           ;mcc_generated_files/pin_manager.c: 78:     ANSELB = 0x00;
  5277     1368  018D               	clrf	13	;volatile
  5278                           
  5279                           ;mcc_generated_files/pin_manager.c: 79:     ANSELA = 0x00;
  5280     1369  018C               	clrf	12	;volatile
  5281                           
  5282                           ;mcc_generated_files/pin_manager.c: 84:     WPUB = 0x00;
  5283     136A  0024               	movlb	4	; select bank4
  5284     136B  018D               	clrf	13	;volatile
  5285                           
  5286                           ;mcc_generated_files/pin_manager.c: 85:     WPUA = 0x30;
  5287     136C  3030               	movlw	48
  5288     136D  008C               	movwf	12	;volatile
  5289                           
  5290                           ;mcc_generated_files/pin_manager.c: 86:     OPTION_REGbits.nWPUEN = 0;
  5291     136E  0021               	movlb	1	; select bank1
  5292     136F  1395               	bcf	21,7	;volatile
  5293                           
  5294                           ;mcc_generated_files/pin_manager.c: 92:     APFCON = 0x00;
  5295     1370  0022               	movlb	2	; select bank2
  5296     1371  019D               	clrf	29	;volatile
  5297                           
  5298                           ;mcc_generated_files/pin_manager.c: 98:     IOCAFbits.IOCAF4 = 0;
  5299     1372  0027               	movlb	7	; select bank7
  5300     1373  1213               	bcf	19,4	;volatile
  5301                           
  5302                           ;mcc_generated_files/pin_manager.c: 100:     IOCAFbits.IOCAF5 = 0;
  5303     1374  1293               	bcf	19,5	;volatile
  5304                           
  5305                           ;mcc_generated_files/pin_manager.c: 102:     IOCANbits.IOCAN4 = 1;
  5306     1375  1612               	bsf	18,4	;volatile
  5307                           
  5308                           ;mcc_generated_files/pin_manager.c: 104:     IOCANbits.IOCAN5 = 1;
  5309     1376  1692               	bsf	18,5	;volatile
  5310                           
  5311                           ;mcc_generated_files/pin_manager.c: 106:     IOCAPbits.IOCAP4 = 0;
  5312     1377  1211               	bcf	17,4	;volatile
  5313                           
  5314                           ;mcc_generated_files/pin_manager.c: 108:     IOCAPbits.IOCAP5 = 0;
  5315     1378  1291               	bcf	17,5	;volatile
  5316                           
  5317                           ;mcc_generated_files/pin_manager.c: 113:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
  5318     1379  3002               	movlw	low _IOCAF4_DefaultInterruptHandler
  5319     137A  0021               	movlb	1	; select bank1
  5320     137B  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5321     137C  3000               	movlw	high _IOCAF4_DefaultInterruptHandler
  5322     137D  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5323     137E  319E  26C9  3193   	fcall	_IOCAF4_SetInterruptHandler
  5324                           
  5325                           ;mcc_generated_files/pin_manager.c: 114:     IOCAF5_SetInterruptHandler(IOCAF5_DefaultIn
      +                          terruptHandler);
  5326     1381  3003               	movlw	low _IOCAF5_DefaultInterruptHandler
  5327     1382  0021               	movlb	1	; select bank1
  5328     1383  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5329     1384  3000               	movlw	high _IOCAF5_DefaultInterruptHandler
  5330     1385  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5331     1386  319E  26D1         	fcall	_IOCAF5_SetInterruptHandler
  5332                           
  5333                           ;mcc_generated_files/pin_manager.c: 117:     INTCONbits.IOCIE = 1;
  5334     1388  158B               	bsf	11,3	;volatile
  5335     1389  0008               	return
  5336     138A                     __end_of_PIN_MANAGER_Initialize:
  5337                           
  5338                           	psect	text10
  5339     1F89                     __ptext10:	
  5340 ;; *************** function _OSCILLATOR_Initialize *****************
  5341 ;; Defined at:
  5342 ;;		line 60 in file "mcc_generated_files/mcc.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2
  5351 ;; Tracked objects:
  5352 ;;		On entry : 1F/2
  5353 ;;		On exit  : 1F/1
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used: 1
  5362 ;; Hardware stack levels required when called: 10
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_SYSTEM_Initialize
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370     1F89                     _OSCILLATOR_Initialize:	
  5371                           ;psect for function _OSCILLATOR_Initialize
  5372                           
  5373                           
  5374                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0xFC;
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5378     1F89  30FC               	movlw	252
  5379     1F8A  0021               	movlb	1	; select bank1
  5380     1F8B  0099               	movwf	25	;volatile
  5381                           
  5382                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  5383     1F8C  0198               	clrf	24	;volatile
  5384                           
  5385                           ;mcc_generated_files/mcc.c: 67:     ACTCON = 0x90;
  5386     1F8D  3090               	movlw	144
  5387     1F8E  0027               	movlb	7	; select bank7
  5388     1F8F  009B               	movwf	27	;volatile
  5389                           
  5390                           ;mcc_generated_files/mcc.c: 69:     BORCON = 0x00;
  5391     1F90  0022               	movlb	2	; select bank2
  5392     1F91  0196               	clrf	22	;volatile
  5393     1F92                     l110:	
  5394                           ;mcc_generated_files/mcc.c: 72:     {;mcc_generated_files/mcc.c: 73:     }
  5395                           
  5396                           
  5397                           ;mcc_generated_files/mcc.c: 71:     while(PLLRDY == 0)
  5398     1F92  0021               	movlb	1	; select bank1
  5399     1F93  1B1A               	btfsc	26,6	;volatile
  5400     1F94  0008               	return
  5401     1F95  2F92               	goto	l110
  5402     1F96                     __end_of_OSCILLATOR_Initialize:
  5403                           
  5404                           	psect	text11
  5405     07BE                     __ptext11:	
  5406 ;; *************** function _EUSART_Initialize *****************
  5407 ;; Defined at:
  5408 ;;		line 88 in file "mcc_generated_files/eusart.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 1F/0
  5419 ;;		On exit  : 1F/1
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used: 1
  5428 ;; Hardware stack levels required when called: 11
  5429 ;; This function calls:
  5430 ;;		_EUSART_SetErrorHandler
  5431 ;;		_EUSART_SetFramingErrorHandler
  5432 ;;		_EUSART_SetOverrunErrorHandler
  5433 ;;		_EUSART_SetRxInterruptHandler
  5434 ;;		_EUSART_SetTxInterruptHandler
  5435 ;; This function is called by:
  5436 ;;		_SYSTEM_Initialize
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440     07BE                     _EUSART_Initialize:	
  5441                           ;psect for function _EUSART_Initialize
  5442                           
  5443                           
  5444                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  5445                           
  5446                           ;incstack = 0
  5447                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5448     07BE  0021               	movlb	1	; select bank1
  5449     07BF  1291               	bcf	17,5	;volatile
  5450                           
  5451                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5452     07C0  30C1               	movlw	low _EUSART_Receive_ISR
  5453     07C1  00A8               	movwf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128)
  5454     07C2  3013               	movlw	high _EUSART_Receive_ISR
  5455     07C3  00A9               	movwf	(EUSART_SetRxInterruptHandler@interruptHandler^(0+128)+1)
  5456     07C4  319E  26F1  3187   	fcall	_EUSART_SetRxInterruptHandler
  5457                           
  5458                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  5459     07C7  0021               	movlb	1	; select bank1
  5460     07C8  1211               	bcf	17,4	;volatile
  5461                           
  5462                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  5463     07C9  3006               	movlw	low _EUSART_Transmit_ISR
  5464     07CA  00A8               	movwf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128)
  5465     07CB  3012               	movlw	high _EUSART_Transmit_ISR
  5466     07CC  00A9               	movwf	(EUSART_SetTxInterruptHandler@interruptHandler^(0+128)+1)
  5467     07CD  319E  26F9  3187   	fcall	_EUSART_SetTxInterruptHandler
  5468                           
  5469                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  5470     07D0  3008               	movlw	8
  5471     07D1  0023               	movlb	3	; select bank3
  5472     07D2  009F               	movwf	31	;volatile
  5473                           
  5474                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x80;
  5475     07D3  3080               	movlw	128
  5476     07D4  009D               	movwf	29	;volatile
  5477                           
  5478                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  5479     07D5  3024               	movlw	36
  5480     07D6  009E               	movwf	30	;volatile
  5481                           
  5482                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xE1;
  5483     07D7  30E1               	movlw	225
  5484     07D8  009B               	movwf	27	;volatile
  5485                           
  5486                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x04;
  5487     07D9  3004               	movlw	4
  5488     07DA  009C               	movwf	28	;volatile
  5489                           
  5490                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  5491     07DB  30A4               	movlw	low _EUSART_DefaultFramingErrorHandler
  5492     07DC  0021               	movlb	1	; select bank1
  5493     07DD  00A8               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128)
  5494     07DE  301E               	movlw	high _EUSART_DefaultFramingErrorHandler
  5495     07DF  00A9               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler^(0+128)+1)
  5496     07E0  319E  26E1  3187   	fcall	_EUSART_SetFramingErrorHandler
  5497                           
  5498                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  5499     07E3  30B1               	movlw	low _EUSART_DefaultOverrunErrorHandler
  5500     07E4  0021               	movlb	1	; select bank1
  5501     07E5  00A8               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)
  5502     07E6  301E               	movlw	high _EUSART_DefaultOverrunErrorHandler
  5503     07E7  00A9               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler^(0+128)+1)
  5504     07E8  319E  26E9  3187   	fcall	_EUSART_SetOverrunErrorHandler
  5505                           
  5506                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  5507     07EB  30A5               	movlw	low _EUSART_DefaultErrorHandler
  5508     07EC  0021               	movlb	1	; select bank1
  5509     07ED  00A8               	movwf	EUSART_SetErrorHandler@interruptHandler^(0+128)
  5510     07EE  301E               	movlw	high _EUSART_DefaultErrorHandler
  5511     07EF  00A9               	movwf	(EUSART_SetErrorHandler@interruptHandler^(0+128)+1)
  5512     07F0  319E  26D9         	fcall	_EUSART_SetErrorHandler
  5513                           
  5514                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  5515     07F2  01E0               	clrf	_eusartRxLastError^(0+256)	;volatile
  5516                           
  5517                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  5518     07F3  01E4               	clrf	_eusartTxHead^(0+256)	;volatile
  5519                           
  5520                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  5521     07F4  01E3               	clrf	_eusartTxTail^(0+256)	;volatile
  5522                           
  5523                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  5524     07F5  3008               	movlw	8
  5525     07F6  0021               	movlb	1	; select bank1
  5526     07F7  00EF               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  5527                           
  5528                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  5529     07F8  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
  5530                           
  5531                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  5532     07F9  0022               	movlb	2	; select bank2
  5533     07FA  01E2               	clrf	_eusartRxTail^(0+256)	;volatile
  5534                           
  5535                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  5536     07FB  01E1               	clrf	_eusartRxCount^(0+256)	;volatile
  5537                           
  5538                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  5539     07FC  0021               	movlb	1	; select bank1
  5540     07FD  1691               	bsf	17,5	;volatile
  5541     07FE  0008               	return
  5542     07FF                     __end_of_EUSART_Initialize:
  5543                           
  5544                           	psect	text12
  5545     1EF9                     __ptext12:	
  5546 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  5547 ;; Defined at:
  5548 ;;		line 276 in file "mcc_generated_files/eusart.c"
  5549 ;; Parameters:    Size  Location     Type
  5550 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5551 ;;		 -> EUSART_Transmit_ISR(1), 
  5552 ;; Auto vars:     Size  Location     Type
  5553 ;;		None
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  1    wreg      void 
  5556 ;; Registers used:
  5557 ;;		wreg
  5558 ;; Tracked objects:
  5559 ;;		On entry : 1F/1
  5560 ;;		On exit  : 1F/2
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5563 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5566 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5567 ;;Total ram usage:        2 bytes
  5568 ;; Hardware stack levels used: 1
  5569 ;; Hardware stack levels required when called: 10
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_EUSART_Initialize
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577     1EF9                     _EUSART_SetTxInterruptHandler:	
  5578                           ;psect for function _EUSART_SetTxInterruptHandler
  5579                           
  5580                           
  5581                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  5585     1EF9  0829               	movf	(EUSART_SetTxInterruptHandler@interruptHandler+1)^(0+128),w
  5586     1EFA  0022               	movlb	2	; select bank2
  5587     1EFB  00C9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
  5588     1EFC  0021               	movlb	1	; select bank1
  5589     1EFD  0828               	movf	EUSART_SetTxInterruptHandler@interruptHandler^(0+128),w
  5590     1EFE  0022               	movlb	2	; select bank2
  5591     1EFF  00C8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
  5592     1F00  0008               	return
  5593     1F01                     __end_of_EUSART_SetTxInterruptHandler:
  5594                           
  5595                           	psect	text13
  5596     1EF1                     __ptext13:	
  5597 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  5598 ;; Defined at:
  5599 ;;		line 280 in file "mcc_generated_files/eusart.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5602 ;;		 -> EUSART_Receive_ISR(1), 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;		None
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg
  5609 ;; Tracked objects:
  5610 ;;		On entry : 1F/1
  5611 ;;		On exit  : 1F/2
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5614 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;Total ram usage:        2 bytes
  5619 ;; Hardware stack levels used: 1
  5620 ;; Hardware stack levels required when called: 10
  5621 ;; This function calls:
  5622 ;;		Nothing
  5623 ;; This function is called by:
  5624 ;;		_EUSART_Initialize
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628     1EF1                     _EUSART_SetRxInterruptHandler:	
  5629                           ;psect for function _EUSART_SetRxInterruptHandler
  5630                           
  5631                           
  5632                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  5633                           
  5634                           ;incstack = 0
  5635                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  5636     1EF1  0829               	movf	(EUSART_SetRxInterruptHandler@interruptHandler+1)^(0+128),w
  5637     1EF2  0022               	movlb	2	; select bank2
  5638     1EF3  00C7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
  5639     1EF4  0021               	movlb	1	; select bank1
  5640     1EF5  0828               	movf	EUSART_SetRxInterruptHandler@interruptHandler^(0+128),w
  5641     1EF6  0022               	movlb	2	; select bank2
  5642     1EF7  00C6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
  5643     1EF8  0008               	return
  5644     1EF9                     __end_of_EUSART_SetRxInterruptHandler:
  5645                           
  5646                           	psect	text14
  5647     1EE9                     __ptext14:	
  5648 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  5649 ;; Defined at:
  5650 ;;		line 268 in file "mcc_generated_files/eusart.c"
  5651 ;; Parameters:    Size  Location     Type
  5652 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5653 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;		None
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg
  5660 ;; Tracked objects:
  5661 ;;		On entry : 1F/1
  5662 ;;		On exit  : 1F/2
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5665 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5668 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5669 ;;Total ram usage:        2 bytes
  5670 ;; Hardware stack levels used: 1
  5671 ;; Hardware stack levels required when called: 10
  5672 ;; This function calls:
  5673 ;;		Nothing
  5674 ;; This function is called by:
  5675 ;;		_EUSART_Initialize
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679     1EE9                     _EUSART_SetOverrunErrorHandler:	
  5680                           ;psect for function _EUSART_SetOverrunErrorHandler
  5681                           
  5682                           
  5683                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  5684                           
  5685                           ;incstack = 0
  5686                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  5687     1EE9  0829               	movf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^(0+128),w
  5688     1EEA  0022               	movlb	2	; select bank2
  5689     1EEB  00C1               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
  5690     1EEC  0021               	movlb	1	; select bank1
  5691     1EED  0828               	movf	EUSART_SetOverrunErrorHandler@interruptHandler^(0+128),w
  5692     1EEE  0022               	movlb	2	; select bank2
  5693     1EEF  00C0               	movwf	_EUSART_OverrunErrorHandler^(0+256)
  5694     1EF0  0008               	return
  5695     1EF1                     __end_of_EUSART_SetOverrunErrorHandler:
  5696                           
  5697                           	psect	text15
  5698     1EE1                     __ptext15:	
  5699 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  5700 ;; Defined at:
  5701 ;;		line 264 in file "mcc_generated_files/eusart.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5704 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  5705 ;; Auto vars:     Size  Location     Type
  5706 ;;		None
  5707 ;; Return value:  Size  Location     Type
  5708 ;;                  1    wreg      void 
  5709 ;; Registers used:
  5710 ;;		wreg
  5711 ;; Tracked objects:
  5712 ;;		On entry : 1F/1
  5713 ;;		On exit  : 1F/2
  5714 ;;		Unchanged: 0/0
  5715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5716 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5719 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;Total ram usage:        2 bytes
  5721 ;; Hardware stack levels used: 1
  5722 ;; Hardware stack levels required when called: 10
  5723 ;; This function calls:
  5724 ;;		Nothing
  5725 ;; This function is called by:
  5726 ;;		_EUSART_Initialize
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730     1EE1                     _EUSART_SetFramingErrorHandler:	
  5731                           ;psect for function _EUSART_SetFramingErrorHandler
  5732                           
  5733                           
  5734                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  5735                           
  5736                           ;incstack = 0
  5737                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  5738     1EE1  0829               	movf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^(0+128),w
  5739     1EE2  0022               	movlb	2	; select bank2
  5740     1EE3  00C3               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
  5741     1EE4  0021               	movlb	1	; select bank1
  5742     1EE5  0828               	movf	EUSART_SetFramingErrorHandler@interruptHandler^(0+128),w
  5743     1EE6  0022               	movlb	2	; select bank2
  5744     1EE7  00C2               	movwf	_EUSART_FramingErrorHandler^(0+256)
  5745     1EE8  0008               	return
  5746     1EE9                     __end_of_EUSART_SetFramingErrorHandler:
  5747                           
  5748                           	psect	text16
  5749     1ED9                     __ptext16:	
  5750 ;; *************** function _EUSART_SetErrorHandler *****************
  5751 ;; Defined at:
  5752 ;;		line 272 in file "mcc_generated_files/eusart.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;  interruptHan    2    0[BANK1 ] PTR FTN()void 
  5755 ;;		 -> EUSART_DefaultErrorHandler(1), 
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg
  5762 ;; Tracked objects:
  5763 ;;		On entry : 1F/1
  5764 ;;		On exit  : 1F/2
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        2 bytes
  5772 ;; Hardware stack levels used: 1
  5773 ;; Hardware stack levels required when called: 10
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_EUSART_Initialize
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781     1ED9                     _EUSART_SetErrorHandler:	
  5782                           ;psect for function _EUSART_SetErrorHandler
  5783                           
  5784                           
  5785                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  5786                           
  5787                           ;incstack = 0
  5788                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  5789     1ED9  0829               	movf	(EUSART_SetErrorHandler@interruptHandler+1)^(0+128),w
  5790     1EDA  0022               	movlb	2	; select bank2
  5791     1EDB  00BF               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
  5792     1EDC  0021               	movlb	1	; select bank1
  5793     1EDD  0828               	movf	EUSART_SetErrorHandler@interruptHandler^(0+128),w
  5794     1EDE  0022               	movlb	2	; select bank2
  5795     1EDF  00BE               	movwf	_EUSART_ErrorHandler^(0+256)
  5796     1EE0  0008               	return
  5797     1EE1                     __end_of_EUSART_SetErrorHandler:
  5798                           
  5799                           	psect	text17
  5800     1196                     __ptext17:	
  5801 ;; *************** function _PS2Keyboard_Init *****************
  5802 ;; Defined at:
  5803 ;;		line 43 in file "ps2_keyboard.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;		None
  5806 ;; Auto vars:     Size  Location     Type
  5807 ;;		None
  5808 ;; Return value:  Size  Location     Type
  5809 ;;                  1    wreg      void 
  5810 ;; Registers used:
  5811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5812 ;; Tracked objects:
  5813 ;;		On entry : 1F/0
  5814 ;;		On exit  : 1F/2
  5815 ;;		Unchanged: 0/0
  5816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;Total ram usage:        0 bytes
  5822 ;; Hardware stack levels used: 1
  5823 ;; Hardware stack levels required when called: 11
  5824 ;; This function calls:
  5825 ;;		_GenericQueue_Init
  5826 ;;		_IOCAF4_SetInterruptHandler
  5827 ;;		_IOCAF5_SetInterruptHandler
  5828 ;; This function is called by:
  5829 ;;		_main
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833     1196                     _PS2Keyboard_Init:	
  5834                           ;psect for function _PS2Keyboard_Init
  5835                           
  5836                           
  5837                           ;ps2_keyboard.c: 44:     GenericQueue_Init(&keyboardScanCodeQueue, sizeof (PS2ScanCode))
      +                          ;
  5838                           
  5839                           ;incstack = 0
  5840                           ; Regs used in _PS2Keyboard_Init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5841     1196  3091               	movlw	145
  5842     1197  0021               	movlb	1	; select bank1
  5843     1198  00A8               	movwf	GenericQueue_Init@q^(0+128)
  5844     1199  3023               	movlw	35
  5845     119A  00A9               	movwf	(GenericQueue_Init@q^(0+128)+1)
  5846     119B  3003               	movlw	3
  5847     119C  00AA               	movwf	GenericQueue_Init@element_size^(0+128)
  5848     119D  3000               	movlw	0
  5849     119E  00AB               	movwf	(GenericQueue_Init@element_size^(0+128)+1)
  5850     119F  3192  2284  3191   	fcall	_GenericQueue_Init
  5851                           
  5852                           ;ps2_keyboard.c: 45:     IOCAF4_SetInterruptHandler(PS2Keyboard_ClockInterrupt);
  5853     11A2  3002               	movlw	low _PS2Keyboard_ClockInterrupt
  5854     11A3  00A8               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)
  5855     11A4  3005               	movlw	high _PS2Keyboard_ClockInterrupt
  5856     11A5  00A9               	movwf	(IOCAF4_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5857     11A6  319E  26C9  3191   	fcall	_IOCAF4_SetInterruptHandler
  5858                           
  5859                           ;ps2_keyboard.c: 46:     IOCAF5_SetInterruptHandler(PS2Keyboard_DataInterrupt);
  5860     11A9  3096               	movlw	low _PS2Keyboard_DataInterrupt
  5861     11AA  0021               	movlb	1	; select bank1
  5862     11AB  00A8               	movwf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)
  5863     11AC  301F               	movlw	high _PS2Keyboard_DataInterrupt
  5864     11AD  00A9               	movwf	(IOCAF5_SetInterruptHandler@InterruptHandler^(0+128)+1)
  5865     11AE  319E  26D1         	fcall	_IOCAF5_SetInterruptHandler
  5866     11B0  0008               	return
  5867     11B1                     __end_of_PS2Keyboard_Init:
  5868                           
  5869                           	psect	text18
  5870     1ED1                     __ptext18:	
  5871 ;; *************** function _IOCAF5_SetInterruptHandler *****************
  5872 ;; Defined at:
  5873 ;;		line 183 in file "mcc_generated_files/pin_manager.c"
  5874 ;; Parameters:    Size  Location     Type
  5875 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5876 ;;		 -> PS2Keyboard_DataInterrupt(1), IOCAF5_DefaultInterruptHandler(1), 
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg
  5883 ;; Tracked objects:
  5884 ;;		On entry : 1F/1
  5885 ;;		On exit  : 1F/2
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5888 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5891 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;Total ram usage:        2 bytes
  5893 ;; Hardware stack levels used: 1
  5894 ;; Hardware stack levels required when called: 10
  5895 ;; This function calls:
  5896 ;;		Nothing
  5897 ;; This function is called by:
  5898 ;;		_PIN_MANAGER_Initialize
  5899 ;;		_PS2Keyboard_Init
  5900 ;; This function uses a non-reentrant model
  5901 ;;
  5902                           
  5903     1ED1                     _IOCAF5_SetInterruptHandler:	
  5904                           ;psect for function _IOCAF5_SetInterruptHandler
  5905                           
  5906                           
  5907                           ;mcc_generated_files/pin_manager.c: 184:     IOCAF5_InterruptHandler = InterruptHandler;
  5908                           
  5909                           ;incstack = 0
  5910                           ; Regs used in _IOCAF5_SetInterruptHandler: [wreg]
  5911     1ED1  0829               	movf	(IOCAF5_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5912     1ED2  0022               	movlb	2	; select bank2
  5913     1ED3  00EB               	movwf	(_IOCAF5_InterruptHandler+1)^(0+256)
  5914     1ED4  0021               	movlb	1	; select bank1
  5915     1ED5  0828               	movf	IOCAF5_SetInterruptHandler@InterruptHandler^(0+128),w
  5916     1ED6  0022               	movlb	2	; select bank2
  5917     1ED7  00EA               	movwf	_IOCAF5_InterruptHandler^(0+256)
  5918     1ED8  0008               	return
  5919     1ED9                     __end_of_IOCAF5_SetInterruptHandler:
  5920                           
  5921                           	psect	text19
  5922     1EC9                     __ptext19:	
  5923 ;; *************** function _IOCAF4_SetInterruptHandler *****************
  5924 ;; Defined at:
  5925 ;;		line 153 in file "mcc_generated_files/pin_manager.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;  InterruptHan    2    0[BANK1 ] PTR FTN()void 
  5928 ;;		 -> PS2Keyboard_ClockInterrupt(1), IOCAF4_DefaultInterruptHandler(1), 
  5929 ;; Auto vars:     Size  Location     Type
  5930 ;;		None
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  1    wreg      void 
  5933 ;; Registers used:
  5934 ;;		wreg
  5935 ;; Tracked objects:
  5936 ;;		On entry : 1F/1
  5937 ;;		On exit  : 1F/2
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5940 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;Total ram usage:        2 bytes
  5945 ;; Hardware stack levels used: 1
  5946 ;; Hardware stack levels required when called: 10
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_PIN_MANAGER_Initialize
  5951 ;;		_PS2Keyboard_Init
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955     1EC9                     _IOCAF4_SetInterruptHandler:	
  5956                           ;psect for function _IOCAF4_SetInterruptHandler
  5957                           
  5958                           
  5959                           ;mcc_generated_files/pin_manager.c: 154:     IOCAF4_InterruptHandler = InterruptHandler;
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
  5963     1EC9  0829               	movf	(IOCAF4_SetInterruptHandler@InterruptHandler+1)^(0+128),w
  5964     1ECA  0022               	movlb	2	; select bank2
  5965     1ECB  00ED               	movwf	(_IOCAF4_InterruptHandler+1)^(0+256)
  5966     1ECC  0021               	movlb	1	; select bank1
  5967     1ECD  0828               	movf	IOCAF4_SetInterruptHandler@InterruptHandler^(0+128),w
  5968     1ECE  0022               	movlb	2	; select bank2
  5969     1ECF  00EC               	movwf	_IOCAF4_InterruptHandler^(0+256)
  5970     1ED0  0008               	return
  5971     1ED1                     __end_of_IOCAF4_SetInterruptHandler:
  5972                           
  5973                           	psect	text20
  5974     1284                     __ptext20:	
  5975 ;; *************** function _GenericQueue_Init *****************
  5976 ;; Defined at:
  5977 ;;		line 4 in file "generic_queue.c"
  5978 ;; Parameters:    Size  Location     Type
  5979 ;;  q               2    0[BANK1 ] PTR struct .
  5980 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  5981 ;;  element_size    2    2[BANK1 ] unsigned int 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;		None
  5984 ;; Return value:  Size  Location     Type
  5985 ;;                  1    wreg      void 
  5986 ;; Registers used:
  5987 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5988 ;; Tracked objects:
  5989 ;;		On entry : 1F/1
  5990 ;;		On exit  : 1F/1
  5991 ;;		Unchanged: 0/0
  5992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5993 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5996 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5997 ;;Total ram usage:        4 bytes
  5998 ;; Hardware stack levels used: 1
  5999 ;; Hardware stack levels required when called: 10
  6000 ;; This function calls:
  6001 ;;		Nothing
  6002 ;; This function is called by:
  6003 ;;		_PS2Keyboard_Init
  6004 ;; This function uses a non-reentrant model
  6005 ;;
  6006                           
  6007     1284                     _GenericQueue_Init:	
  6008                           ;psect for function _GenericQueue_Init
  6009                           
  6010                           
  6011                           ;generic_queue.c: 5:     q->element_size = element_size;
  6012                           
  6013                           ;incstack = 0
  6014                           ; Regs used in _GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
  6015     1284  0828               	movf	GenericQueue_Init@q^(0+128),w
  6016     1285  3E5A               	addlw	90
  6017     1286  0086               	movwf	6
  6018     1287  3000               	movlw	0
  6019     1288  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6020     1289  0087               	movwf	7
  6021     128A  082A               	movf	GenericQueue_Init@element_size^(0+128),w
  6022     128B  3FC0               	movwi [0]fsr1
  6023     128C  082B               	movf	(GenericQueue_Init@element_size+1)^(0+128),w
  6024     128D  3FC1               	movwi [1]fsr1
  6025                           
  6026                           ;generic_queue.c: 6:     q->front = 0;
  6027     128E  0828               	movf	GenericQueue_Init@q^(0+128),w
  6028     128F  3E5C               	addlw	92
  6029     1290  0086               	movwf	6
  6030     1291  3000               	movlw	0
  6031     1292  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6032     1293  0087               	movwf	7
  6033     1294  0181               	clrf	1
  6034                           
  6035                           ;generic_queue.c: 7:     q->rear = 0;
  6036     1295  0828               	movf	GenericQueue_Init@q^(0+128),w
  6037     1296  3E5D               	addlw	93
  6038     1297  0086               	movwf	6
  6039     1298  3000               	movlw	0
  6040     1299  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6041     129A  0087               	movwf	7
  6042     129B  0181               	clrf	1
  6043                           
  6044                           ;generic_queue.c: 8:     q->size = 0;
  6045     129C  0828               	movf	GenericQueue_Init@q^(0+128),w
  6046     129D  3E5E               	addlw	94
  6047     129E  0086               	movwf	6
  6048     129F  3000               	movlw	0
  6049     12A0  3D29               	addwfc	(GenericQueue_Init@q+1)^(0+128),w
  6050     12A1  0087               	movwf	7
  6051     12A2  0181               	clrf	1
  6052     12A3  0008               	return
  6053     12A4                     __end_of_GenericQueue_Init:
  6054                           
  6055                           	psect	text21
  6056     11CD                     __ptext21:	
  6057 ;; *************** function _PS2Keyboard_GetScanCode *****************
  6058 ;; Defined at:
  6059 ;;		line 49 in file "ps2_keyboard.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  scanCode        1    wreg     PTR struct PS2ScanCode
  6062 ;;		 -> main@scanCode(3), 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;  scanCode        1   31[BANK1 ] PTR struct PS2ScanCode
  6065 ;;		 -> main@scanCode(3), 
  6066 ;;  ret             1   32[BANK1 ] _Bool 
  6067 ;; Return value:  Size  Location     Type
  6068 ;;                  1    wreg      _Bool 
  6069 ;; Registers used:
  6070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6071 ;; Tracked objects:
  6072 ;;		On entry : 2/1
  6073 ;;		On exit  : 1F/1
  6074 ;;		Unchanged: 0/0
  6075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6077 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6079 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;Total ram usage:        2 bytes
  6081 ;; Hardware stack levels used: 1
  6082 ;; Hardware stack levels required when called: 12
  6083 ;; This function calls:
  6084 ;;		_GenericQueue_Dequeue
  6085 ;;		_GenericQueue_IsEmpty
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091     11CD                     _PS2Keyboard_GetScanCode:	
  6092                           ;psect for function _PS2Keyboard_GetScanCode
  6093                           
  6094                           
  6095                           ;incstack = 0
  6096                           ; Regs used in _PS2Keyboard_GetScanCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6097                           ;PS2Keyboard_GetScanCode@scanCode stored from wreg
  6098     11CD  0021               	movlb	1	; select bank1
  6099     11CE  00C7               	movwf	PS2Keyboard_GetScanCode@scanCode^(0+128)
  6100                           
  6101                           ;ps2_keyboard.c: 51:     if (!GenericQueue_IsEmpty(&keyboardScanCodeQueue)) {
  6102     11CF  3091               	movlw	145
  6103     11D0  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6104     11D1  3023               	movlw	35
  6105     11D2  00A9               	movwf	(GenericQueue_IsEmpty@q^(0+128)+1)
  6106     11D3  319F  27D9  3191   	fcall	_GenericQueue_IsEmpty
  6107     11D6  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6108     11D7  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6109     11D8  1D03               	btfss	3,2
  6110     11D9  29E6               	goto	l5618
  6111                           
  6112                           ;ps2_keyboard.c: 52:         GenericQueue_Dequeue(&keyboardScanCodeQueue, scanCode);
  6113     11DA  3091               	movlw	145
  6114     11DB  00C0               	movwf	GenericQueue_Dequeue@q^(0+128)
  6115     11DC  3023               	movlw	35
  6116     11DD  00C1               	movwf	(GenericQueue_Dequeue@q^(0+128)+1)
  6117     11DE  0847               	movf	PS2Keyboard_GetScanCode@scanCode^(0+128),w
  6118     11DF  00C2               	movwf	GenericQueue_Dequeue@item^(0+128)
  6119     11E0  3189  21B7  3191   	fcall	_GenericQueue_Dequeue
  6120                           
  6121                           ;ps2_keyboard.c: 53:         ret = 1;
  6122     11E3  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6123     11E4  0AC8               	incf	PS2Keyboard_GetScanCode@ret^(0+128),f
  6124                           
  6125                           ;ps2_keyboard.c: 54:     } else {
  6126     11E5  29E7               	goto	l5620
  6127     11E6                     l5618:
  6128                           
  6129                           ;ps2_keyboard.c: 55:         ret = 0;
  6130     11E6  01C8               	clrf	PS2Keyboard_GetScanCode@ret^(0+128)
  6131     11E7                     l5620:
  6132                           
  6133                           ;ps2_keyboard.c: 57:     return ret;
  6134     11E7  0848               	movf	PS2Keyboard_GetScanCode@ret^(0+128),w
  6135     11E8  0008               	return
  6136     11E9                     __end_of_PS2Keyboard_GetScanCode:
  6137                           
  6138                           	psect	text22
  6139     09B7                     __ptext22:	
  6140 ;; *************** function _GenericQueue_Dequeue *****************
  6141 ;; Defined at:
  6142 ;;		line 27 in file "generic_queue.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  q               2   24[BANK1 ] PTR struct .
  6145 ;;		 -> keyboardScanCodeQueue(95), 
  6146 ;;  item            1   26[BANK1 ] PTR void 
  6147 ;;		 -> main@scanCode(3), 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;		None
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  1    wreg      void 
  6152 ;; Registers used:
  6153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 1F/1
  6156 ;;		On exit  : 1F/1
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6159 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;Total ram usage:        7 bytes
  6164 ;; Hardware stack levels used: 1
  6165 ;; Hardware stack levels required when called: 11
  6166 ;; This function calls:
  6167 ;;		_GenericQueue_IsEmpty
  6168 ;;		___awmod
  6169 ;;		___wmul
  6170 ;;		_memcpy
  6171 ;; This function is called by:
  6172 ;;		_PS2Keyboard_GetScanCode
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176     09B7                     _GenericQueue_Dequeue:	
  6177                           ;psect for function _GenericQueue_Dequeue
  6178                           
  6179                           
  6180                           ;generic_queue.c: 28:     if (!GenericQueue_IsEmpty(q)) {
  6181                           
  6182                           ;incstack = 0
  6183                           ; Regs used in _GenericQueue_Dequeue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6184     09B7  0841               	movf	(GenericQueue_Dequeue@q+1)^(0+128),w
  6185     09B8  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  6186     09B9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6187     09BA  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  6188     09BB  319F  27D9  3189   	fcall	_GenericQueue_IsEmpty
  6189     09BE  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  6190     09BF  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  6191     09C0  1D03               	btfss	3,2
  6192     09C1  0008               	return
  6193                           
  6194                           ;generic_queue.c: 29:         memcpy(item, &q->buffer[q->front * q->element_size], q->el
      +                          ement_size);
  6195     09C2  0842               	movf	GenericQueue_Dequeue@item^(0+128),w
  6196     09C3  00B5               	movwf	memcpy@d1^(0+128)
  6197     09C4  01B6               	clrf	(memcpy@d1+1)^(0+128)
  6198     09C5  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6199     09C6  3E5C               	addlw	92
  6200     09C7  0086               	movwf	6
  6201     09C8  3000               	movlw	0
  6202     09C9  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6203     09CA  0087               	movwf	7
  6204     09CB  0801               	movf	1,w
  6205     09CC  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6206     09CD  01C4               	clrf	(??_GenericQueue_Dequeue^(0+128)+1)
  6207     09CE  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6208     09CF  00AF               	movwf	___wmul@multiplier^(0+128)
  6209     09D0  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6210     09D1  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  6211     09D2  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6212     09D3  3E5A               	addlw	90
  6213     09D4  0086               	movwf	6
  6214     09D5  3000               	movlw	0
  6215     09D6  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6216     09D7  0087               	movwf	7
  6217     09D8  3F40               	moviw [0]fsr1
  6218     09D9  00B1               	movwf	___wmul@multiplicand^(0+128)
  6219     09DA  3F41               	moviw [1]fsr1
  6220     09DB  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  6221     09DC  3191  2160  3189   	fcall	___wmul
  6222     09DF  082F               	movf	?___wmul^(0+128),w
  6223     09E0  0740               	addwf	GenericQueue_Dequeue@q^(0+128),w
  6224     09E1  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6225     09E2  0830               	movf	(?___wmul+1)^(0+128),w
  6226     09E3  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6227     09E4  00C6               	movwf	(??_GenericQueue_Dequeue+3)^(0+128)
  6228     09E5  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6229     09E6  00B7               	movwf	memcpy@s1^(0+128)
  6230     09E7  0846               	movf	(??_GenericQueue_Dequeue+3)^(0+128),w
  6231     09E8  00B8               	movwf	(memcpy@s1+1)^(0+128)
  6232     09E9  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6233     09EA  3E5A               	addlw	90
  6234     09EB  0086               	movwf	6
  6235     09EC  3000               	movlw	0
  6236     09ED  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6237     09EE  0087               	movwf	7
  6238     09EF  3F40               	moviw [0]fsr1
  6239     09F0  00B9               	movwf	memcpy@n^(0+128)
  6240     09F1  3F41               	moviw [1]fsr1
  6241     09F2  00BA               	movwf	(memcpy@n+1)^(0+128)
  6242     09F3  3193  2334  3189   	fcall	_memcpy
  6243                           
  6244                           ;generic_queue.c: 30:         q->front = (q->front + 1) % 15;
  6245     09F6  300F               	movlw	15
  6246     09F7  00A8               	movwf	___awmod@divisor^(0+128)
  6247     09F8  3000               	movlw	0
  6248     09F9  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  6249     09FA  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6250     09FB  3E5C               	addlw	92
  6251     09FC  0086               	movwf	6
  6252     09FD  3000               	movlw	0
  6253     09FE  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6254     09FF  0087               	movwf	7
  6255     0A00  0801               	movf	1,w
  6256     0A01  3E01               	addlw	1
  6257     0A02  00AA               	movwf	___awmod@dividend^(0+128)
  6258     0A03  3000               	movlw	0
  6259     0A04  1803               	skipnc
  6260     0A05  3001               	movlw	1
  6261     0A06  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  6262     0A07  3194  24F6         	fcall	___awmod
  6263     0A09  0828               	movf	?___awmod^(0+128),w
  6264     0A0A  00C3               	movwf	??_GenericQueue_Dequeue^(0+128)
  6265     0A0B  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6266     0A0C  3E5C               	addlw	92
  6267     0A0D  00C4               	movwf	(??_GenericQueue_Dequeue+1)^(0+128)
  6268     0A0E  3000               	movlw	0
  6269     0A0F  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6270     0A10  00C5               	movwf	(??_GenericQueue_Dequeue+2)^(0+128)
  6271     0A11  0844               	movf	(??_GenericQueue_Dequeue+1)^(0+128),w
  6272     0A12  0086               	movwf	6
  6273     0A13  0845               	movf	(??_GenericQueue_Dequeue+2)^(0+128),w
  6274     0A14  0087               	movwf	7
  6275     0A15  0843               	movf	??_GenericQueue_Dequeue^(0+128),w
  6276     0A16  0081               	movwf	1
  6277                           
  6278                           ;generic_queue.c: 31:         q->size--;
  6279     0A17  0840               	movf	GenericQueue_Dequeue@q^(0+128),w
  6280     0A18  3E5E               	addlw	94
  6281     0A19  0086               	movwf	6
  6282     0A1A  3000               	movlw	0
  6283     0A1B  3D41               	addwfc	(GenericQueue_Dequeue@q+1)^(0+128),w
  6284     0A1C  0087               	movwf	7
  6285     0A1D  3001               	movlw	1
  6286     0A1E  0281               	subwf	1,f
  6287     0A1F  0008               	return
  6288     0A20                     __end_of_GenericQueue_Dequeue:
  6289                           
  6290                           	psect	text23
  6291     12E9                     __ptext23:	
  6292 ;; *************** function _Log_UtilityConvertByteToHex *****************
  6293 ;; Defined at:
  6294 ;;		line 14 in file "log.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;  byte            1    wreg     unsigned char 
  6297 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  6298 ;;		 -> main@scanCodeStr(6), 
  6299 ;;  bufSize         1    5[BANK1 ] unsigned char 
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;  byte            1    8[BANK1 ] unsigned char 
  6302 ;;  d1              1    9[BANK1 ] unsigned char 
  6303 ;;  d0              1    7[BANK1 ] unsigned char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 1F/1
  6310 ;;		On exit  : 1F/1
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6313 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;Total ram usage:        6 bytes
  6318 ;; Hardware stack levels used: 1
  6319 ;; Hardware stack levels required when called: 11
  6320 ;; This function calls:
  6321 ;;		___bmul
  6322 ;;		_hex2str
  6323 ;; This function is called by:
  6324 ;;		_main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328     12E9                     _Log_UtilityConvertByteToHex:	
  6329                           ;psect for function _Log_UtilityConvertByteToHex
  6330                           
  6331                           
  6332                           ;incstack = 0
  6333                           ; Regs used in _Log_UtilityConvertByteToHex: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6334                           ;Log_UtilityConvertByteToHex@byte stored from wreg
  6335     12E9  00B0               	movwf	Log_UtilityConvertByteToHex@byte^(0+128)
  6336                           
  6337                           ;log.c: 15:     if (bufSize < 2) {
  6338     12EA  3002               	movlw	2
  6339     12EB  022D               	subwf	Log_UtilityConvertByteToHex@bufSize^(0+128),w
  6340     12EC  1C03               	btfss	3,0
  6341     12ED  0008               	return
  6342                           
  6343                           ;log.c: 18:     uint8_t d1 = byte / 16;
  6344     12EE  0830               	movf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6345     12EF  00AE               	movwf	??_Log_UtilityConvertByteToHex^(0+128)
  6346     12F0  3004               	movlw	4
  6347     12F1                     u5295:
  6348     12F1  36AE               	lsrf	??_Log_UtilityConvertByteToHex^(0+128),f
  6349     12F2  0B89               	decfsz	9,f
  6350     12F3  2AF1               	goto	u5295
  6351     12F4  082E               	movf	??_Log_UtilityConvertByteToHex^(0+128),w
  6352     12F5  00B1               	movwf	Log_UtilityConvertByteToHex@d1^(0+128)
  6353                           
  6354                           ;log.c: 19:     uint8_t d0 = byte - d1 * 16;
  6355     12F6  30F0               	movlw	240
  6356     12F7  00A8               	movwf	___bmul@multiplicand^(0+128)
  6357     12F8  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6358     12F9  319F  27A6  3192   	fcall	___bmul
  6359     12FC  0730               	addwf	Log_UtilityConvertByteToHex@byte^(0+128),w
  6360     12FD  00AF               	movwf	Log_UtilityConvertByteToHex@d0^(0+128)
  6361                           
  6362                           ;log.c: 20:     buf[0] = hex2str(d1);
  6363     12FE  082C               	movf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6364     12FF  0086               	movwf	6
  6365     1300  0187               	clrf	7
  6366     1301  0831               	movf	Log_UtilityConvertByteToHex@d1^(0+128),w
  6367     1302  319F  27B7  3192   	fcall	_hex2str
  6368     1305  0081               	movwf	1
  6369                           
  6370                           ;log.c: 21:     buf[1] = hex2str(d0);
  6371     1306  0A2C               	incf	Log_UtilityConvertByteToHex@buf^(0+128),w
  6372     1307  0086               	movwf	6
  6373     1308  0187               	clrf	7
  6374     1309  082F               	movf	Log_UtilityConvertByteToHex@d0^(0+128),w
  6375     130A  319F  27B7         	fcall	_hex2str
  6376     130C  0081               	movwf	1
  6377     130D  0008               	return
  6378     130E                     __end_of_Log_UtilityConvertByteToHex:
  6379                           
  6380                           	psect	text24
  6381     1FB7                     __ptext24:	
  6382 ;; *************** function _hex2str *****************
  6383 ;; Defined at:
  6384 ;;		line 4 in file "log.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  val             1    wreg     unsigned char 
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  val             1    0[BANK1 ] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  1    wreg      unsigned char 
  6391 ;; Registers used:
  6392 ;;		wreg, status,2, status,0
  6393 ;; Tracked objects:
  6394 ;;		On entry : 1F/1
  6395 ;;		On exit  : 1F/1
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;Total ram usage:        1 bytes
  6403 ;; Hardware stack levels used: 1
  6404 ;; Hardware stack levels required when called: 10
  6405 ;; This function calls:
  6406 ;;		Nothing
  6407 ;; This function is called by:
  6408 ;;		_Log_UtilityConvertByteToHex
  6409 ;; This function uses a non-reentrant model
  6410 ;;
  6411                           
  6412     1FB7                     _hex2str:	
  6413                           ;psect for function _hex2str
  6414                           
  6415                           
  6416                           ;incstack = 0
  6417                           ; Regs used in _hex2str: [wreg+status,2+status,0]
  6418                           ;hex2str@val stored from wreg
  6419     1FB7  00A8               	movwf	hex2str@val^(0+128)
  6420                           
  6421                           ;log.c: 5:     if (val < 10) {
  6422     1FB8  300A               	movlw	10
  6423     1FB9  0228               	subwf	hex2str@val^(0+128),w
  6424     1FBA  1803               	skipnc
  6425     1FBB  2FBF               	goto	l5348
  6426                           
  6427                           ;log.c: 6:         return val + '0';
  6428     1FBC  0828               	movf	hex2str@val^(0+128),w
  6429     1FBD  3E30               	addlw	48
  6430     1FBE  0008               	return
  6431     1FBF                     l5348:
  6432     1FBF  3010               	movlw	16
  6433     1FC0  0228               	subwf	hex2str@val^(0+128),w
  6434     1FC1  1803               	skipnc
  6435     1FC2  2FC6               	goto	l5356
  6436                           
  6437                           ;log.c: 8:         return val - 10 + 'A';
  6438     1FC3  0828               	movf	hex2str@val^(0+128),w
  6439     1FC4  3E37               	addlw	55
  6440     1FC5  0008               	return
  6441     1FC6                     l5356:
  6442                           
  6443                           ;log.c: 10:         return 'X';
  6444     1FC6  3058               	movlw	88
  6445     1FC7  0008               	return
  6446     1FC8                     __end_of_hex2str:
  6447                           
  6448                           	psect	text25
  6449     117B                     __ptext25:	
  6450 ;; *************** function _Log_Message *****************
  6451 ;; Defined at:
  6452 ;;		line 24 in file "log.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  buf             1    wreg     PTR const unsigned char 
  6455 ;;		 -> main@scanCodeStr(6), 
  6456 ;;  bufSize         1    2[BANK1 ] unsigned char 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  buf             1    4[BANK1 ] PTR const unsigned char 
  6459 ;;		 -> main@scanCodeStr(6), 
  6460 ;;  i               1    5[BANK1 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 1F/1
  6467 ;;		On exit  : 1F/1
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6470 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;Total ram usage:        4 bytes
  6475 ;; Hardware stack levels used: 1
  6476 ;; Hardware stack levels required when called: 11
  6477 ;; This function calls:
  6478 ;;		_EUSART_Write
  6479 ;;		_EUSART_is_tx_ready
  6480 ;; This function is called by:
  6481 ;;		_main
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485     117B                     _Log_Message:	
  6486                           ;psect for function _Log_Message
  6487                           
  6488                           
  6489                           ;incstack = 0
  6490                           ; Regs used in _Log_Message: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6491                           ;Log_Message@buf stored from wreg
  6492     117B  00AC               	movwf	Log_Message@buf^(0+128)
  6493                           
  6494                           ;log.c: 25:     for (uint8_t i = 0; i < bufSize; i++) {
  6495     117C  01AD               	clrf	Log_Message@i^(0+128)
  6496     117D                     l5644:
  6497     117D  082A               	movf	Log_Message@bufSize^(0+128),w
  6498     117E  022D               	subwf	Log_Message@i^(0+128),w
  6499     117F  1803               	btfsc	3,0
  6500     1180  0008               	return
  6501     1181                     l5638:
  6502     1181  319E  26C2  3191   	fcall	_EUSART_is_tx_ready
  6503     1184  3A00               	xorlw	0
  6504     1185  1903               	skipnz
  6505     1186  2981               	goto	l5638
  6506                           
  6507                           ;log.c: 27:         EUSART_Write(buf[i]);
  6508     1187  082D               	movf	Log_Message@i^(0+128),w
  6509     1188  072C               	addwf	Log_Message@buf^(0+128),w
  6510     1189  00AB               	movwf	??_Log_Message^(0+128)
  6511     118A  082B               	movf	??_Log_Message^(0+128),w
  6512     118B  0086               	movwf	6
  6513     118C  0187               	clrf	7
  6514     118D  0801               	movf	1,w
  6515     118E  3192  22C6  3191   	fcall	_EUSART_Write
  6516                           
  6517                           ;log.c: 28:     }
  6518     1191  3001               	movlw	1
  6519     1192  00AB               	movwf	??_Log_Message^(0+128)
  6520     1193  082B               	movf	??_Log_Message^(0+128),w
  6521     1194  07AD               	addwf	Log_Message@i^(0+128),f
  6522     1195  297D               	goto	l5644
  6523     1196                     __end_of_Log_Message:
  6524                           
  6525                           	psect	text26
  6526     1EC2                     __ptext26:	
  6527 ;; *************** function _EUSART_is_tx_ready *****************
  6528 ;; Defined at:
  6529 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6530 ;; Parameters:    Size  Location     Type
  6531 ;;		None
  6532 ;; Auto vars:     Size  Location     Type
  6533 ;;		None
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      _Bool 
  6536 ;; Registers used:
  6537 ;;		wreg, status,2, status,0
  6538 ;; Tracked objects:
  6539 ;;		On entry : 1F/1
  6540 ;;		On exit  : 1F/1
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;Total ram usage:        0 bytes
  6548 ;; Hardware stack levels used: 1
  6549 ;; Hardware stack levels required when called: 10
  6550 ;; This function calls:
  6551 ;;		Nothing
  6552 ;; This function is called by:
  6553 ;;		_Log_Message
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557     1EC2                     _EUSART_is_tx_ready:	
  6558                           ;psect for function _EUSART_is_tx_ready
  6559                           
  6560                           
  6561                           ;mcc_generated_files/eusart.c: 134:     return (eusartTxBufferRemaining ? 1 : 0);
  6562                           
  6563                           ;incstack = 0
  6564                           ; Regs used in _EUSART_is_tx_ready: [wreg+status,2+status,0]
  6565     1EC2  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6566     1EC3  1903               	btfsc	3,2
  6567     1EC4  2EC7               	goto	u4440
  6568     1EC5  3001               	movlw	1
  6569     1EC6  0008               	return
  6570     1EC7                     u4440:
  6571     1EC7  3000               	movlw	0
  6572     1EC8  0008               	return
  6573     1EC9                     __end_of_EUSART_is_tx_ready:
  6574                           
  6575                           	psect	text27
  6576     12C6                     __ptext27:	
  6577 ;; *************** function _EUSART_Write *****************
  6578 ;; Defined at:
  6579 ;;		line 173 in file "mcc_generated_files/eusart.c"
  6580 ;; Parameters:    Size  Location     Type
  6581 ;;  txData          1    wreg     unsigned char 
  6582 ;; Auto vars:     Size  Location     Type
  6583 ;;  txData          1    1[BANK1 ] unsigned char 
  6584 ;; Return value:  Size  Location     Type
  6585 ;;                  1    wreg      void 
  6586 ;; Registers used:
  6587 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6588 ;; Tracked objects:
  6589 ;;		On entry : 1F/1
  6590 ;;		On exit  : 1F/1
  6591 ;;		Unchanged: 0/0
  6592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6594 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;Total ram usage:        2 bytes
  6598 ;; Hardware stack levels used: 1
  6599 ;; Hardware stack levels required when called: 10
  6600 ;; This function calls:
  6601 ;;		Nothing
  6602 ;; This function is called by:
  6603 ;;		_Log_Message
  6604 ;; This function uses a non-reentrant model
  6605 ;;
  6606                           
  6607     12C6                     _EUSART_Write:	
  6608                           ;psect for function _EUSART_Write
  6609                           
  6610                           
  6611                           ;incstack = 0
  6612                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6613                           ;EUSART_Write@txData stored from wreg
  6614     12C6  00A9               	movwf	EUSART_Write@txData^(0+128)
  6615     12C7                     l5110:	
  6616                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  6617                           
  6618                           
  6619                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  6620     12C7  086F               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6621     12C8  1903               	btfsc	3,2
  6622     12C9  2AC7               	goto	l5110
  6623                           
  6624                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  6625     12CA  1A11               	btfsc	17,4	;volatile
  6626     12CB  2AD0               	goto	l299
  6627                           
  6628                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  6629     12CC  0829               	movf	EUSART_Write@txData^(0+128),w
  6630     12CD  0023               	movlb	3	; select bank3
  6631     12CE  009A               	movwf	26	;volatile
  6632                           
  6633                           ;mcc_generated_files/eusart.c: 182:     }
  6634     12CF  2AE6               	goto	l5124
  6635     12D0                     l299:	
  6636                           ;mcc_generated_files/eusart.c: 183:     else
  6637                           
  6638                           
  6639                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  6640     12D0  1211               	bcf	17,4	;volatile
  6641                           
  6642                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  6643     12D1  0022               	movlb	2	; select bank2
  6644     12D2  0864               	movf	_eusartTxHead^(0+256),w
  6645     12D3  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6646     12D4  0086               	movwf	6
  6647     12D5  3001               	movlw	1	; select bank3/4
  6648     12D6  0087               	movwf	7
  6649     12D7  0021               	movlb	1	; select bank1
  6650     12D8  0829               	movf	EUSART_Write@txData^(0+128),w
  6651     12D9  0081               	movwf	1
  6652     12DA  3001               	movlw	1
  6653     12DB  00A8               	movwf	??_EUSART_Write^(0+128)
  6654     12DC  0828               	movf	??_EUSART_Write^(0+128),w
  6655     12DD  0022               	movlb	2	; select bank2
  6656     12DE  07E4               	addwf	_eusartTxHead^(0+256),f	;volatile
  6657                           
  6658                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6659     12DF  3008               	movlw	8
  6660     12E0  0264               	subwf	_eusartTxHead^(0+256),w
  6661     12E1  1803               	btfsc	3,0
  6662                           
  6663                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  6664     12E2  01E4               	clrf	_eusartTxHead^(0+256)	;volatile
  6665                           
  6666                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  6667     12E3  3001               	movlw	1
  6668     12E4  0021               	movlb	1	; select bank1
  6669     12E5  02EF               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6670     12E6                     l5124:
  6671                           
  6672                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  6673     12E6  0021               	movlb	1	; select bank1
  6674     12E7  1611               	bsf	17,4	;volatile
  6675     12E8  0008               	return
  6676     12E9                     __end_of_EUSART_Write:
  6677                           
  6678                           	psect	text28
  6679     02F3                     __ptext28:	
  6680 ;; *************** function _APP_KeyboardTasks *****************
  6681 ;; Defined at:
  6682 ;;		line 334 in file "app_device_keyboard.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  6685 ;;		 -> main@scanCode(3), NULL(0), 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  scanCode        1   43[BANK1 ] PTR const struct PS2Scan
  6688 ;;		 -> main@scanCode(3), NULL(0), 
  6689 ;;  TimeDeltaMil    2   45[BANK1 ] int 
  6690 ;;  i               1   47[BANK1 ] unsigned char 
  6691 ;;  needToSendNe    1   44[BANK1 ] _Bool 
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      void 
  6694 ;; Registers used:
  6695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 1F/1
  6698 ;;		On exit  : 2/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;Total ram usage:        7 bytes
  6706 ;; Hardware stack levels used: 1
  6707 ;; Hardware stack levels required when called: 13
  6708 ;; This function calls:
  6709 ;;		_APP_KeyboardProcessOutputReport
  6710 ;;		_APP_KeyboardUpdateState
  6711 ;;		_GenericQueue_CopyToArray
  6712 ;;		_USBTransferOnePacket
  6713 ;;		_memset
  6714 ;; This function is called by:
  6715 ;;		_main
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719     02F3                     _APP_KeyboardTasks:	
  6720                           ;psect for function _APP_KeyboardTasks
  6721                           
  6722                           
  6723                           ;incstack = 0
  6724                           ; Regs used in _APP_KeyboardTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6725                           ;APP_KeyboardTasks@scanCode stored from wreg
  6726     02F3  00D3               	movwf	APP_KeyboardTasks@scanCode^(0+128)
  6727                           
  6728                           ;app_device_keyboard.c: 335:     signed int TimeDeltaMilliseconds;;app_device_keyboard.c
      +                          : 336:     unsigned char i;;app_device_keyboard.c: 337:     _Bool needToSendNewReportPac
      +                          ket;;app_device_keyboard.c: 340:     APP_KeyboardUpdateState(scanCode);
  6729     02F4  0853               	movf	APP_KeyboardTasks@scanCode^(0+128),w
  6730     02F5  3180  2088  3182   	fcall	_APP_KeyboardUpdateState
  6731                           
  6732                           ;app_device_keyboard.c: 345:     if (USBDeviceState < CONFIGURED_STATE) {
  6733     02F8  3020               	movlw	32
  6734     02F9  0020               	movlb	0	; select bank0
  6735     02FA  026C               	subwf	_USBDeviceState,w
  6736     02FB  1C03               	btfss	3,0
  6737     02FC  0008               	return
  6738                           
  6739                           ;app_device_keyboard.c: 353:     if (UCONbits.SUSPND == 1) {
  6740                           
  6741                           ;app_device_keyboard.c: 347:     }
  6742     02FD  003D               	movlb	29	; select bank29
  6743     02FE  188E               	btfsc	14,1	;volatile
  6744     02FF  0008               	return
  6745     0300                     l921:	
  6746                           ;app_device_keyboard.c: 369:     }
  6747                           
  6748                           
  6749                           ;app_device_keyboard.c: 367:     while (LocalSOFCount != SOFCounter) {
  6750     0300  0020               	movlb	0	; select bank0
  6751     0301  0866               	movf	_SOFCounter+1,w	;volatile
  6752     0302  0022               	movlb	2	; select bank2
  6753     0303  0637               	xorwf	(_LocalSOFCount+1)^(0+256),w
  6754     0304  1D03               	skipz
  6755     0305  2B0A               	goto	u6125
  6756     0306  0020               	movlb	0	; select bank0
  6757     0307  0865               	movf	_SOFCounter,w	;volatile
  6758     0308  0022               	movlb	2	; select bank2
  6759     0309  0636               	xorwf	_LocalSOFCount^(0+256),w
  6760     030A                     u6125:
  6761     030A  1903               	btfsc	3,2
  6762     030B  2B15               	goto	l6046
  6763                           
  6764                           ;app_device_keyboard.c: 368:         LocalSOFCount = SOFCounter;
  6765     030C  0020               	movlb	0	; select bank0
  6766     030D  0866               	movf	_SOFCounter+1,w	;volatile
  6767     030E  0022               	movlb	2	; select bank2
  6768     030F  00B7               	movwf	(_LocalSOFCount+1)^(0+256)
  6769     0310  0020               	movlb	0	; select bank0
  6770     0311  0865               	movf	_SOFCounter,w	;volatile
  6771     0312  0022               	movlb	2	; select bank2
  6772     0313  00B6               	movwf	_LocalSOFCount^(0+256)
  6773     0314  2B00               	goto	l921
  6774     0315                     l6046:
  6775                           
  6776                           ;app_device_keyboard.c: 373:     TimeDeltaMilliseconds = LocalSOFCount - OldSOFCount;
  6777     0315  0834               	movf	_OldSOFCount^(0+256),w
  6778     0316  0236               	subwf	_LocalSOFCount^(0+256),w
  6779     0317  0021               	movlb	1	; select bank1
  6780     0318  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6781     0319  0022               	movlb	2	; select bank2
  6782     031A  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6783     031B  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6784     031C  0021               	movlb	1	; select bank1
  6785     031D  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6786                           
  6787                           ;app_device_keyboard.c: 375:     if (TimeDeltaMilliseconds < 0) {
  6788     031E  1FD6               	btfss	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),7
  6789     031F  2B30               	goto	l6052
  6790                           
  6791                           ;app_device_keyboard.c: 376:         TimeDeltaMilliseconds = (32767 - OldSOFCount) + Loc
      +                          alSOFCount;
  6792     0320  0022               	movlb	2	; select bank2
  6793     0321  0834               	movf	_OldSOFCount^(0+256),w
  6794     0322  0236               	subwf	_LocalSOFCount^(0+256),w
  6795     0323  0021               	movlb	1	; select bank1
  6796     0324  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6797     0325  0022               	movlb	2	; select bank2
  6798     0326  0835               	movf	(_OldSOFCount+1)^(0+256),w
  6799     0327  3B37               	subwfb	(_LocalSOFCount+1)^(0+256),w
  6800     0328  0021               	movlb	1	; select bank1
  6801     0329  00D2               	movwf	(??_APP_KeyboardTasks+1)^(0+128)
  6802     032A  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6803     032B  3EFF               	addlw	255
  6804     032C  00D5               	movwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128)
  6805     032D  307F               	movlw	127
  6806     032E  3D52               	addwfc	(??_APP_KeyboardTasks+1)^(0+128),w
  6807     032F  00D6               	movwf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128)
  6808     0330                     l6052:
  6809                           
  6810                           ;app_device_keyboard.c: 383:     if (TimeDeltaMilliseconds > 5000) {
  6811     0330  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6812     0331  3A80               	xorlw	128
  6813     0332  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6814     0333  3093               	movlw	147
  6815     0334  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6816     0335  1D03               	skipz
  6817     0336  2B39               	goto	u6145
  6818     0337  3089               	movlw	137
  6819     0338  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6820     0339                     u6145:
  6821     0339  1C03               	skipc
  6822     033A  2B42               	goto	l6056
  6823                           
  6824                           ;app_device_keyboard.c: 384:         OldSOFCount = LocalSOFCount - 5000;
  6825     033B  0022               	movlb	2	; select bank2
  6826     033C  0836               	movf	_LocalSOFCount^(0+256),w
  6827     033D  3E78               	addlw	120
  6828     033E  00B4               	movwf	_OldSOFCount^(0+256)
  6829     033F  30EC               	movlw	236
  6830     0340  3D37               	addwfc	(_LocalSOFCount+1)^(0+256),w
  6831     0341  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  6832     0342                     l6056:
  6833                           
  6834                           ;app_device_keyboard.c: 390:     if (((keyboard.lastINTransmission != 0x0000) && ((*(vol
      +                          atile uint8_t*)keyboard.lastINTransmission & 0x80) != 0x00)) == 0) {
  6835     0342  302C               	movlw	44
  6836     0343  0086               	movwf	6
  6837     0344  3023               	movlw	35
  6838     0345  0087               	movwf	7
  6839     0346  0016               	moviw fsr1++
  6840     0347  0401               	iorwf	1,w
  6841     0348  1903               	btfsc	3,2
  6842     0349  2B59               	goto	l6060
  6843     034A  302C               	movlw	44
  6844     034B  0086               	movwf	6
  6845     034C  3023               	movlw	35
  6846     034D  0087               	movwf	7
  6847     034E  3F40               	moviw [0]fsr1
  6848     034F  0021               	movlb	1	; select bank1
  6849     0350  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6850     0351  3F41               	moviw [1]fsr1
  6851     0352  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  6852     0353  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6853     0354  0086               	movwf	6
  6854     0355  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  6855     0356  0087               	movwf	7
  6856     0357  1B81               	btfsc	1,7
  6857     0358  2BD2               	goto	l6094
  6858     0359                     l6060:
  6859                           
  6860                           ;app_device_keyboard.c: 392:         memset(&inputReport, 0, sizeof (inputReport));
  6861     0359  3000               	movlw	0
  6862     035A  0021               	movlb	1	; select bank1
  6863     035B  00A8               	movwf	memset@c^(0+128)
  6864     035C  00A9               	movwf	(memset@c+1)^(0+128)
  6865     035D  3008               	movlw	8
  6866     035E  00AA               	movwf	memset@n^(0+128)
  6867     035F  3000               	movlw	0
  6868     0360  00AB               	movwf	(memset@n^(0+128)+1)
  6869     0361  30A0               	movlw	160
  6870     0362  3190  20CC  3182   	fcall	_memset
  6871                           
  6872                           ;app_device_keyboard.c: 394:         GenericQueue_CopyToArray(&keyboard.keys, inputRepor
      +                          t.keys);
  6873     0365  3030               	movlw	48
  6874     0366  00C0               	movwf	GenericQueue_CopyToArray@q^(0+128)
  6875     0367  3023               	movlw	35
  6876     0368  00C1               	movwf	(GenericQueue_CopyToArray@q^(0+128)+1)
  6877     0369  30A2               	movlw	162
  6878     036A  00C2               	movwf	GenericQueue_CopyToArray@array^(0+128)
  6879     036B  3196  26D2  3182   	fcall	_GenericQueue_CopyToArray
  6880                           
  6881                           ;app_device_keyboard.c: 395:         inputReport.modifiers.value = keyboard.modifiers.va
      +                          lue;
  6882     036E  308F               	movlw	143
  6883     036F  0086               	movwf	6
  6884     0370  3023               	movlw	35
  6885     0371  0087               	movwf	7
  6886     0372  0801               	movf	1,w
  6887     0373  00A0               	movwf	32
  6888                           
  6889                           ;app_device_keyboard.c: 398:         needToSendNewReportPacket = 0;
  6890     0374  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6891                           
  6892                           ;app_device_keyboard.c: 399:         for (i = 0; i < sizeof (inputReport); i++) {
  6893     0375  01D7               	clrf	APP_KeyboardTasks@i^(0+128)
  6894     0376                     l6072:
  6895                           
  6896                           ;app_device_keyboard.c: 400:             if (*((uint8_t*) & oldInputReport + i) != *((ui
      +                          nt8_t*) & inputReport + i)) {
  6897     0376  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6898     0377  3EA0               	addlw	160
  6899     0378  0086               	movwf	6
  6900     0379  0187               	clrf	7
  6901     037A  0857               	movf	APP_KeyboardTasks@i^(0+128),w
  6902     037B  3EA0               	addlw	(low (_oldInputReport| (0+256)))& (0+255)
  6903     037C  0084               	movwf	4
  6904     037D  3001               	movlw	1	; select bank3/4
  6905     037E  0085               	movwf	5
  6906     037F  0800               	movf	0,w
  6907     0380  0601               	xorwf	1,w
  6908     0381  1903               	skipnz
  6909     0382  2B86               	goto	l6076
  6910                           
  6911                           ;app_device_keyboard.c: 401:                 needToSendNewReportPacket = 1;
  6912     0383  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6913     0384  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6914                           
  6915                           ;app_device_keyboard.c: 402:                 break;
  6916     0385  2B8E               	goto	l6080
  6917     0386                     l6076:
  6918                           
  6919                           ;app_device_keyboard.c: 404:         }
  6920     0386  3001               	movlw	1
  6921     0387  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6922     0388  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  6923     0389  07D7               	addwf	APP_KeyboardTasks@i^(0+128),f
  6924     038A  3008               	movlw	8
  6925     038B  0257               	subwf	APP_KeyboardTasks@i^(0+128),w
  6926     038C  1C03               	skipc
  6927     038D  2B76               	goto	l6072
  6928     038E                     l6080:
  6929                           
  6930                           ;app_device_keyboard.c: 409:         if (keyboardIdleRate != 0) {
  6931     038E  0022               	movlb	2	; select bank2
  6932     038F  0838               	movf	_keyboardIdleRate^(0+256),w
  6933     0390  0439               	iorwf	(_keyboardIdleRate+1)^(0+256),w
  6934     0391  1903               	btfsc	3,2
  6935     0392  2BA7               	goto	l6086
  6936                           
  6937                           ;app_device_keyboard.c: 411:             if (TimeDeltaMilliseconds >= keyboardIdleRate) 
      +                          {
  6938     0393  0021               	movlb	1	; select bank1
  6939     0394  0856               	movf	(APP_KeyboardTasks@TimeDeltaMilliseconds+1)^(0+128),w
  6940     0395  3A80               	xorlw	128
  6941     0396  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6942     0397  0022               	movlb	2	; select bank2
  6943     0398  0839               	movf	(_keyboardIdleRate+1)^(0+256),w
  6944     0399  3A80               	xorlw	128
  6945     039A  0021               	movlb	1	; select bank1
  6946     039B  0251               	subwf	??_APP_KeyboardTasks^(0+128),w
  6947     039C  1D03               	skipz
  6948     039D  2BA2               	goto	u6205
  6949     039E  0022               	movlb	2	; select bank2
  6950     039F  0838               	movf	_keyboardIdleRate^(0+256),w
  6951     03A0  0021               	movlb	1	; select bank1
  6952     03A1  0255               	subwf	APP_KeyboardTasks@TimeDeltaMilliseconds^(0+128),w
  6953     03A2                     u6205:
  6954     03A2  1C03               	skipc
  6955     03A3  2BA7               	goto	l6086
  6956                           
  6957                           ;app_device_keyboard.c: 412:                 needToSendNewReportPacket = 1;
  6958     03A4  0021               	movlb	1	; select bank1
  6959     03A5  01D4               	clrf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128)
  6960     03A6  0AD4               	incf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),f
  6961     03A7                     l6086:
  6962                           
  6963                           ;app_device_keyboard.c: 418:         if (needToSendNewReportPacket == 1) {
  6964     03A7  0021               	movlb	1	; select bank1
  6965     03A8  0354               	decf	APP_KeyboardTasks@needToSendNewReportPacket^(0+128),w
  6966     03A9  1D03               	btfss	3,2
  6967     03AA  2BD2               	goto	l6094
  6968                           
  6969                           ;app_device_keyboard.c: 422:             oldInputReport = inputReport;
  6970     03AB  30A0               	movlw	160
  6971     03AC  0086               	movwf	6
  6972     03AD  3000               	movlw	0
  6973     03AE  0087               	movwf	7
  6974     03AF  30A0               	movlw	low _oldInputReport
  6975     03B0  0084               	movwf	4
  6976     03B1  3001               	movlw	high _oldInputReport
  6977     03B2  0085               	movwf	5
  6978     03B3  3008               	movlw	8
  6979     03B4  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  6980     03B5                     u6220:
  6981     03B5  0016               	moviw fsr1++
  6982     03B6  001A               	movwi fsr0++
  6983     03B7  0BD1               	decfsz	??_APP_KeyboardTasks^(0+128),f
  6984     03B8  2BB5               	goto	u6220
  6985                           
  6986                           ;app_device_keyboard.c: 425:             keyboard.lastINTransmission = USBTransferOnePac
      +                          ket(1,1,(uint8_t*) & inputReport,sizeof (inputReport));
  6987     03B9  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  6988     03BA  0AA8               	incf	USBTransferOnePacket@dir^(0+128),f
  6989     03BB  30A0               	movlw	160
  6990     03BC  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  6991     03BD  3000               	movlw	0
  6992     03BE  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  6993     03BF  3008               	movlw	8
  6994     03C0  00AB               	movwf	USBTransferOnePacket@len^(0+128)
  6995     03C1  3001               	movlw	1
  6996     03C2  318C  24F0  3182   	fcall	_USBTransferOnePacket
  6997     03C5  302C               	movlw	44
  6998     03C6  0086               	movwf	6
  6999     03C7  3023               	movlw	35
  7000     03C8  0087               	movwf	7
  7001     03C9  0828               	movf	?_USBTransferOnePacket^(0+128),w
  7002     03CA  3FC0               	movwi [0]fsr1
  7003     03CB  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  7004     03CC  3FC1               	movwi [1]fsr1
  7005                           
  7006                           ;app_device_keyboard.c: 426:             OldSOFCount = LocalSOFCount;
  7007     03CD  0022               	movlb	2	; select bank2
  7008     03CE  0837               	movf	(_LocalSOFCount+1)^(0+256),w
  7009     03CF  00B5               	movwf	(_OldSOFCount+1)^(0+256)
  7010     03D0  0836               	movf	_LocalSOFCount^(0+256),w
  7011     03D1  00B4               	movwf	_OldSOFCount^(0+256)
  7012     03D2                     l6094:
  7013                           
  7014                           ;app_device_keyboard.c: 438:     if (((keyboard.lastOUTTransmission != 0x0000) && ((*(vo
      +                          latile uint8_t*)keyboard.lastOUTTransmission & 0x80) != 0x00)) == 0) {
  7015     03D2  302C               	movlw	44
  7016     03D3  0086               	movwf	6
  7017     03D4  3023               	movlw	35
  7018     03D5  0087               	movwf	7
  7019     03D6  3142               	addfsr 1,2
  7020     03D7  0016               	moviw fsr1++
  7021     03D8  0401               	iorwf	1,w
  7022     03D9  1903               	btfsc	3,2
  7023     03DA  2BEB               	goto	l6098
  7024     03DB  302C               	movlw	44
  7025     03DC  0086               	movwf	6
  7026     03DD  3023               	movlw	35
  7027     03DE  0087               	movwf	7
  7028     03DF  3142               	addfsr 1,2
  7029     03E0  3F40               	moviw [0]fsr1
  7030     03E1  0021               	movlb	1	; select bank1
  7031     03E2  00D1               	movwf	??_APP_KeyboardTasks^(0+128)
  7032     03E3  3F41               	moviw [1]fsr1
  7033     03E4  00D2               	movwf	(??_APP_KeyboardTasks^(0+128)+1)
  7034     03E5  0851               	movf	??_APP_KeyboardTasks^(0+128),w
  7035     03E6  0086               	movwf	6
  7036     03E7  0852               	movf	(??_APP_KeyboardTasks+1)^(0+128),w
  7037     03E8  0087               	movwf	7
  7038     03E9  1B81               	btfsc	1,7
  7039     03EA  0008               	return
  7040     03EB                     l6098:
  7041                           
  7042                           ;app_device_keyboard.c: 439:         APP_KeyboardProcessOutputReport();
  7043     03EB  319F  2727  3182   	fcall	_APP_KeyboardProcessOutputReport
  7044                           
  7045                           ;app_device_keyboard.c: 440:         keyboard.lastOUTTransmission = USBTransferOnePacket
      +                          (1,0,(uint8_t*) & outputReport,sizeof (outputReport));
  7046     03EE  0021               	movlb	1	; select bank1
  7047     03EF  01A8               	clrf	USBTransferOnePacket@dir^(0+128)
  7048     03F0  3020               	movlw	32
  7049     03F1  00A9               	movwf	USBTransferOnePacket@data^(0+128)
  7050     03F2  3001               	movlw	1
  7051     03F3  00AA               	movwf	(USBTransferOnePacket@data+1)^(0+128)
  7052     03F4  01AB               	clrf	USBTransferOnePacket@len^(0+128)
  7053     03F5  0AAB               	incf	USBTransferOnePacket@len^(0+128),f
  7054     03F6  3001               	movlw	1
  7055     03F7  318C  24F0         	fcall	_USBTransferOnePacket
  7056     03F9  302C               	movlw	44
  7057     03FA  0086               	movwf	6
  7058     03FB  3023               	movlw	35
  7059     03FC  0087               	movwf	7
  7060     03FD  3142               	addfsr 1,2
  7061     03FE  0828               	movf	?_USBTransferOnePacket^(0+128),w
  7062     03FF  3FC0               	movwi [0]fsr1
  7063     0400  0829               	movf	(?_USBTransferOnePacket+1)^(0+128),w
  7064     0401  3FC1               	movwi [1]fsr1
  7065     0402  0008               	return
  7066     0403                     __end_of_APP_KeyboardTasks:
  7067                           
  7068                           	psect	text29
  7069     10CC                     __ptext29:	
  7070 ;; *************** function _memset *****************
  7071 ;; Defined at:
  7072 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  dest            1    wreg     PTR void 
  7075 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7076 ;;  c               2    0[BANK1 ] int 
  7077 ;;  n               2    2[BANK1 ] unsigned int 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  dest            1    6[BANK1 ] PTR void 
  7080 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7081 ;;  p               1    5[BANK1 ] PTR unsigned char 
  7082 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
  7083 ;; Return value:  Size  Location     Type
  7084 ;;                  1    wreg      PTR void 
  7085 ;; Registers used:
  7086 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7087 ;; Tracked objects:
  7088 ;;		On entry : 1F/1
  7089 ;;		On exit  : 1F/1
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7092 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7093 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7094 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7095 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  7096 ;;Total ram usage:        7 bytes
  7097 ;; Hardware stack levels used: 1
  7098 ;; Hardware stack levels required when called: 10
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		_APP_KeyboardTasks
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106     10CC                     _memset:	
  7107                           ;psect for function _memset
  7108                           
  7109                           
  7110                           ;incstack = 0
  7111                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7112                           ;memset@dest stored from wreg
  7113     10CC  00AE               	movwf	memset@dest^(0+128)
  7114     10CD  082E               	movf	memset@dest^(0+128),w
  7115     10CE  00AD               	movwf	memset@p^(0+128)
  7116     10CF                     l5232:
  7117     10CF  3001               	movlw	1
  7118     10D0  02AA               	subwf	memset@n^(0+128),f
  7119     10D1  3000               	movlw	0
  7120     10D2  3BAB               	subwfb	(memset@n+1)^(0+128),f
  7121     10D3  0A2A               	incf	memset@n^(0+128),w
  7122     10D4  1903               	btfsc	3,2
  7123     10D5  0A2B               	incf	(memset@n+1)^(0+128),w
  7124     10D6  1903               	btfsc	3,2
  7125     10D7  0008               	return
  7126     10D8  082D               	movf	memset@p^(0+128),w
  7127     10D9  0086               	movwf	6
  7128     10DA  0187               	clrf	7
  7129     10DB  0828               	movf	memset@c^(0+128),w
  7130     10DC  0081               	movwf	1
  7131     10DD  3001               	movlw	1
  7132     10DE  00AC               	movwf	??_memset^(0+128)
  7133     10DF  082C               	movf	??_memset^(0+128),w
  7134     10E0  07AD               	addwf	memset@p^(0+128),f
  7135     10E1  28CF               	goto	l5232
  7136     10E2                     __end_of_memset:
  7137                           
  7138                           	psect	text30
  7139     0CF0                     __ptext30:	
  7140 ;; *************** function _USBTransferOnePacket *****************
  7141 ;; Defined at:
  7142 ;;		line 999 in file "usb/usb_device.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;  ep              1    wreg     unsigned char 
  7145 ;;  dir             1    0[BANK1 ] unsigned char 
  7146 ;;  data            2    1[BANK1 ] PTR unsigned char 
  7147 ;;		 -> inputReport(8), outputReport(1), 
  7148 ;;  len             1    3[BANK1 ] unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  ep              1    8[BANK1 ] unsigned char 
  7151 ;;  handle          2    9[BANK1 ] PTR volatile struct __BD
  7152 ;;		 -> RAM(4096), NULL(0), BDT(32), 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  2    0[BANK1 ] PTR void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7157 ;; Tracked objects:
  7158 ;;		On entry : 1F/1
  7159 ;;		On exit  : 1F/1
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7162 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;Total ram usage:       11 bytes
  7167 ;; Hardware stack levels used: 1
  7168 ;; Hardware stack levels required when called: 10
  7169 ;; This function calls:
  7170 ;;		Nothing
  7171 ;; This function is called by:
  7172 ;;		_APP_KeyboardTasks
  7173 ;; This function uses a non-reentrant model
  7174 ;;
  7175                           
  7176     0CF0                     _USBTransferOnePacket:	
  7177                           ;psect for function _USBTransferOnePacket
  7178                           
  7179                           
  7180                           ;incstack = 0
  7181                           ; Regs used in _USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
  7182                           ;USBTransferOnePacket@ep stored from wreg
  7183     0CF0  00B0               	movwf	USBTransferOnePacket@ep^(0+128)
  7184                           
  7185                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
  7186     0CF1  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7187     0CF2  1903               	btfsc	3,2
  7188     0CF3  2CFC               	goto	l5202
  7189                           
  7190                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
  7191     0CF4  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7192     0CF5  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7193     0CF6  0086               	movwf	6
  7194     0CF7  0187               	clrf	7
  7195     0CF8  3F40               	moviw [0]fsr1
  7196     0CF9  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7197     0CFA  3F41               	moviw [1]fsr1
  7198     0CFB  2D04               	goto	L3
  7199     0CFC                     l5202:	
  7200                           ;usb/usb_device.c: 1008:     }
  7201                           
  7202                           
  7203                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
  7204     0CFC  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7205     0CFD  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7206     0CFE  0086               	movwf	6
  7207     0CFF  3001               	movlw	1	; select bank2/3
  7208     0D00  0087               	movwf	7
  7209     0D01  3F40               	moviw [0]fsr1
  7210     0D02  00B1               	movwf	USBTransferOnePacket@handle^(0+128)
  7211     0D03  3F41               	moviw [1]fsr1
  7212     0D04                     L3:
  7213     0D04  00B2               	movwf	(USBTransferOnePacket@handle+1)^(0+128)
  7214                           
  7215                           ;usb/usb_device.c: 1017:     if(handle == 0)
  7216     0D05  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7217     0D06  0432               	iorwf	(USBTransferOnePacket@handle+1)^(0+128),w
  7218     0D07  1D03               	btfss	3,2
  7219     0D08  2D0C               	goto	l5210
  7220                           
  7221                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
  7222     0D09  01A8               	clrf	?_USBTransferOnePacket^(0+128)
  7223     0D0A  01A9               	clrf	(?_USBTransferOnePacket+1)^(0+128)
  7224     0D0B  0008               	return
  7225     0D0C                     l5210:
  7226                           
  7227                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
  7228     0D0C  30FF               	movlw	255
  7229     0D0D  0529               	andwf	USBTransferOnePacket@data^(0+128),w
  7230     0D0E  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7231     0D0F  307F               	movlw	127
  7232     0D10  052A               	andwf	(USBTransferOnePacket@data+1)^(0+128),w
  7233     0D11  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7234     0D12  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7235     0D13  0086               	movwf	6
  7236     0D14  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7237     0D15  0087               	movwf	7
  7238     0D16  3142               	addfsr 1,2
  7239     0D17  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7240     0D18  3FC0               	movwi [0]fsr1
  7241     0D19  082D               	movf	(??_USBTransferOnePacket^(0+128)+1),w
  7242     0D1A  3FC1               	movwi [1]fsr1
  7243                           
  7244                           ;usb/usb_device.c: 1034:     handle->CNT = len;
  7245     0D1B  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7246     0D1C  3E01               	addlw	1
  7247     0D1D  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7248     0D1E  3000               	movlw	0
  7249     0D1F  3D32               	addwfc	(USBTransferOnePacket@handle+1)^(0+128),w
  7250     0D20  00AD               	movwf	(??_USBTransferOnePacket+1)^(0+128)
  7251     0D21  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7252     0D22  0086               	movwf	6
  7253     0D23  082D               	movf	(??_USBTransferOnePacket+1)^(0+128),w
  7254     0D24  0087               	movwf	7
  7255     0D25  082B               	movf	USBTransferOnePacket@len^(0+128),w
  7256     0D26  0081               	movwf	1
  7257                           
  7258                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
  7259     0D27  3040               	movlw	64
  7260     0D28  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7261     0D29  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7262     0D2A  0086               	movwf	6
  7263     0D2B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7264     0D2C  0087               	movwf	7
  7265     0D2D  082C               	movf	??_USBTransferOnePacket^(0+128),w
  7266     0D2E  0581               	andwf	1,f
  7267                           
  7268                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
  7269     0D2F  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7270     0D30  0086               	movwf	6
  7271     0D31  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7272     0D32  0087               	movwf	7
  7273     0D33  1581               	bsf	1,3
  7274                           
  7275                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
  7276     0D34  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7277     0D35  0086               	movwf	6
  7278     0D36  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7279     0D37  0087               	movwf	7
  7280     0D38  1781               	bsf	1,7
  7281                           
  7282                           ;usb/usb_device.c: 1040:     if(dir != 0)
  7283     0D39  0828               	movf	USBTransferOnePacket@dir^(0+128),w
  7284     0D3A  1903               	btfsc	3,2
  7285     0D3B  2D53               	goto	l5220
  7286                           
  7287                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
  7288     0D3C  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7289     0D3D  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7290     0D3E  0086               	movwf	6
  7291     0D3F  0187               	clrf	7
  7292     0D40  3F40               	moviw [0]fsr1
  7293     0D41  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7294     0D42  3F41               	moviw [1]fsr1
  7295     0D43  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7296     0D44  3004               	movlw	4
  7297     0D45  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7298     0D46  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7299     0D47  3000               	movlw	0
  7300     0D48  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7301     0D49  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7302     0D4A  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7303     0D4B  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
  7304     0D4C  0086               	movwf	6
  7305     0D4D  0187               	clrf	7
  7306     0D4E  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7307     0D4F  3FC0               	movwi [0]fsr1
  7308     0D50  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7309     0D51  3FC1               	movwi [1]fsr1
  7310                           
  7311                           ;usb/usb_device.c: 1044:     }
  7312     0D52  2D6B               	goto	l5222
  7313     0D53                     l5220:
  7314                           
  7315                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
  7316     0D53  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7317     0D54  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7318     0D55  0086               	movwf	6
  7319     0D56  3001               	movlw	1	; select bank2/3
  7320     0D57  0087               	movwf	7
  7321     0D58  3F40               	moviw [0]fsr1
  7322     0D59  00AC               	movwf	??_USBTransferOnePacket^(0+128)
  7323     0D5A  3F41               	moviw [1]fsr1
  7324     0D5B  00AD               	movwf	(??_USBTransferOnePacket^(0+128)+1)
  7325     0D5C  3004               	movlw	4
  7326     0D5D  062C               	xorwf	??_USBTransferOnePacket^(0+128),w
  7327     0D5E  00AE               	movwf	(??_USBTransferOnePacket+2)^(0+128)
  7328     0D5F  3000               	movlw	0
  7329     0D60  062D               	xorwf	(??_USBTransferOnePacket+1)^(0+128),w
  7330     0D61  00AF               	movwf	(??_USBTransferOnePacket+3)^(0+128)
  7331     0D62  3530               	lslf	USBTransferOnePacket@ep^(0+128),w
  7332     0D63  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
  7333     0D64  0086               	movwf	6
  7334     0D65  3001               	movlw	1	; select bank2/3
  7335     0D66  0087               	movwf	7
  7336     0D67  082E               	movf	(??_USBTransferOnePacket+2)^(0+128),w
  7337     0D68  3FC0               	movwi [0]fsr1
  7338     0D69  082F               	movf	(??_USBTransferOnePacket+3)^(0+128),w
  7339     0D6A  3FC1               	movwi [1]fsr1
  7340     0D6B                     l5222:
  7341                           
  7342                           ;usb/usb_device.c: 1050:     return (void*)handle;
  7343     0D6B  0832               	movf	(USBTransferOnePacket@handle+1)^(0+128),w
  7344     0D6C  00A9               	movwf	(?_USBTransferOnePacket+1)^(0+128)
  7345     0D6D  0831               	movf	USBTransferOnePacket@handle^(0+128),w
  7346     0D6E  00A8               	movwf	?_USBTransferOnePacket^(0+128)
  7347     0D6F  0008               	return
  7348     0D70                     __end_of_USBTransferOnePacket:
  7349                           
  7350                           	psect	text31
  7351     16D2                     __ptext31:	
  7352 ;; *************** function _GenericQueue_CopyToArray *****************
  7353 ;; Defined at:
  7354 ;;		line 63 in file "generic_queue.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  q               2   24[BANK1 ] PTR struct .
  7357 ;;		 -> keyboard(101), 
  7358 ;;  array           1   26[BANK1 ] PTR void 
  7359 ;;		 -> inputReport(8), 
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;  count           1   32[BANK1 ] unsigned char 
  7362 ;;  index           1   31[BANK1 ] unsigned char 
  7363 ;; Return value:  Size  Location     Type
  7364 ;;                  1    wreg      void 
  7365 ;; Registers used:
  7366 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7367 ;; Tracked objects:
  7368 ;;		On entry : 1F/1
  7369 ;;		On exit  : 1F/1
  7370 ;;		Unchanged: 0/0
  7371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7372 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7373 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7374 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7375 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;Total ram usage:        9 bytes
  7377 ;; Hardware stack levels used: 1
  7378 ;; Hardware stack levels required when called: 11
  7379 ;; This function calls:
  7380 ;;		___awmod
  7381 ;;		___bmul
  7382 ;;		___wmul
  7383 ;;		_memcpy
  7384 ;; This function is called by:
  7385 ;;		_APP_KeyboardTasks
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389     16D2                     _GenericQueue_CopyToArray:	
  7390                           ;psect for function _GenericQueue_CopyToArray
  7391                           
  7392                           
  7393                           ;generic_queue.c: 64:     uint8_t index = q->front;
  7394                           
  7395                           ;incstack = 0
  7396                           ; Regs used in _GenericQueue_CopyToArray: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7397     16D2  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7398     16D3  3E5C               	addlw	92
  7399     16D4  0086               	movwf	6
  7400     16D5  3000               	movlw	0
  7401     16D6  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7402     16D7  0087               	movwf	7
  7403     16D8  0801               	movf	1,w
  7404     16D9  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7405                           
  7406                           ;generic_queue.c: 65:     uint8_t count = 0;
  7407     16DA  01C8               	clrf	GenericQueue_CopyToArray@count^(0+128)
  7408     16DB                     l1185:	
  7409                           ;generic_queue.c: 72:     }
  7410                           
  7411                           ;generic_queue.c: 66:     while (count < q->size) {
  7412                           
  7413                           
  7414                           ;generic_queue.c: 66:     while (count < q->size) {
  7415     16DB  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7416     16DC  3E5E               	addlw	94
  7417     16DD  0086               	movwf	6
  7418     16DE  3000               	movlw	0
  7419     16DF  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7420     16E0  0087               	movwf	7
  7421     16E1  0801               	movf	1,w
  7422     16E2  0248               	subwf	GenericQueue_CopyToArray@count^(0+128),w
  7423     16E3  1803               	btfsc	3,0
  7424     16E4  0008               	return
  7425                           
  7426                           ;generic_queue.c: 67:         memcpy((char*)array + (count * q->element_size),
  7427     16E5  0848               	movf	GenericQueue_CopyToArray@count^(0+128),w
  7428     16E6  00A8               	movwf	___bmul@multiplicand^(0+128)
  7429     16E7  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7430     16E8  3E5A               	addlw	90
  7431     16E9  0086               	movwf	6
  7432     16EA  3000               	movlw	0
  7433     16EB  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7434     16EC  0087               	movwf	7
  7435     16ED  0801               	movf	1,w
  7436     16EE  319F  27A6  3196   	fcall	___bmul
  7437     16F1  0742               	addwf	GenericQueue_CopyToArray@array^(0+128),w
  7438     16F2  00B5               	movwf	memcpy@d1^(0+128)
  7439     16F3  01B6               	clrf	(memcpy@d1+1)^(0+128)
  7440     16F4  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7441     16F5  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7442     16F6  01C4               	clrf	(??_GenericQueue_CopyToArray^(0+128)+1)
  7443     16F7  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7444     16F8  00AF               	movwf	___wmul@multiplier^(0+128)
  7445     16F9  0844               	movf	(??_GenericQueue_CopyToArray+1)^(0+128),w
  7446     16FA  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  7447     16FB  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7448     16FC  3E5A               	addlw	90
  7449     16FD  0086               	movwf	6
  7450     16FE  3000               	movlw	0
  7451     16FF  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7452     1700  0087               	movwf	7
  7453     1701  3F40               	moviw [0]fsr1
  7454     1702  00B1               	movwf	___wmul@multiplicand^(0+128)
  7455     1703  3F41               	moviw [1]fsr1
  7456     1704  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  7457     1705  3191  2160  3196   	fcall	___wmul
  7458     1708  082F               	movf	?___wmul^(0+128),w
  7459     1709  0740               	addwf	GenericQueue_CopyToArray@q^(0+128),w
  7460     170A  00C5               	movwf	(??_GenericQueue_CopyToArray+2)^(0+128)
  7461     170B  0830               	movf	(?___wmul+1)^(0+128),w
  7462     170C  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7463     170D  00C6               	movwf	(??_GenericQueue_CopyToArray+3)^(0+128)
  7464     170E  0845               	movf	(??_GenericQueue_CopyToArray+2)^(0+128),w
  7465     170F  00B7               	movwf	memcpy@s1^(0+128)
  7466     1710  0846               	movf	(??_GenericQueue_CopyToArray+3)^(0+128),w
  7467     1711  00B8               	movwf	(memcpy@s1+1)^(0+128)
  7468     1712  0840               	movf	GenericQueue_CopyToArray@q^(0+128),w
  7469     1713  3E5A               	addlw	90
  7470     1714  0086               	movwf	6
  7471     1715  3000               	movlw	0
  7472     1716  3D41               	addwfc	(GenericQueue_CopyToArray@q+1)^(0+128),w
  7473     1717  0087               	movwf	7
  7474     1718  3F40               	moviw [0]fsr1
  7475     1719  00B9               	movwf	memcpy@n^(0+128)
  7476     171A  3F41               	moviw [1]fsr1
  7477     171B  00BA               	movwf	(memcpy@n+1)^(0+128)
  7478     171C  3193  2334  3196   	fcall	_memcpy
  7479                           
  7480                           ;generic_queue.c: 70:         index = (index + 1) % 15;
  7481     171F  300F               	movlw	15
  7482     1720  00A8               	movwf	___awmod@divisor^(0+128)
  7483     1721  3000               	movlw	0
  7484     1722  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  7485     1723  0847               	movf	GenericQueue_CopyToArray@index^(0+128),w
  7486     1724  3E01               	addlw	1
  7487     1725  00AA               	movwf	___awmod@dividend^(0+128)
  7488     1726  3000               	movlw	0
  7489     1727  1803               	skipnc
  7490     1728  3001               	movlw	1
  7491     1729  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  7492     172A  3194  24F6  3196   	fcall	___awmod
  7493     172D  0828               	movf	?___awmod^(0+128),w
  7494     172E  00C7               	movwf	GenericQueue_CopyToArray@index^(0+128)
  7495                           
  7496                           ;generic_queue.c: 71:         count++;
  7497     172F  3001               	movlw	1
  7498     1730  00C3               	movwf	??_GenericQueue_CopyToArray^(0+128)
  7499     1731  0843               	movf	??_GenericQueue_CopyToArray^(0+128),w
  7500     1732  07C8               	addwf	GenericQueue_CopyToArray@count^(0+128),f
  7501     1733  2EDB               	goto	l1185
  7502     1734                     __end_of_GenericQueue_CopyToArray:
  7503                           
  7504                           	psect	text32
  7505     1FA6                     __ptext32:	
  7506 ;; *************** function ___bmul *****************
  7507 ;; Defined at:
  7508 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul8.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  multiplier      1    wreg     unsigned char 
  7511 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  multiplier      1    3[BANK1 ] unsigned char 
  7514 ;;  product         1    2[BANK1 ] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      unsigned char 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0
  7519 ;; Tracked objects:
  7520 ;;		On entry : 1F/1
  7521 ;;		On exit  : 1F/1
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7524 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;Total ram usage:        4 bytes
  7529 ;; Hardware stack levels used: 1
  7530 ;; Hardware stack levels required when called: 10
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_GenericQueue_CopyToArray
  7535 ;;		_Log_UtilityConvertByteToHex
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539     1FA6                     ___bmul:	
  7540                           ;psect for function ___bmul
  7541                           
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7545                           ;___bmul@multiplier stored from wreg
  7546     1FA6  00AB               	movwf	___bmul@multiplier^(0+128)
  7547     1FA7  01AA               	clrf	___bmul@product^(0+128)
  7548     1FA8                     l4888:
  7549     1FA8  1C2B               	btfss	___bmul@multiplier^(0+128),0
  7550     1FA9  2FAE               	goto	l4892
  7551     1FAA  0828               	movf	___bmul@multiplicand^(0+128),w
  7552     1FAB  00A9               	movwf	??___bmul^(0+128)
  7553     1FAC  0829               	movf	??___bmul^(0+128),w
  7554     1FAD  07AA               	addwf	___bmul@product^(0+128),f
  7555     1FAE                     l4892:
  7556     1FAE  1003               	clrc
  7557     1FAF  0DA8               	rlf	___bmul@multiplicand^(0+128),f
  7558     1FB0  1003               	clrc
  7559     1FB1  0CAB               	rrf	___bmul@multiplier^(0+128),f
  7560     1FB2  082B               	movf	___bmul@multiplier^(0+128),w
  7561     1FB3  1D03               	btfss	3,2
  7562     1FB4  2FA8               	goto	l4888
  7563     1FB5  082A               	movf	___bmul@product^(0+128),w
  7564     1FB6  0008               	return
  7565     1FB7                     __end_of___bmul:
  7566                           
  7567                           	psect	text33
  7568     0088                     __ptext33:	
  7569 ;; *************** function _APP_KeyboardUpdateState *****************
  7570 ;; Defined at:
  7571 ;;		line 446 in file "app_device_keyboard.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  7574 ;;		 -> main@scanCode(3), NULL(0), 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  scanCode        1   40[BANK1 ] PTR const struct PS2Scan
  7577 ;;		 -> main@scanCode(3), NULL(0), 
  7578 ;;  usbHidCode      1   39[BANK1 ] unsigned char 
  7579 ;;  leds            1   35[BANK1 ] unsigned char 
  7580 ;;  usbHidCode      1   37[BANK1 ] unsigned char 
  7581 ;;  usbHidCode      1   38[BANK1 ] unsigned char 
  7582 ;;  usbHidCode      1   36[BANK1 ] unsigned char 
  7583 ;; Return value:  Size  Location     Type
  7584 ;;                  1    wreg      void 
  7585 ;; Registers used:
  7586 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7587 ;; Tracked objects:
  7588 ;;		On entry : 1F/1
  7589 ;;		On exit  : 1C/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;Total ram usage:        8 bytes
  7597 ;; Hardware stack levels used: 1
  7598 ;; Hardware stack levels required when called: 12
  7599 ;; This function calls:
  7600 ;;		_GenericQueue_Contains
  7601 ;;		_GenericQueue_Enqueue
  7602 ;;		_GenericQueue_Remove
  7603 ;;		_PS2Keyboard_GetLastCommand
  7604 ;;		_PS2Keyboard_SendCommand
  7605 ;;		_PS2USB_ScanCodeToUSBHID
  7606 ;; This function is called by:
  7607 ;;		_APP_KeyboardTasks
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611     0088                     _APP_KeyboardUpdateState:	
  7612                           ;psect for function _APP_KeyboardUpdateState
  7613                           
  7614                           
  7615                           ;incstack = 0
  7616                           ; Regs used in _APP_KeyboardUpdateState: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7617                           ;APP_KeyboardUpdateState@scanCode stored from wreg
  7618     0088  00D0               	movwf	APP_KeyboardUpdateState@scanCode^(0+128)
  7619                           
  7620                           ;app_device_keyboard.c: 447:     if (scanCode != ((void*)0)) {
  7621     0089  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7622     008A  1903               	btfsc	3,2
  7623     008B  0008               	return
  7624                           
  7625                           ;app_device_keyboard.c: 448:         if (scanCode->isExtend) {
  7626     008C  0A50               	incf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7627     008D  0086               	movwf	6
  7628     008E  0187               	clrf	7
  7629     008F  0801               	movf	1,w
  7630     0090  1903               	btfsc	3,2
  7631     0091  28F7               	goto	l5968
  7632                           
  7633                           ;app_device_keyboard.c: 449:             if (scanCode->isBreak) {
  7634     0092  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7635     0093  3E02               	addlw	2
  7636     0094  0086               	movwf	6
  7637     0095  0187               	clrf	7
  7638     0096  0801               	movf	1,w
  7639     0097  1903               	btfsc	3,2
  7640     0098  28C1               	goto	l5956
  7641                           
  7642                           ;app_device_keyboard.c: 450:                 if (scanCode->value == 0X14) {
  7643     0099  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7644     009A  0086               	movwf	6
  7645     009B  0187               	clrf	7
  7646     009C  3014               	movlw	20
  7647     009D  0601               	xorwf	1,w
  7648     009E  1D03               	btfss	3,2
  7649     009F  28A6               	goto	l5950
  7650                           
  7651                           ;app_device_keyboard.c: 451:                     keyboard.modifiers.bits.rightControl = 
      +                          0;
  7652     00A0  308F               	movlw	143
  7653     00A1  0086               	movwf	6
  7654     00A2  3023               	movlw	35
  7655     00A3  0087               	movwf	7
  7656     00A4  1201               	bcf	1,4
  7657                           
  7658                           ;app_device_keyboard.c: 452:                 } else if (scanCode->value == 0x11) {
  7659     00A5  0008               	return
  7660     00A6                     l5950:
  7661     00A6  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7662     00A7  0086               	movwf	6
  7663     00A8  0187               	clrf	7
  7664     00A9  3011               	movlw	17
  7665     00AA  0601               	xorwf	1,w
  7666     00AB  1D03               	btfss	3,2
  7667     00AC  28B3               	goto	l5954
  7668                           
  7669                           ;app_device_keyboard.c: 453:                     keyboard.modifiers.bits.rightAlt = 0;
  7670     00AD  308F               	movlw	143
  7671     00AE  0086               	movwf	6
  7672     00AF  3023               	movlw	35
  7673     00B0  0087               	movwf	7
  7674     00B1  1301               	bcf	1,6
  7675                           
  7676                           ;app_device_keyboard.c: 454:                 } else {
  7677     00B2  0008               	return
  7678     00B3                     l5954:
  7679                           
  7680                           ;app_device_keyboard.c: 455:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7681     00B3  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7682     00B4  3192  2225  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7683     00B7  00CC               	movwf	APP_KeyboardUpdateState@usbHidCode^(0+128)
  7684                           
  7685                           ;app_device_keyboard.c: 456:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7686     00B8  3030               	movlw	48
  7687     00B9  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7688     00BA  3023               	movlw	35
  7689     00BB  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7690     00BC  30CC               	movlw	(low (APP_KeyboardUpdateState@usbHidCode| 0))& (0+255)
  7691     00BD  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7692     00BE  3185  25F7         	fcall	_GenericQueue_Remove
  7693     00C0  0008               	return
  7694     00C1                     l5956:
  7695                           
  7696                           ;app_device_keyboard.c: 459:                 if (scanCode->value == 0X14) {
  7697     00C1  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7698     00C2  0086               	movwf	6
  7699     00C3  0187               	clrf	7
  7700     00C4  3014               	movlw	20
  7701     00C5  0601               	xorwf	1,w
  7702     00C6  1D03               	btfss	3,2
  7703     00C7  28CE               	goto	l5960
  7704                           
  7705                           ;app_device_keyboard.c: 460:                     keyboard.modifiers.bits.rightControl = 
      +                          1;
  7706     00C8  308F               	movlw	143
  7707     00C9  0086               	movwf	6
  7708     00CA  3023               	movlw	35
  7709     00CB  0087               	movwf	7
  7710     00CC  1601               	bsf	1,4
  7711                           
  7712                           ;app_device_keyboard.c: 461:                 } else if (scanCode->value == 0x11) {
  7713     00CD  0008               	return
  7714     00CE                     l5960:
  7715     00CE  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7716     00CF  0086               	movwf	6
  7717     00D0  0187               	clrf	7
  7718     00D1  3011               	movlw	17
  7719     00D2  0601               	xorwf	1,w
  7720     00D3  1D03               	btfss	3,2
  7721     00D4  28DB               	goto	l5964
  7722                           
  7723                           ;app_device_keyboard.c: 462:                     keyboard.modifiers.bits.rightAlt = 1;
  7724     00D5  308F               	movlw	143
  7725     00D6  0086               	movwf	6
  7726     00D7  3023               	movlw	35
  7727     00D8  0087               	movwf	7
  7728     00D9  1701               	bsf	1,6
  7729                           
  7730                           ;app_device_keyboard.c: 463:                 } else {
  7731     00DA  0008               	return
  7732     00DB                     l5964:
  7733                           
  7734                           ;app_device_keyboard.c: 464:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7735     00DB  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7736     00DC  3192  2225  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7737     00DF  00CE               	movwf	APP_KeyboardUpdateState@usbHidCode_2928^(0+128)
  7738                           
  7739                           ;app_device_keyboard.c: 465:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  7740     00E0  3030               	movlw	48
  7741     00E1  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  7742     00E2  3023               	movlw	35
  7743     00E3  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  7744     00E4  30CE               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2928| 0))& (0+255)
  7745     00E5  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  7746     00E6  3196  2670  3180   	fcall	_GenericQueue_Contains
  7747     00E9  3A00               	xorlw	0
  7748     00EA  1D03               	skipz
  7749     00EB  0008               	return
  7750                           
  7751                           ;app_device_keyboard.c: 466:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  7752     00EC  3030               	movlw	48
  7753     00ED  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  7754     00EE  3023               	movlw	35
  7755     00EF  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  7756     00F0  30CE               	movlw	low APP_KeyboardUpdateState@usbHidCode_2928
  7757     00F1  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  7758     00F2  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2928
  7759     00F3  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  7760     00F4  3188  20E6         	fcall	_GenericQueue_Enqueue
  7761                           
  7762                           ;app_device_keyboard.c: 470:         } else {
  7763                           
  7764                           ;app_device_keyboard.c: 469:             }
  7765     00F6  0008               	return
  7766     00F7                     l5968:
  7767                           
  7768                           ;app_device_keyboard.c: 471:             if (scanCode->isBreak) {
  7769     00F7  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7770     00F8  3E02               	addlw	2
  7771     00F9  0086               	movwf	6
  7772     00FA  0187               	clrf	7
  7773     00FB  0801               	movf	1,w
  7774     00FC  1903               	btfsc	3,2
  7775     00FD  2940               	goto	l5988
  7776                           
  7777                           ;app_device_keyboard.c: 473:                 if (scanCode->value == 0x12) {
  7778     00FE  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7779     00FF  0086               	movwf	6
  7780     0100  0187               	clrf	7
  7781     0101  3012               	movlw	18
  7782     0102  0601               	xorwf	1,w
  7783     0103  1D03               	btfss	3,2
  7784     0104  290B               	goto	l5974
  7785                           
  7786                           ;app_device_keyboard.c: 474:                     keyboard.modifiers.bits.leftShift = 0;
  7787     0105  308F               	movlw	143
  7788     0106  0086               	movwf	6
  7789     0107  3023               	movlw	35
  7790     0108  0087               	movwf	7
  7791     0109  1081               	bcf	1,1
  7792                           
  7793                           ;app_device_keyboard.c: 475:                 } else if (scanCode->value == 0X14) {
  7794     010A  0008               	return
  7795     010B                     l5974:
  7796     010B  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7797     010C  0086               	movwf	6
  7798     010D  0187               	clrf	7
  7799     010E  3014               	movlw	20
  7800     010F  0601               	xorwf	1,w
  7801     0110  1D03               	btfss	3,2
  7802     0111  2918               	goto	l5978
  7803                           
  7804                           ;app_device_keyboard.c: 476:                     keyboard.modifiers.bits.leftControl = 0
      +                          ;
  7805     0112  308F               	movlw	143
  7806     0113  0086               	movwf	6
  7807     0114  3023               	movlw	35
  7808     0115  0087               	movwf	7
  7809     0116  1001               	bcf	1,0
  7810                           
  7811                           ;app_device_keyboard.c: 477:                 } else if (scanCode->value == 0x11) {
  7812     0117  0008               	return
  7813     0118                     l5978:
  7814     0118  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7815     0119  0086               	movwf	6
  7816     011A  0187               	clrf	7
  7817     011B  3011               	movlw	17
  7818     011C  0601               	xorwf	1,w
  7819     011D  1D03               	btfss	3,2
  7820     011E  2925               	goto	l5982
  7821                           
  7822                           ;app_device_keyboard.c: 478:                     keyboard.modifiers.bits.leftAlt = 0;
  7823     011F  308F               	movlw	143
  7824     0120  0086               	movwf	6
  7825     0121  3023               	movlw	35
  7826     0122  0087               	movwf	7
  7827     0123  1101               	bcf	1,2
  7828                           
  7829                           ;app_device_keyboard.c: 479:                 } else if (scanCode->value == 0x59) {
  7830     0124  0008               	return
  7831     0125                     l5982:
  7832     0125  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7833     0126  0086               	movwf	6
  7834     0127  0187               	clrf	7
  7835     0128  3059               	movlw	89
  7836     0129  0601               	xorwf	1,w
  7837     012A  1D03               	btfss	3,2
  7838     012B  2932               	goto	l5986
  7839                           
  7840                           ;app_device_keyboard.c: 480:                     keyboard.modifiers.bits.rightShift = 0;
  7841     012C  308F               	movlw	143
  7842     012D  0086               	movwf	6
  7843     012E  3023               	movlw	35
  7844     012F  0087               	movwf	7
  7845     0130  1281               	bcf	1,5
  7846                           
  7847                           ;app_device_keyboard.c: 481:                 } else {
  7848     0131  0008               	return
  7849     0132                     l5986:
  7850                           
  7851                           ;app_device_keyboard.c: 482:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  7852     0132  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7853     0133  3192  2225  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  7854     0136  00CD               	movwf	APP_KeyboardUpdateState@usbHidCode_2929^(0+128)
  7855                           
  7856                           ;app_device_keyboard.c: 483:                     GenericQueue_Remove(&keyboard.keys, &us
      +                          bHidCode);
  7857     0137  3030               	movlw	48
  7858     0138  00C0               	movwf	GenericQueue_Remove@q^(0+128)
  7859     0139  3023               	movlw	35
  7860     013A  00C1               	movwf	(GenericQueue_Remove@q^(0+128)+1)
  7861     013B  30CD               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2929| 0))& (0+255)
  7862     013C  00C2               	movwf	GenericQueue_Remove@item^(0+128)
  7863     013D  3185  25F7         	fcall	_GenericQueue_Remove
  7864     013F  0008               	return
  7865     0140                     l5988:
  7866     0140  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7867     0141  0086               	movwf	6
  7868     0142  0187               	clrf	7
  7869     0143  30FA               	movlw	250
  7870     0144  0601               	xorwf	1,w
  7871     0145  1D03               	btfss	3,2
  7872     0146  296F               	goto	l5996
  7873                           
  7874                           ;app_device_keyboard.c: 486:                 if (PS2Keyboard_GetLastCommand() == 0xED) {
  7875     0147  319E  26A8  3180   	fcall	_PS2Keyboard_GetLastCommand
  7876     014A  3AED               	xorlw	237
  7877     014B  1D03               	skipz
  7878     014C  0008               	return
  7879                           
  7880                           ;app_device_keyboard.c: 487:                     uint8_t leds = (uint8_t)(keyboard.leds.
      +                          bits.numLock << 1)
  7881     014D  3090               	movlw	144
  7882     014E  0086               	movwf	6
  7883     014F  3023               	movlw	35
  7884     0150  0087               	movwf	7
  7885     0151  0C01               	rrf	1,w
  7886     0152  0C89               	rrf	9,f
  7887     0153  3901               	andlw	1
  7888     0154  0021               	movlb	1	; select bank1
  7889     0155  00C9               	movwf	??_APP_KeyboardUpdateState^(0+128)
  7890     0156  3090               	movlw	144
  7891     0157  0086               	movwf	6
  7892     0158  3023               	movlw	35
  7893     0159  0087               	movwf	7
  7894     015A  0C01               	rrf	1,w
  7895     015B  3901               	andlw	1
  7896     015C  00CA               	movwf	(??_APP_KeyboardUpdateState+1)^(0+128)
  7897     015D  3002               	movlw	2
  7898     015E                     u5995:
  7899     015E  35CA               	lslf	(??_APP_KeyboardUpdateState+1)^(0+128),f
  7900     015F  0B89               	decfsz	9,f
  7901     0160  295E               	goto	u5995
  7902     0161  3090               	movlw	144
  7903     0162  0086               	movwf	6
  7904     0163  3023               	movlw	35
  7905     0164  0087               	movwf	7
  7906     0165  0801               	movf	1,w
  7907     0166  3901               	andlw	1
  7908     0167  0709               	addwf	9,w
  7909     0168  044A               	iorwf	(??_APP_KeyboardUpdateState+1)^(0+128),w
  7910     0169  0449               	iorwf	??_APP_KeyboardUpdateState^(0+128),w
  7911     016A  00CB               	movwf	APP_KeyboardUpdateState@leds^(0+128)
  7912                           
  7913                           ;app_device_keyboard.c: 490:                     PS2Keyboard_SendCommand(leds);
  7914     016B  084B               	movf	APP_KeyboardUpdateState@leds^(0+128),w
  7915     016C  3191  21B1         	fcall	_PS2Keyboard_SendCommand
  7916     016E  0008               	return
  7917     016F                     l5996:
  7918     016F  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7919     0170  0086               	movwf	6
  7920     0171  0187               	clrf	7
  7921     0172  30FC               	movlw	252
  7922     0173  0601               	xorwf	1,w
  7923     0174  1903               	btfsc	3,2
  7924     0175  0008               	return
  7925     0176  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7926     0177  0086               	movwf	6
  7927     0178  0187               	clrf	7
  7928     0179  0A01               	incf	1,w
  7929     017A  1903               	btfsc	3,2
  7930     017B  0008               	return
  7931     017C  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7932     017D  0086               	movwf	6
  7933     017E  0187               	clrf	7
  7934     017F  30AA               	movlw	170
  7935     0180  0601               	xorwf	1,w
  7936     0181  1903               	btfsc	3,2
  7937     0182  0008               	return
  7938                           
  7939                           ;app_device_keyboard.c: 498:                 if (scanCode->value == 0x12) {
  7940     0183  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7941     0184  0086               	movwf	6
  7942     0185  0187               	clrf	7
  7943     0186  3012               	movlw	18
  7944     0187  0601               	xorwf	1,w
  7945     0188  1D03               	btfss	3,2
  7946     0189  2990               	goto	l6006
  7947                           
  7948                           ;app_device_keyboard.c: 499:                     keyboard.modifiers.bits.leftShift = 1;
  7949     018A  308F               	movlw	143
  7950     018B  0086               	movwf	6
  7951     018C  3023               	movlw	35
  7952     018D  0087               	movwf	7
  7953     018E  1481               	bsf	1,1
  7954                           
  7955                           ;app_device_keyboard.c: 500:                 } else if (scanCode->value == 0X14) {
  7956     018F  0008               	return
  7957     0190                     l6006:
  7958     0190  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7959     0191  0086               	movwf	6
  7960     0192  0187               	clrf	7
  7961     0193  3014               	movlw	20
  7962     0194  0601               	xorwf	1,w
  7963     0195  1D03               	btfss	3,2
  7964     0196  299D               	goto	l6010
  7965                           
  7966                           ;app_device_keyboard.c: 501:                     keyboard.modifiers.bits.leftControl = 1
      +                          ;
  7967     0197  308F               	movlw	143
  7968     0198  0086               	movwf	6
  7969     0199  3023               	movlw	35
  7970     019A  0087               	movwf	7
  7971     019B  1401               	bsf	1,0
  7972                           
  7973                           ;app_device_keyboard.c: 502:                 } else if (scanCode->value == 0x11) {
  7974     019C  0008               	return
  7975     019D                     l6010:
  7976     019D  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7977     019E  0086               	movwf	6
  7978     019F  0187               	clrf	7
  7979     01A0  3011               	movlw	17
  7980     01A1  0601               	xorwf	1,w
  7981     01A2  1D03               	btfss	3,2
  7982     01A3  29AA               	goto	l6014
  7983                           
  7984                           ;app_device_keyboard.c: 503:                     keyboard.modifiers.bits.leftAlt = 1;
  7985     01A4  308F               	movlw	143
  7986     01A5  0086               	movwf	6
  7987     01A6  3023               	movlw	35
  7988     01A7  0087               	movwf	7
  7989     01A8  1501               	bsf	1,2
  7990                           
  7991                           ;app_device_keyboard.c: 504:                 } else if (scanCode->value == 0x59) {
  7992     01A9  0008               	return
  7993     01AA                     l6014:
  7994     01AA  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  7995     01AB  0086               	movwf	6
  7996     01AC  0187               	clrf	7
  7997     01AD  3059               	movlw	89
  7998     01AE  0601               	xorwf	1,w
  7999     01AF  1D03               	btfss	3,2
  8000     01B0  29B7               	goto	l6018
  8001                           
  8002                           ;app_device_keyboard.c: 505:                     keyboard.modifiers.bits.rightShift = 1;
  8003     01B1  308F               	movlw	143
  8004     01B2  0086               	movwf	6
  8005     01B3  3023               	movlw	35
  8006     01B4  0087               	movwf	7
  8007     01B5  1681               	bsf	1,5
  8008                           
  8009                           ;app_device_keyboard.c: 506:                 } else {
  8010     01B6  0008               	return
  8011     01B7                     l6018:
  8012                           
  8013                           ;app_device_keyboard.c: 507:                     uint8_t usbHidCode = PS2USB_ScanCodeToU
      +                          SBHID(scanCode);
  8014     01B7  0850               	movf	APP_KeyboardUpdateState@scanCode^(0+128),w
  8015     01B8  3192  2225  3180   	fcall	_PS2USB_ScanCodeToUSBHID
  8016     01BB  00CF               	movwf	APP_KeyboardUpdateState@usbHidCode_2937^(0+128)
  8017                           
  8018                           ;app_device_keyboard.c: 508:                     if (!GenericQueue_Contains(&keyboard.ke
      +                          ys, &usbHidCode)) {
  8019     01BC  3030               	movlw	48
  8020     01BD  00BE               	movwf	GenericQueue_Contains@q^(0+128)
  8021     01BE  3023               	movlw	35
  8022     01BF  00BF               	movwf	(GenericQueue_Contains@q^(0+128)+1)
  8023     01C0  30CF               	movlw	(low (APP_KeyboardUpdateState@usbHidCode_2937| 0))& (0+255)
  8024     01C1  00C0               	movwf	GenericQueue_Contains@item^(0+128)
  8025     01C2  3196  2670  3180   	fcall	_GenericQueue_Contains
  8026     01C5  3A00               	xorlw	0
  8027     01C6  1D03               	skipz
  8028     01C7  0008               	return
  8029                           
  8030                           ;app_device_keyboard.c: 509:                         GenericQueue_Enqueue(&keyboard.keys
      +                          , &usbHidCode);
  8031     01C8  3030               	movlw	48
  8032     01C9  00C0               	movwf	GenericQueue_Enqueue@q^(0+128)
  8033     01CA  3023               	movlw	35
  8034     01CB  00C1               	movwf	(GenericQueue_Enqueue@q^(0+128)+1)
  8035     01CC  30CF               	movlw	low APP_KeyboardUpdateState@usbHidCode_2937
  8036     01CD  00C2               	movwf	GenericQueue_Enqueue@item^(0+128)
  8037     01CE  3000               	movlw	high APP_KeyboardUpdateState@usbHidCode_2937
  8038     01CF  00C3               	movwf	(GenericQueue_Enqueue@item+1)^(0+128)
  8039     01D0  3188  20E6         	fcall	_GenericQueue_Enqueue
  8040     01D2  0008               	return
  8041     01D3                     __end_of_APP_KeyboardUpdateState:
  8042                           
  8043                           	psect	text34
  8044     1225                     __ptext34:	
  8045 ;; *************** function _PS2USB_ScanCodeToUSBHID *****************
  8046 ;; Defined at:
  8047 ;;		line 396 in file "ps2usb.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  scanCode        1    wreg     PTR const struct PS2Scan
  8050 ;;		 -> main@scanCode(3), NULL(0), 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  scanCode        1    0[BANK1 ] PTR const struct PS2Scan
  8053 ;;		 -> main@scanCode(3), NULL(0), 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;                  1    wreg      unsigned char 
  8056 ;; Registers used:
  8057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8058 ;; Tracked objects:
  8059 ;;		On entry : 1F/1
  8060 ;;		On exit  : 1F/1
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8064 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8066 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8067 ;;Total ram usage:        1 bytes
  8068 ;; Hardware stack levels used: 1
  8069 ;; Hardware stack levels required when called: 10
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_APP_KeyboardUpdateState
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077     1225                     _PS2USB_ScanCodeToUSBHID:	
  8078                           ;psect for function _PS2USB_ScanCodeToUSBHID
  8079                           
  8080                           
  8081                           ;incstack = 0
  8082                           ; Regs used in _PS2USB_ScanCodeToUSBHID: [wreg-fsr1h+status,2+status,0+pclath]
  8083                           ;PS2USB_ScanCodeToUSBHID@scanCode stored from wreg
  8084     1225  00A8               	movwf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128)
  8085                           
  8086                           ;ps2usb.c: 397:     if (scanCode->isExtend) {
  8087     1226  0A28               	incf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8088     1227  0086               	movwf	6
  8089     1228  0187               	clrf	7
  8090     1229  0801               	movf	1,w
  8091     122A  1903               	btfsc	3,2
  8092     122B  2A38               	goto	l4726
  8093                           
  8094                           ;ps2usb.c: 398:         return ps2ExtUsbMap[scanCode->value];
  8095     122C  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8096     122D  0086               	movwf	6
  8097     122E  0187               	clrf	7
  8098     122F  0801               	movf	1,w
  8099     1230  3E03               	addlw	low (_ps2ExtUsbMap| (0+32768))
  8100     1231  0084               	movwf	4
  8101     1232  3084               	movlw	high (_ps2ExtUsbMap| (0+32768))
  8102     1233  1803               	skipnc
  8103     1234  3E01               	addlw	1
  8104     1235  0085               	movwf	5
  8105     1236  0800               	movf	0,w	;code access
  8106     1237  0008               	return
  8107     1238                     l4726:
  8108                           
  8109                           ;ps2usb.c: 400:         return ps2UsbMap[scanCode->value];
  8110     1238  0828               	movf	PS2USB_ScanCodeToUSBHID@scanCode^(0+128),w
  8111     1239  0086               	movwf	6
  8112     123A  0187               	clrf	7
  8113     123B  0801               	movf	1,w
  8114     123C  3E00               	addlw	low (_ps2UsbMap| (0+32768))
  8115     123D  0084               	movwf	4
  8116     123E  3090               	movlw	high (_ps2UsbMap| (0+32768))
  8117     123F  1803               	skipnc
  8118     1240  3E01               	addlw	1
  8119     1241  0085               	movwf	5
  8120     1242  0800               	movf	0,w	;code access
  8121     1243  0008               	return
  8122     1244                     __end_of_PS2USB_ScanCodeToUSBHID:
  8123                           
  8124                           	psect	text35
  8125     1EA8                     __ptext35:	
  8126 ;; *************** function _PS2Keyboard_GetLastCommand *****************
  8127 ;; Defined at:
  8128 ;;		line 75 in file "ps2_keyboard.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;		None
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      unsigned char 
  8135 ;; Registers used:
  8136 ;;		wreg
  8137 ;; Tracked objects:
  8138 ;;		On entry : 1F/1
  8139 ;;		On exit  : 1F/2
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;Total ram usage:        0 bytes
  8147 ;; Hardware stack levels used: 1
  8148 ;; Hardware stack levels required when called: 10
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_APP_KeyboardUpdateState
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156     1EA8                     _PS2Keyboard_GetLastCommand:	
  8157                           ;psect for function _PS2Keyboard_GetLastCommand
  8158                           
  8159                           
  8160                           ;ps2_keyboard.c: 76:     return keyboardCommand;
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in _PS2Keyboard_GetLastCommand: [wreg]
  8164     1EA8  0022               	movlb	2	; select bank2
  8165     1EA9  084C               	movf	_keyboardCommand^(0+256),w	;volatile
  8166     1EAA  0008               	return
  8167     1EAB                     __end_of_PS2Keyboard_GetLastCommand:
  8168                           
  8169                           	psect	text36
  8170     05F7                     __ptext36:	
  8171 ;; *************** function _GenericQueue_Remove *****************
  8172 ;; Defined at:
  8173 ;;		line 35 in file "generic_queue.c"
  8174 ;; Parameters:    Size  Location     Type
  8175 ;;  q               2   24[BANK1 ] PTR struct .
  8176 ;;		 -> keyboard(101), 
  8177 ;;  item            1   26[BANK1 ] PTR const void 
  8178 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8179 ;; Auto vars:     Size  Location     Type
  8180 ;;  j               1   32[BANK1 ] unsigned char 
  8181 ;;  i               1   31[BANK1 ] unsigned char 
  8182 ;; Return value:  Size  Location     Type
  8183 ;;                  1    wreg      void 
  8184 ;; Registers used:
  8185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8186 ;; Tracked objects:
  8187 ;;		On entry : 1F/1
  8188 ;;		On exit  : 1F/1
  8189 ;;		Unchanged: 0/0
  8190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8191 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8192 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8193 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;Total ram usage:        9 bytes
  8196 ;; Hardware stack levels used: 1
  8197 ;; Hardware stack levels required when called: 11
  8198 ;; This function calls:
  8199 ;;		_GenericQueue_IsEmpty
  8200 ;;		___awmod
  8201 ;;		___wmul
  8202 ;;		_memcmp
  8203 ;;		_memcpy
  8204 ;; This function is called by:
  8205 ;;		_APP_KeyboardUpdateState
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209     05F7                     _GenericQueue_Remove:	
  8210                           ;psect for function _GenericQueue_Remove
  8211                           
  8212                           
  8213                           ;generic_queue.c: 36:     if (!GenericQueue_IsEmpty(q)) {
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in _GenericQueue_Remove: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8217     05F7  0841               	movf	(GenericQueue_Remove@q+1)^(0+128),w
  8218     05F8  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8219     05F9  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8220     05FA  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8221     05FB  319F  27D9  3185   	fcall	_GenericQueue_IsEmpty
  8222     05FE  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8223     05FF  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8224     0600  1D03               	btfss	3,2
  8225     0601  0008               	return
  8226                           
  8227                           ;generic_queue.c: 37:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8228     0602  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8229     0603  3E5C               	addlw	92
  8230     0604  0086               	movwf	6
  8231     0605  3000               	movlw	0
  8232     0606  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8233     0607  0087               	movwf	7
  8234     0608  0801               	movf	1,w
  8235     0609                     L4:
  8236     0609  00C7               	movwf	GenericQueue_Remove@i^(0+128)
  8237     060A  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8238     060B  3E5D               	addlw	93
  8239     060C  0086               	movwf	6
  8240     060D  3000               	movlw	0
  8241     060E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8242     060F  0087               	movwf	7
  8243     0610  0801               	movf	1,w
  8244     0611  0647               	xorwf	GenericQueue_Remove@i^(0+128),w
  8245     0612  1903               	btfsc	3,2
  8246     0613  0008               	return
  8247                           
  8248                           ;generic_queue.c: 38:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8249     0614  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8250     0615  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8251     0616  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8252     0617  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8253     0618  00AF               	movwf	___wmul@multiplier^(0+128)
  8254     0619  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8255     061A  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8256     061B  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8257     061C  3E5A               	addlw	90
  8258     061D  0086               	movwf	6
  8259     061E  3000               	movlw	0
  8260     061F  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8261     0620  0087               	movwf	7
  8262     0621  3F40               	moviw [0]fsr1
  8263     0622  00B1               	movwf	___wmul@multiplicand^(0+128)
  8264     0623  3F41               	moviw [1]fsr1
  8265     0624  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8266     0625  3191  2160  3185   	fcall	___wmul
  8267     0628  082F               	movf	?___wmul^(0+128),w
  8268     0629  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8269     062A  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8270     062B  0830               	movf	(?___wmul+1)^(0+128),w
  8271     062C  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8272     062D  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8273     062E  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8274     062F  00B5               	movwf	memcmp@vl^(0+128)
  8275     0630  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8276     0631  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8277     0632  0842               	movf	GenericQueue_Remove@item^(0+128),w
  8278     0633  00B7               	movwf	memcmp@vr^(0+128)
  8279     0634  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8280     0635  3E5A               	addlw	90
  8281     0636  0086               	movwf	6
  8282     0637  3000               	movlw	0
  8283     0638  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8284     0639  0087               	movwf	7
  8285     063A  3F40               	moviw [0]fsr1
  8286     063B  00B8               	movwf	memcmp@n^(0+128)
  8287     063C  3F41               	moviw [1]fsr1
  8288     063D  00B9               	movwf	(memcmp@n+1)^(0+128)
  8289     063E  3193  238A  3185   	fcall	_memcmp
  8290     0641  0835               	movf	?_memcmp^(0+128),w
  8291     0642  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8292     0643  1D03               	btfss	3,2
  8293     0644  2EDB               	goto	l4748
  8294                           
  8295                           ;generic_queue.c: 39:                 for (uint8_t j = i; j != q->rear; j = (j + 1) % 15
      +                          ) {
  8296     0645  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8297     0646                     L5:
  8298     0646  00C8               	movwf	GenericQueue_Remove@j^(0+128)
  8299     0647  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8300     0648  3E5D               	addlw	93
  8301     0649  0086               	movwf	6
  8302     064A  3000               	movlw	0
  8303     064B  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8304     064C  0087               	movwf	7
  8305     064D  0801               	movf	1,w
  8306     064E  0648               	xorwf	GenericQueue_Remove@j^(0+128),w
  8307     064F  1903               	btfsc	3,2
  8308     0650  2EB1               	goto	l4744
  8309                           
  8310                           ;generic_queue.c: 40:                     memcpy(&q->buffer[j * q->element_size],
  8311     0651  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8312     0652  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8313     0653  01C4               	clrf	(??_GenericQueue_Remove^(0+128)+1)
  8314     0654  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8315     0655  00AF               	movwf	___wmul@multiplier^(0+128)
  8316     0656  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8317     0657  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8318     0658  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8319     0659  3E5A               	addlw	90
  8320     065A  0086               	movwf	6
  8321     065B  3000               	movlw	0
  8322     065C  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8323     065D  0087               	movwf	7
  8324     065E  3F40               	moviw [0]fsr1
  8325     065F  00B1               	movwf	___wmul@multiplicand^(0+128)
  8326     0660  3F41               	moviw [1]fsr1
  8327     0661  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8328     0662  3191  2160  3185   	fcall	___wmul
  8329     0665  082F               	movf	?___wmul^(0+128),w
  8330     0666  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8331     0667  00B5               	movwf	memcpy@d1^(0+128)
  8332     0668  0830               	movf	(?___wmul+1)^(0+128),w
  8333     0669  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8334     066A  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8335     066B  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8336     066C  3E01               	addlw	1
  8337     066D  00AA               	movwf	___awmod@dividend^(0+128)
  8338     066E  3000               	movlw	0
  8339     066F  1803               	skipnc
  8340     0670  3001               	movlw	1
  8341     0671  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8342     0672  300F               	movlw	15
  8343     0673  00A8               	movwf	___awmod@divisor^(0+128)
  8344     0674  3000               	movlw	0
  8345     0675  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8346     0676  3194  24F6  3185   	fcall	___awmod
  8347     0679  0829               	movf	(?___awmod+1)^(0+128),w
  8348     067A  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8349     067B  0828               	movf	?___awmod^(0+128),w
  8350     067C  00AF               	movwf	___wmul@multiplier^(0+128)
  8351     067D  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8352     067E  3E5A               	addlw	90
  8353     067F  0086               	movwf	6
  8354     0680  3000               	movlw	0
  8355     0681  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8356     0682  0087               	movwf	7
  8357     0683  3F40               	moviw [0]fsr1
  8358     0684  00B1               	movwf	___wmul@multiplicand^(0+128)
  8359     0685  3F41               	moviw [1]fsr1
  8360     0686  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8361     0687  3191  2160  3185   	fcall	___wmul
  8362     068A  082F               	movf	?___wmul^(0+128),w
  8363     068B  0740               	addwf	GenericQueue_Remove@q^(0+128),w
  8364     068C  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8365     068D  0830               	movf	(?___wmul+1)^(0+128),w
  8366     068E  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8367     068F  00C6               	movwf	(??_GenericQueue_Remove+3)^(0+128)
  8368     0690  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8369     0691  00B7               	movwf	memcpy@s1^(0+128)
  8370     0692  0846               	movf	(??_GenericQueue_Remove+3)^(0+128),w
  8371     0693  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8372     0694  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8373     0695  3E5A               	addlw	90
  8374     0696  0086               	movwf	6
  8375     0697  3000               	movlw	0
  8376     0698  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8377     0699  0087               	movwf	7
  8378     069A  3F40               	moviw [0]fsr1
  8379     069B  00B9               	movwf	memcpy@n^(0+128)
  8380     069C  3F41               	moviw [1]fsr1
  8381     069D  00BA               	movwf	(memcpy@n+1)^(0+128)
  8382     069E  3193  2334  3185   	fcall	_memcpy
  8383                           
  8384                           ;generic_queue.c: 43:                 }
  8385     06A1  300F               	movlw	15
  8386     06A2  00A8               	movwf	___awmod@divisor^(0+128)
  8387     06A3  3000               	movlw	0
  8388     06A4  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8389     06A5  0848               	movf	GenericQueue_Remove@j^(0+128),w
  8390     06A6  3E01               	addlw	1
  8391     06A7  00AA               	movwf	___awmod@dividend^(0+128)
  8392     06A8  3000               	movlw	0
  8393     06A9  1803               	skipnc
  8394     06AA  3001               	movlw	1
  8395     06AB  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8396     06AC  3194  24F6  3185   	fcall	___awmod
  8397     06AF  0828               	movf	?___awmod^(0+128),w
  8398     06B0  2E46               	goto	L5
  8399     06B1                     l4744:
  8400                           
  8401                           ;generic_queue.c: 44:                 q->rear = (q->rear - 1 + 15) % 15;
  8402     06B1  300F               	movlw	15
  8403     06B2  00A8               	movwf	___awmod@divisor^(0+128)
  8404     06B3  3000               	movlw	0
  8405     06B4  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8406     06B5  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8407     06B6  3E5D               	addlw	93
  8408     06B7  0086               	movwf	6
  8409     06B8  3000               	movlw	0
  8410     06B9  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8411     06BA  0087               	movwf	7
  8412     06BB  0801               	movf	1,w
  8413     06BC  3E0E               	addlw	14
  8414     06BD  00AA               	movwf	___awmod@dividend^(0+128)
  8415     06BE  3000               	movlw	0
  8416     06BF  1803               	skipnc
  8417     06C0  3001               	movlw	1
  8418     06C1  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8419     06C2  3194  24F6         	fcall	___awmod
  8420     06C4  0828               	movf	?___awmod^(0+128),w
  8421     06C5  00C3               	movwf	??_GenericQueue_Remove^(0+128)
  8422     06C6  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8423     06C7  3E5D               	addlw	93
  8424     06C8  00C4               	movwf	(??_GenericQueue_Remove+1)^(0+128)
  8425     06C9  3000               	movlw	0
  8426     06CA  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8427     06CB  00C5               	movwf	(??_GenericQueue_Remove+2)^(0+128)
  8428     06CC  0844               	movf	(??_GenericQueue_Remove+1)^(0+128),w
  8429     06CD  0086               	movwf	6
  8430     06CE  0845               	movf	(??_GenericQueue_Remove+2)^(0+128),w
  8431     06CF  0087               	movwf	7
  8432     06D0  0843               	movf	??_GenericQueue_Remove^(0+128),w
  8433     06D1  0081               	movwf	1
  8434                           
  8435                           ;generic_queue.c: 45:                 q->size--;
  8436     06D2  0840               	movf	GenericQueue_Remove@q^(0+128),w
  8437     06D3  3E5E               	addlw	94
  8438     06D4  0086               	movwf	6
  8439     06D5  3000               	movlw	0
  8440     06D6  3D41               	addwfc	(GenericQueue_Remove@q+1)^(0+128),w
  8441     06D7  0087               	movwf	7
  8442     06D8  3001               	movlw	1
  8443     06D9  0281               	subwf	1,f
  8444                           
  8445                           ;generic_queue.c: 46:                 break;
  8446     06DA  0008               	return
  8447     06DB                     l4748:
  8448                           
  8449                           ;generic_queue.c: 48:         }
  8450     06DB  300F               	movlw	15
  8451     06DC  00A8               	movwf	___awmod@divisor^(0+128)
  8452     06DD  3000               	movlw	0
  8453     06DE  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8454     06DF  0847               	movf	GenericQueue_Remove@i^(0+128),w
  8455     06E0  3E01               	addlw	1
  8456     06E1  00AA               	movwf	___awmod@dividend^(0+128)
  8457     06E2  3000               	movlw	0
  8458     06E3  1803               	skipnc
  8459     06E4  3001               	movlw	1
  8460     06E5  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8461     06E6  3194  24F6  3185   	fcall	___awmod
  8462     06E9  0828               	movf	?___awmod^(0+128),w
  8463     06EA  2E09               	goto	L4
  8464     06EB                     __end_of_GenericQueue_Remove:
  8465                           
  8466                           	psect	text37
  8467     08E6                     __ptext37:	
  8468 ;; *************** function _GenericQueue_Enqueue *****************
  8469 ;; Defined at:
  8470 ;;		line 19 in file "generic_queue.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  q               2   24[BANK1 ] PTR struct .
  8473 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8474 ;;  item            2   26[BANK1 ] PTR const void 
  8475 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;		None
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      void 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 1F/1
  8484 ;;		On exit  : 1F/1
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8487 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  8491 ;;Total ram usage:        7 bytes
  8492 ;; Hardware stack levels used: 1
  8493 ;; Hardware stack levels required when called: 11
  8494 ;; This function calls:
  8495 ;;		_GenericQueue_IsFull
  8496 ;;		___awmod
  8497 ;;		___wmul
  8498 ;;		_memcpy
  8499 ;; This function is called by:
  8500 ;;		_APP_KeyboardUpdateState
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504     08E6                     _GenericQueue_Enqueue:	
  8505                           ;psect for function _GenericQueue_Enqueue
  8506                           
  8507                           
  8508                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8512     08E6  0841               	movf	(GenericQueue_Enqueue@q+1)^(0+128),w
  8513     08E7  00A9               	movwf	(GenericQueue_IsFull@q+1)^(0+128)
  8514     08E8  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8515     08E9  00A8               	movwf	GenericQueue_IsFull@q^(0+128)
  8516     08EA  3190  208D  3188   	fcall	_GenericQueue_IsFull
  8517     08ED  0828               	movf	?_GenericQueue_IsFull^(0+128),w
  8518     08EE  0429               	iorwf	(?_GenericQueue_IsFull+1)^(0+128),w
  8519     08EF  1D03               	btfss	3,2
  8520     08F0  0008               	return
  8521                           
  8522                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
  8523     08F1  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8524     08F2  3E5D               	addlw	93
  8525     08F3  0086               	movwf	6
  8526     08F4  3000               	movlw	0
  8527     08F5  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8528     08F6  0087               	movwf	7
  8529     08F7  0801               	movf	1,w
  8530     08F8  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8531     08F9  01C5               	clrf	(??_GenericQueue_Enqueue^(0+128)+1)
  8532     08FA  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8533     08FB  00AF               	movwf	___wmul@multiplier^(0+128)
  8534     08FC  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8535     08FD  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8536     08FE  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8537     08FF  3E5A               	addlw	90
  8538     0900  0086               	movwf	6
  8539     0901  3000               	movlw	0
  8540     0902  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8541     0903  0087               	movwf	7
  8542     0904  3F40               	moviw [0]fsr1
  8543     0905  00B1               	movwf	___wmul@multiplicand^(0+128)
  8544     0906  3F41               	moviw [1]fsr1
  8545     0907  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8546     0908  3191  2160  3188   	fcall	___wmul
  8547     090B  082F               	movf	?___wmul^(0+128),w
  8548     090C  0740               	addwf	GenericQueue_Enqueue@q^(0+128),w
  8549     090D  00B5               	movwf	memcpy@d1^(0+128)
  8550     090E  0830               	movf	(?___wmul+1)^(0+128),w
  8551     090F  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8552     0910  00B6               	movwf	(memcpy@d1+1)^(0+128)
  8553     0911  0843               	movf	(GenericQueue_Enqueue@item+1)^(0+128),w
  8554     0912  00B8               	movwf	(memcpy@s1+1)^(0+128)
  8555     0913  0842               	movf	GenericQueue_Enqueue@item^(0+128),w
  8556     0914  00B7               	movwf	memcpy@s1^(0+128)
  8557     0915  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8558     0916  3E5A               	addlw	90
  8559     0917  0086               	movwf	6
  8560     0918  3000               	movlw	0
  8561     0919  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8562     091A  0087               	movwf	7
  8563     091B  3F40               	moviw [0]fsr1
  8564     091C  00B9               	movwf	memcpy@n^(0+128)
  8565     091D  3F41               	moviw [1]fsr1
  8566     091E  00BA               	movwf	(memcpy@n+1)^(0+128)
  8567     091F  3193  2334  3188   	fcall	_memcpy
  8568                           
  8569                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
  8570     0922  300F               	movlw	15
  8571     0923  00A8               	movwf	___awmod@divisor^(0+128)
  8572     0924  3000               	movlw	0
  8573     0925  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8574     0926  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8575     0927  3E5D               	addlw	93
  8576     0928  0086               	movwf	6
  8577     0929  3000               	movlw	0
  8578     092A  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8579     092B  0087               	movwf	7
  8580     092C  0801               	movf	1,w
  8581     092D  3E01               	addlw	1
  8582     092E  00AA               	movwf	___awmod@dividend^(0+128)
  8583     092F  3000               	movlw	0
  8584     0930  1803               	skipnc
  8585     0931  3001               	movlw	1
  8586     0932  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8587     0933  3194  24F6         	fcall	___awmod
  8588     0935  0828               	movf	?___awmod^(0+128),w
  8589     0936  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8590     0937  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8591     0938  3E5D               	addlw	93
  8592     0939  00C5               	movwf	(??_GenericQueue_Enqueue+1)^(0+128)
  8593     093A  3000               	movlw	0
  8594     093B  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8595     093C  00C6               	movwf	(??_GenericQueue_Enqueue+2)^(0+128)
  8596     093D  0845               	movf	(??_GenericQueue_Enqueue+1)^(0+128),w
  8597     093E  0086               	movwf	6
  8598     093F  0846               	movf	(??_GenericQueue_Enqueue+2)^(0+128),w
  8599     0940  0087               	movwf	7
  8600     0941  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8601     0942  0081               	movwf	1
  8602                           
  8603                           ;generic_queue.c: 23:         q->size++;
  8604     0943  3001               	movlw	1
  8605     0944  00C4               	movwf	??_GenericQueue_Enqueue^(0+128)
  8606     0945  0840               	movf	GenericQueue_Enqueue@q^(0+128),w
  8607     0946  3E5E               	addlw	94
  8608     0947  0086               	movwf	6
  8609     0948  3000               	movlw	0
  8610     0949  3D41               	addwfc	(GenericQueue_Enqueue@q+1)^(0+128),w
  8611     094A  0087               	movwf	7
  8612     094B  0844               	movf	??_GenericQueue_Enqueue^(0+128),w
  8613     094C  0781               	addwf	1,f
  8614     094D  0008               	return
  8615     094E                     __end_of_GenericQueue_Enqueue:
  8616                           
  8617                           	psect	text38
  8618     1334                     __ptext38:	
  8619 ;; *************** function _memcpy *****************
  8620 ;; Defined at:
  8621 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  d1              2   13[BANK1 ] PTR void 
  8624 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8625 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8626 ;;  s1              2   15[BANK1 ] PTR const void 
  8627 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8628 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8629 ;;		 -> SetupPkt(8), 
  8630 ;;  n               2   17[BANK1 ] unsigned int 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;  s               2   21[BANK1 ] PTR const unsigned char 
  8633 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCode(3), keyboardScanCodeQueue(95), 
  8634 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), keyboard(101), CtrlTrfDa
      +ta(8), 
  8635 ;;		 -> SetupPkt(8), 
  8636 ;;  d               2   19[BANK1 ] PTR unsigned char 
  8637 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
  8638 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
  8639 ;;  tmp             1   23[BANK1 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  2   13[BANK1 ] PTR void 
  8642 ;; Registers used:
  8643 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8644 ;; Tracked objects:
  8645 ;;		On entry : 1F/1
  8646 ;;		On exit  : 1F/1
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8649 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;Total ram usage:       11 bytes
  8654 ;; Hardware stack levels used: 1
  8655 ;; Hardware stack levels required when called: 10
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_GenericQueue_Enqueue
  8660 ;;		_GenericQueue_Dequeue
  8661 ;;		_GenericQueue_Remove
  8662 ;;		_GenericQueue_CopyToArray
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666     1334                     _memcpy:	
  8667                           ;psect for function _memcpy
  8668                           
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
  8672     1334  0838               	movf	(memcpy@s1+1)^(0+128),w
  8673     1335  00BE               	movwf	(memcpy@s+1)^(0+128)
  8674     1336  0837               	movf	memcpy@s1^(0+128),w
  8675     1337  00BD               	movwf	memcpy@s^(0+128)
  8676     1338  0836               	movf	(memcpy@d1+1)^(0+128),w
  8677     1339  00BC               	movwf	(memcpy@d+1)^(0+128)
  8678     133A  0835               	movf	memcpy@d1^(0+128),w
  8679     133B  00BB               	movwf	memcpy@d^(0+128)
  8680     133C                     l4482:
  8681     133C  3001               	movlw	1
  8682     133D  02B9               	subwf	memcpy@n^(0+128),f
  8683     133E  3000               	movlw	0
  8684     133F  3BBA               	subwfb	(memcpy@n+1)^(0+128),f
  8685     1340  0A39               	incf	memcpy@n^(0+128),w
  8686     1341  1903               	btfsc	3,2
  8687     1342  0A3A               	incf	(memcpy@n+1)^(0+128),w
  8688     1343  1903               	btfsc	3,2
  8689     1344  0008               	return
  8690     1345  083D               	movf	memcpy@s^(0+128),w
  8691     1346  0086               	movwf	6
  8692     1347  083E               	movf	(memcpy@s+1)^(0+128),w
  8693     1348  0087               	movwf	7
  8694     1349  0801               	movf	1,w
  8695     134A  00BF               	movwf	memcpy@tmp^(0+128)
  8696     134B  3001               	movlw	1
  8697     134C  07BD               	addwf	memcpy@s^(0+128),f
  8698     134D  3000               	movlw	0
  8699     134E  3DBE               	addwfc	(memcpy@s+1)^(0+128),f
  8700     134F  083B               	movf	memcpy@d^(0+128),w
  8701     1350  0086               	movwf	6
  8702     1351  083C               	movf	(memcpy@d+1)^(0+128),w
  8703     1352  0087               	movwf	7
  8704     1353  083F               	movf	memcpy@tmp^(0+128),w
  8705     1354  0081               	movwf	1
  8706     1355  3001               	movlw	1
  8707     1356  07BB               	addwf	memcpy@d^(0+128),f
  8708     1357  3000               	movlw	0
  8709     1358  3DBC               	addwfc	(memcpy@d+1)^(0+128),f
  8710     1359  2B3C               	goto	l4482
  8711     135A                     __end_of_memcpy:
  8712                           
  8713                           	psect	text39
  8714     108D                     __ptext39:	
  8715 ;; *************** function _GenericQueue_IsFull *****************
  8716 ;; Defined at:
  8717 ;;		line 15 in file "generic_queue.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  q               2    0[BANK1 ] PTR struct .
  8720 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  2    0[BANK1 ] int 
  8725 ;; Registers used:
  8726 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8727 ;; Tracked objects:
  8728 ;;		On entry : 1F/1
  8729 ;;		On exit  : 1F/1
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8732 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;Total ram usage:        4 bytes
  8737 ;; Hardware stack levels used: 1
  8738 ;; Hardware stack levels required when called: 10
  8739 ;; This function calls:
  8740 ;;		Nothing
  8741 ;; This function is called by:
  8742 ;;		_GenericQueue_Enqueue
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746     108D                     _GenericQueue_IsFull:	
  8747                           ;psect for function _GenericQueue_IsFull
  8748                           
  8749                           
  8750                           ;generic_queue.c: 16:     return (q->size == 15);
  8751                           
  8752                           ;incstack = 0
  8753                           ; Regs used in _GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
  8754     108D  0828               	movf	GenericQueue_IsFull@q^(0+128),w
  8755     108E  3E5E               	addlw	94
  8756     108F  0086               	movwf	6
  8757     1090  3000               	movlw	0
  8758     1091  3D29               	addwfc	(GenericQueue_IsFull@q+1)^(0+128),w
  8759     1092  0087               	movwf	7
  8760     1093  300F               	movlw	15
  8761     1094  0601               	xorwf	1,w
  8762     1095  1D03               	btfss	3,2
  8763     1096  2899               	goto	u3750
  8764     1097  3001               	movlw	1
  8765     1098  289A               	goto	u3760
  8766     1099                     u3750:
  8767     1099  3000               	movlw	0
  8768     109A                     u3760:
  8769     109A  00AA               	movwf	??_GenericQueue_IsFull^(0+128)
  8770     109B  01AB               	clrf	(??_GenericQueue_IsFull^(0+128)+1)
  8771     109C  082A               	movf	??_GenericQueue_IsFull^(0+128),w
  8772     109D  00A8               	movwf	?_GenericQueue_IsFull^(0+128)
  8773     109E  082B               	movf	(??_GenericQueue_IsFull+1)^(0+128),w
  8774     109F  00A9               	movwf	(?_GenericQueue_IsFull+1)^(0+128)
  8775     10A0  0008               	return
  8776     10A1                     __end_of_GenericQueue_IsFull:
  8777                           
  8778                           	psect	text40
  8779     1670                     __ptext40:	
  8780 ;; *************** function _GenericQueue_Contains *****************
  8781 ;; Defined at:
  8782 ;;		line 52 in file "generic_queue.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  q               2   22[BANK1 ] PTR struct .
  8785 ;;		 -> keyboard(101), 
  8786 ;;  item            1   24[BANK1 ] PTR const void 
  8787 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  i               1   29[BANK1 ] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      _Bool 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 1F/1
  8796 ;;		On exit  : 1F/1
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8799 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8800 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;Total ram usage:        8 bytes
  8804 ;; Hardware stack levels used: 1
  8805 ;; Hardware stack levels required when called: 11
  8806 ;; This function calls:
  8807 ;;		_GenericQueue_IsEmpty
  8808 ;;		___awmod
  8809 ;;		___wmul
  8810 ;;		_memcmp
  8811 ;; This function is called by:
  8812 ;;		_APP_KeyboardUpdateState
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816     1670                     _GenericQueue_Contains:	
  8817                           ;psect for function _GenericQueue_Contains
  8818                           
  8819                           
  8820                           ;generic_queue.c: 53:     if (!GenericQueue_IsEmpty(q)) {
  8821                           
  8822                           ;incstack = 0
  8823                           ; Regs used in _GenericQueue_Contains: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8824     1670  083F               	movf	(GenericQueue_Contains@q+1)^(0+128),w
  8825     1671  00A9               	movwf	(GenericQueue_IsEmpty@q+1)^(0+128)
  8826     1672  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8827     1673  00A8               	movwf	GenericQueue_IsEmpty@q^(0+128)
  8828     1674  319F  27D9  3196   	fcall	_GenericQueue_IsEmpty
  8829     1677  0828               	movf	?_GenericQueue_IsEmpty^(0+128),w
  8830     1678  0429               	iorwf	(?_GenericQueue_IsEmpty+1)^(0+128),w
  8831     1679  1D03               	btfss	3,2
  8832     167A  2ED0               	goto	l4766
  8833                           
  8834                           ;generic_queue.c: 54:         for (uint8_t i = q->front; i != q->rear; i = (i + 1) % 15)
      +                           {
  8835     167B  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8836     167C  3E5C               	addlw	92
  8837     167D  0086               	movwf	6
  8838     167E  3000               	movlw	0
  8839     167F  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8840     1680  0087               	movwf	7
  8841     1681  0801               	movf	1,w
  8842     1682                     L6:
  8843     1682  00C5               	movwf	GenericQueue_Contains@i^(0+128)
  8844     1683  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8845     1684  3E5D               	addlw	93
  8846     1685  0086               	movwf	6
  8847     1686  3000               	movlw	0
  8848     1687  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8849     1688  0087               	movwf	7
  8850     1689  0801               	movf	1,w
  8851     168A  0645               	xorwf	GenericQueue_Contains@i^(0+128),w
  8852     168B  1903               	btfsc	3,2
  8853     168C  2ED0               	goto	l4766
  8854                           
  8855                           ;generic_queue.c: 55:             if (memcmp(&q->buffer[i * q->element_size], item, q->e
      +                          lement_size) == 0) {
  8856     168D  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8857     168E  00C1               	movwf	??_GenericQueue_Contains^(0+128)
  8858     168F  01C2               	clrf	(??_GenericQueue_Contains^(0+128)+1)
  8859     1690  0841               	movf	??_GenericQueue_Contains^(0+128),w
  8860     1691  00AF               	movwf	___wmul@multiplier^(0+128)
  8861     1692  0842               	movf	(??_GenericQueue_Contains+1)^(0+128),w
  8862     1693  00B0               	movwf	(___wmul@multiplier+1)^(0+128)
  8863     1694  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8864     1695  3E5A               	addlw	90
  8865     1696  0086               	movwf	6
  8866     1697  3000               	movlw	0
  8867     1698  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8868     1699  0087               	movwf	7
  8869     169A  3F40               	moviw [0]fsr1
  8870     169B  00B1               	movwf	___wmul@multiplicand^(0+128)
  8871     169C  3F41               	moviw [1]fsr1
  8872     169D  00B2               	movwf	(___wmul@multiplicand+1)^(0+128)
  8873     169E  3191  2160  3196   	fcall	___wmul
  8874     16A1  082F               	movf	?___wmul^(0+128),w
  8875     16A2  073E               	addwf	GenericQueue_Contains@q^(0+128),w
  8876     16A3  00C3               	movwf	(??_GenericQueue_Contains+2)^(0+128)
  8877     16A4  0830               	movf	(?___wmul+1)^(0+128),w
  8878     16A5  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8879     16A6  00C4               	movwf	(??_GenericQueue_Contains+3)^(0+128)
  8880     16A7  0843               	movf	(??_GenericQueue_Contains+2)^(0+128),w
  8881     16A8  00B5               	movwf	memcmp@vl^(0+128)
  8882     16A9  0844               	movf	(??_GenericQueue_Contains+3)^(0+128),w
  8883     16AA  00B6               	movwf	(memcmp@vl+1)^(0+128)
  8884     16AB  0840               	movf	GenericQueue_Contains@item^(0+128),w
  8885     16AC  00B7               	movwf	memcmp@vr^(0+128)
  8886     16AD  083E               	movf	GenericQueue_Contains@q^(0+128),w
  8887     16AE  3E5A               	addlw	90
  8888     16AF  0086               	movwf	6
  8889     16B0  3000               	movlw	0
  8890     16B1  3D3F               	addwfc	(GenericQueue_Contains@q+1)^(0+128),w
  8891     16B2  0087               	movwf	7
  8892     16B3  3F40               	moviw [0]fsr1
  8893     16B4  00B8               	movwf	memcmp@n^(0+128)
  8894     16B5  3F41               	moviw [1]fsr1
  8895     16B6  00B9               	movwf	(memcmp@n+1)^(0+128)
  8896     16B7  3193  238A  3196   	fcall	_memcmp
  8897     16BA  0835               	movf	?_memcmp^(0+128),w
  8898     16BB  0436               	iorwf	(?_memcmp+1)^(0+128),w
  8899     16BC  1D03               	btfss	3,2
  8900     16BD  2EC0               	goto	l4762
  8901                           
  8902                           ;generic_queue.c: 56:                 return 1;
  8903     16BE  3001               	movlw	1
  8904     16BF  0008               	return
  8905     16C0                     l4762:
  8906                           
  8907                           ;generic_queue.c: 58:         }
  8908     16C0  300F               	movlw	15
  8909     16C1  00A8               	movwf	___awmod@divisor^(0+128)
  8910     16C2  3000               	movlw	0
  8911     16C3  00A9               	movwf	(___awmod@divisor^(0+128)+1)
  8912     16C4  0845               	movf	GenericQueue_Contains@i^(0+128),w
  8913     16C5  3E01               	addlw	1
  8914     16C6  00AA               	movwf	___awmod@dividend^(0+128)
  8915     16C7  3000               	movlw	0
  8916     16C8  1803               	skipnc
  8917     16C9  3001               	movlw	1
  8918     16CA  00AB               	movwf	(___awmod@dividend^(0+128)+1)
  8919     16CB  3194  24F6  3196   	fcall	___awmod
  8920     16CE  0828               	movf	?___awmod^(0+128),w
  8921     16CF  2E82               	goto	L6
  8922     16D0                     l4766:
  8923                           
  8924                           ;generic_queue.c: 60:     return 0;
  8925     16D0  3000               	movlw	0
  8926     16D1  0008               	return
  8927     16D2                     __end_of_GenericQueue_Contains:
  8928                           
  8929                           	psect	text41
  8930     138A                     __ptext41:	
  8931 ;; *************** function _memcmp *****************
  8932 ;; Defined at:
  8933 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcmp.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;  vl              2   13[BANK1 ] PTR const void 
  8936 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8937 ;;  vr              1   15[BANK1 ] PTR const void 
  8938 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@
      +usbHidCode_2928(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8939 ;;  n               2   16[BANK1 ] unsigned int 
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;  l               2   19[BANK1 ] PTR const unsigned char 
  8942 ;;		 -> keyboard$buffer(90), keyboard(101), 
  8943 ;;  r               1   21[BANK1 ] PTR const unsigned char 
  8944 ;;		 -> APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2929(1), APP_KeyboardUpdateState@
      +usbHidCode_2928(1), APP_KeyboardUpdateState@usbHidCode(1), 
  8945 ;; Return value:  Size  Location     Type
  8946 ;;                  2   13[BANK1 ] int 
  8947 ;; Registers used:
  8948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8949 ;; Tracked objects:
  8950 ;;		On entry : 1F/1
  8951 ;;		On exit  : 1F/1
  8952 ;;		Unchanged: 0/0
  8953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8954 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;Total ram usage:        9 bytes
  8959 ;; Hardware stack levels used: 1
  8960 ;; Hardware stack levels required when called: 10
  8961 ;; This function calls:
  8962 ;;		Nothing
  8963 ;; This function is called by:
  8964 ;;		_GenericQueue_Remove
  8965 ;;		_GenericQueue_Contains
  8966 ;; This function uses a non-reentrant model
  8967 ;;
  8968                           
  8969     138A                     _memcmp:	
  8970                           ;psect for function _memcmp
  8971                           
  8972                           
  8973                           ;incstack = 0
  8974                           ; Regs used in _memcmp: [wreg-fsr1h+status,2+status,0]
  8975     138A  0836               	movf	(memcmp@vl+1)^(0+128),w
  8976     138B  00BC               	movwf	(memcmp@l+1)^(0+128)
  8977     138C  0835               	movf	memcmp@vl^(0+128),w
  8978     138D  00BB               	movwf	memcmp@l^(0+128)
  8979     138E  0837               	movf	memcmp@vr^(0+128),w
  8980     138F  00BD               	movwf	memcmp@r^(0+128)
  8981     1390  2BA8               	goto	l4540
  8982     1391                     l4542:
  8983     1391  083D               	movf	memcmp@r^(0+128),w
  8984     1392  0086               	movwf	6
  8985     1393  0187               	clrf	7
  8986     1394  083B               	movf	memcmp@l^(0+128),w
  8987     1395  0084               	movwf	4
  8988     1396  083C               	movf	(memcmp@l+1)^(0+128),w
  8989     1397  0085               	movwf	5
  8990     1398  0800               	movf	0,w
  8991     1399  0601               	xorwf	1,w
  8992     139A  1D03               	btfss	3,2
  8993     139B  2BAC               	goto	l4544
  8994     139C  3001               	movlw	1
  8995     139D  02B8               	subwf	memcmp@n^(0+128),f
  8996     139E  3000               	movlw	0
  8997     139F  3BB9               	subwfb	(memcmp@n+1)^(0+128),f
  8998     13A0  3001               	movlw	1
  8999     13A1  07BB               	addwf	memcmp@l^(0+128),f
  9000     13A2  3000               	movlw	0
  9001     13A3  3DBC               	addwfc	(memcmp@l+1)^(0+128),f
  9002     13A4  3001               	movlw	1
  9003     13A5  00BA               	movwf	??_memcmp^(0+128)
  9004     13A6  083A               	movf	??_memcmp^(0+128),w
  9005     13A7  07BD               	addwf	memcmp@r^(0+128),f
  9006     13A8                     l4540:
  9007     13A8  0838               	movf	memcmp@n^(0+128),w
  9008     13A9  0439               	iorwf	(memcmp@n+1)^(0+128),w
  9009     13AA  1D03               	btfss	3,2
  9010     13AB  2B91               	goto	l4542
  9011     13AC                     l4544:
  9012     13AC  0838               	movf	memcmp@n^(0+128),w
  9013     13AD  0439               	iorwf	(memcmp@n+1)^(0+128),w
  9014     13AE  1D03               	btfss	3,2
  9015     13AF  2BB3               	goto	l4548
  9016     13B0  01B5               	clrf	?_memcmp^(0+128)
  9017     13B1  01B6               	clrf	(?_memcmp+1)^(0+128)
  9018     13B2  0008               	return
  9019     13B3                     l4548:
  9020     13B3  083B               	movf	memcmp@l^(0+128),w
  9021     13B4  0086               	movwf	6
  9022     13B5  083C               	movf	(memcmp@l+1)^(0+128),w
  9023     13B6  0087               	movwf	7
  9024     13B7  083D               	movf	memcmp@r^(0+128),w
  9025     13B8  0084               	movwf	4
  9026     13B9  0185               	clrf	5
  9027     13BA  0800               	movf	0,w
  9028     13BB  0201               	subwf	1,w
  9029     13BC  00B5               	movwf	?_memcmp^(0+128)
  9030     13BD  01B6               	clrf	(?_memcmp^(0+128)+1)
  9031     13BE  1C03               	skipc
  9032     13BF  03B6               	decf	(?_memcmp+1)^(0+128),f
  9033     13C0  0008               	return
  9034     13C1                     __end_of_memcmp:
  9035                           
  9036                           	psect	text42
  9037     1160                     __ptext42:	
  9038 ;; *************** function ___wmul *****************
  9039 ;; Defined at:
  9040 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  multiplier      2    7[BANK1 ] unsigned int 
  9043 ;;  multiplicand    2    9[BANK1 ] unsigned int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  product         2   11[BANK1 ] unsigned int 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  2    7[BANK1 ] unsigned int 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 1F/1
  9052 ;;		On exit  : 1F/1
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        6 bytes
  9060 ;; Hardware stack levels used: 1
  9061 ;; Hardware stack levels required when called: 10
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_GenericQueue_Enqueue
  9066 ;;		_GenericQueue_Dequeue
  9067 ;;		_GenericQueue_Remove
  9068 ;;		_GenericQueue_Contains
  9069 ;;		_GenericQueue_CopyToArray
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073     1160                     ___wmul:	
  9074                           ;psect for function ___wmul
  9075                           
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9079     1160  01B3               	clrf	___wmul@product^(0+128)
  9080     1161  01B4               	clrf	(___wmul@product+1)^(0+128)
  9081     1162                     l4554:
  9082     1162  1C2F               	btfss	___wmul@multiplier^(0+128),0
  9083     1163  2968               	goto	l1280
  9084     1164  0831               	movf	___wmul@multiplicand^(0+128),w
  9085     1165  07B3               	addwf	___wmul@product^(0+128),f
  9086     1166  0832               	movf	(___wmul@multiplicand+1)^(0+128),w
  9087     1167  3DB4               	addwfc	(___wmul@product+1)^(0+128),f
  9088     1168                     l1280:
  9089     1168  3001               	movlw	1
  9090     1169                     u3815:
  9091     1169  35B1               	lslf	___wmul@multiplicand^(0+128),f
  9092     116A  0DB2               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9093     116B  0B89               	decfsz	9,f
  9094     116C  2969               	goto	u3815
  9095     116D  3001               	movlw	1
  9096     116E                     u3825:
  9097     116E  36B0               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9098     116F  0CAF               	rrf	___wmul@multiplier^(0+128),f
  9099     1170  0B89               	decfsz	9,f
  9100     1171  296E               	goto	u3825
  9101     1172  082F               	movf	___wmul@multiplier^(0+128),w
  9102     1173  0430               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9103     1174  1D03               	btfss	3,2
  9104     1175  2962               	goto	l4554
  9105     1176  0834               	movf	(___wmul@product+1)^(0+128),w
  9106     1177  00B0               	movwf	(?___wmul+1)^(0+128)
  9107     1178  0833               	movf	___wmul@product^(0+128),w
  9108     1179  00AF               	movwf	?___wmul^(0+128)
  9109     117A  0008               	return
  9110     117B                     __end_of___wmul:
  9111                           
  9112                           	psect	text43
  9113     14F6                     __ptext43:	
  9114 ;; *************** function ___awmod *****************
  9115 ;; Defined at:
  9116 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  9117 ;; Parameters:    Size  Location     Type
  9118 ;;  divisor         2    0[BANK1 ] int 
  9119 ;;  dividend        2    2[BANK1 ] int 
  9120 ;; Auto vars:     Size  Location     Type
  9121 ;;  sign            1    6[BANK1 ] unsigned char 
  9122 ;;  counter         1    5[BANK1 ] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;                  2    0[BANK1 ] int 
  9125 ;; Registers used:
  9126 ;;		wreg, status,2, status,0
  9127 ;; Tracked objects:
  9128 ;;		On entry : 1F/1
  9129 ;;		On exit  : 1F/1
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        7 bytes
  9137 ;; Hardware stack levels used: 1
  9138 ;; Hardware stack levels required when called: 10
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_GenericQueue_Enqueue
  9143 ;;		_GenericQueue_Dequeue
  9144 ;;		_GenericQueue_Remove
  9145 ;;		_GenericQueue_Contains
  9146 ;;		_GenericQueue_CopyToArray
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150     14F6                     ___awmod:	
  9151                           ;psect for function ___awmod
  9152                           
  9153                           
  9154                           ;incstack = 0
  9155                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  9156     14F6  01AE               	clrf	___awmod@sign^(0+128)
  9157     14F7  1FAB               	btfss	(___awmod@dividend+1)^(0+128),7
  9158     14F8  2D00               	goto	l4574
  9159     14F9  09AA               	comf	___awmod@dividend^(0+128),f
  9160     14FA  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9161     14FB  0AAA               	incf	___awmod@dividend^(0+128),f
  9162     14FC  1903               	skipnz
  9163     14FD  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9164     14FE  01AE               	clrf	___awmod@sign^(0+128)
  9165     14FF  0AAE               	incf	___awmod@sign^(0+128),f
  9166     1500                     l4574:
  9167     1500  1FA9               	btfss	(___awmod@divisor+1)^(0+128),7
  9168     1501  2D07               	goto	l4578
  9169     1502  09A8               	comf	___awmod@divisor^(0+128),f
  9170     1503  09A9               	comf	(___awmod@divisor+1)^(0+128),f
  9171     1504  0AA8               	incf	___awmod@divisor^(0+128),f
  9172     1505  1903               	skipnz
  9173     1506  0AA9               	incf	(___awmod@divisor+1)^(0+128),f
  9174     1507                     l4578:
  9175     1507  0828               	movf	___awmod@divisor^(0+128),w
  9176     1508  0429               	iorwf	(___awmod@divisor+1)^(0+128),w
  9177     1509  1903               	btfsc	3,2
  9178     150A  2D2E               	goto	l4596
  9179     150B  01AD               	clrf	___awmod@counter^(0+128)
  9180     150C  0AAD               	incf	___awmod@counter^(0+128),f
  9181     150D                     l4586:
  9182     150D  1BA9               	btfsc	(___awmod@divisor+1)^(0+128),7
  9183     150E  2D19               	goto	l4588
  9184     150F  3001               	movlw	1
  9185     1510                     u3875:
  9186     1510  35A8               	lslf	___awmod@divisor^(0+128),f
  9187     1511  0DA9               	rlf	(___awmod@divisor+1)^(0+128),f
  9188     1512  0B89               	decfsz	9,f
  9189     1513  2D10               	goto	u3875
  9190     1514  3001               	movlw	1
  9191     1515  00AC               	movwf	??___awmod^(0+128)
  9192     1516  082C               	movf	??___awmod^(0+128),w
  9193     1517  07AD               	addwf	___awmod@counter^(0+128),f
  9194     1518  2D0D               	goto	l4586
  9195     1519                     l4588:
  9196     1519  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9197     151A  022B               	subwf	(___awmod@dividend+1)^(0+128),w
  9198     151B  1D03               	skipz
  9199     151C  2D1F               	goto	u3895
  9200     151D  0828               	movf	___awmod@divisor^(0+128),w
  9201     151E  022A               	subwf	___awmod@dividend^(0+128),w
  9202     151F                     u3895:
  9203     151F  1C03               	skipc
  9204     1520  2D25               	goto	l4592
  9205     1521  0828               	movf	___awmod@divisor^(0+128),w
  9206     1522  02AA               	subwf	___awmod@dividend^(0+128),f
  9207     1523  0829               	movf	(___awmod@divisor+1)^(0+128),w
  9208     1524  3BAB               	subwfb	(___awmod@dividend+1)^(0+128),f
  9209     1525                     l4592:
  9210     1525  3001               	movlw	1
  9211     1526                     u3905:
  9212     1526  36A9               	lsrf	(___awmod@divisor+1)^(0+128),f
  9213     1527  0CA8               	rrf	___awmod@divisor^(0+128),f
  9214     1528  0B89               	decfsz	9,f
  9215     1529  2D26               	goto	u3905
  9216     152A  3001               	movlw	1
  9217     152B  02AD               	subwf	___awmod@counter^(0+128),f
  9218     152C  1D03               	btfss	3,2
  9219     152D  2D19               	goto	l4588
  9220     152E                     l4596:
  9221     152E  082E               	movf	___awmod@sign^(0+128),w
  9222     152F  1903               	btfsc	3,2
  9223     1530  2D36               	goto	l4600
  9224     1531  09AA               	comf	___awmod@dividend^(0+128),f
  9225     1532  09AB               	comf	(___awmod@dividend+1)^(0+128),f
  9226     1533  0AAA               	incf	___awmod@dividend^(0+128),f
  9227     1534  1903               	skipnz
  9228     1535  0AAB               	incf	(___awmod@dividend+1)^(0+128),f
  9229     1536                     l4600:
  9230     1536  082B               	movf	(___awmod@dividend+1)^(0+128),w
  9231     1537  00A9               	movwf	(?___awmod+1)^(0+128)
  9232     1538  082A               	movf	___awmod@dividend^(0+128),w
  9233     1539  00A8               	movwf	?___awmod^(0+128)
  9234     153A  0008               	return
  9235     153B                     __end_of___awmod:
  9236                           
  9237                           	psect	text44
  9238     1FD9                     __ptext44:	
  9239 ;; *************** function _GenericQueue_IsEmpty *****************
  9240 ;; Defined at:
  9241 ;;		line 11 in file "generic_queue.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;  q               2    0[BANK1 ] PTR struct .
  9244 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
  9245 ;; Auto vars:     Size  Location     Type
  9246 ;;		None
  9247 ;; Return value:  Size  Location     Type
  9248 ;;                  2    0[BANK1 ] int 
  9249 ;; Registers used:
  9250 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9251 ;; Tracked objects:
  9252 ;;		On entry : 1F/1
  9253 ;;		On exit  : 1F/1
  9254 ;;		Unchanged: 0/0
  9255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9256 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9258 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9259 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9260 ;;Total ram usage:        4 bytes
  9261 ;; Hardware stack levels used: 1
  9262 ;; Hardware stack levels required when called: 10
  9263 ;; This function calls:
  9264 ;;		Nothing
  9265 ;; This function is called by:
  9266 ;;		_PS2Keyboard_GetScanCode
  9267 ;;		_GenericQueue_Dequeue
  9268 ;;		_GenericQueue_Remove
  9269 ;;		_GenericQueue_Contains
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273     1FD9                     _GenericQueue_IsEmpty:	
  9274                           ;psect for function _GenericQueue_IsEmpty
  9275                           
  9276                           
  9277                           ;generic_queue.c: 12:     return (q->size == 0);
  9278                           
  9279                           ;incstack = 0
  9280                           ; Regs used in _GenericQueue_IsEmpty: [wreg+fsr1l+fsr1h+status,2+status,0]
  9281     1FD9  0828               	movf	GenericQueue_IsEmpty@q^(0+128),w
  9282     1FDA  3E5E               	addlw	94
  9283     1FDB  0086               	movwf	6
  9284     1FDC  3000               	movlw	0
  9285     1FDD  3D29               	addwfc	(GenericQueue_IsEmpty@q+1)^(0+128),w
  9286     1FDE  0087               	movwf	7
  9287     1FDF  0801               	movf	1,w
  9288     1FE0  1D03               	btfss	3,2
  9289     1FE1  2FE4               	goto	u3730
  9290     1FE2  3001               	movlw	1
  9291     1FE3  2FE5               	goto	u3740
  9292     1FE4                     u3730:
  9293     1FE4  3000               	movlw	0
  9294     1FE5                     u3740:
  9295     1FE5  00AA               	movwf	??_GenericQueue_IsEmpty^(0+128)
  9296     1FE6  01AB               	clrf	(??_GenericQueue_IsEmpty^(0+128)+1)
  9297     1FE7  082A               	movf	??_GenericQueue_IsEmpty^(0+128),w
  9298     1FE8  00A8               	movwf	?_GenericQueue_IsEmpty^(0+128)
  9299     1FE9  082B               	movf	(??_GenericQueue_IsEmpty+1)^(0+128),w
  9300     1FEA  00A9               	movwf	(?_GenericQueue_IsEmpty+1)^(0+128)
  9301     1FEB  0008               	return
  9302     1FEC                     __end_of_GenericQueue_IsEmpty:
  9303                           
  9304                           	psect	text45
  9305     1F27                     __ptext45:	
  9306 ;; *************** function _APP_KeyboardProcessOutputReport *****************
  9307 ;; Defined at:
  9308 ;;		line 517 in file "app_device_keyboard.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;		None
  9311 ;; Auto vars:     Size  Location     Type
  9312 ;;		None
  9313 ;; Return value:  Size  Location     Type
  9314 ;;                  1    wreg      void 
  9315 ;; Registers used:
  9316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9317 ;; Tracked objects:
  9318 ;;		On entry : 1C/1
  9319 ;;		On exit  : 1F/2
  9320 ;;		Unchanged: 0/0
  9321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;Total ram usage:        0 bytes
  9327 ;; Hardware stack levels used: 1
  9328 ;; Hardware stack levels required when called: 11
  9329 ;; This function calls:
  9330 ;;		_PS2Keyboard_SendCommand
  9331 ;; This function is called by:
  9332 ;;		_APP_KeyboardTasks
  9333 ;; This function uses a non-reentrant model
  9334 ;;
  9335                           
  9336     1F27                     _APP_KeyboardProcessOutputReport:	
  9337                           ;psect for function _APP_KeyboardProcessOutputReport
  9338                           
  9339                           
  9340                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
  9341                           
  9342                           ;incstack = 0
  9343                           ; Regs used in _APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
  9344     1F27  3090               	movlw	144
  9345     1F28  0086               	movwf	6
  9346     1F29  3023               	movlw	35
  9347     1F2A  0087               	movwf	7
  9348     1F2B  0022               	movlb	2	; select bank2
  9349     1F2C  0820               	movf	32,w	;volatile
  9350     1F2D  0081               	movwf	1
  9351                           
  9352                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
  9353     1F2E  30ED               	movlw	237
  9354     1F2F  3191  21B1         	fcall	_PS2Keyboard_SendCommand
  9355     1F31  0008               	return
  9356     1F32                     __end_of_APP_KeyboardProcessOutputReport:
  9357                           
  9358                           	psect	text46
  9359     11B1                     __ptext46:	
  9360 ;; *************** function _PS2Keyboard_SendCommand *****************
  9361 ;; Defined at:
  9362 ;;		line 60 in file "ps2_keyboard.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  cmd             1    wreg     unsigned char 
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  cmd             1    0[BANK1 ] unsigned char 
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  1    wreg      void 
  9369 ;; Registers used:
  9370 ;;		wreg, status,2
  9371 ;; Tracked objects:
  9372 ;;		On entry : 1C/1
  9373 ;;		On exit  : 1F/2
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9379 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  9380 ;;Total ram usage:        1 bytes
  9381 ;; Hardware stack levels used: 1
  9382 ;; Hardware stack levels required when called: 10
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_APP_KeyboardUpdateState
  9387 ;;		_APP_KeyboardProcessOutputReport
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391     11B1                     _PS2Keyboard_SendCommand:	
  9392                           ;psect for function _PS2Keyboard_SendCommand
  9393                           
  9394                           
  9395                           ;incstack = 0
  9396                           ; Regs used in _PS2Keyboard_SendCommand: [wreg+status,2]
  9397                           ;PS2Keyboard_SendCommand@cmd stored from wreg
  9398     11B1  0021               	movlb	1	; select bank1
  9399     11B2  00A8               	movwf	PS2Keyboard_SendCommand@cmd^(0+128)
  9400                           
  9401                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
  9402     11B3  0828               	movf	PS2Keyboard_SendCommand@cmd^(0+128),w
  9403     11B4  0022               	movlb	2	; select bank2
  9404     11B5  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
  9405                           
  9406                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
  9407     11B6  138B               	bcf	11,7	;volatile
  9408     11B7  0021               	movlb	1	; select bank1
  9409     11B8  120C               	bcf	12,4	;volatile
  9410     11B9  0022               	movlb	2	; select bank2
  9411     11BA  120C               	bcf	12,4	;volatile
  9412                           
  9413                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
  9414     11BB  30F0               	movlw	240
  9415     11BC                     u6417:
  9416     11BC  3200               	nop2
  9417     11BD  0B89               	decfsz	9,f
  9418     11BE  29BC               	goto	u6417
  9419     11BF  0021               	movlb	1	; select bank1
  9420     11C0  160C               	bsf	12,4	;volatile
  9421                           
  9422                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
  9423     11C1  0020               	movlb	0	; select bank0
  9424     11C2  01E9               	clrf	_keyboardCommandCount	;volatile
  9425                           
  9426                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
  9427     11C3  300C               	movlw	12
  9428     11C4  0022               	movlb	2	; select bank2
  9429     11C5  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
  9430                           
  9431                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
  9432     11C6  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
  9433     11C7  0021               	movlb	1	; select bank1
  9434     11C8  128C               	bcf	12,5	;volatile
  9435     11C9  0022               	movlb	2	; select bank2
  9436     11CA  128C               	bcf	12,5	;volatile
  9437                           
  9438                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
  9439     11CB  178B               	bsf	11,7	;volatile
  9440     11CC  0008               	return
  9441     11CD                     __end_of_PS2Keyboard_SendCommand:
  9442                           
  9443                           	psect	intentry
  9444     0004                     __pintentry:	
  9445 ;; *************** function _INTERRUPT_InterruptManager *****************
  9446 ;; Defined at:
  9447 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;		None
  9450 ;; Auto vars:     Size  Location     Type
  9451 ;;		None
  9452 ;; Return value:  Size  Location     Type
  9453 ;;                  1    wreg      void 
  9454 ;; Registers used:
  9455 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9456 ;; Tracked objects:
  9457 ;;		On entry : 0/0
  9458 ;;		On exit  : 0/0
  9459 ;;		Unchanged: 0/0
  9460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;Total ram usage:        0 bytes
  9466 ;; Hardware stack levels used: 1
  9467 ;; Hardware stack levels required when called: 9
  9468 ;; This function calls:
  9469 ;;		NULL
  9470 ;;		_EUSART_Receive_ISR
  9471 ;;		_EUSART_Transmit_ISR
  9472 ;;		_PIN_MANAGER_IOC
  9473 ;;		_TMR2_ISR
  9474 ;;		_USBDeviceTasks
  9475 ;; This function is called by:
  9476 ;;		Interrupt level 1
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480     0004                     _INTERRUPT_InterruptManager:
  9481                           
  9482                           ;incstack = 0
  9483     0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9484                           
  9485                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9486     0005  3180               	pagesel	$
  9487                           
  9488                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.IOCIE == 1 && INTCONbits
      +                          .IOCIF == 1)
  9489     0006  198B               	btfsc	11,3	;volatile
  9490     0007  1C0B               	btfss	11,0	;volatile
  9491     0008  280D               	goto	i1l141
  9492                           
  9493                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
  9494     0009  319F  271C  3180   	fcall	_PIN_MANAGER_IOC
  9495                           
  9496                           ;mcc_generated_files/interrupt_manager.c: 58:     }
  9497     000C  283B               	goto	i1l153
  9498     000D                     i1l141:	
  9499                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
  9500                           
  9501     000D  1F0B               	btfss	11,6	;volatile
  9502     000E  283B               	goto	i1l153
  9503                           
  9504                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE2bits.USBIE == 1 && PIR2bits.USBIF == 1)
  9505     000F  0021               	movlb	1	; select bank1
  9506     0010  1D12               	btfss	18,2	;volatile
  9507     0011  2819               	goto	i1l144
  9508     0012  0020               	movlb	0	; select bank0
  9509     0013  1D12               	btfss	18,2	;volatile
  9510     0014  2819               	goto	i1l144
  9511                           
  9512                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             USBDeviceTasks();
  9513     0015  3186  26EB  3180   	fcall	_USBDeviceTasks
  9514                           
  9515                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  9516     0018  283B               	goto	i1l153
  9517     0019                     i1l144:	
  9518                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  9519                           
  9520     0019  0021               	movlb	1	; select bank1
  9521     001A  1E11               	btfss	17,4	;volatile
  9522     001B  2826               	goto	i1l146
  9523     001C  0020               	movlb	0	; select bank0
  9524     001D  1E11               	btfss	17,4	;volatile
  9525     001E  2826               	goto	i1l146
  9526                           
  9527                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_TxDefaultInterruptHandler();
  9528     001F  0022               	movlb	2	; select bank2
  9529     0020  0849               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
  9530     0021  008A               	movwf	10
  9531     0022  0848               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
  9532     0023  000A               	callw
  9533     0024  3180               	pagesel	$
  9534                           
  9535                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  9536     0025  283B               	goto	i1l153
  9537     0026                     i1l146:	
  9538                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  9539                           
  9540     0026  0021               	movlb	1	; select bank1
  9541     0027  1E91               	btfss	17,5	;volatile
  9542     0028  2833               	goto	i1l148
  9543     0029  0020               	movlb	0	; select bank0
  9544     002A  1E91               	btfss	17,5	;volatile
  9545     002B  2833               	goto	i1l148
  9546                           
  9547                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             EUSART_RxDefaultInterruptHandler();
  9548     002C  0022               	movlb	2	; select bank2
  9549     002D  0847               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
  9550     002E  008A               	movwf	10
  9551     002F  0846               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
  9552     0030  000A               	callw
  9553     0031  3180               	pagesel	$
  9554                           
  9555                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  9556     0032  283B               	goto	i1l153
  9557     0033                     i1l148:	
  9558                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  9559                           
  9560     0033  0021               	movlb	1	; select bank1
  9561     0034  1C91               	btfss	17,1	;volatile
  9562     0035  283B               	goto	i1l153
  9563     0036  0020               	movlb	0	; select bank0
  9564     0037  1C91               	btfss	17,1	;volatile
  9565     0038  283B               	goto	i1l153
  9566                           
  9567                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             TMR2_ISR();
  9568     0039  319F  273D         	fcall	_TMR2_ISR
  9569     003B                     i1l153:	
  9570                           ;mcc_generated_files/interrupt_manager.c: 76:         }
  9571                           
  9572     003B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9573     003C  0009               	retfie
  9574     003D                     __end_of_INTERRUPT_InterruptManager:
  9575                           
  9576                           	psect	text48
  9577     06EB                     __ptext48:	
  9578 ;; *************** function _USBDeviceTasks *****************
  9579 ;; Defined at:
  9580 ;;		line 481 in file "usb/usb_device.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  i               1   16[BANK0 ] unsigned char 
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 1F/0
  9591 ;;		On exit  : 1F/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;Total ram usage:        2 bytes
  9599 ;; Hardware stack levels used: 1
  9600 ;; Hardware stack levels required when called: 8
  9601 ;; This function calls:
  9602 ;;		_USBCtrlEPAllowStatusStage
  9603 ;;		_USBCtrlEPService
  9604 ;;		_USBIncrement1msInternalTimers
  9605 ;;		_USBStallHandler
  9606 ;;		_USBSuspend
  9607 ;;		_USBWakeFromSuspend
  9608 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
  9609 ;;		i1_USBDeviceInit
  9610 ;; This function is called by:
  9611 ;;		_INTERRUPT_InterruptManager
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615     06EB                     _USBDeviceTasks:	
  9616                           ;psect for function _USBDeviceTasks
  9617                           
  9618                           
  9619                           ;usb/usb_device.c: 483:     uint8_t i;;usb/usb_device.c: 594:     if(USBDeviceState == A
      +                          TTACHED_STATE)
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _USBDeviceTasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9623     06EB  036C               	decf	_USBDeviceState,w
  9624     06EC  1D03               	btfss	3,2
  9625     06ED  2EF7               	goto	i1l5472
  9626                           
  9627                           ;usb/usb_device.c: 595:     {;usb/usb_device.c: 605:         if(!UCONbits.SE0)
  9628     06EE  003D               	movlb	29	; select bank29
  9629     06EF  1A8E               	btfsc	14,5	;volatile
  9630     06F0  2EF7               	goto	i1l5472
  9631                           
  9632                           ;usb/usb_device.c: 606:         {;usb/usb_device.c: 612:                 {UIR = 0;};
  9633     06F1  0190               	clrf	16	;volatile
  9634                           
  9635                           ;usb/usb_device.c: 618:             UIEbits.URSTIE = 1;
  9636     06F2  1412               	bsf	18,0	;volatile
  9637                           
  9638                           ;usb/usb_device.c: 619:             UIEbits.IDLEIE = 1;
  9639     06F3  1612               	bsf	18,4	;volatile
  9640                           
  9641                           ;usb/usb_device.c: 620:             USBDeviceState = POWERED_STATE;
  9642     06F4  3002               	movlw	2
  9643     06F5  0020               	movlb	0	; select bank0
  9644     06F6  00EC               	movwf	_USBDeviceState	;volatile
  9645     06F7                     i1l5472:
  9646                           
  9647                           ;usb/usb_device.c: 638:     if(UIRbits.ACTVIF && UIEbits.ACTVIE)
  9648     06F7  003D               	movlb	29	; select bank29
  9649     06F8  1910               	btfsc	16,2	;volatile
  9650     06F9  1D12               	btfss	18,2	;volatile
  9651     06FA  2F04               	goto	i1l5480
  9652                           
  9653                           ;usb/usb_device.c: 639:     {;usb/usb_device.c: 640:         (UIR &= 0xFB);
  9654     06FB  30FB               	movlw	251
  9655     06FC  0020               	movlb	0	; select bank0
  9656     06FD  00DF               	movwf	??_USBDeviceTasks
  9657     06FE  085F               	movf	??_USBDeviceTasks,w
  9658     06FF  003D               	movlb	29	; select bank29
  9659     0700  0590               	andwf	16,f	;volatile
  9660                           
  9661                           ;usb/usb_device.c: 644:             USBWakeFromSuspend();
  9662     0701  3191  21E9  3186   	fcall	_USBWakeFromSuspend
  9663     0704                     i1l5480:
  9664                           
  9665                           ;usb/usb_device.c: 651:     if(UCONbits.SUSPND==1)
  9666     0704  003D               	movlb	29	; select bank29
  9667     0705  1C8E               	btfss	14,1	;volatile
  9668     0706  2F0A               	goto	i1l492
  9669                           
  9670                           ;usb/usb_device.c: 652:     {;usb/usb_device.c: 653:         PIR2bits.USBIF = 0;;
  9671     0707  0020               	movlb	0	; select bank0
  9672     0708  1112               	bcf	18,2	;volatile
  9673                           
  9674                           ;usb/usb_device.c: 654:         return;
  9675     0709  0008               	return
  9676     070A                     i1l492:	
  9677                           ;usb/usb_device.c: 655:     }
  9678                           
  9679                           
  9680                           ;usb/usb_device.c: 667:     if(UIRbits.URSTIF && UIEbits.URSTIE)
  9681     070A  1810               	btfsc	16,0	;volatile
  9682     070B  1C12               	btfss	18,0	;volatile
  9683     070C  2F1A               	goto	i1l5494
  9684                           
  9685                           ;usb/usb_device.c: 668:     {;usb/usb_device.c: 669:         USBDeviceInit();
  9686     070D  318D  25FE  3186   	fcall	i1_USBDeviceInit
  9687                           
  9688                           ;usb/usb_device.c: 673:         {PIE2bits.USBIE = 1;};
  9689     0710  0021               	movlb	1	; select bank1
  9690     0711  1512               	bsf	18,2	;volatile
  9691                           
  9692                           ;usb/usb_device.c: 675:         USBDeviceState = DEFAULT_STATE;
  9693     0712  3004               	movlw	4
  9694     0713  0020               	movlb	0	; select bank0
  9695     0714  00EC               	movwf	_USBDeviceState	;volatile
  9696                           
  9697                           ;usb/usb_device.c: 685:         (UIR &= 0xFE);
  9698     0715  30FE               	movlw	254
  9699     0716  00DF               	movwf	??_USBDeviceTasks
  9700     0717  085F               	movf	??_USBDeviceTasks,w
  9701     0718  003D               	movlb	29	; select bank29
  9702     0719  0590               	andwf	16,f	;volatile
  9703     071A                     i1l5494:
  9704                           
  9705                           ;usb/usb_device.c: 691:     if(UIRbits.IDLEIF && UIEbits.IDLEIE)
  9706     071A  1A10               	btfsc	16,4	;volatile
  9707     071B  1E12               	btfss	18,4	;volatile
  9708     071C  2F20               	goto	i1l5500
  9709                           
  9710                           ;usb/usb_device.c: 692:     {;usb/usb_device.c: 698:             USBSuspend();
  9711     071D  3190  20FA  3186   	fcall	_USBSuspend
  9712     0720                     i1l5500:
  9713                           
  9714                           ;usb/usb_device.c: 712:     if(UIRbits.SOFIF)
  9715     0720  003D               	movlb	29	; select bank29
  9716     0721  1F10               	btfss	16,6	;volatile
  9717     0722  2F48               	goto	i1l5516
  9718                           
  9719                           ;usb/usb_device.c: 713:     {;usb/usb_device.c: 715:         if(UIEbits.SOFIE)
  9720     0723  1F12               	btfss	18,6	;volatile
  9721     0724  2F34               	goto	i1l5506
  9722                           
  9723                           ;usb/usb_device.c: 716:         {;usb/usb_device.c: 717:             USER_USB_CALLBACK_E
      +                          VENT_HANDLER((USB_EVENT)EVENT_SOF,0,1);
  9724     0725  3073               	movlw	115
  9725     0726  0020               	movlb	0	; select bank0
  9726     0727  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9727     0728  3000               	movlw	0
  9728     0729  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9729     072A  3000               	movlw	0
  9730     072B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9731     072C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9732     072D  3001               	movlw	1
  9733     072E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9734     072F  3000               	movlw	0
  9735     0730  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9736     0731  3194  2435  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9737     0734                     i1l5506:
  9738                           
  9739                           ;usb/usb_device.c: 719:         (UIR &= 0xBF);
  9740     0734  30BF               	movlw	191
  9741     0735  0020               	movlb	0	; select bank0
  9742     0736  00DF               	movwf	??_USBDeviceTasks
  9743     0737  085F               	movf	??_USBDeviceTasks,w
  9744     0738  003D               	movlb	29	; select bank29
  9745     0739  0590               	andwf	16,f	;volatile
  9746                           
  9747                           ;usb/usb_device.c: 722:             USBIncrement1msInternalTimers();
  9748     073A  3188  2000  3186   	fcall	_USBIncrement1msInternalTimers
  9749                           
  9750                           ;usb/usb_device.c: 739:             if(USBStatusStageTimeoutCounter != 0u)
  9751     073D  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w
  9752     073E  1903               	btfsc	3,2
  9753     073F  2F42               	goto	i1l498
  9754                           
  9755                           ;usb/usb_device.c: 740:             {;usb/usb_device.c: 741:                 USBStatusSt
      +                          ageTimeoutCounter--;
  9756     0740  3001               	movlw	1
  9757     0741  02DA               	subwf	_USBStatusStageTimeoutCounter^(0+256),f	;volatile
  9758     0742                     i1l498:	
  9759                           ;usb/usb_device.c: 742:             }
  9760                           
  9761                           
  9762                           ;usb/usb_device.c: 748:             if(USBStatusStageTimeoutCounter == 0)
  9763     0742  085A               	movf	_USBStatusStageTimeoutCounter^(0+256),w	;volatile
  9764     0743  1D03               	btfss	3,2
  9765     0744  2F48               	goto	i1l5516
  9766                           
  9767                           ;usb/usb_device.c: 749:             {;usb/usb_device.c: 750:                 USBCtrlEPAl
      +                          lowStatusStage();
  9768     0745  318A  228C  3186   	fcall	_USBCtrlEPAllowStatusStage
  9769     0748                     i1l5516:
  9770                           
  9771                           ;usb/usb_device.c: 755:     if(UIRbits.STALLIF && UIEbits.STALLIE)
  9772     0748  003D               	movlb	29	; select bank29
  9773     0749  1A90               	btfsc	16,5	;volatile
  9774     074A  1E92               	btfss	18,5	;volatile
  9775     074B  2F4F               	goto	i1l5522
  9776                           
  9777                           ;usb/usb_device.c: 756:     {;usb/usb_device.c: 757:         USBStallHandler();
  9778     074C  3192  22A4  3186   	fcall	_USBStallHandler
  9779     074F                     i1l5522:
  9780                           
  9781                           ;usb/usb_device.c: 760:     if(UIRbits.UERRIF && UIEbits.UERRIE)
  9782     074F  1890               	btfsc	16,1	;volatile
  9783     0750  1C92               	btfss	18,1	;volatile
  9784     0751  2F63               	goto	i1l5530
  9785                           
  9786                           ;usb/usb_device.c: 761:     {;usb/usb_device.c: 762:         USER_USB_CALLBACK_EVENT_HAN
      +                          DLER((USB_EVENT)EVENT_BUS_ERROR,0,1);
  9787     0752  30FF               	movlw	255
  9788     0753  0020               	movlb	0	; select bank0
  9789     0754  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9790     0755  307F               	movlw	127
  9791     0756  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9792     0757  3000               	movlw	0
  9793     0758  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9794     0759  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9795     075A  3001               	movlw	1
  9796     075B  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9797     075C  3000               	movlw	0
  9798     075D  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9799     075E  3194  2435  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9800                           
  9801                           ;usb/usb_device.c: 763:         {UEIR = 0;};
  9802     0761  003D               	movlb	29	; select bank29
  9803     0762  0193               	clrf	19	;volatile
  9804     0763                     i1l5530:
  9805                           
  9806                           ;usb/usb_device.c: 778:     if(USBDeviceState < DEFAULT_STATE)
  9807     0763  3004               	movlw	4
  9808     0764  0020               	movlb	0	; select bank0
  9809     0765  026C               	subwf	_USBDeviceState,w
  9810     0766  1803               	skipnc
  9811     0767  2F6A               	goto	i1l502
  9812                           
  9813                           ;usb/usb_device.c: 779:     {;usb/usb_device.c: 780:         PIR2bits.USBIF = 0;;
  9814     0768  1112               	bcf	18,2	;volatile
  9815                           
  9816                           ;usb/usb_device.c: 781:         return;
  9817     0769  0008               	return
  9818     076A                     i1l502:	
  9819                           ;usb/usb_device.c: 782:     }
  9820                           
  9821                           
  9822                           ;usb/usb_device.c: 787:     if(UIEbits.TRNIE)
  9823     076A  003D               	movlb	29	; select bank29
  9824     076B  1D92               	btfss	18,3	;volatile
  9825     076C  2FBB               	goto	i1l503
  9826                           
  9827                           ;usb/usb_device.c: 788:     {;usb/usb_device.c: 789:         for(i = 0; i < 4u; i++)
  9828     076D  0020               	movlb	0	; select bank0
  9829     076E  01E0               	clrf	USBDeviceTasks@i
  9830     076F  2FB8               	goto	i1l504
  9831     0770                     i1l5540:
  9832                           
  9833                           ;usb/usb_device.c: 792:             {;usb/usb_device.c: 794:                 USTATcopy.V
      +                          al = USTAT;
  9834     0770  080F               	movf	15,w	;volatile
  9835     0771  0020               	movlb	0	; select bank0
  9836     0772  00ED               	movwf	_USTATcopy	;volatile
  9837                           
  9838                           ;usb/usb_device.c: 795:                 endpoint_number = USTATcopy.endpoint_number;
  9839     0773  0C6D               	rrf	_USTATcopy,w	;volatile
  9840     0774  00DF               	movwf	??_USBDeviceTasks
  9841     0775  0CDF               	rrf	??_USBDeviceTasks,f
  9842     0776  0C5F               	rrf	??_USBDeviceTasks,w
  9843     0777  390F               	andlw	15
  9844     0778  0022               	movlb	2	; select bank2
  9845     0779  00DC               	movwf	_endpoint_number^(0+256)	;volatile
  9846                           
  9847                           ;usb/usb_device.c: 797:                 (UIR &= 0xF7);
  9848     077A  30F7               	movlw	247
  9849     077B  0020               	movlb	0	; select bank0
  9850     077C  00DF               	movwf	??_USBDeviceTasks
  9851     077D  085F               	movf	??_USBDeviceTasks,w
  9852     077E  003D               	movlb	29	; select bank29
  9853     077F  0590               	andwf	16,f	;volatile
  9854                           
  9855                           ;usb/usb_device.c: 802:                 if(USTATcopy.direction == 0)
  9856     0780  0020               	movlb	0	; select bank0
  9857     0781  196D               	btfsc	_USTATcopy,2	;volatile
  9858     0782  2F87               	goto	i1l5550
  9859                           
  9860                           ;usb/usb_device.c: 803:                 {;usb/usb_device.c: 804:                     ep_
      +                          data_out[endpoint_number].bits.ping_pong_state ^= 1;
  9861     0783  0022               	movlb	2	; select bank2
  9862     0784  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9863     0785  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
  9864     0786  2F8A               	goto	L7
  9865     0787                     i1l5550:	
  9866                           ;usb/usb_device.c: 805:                 }
  9867                           
  9868                           
  9869                           ;usb/usb_device.c: 807:                 {;usb/usb_device.c: 808:                     ep_
      +                          data_in[endpoint_number].bits.ping_pong_state ^= 1;
  9870     0787  0022               	movlb	2	; select bank2
  9871     0788  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9872     0789  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
  9873     078A                     L7:
  9874     078A  0086               	movwf	6
  9875     078B  3001               	movlw	1	; select bank2/3
  9876     078C  0087               	movwf	7
  9877     078D  0801               	movf	1,w
  9878     078E  3901               	andlw	1
  9879     078F  0020               	movlb	0	; select bank0
  9880     0790  00DF               	movwf	??_USBDeviceTasks
  9881     0791  3001               	movlw	1
  9882     0792  06DF               	xorwf	??_USBDeviceTasks,f
  9883     0793  0801               	movf	1,w
  9884     0794  065F               	xorwf	??_USBDeviceTasks,w
  9885     0795  39FE               	andlw	-2
  9886     0796  065F               	xorwf	??_USBDeviceTasks,w
  9887     0797  0081               	movwf	1
  9888                           
  9889                           ;usb/usb_device.c: 814:                 if(endpoint_number == 0)
  9890     0798  0022               	movlb	2	; select bank2
  9891     0799  085C               	movf	_endpoint_number^(0+256),w	;volatile
  9892     079A  1D03               	btfss	3,2
  9893     079B  2FA0               	goto	i1l5556
  9894                           
  9895                           ;usb/usb_device.c: 815:                 {;usb/usb_device.c: 816:                     USB
      +                          CtrlEPService();
  9896     079C  3195  253B  3186   	fcall	_USBCtrlEPService
  9897                           
  9898                           ;usb/usb_device.c: 817:                 }
  9899     079F  2FAF               	goto	i1l5558
  9900     07A0                     i1l5556:
  9901                           
  9902                           ;usb/usb_device.c: 819:                 {;usb/usb_device.c: 820:                     USE
      +                          R_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_TRANSFER,(uint8_t*)&USTATcopy.Val,0);
  9903     07A0  3072               	movlw	114
  9904     07A1  0020               	movlb	0	; select bank0
  9905     07A2  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
  9906     07A3  3000               	movlw	0
  9907     07A4  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
  9908     07A5  306D               	movlw	low _USTATcopy
  9909     07A6  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
  9910     07A7  3000               	movlw	high _USTATcopy
  9911     07A8  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
  9912     07A9  3000               	movlw	0
  9913     07AA  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
  9914     07AB  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
  9915     07AC  3194  2435  3186   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
  9916     07AF                     i1l5558:
  9917                           
  9918                           ;usb/usb_device.c: 827:         }
  9919     07AF  3001               	movlw	1
  9920     07B0  0020               	movlb	0	; select bank0
  9921     07B1  00DF               	movwf	??_USBDeviceTasks
  9922     07B2  085F               	movf	??_USBDeviceTasks,w
  9923     07B3  07E0               	addwf	USBDeviceTasks@i,f
  9924     07B4  3004               	movlw	4
  9925     07B5  0260               	subwf	USBDeviceTasks@i,w
  9926     07B6  1803               	btfsc	3,0
  9927     07B7  2FBB               	goto	i1l503
  9928     07B8                     i1l504:
  9929                           
  9930                           ;usb/usb_device.c: 790:         {;usb/usb_device.c: 791:             if(UIRbits.TRNIF)
  9931     07B8  003D               	movlb	29	; select bank29
  9932     07B9  1990               	btfsc	16,3	;volatile
  9933     07BA  2F70               	goto	i1l5540
  9934     07BB                     i1l503:	
  9935                           ;usb/usb_device.c: 828:     }
  9936                           
  9937                           
  9938                           ;usb/usb_device.c: 830:     PIR2bits.USBIF = 0;;
  9939     07BB  0020               	movlb	0	; select bank0
  9940     07BC  1112               	bcf	18,2	;volatile
  9941     07BD  0008               	return
  9942     07BE                     __end_of_USBDeviceTasks:
  9943                           
  9944                           	psect	text49
  9945     0DFE                     __ptext49:	
  9946 ;; *************** function i1_USBDeviceInit *****************
  9947 ;; Defined at:
  9948 ;;		line 281 in file "usb/usb_device.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;		None
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  p               2    4[COMMON] PTR unsigned char 
  9953 ;;		 -> UEP1(1), 
  9954 ;;  i               1    7[COMMON] unsigned char 
  9955 ;;  i               1    6[COMMON] unsigned char 
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  1    wreg      void 
  9958 ;; Registers used:
  9959 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9960 ;; Tracked objects:
  9961 ;;		On entry : 1F/1D
  9962 ;;		On exit  : 1F/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        8 bytes
  9970 ;; Hardware stack levels used: 1
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_USBDeviceTasks
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978     0DFE                     i1_USBDeviceInit:	
  9979                           ;psect for function i1_USBDeviceInit
  9980                           
  9981                           
  9982                           ;usb/usb_device.c: 283:     uint8_t i;;usb/usb_device.c: 285:     {PIE2bits.USBIE = 0;};
  9983                           
  9984                           ;incstack = 0
  9985                           ; Regs used in i1_USBDeviceInit: [wreg+fsr1l+fsr1h+status,2+status,0]
  9986     0DFE  0021               	movlb	1	; select bank1
  9987     0DFF  1112               	bcf	18,2	;volatile
  9988                           
  9989                           ;usb/usb_device.c: 292:     {UEIR = 0;};
  9990     0E00  003D               	movlb	29	; select bank29
  9991     0E01  0193               	clrf	19	;volatile
  9992                           
  9993                           ;usb/usb_device.c: 295:     {UIR = 0;};
  9994     0E02  0190               	clrf	16	;volatile
  9995                           
  9996                           ;usb/usb_device.c: 298:     UEP0 = 0;
  9997     0E03  0198               	clrf	24	;volatile
  9998                           
  9999                           ;usb/usb_device.c: 300:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++) 
      +                          *p++ = 0; };
 10000     0E04  300E               	movlw	14
 10001     0E05  00F5               	movwf	i1USBDeviceInit@p+1
 10002     0E06  3099               	movlw	153
 10003     0E07  00F4               	movwf	i1USBDeviceInit@p
 10004     0E08  01F6               	clrf	i1USBDeviceInit@i_1369
 10005     0E09                     i1l5370:
 10006     0E09  0874               	movf	i1USBDeviceInit@p,w
 10007     0E0A  0086               	movwf	6
 10008     0E0B  0875               	movf	i1USBDeviceInit@p+1,w
 10009     0E0C  0087               	movwf	7
 10010     0E0D  0181               	clrf	1
 10011     0E0E  3001               	movlw	1
 10012     0E0F  07F4               	addwf	i1USBDeviceInit@p,f
 10013     0E10  3000               	movlw	0
 10014     0E11  3DF5               	addwfc	i1USBDeviceInit@p+1,f
 10015     0E12  3001               	movlw	1
 10016     0E13  00F0               	movwf	??i1_USBDeviceInit
 10017     0E14  0870               	movf	??i1_USBDeviceInit,w
 10018     0E15  07F6               	addwf	i1USBDeviceInit@i_1369,f
 10019     0E16  0876               	movf	i1USBDeviceInit@i_1369,w
 10020     0E17  1903               	btfsc	3,2
 10021     0E18  2E09               	goto	i1l5370
 10022                           
 10023                           ;usb/usb_device.c: 302:     { UCFG = 0x10 | 0x00 | 0x04 | 0x02; UEIE = 0x9F; UIE = 0x39 
      +                          | 0x40 | 0x02; };
 10024     0E19  3016               	movlw	22
 10025     0E1A  0091               	movwf	17	;volatile
 10026     0E1B  309F               	movlw	159
 10027     0E1C  0097               	movwf	23	;volatile
 10028     0E1D  307B               	movlw	123
 10029     0E1E  0092               	movwf	18	;volatile
 10030                           
 10031                           ;usb/usb_device.c: 311:     for(i = 0; i < (sizeof(BDT)/sizeof(BDT_ENTRY)); i++)
 10032     0E1F  01F7               	clrf	i1USBDeviceInit@i
 10033     0E20                     i1l5386:
 10034                           
 10035                           ;usb/usb_device.c: 312:     {;usb/usb_device.c: 313:         BDT[i].Val = 0x00;
 10036     0E20  0877               	movf	i1USBDeviceInit@i,w
 10037     0E21  00F0               	movwf	??i1_USBDeviceInit
 10038     0E22  3001               	movlw	1
 10039     0E23                     u492_25:
 10040     0E23  35F0               	lslf	??i1_USBDeviceInit,f
 10041     0E24  3EFF               	addlw	-1
 10042     0E25  1D03               	skipz
 10043     0E26  2E23               	goto	u492_25
 10044     0E27  3570               	lslf	??i1_USBDeviceInit,w
 10045     0E28  3E20               	addlw	32
 10046     0E29  0086               	movwf	6
 10047     0E2A  0187               	clrf	7
 10048     0E2B  3000               	movlw	0
 10049     0E2C  3FC0               	movwi [0]fsr1
 10050     0E2D  3000               	movlw	0
 10051     0E2E  3FC1               	movwi [1]fsr1
 10052     0E2F  3FC2               	movwi [2]fsr1
 10053     0E30  3FC3               	movwi [3]fsr1
 10054                           
 10055                           ;usb/usb_device.c: 314:     }
 10056     0E31  3001               	movlw	1
 10057     0E32  00F0               	movwf	??i1_USBDeviceInit
 10058     0E33  0870               	movf	??i1_USBDeviceInit,w
 10059     0E34  07F7               	addwf	i1USBDeviceInit@i,f
 10060     0E35  3008               	movlw	8
 10061     0E36  0277               	subwf	i1USBDeviceInit@i,w
 10062     0E37  1C03               	skipc
 10063     0E38  2E20               	goto	i1l5386
 10064                           
 10065                           ;usb/usb_device.c: 317:     UCONbits.PPBRST = 1;
 10066     0E39  170E               	bsf	14,6	;volatile
 10067                           
 10068                           ;usb/usb_device.c: 320:     UADDR = 0x00;
 10069     0E3A  0196               	clrf	22	;volatile
 10070                           
 10071                           ;usb/usb_device.c: 323:     UCONbits.PKTDIS = 0;
 10072     0E3B  120E               	bcf	14,4	;volatile
 10073                           
 10074                           ;usb/usb_device.c: 326:     UCONbits.PPBRST = 0;
 10075     0E3C  130E               	bcf	14,6	;volatile
 10076     0E3D                     i1l5398:
 10077                           
 10078                           ;usb/usb_device.c: 330:     {;usb/usb_device.c: 331:         (UIR &= 0xF7);
 10079     0E3D  30F7               	movlw	247
 10080     0E3E  00F0               	movwf	??i1_USBDeviceInit
 10081     0E3F  0870               	movf	??i1_USBDeviceInit,w
 10082     0E40  0590               	andwf	16,f	;volatile
 10083                           
 10084                           ;usb/usb_device.c: 333:         inPipes[0].info.Val = 0;
 10085     0E41  0021               	movlb	1	; select bank1
 10086     0E42  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 10087                           
 10088                           ;usb/usb_device.c: 334:         outPipes[0].info.Val = 0;
 10089     0E43  0022               	movlb	2	; select bank2
 10090     0E44  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10091                           
 10092                           ;usb/usb_device.c: 335:         outPipes[0].wCount.Val = 0;
 10093     0E45  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10094     0E46  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10095                           
 10096                           ;usb/usb_device.c: 336:     }while(UIRbits.TRNIF == 1);
 10097     0E47  003D               	movlb	29	; select bank29
 10098     0E48  1990               	btfsc	16,3	;volatile
 10099     0E49  2E3D               	goto	i1l5398
 10100                           
 10101                           ;usb/usb_device.c: 340:     USBStatusStageEnabledFlag1 = 1;
 10102     0E4A  3001               	movlw	1
 10103     0E4B  0022               	movlb	2	; select bank2
 10104     0E4C  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10105                           
 10106                           ;usb/usb_device.c: 341:     USBStatusStageEnabledFlag2 = 1;
 10107     0E4D  3001               	movlw	1
 10108     0E4E  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10109                           
 10110                           ;usb/usb_device.c: 343:     USBDeferINDataStagePackets = 0;
 10111     0E4F  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10112                           
 10113                           ;usb/usb_device.c: 344:     USBDeferOUTDataStagePackets = 0;
 10114     0E50  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10115                           
 10116                           ;usb/usb_device.c: 345:     USBBusIsSuspended = 0;
 10117     0E51  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10118                           
 10119                           ;usb/usb_device.c: 349:     for(i = 0; i < (uint8_t)(1 +1u); i++)
 10120     0E52  01F7               	clrf	i1USBDeviceInit@i
 10121     0E53                     i1l5420:
 10122                           
 10123                           ;usb/usb_device.c: 350:     {;usb/usb_device.c: 351:         pBDTEntryIn[i] = 0u;
 10124     0E53  3577               	lslf	i1USBDeviceInit@i,w
 10125     0E54  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 10126     0E55  0086               	movwf	6
 10127     0E56  0187               	clrf	7
 10128     0E57  3000               	movlw	0
 10129     0E58  3FC0               	movwi [0]fsr1
 10130     0E59  3FC1               	movwi [1]fsr1
 10131                           
 10132                           ;usb/usb_device.c: 352:         pBDTEntryOut[i] = 0u;
 10133     0E5A  3577               	lslf	i1USBDeviceInit@i,w
 10134     0E5B  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 10135     0E5C  0086               	movwf	6
 10136     0E5D  3001               	movlw	1	; select bank2/3
 10137     0E5E  0087               	movwf	7
 10138     0E5F  3000               	movlw	0
 10139     0E60  3FC0               	movwi [0]fsr1
 10140     0E61  3FC1               	movwi [1]fsr1
 10141                           
 10142                           ;usb/usb_device.c: 353:         ep_data_in[i].Val = 0u;
 10143     0E62  0877               	movf	i1USBDeviceInit@i,w
 10144     0E63  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 10145     0E64  0086               	movwf	6
 10146     0E65  3001               	movlw	1	; select bank2/3
 10147     0E66  0087               	movwf	7
 10148     0E67  0181               	clrf	1
 10149                           
 10150                           ;usb/usb_device.c: 354:         ep_data_out[i].Val = 0u;
 10151     0E68  0877               	movf	i1USBDeviceInit@i,w
 10152     0E69  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 10153     0E6A  0086               	movwf	6
 10154     0E6B  3001               	movlw	1	; select bank2/3
 10155     0E6C  0087               	movwf	7
 10156     0E6D  0181               	clrf	1
 10157                           
 10158                           ;usb/usb_device.c: 355:     }
 10159     0E6E  3001               	movlw	1
 10160     0E6F  00F0               	movwf	??i1_USBDeviceInit
 10161     0E70  0870               	movf	??i1_USBDeviceInit,w
 10162     0E71  07F7               	addwf	i1USBDeviceInit@i,f
 10163     0E72  3002               	movlw	2
 10164     0E73  0277               	subwf	i1USBDeviceInit@i,w
 10165     0E74  1C03               	skipc
 10166     0E75  2E53               	goto	i1l5420
 10167                           
 10168                           ;usb/usb_device.c: 358:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 10169     0E76  3028               	movlw	40
 10170     0E77  0020               	movlb	0	; select bank0
 10171     0E78  00E1               	movwf	_pBDTEntryIn
 10172     0E79  3000               	movlw	0
 10173     0E7A  00E2               	movwf	_pBDTEntryIn+1
 10174                           
 10175                           ;usb/usb_device.c: 360:     UEP0 = 0x06|0x10;
 10176     0E7B  3016               	movlw	22
 10177     0E7C  003D               	movlb	29	; select bank29
 10178     0E7D  0098               	movwf	24	;volatile
 10179                           
 10180                           ;usb/usb_device.c: 362:     BDT[0].ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF);
 10181     0E7E  3040               	movlw	64
 10182     0E7F  00F0               	movwf	??i1_USBDeviceInit
 10183     0E80  3000               	movlw	0
 10184     0E81  00F1               	movwf	??i1_USBDeviceInit+1
 10185     0E82  30FF               	movlw	255
 10186     0E83  0570               	andwf	??i1_USBDeviceInit,w
 10187     0E84  00F2               	movwf	??i1_USBDeviceInit+2
 10188     0E85  307F               	movlw	127
 10189     0E86  0571               	andwf	??i1_USBDeviceInit+1,w
 10190     0E87  00F3               	movwf	??i1_USBDeviceInit+3
 10191     0E88  0872               	movf	??i1_USBDeviceInit+2,w
 10192     0E89  0020               	movlb	0	; select bank0
 10193     0E8A  00A2               	movwf	34	;volatile
 10194     0E8B  0873               	movf	??i1_USBDeviceInit+3,w
 10195     0E8C  00A3               	movwf	35	;volatile
 10196                           
 10197                           ;usb/usb_device.c: 363:     BDT[0].CNT = 8;
 10198     0E8D  3008               	movlw	8
 10199     0E8E  00A1               	movwf	33	;volatile
 10200                           
 10201                           ;usb/usb_device.c: 364:     BDT[0].STAT.Val = 0x00|0x04;
 10202     0E8F  3004               	movlw	4
 10203     0E90  00A0               	movwf	32	;volatile
 10204                           
 10205                           ;usb/usb_device.c: 365:     BDT[0].STAT.Val |= 0x80;
 10206     0E91  17A0               	bsf	32,7	;volatile
 10207                           
 10208                           ;usb/usb_device.c: 368:     USBActiveConfiguration = 0;
 10209     0E92  01EF               	clrf	_USBActiveConfiguration	;volatile
 10210                           
 10211                           ;usb/usb_device.c: 370:     USB1msTickCount = 0;
 10212     0E93  3000               	movlw	0
 10213     0E94  0023               	movlb	3	; select bank3
 10214     0E95  00C3               	movwf	(_USB1msTickCount+3)^(0+384)	;volatile
 10215     0E96  3000               	movlw	0
 10216     0E97  00C2               	movwf	(_USB1msTickCount+2)^(0+384)	;volatile
 10217     0E98  3000               	movlw	0
 10218     0E99  00C1               	movwf	(_USB1msTickCount+1)^(0+384)	;volatile
 10219     0E9A  3000               	movlw	0
 10220     0E9B  00C0               	movwf	_USB1msTickCount^(0+384)	;volatile
 10221                           
 10222                           ;usb/usb_device.c: 371:     USBTicksSinceSuspendEnd = 0;
 10223     0E9C  0022               	movlb	2	; select bank2
 10224     0E9D  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10225                           
 10226                           ;usb/usb_device.c: 374:     USBDeviceState = DETACHED_STATE;
 10227     0E9E  0020               	movlb	0	; select bank0
 10228     0E9F  01EC               	clrf	_USBDeviceState	;volatile
 10229     0EA0  0008               	return
 10230     0EA1                     __end_ofi1_USBDeviceInit:
 10231                           
 10232                           	psect	text50
 10233     11E9                     __ptext50:	
 10234 ;; *************** function _USBWakeFromSuspend *****************
 10235 ;; Defined at:
 10236 ;;		line 2310 in file "usb/usb_device.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;		None
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;		None
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      void 
 10243 ;; Registers used:
 10244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10245 ;; Tracked objects:
 10246 ;;		On entry : 1F/1D
 10247 ;;		On exit  : 1F/2
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;Total ram usage:        1 bytes
 10255 ;; Hardware stack levels used: 1
 10256 ;; Hardware stack levels required when called: 4
 10257 ;; This function calls:
 10258 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10259 ;; This function is called by:
 10260 ;;		_USBDeviceTasks
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264     11E9                     _USBWakeFromSuspend:	
 10265                           ;psect for function _USBWakeFromSuspend
 10266                           
 10267                           
 10268                           ;usb/usb_device.c: 2312:     USBBusIsSuspended = 0;
 10269                           
 10270                           ;incstack = 0
 10271                           ; Regs used in _USBWakeFromSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10272     11E9  0022               	movlb	2	; select bank2
 10273     11EA  01DD               	clrf	_USBBusIsSuspended^(0+256)	;volatile
 10274                           
 10275                           ;usb/usb_device.c: 2318:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_RESUME,0,0
      +                          );
 10276     11EB  3074               	movlw	116
 10277     11EC  0020               	movlb	0	; select bank0
 10278     11ED  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10279     11EE  3000               	movlw	0
 10280     11EF  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10281     11F0  3000               	movlw	0
 10282     11F1  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10283     11F2  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10284     11F3  3000               	movlw	0
 10285     11F4  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10286     11F5  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10287     11F6  3194  2435  3191   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10288                           
 10289                           ;usb/usb_device.c: 2325:         UCONbits.SUSPND = 0;
 10290     11F9  003D               	movlb	29	; select bank29
 10291     11FA  108E               	bcf	14,1	;volatile
 10292                           
 10293                           ;usb/usb_device.c: 2330:     UIEbits.ACTVIE = 0;
 10294     11FB  1112               	bcf	18,2	;volatile
 10295     11FC                     i1l5140:	
 10296                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10297                           
 10298                           
 10299                           ;usb/usb_device.c: 2348:     while(UIRbits.ACTVIF)
 10300     11FC  1D10               	btfss	16,2	;volatile
 10301     11FD  2A03               	goto	i1l5142
 10302                           
 10303                           ;usb/usb_device.c: 2350:     {;usb/usb_device.c: 2351:         (UIR &= 0xFB);
 10304     11FE  30FB               	movlw	251
 10305     11FF  00FD               	movwf	??_USBWakeFromSuspend
 10306     1200  087D               	movf	??_USBWakeFromSuspend,w
 10307     1201  0590               	andwf	16,f	;volatile
 10308     1202  29FC               	goto	i1l5140
 10309     1203                     i1l5142:
 10310                           
 10311                           ;usb/usb_device.c: 2354:     USBTicksSinceSuspendEnd = 0;
 10312     1203  0022               	movlb	2	; select bank2
 10313     1204  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10314     1205  0008               	return
 10315     1206                     __end_of_USBWakeFromSuspend:
 10316                           
 10317                           	psect	text51
 10318     10FA                     __ptext51:	
 10319 ;; *************** function _USBSuspend *****************
 10320 ;; Defined at:
 10321 ;;		line 2252 in file "usb/usb_device.c"
 10322 ;; Parameters:    Size  Location     Type
 10323 ;;		None
 10324 ;; Auto vars:     Size  Location     Type
 10325 ;;		None
 10326 ;; Return value:  Size  Location     Type
 10327 ;;                  1    wreg      void 
 10328 ;; Registers used:
 10329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10330 ;; Tracked objects:
 10331 ;;		On entry : 1F/1D
 10332 ;;		On exit  : 0/0
 10333 ;;		Unchanged: 0/0
 10334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;Total ram usage:        1 bytes
 10340 ;; Hardware stack levels used: 1
 10341 ;; Hardware stack levels required when called: 4
 10342 ;; This function calls:
 10343 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10344 ;; This function is called by:
 10345 ;;		_USBDeviceTasks
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349     10FA                     _USBSuspend:	
 10350                           ;psect for function _USBSuspend
 10351                           
 10352                           
 10353                           ;usb/usb_device.c: 2277:     UIEbits.ACTVIE = 1;
 10354                           
 10355                           ;incstack = 0
 10356                           ; Regs used in _USBSuspend: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10357     10FA  1512               	bsf	18,2	;volatile
 10358                           
 10359                           ;usb/usb_device.c: 2278:     (UIR &= 0xEF);
 10360     10FB  30EF               	movlw	239
 10361     10FC  00FD               	movwf	??_USBSuspend
 10362     10FD  087D               	movf	??_USBSuspend,w
 10363     10FE  0590               	andwf	16,f	;volatile
 10364                           
 10365                           ;usb/usb_device.c: 2281:         UCONbits.SUSPND = 1;
 10366     10FF  148E               	bsf	14,1	;volatile
 10367                           
 10368                           ;usb/usb_device.c: 2284:     USBBusIsSuspended = 1;
 10369     1100  3001               	movlw	1
 10370     1101  0022               	movlb	2	; select bank2
 10371     1102  00DD               	movwf	_USBBusIsSuspended^(0+256)	;volatile
 10372                           
 10373                           ;usb/usb_device.c: 2285:     USBTicksSinceSuspendEnd = 0;
 10374     1103  01D4               	clrf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10375                           
 10376                           ;usb/usb_device.c: 2292:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SUSPEND,0,
      +                          0);
 10377     1104  3075               	movlw	117
 10378     1105  0020               	movlb	0	; select bank0
 10379     1106  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10380     1107  3000               	movlw	0
 10381     1108  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10382     1109  3000               	movlw	0
 10383     110A  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10384     110B  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10385     110C  3000               	movlw	0
 10386     110D  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10387     110E  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10388     110F  3194  2435         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10389     1111  0008               	return
 10390     1112                     __end_of_USBSuspend:
 10391                           
 10392                           	psect	text52
 10393     12A4                     __ptext52:	
 10394 ;; *************** function _USBStallHandler *****************
 10395 ;; Defined at:
 10396 ;;		line 2209 in file "usb/usb_device.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;		None
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;		None
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10405 ;; Tracked objects:
 10406 ;;		On entry : 1F/1D
 10407 ;;		On exit  : 1F/1D
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;Total ram usage:        1 bytes
 10415 ;; Hardware stack levels used: 1
 10416 ;; This function calls:
 10417 ;;		Nothing
 10418 ;; This function is called by:
 10419 ;;		_USBDeviceTasks
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423     12A4                     _USBStallHandler:	
 10424                           ;psect for function _USBStallHandler
 10425                           
 10426                           
 10427                           ;usb/usb_device.c: 2221:     if(UEP0bits.EPSTALL == 1)
 10428                           
 10429                           ;incstack = 0
 10430                           ; Regs used in _USBStallHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 10431     12A4  1C18               	btfss	24,0	;volatile
 10432     12A5  2AC1               	goto	i1l5174
 10433                           
 10434                           ;usb/usb_device.c: 2222:     {;usb/usb_device.c: 2224:         if((pBDTEntryEP0OutCurren
      +                          t->STAT.Val == 0x80) && (pBDTEntryIn[0]->STAT.Val == (0x80|0x04)))
 10435     12A6  0020               	movlb	0	; select bank0
 10436     12A7  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10437     12A8  0086               	movwf	6
 10438     12A9  0187               	clrf	7
 10439     12AA  3080               	movlw	128
 10440     12AB  0601               	xorwf	1,w
 10441     12AC  1D03               	btfss	3,2
 10442     12AD  2ABF               	goto	i1l5172
 10443     12AE  0861               	movf	_pBDTEntryIn,w
 10444     12AF  0086               	movwf	6
 10445     12B0  0862               	movf	_pBDTEntryIn+1,w
 10446     12B1  0087               	movwf	7
 10447     12B2  3084               	movlw	132
 10448     12B3  0601               	xorwf	1,w
 10449     12B4  1D03               	btfss	3,2
 10450     12B5  2ABF               	goto	i1l5172
 10451                           
 10452                           ;usb/usb_device.c: 2225:         {;usb/usb_device.c: 2227:             pBDTEntryEP0OutCu
      +                          rrent->STAT.Val = 0x00|(0x08 & 0x08)|0x04;
 10453     12B6  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10454     12B7  0086               	movwf	6
 10455     12B8  0187               	clrf	7
 10456     12B9  300C               	movlw	12
 10457     12BA  0081               	movwf	1
 10458                           
 10459                           ;usb/usb_device.c: 2228:             pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 10460     12BB  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10461     12BC  0086               	movwf	6
 10462     12BD  0187               	clrf	7
 10463     12BE  1781               	bsf	1,7
 10464     12BF                     i1l5172:
 10465                           
 10466                           ;usb/usb_device.c: 2230:         UEP0bits.EPSTALL = 0;
 10467     12BF  003D               	movlb	29	; select bank29
 10468     12C0  1018               	bcf	24,0	;volatile
 10469     12C1                     i1l5174:
 10470                           
 10471                           ;usb/usb_device.c: 2233:     (UIR &= 0xDF);
 10472     12C1  30DF               	movlw	223
 10473     12C2  00F0               	movwf	??_USBStallHandler
 10474     12C3  0870               	movf	??_USBStallHandler,w
 10475     12C4  0590               	andwf	16,f	;volatile
 10476     12C5  0008               	return
 10477     12C6                     __end_of_USBStallHandler:
 10478                           
 10479                           	psect	text53
 10480     0800                     __ptext53:	
 10481 ;; *************** function _USBIncrement1msInternalTimers *****************
 10482 ;; Defined at:
 10483 ;;		line 2998 in file "usb/usb_device.c"
 10484 ;; Parameters:    Size  Location     Type
 10485 ;;		None
 10486 ;; Auto vars:     Size  Location     Type
 10487 ;;		None
 10488 ;; Return value:  Size  Location     Type
 10489 ;;                  1    wreg      void 
 10490 ;; Registers used:
 10491 ;;		wreg, status,2, status,0
 10492 ;; Tracked objects:
 10493 ;;		On entry : 1F/1D
 10494 ;;		On exit  : 1F/2
 10495 ;;		Unchanged: 0/0
 10496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;Total ram usage:        1 bytes
 10502 ;; Hardware stack levels used: 1
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		_USBDeviceTasks
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510     0800                     _USBIncrement1msInternalTimers:	
 10511                           ;psect for function _USBIncrement1msInternalTimers
 10512                           
 10513                           
 10514                           ;usb/usb_device.c: 3006:     USB1msTickCount++;
 10515                           
 10516                           ;incstack = 0
 10517                           ; Regs used in _USBIncrement1msInternalTimers: [wreg+status,2+status,0]
 10518     0800  3001               	movlw	1
 10519     0801  0023               	movlb	3	; select bank3
 10520     0802  07C0               	addwf	_USB1msTickCount^(0+384),f	;volatile
 10521     0803  3000               	movlw	0
 10522     0804  3DC1               	addwfc	(_USB1msTickCount+1)^(0+384),f	;volatile
 10523     0805  3000               	movlw	0
 10524     0806  3DC2               	addwfc	(_USB1msTickCount+2)^(0+384),f	;volatile
 10525     0807  3000               	movlw	0
 10526     0808  3DC3               	addwfc	(_USB1msTickCount+3)^(0+384),f	;volatile
 10527                           
 10528                           ;usb/usb_device.c: 3007:     if(USBBusIsSuspended == 0)
 10529     0809  0022               	movlb	2	; select bank2
 10530     080A  085D               	movf	_USBBusIsSuspended^(0+256),w	;volatile
 10531     080B  1D03               	btfss	3,2
 10532     080C  0008               	return
 10533                           
 10534                           ;usb/usb_device.c: 3008:     {;usb/usb_device.c: 3009:         USBTicksSinceSuspendEnd++
      +                          ;
 10535     080D  3001               	movlw	1
 10536     080E  00F0               	movwf	??_USBIncrement1msInternalTimers
 10537     080F  0870               	movf	??_USBIncrement1msInternalTimers,w
 10538     0810  07D4               	addwf	_USBTicksSinceSuspendEnd^(0+256),f	;volatile
 10539                           
 10540                           ;usb/usb_device.c: 3011:         if(USBTicksSinceSuspendEnd == 0)
 10541     0811  0854               	movf	_USBTicksSinceSuspendEnd^(0+256),w	;volatile
 10542     0812  1D03               	btfss	3,2
 10543     0813  0008               	return
 10544                           
 10545                           ;usb/usb_device.c: 3012:         {;usb/usb_device.c: 3013:             USBTicksSinceSusp
      +                          endEnd = 255;
 10546     0814  30FF               	movlw	255
 10547     0815  00D4               	movwf	_USBTicksSinceSuspendEnd^(0+256)	;volatile
 10548     0816  0008               	return
 10549     0817                     __end_of_USBIncrement1msInternalTimers:
 10550                           
 10551                           	psect	text54
 10552     153B                     __ptext54:	
 10553 ;; *************** function _USBCtrlEPService *****************
 10554 ;; Defined at:
 10555 ;;		line 2379 in file "usb/usb_device.c"
 10556 ;; Parameters:    Size  Location     Type
 10557 ;;		None
 10558 ;; Auto vars:     Size  Location     Type
 10559 ;;		None
 10560 ;; Return value:  Size  Location     Type
 10561 ;;                  1    wreg      void 
 10562 ;; Registers used:
 10563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10564 ;; Tracked objects:
 10565 ;;		On entry : 1F/2
 10566 ;;		On exit  : 1D/0
 10567 ;;		Unchanged: 0/0
 10568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;Total ram usage:        1 bytes
 10574 ;; Hardware stack levels used: 1
 10575 ;; Hardware stack levels required when called: 7
 10576 ;; This function calls:
 10577 ;;		_USBCtrlTrfInHandler
 10578 ;;		_USBCtrlTrfOutHandler
 10579 ;;		_USBCtrlTrfSetupHandler
 10580 ;;		i1_memcpy
 10581 ;; This function is called by:
 10582 ;;		_USBDeviceTasks
 10583 ;; This function uses a non-reentrant model
 10584 ;;
 10585                           
 10586     153B                     _USBCtrlEPService:	
 10587                           ;psect for function _USBCtrlEPService
 10588                           
 10589                           
 10590                           ;usb/usb_device.c: 2385:         USBStatusStageTimeoutCounter = (uint8_t)45;
 10591                           
 10592                           ;incstack = 0
 10593                           ; Regs used in _USBCtrlEPService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10594     153B  302D               	movlw	45
 10595     153C  00DA               	movwf	_USBStatusStageTimeoutCounter^(0+256)	;volatile
 10596                           
 10597                           ;usb/usb_device.c: 2389:     if((USTATcopy.Val & ~0x02) == 0x00)
 10598     153D  0020               	movlb	0	; select bank0
 10599     153E  086D               	movf	_USTATcopy,w	;volatile
 10600     153F  39FD               	andlw	253
 10601     1540  1D03               	btfss	3,2
 10602     1541  2D78               	goto	i1l5194
 10603                           
 10604                           ;usb/usb_device.c: 2390:     {;usb/usb_device.c: 2393:             pBDTEntryEP0OutCurren
      +                          t = (volatile BDT_ENTRY*)&BDT[(USTATcopy.Val & 0x7E)>>1];
 10605     1542  366D               	lsrf	_USTATcopy,w	;volatile
 10606     1543  393F               	andlw	63
 10607     1544  00DE               	movwf	??_USBCtrlEPService
 10608     1545  3001               	movlw	1
 10609     1546                     u456_25:
 10610     1546  35DE               	lslf	??_USBCtrlEPService,f
 10611     1547  3EFF               	addlw	-1
 10612     1548  1D03               	skipz
 10613     1549  2D46               	goto	u456_25
 10614     154A  355E               	lslf	??_USBCtrlEPService,w
 10615     154B  3E20               	addlw	32
 10616     154C  00EB               	movwf	_pBDTEntryEP0OutCurrent
 10617                           
 10618                           ;usb/usb_device.c: 2401:         pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 10619     154D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10620     154E  00E7               	movwf	_pBDTEntryEP0OutNext
 10621     154F  01E8               	clrf	_pBDTEntryEP0OutNext+1
 10622                           
 10623                           ;usb/usb_device.c: 2403:         pBDTEntryEP0OutNext = (volatile BDT_ENTRY*)(((uint16_t)
      +                          pBDTEntryEP0OutNext) ^ 0x0004);
 10624     1550  3004               	movlw	4
 10625     1551  0667               	xorwf	_pBDTEntryEP0OutNext,w
 10626     1552  00E7               	movwf	_pBDTEntryEP0OutNext
 10627     1553  3000               	movlw	0
 10628     1554  0668               	xorwf	_pBDTEntryEP0OutNext+1,w
 10629     1555  00E8               	movwf	_pBDTEntryEP0OutNext+1
 10630                           
 10631                           ;usb/usb_device.c: 2406:         if(pBDTEntryEP0OutCurrent->STAT.PID == 0xD)
 10632     1556  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10633     1557  0086               	movwf	6
 10634     1558  0187               	clrf	7
 10635     1559  0C01               	rrf	1,w
 10636     155A  0C89               	rrf	9,f
 10637     155B  390F               	andlw	15
 10638     155C  3A0D               	xorlw	13
 10639     155D  1D03               	skipz
 10640     155E  2D75               	goto	i1l5192
 10641                           
 10642                           ;usb/usb_device.c: 2407:         {;usb/usb_device.c: 2412:             memcpy((uint8_t*)
      +                          &SetupPkt, (uint8_t*)((void *)(pBDTEntryEP0OutCurrent->ADR)), 8);
 10643     155F  3040               	movlw	64
 10644     1560  00F6               	movwf	i1memcpy@d1
 10645     1561  3000               	movlw	0
 10646     1562  00F7               	movwf	i1memcpy@d1+1
 10647     1563  086B               	movf	_pBDTEntryEP0OutCurrent,w
 10648     1564  3E02               	addlw	2
 10649     1565  0086               	movwf	6
 10650     1566  0187               	clrf	7
 10651     1567  3F40               	moviw [0]fsr1
 10652     1568  00F8               	movwf	i1memcpy@s1
 10653     1569  3F41               	moviw [1]fsr1
 10654     156A  00F9               	movwf	i1memcpy@s1+1
 10655     156B  3008               	movlw	8
 10656     156C  00FA               	movwf	i1memcpy@n
 10657     156D  3000               	movlw	0
 10658     156E  00FB               	movwf	i1memcpy@n+1
 10659     156F  3193  230E  3195   	fcall	i1_memcpy
 10660                           
 10661                           ;usb/usb_device.c: 2415:             USBCtrlTrfSetupHandler();
 10662     1572  3195  2582         	fcall	_USBCtrlTrfSetupHandler
 10663                           
 10664                           ;usb/usb_device.c: 2416:         }
 10665     1574  0008               	return
 10666     1575                     i1l5192:
 10667                           
 10668                           ;usb/usb_device.c: 2418:         {;usb/usb_device.c: 2420:             USBCtrlTrfOutHand
      +                          ler();
 10669     1575  3193  23FB         	fcall	_USBCtrlTrfOutHandler
 10670     1577  0008               	return
 10671     1578                     i1l5194:
 10672     1578  30FD               	movlw	253
 10673     1579  056D               	andwf	_USTATcopy,w	;volatile
 10674     157A  00DE               	movwf	??_USBCtrlEPService
 10675     157B  3004               	movlw	4
 10676     157C  065E               	xorwf	??_USBCtrlEPService,w
 10677     157D  1D03               	btfss	3,2
 10678     157E  0008               	return
 10679                           
 10680                           ;usb/usb_device.c: 2424:     {;usb/usb_device.c: 2427:         USBCtrlTrfInHandler();
 10681     157F  318B  2377         	fcall	_USBCtrlTrfInHandler
 10682     1581  0008               	return
 10683     1582                     __end_of_USBCtrlEPService:
 10684                           
 10685                           	psect	text55
 10686     1582                     __ptext55:	
 10687 ;; *************** function _USBCtrlTrfSetupHandler *****************
 10688 ;; Defined at:
 10689 ;;		line 2472 in file "usb/usb_device.c"
 10690 ;; Parameters:    Size  Location     Type
 10691 ;;		None
 10692 ;; Auto vars:     Size  Location     Type
 10693 ;;		None
 10694 ;; Return value:  Size  Location     Type
 10695 ;;                  1    wreg      void 
 10696 ;; Registers used:
 10697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10698 ;; Tracked objects:
 10699 ;;		On entry : 1F/0
 10700 ;;		On exit  : 1D/0
 10701 ;;		Unchanged: 0/0
 10702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;Total ram usage:        1 bytes
 10708 ;; Hardware stack levels used: 1
 10709 ;; Hardware stack levels required when called: 6
 10710 ;; This function calls:
 10711 ;;		_USBCheckStdRequest
 10712 ;;		_USBCtrlEPServiceComplete
 10713 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 10714 ;; This function is called by:
 10715 ;;		_USBCtrlEPService
 10716 ;; This function uses a non-reentrant model
 10717 ;;
 10718                           
 10719     1582                     _USBCtrlTrfSetupHandler:	
 10720                           ;psect for function _USBCtrlTrfSetupHandler
 10721                           
 10722                           
 10723                           ;usb/usb_device.c: 2477:     shortPacketStatus = 0;
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _USBCtrlTrfSetupHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10727     1582  0021               	movlb	1	; select bank1
 10728     1583  01ED               	clrf	_shortPacketStatus^(0+128)	;volatile
 10729                           
 10730                           ;usb/usb_device.c: 2478:     USBDeferStatusStagePacket = 0;
 10731     1584  0022               	movlb	2	; select bank2
 10732     1585  01D9               	clrf	_USBDeferStatusStagePacket^(0+256)	;volatile
 10733                           
 10734                           ;usb/usb_device.c: 2479:     USBDeferINDataStagePackets = 0;
 10735     1586  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 10736                           
 10737                           ;usb/usb_device.c: 2480:     USBDeferOUTDataStagePackets = 0;
 10738     1587  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 10739                           
 10740                           ;usb/usb_device.c: 2481:     BothEP0OutUOWNsSet = 0;
 10741     1588  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 10742                           
 10743                           ;usb/usb_device.c: 2482:     controlTransferState = 0;
 10744     1589  0020               	movlb	0	; select bank0
 10745     158A  01EA               	clrf	_controlTransferState	;volatile
 10746                           
 10747                           ;usb/usb_device.c: 2491:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10748     158B  307F               	movlw	127
 10749     158C  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10750     158D  0861               	movf	_pBDTEntryIn,w
 10751     158E  0086               	movwf	6
 10752     158F  0862               	movf	_pBDTEntryIn+1,w
 10753     1590  0087               	movwf	7
 10754     1591  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10755     1592  0581               	andwf	1,f
 10756                           
 10757                           ;usb/usb_device.c: 2493:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10758     1593  3004               	movlw	4
 10759     1594  0661               	xorwf	_pBDTEntryIn,w
 10760     1595  00E1               	movwf	_pBDTEntryIn
 10761     1596  3000               	movlw	0
 10762     1597  0662               	xorwf	_pBDTEntryIn+1,w
 10763     1598  00E2               	movwf	_pBDTEntryIn+1
 10764                           
 10765                           ;usb/usb_device.c: 2494:     pBDTEntryIn[0]->STAT.Val &= ~(0x80);
 10766     1599  307F               	movlw	127
 10767     159A  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10768     159B  0861               	movf	_pBDTEntryIn,w
 10769     159C  0086               	movwf	6
 10770     159D  0862               	movf	_pBDTEntryIn+1,w
 10771     159E  0087               	movwf	7
 10772     159F  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10773     15A0  0581               	andwf	1,f
 10774                           
 10775                           ;usb/usb_device.c: 2495:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 10776     15A1  3004               	movlw	4
 10777     15A2  0661               	xorwf	_pBDTEntryIn,w
 10778     15A3  00E1               	movwf	_pBDTEntryIn
 10779     15A4  3000               	movlw	0
 10780     15A5  0662               	xorwf	_pBDTEntryIn+1,w
 10781     15A6  00E2               	movwf	_pBDTEntryIn+1
 10782                           
 10783                           ;usb/usb_device.c: 2496:     pBDTEntryEP0OutNext->STAT.Val &= ~(0x80);
 10784     15A7  307F               	movlw	127
 10785     15A8  00DD               	movwf	??_USBCtrlTrfSetupHandler
 10786     15A9  0867               	movf	_pBDTEntryEP0OutNext,w
 10787     15AA  0086               	movwf	6
 10788     15AB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10789     15AC  0087               	movwf	7
 10790     15AD  085D               	movf	??_USBCtrlTrfSetupHandler,w
 10791     15AE  0581               	andwf	1,f
 10792                           
 10793                           ;usb/usb_device.c: 2498:     inPipes[0].info.Val = 0;
 10794     15AF  0021               	movlb	1	; select bank1
 10795     15B0  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 10796                           
 10797                           ;usb/usb_device.c: 2499:     inPipes[0].wCount.Val = 0;
 10798     15B1  01EB               	clrf	(_inPipes^(0+128)+3)	;volatile
 10799     15B2  01EC               	clrf	((_inPipes+1)^(0+128)+3)	;volatile
 10800                           
 10801                           ;usb/usb_device.c: 2500:     outPipes[0].info.Val = 0;
 10802     15B3  0022               	movlb	2	; select bank2
 10803     15B4  01A3               	clrf	(_outPipes^(0+256)+2)	;volatile
 10804                           
 10805                           ;usb/usb_device.c: 2501:     outPipes[0].wCount.Val = 0;
 10806     15B5  01A4               	clrf	(_outPipes^(0+256)+3)	;volatile
 10807     15B6  01A5               	clrf	((_outPipes+1)^(0+256)+3)	;volatile
 10808                           
 10809                           ;usb/usb_device.c: 2507:     USBCheckStdRequest();
 10810     15B7  3189  214E  3195   	fcall	_USBCheckStdRequest
 10811                           
 10812                           ;usb/usb_device.c: 2508:     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_EP0_REQUES
      +                          T,0,0);
 10813     15BA  3003               	movlw	3
 10814     15BB  0020               	movlb	0	; select bank0
 10815     15BC  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 10816     15BD  3000               	movlw	0
 10817     15BE  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 10818     15BF  3000               	movlw	0
 10819     15C0  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 10820     15C1  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 10821     15C2  3000               	movlw	0
 10822     15C3  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 10823     15C4  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 10824     15C5  3194  2435  3195   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 10825                           
 10826                           ;usb/usb_device.c: 2521:     USBCtrlEPServiceComplete();
 10827     15C8  318D  2570         	fcall	_USBCtrlEPServiceComplete
 10828     15CA  0008               	return
 10829     15CB                     __end_of_USBCtrlTrfSetupHandler:
 10830                           
 10831                           	psect	text56
 10832     0D70                     __ptext56:	
 10833 ;; *************** function _USBCtrlEPServiceComplete *****************
 10834 ;; Defined at:
 10835 ;;		line 1620 in file "usb/usb_device.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;		None
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;		None
 10840 ;; Return value:  Size  Location     Type
 10841 ;;                  1    wreg      void 
 10842 ;; Registers used:
 10843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/2
 10846 ;;		On exit  : 1D/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;Total ram usage:        4 bytes
 10854 ;; Hardware stack levels used: 1
 10855 ;; Hardware stack levels required when called: 2
 10856 ;; This function calls:
 10857 ;;		_USBCtrlEPAllowDataStage
 10858 ;;		_USBCtrlEPAllowStatusStage
 10859 ;; This function is called by:
 10860 ;;		_USBCtrlTrfSetupHandler
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864     0D70                     _USBCtrlEPServiceComplete:	
 10865                           ;psect for function _USBCtrlEPServiceComplete
 10866                           
 10867                           
 10868                           ;usb/usb_device.c: 1626:     UCONbits.PKTDIS = 0;
 10869                           
 10870                           ;incstack = 0
 10871                           ; Regs used in _USBCtrlEPServiceComplete: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10872     0D70  003D               	movlb	29	; select bank29
 10873     0D71  120E               	bcf	14,4	;volatile
 10874                           
 10875                           ;usb/usb_device.c: 1632:     if(inPipes[0].info.bits.busy == 0)
 10876     0D72  0021               	movlb	1	; select bank1
 10877     0D73  1BEA               	btfsc	(_inPipes^(0+128)+2),7	;volatile
 10878     0D74  2DBC               	goto	i1l566
 10879                           
 10880                           ;usb/usb_device.c: 1633:     {;usb/usb_device.c: 1634:         if(outPipes[0].info.bits.
      +                          busy == 1)
 10881     0D75  0022               	movlb	2	; select bank2
 10882     0D76  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 10883     0D77  2D85               	goto	i1l4386
 10884                           
 10885                           ;usb/usb_device.c: 1635:         {;usb/usb_device.c: 1636:             controlTransferSt
      +                          ate = 2;
 10886     0D78  3002               	movlw	2
 10887     0D79  0020               	movlb	0	; select bank0
 10888     0D7A  00EA               	movwf	_controlTransferState	;volatile
 10889                           
 10890                           ;usb/usb_device.c: 1647:             if(USBDeferOUTDataStagePackets == 0)
 10891     0D7B  0022               	movlb	2	; select bank2
 10892     0D7C  0855               	movf	_USBDeferOUTDataStagePackets^(0+256),w	;volatile
 10893     0D7D  1D03               	btfss	3,2
 10894     0D7E  2D81               	goto	i1l4382
 10895                           
 10896                           ;usb/usb_device.c: 1648:             {;usb/usb_device.c: 1649:                 USBCtrlEP
      +                          AllowDataStage();
 10897     0D7F  3197  2799         	fcall	_USBCtrlEPAllowDataStage
 10898     0D81                     i1l4382:
 10899                           
 10900                           ;usb/usb_device.c: 1654:             USBStatusStageEnabledFlag2 = 0;
 10901     0D81  0022               	movlb	2	; select bank2
 10902     0D82  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 10903                           
 10904                           ;usb/usb_device.c: 1655:             USBStatusStageEnabledFlag1 = 0;
 10905     0D83  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 10906                           
 10907                           ;usb/usb_device.c: 1656:         }
 10908     0D84  0008               	return
 10909     0D85                     i1l4386:
 10910                           
 10911                           ;usb/usb_device.c: 1658:         {;usb/usb_device.c: 1663:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 10912     0D85  0020               	movlb	0	; select bank0
 10913     0D86  0867               	movf	_pBDTEntryEP0OutNext,w
 10914     0D87  3E01               	addlw	1
 10915     0D88  00F7               	movwf	??_USBCtrlEPServiceComplete
 10916     0D89  3000               	movlw	0
 10917     0D8A  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 10918     0D8B  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10919     0D8C  0877               	movf	??_USBCtrlEPServiceComplete,w
 10920     0D8D  0086               	movwf	6
 10921     0D8E  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 10922     0D8F  0087               	movwf	7
 10923     0D90  3008               	movlw	8
 10924     0D91  0081               	movwf	1
 10925                           
 10926                           ;usb/usb_device.c: 1664:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 10927     0D92  3040               	movlw	64
 10928     0D93  00F7               	movwf	??_USBCtrlEPServiceComplete
 10929     0D94  3000               	movlw	0
 10930     0D95  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 10931     0D96  30FF               	movlw	255
 10932     0D97  0577               	andwf	??_USBCtrlEPServiceComplete,w
 10933     0D98  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 10934     0D99  307F               	movlw	127
 10935     0D9A  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 10936     0D9B  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 10937     0D9C  0867               	movf	_pBDTEntryEP0OutNext,w
 10938     0D9D  0086               	movwf	6
 10939     0D9E  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10940     0D9F  0087               	movwf	7
 10941     0DA0  3142               	addfsr 1,2
 10942     0DA1  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 10943     0DA2  3FC0               	movwi [0]fsr1
 10944     0DA3  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 10945     0DA4  3FC1               	movwi [1]fsr1
 10946                           
 10947                           ;usb/usb_device.c: 1665:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 10948     0DA5  0867               	movf	_pBDTEntryEP0OutNext,w
 10949     0DA6  0086               	movwf	6
 10950     0DA7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10951     0DA8  0087               	movwf	7
 10952     0DA9  300C               	movlw	12
 10953     0DAA  0081               	movwf	1
 10954                           
 10955                           ;usb/usb_device.c: 1666:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 10956     0DAB  0867               	movf	_pBDTEntryEP0OutNext,w
 10957     0DAC  0086               	movwf	6
 10958     0DAD  0868               	movf	_pBDTEntryEP0OutNext+1,w
 10959     0DAE  0087               	movwf	7
 10960     0DAF  1781               	bsf	1,7
 10961                           
 10962                           ;usb/usb_device.c: 1667:             pBDTEntryIn[0]->STAT.Val = 0x04;
 10963     0DB0  0861               	movf	_pBDTEntryIn,w
 10964     0DB1  0086               	movwf	6
 10965     0DB2  0862               	movf	_pBDTEntryIn+1,w
 10966     0DB3  0087               	movwf	7
 10967     0DB4  3004               	movlw	4
 10968     0DB5  0081               	movwf	1
 10969                           
 10970                           ;usb/usb_device.c: 1668:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 10971     0DB6  0861               	movf	_pBDTEntryIn,w
 10972     0DB7  0086               	movwf	6
 10973     0DB8  0862               	movf	_pBDTEntryIn+1,w
 10974     0DB9  0087               	movwf	7
 10975     0DBA  1781               	bsf	1,7
 10976     0DBB  0008               	return
 10977     0DBC                     i1l566:	
 10978                           ;usb/usb_device.c: 1671:     else
 10979                           
 10980                           
 10981                           ;usb/usb_device.c: 1672:     {;usb/usb_device.c: 1673:   if(SetupPkt.DataDir == (0x80>>7
      +                          ))
 10982     0DBC  0020               	movlb	0	; select bank0
 10983     0DBD  1FC0               	btfss	64,7	;volatile
 10984     0DBE  2DD1               	goto	i1l4412
 10985                           
 10986                           ;usb/usb_device.c: 1674:   {;usb/usb_device.c: 1675:    controlTransferState = 1;
 10987     0DBF  3001               	movlw	1
 10988     0DC0  00EA               	movwf	_controlTransferState	;volatile
 10989                           
 10990                           ;usb/usb_device.c: 1689:    if(USBDeferINDataStagePackets == 0)
 10991     0DC1  0022               	movlb	2	; select bank2
 10992     0DC2  0856               	movf	_USBDeferINDataStagePackets^(0+256),w	;volatile
 10993     0DC3  1D03               	btfss	3,2
 10994     0DC4  2DC8               	goto	i1l4404
 10995                           
 10996                           ;usb/usb_device.c: 1690:             {;usb/usb_device.c: 1691:                 USBCtrlEP
      +                          AllowDataStage();
 10997     0DC5  3197  2799  318D   	fcall	_USBCtrlEPAllowDataStage
 10998     0DC8                     i1l4404:
 10999                           
 11000                           ;usb/usb_device.c: 1714:             USBStatusStageEnabledFlag2 = 0;
 11001     0DC8  0022               	movlb	2	; select bank2
 11002     0DC9  01D7               	clrf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 11003                           
 11004                           ;usb/usb_device.c: 1715:             USBStatusStageEnabledFlag1 = 0;
 11005     0DCA  01D8               	clrf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 11006                           
 11007                           ;usb/usb_device.c: 1716:             if(USBDeferStatusStagePacket == 0)
 11008     0DCB  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 11009     0DCC  1D03               	btfss	3,2
 11010     0DCD  0008               	return
 11011                           
 11012                           ;usb/usb_device.c: 1717:             {;usb/usb_device.c: 1718:                 USBCtrlEP
      +                          AllowStatusStage();
 11013     0DCE  318A  228C         	fcall	_USBCtrlEPAllowStatusStage
 11014     0DD0  0008               	return
 11015     0DD1                     i1l4412:
 11016                           
 11017                           ;usb/usb_device.c: 1722:   {;usb/usb_device.c: 1733:    controlTransferState = 2;
 11018     0DD1  3002               	movlw	2
 11019     0DD2  00EA               	movwf	_controlTransferState	;volatile
 11020                           
 11021                           ;usb/usb_device.c: 1736:    pBDTEntryEP0OutNext->CNT = 8;
 11022     0DD3  0867               	movf	_pBDTEntryEP0OutNext,w
 11023     0DD4  3E01               	addlw	1
 11024     0DD5  00F7               	movwf	??_USBCtrlEPServiceComplete
 11025     0DD6  3000               	movlw	0
 11026     0DD7  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11027     0DD8  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 11028     0DD9  0877               	movf	??_USBCtrlEPServiceComplete,w
 11029     0DDA  0086               	movwf	6
 11030     0DDB  0878               	movf	??_USBCtrlEPServiceComplete+1,w
 11031     0DDC  0087               	movwf	7
 11032     0DDD  3008               	movlw	8
 11033     0DDE  0081               	movwf	1
 11034                           
 11035                           ;usb/usb_device.c: 1737:    pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0x7FFF
      +                          );
 11036     0DDF  3040               	movlw	64
 11037     0DE0  00F7               	movwf	??_USBCtrlEPServiceComplete
 11038     0DE1  3000               	movlw	0
 11039     0DE2  00F8               	movwf	??_USBCtrlEPServiceComplete+1
 11040     0DE3  30FF               	movlw	255
 11041     0DE4  0577               	andwf	??_USBCtrlEPServiceComplete,w
 11042     0DE5  00F9               	movwf	??_USBCtrlEPServiceComplete+2
 11043     0DE6  307F               	movlw	127
 11044     0DE7  0578               	andwf	??_USBCtrlEPServiceComplete+1,w
 11045     0DE8  00FA               	movwf	??_USBCtrlEPServiceComplete+3
 11046     0DE9  0867               	movf	_pBDTEntryEP0OutNext,w
 11047     0DEA  0086               	movwf	6
 11048     0DEB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11049     0DEC  0087               	movwf	7
 11050     0DED  3142               	addfsr 1,2
 11051     0DEE  0879               	movf	??_USBCtrlEPServiceComplete+2,w
 11052     0DEF  3FC0               	movwi [0]fsr1
 11053     0DF0  087A               	movf	??_USBCtrlEPServiceComplete+3,w
 11054     0DF1  3FC1               	movwi [1]fsr1
 11055                           
 11056                           ;usb/usb_device.c: 1738:    pBDTEntryEP0OutNext->STAT.Val = 0x04;
 11057     0DF2  0867               	movf	_pBDTEntryEP0OutNext,w
 11058     0DF3  0086               	movwf	6
 11059     0DF4  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11060     0DF5  0087               	movwf	7
 11061     0DF6  3004               	movlw	4
 11062     0DF7  0081               	movwf	1
 11063                           
 11064                           ;usb/usb_device.c: 1739:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11065     0DF8  0867               	movf	_pBDTEntryEP0OutNext,w
 11066     0DF9  0086               	movwf	6
 11067     0DFA  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11068     0DFB  0087               	movwf	7
 11069     0DFC  1781               	bsf	1,7
 11070     0DFD  2DC8               	goto	i1l4404
 11071     0DFE                     __end_of_USBCtrlEPServiceComplete:	
 11072                           ;usb/usb_device.c: 1744:    if(USBDeferStatusStagePacket == 0)
 11073                           
 11074                           ;usb/usb_device.c: 1743:             USBStatusStageEnabledFlag1 = 0;
 11075                           
 11076                           ;usb/usb_device.c: 1742:             USBStatusStageEnabledFlag2 = 0;
 11077                           
 11078                           
 11079                           	psect	text57
 11080     1799                     __ptext57:	
 11081 ;; *************** function _USBCtrlEPAllowDataStage *****************
 11082 ;; Defined at:
 11083 ;;		line 1492 in file "usb/usb_device.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;		None
 11086 ;; Auto vars:     Size  Location     Type
 11087 ;;		None
 11088 ;; Return value:  Size  Location     Type
 11089 ;;                  1    wreg      void 
 11090 ;; Registers used:
 11091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11092 ;; Tracked objects:
 11093 ;;		On entry : 1F/2
 11094 ;;		On exit  : 1F/0
 11095 ;;		Unchanged: 0/0
 11096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11099 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11100 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11101 ;;Total ram usage:        4 bytes
 11102 ;; Hardware stack levels used: 1
 11103 ;; Hardware stack levels required when called: 1
 11104 ;; This function calls:
 11105 ;;		_USBCtrlTrfTxService
 11106 ;; This function is called by:
 11107 ;;		_USBCtrlEPServiceComplete
 11108 ;; This function uses a non-reentrant model
 11109 ;;
 11110                           
 11111     1799                     _USBCtrlEPAllowDataStage:	
 11112                           ;psect for function _USBCtrlEPAllowDataStage
 11113                           
 11114                           
 11115                           ;usb/usb_device.c: 1494:     USBDeferINDataStagePackets = 0;
 11116                           
 11117                           ;incstack = 0
 11118                           ; Regs used in _USBCtrlEPAllowDataStage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11119     1799  01D6               	clrf	_USBDeferINDataStagePackets^(0+256)	;volatile
 11120                           
 11121                           ;usb/usb_device.c: 1495:     USBDeferOUTDataStagePackets = 0;
 11122     179A  01D5               	clrf	_USBDeferOUTDataStagePackets^(0+256)	;volatile
 11123                           
 11124                           ;usb/usb_device.c: 1497:     if(controlTransferState == 2)
 11125     179B  3002               	movlw	2
 11126     179C  0020               	movlb	0	; select bank0
 11127     179D  066A               	xorwf	_controlTransferState,w	;volatile
 11128     179E  1D03               	btfss	3,2
 11129     179F  2FCB               	goto	i1l4090
 11130                           
 11131                           ;usb/usb_device.c: 1498:     {;usb/usb_device.c: 1500:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 11132     17A0  0867               	movf	_pBDTEntryEP0OutNext,w
 11133     17A1  3E01               	addlw	1
 11134     17A2  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11135     17A3  3000               	movlw	0
 11136     17A4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 11137     17A5  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11138     17A6  0873               	movf	??_USBCtrlEPAllowDataStage,w
 11139     17A7  0086               	movwf	6
 11140     17A8  0874               	movf	??_USBCtrlEPAllowDataStage+1,w
 11141     17A9  0087               	movwf	7
 11142     17AA  3008               	movlw	8
 11143     17AB  0081               	movwf	1
 11144                           
 11145                           ;usb/usb_device.c: 1501:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 11146     17AC  3048               	movlw	72
 11147     17AD  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11148     17AE  3000               	movlw	0
 11149     17AF  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11150     17B0  30FF               	movlw	255
 11151     17B1  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11152     17B2  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11153     17B3  307F               	movlw	127
 11154     17B4  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11155     17B5  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11156     17B6  0867               	movf	_pBDTEntryEP0OutNext,w
 11157     17B7  0086               	movwf	6
 11158     17B8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11159     17B9  0087               	movwf	7
 11160     17BA  3142               	addfsr 1,2
 11161     17BB  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11162     17BC  3FC0               	movwi [0]fsr1
 11163     17BD  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11164     17BE  3FC1               	movwi [1]fsr1
 11165                           
 11166                           ;usb/usb_device.c: 1502:         pBDTEntryEP0OutNext->STAT.Val = 0x40|(0x08 & 0x08);
 11167     17BF  0867               	movf	_pBDTEntryEP0OutNext,w
 11168     17C0  0086               	movwf	6
 11169     17C1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11170     17C2  0087               	movwf	7
 11171     17C3  3048               	movlw	72
 11172     17C4  0081               	movwf	1
 11173                           
 11174                           ;usb/usb_device.c: 1503:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 11175     17C5  0867               	movf	_pBDTEntryEP0OutNext,w
 11176     17C6  0086               	movwf	6
 11177     17C7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 11178     17C8  0087               	movwf	7
 11179     17C9  1781               	bsf	1,7
 11180                           
 11181                           ;usb/usb_device.c: 1504:     }
 11182     17CA  0008               	return
 11183     17CB                     i1l4090:
 11184                           
 11185                           ;usb/usb_device.c: 1506:     {;usb/usb_device.c: 1509:   if(SetupPkt.wLength < inPipes[0
      +                          ].wCount.Val)
 11186     17CB  0021               	movlb	1	; select bank1
 11187     17CC  086C               	movf	((_inPipes+1)^(0+128)+3),w	;volatile
 11188     17CD  0020               	movlb	0	; select bank0
 11189     17CE  0247               	subwf	71,w	;volatile
 11190     17CF  1D03               	skipz
 11191     17D0  2FD5               	goto	u311_25
 11192     17D1  0021               	movlb	1	; select bank1
 11193     17D2  086B               	movf	(_inPipes^(0+128)+3),w	;volatile
 11194     17D3  0020               	movlb	0	; select bank0
 11195     17D4  0246               	subwf	70,w	;volatile
 11196     17D5                     u311_25:
 11197     17D5  1803               	skipnc
 11198     17D6  2FDE               	goto	i1l4094
 11199                           
 11200                           ;usb/usb_device.c: 1510:   {;usb/usb_device.c: 1511:    inPipes[0].wCount.Val = SetupPkt
      +                          .wLength;
 11201     17D7  0847               	movf	71,w	;volatile
 11202     17D8  0021               	movlb	1	; select bank1
 11203     17D9  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11204     17DA  0020               	movlb	0	; select bank0
 11205     17DB  0846               	movf	70,w	;volatile
 11206     17DC  0021               	movlb	1	; select bank1
 11207     17DD  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11208     17DE                     i1l4094:
 11209                           
 11210                           ;usb/usb_device.c: 1513:   USBCtrlTrfTxService();
 11211     17DE  3197  2734         	fcall	_USBCtrlTrfTxService
 11212                           
 11213                           ;usb/usb_device.c: 1518:   pBDTEntryIn[0]->ADR = (((uint16_t)(&CtrlTrfData)) & 0x7FFF);
 11214     17E0  3048               	movlw	72
 11215     17E1  00F3               	movwf	??_USBCtrlEPAllowDataStage
 11216     17E2  3000               	movlw	0
 11217     17E3  00F4               	movwf	??_USBCtrlEPAllowDataStage+1
 11218     17E4  30FF               	movlw	255
 11219     17E5  0573               	andwf	??_USBCtrlEPAllowDataStage,w
 11220     17E6  00F5               	movwf	??_USBCtrlEPAllowDataStage+2
 11221     17E7  307F               	movlw	127
 11222     17E8  0574               	andwf	??_USBCtrlEPAllowDataStage+1,w
 11223     17E9  00F6               	movwf	??_USBCtrlEPAllowDataStage+3
 11224     17EA  0020               	movlb	0	; select bank0
 11225     17EB  0861               	movf	_pBDTEntryIn,w
 11226     17EC  0086               	movwf	6
 11227     17ED  0862               	movf	_pBDTEntryIn+1,w
 11228     17EE  0087               	movwf	7
 11229     17EF  3142               	addfsr 1,2
 11230     17F0  0875               	movf	??_USBCtrlEPAllowDataStage+2,w
 11231     17F1  3FC0               	movwi [0]fsr1
 11232     17F2  0876               	movf	??_USBCtrlEPAllowDataStage+3,w
 11233     17F3  3FC1               	movwi [1]fsr1
 11234                           
 11235                           ;usb/usb_device.c: 1519:   pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 11236     17F4  0861               	movf	_pBDTEntryIn,w
 11237     17F5  0086               	movwf	6
 11238     17F6  0862               	movf	_pBDTEntryIn+1,w
 11239     17F7  0087               	movwf	7
 11240     17F8  3048               	movlw	72
 11241     17F9  0081               	movwf	1
 11242                           
 11243                           ;usb/usb_device.c: 1520:         pBDTEntryIn[0]->STAT.Val |= 0x80;
 11244     17FA  0861               	movf	_pBDTEntryIn,w
 11245     17FB  0086               	movwf	6
 11246     17FC  0862               	movf	_pBDTEntryIn+1,w
 11247     17FD  0087               	movwf	7
 11248     17FE  1781               	bsf	1,7
 11249     17FF  0008               	return
 11250     1800                     __end_of_USBCtrlEPAllowDataStage:
 11251                           
 11252                           	psect	text58
 11253     094E                     __ptext58:	
 11254 ;; *************** function _USBCheckStdRequest *****************
 11255 ;; Defined at:
 11256 ;;		line 2693 in file "usb/usb_device.c"
 11257 ;; Parameters:    Size  Location     Type
 11258 ;;		None
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      void 
 11263 ;; Registers used:
 11264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11265 ;; Tracked objects:
 11266 ;;		On entry : 1F/2
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;Total ram usage:        0 bytes
 11275 ;; Hardware stack levels used: 1
 11276 ;; Hardware stack levels required when called: 5
 11277 ;; This function calls:
 11278 ;;		_USBStdFeatureReqHandler
 11279 ;;		_USBStdGetDscHandler
 11280 ;;		_USBStdGetStatusHandler
 11281 ;;		_USBStdSetCfgHandler
 11282 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11283 ;; This function is called by:
 11284 ;;		_USBCtrlTrfSetupHandler
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288     094E                     _USBCheckStdRequest:	
 11289                           ;psect for function _USBCheckStdRequest
 11290                           
 11291                           
 11292                           ;usb/usb_device.c: 2695:     if(SetupPkt.RequestType != (0x00>>5)) return;
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _USBCheckStdRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11296     094E  0020               	movlb	0	; select bank0
 11297     094F  0E40               	swapf	64,w	;volatile
 11298     0950  0C89               	rrf	9,f
 11299     0951  3903               	andlw	3
 11300     0952  3A00               	xorlw	0
 11301     0953  1D03               	btfss	3,2
 11302     0954  0008               	return
 11303     0955  2993               	goto	i1l4520
 11304     0956                     i1l694:	
 11305                           ;usb/usb_device.c: 2698:     {;usb/usb_device.c: 2699:         case 5:
 11306                           
 11307                           
 11308                           ;usb/usb_device.c: 2700:             inPipes[0].info.bits.busy = 1;
 11309     0956  0021               	movlb	1	; select bank1
 11310     0957  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11311                           
 11312                           ;usb/usb_device.c: 2701:             USBDeviceState = ADR_PENDING_STATE;
 11313     0958  3008               	movlw	8
 11314     0959  0020               	movlb	0	; select bank0
 11315     095A  00EC               	movwf	_USBDeviceState	;volatile
 11316                           
 11317                           ;usb/usb_device.c: 2703:             break;
 11318     095B  0008               	return
 11319     095C                     i1l4490:
 11320                           
 11321                           ;usb/usb_device.c: 2705:             USBStdGetDscHandler();
 11322     095C  318A  22FE         	fcall	_USBStdGetDscHandler
 11323                           
 11324                           ;usb/usb_device.c: 2706:             break;
 11325     095E  0008               	return
 11326     095F                     i1l4492:
 11327                           
 11328                           ;usb/usb_device.c: 2708:             USBStdSetCfgHandler();
 11329     095F  318A  2220         	fcall	_USBStdSetCfgHandler
 11330                           
 11331                           ;usb/usb_device.c: 2709:             break;
 11332     0961  0008               	return
 11333     0962                     i1l4494:
 11334                           
 11335                           ;usb/usb_device.c: 2711:             inPipes[0].pSrc.bRam = (uint8_t*)&USBActiveConfigur
      +                          ation;
 11336     0962  306F               	movlw	low _USBActiveConfiguration
 11337     0963  0021               	movlb	1	; select bank1
 11338     0964  00E8               	movwf	_inPipes^(0+128)	;volatile
 11339     0965  3000               	movlw	high _USBActiveConfiguration
 11340     0966  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 11341                           
 11342                           ;usb/usb_device.c: 2712:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11343     0967  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11344                           
 11345                           ;usb/usb_device.c: 2713:             inPipes[0].wCount.v[0] = 1;
 11346     0968  3001               	movlw	1
 11347     0969  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11348                           
 11349                           ;usb/usb_device.c: 2714:             inPipes[0].info.bits.busy = 1;
 11350     096A  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11351                           
 11352                           ;usb/usb_device.c: 2715:             break;
 11353     096B  0008               	return
 11354     096C                     i1l4502:
 11355                           
 11356                           ;usb/usb_device.c: 2717:             USBStdGetStatusHandler();
 11357     096C  3196  261B         	fcall	_USBStdGetStatusHandler
 11358                           
 11359                           ;usb/usb_device.c: 2718:             break;
 11360     096E  0008               	return
 11361     096F                     i1l4504:
 11362                           
 11363                           ;usb/usb_device.c: 2721:             USBStdFeatureReqHandler();
 11364     096F  3181  21D3         	fcall	_USBStdFeatureReqHandler
 11365                           
 11366                           ;usb/usb_device.c: 2722:             break;
 11367     0971  0008               	return
 11368     0972                     i1l4506:
 11369                           
 11370                           ;usb/usb_device.c: 2724:             inPipes[0].pSrc.bRam = (uint8_t*)&USBAlternateInter
      +                          face[SetupPkt.bIntfID];
 11371     0972  0844               	movf	68,w	;volatile
 11372     0973  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11373     0974  0021               	movlb	1	; select bank1
 11374     0975  00E8               	movwf	_inPipes^(0+128)	;volatile
 11375     0976  01E9               	clrf	(_inPipes+1)^(0+128)	;volatile
 11376                           
 11377                           ;usb/usb_device.c: 2725:             inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11378     0977  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11379                           
 11380                           ;usb/usb_device.c: 2726:             inPipes[0].wCount.v[0] = 1;
 11381     0978  3001               	movlw	1
 11382     0979  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11383                           
 11384                           ;usb/usb_device.c: 2727:             inPipes[0].info.bits.busy = 1;
 11385     097A  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11386                           
 11387                           ;usb/usb_device.c: 2728:             break;
 11388     097B  0008               	return
 11389     097C                     i1l703:	
 11390                           ;usb/usb_device.c: 2729:         case 11:
 11391                           
 11392                           
 11393                           ;usb/usb_device.c: 2730:             inPipes[0].info.bits.busy = 1;
 11394     097C  0021               	movlb	1	; select bank1
 11395     097D  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11396                           
 11397                           ;usb/usb_device.c: 2731:             USBAlternateInterface[SetupPkt.bIntfID] = SetupPkt.
      +                          bAltID;
 11398     097E  0020               	movlb	0	; select bank0
 11399     097F  0844               	movf	68,w	;volatile
 11400     0980  3E6E               	addlw	(low (_USBAlternateInterface| 0))& (0+255)
 11401     0981  0086               	movwf	6
 11402     0982  0187               	clrf	7
 11403     0983  0842               	movf	66,w	;volatile
 11404     0984  0081               	movwf	1
 11405                           
 11406                           ;usb/usb_device.c: 2732:             break;
 11407     0985  0008               	return
 11408     0986                     i1l4516:
 11409                           
 11410                           ;usb/usb_device.c: 2734:             USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)EVENT_SE
      +                          T_DESCRIPTOR,0,0);
 11411     0986  3002               	movlw	2
 11412     0987  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11413     0988  3000               	movlw	0
 11414     0989  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11415     098A  3000               	movlw	0
 11416     098B  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11417     098C  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11418     098D  3000               	movlw	0
 11419     098E  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11420     098F  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11421     0990  3194  2435         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11422                           
 11423                           ;usb/usb_device.c: 2735:             break;
 11424     0992  0008               	return
 11425     0993                     i1l4520:
 11426     0993  0841               	movf	65,w	;volatile
 11427                           
 11428                           ; Switch size 1, requested type "simple"
 11429                           ; Number of cases is 11, Range of values is 0 to 12
 11430                           ; switch strategies available:
 11431                           ; Name         Instructions Cycles
 11432                           ; direct_byte           32     6 (fixed)
 11433                           ; simple_byte           34    18 (average)
 11434                           ; jumptable            260     6 (fixed)
 11435                           ;	Chosen strategy is simple_byte
 11436     0994  3A00               	xorlw	0	; case 0
 11437     0995  1903               	skipnz
 11438     0996  296C               	goto	i1l4502
 11439     0997  3A01               	xorlw	1	; case 1
 11440     0998  1903               	skipnz
 11441     0999  296F               	goto	i1l4504
 11442     099A  3A02               	xorlw	2	; case 3
 11443     099B  1903               	skipnz
 11444     099C  296F               	goto	i1l4504
 11445     099D  3A06               	xorlw	6	; case 5
 11446     099E  1903               	skipnz
 11447     099F  2956               	goto	i1l694
 11448     09A0  3A03               	xorlw	3	; case 6
 11449     09A1  1903               	skipnz
 11450     09A2  295C               	goto	i1l4490
 11451     09A3  3A01               	xorlw	1	; case 7
 11452     09A4  1903               	skipnz
 11453     09A5  2986               	goto	i1l4516
 11454     09A6  3A0F               	xorlw	15	; case 8
 11455     09A7  1903               	skipnz
 11456     09A8  2962               	goto	i1l4494
 11457     09A9  3A01               	xorlw	1	; case 9
 11458     09AA  1903               	skipnz
 11459     09AB  295F               	goto	i1l4492
 11460     09AC  3A03               	xorlw	3	; case 10
 11461     09AD  1903               	skipnz
 11462     09AE  2972               	goto	i1l4506
 11463     09AF  3A01               	xorlw	1	; case 11
 11464     09B0  1903               	skipnz
 11465     09B1  297C               	goto	i1l703
 11466     09B2  3A07               	xorlw	7	; case 12
 11467     09B3  1903               	skipnz
 11468     09B4  29B6               	goto	i1l692
 11469     09B5  29B6               	goto	i1l692
 11470     09B6                     i1l692:
 11471     09B6  0008               	return
 11472     09B7                     __end_of_USBCheckStdRequest:
 11473                           
 11474                           	psect	text59
 11475     0A20                     __ptext59:	
 11476 ;; *************** function _USBStdSetCfgHandler *****************
 11477 ;; Defined at:
 11478 ;;		line 1972 in file "usb/usb_device.c"
 11479 ;; Parameters:    Size  Location     Type
 11480 ;;		None
 11481 ;; Auto vars:     Size  Location     Type
 11482 ;;  p               2    6[BANK0 ] PTR unsigned char 
 11483 ;;		 -> UEP1(1), 
 11484 ;;  i               1    8[BANK0 ] unsigned char 
 11485 ;;  i               1    9[BANK0 ] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 1D/0
 11492 ;;		On exit  : 1F/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;Total ram usage:        5 bytes
 11500 ;; Hardware stack levels used: 1
 11501 ;; Hardware stack levels required when called: 4
 11502 ;; This function calls:
 11503 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 11504 ;;		i1_memset
 11505 ;; This function is called by:
 11506 ;;		_USBCheckStdRequest
 11507 ;; This function uses a non-reentrant model
 11508 ;;
 11509                           
 11510     0A20                     _USBStdSetCfgHandler:	
 11511                           ;psect for function _USBStdSetCfgHandler
 11512                           
 11513                           
 11514                           ;usb/usb_device.c: 1974:     uint8_t i;;usb/usb_device.c: 1977:     inPipes[0].info.bits
      +                          .busy = 1;
 11515                           
 11516                           ;incstack = 0
 11517                           ; Regs used in _USBStdSetCfgHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11518     0A20  0021               	movlb	1	; select bank1
 11519     0A21  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11520                           
 11521                           ;usb/usb_device.c: 1980:     { uint8_t i; uint8_t* p = (uint8_t*)&UEP1; for(i=0;i<1;i++)
      +                           *p++ = 0; };
 11522     0A22  300E               	movlw	14
 11523     0A23  0020               	movlb	0	; select bank0
 11524     0A24  00D7               	movwf	USBStdSetCfgHandler@p+1
 11525     0A25  3099               	movlw	153
 11526     0A26  00D6               	movwf	USBStdSetCfgHandler@p
 11527     0A27  01D8               	clrf	USBStdSetCfgHandler@i_2097
 11528     0A28                     i1l4110:
 11529     0A28  0856               	movf	USBStdSetCfgHandler@p,w
 11530     0A29  0086               	movwf	6
 11531     0A2A  0857               	movf	USBStdSetCfgHandler@p+1,w
 11532     0A2B  0087               	movwf	7
 11533     0A2C  0181               	clrf	1
 11534     0A2D  3001               	movlw	1
 11535     0A2E  07D6               	addwf	USBStdSetCfgHandler@p,f
 11536     0A2F  3000               	movlw	0
 11537     0A30  3DD7               	addwfc	USBStdSetCfgHandler@p+1,f
 11538     0A31  3001               	movlw	1
 11539     0A32  00FD               	movwf	??_USBStdSetCfgHandler
 11540     0A33  087D               	movf	??_USBStdSetCfgHandler,w
 11541     0A34  07D8               	addwf	USBStdSetCfgHandler@i_2097,f
 11542     0A35  0858               	movf	USBStdSetCfgHandler@i_2097,w
 11543     0A36  1903               	btfsc	3,2
 11544     0A37  2A28               	goto	i1l4110
 11545                           
 11546                           ;usb/usb_device.c: 1983:     memset((void*)&BDT[0], 0x00, sizeof(BDT));
 11547     0A38  3000               	movlw	0
 11548     0A39  00F0               	movwf	i1memset@c
 11549     0A3A  00F1               	movwf	i1memset@c+1
 11550     0A3B  3020               	movlw	32
 11551     0A3C  00F2               	movwf	i1memset@n
 11552     0A3D  3000               	movlw	0
 11553     0A3E  00F3               	movwf	i1memset@n+1
 11554     0A3F  3020               	movlw	32
 11555     0A40  3190  20B6  318A   	fcall	i1_memset
 11556                           
 11557                           ;usb/usb_device.c: 1986:     UCONbits.PPBRST = 1;
 11558     0A43  003D               	movlb	29	; select bank29
 11559     0A44  170E               	bsf	14,6	;volatile
 11560                           
 11561                           ;usb/usb_device.c: 1991:  for(i = 0; i < (uint8_t)(1 +1u); i++)
 11562     0A45  0020               	movlb	0	; select bank0
 11563     0A46  01D9               	clrf	USBStdSetCfgHandler@i
 11564     0A47                     i1l4128:
 11565                           
 11566                           ;usb/usb_device.c: 1992:  {;usb/usb_device.c: 1993:   ep_data_in[i].Val = 0u;
 11567     0A47  0859               	movf	USBStdSetCfgHandler@i,w
 11568     0A48  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 11569     0A49  0086               	movwf	6
 11570     0A4A  3001               	movlw	1	; select bank2/3
 11571     0A4B  0087               	movwf	7
 11572     0A4C  0181               	clrf	1
 11573                           
 11574                           ;usb/usb_device.c: 1994:         ep_data_out[i].Val = 0u;
 11575     0A4D  0859               	movf	USBStdSetCfgHandler@i,w
 11576     0A4E  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 11577     0A4F  0086               	movwf	6
 11578     0A50  3001               	movlw	1	; select bank2/3
 11579     0A51  0087               	movwf	7
 11580     0A52  0181               	clrf	1
 11581                           
 11582                           ;usb/usb_device.c: 1995:  }
 11583     0A53  3001               	movlw	1
 11584     0A54  00FD               	movwf	??_USBStdSetCfgHandler
 11585     0A55  087D               	movf	??_USBStdSetCfgHandler,w
 11586     0A56  07D9               	addwf	USBStdSetCfgHandler@i,f
 11587     0A57  3002               	movlw	2
 11588     0A58  0259               	subwf	USBStdSetCfgHandler@i,w
 11589     0A59  1C03               	skipc
 11590     0A5A  2A47               	goto	i1l4128
 11591                           
 11592                           ;usb/usb_device.c: 1998:     memset((void*)&USBAlternateInterface,0x00,1);
 11593     0A5B  3000               	movlw	0
 11594     0A5C  00F0               	movwf	i1memset@c
 11595     0A5D  00F1               	movwf	i1memset@c+1
 11596     0A5E  3001               	movlw	1
 11597     0A5F  00F2               	movwf	i1memset@n
 11598     0A60  3000               	movlw	0
 11599     0A61  00F3               	movwf	i1memset@n+1
 11600     0A62  306E               	movlw	(low (_USBAlternateInterface| 0))& (0+255)
 11601     0A63  3190  20B6  318A   	fcall	i1_memset
 11602                           
 11603                           ;usb/usb_device.c: 2001:     UCONbits.PPBRST = 0;
 11604     0A66  003D               	movlb	29	; select bank29
 11605     0A67  130E               	bcf	14,6	;volatile
 11606                           
 11607                           ;usb/usb_device.c: 2003:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)&BDT[2];
 11608     0A68  3028               	movlw	40
 11609     0A69  0020               	movlb	0	; select bank0
 11610     0A6A  00E1               	movwf	_pBDTEntryIn
 11611     0A6B  3000               	movlw	0
 11612     0A6C  00E2               	movwf	_pBDTEntryIn+1
 11613                           
 11614                           ;usb/usb_device.c: 2006:     pBDTEntryEP0OutCurrent = (volatile BDT_ENTRY*)&BDT[0];
 11615     0A6D  3020               	movlw	32
 11616     0A6E  00EB               	movwf	_pBDTEntryEP0OutCurrent
 11617                           
 11618                           ;usb/usb_device.c: 2007:     pBDTEntryEP0OutNext = pBDTEntryEP0OutCurrent;
 11619     0A6F  086B               	movf	_pBDTEntryEP0OutCurrent,w
 11620     0A70  00E7               	movwf	_pBDTEntryEP0OutNext
 11621     0A71  01E8               	clrf	_pBDTEntryEP0OutNext+1
 11622                           
 11623                           ;usb/usb_device.c: 2010:     USBActiveConfiguration = SetupPkt.bConfigurationValue;
 11624     0A72  0842               	movf	66,w	;volatile
 11625     0A73  00EF               	movwf	_USBActiveConfiguration	;volatile
 11626                           
 11627                           ;usb/usb_device.c: 2013:     if(USBActiveConfiguration == 0)
 11628     0A74  086F               	movf	_USBActiveConfiguration,w	;volatile
 11629     0A75  1D03               	btfss	3,2
 11630     0A76  2A7A               	goto	i1l4150
 11631                           
 11632                           ;usb/usb_device.c: 2014:     {;usb/usb_device.c: 2016:         USBDeviceState = ADDRESS_
      +                          STATE;
 11633     0A77  3010               	movlw	16
 11634     0A78  00EC               	movwf	_USBDeviceState	;volatile
 11635                           
 11636                           ;usb/usb_device.c: 2017:     }
 11637     0A79  0008               	return
 11638     0A7A                     i1l4150:
 11639                           
 11640                           ;usb/usb_device.c: 2019:     {;usb/usb_device.c: 2021:         USER_USB_CALLBACK_EVENT_H
      +                          ANDLER((USB_EVENT)EVENT_CONFIGURED,(void*)&USBActiveConfiguration,1);
 11641     0A7A  3001               	movlw	1
 11642     0A7B  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 11643     0A7C  3000               	movlw	0
 11644     0A7D  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 11645     0A7E  306F               	movlw	low _USBActiveConfiguration
 11646     0A7F  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 11647     0A80  3000               	movlw	high _USBActiveConfiguration
 11648     0A81  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 11649     0A82  3001               	movlw	1
 11650     0A83  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 11651     0A84  3000               	movlw	0
 11652     0A85  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 11653     0A86  3194  2435         	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 11654                           
 11655                           ;usb/usb_device.c: 2026:         USBDeviceState = CONFIGURED_STATE;
 11656     0A88  3020               	movlw	32
 11657     0A89  0020               	movlb	0	; select bank0
 11658     0A8A  00EC               	movwf	_USBDeviceState	;volatile
 11659     0A8B  0008               	return
 11660     0A8C                     __end_of_USBStdSetCfgHandler:
 11661                           
 11662                           	psect	text60
 11663     10B6                     __ptext60:	
 11664 ;; *************** function i1_memset *****************
 11665 ;; Defined at:
 11666 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memset.c"
 11667 ;; Parameters:    Size  Location     Type
 11668 ;;  dest            1    wreg     PTR void 
 11669 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11670 ;;  c               2    0[COMMON] int 
 11671 ;;  n               2    2[COMMON] unsigned int 
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  dest            1    5[COMMON] PTR void 
 11674 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11675 ;;  p               1    6[COMMON] PTR unsigned char 
 11676 ;;		 -> inputReport(8), USBAlternateInterface(1), BDT(32), 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  2    0[COMMON] PTR void 
 11679 ;; Registers used:
 11680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11681 ;; Tracked objects:
 11682 ;;		On entry : 1F/0
 11683 ;;		On exit  : 1F/0
 11684 ;;		Unchanged: 1F/0
 11685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11686 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;Total ram usage:        7 bytes
 11691 ;; Hardware stack levels used: 1
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		_USBStdSetCfgHandler
 11696 ;; This function uses a non-reentrant model
 11697 ;;
 11698                           
 11699     10B6                     i1_memset:	
 11700                           ;psect for function i1_memset
 11701                           
 11702                           
 11703                           ;incstack = 0
 11704                           ; Regs used in i1_memset: [wreg+fsr1l+fsr1h+status,2+status,0]
 11705                           ;i1memset@dest stored from wreg
 11706     10B6  00F5               	movwf	i1memset@dest
 11707     10B7  0875               	movf	i1memset@dest,w
 11708     10B8  00F6               	movwf	i1memset@p
 11709     10B9                     i1l4040:
 11710     10B9  3001               	movlw	1
 11711     10BA  02F2               	subwf	i1memset@n,f
 11712     10BB  3000               	movlw	0
 11713     10BC  3BF3               	subwfb	i1memset@n+1,f
 11714     10BD  0A72               	incf	i1memset@n,w
 11715     10BE  1903               	btfsc	3,2
 11716     10BF  0A73               	incf	i1memset@n+1,w
 11717     10C0  1903               	btfsc	3,2
 11718     10C1  0008               	return
 11719     10C2  0876               	movf	i1memset@p,w
 11720     10C3  0086               	movwf	6
 11721     10C4  0187               	clrf	7
 11722     10C5  0870               	movf	i1memset@c,w
 11723     10C6  0081               	movwf	1
 11724     10C7  3001               	movlw	1
 11725     10C8  00F4               	movwf	??i1_memset
 11726     10C9  0874               	movf	??i1_memset,w
 11727     10CA  07F6               	addwf	i1memset@p,f
 11728     10CB  28B9               	goto	i1l4040
 11729     10CC                     __end_ofi1_memset:
 11730                           
 11731                           	psect	text61
 11732     161B                     __ptext61:	
 11733 ;; *************** function _USBStdGetStatusHandler *****************
 11734 ;; Defined at:
 11735 ;;		line 2133 in file "usb/usb_device.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;  p               2    0[COMMON] PTR struct __BDT
 11740 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 11741 ;; Return value:  Size  Location     Type
 11742 ;;                  1    wreg      void 
 11743 ;; Registers used:
 11744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 11745 ;; Tracked objects:
 11746 ;;		On entry : 1D/0
 11747 ;;		On exit  : 1F/1
 11748 ;;		Unchanged: 0/0
 11749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;Total ram usage:        2 bytes
 11755 ;; Hardware stack levels used: 1
 11756 ;; This function calls:
 11757 ;;		Nothing
 11758 ;; This function is called by:
 11759 ;;		_USBCheckStdRequest
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763     161B                     _USBStdGetStatusHandler:	
 11764                           ;psect for function _USBStdGetStatusHandler
 11765                           
 11766                           
 11767                           ;usb/usb_device.c: 2135:     CtrlTrfData[0] = 0;
 11768                           
 11769                           ;incstack = 0
 11770                           ; Regs used in _USBStdGetStatusHandler: [wreg-fsr1h+status,2+status,0]
 11771     161B  0020               	movlb	0	; select bank0
 11772     161C  01C8               	clrf	72	;volatile
 11773                           
 11774                           ;usb/usb_device.c: 2136:     CtrlTrfData[1] = 0;
 11775     161D  01C9               	clrf	73	;volatile
 11776                           
 11777                           ;usb/usb_device.c: 2138:     switch(SetupPkt.Recipient)
 11778     161E  2E59               	goto	i1l4210
 11779     161F                     i1l631:	
 11780                           ;usb/usb_device.c: 2139:     {;usb/usb_device.c: 2140:         case (0x00):
 11781                           
 11782                           
 11783                           ;usb/usb_device.c: 2141:             inPipes[0].info.bits.busy = 1;
 11784     161F  0021               	movlb	1	; select bank1
 11785     1620  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11786                           
 11787                           ;usb/usb_device.c: 2151:             if(RemoteWakeup == 1)
 11788                           
 11789                           ;usb/usb_device.c: 2146:             if(0 == 1)
 11790     1621  0022               	movlb	2	; select bank2
 11791     1622  035E               	decf	_RemoteWakeup^(0+256),w	;volatile
 11792     1623  1D03               	btfss	3,2
 11793     1624  2E65               	goto	i1l634
 11794                           
 11795                           ;usb/usb_device.c: 2152:             {;usb/usb_device.c: 2153:                 CtrlTrfDa
      +                          ta[0]|=0x02;
 11796     1625  0020               	movlb	0	; select bank0
 11797     1626  14C8               	bsf	72,1	;volatile
 11798     1627  2E65               	goto	i1l634
 11799     1628                     i1l635:	
 11800                           ;usb/usb_device.c: 2156:         case (0x01):
 11801                           
 11802                           
 11803                           ;usb/usb_device.c: 2157:             inPipes[0].info.bits.busy = 1;
 11804     1628  0021               	movlb	1	; select bank1
 11805     1629  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11806                           
 11807                           ;usb/usb_device.c: 2158:             break;
 11808     162A  2E65               	goto	i1l634
 11809     162B                     i1l636:	
 11810                           ;usb/usb_device.c: 2159:         case (0x02):
 11811                           
 11812                           
 11813                           ;usb/usb_device.c: 2160:             inPipes[0].info.bits.busy = 1;
 11814     162B  0021               	movlb	1	; select bank1
 11815     162C  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 11816                           
 11817                           ;usb/usb_device.c: 2164:             if(SetupPkt.EPNum != 0)
 11818     162D  0020               	movlb	0	; select bank0
 11819     162E  0844               	movf	68,w	;volatile
 11820     162F  390F               	andlw	15
 11821     1630  3A00               	xorlw	0
 11822     1631  1903               	skipnz
 11823     1632  2E65               	goto	i1l634
 11824                           
 11825                           ;usb/usb_device.c: 2165:             {;usb/usb_device.c: 2166:                 BDT_ENTRY
      +                           *p;;usb/usb_device.c: 2168:                 if(SetupPkt.EPDir == 0)
 11826     1633  1BC4               	btfsc	68,7	;volatile
 11827     1634  2E40               	goto	i1l4200
 11828                           
 11829                           ;usb/usb_device.c: 2169:                 {;usb/usb_device.c: 2170:                     p
      +                           = (BDT_ENTRY*)pBDTEntryOut[SetupPkt.EPNum];
 11830     1635  0844               	movf	68,w	;volatile
 11831     1636  390F               	andlw	15
 11832     1637  0709               	addwf	9,w
 11833     1638  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 11834     1639  0086               	movwf	6
 11835     163A  3001               	movlw	1	; select bank2/3
 11836     163B  0087               	movwf	7
 11837     163C  3F40               	moviw [0]fsr1
 11838     163D  00F0               	movwf	USBStdGetStatusHandler@p
 11839     163E  3F41               	moviw [1]fsr1
 11840     163F  2E49               	goto	L8
 11841     1640                     i1l4200:	
 11842                           ;usb/usb_device.c: 2171:                 }
 11843                           
 11844                           
 11845                           ;usb/usb_device.c: 2173:                 {;usb/usb_device.c: 2174:                     p
      +                           = (BDT_ENTRY*)pBDTEntryIn[SetupPkt.EPNum];
 11846     1640  0844               	movf	68,w	;volatile
 11847     1641  390F               	andlw	15
 11848     1642  0709               	addwf	9,w
 11849     1643  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 11850     1644  0086               	movwf	6
 11851     1645  0187               	clrf	7
 11852     1646  3F40               	moviw [0]fsr1
 11853     1647  00F0               	movwf	USBStdGetStatusHandler@p
 11854     1648  3F41               	moviw [1]fsr1
 11855     1649                     L8:
 11856     1649  00F1               	movwf	USBStdGetStatusHandler@p+1
 11857                           
 11858                           ;usb/usb_device.c: 2177:                 if((p->STAT.UOWN == 1) && (p->STAT.BSTALL == 1)
      +                          )
 11859     164A  0870               	movf	USBStdGetStatusHandler@p,w
 11860     164B  0086               	movwf	6
 11861     164C  0871               	movf	USBStdGetStatusHandler@p+1,w
 11862     164D  0087               	movwf	7
 11863     164E  1F81               	btfss	1,7
 11864     164F  2E65               	goto	i1l634
 11865     1650  0870               	movf	USBStdGetStatusHandler@p,w
 11866     1651  0086               	movwf	6
 11867     1652  0871               	movf	USBStdGetStatusHandler@p+1,w
 11868     1653  0087               	movwf	7
 11869     1654  1D01               	btfss	1,2
 11870     1655  2E65               	goto	i1l634
 11871                           
 11872                           ;usb/usb_device.c: 2178:                 {;usb/usb_device.c: 2179:                     C
      +                          trlTrfData[0]=0x01;
 11873     1656  3001               	movlw	1
 11874     1657  00C8               	movwf	72	;volatile
 11875     1658  2E65               	goto	i1l634
 11876     1659                     i1l4210:
 11877     1659  0840               	movf	64,w	;volatile
 11878     165A  391F               	andlw	31
 11879                           
 11880                           ; Switch size 1, requested type "simple"
 11881                           ; Number of cases is 3, Range of values is 0 to 2
 11882                           ; switch strategies available:
 11883                           ; Name         Instructions Cycles
 11884                           ; simple_byte           10     6 (average)
 11885                           ; direct_byte           12     6 (fixed)
 11886                           ; jumptable            260     6 (fixed)
 11887                           ;	Chosen strategy is simple_byte
 11888     165B  3A00               	xorlw	0	; case 0
 11889     165C  1903               	skipnz
 11890     165D  2E1F               	goto	i1l631
 11891     165E  3A01               	xorlw	1	; case 1
 11892     165F  1903               	skipnz
 11893     1660  2E28               	goto	i1l635
 11894     1661  3A03               	xorlw	3	; case 2
 11895     1662  1903               	skipnz
 11896     1663  2E2B               	goto	i1l636
 11897     1664  2E65               	goto	i1l634
 11898     1665                     i1l634:
 11899                           
 11900                           ;usb/usb_device.c: 2185:     if(inPipes[0].info.bits.busy == 1)
 11901     1665  0021               	movlb	1	; select bank1
 11902     1666  1FEA               	btfss	(_inPipes^(0+128)+2),7	;volatile
 11903     1667  0008               	return
 11904                           
 11905                           ;usb/usb_device.c: 2186:     {;usb/usb_device.c: 2187:         inPipes[0].pSrc.bRam = (u
      +                          int8_t*)&CtrlTrfData;
 11906     1668  3048               	movlw	72
 11907     1669  00E8               	movwf	_inPipes^(0+128)	;volatile
 11908     166A  3000               	movlw	0
 11909     166B  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 11910                           
 11911                           ;usb/usb_device.c: 2188:         inPipes[0].info.bits.ctrl_trf_mem = 0x01;
 11912     166C  146A               	bsf	(_inPipes^(0+128)+2),0	;volatile
 11913                           
 11914                           ;usb/usb_device.c: 2189:         inPipes[0].wCount.v[0] = 2;
 11915     166D  3002               	movlw	2
 11916     166E  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11917     166F  0008               	return
 11918     1670                     __end_of_USBStdGetStatusHandler:
 11919                           
 11920                           	psect	text62
 11921     0AFE                     __ptext62:	
 11922 ;; *************** function _USBStdGetDscHandler *****************
 11923 ;; Defined at:
 11924 ;;		line 2047 in file "usb/usb_device.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;		None
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;		None
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 11933 ;; Tracked objects:
 11934 ;;		On entry : 1D/0
 11935 ;;		On exit  : 1E/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;Total ram usage:        3 bytes
 11943 ;; Hardware stack levels used: 1
 11944 ;; This function calls:
 11945 ;;		Nothing
 11946 ;; This function is called by:
 11947 ;;		_USBCheckStdRequest
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951     0AFE                     _USBStdGetDscHandler:	
 11952                           ;psect for function _USBStdGetDscHandler
 11953                           
 11954                           
 11955                           ;usb/usb_device.c: 2049:     if(SetupPkt.bmRequestType == 0x80)
 11956                           
 11957                           ;incstack = 0
 11958                           ; Regs used in _USBStdGetDscHandler: [wreg-fsr0h+status,2+status,0+pclath]
 11959     0AFE  3080               	movlw	128
 11960     0AFF  0020               	movlb	0	; select bank0
 11961     0B00  0640               	xorwf	64,w	;volatile
 11962     0B01  1D03               	btfss	3,2
 11963     0B02  0008               	return
 11964                           
 11965                           ;usb/usb_device.c: 2050:     {;usb/usb_device.c: 2051:         inPipes[0].info.Val = 0x0
      +                          0 | 0x80 | 0x40;
 11966     0B03  30C0               	movlw	192
 11967     0B04  0021               	movlb	1	; select bank1
 11968     0B05  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 11969                           
 11970                           ;usb/usb_device.c: 2053:         switch(SetupPkt.bDescriptorType)
 11971     0B06  2B6A               	goto	i1l4184
 11972     0B07                     i1l4158:
 11973                           
 11974                           ;usb/usb_device.c: 2057:                     inPipes[0].pSrc.bRom = (const uint8_t*)&dev
      +                          ice_dsc;
 11975     0B07  30B8               	movlw	low (_device_dsc| (0+32768))
 11976     0B08  0021               	movlb	1	; select bank1
 11977     0B09  00E8               	movwf	_inPipes^(0+128)	;volatile
 11978     0B0A  3098               	movlw	high (_device_dsc| (0+32768))
 11979     0B0B  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 11980                           
 11981                           ;usb/usb_device.c: 2061:                 inPipes[0].wCount.Val = sizeof(device_dsc);
 11982     0B0C  3000               	movlw	0
 11983     0B0D  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 11984     0B0E  3012               	movlw	18
 11985     0B0F  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 11986                           
 11987                           ;usb/usb_device.c: 2062:                 break;
 11988     0B10  0008               	return
 11989     0B11                     i1l4162:
 11990                           
 11991                           ;usb/usb_device.c: 2067:                 if(SetupPkt.bDscIndex < 1)
 11992     0B11  0842               	movf	66,w	;volatile
 11993     0B12  1D03               	btfss	3,2
 11994     0B13  2B40               	goto	i1l4170
 11995                           
 11996                           ;usb/usb_device.c: 2068:                 {;usb/usb_device.c: 2070:                      
      +                             inPipes[0].pSrc.bRom = *(USB_CD_Ptr+SetupPkt.bDscIndex);
 11997     0B14  0842               	movf	66,w	;volatile
 11998     0B15  00F0               	movwf	??_USBStdGetDscHandler
 11999     0B16  01F1               	clrf	??_USBStdGetDscHandler+1
 12000     0B17  35F0               	lslf	??_USBStdGetDscHandler,f
 12001     0B18  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12002     0B19  30D4               	movlw	low _USB_CD_Ptr
 12003     0B1A  0770               	addwf	??_USBStdGetDscHandler,w
 12004     0B1B  0084               	movwf	4
 12005     0B1C  3018               	movlw	high _USB_CD_Ptr
 12006     0B1D  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12007     0B1E  3880               	iorlw	128
 12008     0B1F  0085               	movwf	5
 12009     0B20  3F00               	moviw [0]fsr0
 12010     0B21  0021               	movlb	1	; select bank1
 12011     0B22  00E8               	movwf	_inPipes^(0+128)	;volatile
 12012     0B23  3F01               	moviw [1]fsr0
 12013     0B24  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12014                           
 12015                           ;usb/usb_device.c: 2078:                     inPipes[0].wCount.byte.LB = *(inPipes[0].pS
      +                          rc.bRom+2);
 12016     0B25  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 12017     0B26  00F1               	movwf	??_USBStdGetDscHandler+1
 12018     0B27  0868               	movf	_inPipes^(0+128),w	;volatile
 12019     0B28  00F0               	movwf	??_USBStdGetDscHandler
 12020     0B29  3002               	movlw	2
 12021     0B2A  0770               	addwf	??_USBStdGetDscHandler,w
 12022     0B2B  0084               	movwf	4
 12023     0B2C  0871               	movf	??_USBStdGetDscHandler+1,w
 12024     0B2D  1803               	skipnc
 12025     0B2E  0A71               	incf	??_USBStdGetDscHandler+1,w
 12026     0B2F  0085               	movwf	5
 12027     0B30  0800               	movf	0,w	;code access
 12028     0B31  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12029                           
 12030                           ;usb/usb_device.c: 2079:                     inPipes[0].wCount.byte.HB = *(inPipes[0].pS
      +                          rc.bRom+3);
 12031     0B32  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 12032     0B33  00F1               	movwf	??_USBStdGetDscHandler+1
 12033     0B34  0868               	movf	_inPipes^(0+128),w	;volatile
 12034     0B35  00F0               	movwf	??_USBStdGetDscHandler
 12035     0B36  3003               	movlw	3
 12036     0B37  0770               	addwf	??_USBStdGetDscHandler,w
 12037     0B38  0084               	movwf	4
 12038     0B39  0871               	movf	??_USBStdGetDscHandler+1,w
 12039     0B3A  1803               	skipnc
 12040     0B3B  0A71               	incf	??_USBStdGetDscHandler+1,w
 12041     0B3C  0085               	movwf	5
 12042     0B3D  0800               	movf	0,w	;code access
 12043     0B3E  00EC               	movwf	(_inPipes^(0+128)+4)	;volatile
 12044                           
 12045                           ;usb/usb_device.c: 2080:                 }
 12046     0B3F  0008               	return
 12047     0B40                     i1l4170:
 12048                           
 12049                           ;usb/usb_device.c: 2082:     {;usb/usb_device.c: 2083:      inPipes[0].info.Val = 0;
 12050     0B40  0021               	movlb	1	; select bank1
 12051     0B41  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 12052     0B42  0008               	return
 12053     0B43                     i1l4172:
 12054                           
 12055                           ;usb/usb_device.c: 2090:                 if(SetupPkt.bDscIndex<3)
 12056     0B43  3003               	movlw	3
 12057     0B44  0242               	subwf	66,w	;volatile
 12058     0B45  1803               	skipnc
 12059     0B46  2B64               	goto	i1l4178
 12060                           
 12061                           ;usb/usb_device.c: 2091:                 {;usb/usb_device.c: 2093:                     i
      +                          nPipes[0].pSrc.bRom = *(USB_SD_Ptr+SetupPkt.bDscIndex);
 12062     0B47  0842               	movf	66,w	;volatile
 12063     0B48  00F0               	movwf	??_USBStdGetDscHandler
 12064     0B49  01F1               	clrf	??_USBStdGetDscHandler+1
 12065     0B4A  35F0               	lslf	??_USBStdGetDscHandler,f
 12066     0B4B  0DF1               	rlf	??_USBStdGetDscHandler+1,f
 12067     0B4C  30CA               	movlw	low _USB_SD_Ptr
 12068     0B4D  0770               	addwf	??_USBStdGetDscHandler,w
 12069     0B4E  0084               	movwf	4
 12070     0B4F  3018               	movlw	high _USB_SD_Ptr
 12071     0B50  3D71               	addwfc	??_USBStdGetDscHandler+1,w
 12072     0B51  3880               	iorlw	128
 12073     0B52  0085               	movwf	5
 12074     0B53  3F00               	moviw [0]fsr0
 12075     0B54  0021               	movlb	1	; select bank1
 12076     0B55  00E8               	movwf	_inPipes^(0+128)	;volatile
 12077     0B56  3F01               	moviw [1]fsr0
 12078     0B57  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12079                           
 12080                           ;usb/usb_device.c: 2095:                     inPipes[0].wCount.Val = *inPipes[0].pSrc.bR
      +                          om;
 12081     0B58  0868               	movf	_inPipes^(0+128),w	;volatile
 12082     0B59  0084               	movwf	4
 12083     0B5A  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 12084     0B5B  0085               	movwf	5
 12085     0B5C  0800               	movf	0,w	;code access
 12086     0B5D  00F0               	movwf	??_USBStdGetDscHandler
 12087     0B5E  01F1               	clrf	??_USBStdGetDscHandler+1
 12088     0B5F  0870               	movf	??_USBStdGetDscHandler,w
 12089     0B60  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12090     0B61  0871               	movf	??_USBStdGetDscHandler+1,w
 12091     0B62  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12092                           
 12093                           ;usb/usb_device.c: 2096:                 }
 12094     0B63  0008               	return
 12095     0B64                     i1l4178:
 12096                           
 12097                           ;usb/usb_device.c: 2107:                 {;usb/usb_device.c: 2108:                     i
      +                          nPipes[0].info.Val = 0;
 12098     0B64  0021               	movlb	1	; select bank1
 12099     0B65  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 12100     0B66  0008               	return
 12101     0B67                     i1l4180:
 12102                           
 12103                           ;usb/usb_device.c: 2112:                 inPipes[0].info.Val = 0;
 12104     0B67  0021               	movlb	1	; select bank1
 12105     0B68  01EA               	clrf	(_inPipes^(0+128)+2)	;volatile
 12106                           
 12107                           ;usb/usb_device.c: 2113:                 break;
 12108     0B69  0008               	return
 12109     0B6A                     i1l4184:
 12110     0B6A  0020               	movlb	0	; select bank0
 12111     0B6B  0843               	movf	67,w	;volatile
 12112                           
 12113                           ; Switch size 1, requested type "simple"
 12114                           ; Number of cases is 3, Range of values is 1 to 3
 12115                           ; switch strategies available:
 12116                           ; Name         Instructions Cycles
 12117                           ; simple_byte           10     6 (average)
 12118                           ; direct_byte           15     9 (fixed)
 12119                           ; jumptable            263     9 (fixed)
 12120                           ;	Chosen strategy is simple_byte
 12121     0B6C  3A01               	xorlw	1	; case 1
 12122     0B6D  1903               	skipnz
 12123     0B6E  2B07               	goto	i1l4158
 12124     0B6F  3A03               	xorlw	3	; case 2
 12125     0B70  1903               	skipnz
 12126     0B71  2B11               	goto	i1l4162
 12127     0B72  3A01               	xorlw	1	; case 3
 12128     0B73  1903               	skipnz
 12129     0B74  2B43               	goto	i1l4172
 12130     0B75  2B67               	goto	i1l4180
 12131     0B76  0008               	return
 12132     0B77                     __end_of_USBStdGetDscHandler:
 12133                           
 12134                           	psect	text63
 12135     01D3                     __ptext63:	
 12136 ;; *************** function _USBStdFeatureReqHandler *****************
 12137 ;; Defined at:
 12138 ;;		line 2761 in file "usb/usb_device.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;		None
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  p               2   11[BANK0 ] PTR struct __BDT
 12143 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 12144 ;;  pUEP            2    8[BANK0 ] PTR unsigned char 
 12145 ;;		 -> UEP0(1), 
 12146 ;;  current_ep_d    1   10[BANK0 ] struct .
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  1    wreg      void 
 12149 ;; Registers used:
 12150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 1D/0
 12153 ;;		On exit  : 1F/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12158 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;Total ram usage:        7 bytes
 12161 ;; Hardware stack levels used: 1
 12162 ;; Hardware stack levels required when called: 4
 12163 ;; This function calls:
 12164 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12165 ;; This function is called by:
 12166 ;;		_USBCheckStdRequest
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170     01D3                     _USBStdFeatureReqHandler:	
 12171                           ;psect for function _USBStdFeatureReqHandler
 12172                           
 12173                           
 12174                           ;usb/usb_device.c: 2763:     BDT_ENTRY *p;;usb/usb_device.c: 2764:     EP_STATUS current
      +                          _ep_data;;usb/usb_device.c: 2768:         unsigned char* pUEP;;usb/usb_device.c: 2772:  
      +                             if((SetupPkt.bFeature == 1)&&
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _USBStdFeatureReqHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12178     01D3  0020               	movlb	0	; select bank0
 12179     01D4  0342               	decf	66,w	;volatile
 12180     01D5  1D03               	btfss	3,2
 12181     01D6  29E9               	goto	i1l4230
 12182     01D7  0840               	movf	64,w	;volatile
 12183     01D8  391F               	andlw	31
 12184     01D9  3A00               	xorlw	0
 12185     01DA  1D03               	skipz
 12186     01DB  29E9               	goto	i1l4230
 12187                           
 12188                           ;usb/usb_device.c: 2774:     {;usb/usb_device.c: 2775:         inPipes[0].info.bits.busy
      +                           = 1;
 12189     01DC  0021               	movlb	1	; select bank1
 12190     01DD  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12191                           
 12192                           ;usb/usb_device.c: 2776:         if(SetupPkt.bRequest == 3)
 12193     01DE  3003               	movlw	3
 12194     01DF  0020               	movlb	0	; select bank0
 12195     01E0  0641               	xorwf	65,w	;volatile
 12196     01E1  1D03               	btfss	3,2
 12197     01E2  29E7               	goto	i1l4228
 12198                           
 12199                           ;usb/usb_device.c: 2777:             RemoteWakeup = 1;
 12200     01E3  3001               	movlw	1
 12201     01E4  0022               	movlb	2	; select bank2
 12202     01E5  00DE               	movwf	_RemoteWakeup^(0+256)	;volatile
 12203     01E6  29E9               	goto	i1l4230
 12204     01E7                     i1l4228:
 12205                           
 12206                           ;usb/usb_device.c: 2779:             RemoteWakeup = 0;
 12207     01E7  0022               	movlb	2	; select bank2
 12208     01E8  01DE               	clrf	_RemoteWakeup^(0+256)	;volatile
 12209     01E9                     i1l4230:
 12210                           
 12211                           ;usb/usb_device.c: 2783:     if((SetupPkt.bFeature == 0)&&
 12212     01E9  0020               	movlb	0	; select bank0
 12213     01EA  0842               	movf	66,w	;volatile
 12214     01EB  1D03               	btfss	3,2
 12215     01EC  0008               	return
 12216     01ED  0840               	movf	64,w	;volatile
 12217     01EE  391F               	andlw	31
 12218     01EF  3A02               	xorlw	2
 12219     01F0  1D03               	skipz
 12220     01F1  0008               	return
 12221     01F2  0844               	movf	68,w	;volatile
 12222     01F3  390F               	andlw	15
 12223     01F4  3A00               	xorlw	0
 12224     01F5  1903               	skipnz
 12225     01F6  0008               	return
 12226     01F7  0844               	movf	68,w	;volatile
 12227     01F8  390F               	andlw	15
 12228     01F9  00D6               	movwf	??_USBStdFeatureReqHandler
 12229     01FA  3002               	movlw	2
 12230     01FB  0256               	subwf	??_USBStdFeatureReqHandler,w
 12231     01FC  1803               	skipnc
 12232     01FD  0008               	return
 12233     01FE  3020               	movlw	32
 12234     01FF  066C               	xorwf	_USBDeviceState,w
 12235     0200  1D03               	btfss	3,2
 12236     0201  0008               	return
 12237                           
 12238                           ;usb/usb_device.c: 2787:     {;usb/usb_device.c: 2790:   inPipes[0].info.bits.busy = 1;
 12239     0202  0021               	movlb	1	; select bank1
 12240     0203  17EA               	bsf	(_inPipes^(0+128)+2),7	;volatile
 12241                           
 12242                           ;usb/usb_device.c: 2793:         if(SetupPkt.EPDir == 0)
 12243     0204  0020               	movlb	0	; select bank0
 12244     0205  1BC4               	btfsc	68,7	;volatile
 12245     0206  2A16               	goto	i1l4244
 12246                           
 12247                           ;usb/usb_device.c: 2794:         {;usb/usb_device.c: 2795:             p = (BDT_ENTRY*)p
      +                          BDTEntryOut[SetupPkt.EPNum];
 12248     0207  0844               	movf	68,w	;volatile
 12249     0208  390F               	andlw	15
 12250     0209  0709               	addwf	9,w
 12251     020A  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12252     020B  0086               	movwf	6
 12253     020C  3001               	movlw	1	; select bank2/3
 12254     020D  0087               	movwf	7
 12255     020E  3F40               	moviw [0]fsr1
 12256     020F  00DB               	movwf	USBStdFeatureReqHandler@p
 12257     0210  3F41               	moviw [1]fsr1
 12258     0211  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12259                           
 12260                           ;usb/usb_device.c: 2796:             current_ep_data.Val = ep_data_out[SetupPkt.EPNum].V
      +                          al;
 12261     0212  0844               	movf	68,w	;volatile
 12262     0213  390F               	andlw	15
 12263     0214  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12264     0215  2A23               	goto	L9
 12265     0216                     i1l4244:	
 12266                           ;usb/usb_device.c: 2797:         }
 12267                           
 12268                           
 12269                           ;usb/usb_device.c: 2799:         {;usb/usb_device.c: 2800:             p = (BDT_ENTRY*)p
      +                          BDTEntryIn[SetupPkt.EPNum];
 12270     0216  0844               	movf	68,w	;volatile
 12271     0217  390F               	andlw	15
 12272     0218  0709               	addwf	9,w
 12273     0219  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12274     021A  0086               	movwf	6
 12275     021B  0187               	clrf	7
 12276     021C  3F40               	moviw [0]fsr1
 12277     021D  00DB               	movwf	USBStdFeatureReqHandler@p
 12278     021E  3F41               	moviw [1]fsr1
 12279     021F  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12280                           
 12281                           ;usb/usb_device.c: 2801:             current_ep_data.Val = ep_data_in[SetupPkt.EPNum].Va
      +                          l;
 12282     0220  0844               	movf	68,w	;volatile
 12283     0221  390F               	andlw	15
 12284     0222  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12285     0223                     L9:
 12286     0223  0086               	movwf	6
 12287     0224  3001               	movlw	1	; select bank2/3
 12288     0225  0087               	movwf	7
 12289     0226  0801               	movf	1,w
 12290     0227  00DA               	movwf	USBStdFeatureReqHandler@current_ep_data
 12291                           
 12292                           ;usb/usb_device.c: 2808:             if(current_ep_data.bits.ping_pong_state == 0)
 12293     0228  185A               	btfsc	USBStdFeatureReqHandler@current_ep_data,0
 12294     0229  2A34               	goto	i1l4250
 12295                           
 12296                           ;usb/usb_device.c: 2809:             {;usb/usb_device.c: 2810:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) & (~0x0004));
 12297     022A  30FB               	movlw	251
 12298     022B  00D6               	movwf	??_USBStdFeatureReqHandler
 12299     022C  30FF               	movlw	255
 12300     022D  00D7               	movwf	??_USBStdFeatureReqHandler+1
 12301     022E  085B               	movf	USBStdFeatureReqHandler@p,w
 12302     022F  0556               	andwf	??_USBStdFeatureReqHandler,w
 12303     0230  00DB               	movwf	USBStdFeatureReqHandler@p
 12304     0231  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12305     0232  0557               	andwf	??_USBStdFeatureReqHandler+1,w
 12306     0233  2A39               	goto	L10
 12307     0234                     i1l4250:	
 12308                           ;usb/usb_device.c: 2811:             }
 12309                           
 12310                           
 12311                           ;usb/usb_device.c: 2813:             {;usb/usb_device.c: 2814:                 p = (BDT_
      +                          ENTRY*)(((uint16_t)p) | 0x0004);
 12312     0234  3004               	movlw	4
 12313     0235  045B               	iorwf	USBStdFeatureReqHandler@p,w
 12314     0236  00DB               	movwf	USBStdFeatureReqHandler@p
 12315     0237  3000               	movlw	0
 12316     0238  045C               	iorwf	USBStdFeatureReqHandler@p+1,w
 12317     0239                     L10:
 12318     0239  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12319                           
 12320                           ;usb/usb_device.c: 2820:         if(SetupPkt.EPDir == 0)
 12321     023A  1BC4               	btfsc	68,7	;volatile
 12322     023B  2A48               	goto	i1l4256
 12323                           
 12324                           ;usb/usb_device.c: 2821:         {;usb/usb_device.c: 2822:             pBDTEntryOut[Setu
      +                          pPkt.EPNum] = (volatile BDT_ENTRY *)p;
 12325     023C  0844               	movf	68,w	;volatile
 12326     023D  390F               	andlw	15
 12327     023E  0709               	addwf	9,w
 12328     023F  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 12329     0240  0086               	movwf	6
 12330     0241  3001               	movlw	1	; select bank2/3
 12331     0242  0087               	movwf	7
 12332     0243  085B               	movf	USBStdFeatureReqHandler@p,w
 12333     0244  3FC0               	movwi [0]fsr1
 12334     0245  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12335     0246  3FC1               	movwi [1]fsr1
 12336                           
 12337                           ;usb/usb_device.c: 2823:         }
 12338     0247  2A52               	goto	i1l4258
 12339     0248                     i1l4256:
 12340                           
 12341                           ;usb/usb_device.c: 2825:         {;usb/usb_device.c: 2826:             pBDTEntryIn[Setup
      +                          Pkt.EPNum] = (volatile BDT_ENTRY *)p;
 12342     0248  0844               	movf	68,w	;volatile
 12343     0249  390F               	andlw	15
 12344     024A  0709               	addwf	9,w
 12345     024B  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 12346     024C  0086               	movwf	6
 12347     024D  0187               	clrf	7
 12348     024E  085B               	movf	USBStdFeatureReqHandler@p,w
 12349     024F  3FC0               	movwi [0]fsr1
 12350     0250  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12351     0251  3FC1               	movwi [1]fsr1
 12352     0252                     i1l4258:
 12353                           
 12354                           ;usb/usb_device.c: 2830:         if(SetupPkt.bRequest == 3)
 12355     0252  3003               	movlw	3
 12356     0253  0641               	xorwf	65,w	;volatile
 12357     0254  1D03               	btfss	3,2
 12358     0255  2A74               	goto	i1l4272
 12359                           
 12360                           ;usb/usb_device.c: 2831:         {;usb/usb_device.c: 2832:             if(p->STAT.UOWN =
      +                          = 1)
 12361     0256  085B               	movf	USBStdFeatureReqHandler@p,w
 12362     0257  0086               	movwf	6
 12363     0258  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12364     0259  0087               	movwf	7
 12365     025A  1F81               	btfss	1,7
 12366     025B  2A69               	goto	i1l4268
 12367                           
 12368                           ;usb/usb_device.c: 2833:             {;usb/usb_device.c: 2836:                 if(SetupP
      +                          kt.EPDir == 0)
 12369     025C  1BC4               	btfsc	68,7	;volatile
 12370     025D  2A62               	goto	i1l4266
 12371                           
 12372                           ;usb/usb_device.c: 2837:                 {;usb/usb_device.c: 2838:                     e
      +                          p_data_out[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12373     025E  0844               	movf	68,w	;volatile
 12374     025F  390F               	andlw	15
 12375     0260  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12376     0261  2A65               	goto	L11
 12377     0262                     i1l4266:	
 12378                           ;usb/usb_device.c: 2839:                 }
 12379                           
 12380                           
 12381                           ;usb/usb_device.c: 2841:                 {;usb/usb_device.c: 2842:                     e
      +                          p_data_in[SetupPkt.EPNum].bits.transfer_terminated = 1;
 12382     0262  0844               	movf	68,w	;volatile
 12383     0263  390F               	andlw	15
 12384     0264  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12385     0265                     L11:
 12386     0265  0086               	movwf	6
 12387     0266  3001               	movlw	1	; select bank2/3
 12388     0267  0087               	movwf	7
 12389     0268  1481               	bsf	1,1
 12390     0269                     i1l4268:
 12391                           
 12392                           ;usb/usb_device.c: 2847:             p->STAT.Val |= 0x04;
 12393     0269  085B               	movf	USBStdFeatureReqHandler@p,w
 12394     026A  0086               	movwf	6
 12395     026B  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12396     026C  0087               	movwf	7
 12397     026D  1501               	bsf	1,2
 12398                           
 12399                           ;usb/usb_device.c: 2848:             p->STAT.Val |= 0x80;
 12400     026E  085B               	movf	USBStdFeatureReqHandler@p,w
 12401     026F  0086               	movwf	6
 12402     0270  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12403     0271  0087               	movwf	7
 12404     0272  1781               	bsf	1,7
 12405                           
 12406                           ;usb/usb_device.c: 2849:         }
 12407     0273  0008               	return
 12408     0274                     i1l4272:
 12409                           
 12410                           ;usb/usb_device.c: 2851:         {;usb/usb_device.c: 2855:                 p = (BDT_ENTR
      +                          Y*)(((uint16_t)p) ^ 0x0004);
 12411     0274  3004               	movlw	4
 12412     0275  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12413     0276  00DB               	movwf	USBStdFeatureReqHandler@p
 12414     0277  3000               	movlw	0
 12415     0278  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12416     0279  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12417                           
 12418                           ;usb/usb_device.c: 2857:                 if(p->STAT.UOWN == 1)
 12419     027A  085B               	movf	USBStdFeatureReqHandler@p,w
 12420     027B  0086               	movwf	6
 12421     027C  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12422     027D  0087               	movwf	7
 12423     027E  1F81               	btfss	1,7
 12424     027F  2A9D               	goto	i1l4282
 12425                           
 12426                           ;usb/usb_device.c: 2858:                 {;usb/usb_device.c: 2861:                     p
      +                          ->STAT.Val &= (~0x80);
 12427     0280  307F               	movlw	127
 12428     0281  00D6               	movwf	??_USBStdFeatureReqHandler
 12429     0282  085B               	movf	USBStdFeatureReqHandler@p,w
 12430     0283  0086               	movwf	6
 12431     0284  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12432     0285  0087               	movwf	7
 12433     0286  0856               	movf	??_USBStdFeatureReqHandler,w
 12434     0287  0581               	andwf	1,f
 12435                           
 12436                           ;usb/usb_device.c: 2862:                     p->STAT.Val |= 0x40;
 12437     0288  085B               	movf	USBStdFeatureReqHandler@p,w
 12438     0289  0086               	movwf	6
 12439     028A  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12440     028B  0087               	movwf	7
 12441     028C  1701               	bsf	1,6
 12442                           
 12443                           ;usb/usb_device.c: 2863:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12444     028D  3005               	movlw	5
 12445     028E  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12446     028F  3000               	movlw	0
 12447     0290  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12448     0291  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12449     0292  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12450     0293  085B               	movf	USBStdFeatureReqHandler@p,w
 12451     0294  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12452     0295  3002               	movlw	2
 12453     0296  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12454     0297  3000               	movlw	0
 12455     0298  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12456     0299  3194  2435  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12457                           
 12458                           ;usb/usb_device.c: 2864:                 }
 12459     029C  2AA2               	goto	i1l4284
 12460     029D                     i1l4282:
 12461                           
 12462                           ;usb/usb_device.c: 2866:                 {;usb/usb_device.c: 2868:      p->STAT.Val |= 0
      +                          x40;
 12463     029D  085B               	movf	USBStdFeatureReqHandler@p,w
 12464     029E  0086               	movwf	6
 12465     029F  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12466     02A0  0087               	movwf	7
 12467     02A1  1701               	bsf	1,6
 12468     02A2                     i1l4284:
 12469                           
 12470                           ;usb/usb_device.c: 2873:                 p = (BDT_ENTRY*)(((uint16_t)p) ^ 0x0004);
 12471     02A2  3004               	movlw	4
 12472     02A3  0020               	movlb	0	; select bank0
 12473     02A4  065B               	xorwf	USBStdFeatureReqHandler@p,w
 12474     02A5  00DB               	movwf	USBStdFeatureReqHandler@p
 12475     02A6  3000               	movlw	0
 12476     02A7  065C               	xorwf	USBStdFeatureReqHandler@p+1,w
 12477     02A8  00DC               	movwf	USBStdFeatureReqHandler@p+1
 12478                           
 12479                           ;usb/usb_device.c: 2879:                 if((current_ep_data.bits.transfer_terminated !=
      +                           0) || (p->STAT.UOWN == 1))
 12480     02A9  18DA               	btfsc	USBStdFeatureReqHandler@current_ep_data,1
 12481     02AA  2AB1               	goto	i1l728
 12482     02AB  085B               	movf	USBStdFeatureReqHandler@p,w
 12483     02AC  0086               	movwf	6
 12484     02AD  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12485     02AE  0087               	movwf	7
 12486     02AF  1F81               	btfss	1,7
 12487     02B0  2AD6               	goto	i1l4296
 12488     02B1                     i1l728:
 12489                           
 12490                           ;usb/usb_device.c: 2880:                 {;usb/usb_device.c: 2881:                     i
      +                          f(SetupPkt.EPDir == 0)
 12491     02B1  1BC4               	btfsc	68,7	;volatile
 12492     02B2  2AB7               	goto	i1l4292
 12493                           
 12494                           ;usb/usb_device.c: 2882:                     {;usb/usb_device.c: 2883:                  
      +                                 ep_data_out[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12495     02B3  0844               	movf	68,w	;volatile
 12496     02B4  390F               	andlw	15
 12497     02B5  3E3A               	addlw	(low (_ep_data_out| (0+256)))& (0+255)
 12498     02B6  2ABA               	goto	L12
 12499     02B7                     i1l4292:	
 12500                           ;usb/usb_device.c: 2884:                     }
 12501                           
 12502                           
 12503                           ;usb/usb_device.c: 2886:                     {;usb/usb_device.c: 2887:                  
      +                                 ep_data_in[SetupPkt.EPNum].bits.transfer_terminated = 0;
 12504     02B7  0844               	movf	68,w	;volatile
 12505     02B8  390F               	andlw	15
 12506     02B9  3E3C               	addlw	(low (_ep_data_in| (0+256)))& (0+255)
 12507     02BA                     L12:
 12508     02BA  0086               	movwf	6
 12509     02BB  3001               	movlw	1	; select bank2/3
 12510     02BC  0087               	movwf	7
 12511     02BD  1081               	bcf	1,1
 12512                           
 12513                           ;usb/usb_device.c: 2890:                     p->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12514                           
 12515                           ;usb/usb_device.c: 2888:                     }
 12516     02BE  303B               	movlw	59
 12517     02BF  00D6               	movwf	??_USBStdFeatureReqHandler
 12518     02C0  085B               	movf	USBStdFeatureReqHandler@p,w
 12519     02C1  0086               	movwf	6
 12520     02C2  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12521     02C3  0087               	movwf	7
 12522     02C4  0856               	movf	??_USBStdFeatureReqHandler,w
 12523     02C5  0581               	andwf	1,f
 12524                           
 12525                           ;usb/usb_device.c: 2893:                     USER_USB_CALLBACK_EVENT_HANDLER((USB_EVENT)
      +                          EVENT_TRANSFER_TERMINATED,p,sizeof(p));
 12526     02C6  3005               	movlw	5
 12527     02C7  00D0               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event
 12528     02C8  3000               	movlw	0
 12529     02C9  00D1               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@event+1
 12530     02CA  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12531     02CB  00D3               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata+1
 12532     02CC  085B               	movf	USBStdFeatureReqHandler@p,w
 12533     02CD  00D2               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@pdata
 12534     02CE  3002               	movlw	2
 12535     02CF  00D4               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size
 12536     02D0  3000               	movlw	0
 12537     02D1  00D5               	movwf	USER_USB_CALLBACK_EVENT_HANDLER@size+1
 12538     02D2  3194  2435  3181   	fcall	_USER_USB_CALLBACK_EVENT_HANDLER
 12539                           
 12540                           ;usb/usb_device.c: 2894:                 }
 12541     02D5  2ADE               	goto	i1l4298
 12542     02D6                     i1l4296:
 12543                           
 12544                           ;usb/usb_device.c: 2896:                 {;usb/usb_device.c: 2898:                     p
      +                          ->STAT.Val &= ~(0x80 | 0x40 | 0x04);
 12545     02D6  303B               	movlw	59
 12546     02D7  00D6               	movwf	??_USBStdFeatureReqHandler
 12547     02D8  085B               	movf	USBStdFeatureReqHandler@p,w
 12548     02D9  0086               	movwf	6
 12549     02DA  085C               	movf	USBStdFeatureReqHandler@p+1,w
 12550     02DB  0087               	movwf	7
 12551     02DC  0856               	movf	??_USBStdFeatureReqHandler,w
 12552     02DD  0581               	andwf	1,f
 12553     02DE                     i1l4298:
 12554                           
 12555                           ;usb/usb_device.c: 2946:                 pUEP = (unsigned char*)(&UEP0+SetupPkt.EPNum);
 12556     02DE  0020               	movlb	0	; select bank0
 12557     02DF  0844               	movf	68,w	;volatile
 12558     02E0  390F               	andlw	15
 12559     02E1  3E98               	addlw	152
 12560     02E2  00D6               	movwf	??_USBStdFeatureReqHandler
 12561     02E3  01D7               	clrf	??_USBStdFeatureReqHandler+1
 12562     02E4  300E               	movlw	14
 12563     02E5  3DD7               	addwfc	??_USBStdFeatureReqHandler+1,f
 12564     02E6  0856               	movf	??_USBStdFeatureReqHandler,w
 12565     02E7  00D8               	movwf	USBStdFeatureReqHandler@pUEP
 12566     02E8  0857               	movf	??_USBStdFeatureReqHandler+1,w
 12567     02E9  00D9               	movwf	USBStdFeatureReqHandler@pUEP+1
 12568                           
 12569                           ;usb/usb_device.c: 2950:             *pUEP &= ~0x0001;
 12570     02EA  30FE               	movlw	254
 12571     02EB  00D6               	movwf	??_USBStdFeatureReqHandler
 12572     02EC  0858               	movf	USBStdFeatureReqHandler@pUEP,w
 12573     02ED  0086               	movwf	6
 12574     02EE  0859               	movf	USBStdFeatureReqHandler@pUEP+1,w
 12575     02EF  0087               	movwf	7
 12576     02F0  0856               	movf	??_USBStdFeatureReqHandler,w
 12577     02F1  0581               	andwf	1,f
 12578     02F2  0008               	return
 12579     02F3                     __end_of_USBStdFeatureReqHandler:
 12580                           
 12581                           	psect	text64
 12582     1435                     __ptext64:	
 12583 ;; *************** function _USER_USB_CALLBACK_EVENT_HANDLER *****************
 12584 ;; Defined at:
 12585 ;;		line 66 in file "usb/usb_events.c"
 12586 ;; Parameters:    Size  Location     Type
 12587 ;;  event           2    0[BANK0 ] enum E238
 12588 ;;  pdata           2    2[BANK0 ] PTR void 
 12589 ;;		 -> RAM(4096), USTATcopy(1), USBActiveConfiguration(1), NULL(0), 
 12590 ;;		 -> BDT(32), 
 12591 ;;  size            2    4[BANK0 ] unsigned short 
 12592 ;; Auto vars:     Size  Location     Type
 12593 ;;		None
 12594 ;; Return value:  Size  Location     Type
 12595 ;;                  1    wreg      _Bool 
 12596 ;; Registers used:
 12597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12598 ;; Tracked objects:
 12599 ;;		On entry : 1F/0
 12600 ;;		On exit  : 0/0
 12601 ;;		Unchanged: 0/0
 12602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12603 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;Total ram usage:        6 bytes
 12608 ;; Hardware stack levels used: 1
 12609 ;; Hardware stack levels required when called: 3
 12610 ;; This function calls:
 12611 ;;		_APP_KeyboardInit
 12612 ;;		_USBCheckHIDRequest
 12613 ;; This function is called by:
 12614 ;;		_USBDeviceTasks
 12615 ;;		_USBStdSetCfgHandler
 12616 ;;		_USBSuspend
 12617 ;;		_USBWakeFromSuspend
 12618 ;;		_USBCtrlTrfSetupHandler
 12619 ;;		_USBCheckStdRequest
 12620 ;;		_USBStdFeatureReqHandler
 12621 ;; This function uses a non-reentrant model
 12622 ;;
 12623                           
 12624     1435                     _USER_USB_CALLBACK_EVENT_HANDLER:	
 12625                           ;psect for function _USER_USB_CALLBACK_EVENT_HANDLER
 12626                           
 12627                           
 12628                           ;usb/usb_events.c: 66: _Bool USER_USB_CALLBACK_EVENT_HANDLER(USB_EVENT event, void *pdat
      +                          a, uint16_t size);usb/usb_events.c: 67: {;usb/usb_events.c: 68:     switch((int)event)
 12629                           
 12630                           ;incstack = 0
 12631                           ; Regs used in _USER_USB_CALLBACK_EVENT_HANDLER: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 12632     1435  2C4A               	goto	i1l3976
 12633     1436                     i1l3964:
 12634                           
 12635                           ;usb/usb_events.c: 77:             if(SOFCounter < 32767)
 12636     1436  0A65               	incf	_SOFCounter,w	;volatile
 12637     1437  307F               	movlw	127
 12638     1438  1903               	skipnz
 12639     1439  0666               	xorwf	_SOFCounter+1,w	;volatile
 12640     143A  1903               	btfsc	3,2
 12641     143B  2C41               	goto	i1l3968
 12642                           
 12643                           ;usb/usb_events.c: 78:             {;usb/usb_events.c: 79:                 SOFCounter++;
 12644     143C  3001               	movlw	1
 12645     143D  07E5               	addwf	_SOFCounter,f	;volatile
 12646     143E  3000               	movlw	0
 12647     143F  3DE6               	addwfc	_SOFCounter+1,f	;volatile
 12648                           
 12649                           ;usb/usb_events.c: 80:             }
 12650     1440  0008               	return
 12651     1441                     i1l3968:
 12652                           
 12653                           ;usb/usb_events.c: 82:             {;usb/usb_events.c: 83:                 SOFCounter = 
      +                          0;
 12654     1441  01E5               	clrf	_SOFCounter	;volatile
 12655     1442  01E6               	clrf	_SOFCounter+1	;volatile
 12656     1443  0008               	return
 12657     1444                     i1l3970:
 12658                           
 12659                           ;usb/usb_events.c: 114:             APP_KeyboardInit();
 12660     1444  3195  25CB         	fcall	_APP_KeyboardInit
 12661                           
 12662                           ;usb/usb_events.c: 115:             break;
 12663     1446  0008               	return
 12664     1447                     i1l3972:
 12665                           
 12666                           ;usb/usb_events.c: 123:             USBCheckHIDRequest();
 12667     1447  318B  23F2         	fcall	_USBCheckHIDRequest
 12668                           
 12669                           ;usb/usb_events.c: 124:             break;
 12670     1449  0008               	return
 12671     144A                     i1l3976:
 12672                           
 12673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12674                           ; Switch size 1, requested type "simple"
 12675                           ; Number of cases is 2, Range of values is 0 to 127
 12676                           ; switch strategies available:
 12677                           ; Name         Instructions Cycles
 12678                           ; simple_byte            7     4 (average)
 12679                           ; direct_byte          262     6 (fixed)
 12680                           ; jumptable            260     6 (fixed)
 12681                           ;	Chosen strategy is simple_byte
 12682     144A  0851               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event+1,w
 12683     144B  3A00               	xorlw	0	; case 0
 12684     144C  1903               	skipnz
 12685     144D  2C52               	goto	i1l6232
 12686     144E  3A7F               	xorlw	127	; case 127
 12687     144F  1903               	skipnz
 12688     1450  2C6C               	goto	i1l6234
 12689     1451  2C71               	goto	i1l818
 12690     1452                     i1l6232:
 12691                           
 12692                           ; Switch size 1, requested type "simple"
 12693                           ; Number of cases is 8, Range of values is 1 to 117
 12694                           ; switch strategies available:
 12695                           ; Name         Instructions Cycles
 12696                           ; simple_byte           25    13 (average)
 12697                           ; direct_byte          243     9 (fixed)
 12698                           ; jumptable            263     9 (fixed)
 12699                           ;	Chosen strategy is simple_byte
 12700     1452  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12701     1453  3A01               	xorlw	1	; case 1
 12702     1454  1903               	skipnz
 12703     1455  2C44               	goto	i1l3970
 12704     1456  3A03               	xorlw	3	; case 2
 12705     1457  1903               	skipnz
 12706     1458  2C71               	goto	i1l818
 12707     1459  3A01               	xorlw	1	; case 3
 12708     145A  1903               	skipnz
 12709     145B  2C47               	goto	i1l3972
 12710     145C  3A06               	xorlw	6	; case 5
 12711     145D  1903               	skipnz
 12712     145E  2C71               	goto	i1l818
 12713     145F  3A77               	xorlw	119	; case 114
 12714     1460  1903               	skipnz
 12715     1461  2C71               	goto	i1l818
 12716     1462  3A01               	xorlw	1	; case 115
 12717     1463  1903               	skipnz
 12718     1464  2C36               	goto	i1l3964
 12719     1465  3A07               	xorlw	7	; case 116
 12720     1466  1903               	skipnz
 12721     1467  2C71               	goto	i1l818
 12722     1468  3A01               	xorlw	1	; case 117
 12723     1469  1903               	skipnz
 12724     146A  2C71               	goto	i1l818
 12725     146B  2C71               	goto	i1l818
 12726     146C                     i1l6234:
 12727                           
 12728                           ; Switch size 1, requested type "simple"
 12729                           ; Number of cases is 1, Range of values is 255 to 255
 12730                           ; switch strategies available:
 12731                           ; Name         Instructions Cycles
 12732                           ; simple_byte            4     3 (average)
 12733                           ; direct_byte            7     5 (fixed)
 12734                           ; jumptable            263     9 (fixed)
 12735                           ;	Chosen strategy is simple_byte
 12736     146C  0850               	movf	USER_USB_CALLBACK_EVENT_HANDLER@event,w
 12737     146D  3AFF               	xorlw	255	; case 255
 12738     146E  1903               	skipnz
 12739     146F  2C71               	goto	i1l818
 12740     1470  2C71               	goto	i1l818
 12741     1471                     i1l818:
 12742     1471  0008               	return
 12743     1472                     __end_of_USER_USB_CALLBACK_EVENT_HANDLER:
 12744                           
 12745                           	psect	text65
 12746     0BF2                     __ptext65:	
 12747 ;; *************** function _USBCheckHIDRequest *****************
 12748 ;; Defined at:
 12749 ;;		line 161 in file "usb/usb_device_hid.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;		None
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;		None
 12754 ;; Return value:  Size  Location     Type
 12755 ;;                  1    wreg      void 
 12756 ;; Registers used:
 12757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12758 ;; Tracked objects:
 12759 ;;		On entry : 1F/0
 12760 ;;		On exit  : 1C/0
 12761 ;;		Unchanged: 0/0
 12762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12767 ;;Total ram usage:        0 bytes
 12768 ;; Hardware stack levels used: 1
 12769 ;; Hardware stack levels required when called: 1
 12770 ;; This function calls:
 12771 ;;		_USBHIDCBSetIdleRateHandler
 12772 ;;		_USBHIDCBSetReportHandler
 12773 ;; This function is called by:
 12774 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778     0BF2                     _USBCheckHIDRequest:	
 12779                           ;psect for function _USBCheckHIDRequest
 12780                           
 12781                           
 12782                           ;usb/usb_device_hid.c: 163:     if(SetupPkt.Recipient != (0x01)) return;
 12783                           
 12784                           ;incstack = 0
 12785                           ; Regs used in _USBCheckHIDRequest: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12786     0BF2  0840               	movf	64,w	;volatile
 12787     0BF3  391F               	andlw	31
 12788     0BF4  3A01               	xorlw	1
 12789     0BF5  1D03               	btfss	3,2
 12790     0BF6  0008               	return
 12791                           
 12792                           ;usb/usb_device_hid.c: 164:     if(SetupPkt.bIntfID != 0x00) return;
 12793     0BF7  0844               	movf	68,w	;volatile
 12794     0BF8  1D03               	btfss	3,2
 12795     0BF9  0008               	return
 12796                           
 12797                           ;usb/usb_device_hid.c: 171:     if(SetupPkt.bRequest == 6)
 12798     0BFA  3006               	movlw	6
 12799     0BFB  0641               	xorwf	65,w	;volatile
 12800     0BFC  1903               	btfsc	3,2
 12801     0BFD  2C17               	goto	i1l3898
 12802     0BFE  2C22               	goto	i1l3900
 12803     0BFF                     i1l3886:
 12804                           
 12805                           ;usb/usb_device_hid.c: 176:                 if(USBActiveConfiguration == 1)
 12806     0BFF  036F               	decf	_USBActiveConfiguration,w	;volatile
 12807     0C00  1D03               	btfss	3,2
 12808     0C01  2C22               	goto	i1l3900
 12809                           
 12810                           ;usb/usb_device_hid.c: 177:                 {;usb/usb_device_hid.c: 178:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&configDescriptor1 + 18; inPipes[0].wCount
      +                          .Val = sizeof(USB_HID_DSC)+3; inPipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12811     0C02  3085               	movlw	low ((_configDescriptor1| (0+32768)+18))
 12812     0C03  0021               	movlb	1	; select bank1
 12813     0C04  00E8               	movwf	_inPipes^(0+128)	;volatile
 12814     0C05  3098               	movlw	high ((_configDescriptor1| (0+32768)+18))
 12815     0C06  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 12816     0C07  3000               	movlw	0
 12817     0C08  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12818     0C09  3009               	movlw	9
 12819     0C0A  2C13               	goto	L14
 12820     0C0B                     i1l3892:
 12821                           
 12822                           ;usb/usb_device_hid.c: 186:                 {;usb/usb_device_hid.c: 187:                
      +                               { inPipes[0].pSrc.bRom = (const uint8_t*)&hid_rpt01; inPipes[0].wCount.Val = 63; in
      +                          Pipes[0].info.Val = 0x40 | 0x80 | 0x00; };
 12823     0C0B  3000               	movlw	low (_hid_rpt01| (0+32768))
 12824     0C0C  0021               	movlb	1	; select bank1
 12825     0C0D  00E8               	movwf	_inPipes^(0+128)	;volatile
 12826     0C0E  3098               	movlw	high (_hid_rpt01| (0+32768))
 12827     0C0F  00E9               	movwf	(_inPipes^(0+128)+1)	;volatile
 12828     0C10  3000               	movlw	0
 12829     0C11  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12830     0C12  303F               	movlw	63
 12831     0C13                     L14:
 12832     0C13  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12833     0C14  30C0               	movlw	192
 12834     0C15  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12835                           
 12836                           ;usb/usb_device_hid.c: 191:                 };usb/usb_device_hid.c: 192:                
      +                           break;
 12837     0C16  2C22               	goto	i1l3900
 12838     0C17                     i1l3898:
 12839     0C17  0843               	movf	67,w	;volatile
 12840                           
 12841                           ; Switch size 1, requested type "simple"
 12842                           ; Number of cases is 3, Range of values is 33 to 35
 12843                           ; switch strategies available:
 12844                           ; Name         Instructions Cycles
 12845                           ; simple_byte           10     6 (average)
 12846                           ; direct_byte           15     9 (fixed)
 12847                           ; jumptable            263     9 (fixed)
 12848                           ;	Chosen strategy is simple_byte
 12849     0C18  3A21               	xorlw	33	; case 33
 12850     0C19  1903               	skipnz
 12851     0C1A  2BFF               	goto	i1l3886
 12852     0C1B  3A03               	xorlw	3	; case 34
 12853     0C1C  1903               	skipnz
 12854     0C1D  2C0B               	goto	i1l3892
 12855     0C1E  3A01               	xorlw	1	; case 35
 12856     0C1F  1903               	skipnz
 12857     0C20  2C22               	goto	i1l3900
 12858     0C21  2C22               	goto	i1l3900
 12859     0C22                     i1l3900:
 12860                           
 12861                           ;usb/usb_device_hid.c: 209:     if(SetupPkt.RequestType != (0x20>>5))
 12862     0C22  0020               	movlb	0	; select bank0
 12863     0C23  0E40               	swapf	64,w	;volatile
 12864     0C24  0C89               	rrf	9,f
 12865     0C25  3903               	andlw	3
 12866     0C26  3A01               	xorlw	1
 12867     0C27  1D03               	btfss	3,2
 12868     0C28  0008               	return
 12869     0C29  2C5B               	goto	i1l3926
 12870     0C2A                     i1l3904:
 12871                           
 12872                           ;usb/usb_device_hid.c: 223:                 USBHIDCBSetReportHandler();
 12873     0C2A  319F  277C         	fcall	_USBHIDCBSetReportHandler
 12874                           
 12875                           ;usb/usb_device_hid.c: 225:             break;
 12876     0C2C  0008               	return
 12877     0C2D                     i1l3906:
 12878                           
 12879                           ;usb/usb_device_hid.c: 227:             { inPipes[0].pSrc.bRam = (uint8_t*)&idle_rate; i
      +                          nPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x40 | 0x80 | 0x01; };
 12880     0C2D  3069               	movlw	low _idle_rate
 12881     0C2E  0021               	movlb	1	; select bank1
 12882     0C2F  00E8               	movwf	_inPipes^(0+128)	;volatile
 12883     0C30  3001               	movlw	high _idle_rate
 12884     0C31  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12885     0C32  3000               	movlw	0
 12886     0C33  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12887     0C34  3001               	movlw	1
 12888     0C35  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12889     0C36  30C1               	movlw	193
 12890     0C37  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12891                           
 12892                           ;usb/usb_device_hid.c: 231:             break;
 12893     0C38  0008               	return
 12894     0C39                     i1l3912:
 12895                           
 12896                           ;usb/usb_device_hid.c: 233:             inPipes[0].info.Val = 0x00 | 0x80;
 12897     0C39  3080               	movlw	128
 12898     0C3A  0021               	movlb	1	; select bank1
 12899     0C3B  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12900                           
 12901                           ;usb/usb_device_hid.c: 234:             idle_rate = SetupPkt.W_Value.byte.HB;
 12902     0C3C  0020               	movlb	0	; select bank0
 12903     0C3D  0843               	movf	67,w	;volatile
 12904     0C3E  0022               	movlb	2	; select bank2
 12905     0C3F  00E9               	movwf	_idle_rate^(0+256)
 12906                           
 12907                           ;usb/usb_device_hid.c: 235:             USBHIDCBSetIdleRateHandler(SetupPkt.W_Value.byte
      +                          .LB, idle_rate);
 12908     0C40  0869               	movf	_idle_rate^(0+256),w
 12909     0C41  00F0               	movwf	USBHIDCBSetIdleRateHandler@newIdleRate
 12910     0C42  0020               	movlb	0	; select bank0
 12911     0C43  0842               	movf	66,w	;volatile
 12912     0C44  319F  276F         	fcall	_USBHIDCBSetIdleRateHandler
 12913                           
 12914                           ;usb/usb_device_hid.c: 236:             break;
 12915     0C46  0008               	return
 12916     0C47                     i1l3916:
 12917                           
 12918                           ;usb/usb_device_hid.c: 238:             { inPipes[0].pSrc.bRam = (uint8_t*)&active_proto
      +                          col; inPipes[0].wCount.Val = 1; inPipes[0].info.Val = 0x00 | 0x80 | 0x01; };
 12919     0C47  3068               	movlw	low _active_protocol
 12920     0C48  0021               	movlb	1	; select bank1
 12921     0C49  00E8               	movwf	_inPipes^(0+128)	;volatile
 12922     0C4A  3001               	movlw	high _active_protocol
 12923     0C4B  00E9               	movwf	(_inPipes+1)^(0+128)	;volatile
 12924     0C4C  3000               	movlw	0
 12925     0C4D  00EC               	movwf	((_inPipes+1)^(0+128)+3)	;volatile
 12926     0C4E  3001               	movlw	1
 12927     0C4F  00EB               	movwf	(_inPipes^(0+128)+3)	;volatile
 12928     0C50  3081               	movlw	129
 12929     0C51  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12930                           
 12931                           ;usb/usb_device_hid.c: 242:             break;
 12932     0C52  0008               	return
 12933     0C53                     i1l3922:
 12934                           
 12935                           ;usb/usb_device_hid.c: 244:             inPipes[0].info.Val = 0x00 | 0x80;
 12936     0C53  3080               	movlw	128
 12937     0C54  0021               	movlb	1	; select bank1
 12938     0C55  00EA               	movwf	(_inPipes^(0+128)+2)	;volatile
 12939                           
 12940                           ;usb/usb_device_hid.c: 245:             active_protocol = SetupPkt.W_Value.byte.LB;
 12941     0C56  0020               	movlb	0	; select bank0
 12942     0C57  0842               	movf	66,w	;volatile
 12943     0C58  0022               	movlb	2	; select bank2
 12944     0C59  00E8               	movwf	_active_protocol^(0+256)
 12945                           
 12946                           ;usb/usb_device_hid.c: 246:             break;
 12947     0C5A  0008               	return
 12948     0C5B                     i1l3926:
 12949     0C5B  0841               	movf	65,w	;volatile
 12950                           
 12951                           ; Switch size 1, requested type "simple"
 12952                           ; Number of cases is 6, Range of values is 1 to 11
 12953                           ; switch strategies available:
 12954                           ; Name         Instructions Cycles
 12955                           ; simple_byte           19    10 (average)
 12956                           ; direct_byte           31     9 (fixed)
 12957                           ; jumptable            263     9 (fixed)
 12958                           ;	Chosen strategy is simple_byte
 12959     0C5C  3A01               	xorlw	1	; case 1
 12960     0C5D  1903               	skipnz
 12961     0C5E  2C6F               	goto	i1l764
 12962     0C5F  3A03               	xorlw	3	; case 2
 12963     0C60  1903               	skipnz
 12964     0C61  2C2D               	goto	i1l3906
 12965     0C62  3A01               	xorlw	1	; case 3
 12966     0C63  1903               	skipnz
 12967     0C64  2C47               	goto	i1l3916
 12968     0C65  3A0A               	xorlw	10	; case 9
 12969     0C66  1903               	skipnz
 12970     0C67  2C2A               	goto	i1l3904
 12971     0C68  3A03               	xorlw	3	; case 10
 12972     0C69  1903               	skipnz
 12973     0C6A  2C39               	goto	i1l3912
 12974     0C6B  3A01               	xorlw	1	; case 11
 12975     0C6C  1903               	skipnz
 12976     0C6D  2C53               	goto	i1l3922
 12977     0C6E  2C6F               	goto	i1l764
 12978     0C6F                     i1l764:
 12979     0C6F  0008               	return
 12980     0C70                     __end_of_USBCheckHIDRequest:
 12981                           
 12982                           	psect	text66
 12983     1F7C                     __ptext66:	
 12984 ;; *************** function _USBHIDCBSetReportHandler *****************
 12985 ;; Defined at:
 12986 ;;		line 531 in file "app_device_keyboard.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;		None
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg
 12995 ;; Tracked objects:
 12996 ;;		On entry : 1F/0
 12997 ;;		On exit  : 1F/2
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;Total ram usage:        0 bytes
 13005 ;; Hardware stack levels used: 1
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_USBCheckHIDRequest
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013     1F7C                     _USBHIDCBSetReportHandler:	
 13014                           ;psect for function _USBHIDCBSetReportHandler
 13015                           
 13016                           
 13017                           ;app_device_keyboard.c: 535:     {outPipes[0].pDst.bRam = (uint8_t*) & CtrlTrfData;outPi
      +                          pes[0].wCount.Val = 8;outPipes[0].pFunc = USBHIDCBSetReportComplete;outPipes[0].info.bit
      +                          s.busy = 1; };
 13018                           
 13019                           ;incstack = 0
 13020                           ; Regs used in _USBHIDCBSetReportHandler: [wreg]
 13021     1F7C  3048               	movlw	72
 13022     1F7D  0022               	movlb	2	; select bank2
 13023     1F7E  00A1               	movwf	_outPipes^(0+256)	;volatile
 13024     1F7F  3000               	movlw	0
 13025     1F80  00A5               	movwf	((_outPipes+1)^(0+256)+3)	;volatile
 13026     1F81  3008               	movlw	8
 13027     1F82  00A4               	movwf	(_outPipes^(0+256)+3)	;volatile
 13028     1F83  301E               	movlw	high _USBHIDCBSetReportComplete
 13029     1F84  00A7               	movwf	((low ((_outPipes| (0+256)+5))+1))^0	;volatile
 13030     1F85  30BB               	movlw	low _USBHIDCBSetReportComplete
 13031     1F86  00A6               	movwf	(low ((_outPipes| (0+256)+5)))^0	;volatile
 13032     1F87  17A3               	bsf	(_outPipes^(0+256)+2),7	;volatile
 13033     1F88  0008               	return
 13034     1F89                     __end_of_USBHIDCBSetReportHandler:
 13035                           
 13036                           	psect	text67
 13037     1F6F                     __ptext67:	
 13038 ;; *************** function _USBHIDCBSetIdleRateHandler *****************
 13039 ;; Defined at:
 13040 ;;		line 542 in file "app_device_keyboard.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  reportID        1    wreg     unsigned char 
 13043 ;;  newIdleRate     1    0[COMMON] unsigned char 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;  reportID        1    3[COMMON] unsigned char 
 13046 ;; Return value:  Size  Location     Type
 13047 ;;                  1    wreg      void 
 13048 ;; Registers used:
 13049 ;;		wreg, status,2, status,0
 13050 ;; Tracked objects:
 13051 ;;		On entry : 1F/0
 13052 ;;		On exit  : 1D/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13055 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13059 ;;Total ram usage:        4 bytes
 13060 ;; Hardware stack levels used: 1
 13061 ;; This function calls:
 13062 ;;		Nothing
 13063 ;; This function is called by:
 13064 ;;		_USBCheckHIDRequest
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068     1F6F                     _USBHIDCBSetIdleRateHandler:	
 13069                           ;psect for function _USBHIDCBSetIdleRateHandler
 13070                           
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _USBHIDCBSetIdleRateHandler: [wreg+status,2+status,0]
 13074                           ;USBHIDCBSetIdleRateHandler@reportID stored from wreg
 13075     1F6F  00F3               	movwf	USBHIDCBSetIdleRateHandler@reportID
 13076                           
 13077                           ;app_device_keyboard.c: 546:     if (reportID == 0) {
 13078     1F70  0873               	movf	USBHIDCBSetIdleRateHandler@reportID,w
 13079     1F71  1D03               	btfss	3,2
 13080     1F72  0008               	return
 13081                           
 13082                           ;app_device_keyboard.c: 547:         keyboardIdleRate = newIdleRate;
 13083     1F73  0870               	movf	USBHIDCBSetIdleRateHandler@newIdleRate,w
 13084     1F74  00F1               	movwf	??_USBHIDCBSetIdleRateHandler
 13085     1F75  01F2               	clrf	??_USBHIDCBSetIdleRateHandler+1
 13086     1F76  0871               	movf	??_USBHIDCBSetIdleRateHandler,w
 13087     1F77  0022               	movlb	2	; select bank2
 13088     1F78  00B8               	movwf	_keyboardIdleRate^(0+256)
 13089     1F79  0872               	movf	??_USBHIDCBSetIdleRateHandler+1,w
 13090     1F7A  00B9               	movwf	(_keyboardIdleRate+1)^(0+256)
 13091     1F7B  0008               	return
 13092     1F7C                     __end_of_USBHIDCBSetIdleRateHandler:
 13093                           
 13094                           	psect	text68
 13095     15CB                     __ptext68:	
 13096 ;; *************** function _APP_KeyboardInit *****************
 13097 ;; Defined at:
 13098 ;;		line 309 in file "app_device_keyboard.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;		None
 13101 ;; Auto vars:     Size  Location     Type
 13102 ;;		None
 13103 ;; Return value:  Size  Location     Type
 13104 ;;                  1    wreg      void 
 13105 ;; Registers used:
 13106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13107 ;; Tracked objects:
 13108 ;;		On entry : 1F/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        0 bytes
 13117 ;; Hardware stack levels used: 1
 13118 ;; Hardware stack levels required when called: 2
 13119 ;; This function calls:
 13120 ;;		_USBEnableEndpoint
 13121 ;;		i1_GenericQueue_Init
 13122 ;;		i1_USBTransferOnePacket
 13123 ;; This function is called by:
 13124 ;;		_USER_USB_CALLBACK_EVENT_HANDLER
 13125 ;; This function uses a non-reentrant model
 13126 ;;
 13127                           
 13128     15CB                     _APP_KeyboardInit:	
 13129                           ;psect for function _APP_KeyboardInit
 13130                           
 13131                           
 13132                           ;app_device_keyboard.c: 310:     GenericQueue_Init(&keyboard.keys, sizeof (uint8_t));
 13133                           
 13134                           ;incstack = 0
 13135                           ; Regs used in _APP_KeyboardInit: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13136     15CB  3030               	movlw	48
 13137     15CC  00F0               	movwf	i1GenericQueue_Init@q
 13138     15CD  3023               	movlw	35
 13139     15CE  00F1               	movwf	i1GenericQueue_Init@q+1
 13140     15CF  3001               	movlw	1
 13141     15D0  00F2               	movwf	i1GenericQueue_Init@element_size
 13142     15D1  3000               	movlw	0
 13143     15D2  00F3               	movwf	i1GenericQueue_Init@element_size+1
 13144     15D3  3192  2264  3195   	fcall	i1_GenericQueue_Init
 13145                           
 13146                           ;app_device_keyboard.c: 311:     keyboard.modifiers.value = 0;
 13147     15D6  308F               	movlw	143
 13148     15D7  0086               	movwf	6
 13149     15D8  3023               	movlw	35
 13150     15D9  0087               	movwf	7
 13151     15DA  0181               	clrf	1
 13152                           
 13153                           ;app_device_keyboard.c: 312:     keyboard.leds.value = 0;
 13154     15DB  3090               	movlw	144
 13155     15DC  0086               	movwf	6
 13156     15DD  3023               	movlw	35
 13157     15DE  0087               	movwf	7
 13158     15DF  0181               	clrf	1
 13159                           
 13160                           ;app_device_keyboard.c: 315:     keyboard.lastINTransmission = 0;
 13161     15E0  302C               	movlw	44
 13162     15E1  0086               	movwf	6
 13163     15E2  3023               	movlw	35
 13164     15E3  0087               	movwf	7
 13165     15E4  3000               	movlw	0
 13166     15E5  3FC0               	movwi [0]fsr1
 13167     15E6  3FC1               	movwi [1]fsr1
 13168                           
 13169                           ;app_device_keyboard.c: 318:     keyboardIdleRate = 250;
 13170     15E7  30FA               	movlw	250
 13171     15E8  0022               	movlb	2	; select bank2
 13172     15E9  00B8               	movwf	_keyboardIdleRate^(0+256)
 13173     15EA  3000               	movlw	0
 13174     15EB  00B9               	movwf	(_keyboardIdleRate^(0+256)+1)
 13175     15EC                     i1l912:	
 13176                           ;app_device_keyboard.c: 325:     }
 13177                           
 13178                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 13179                           
 13180                           
 13181                           ;app_device_keyboard.c: 323:     while (OldSOFCount != SOFCounter) {
 13182     15EC  0020               	movlb	0	; select bank0
 13183     15ED  0866               	movf	_SOFCounter+1,w	;volatile
 13184     15EE  0022               	movlb	2	; select bank2
 13185     15EF  0635               	xorwf	(_OldSOFCount+1)^(0+256),w
 13186     15F0  1D03               	skipz
 13187     15F1  2DF6               	goto	u297_25
 13188     15F2  0020               	movlb	0	; select bank0
 13189     15F3  0865               	movf	_SOFCounter,w	;volatile
 13190     15F4  0022               	movlb	2	; select bank2
 13191     15F5  0634               	xorwf	_OldSOFCount^(0+256),w
 13192     15F6                     u297_25:
 13193     15F6  1903               	btfsc	3,2
 13194     15F7  2E01               	goto	i1l3940
 13195                           
 13196                           ;app_device_keyboard.c: 324:         OldSOFCount = SOFCounter;
 13197     15F8  0020               	movlb	0	; select bank0
 13198     15F9  0866               	movf	_SOFCounter+1,w	;volatile
 13199     15FA  0022               	movlb	2	; select bank2
 13200     15FB  00B5               	movwf	(_OldSOFCount+1)^(0+256)
 13201     15FC  0020               	movlb	0	; select bank0
 13202     15FD  0865               	movf	_SOFCounter,w	;volatile
 13203     15FE  0022               	movlb	2	; select bank2
 13204     15FF  00B4               	movwf	_OldSOFCount^(0+256)
 13205     1600  2DEC               	goto	i1l912
 13206     1601                     i1l3940:
 13207                           
 13208                           ;app_device_keyboard.c: 328:     USBEnableEndpoint(1, 0x02 | 0x04 | 0x10 | 0x08);
 13209     1601  301E               	movlw	30
 13210     1602  00F7               	movwf	USBEnableEndpoint@options
 13211     1603  3001               	movlw	1
 13212     1604  3192  2244  3195   	fcall	_USBEnableEndpoint
 13213                           
 13214                           ;app_device_keyboard.c: 331:     keyboard.lastOUTTransmission = USBTransferOnePacket(1,0
      +                          ,(uint8_t*) & outputReport,sizeof (outputReport));
 13215     1607  01F0               	clrf	i1USBTransferOnePacket@dir
 13216     1608  3020               	movlw	32
 13217     1609  00F1               	movwf	i1USBTransferOnePacket@data
 13218     160A  3001               	movlw	1
 13219     160B  00F2               	movwf	i1USBTransferOnePacket@data+1
 13220     160C  01F3               	clrf	i1USBTransferOnePacket@len
 13221     160D  0AF3               	incf	i1USBTransferOnePacket@len,f
 13222     160E  3001               	movlw	1
 13223     160F  318C  2470         	fcall	i1_USBTransferOnePacket
 13224     1611  302C               	movlw	44
 13225     1612  0086               	movwf	6
 13226     1613  3023               	movlw	35
 13227     1614  0087               	movwf	7
 13228     1615  3142               	addfsr 1,2
 13229     1616  0870               	movf	?i1_USBTransferOnePacket,w
 13230     1617  3FC0               	movwi [0]fsr1
 13231     1618  0871               	movf	?i1_USBTransferOnePacket+1,w
 13232     1619  3FC1               	movwi [1]fsr1
 13233     161A  0008               	return
 13234     161B                     __end_of_APP_KeyboardInit:
 13235                           
 13236                           	psect	text69
 13237     0C70                     __ptext69:	
 13238 ;; *************** function i1_USBTransferOnePacket *****************
 13239 ;; Defined at:
 13240 ;;		line 999 in file "usb/usb_device.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  ep              1    wreg     unsigned char 
 13243 ;;  dir             1    0[COMMON] unsigned char 
 13244 ;;  data            2    1[COMMON] PTR unsigned char 
 13245 ;;		 -> inputReport(8), outputReport(1), 
 13246 ;;  len             1    3[COMMON] unsigned char 
 13247 ;; Auto vars:     Size  Location     Type
 13248 ;;  ep              1    8[COMMON] unsigned char 
 13249 ;;  handle          2    9[COMMON] PTR volatile struct __BD
 13250 ;;		 -> RAM(4096), NULL(0), BDT(32), 
 13251 ;; Return value:  Size  Location     Type
 13252 ;;                  2    0[COMMON] PTR void 
 13253 ;; Registers used:
 13254 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13255 ;; Tracked objects:
 13256 ;;		On entry : 0/2
 13257 ;;		On exit  : 0/0
 13258 ;;		Unchanged: 0/0
 13259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13260 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13261 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13262 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13263 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13264 ;;Total ram usage:       11 bytes
 13265 ;; Hardware stack levels used: 1
 13266 ;; This function calls:
 13267 ;;		Nothing
 13268 ;; This function is called by:
 13269 ;;		_APP_KeyboardInit
 13270 ;; This function uses a non-reentrant model
 13271 ;;
 13272                           
 13273     0C70                     i1_USBTransferOnePacket:	
 13274                           ;psect for function i1_USBTransferOnePacket
 13275                           
 13276                           
 13277                           ;incstack = 0
 13278                           ; Regs used in i1_USBTransferOnePacket: [wreg+fsr1l+fsr1h+status,2+status,0]
 13279                           ;i1USBTransferOnePacket@ep stored from wreg
 13280     0C70  00F8               	movwf	i1USBTransferOnePacket@ep
 13281                           
 13282                           ;usb/usb_device.c: 999: void* USBTransferOnePacket(uint8_t ep,uint8_t dir,uint8_t* data,
      +                          uint8_t len);usb/usb_device.c: 1000: {;usb/usb_device.c: 1001:     volatile BDT_ENTRY* h
      +                          andle;;usb/usb_device.c: 1004:     if(dir != 0)
 13283     0C71  0870               	movf	i1USBTransferOnePacket@dir,w
 13284     0C72  1903               	btfsc	3,2
 13285     0C73  2C7C               	goto	i1l3848
 13286                           
 13287                           ;usb/usb_device.c: 1005:     {;usb/usb_device.c: 1007:         handle = pBDTEntryIn[ep];
 13288     0C74  3578               	lslf	i1USBTransferOnePacket@ep,w
 13289     0C75  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13290     0C76  0086               	movwf	6
 13291     0C77  0187               	clrf	7
 13292     0C78  3F40               	moviw [0]fsr1
 13293     0C79  00F9               	movwf	i1USBTransferOnePacket@handle
 13294     0C7A  3F41               	moviw [1]fsr1
 13295     0C7B  2C84               	goto	L15
 13296     0C7C                     i1l3848:	
 13297                           ;usb/usb_device.c: 1008:     }
 13298                           
 13299                           
 13300                           ;usb/usb_device.c: 1010:     {;usb/usb_device.c: 1012:         handle = pBDTEntryOut[ep]
      +                          ;
 13301     0C7C  3578               	lslf	i1USBTransferOnePacket@ep,w
 13302     0C7D  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13303     0C7E  0086               	movwf	6
 13304     0C7F  3001               	movlw	1	; select bank2/3
 13305     0C80  0087               	movwf	7
 13306     0C81  3F40               	moviw [0]fsr1
 13307     0C82  00F9               	movwf	i1USBTransferOnePacket@handle
 13308     0C83  3F41               	moviw [1]fsr1
 13309     0C84                     L15:
 13310     0C84  00FA               	movwf	i1USBTransferOnePacket@handle+1
 13311                           
 13312                           ;usb/usb_device.c: 1017:     if(handle == 0)
 13313     0C85  0879               	movf	i1USBTransferOnePacket@handle,w
 13314     0C86  047A               	iorwf	i1USBTransferOnePacket@handle+1,w
 13315     0C87  1D03               	btfss	3,2
 13316     0C88  2C8C               	goto	i1l3856
 13317                           
 13318                           ;usb/usb_device.c: 1018:     {;usb/usb_device.c: 1019:         return 0;
 13319     0C89  01F0               	clrf	?i1_USBTransferOnePacket
 13320     0C8A  01F1               	clrf	?i1_USBTransferOnePacket+1
 13321     0C8B  0008               	return
 13322     0C8C                     i1l3856:
 13323                           
 13324                           ;usb/usb_device.c: 1033:     handle->ADR = (((uint16_t)(data)) & 0x7FFF);
 13325     0C8C  30FF               	movlw	255
 13326     0C8D  0571               	andwf	i1USBTransferOnePacket@data,w
 13327     0C8E  00F4               	movwf	??i1_USBTransferOnePacket
 13328     0C8F  307F               	movlw	127
 13329     0C90  0572               	andwf	i1USBTransferOnePacket@data+1,w
 13330     0C91  00F5               	movwf	??i1_USBTransferOnePacket+1
 13331     0C92  0879               	movf	i1USBTransferOnePacket@handle,w
 13332     0C93  0086               	movwf	6
 13333     0C94  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13334     0C95  0087               	movwf	7
 13335     0C96  3142               	addfsr 1,2
 13336     0C97  0874               	movf	??i1_USBTransferOnePacket,w
 13337     0C98  3FC0               	movwi [0]fsr1
 13338     0C99  0875               	movf	??i1_USBTransferOnePacket+1,w
 13339     0C9A  3FC1               	movwi [1]fsr1
 13340                           
 13341                           ;usb/usb_device.c: 1034:     handle->CNT = len;
 13342     0C9B  0879               	movf	i1USBTransferOnePacket@handle,w
 13343     0C9C  3E01               	addlw	1
 13344     0C9D  00F4               	movwf	??i1_USBTransferOnePacket
 13345     0C9E  3000               	movlw	0
 13346     0C9F  3D7A               	addwfc	i1USBTransferOnePacket@handle+1,w
 13347     0CA0  00F5               	movwf	??i1_USBTransferOnePacket+1
 13348     0CA1  0874               	movf	??i1_USBTransferOnePacket,w
 13349     0CA2  0086               	movwf	6
 13350     0CA3  0875               	movf	??i1_USBTransferOnePacket+1,w
 13351     0CA4  0087               	movwf	7
 13352     0CA5  0873               	movf	i1USBTransferOnePacket@len,w
 13353     0CA6  0081               	movwf	1
 13354                           
 13355                           ;usb/usb_device.c: 1035:     handle->STAT.Val &= 0x40;
 13356     0CA7  3040               	movlw	64
 13357     0CA8  00F4               	movwf	??i1_USBTransferOnePacket
 13358     0CA9  0879               	movf	i1USBTransferOnePacket@handle,w
 13359     0CAA  0086               	movwf	6
 13360     0CAB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13361     0CAC  0087               	movwf	7
 13362     0CAD  0874               	movf	??i1_USBTransferOnePacket,w
 13363     0CAE  0581               	andwf	1,f
 13364                           
 13365                           ;usb/usb_device.c: 1036:     handle->STAT.Val |= (0x08 & 0x08);
 13366     0CAF  0879               	movf	i1USBTransferOnePacket@handle,w
 13367     0CB0  0086               	movwf	6
 13368     0CB1  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13369     0CB2  0087               	movwf	7
 13370     0CB3  1581               	bsf	1,3
 13371                           
 13372                           ;usb/usb_device.c: 1037:     handle->STAT.Val |= 0x80;
 13373     0CB4  0879               	movf	i1USBTransferOnePacket@handle,w
 13374     0CB5  0086               	movwf	6
 13375     0CB6  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13376     0CB7  0087               	movwf	7
 13377     0CB8  1781               	bsf	1,7
 13378                           
 13379                           ;usb/usb_device.c: 1040:     if(dir != 0)
 13380     0CB9  0870               	movf	i1USBTransferOnePacket@dir,w
 13381     0CBA  1903               	btfsc	3,2
 13382     0CBB  2CD3               	goto	i1l3866
 13383                           
 13384                           ;usb/usb_device.c: 1041:     {;usb/usb_device.c: 1043:         pBDTEntryIn[ep] = (BDT_EN
      +                          TRY*)(((uint16_t)pBDTEntryIn[ep]) ^ 0x0004);
 13385     0CBC  3578               	lslf	i1USBTransferOnePacket@ep,w
 13386     0CBD  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13387     0CBE  0086               	movwf	6
 13388     0CBF  0187               	clrf	7
 13389     0CC0  3F40               	moviw [0]fsr1
 13390     0CC1  00F4               	movwf	??i1_USBTransferOnePacket
 13391     0CC2  3F41               	moviw [1]fsr1
 13392     0CC3  00F5               	movwf	??i1_USBTransferOnePacket+1
 13393     0CC4  3004               	movlw	4
 13394     0CC5  0674               	xorwf	??i1_USBTransferOnePacket,w
 13395     0CC6  00F6               	movwf	??i1_USBTransferOnePacket+2
 13396     0CC7  3000               	movlw	0
 13397     0CC8  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13398     0CC9  00F7               	movwf	??i1_USBTransferOnePacket+3
 13399     0CCA  3578               	lslf	i1USBTransferOnePacket@ep,w
 13400     0CCB  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13401     0CCC  0086               	movwf	6
 13402     0CCD  0187               	clrf	7
 13403     0CCE  0876               	movf	??i1_USBTransferOnePacket+2,w
 13404     0CCF  3FC0               	movwi [0]fsr1
 13405     0CD0  0877               	movf	??i1_USBTransferOnePacket+3,w
 13406     0CD1  3FC1               	movwi [1]fsr1
 13407                           
 13408                           ;usb/usb_device.c: 1044:     }
 13409     0CD2  2CEB               	goto	i1l3868
 13410     0CD3                     i1l3866:
 13411                           
 13412                           ;usb/usb_device.c: 1046:     {;usb/usb_device.c: 1048:         pBDTEntryOut[ep] = (BDT_E
      +                          NTRY*)(((uint16_t)pBDTEntryOut[ep]) ^ 0x0004);
 13413     0CD3  3578               	lslf	i1USBTransferOnePacket@ep,w
 13414     0CD4  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13415     0CD5  0086               	movwf	6
 13416     0CD6  3001               	movlw	1	; select bank2/3
 13417     0CD7  0087               	movwf	7
 13418     0CD8  3F40               	moviw [0]fsr1
 13419     0CD9  00F4               	movwf	??i1_USBTransferOnePacket
 13420     0CDA  3F41               	moviw [1]fsr1
 13421     0CDB  00F5               	movwf	??i1_USBTransferOnePacket+1
 13422     0CDC  3004               	movlw	4
 13423     0CDD  0674               	xorwf	??i1_USBTransferOnePacket,w
 13424     0CDE  00F6               	movwf	??i1_USBTransferOnePacket+2
 13425     0CDF  3000               	movlw	0
 13426     0CE0  0675               	xorwf	??i1_USBTransferOnePacket+1,w
 13427     0CE1  00F7               	movwf	??i1_USBTransferOnePacket+3
 13428     0CE2  3578               	lslf	i1USBTransferOnePacket@ep,w
 13429     0CE3  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13430     0CE4  0086               	movwf	6
 13431     0CE5  3001               	movlw	1	; select bank2/3
 13432     0CE6  0087               	movwf	7
 13433     0CE7  0876               	movf	??i1_USBTransferOnePacket+2,w
 13434     0CE8  3FC0               	movwi [0]fsr1
 13435     0CE9  0877               	movf	??i1_USBTransferOnePacket+3,w
 13436     0CEA  3FC1               	movwi [1]fsr1
 13437     0CEB                     i1l3868:
 13438                           
 13439                           ;usb/usb_device.c: 1050:     return (void*)handle;
 13440     0CEB  087A               	movf	i1USBTransferOnePacket@handle+1,w
 13441     0CEC  00F1               	movwf	?i1_USBTransferOnePacket+1
 13442     0CED  0879               	movf	i1USBTransferOnePacket@handle,w
 13443     0CEE  00F0               	movwf	?i1_USBTransferOnePacket
 13444     0CEF  0008               	return
 13445     0CF0                     __end_ofi1_USBTransferOnePacket:
 13446                           
 13447                           	psect	text70
 13448     1264                     __ptext70:	
 13449 ;; *************** function i1_GenericQueue_Init *****************
 13450 ;; Defined at:
 13451 ;;		line 4 in file "generic_queue.c"
 13452 ;; Parameters:    Size  Location     Type
 13453 ;;  q               2    0[COMMON] PTR struct .
 13454 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 13455 ;;  element_size    2    2[COMMON] unsigned int 
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;		None
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  1    wreg      void 
 13460 ;; Registers used:
 13461 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13462 ;; Tracked objects:
 13463 ;;		On entry : 1F/0
 13464 ;;		On exit  : 1F/0
 13465 ;;		Unchanged: 1F/0
 13466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;Total ram usage:        4 bytes
 13472 ;; Hardware stack levels used: 1
 13473 ;; This function calls:
 13474 ;;		Nothing
 13475 ;; This function is called by:
 13476 ;;		_APP_KeyboardInit
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480     1264                     i1_GenericQueue_Init:	
 13481                           ;psect for function i1_GenericQueue_Init
 13482                           
 13483                           
 13484                           ;generic_queue.c: 5:     q->element_size = element_size;
 13485                           
 13486                           ;incstack = 0
 13487                           ; Regs used in i1_GenericQueue_Init: [wreg+fsr1l+fsr1h+status,2+status,0]
 13488     1264  0870               	movf	i1GenericQueue_Init@q,w
 13489     1265  3E5A               	addlw	90
 13490     1266  0086               	movwf	6
 13491     1267  3000               	movlw	0
 13492     1268  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13493     1269  0087               	movwf	7
 13494     126A  0872               	movf	i1GenericQueue_Init@element_size,w
 13495     126B  3FC0               	movwi [0]fsr1
 13496     126C  0873               	movf	i1GenericQueue_Init@element_size+1,w
 13497     126D  3FC1               	movwi [1]fsr1
 13498                           
 13499                           ;generic_queue.c: 6:     q->front = 0;
 13500     126E  0870               	movf	i1GenericQueue_Init@q,w
 13501     126F  3E5C               	addlw	92
 13502     1270  0086               	movwf	6
 13503     1271  3000               	movlw	0
 13504     1272  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13505     1273  0087               	movwf	7
 13506     1274  0181               	clrf	1
 13507                           
 13508                           ;generic_queue.c: 7:     q->rear = 0;
 13509     1275  0870               	movf	i1GenericQueue_Init@q,w
 13510     1276  3E5D               	addlw	93
 13511     1277  0086               	movwf	6
 13512     1278  3000               	movlw	0
 13513     1279  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13514     127A  0087               	movwf	7
 13515     127B  0181               	clrf	1
 13516                           
 13517                           ;generic_queue.c: 8:     q->size = 0;
 13518     127C  0870               	movf	i1GenericQueue_Init@q,w
 13519     127D  3E5E               	addlw	94
 13520     127E  0086               	movwf	6
 13521     127F  3000               	movlw	0
 13522     1280  3D71               	addwfc	i1GenericQueue_Init@q+1,w
 13523     1281  0087               	movwf	7
 13524     1282  0181               	clrf	1
 13525     1283  0008               	return
 13526     1284                     __end_ofi1_GenericQueue_Init:
 13527                           
 13528                           	psect	text71
 13529     1244                     __ptext71:	
 13530 ;; *************** function _USBEnableEndpoint *****************
 13531 ;; Defined at:
 13532 ;;		line 882 in file "usb/usb_device.c"
 13533 ;; Parameters:    Size  Location     Type
 13534 ;;  ep              1    wreg     unsigned char 
 13535 ;;  options         1    7[COMMON] unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  ep              1   12[COMMON] unsigned char 
 13538 ;;  p               2   10[COMMON] PTR unsigned char 
 13539 ;;		 -> UEP0(1), 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  1    wreg      void 
 13542 ;; Registers used:
 13543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13544 ;; Tracked objects:
 13545 ;;		On entry : 1F/2
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:        6 bytes
 13554 ;; Hardware stack levels used: 1
 13555 ;; Hardware stack levels required when called: 1
 13556 ;; This function calls:
 13557 ;;		_USBConfigureEndpoint
 13558 ;; This function is called by:
 13559 ;;		_APP_KeyboardInit
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563     1244                     _USBEnableEndpoint:	
 13564                           ;psect for function _USBEnableEndpoint
 13565                           
 13566                           
 13567                           ;incstack = 0
 13568                           ; Regs used in _USBEnableEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13569                           ;USBEnableEndpoint@ep stored from wreg
 13570     1244  00FC               	movwf	USBEnableEndpoint@ep
 13571                           
 13572                           ;usb/usb_device.c: 882: void USBEnableEndpoint(uint8_t ep, uint8_t options);usb/usb_devi
      +                          ce.c: 883: {;usb/usb_device.c: 884:     unsigned char* p;;usb/usb_device.c: 888:     if(
      +                          options & 0x04)
 13573     1245  1D77               	btfss	USBEnableEndpoint@options,2
 13574     1246  2A4C               	goto	i1l3824
 13575                           
 13576                           ;usb/usb_device.c: 889:     {;usb/usb_device.c: 890:         USBConfigureEndpoint(ep, 0)
      +                          ;
 13577     1247  01F0               	clrf	USBConfigureEndpoint@direction
 13578     1248  087C               	movf	USBEnableEndpoint@ep,w
 13579     1249  3194  2472  3192   	fcall	_USBConfigureEndpoint
 13580     124C                     i1l3824:
 13581                           
 13582                           ;usb/usb_device.c: 892:     if(options & 0x02)
 13583     124C  1CF7               	btfss	USBEnableEndpoint@options,1
 13584     124D  2A53               	goto	i1l3828
 13585                           
 13586                           ;usb/usb_device.c: 893:     {;usb/usb_device.c: 894:         USBConfigureEndpoint(ep, 1)
      +                          ;
 13587     124E  01F0               	clrf	USBConfigureEndpoint@direction
 13588     124F  0AF0               	incf	USBConfigureEndpoint@direction,f
 13589     1250  087C               	movf	USBEnableEndpoint@ep,w
 13590     1251  3194  2472         	fcall	_USBConfigureEndpoint
 13591     1253                     i1l3828:
 13592                           
 13593                           ;usb/usb_device.c: 903:         p = (unsigned char*)(&UEP0+ep);
 13594     1253  087C               	movf	USBEnableEndpoint@ep,w
 13595     1254  3E98               	addlw	152
 13596     1255  00F8               	movwf	??_USBEnableEndpoint
 13597     1256  01F9               	clrf	??_USBEnableEndpoint+1
 13598     1257  300E               	movlw	14
 13599     1258  3DF9               	addwfc	??_USBEnableEndpoint+1,f
 13600     1259  0878               	movf	??_USBEnableEndpoint,w
 13601     125A  00FA               	movwf	USBEnableEndpoint@p
 13602     125B  0879               	movf	??_USBEnableEndpoint+1,w
 13603     125C  00FB               	movwf	USBEnableEndpoint@p+1
 13604                           
 13605                           ;usb/usb_device.c: 905:     *p = options;
 13606     125D  087A               	movf	USBEnableEndpoint@p,w
 13607     125E  0086               	movwf	6
 13608     125F  087B               	movf	USBEnableEndpoint@p+1,w
 13609     1260  0087               	movwf	7
 13610     1261  0877               	movf	USBEnableEndpoint@options,w
 13611     1262  0081               	movwf	1
 13612     1263  0008               	return
 13613     1264                     __end_of_USBEnableEndpoint:
 13614                           
 13615                           	psect	text72
 13616     1472                     __ptext72:	
 13617 ;; *************** function _USBConfigureEndpoint *****************
 13618 ;; Defined at:
 13619 ;;		line 1547 in file "usb/usb_device.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  EPNum           1    wreg     unsigned char 
 13622 ;;  direction       1    0[COMMON] unsigned char 
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;  EPNum           1    5[COMMON] unsigned char 
 13625 ;;  handle          1    6[COMMON] PTR volatile struct __BD
 13626 ;;		 -> BDT(32), 
 13627 ;; Return value:  Size  Location     Type
 13628 ;;                  1    wreg      void 
 13629 ;; Registers used:
 13630 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13631 ;; Tracked objects:
 13632 ;;		On entry : 0/2
 13633 ;;		On exit  : 0/0
 13634 ;;		Unchanged: 0/0
 13635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13636 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;Total ram usage:        7 bytes
 13641 ;; Hardware stack levels used: 1
 13642 ;; This function calls:
 13643 ;;		Nothing
 13644 ;; This function is called by:
 13645 ;;		_USBEnableEndpoint
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649     1472                     _USBConfigureEndpoint:	
 13650                           ;psect for function _USBConfigureEndpoint
 13651                           
 13652                           
 13653                           ;incstack = 0
 13654                           ; Regs used in _USBConfigureEndpoint: [wreg+fsr1l+fsr1h+status,2+status,0]
 13655                           ;USBConfigureEndpoint@EPNum stored from wreg
 13656     1472  00F5               	movwf	USBConfigureEndpoint@EPNum
 13657                           
 13658                           ;usb/usb_device.c: 1547: static void USBConfigureEndpoint(uint8_t EPNum, uint8_t directi
      +                          on);usb/usb_device.c: 1548: {;usb/usb_device.c: 1549:     volatile BDT_ENTRY* handle;;us
      +                          b/usb_device.c: 1553:     handle = (volatile BDT_ENTRY*)&BDT[0];
 13659     1473  3020               	movlw	32
 13660     1474  00F6               	movwf	USBConfigureEndpoint@handle
 13661                           
 13662                           ;usb/usb_device.c: 1554:     handle += (4*EPNum+2*direction+0u);
 13663     1475  0870               	movf	USBConfigureEndpoint@direction,w
 13664     1476  00F1               	movwf	??_USBConfigureEndpoint
 13665     1477  3001               	movlw	1
 13666     1478                     u282_25:
 13667     1478  35F1               	lslf	??_USBConfigureEndpoint,f
 13668     1479  0B89               	decfsz	9,f
 13669     147A  2C78               	goto	u282_25
 13670     147B  0875               	movf	USBConfigureEndpoint@EPNum,w
 13671     147C  00F2               	movwf	??_USBConfigureEndpoint+1
 13672     147D  3001               	movlw	1
 13673     147E                     u283_25:
 13674     147E  35F2               	lslf	??_USBConfigureEndpoint+1,f
 13675     147F  3EFF               	addlw	-1
 13676     1480  1D03               	skipz
 13677     1481  2C7E               	goto	u283_25
 13678     1482  3572               	lslf	??_USBConfigureEndpoint+1,w
 13679     1483  0771               	addwf	??_USBConfigureEndpoint,w
 13680     1484  00F3               	movwf	??_USBConfigureEndpoint+2
 13681     1485  3001               	movlw	1
 13682     1486                     u284_25:
 13683     1486  35F3               	lslf	??_USBConfigureEndpoint+2,f
 13684     1487  3EFF               	addlw	-1
 13685     1488  1D03               	skipz
 13686     1489  2C86               	goto	u284_25
 13687     148A  3573               	lslf	??_USBConfigureEndpoint+2,w
 13688     148B  00F4               	movwf	??_USBConfigureEndpoint+3
 13689     148C  0874               	movf	??_USBConfigureEndpoint+3,w
 13690     148D  07F6               	addwf	USBConfigureEndpoint@handle,f
 13691                           
 13692                           ;usb/usb_device.c: 1556:     handle->STAT.UOWN = 0;
 13693     148E  0876               	movf	USBConfigureEndpoint@handle,w
 13694     148F  0086               	movwf	6
 13695     1490  0187               	clrf	7
 13696     1491  1381               	bcf	1,7
 13697                           
 13698                           ;usb/usb_device.c: 1561:     if(direction == 0)
 13699     1492  0870               	movf	USBConfigureEndpoint@direction,w
 13700     1493  1D03               	btfss	3,2
 13701     1494  2C9F               	goto	i1l3814
 13702                           
 13703                           ;usb/usb_device.c: 1562:     {;usb/usb_device.c: 1563:         pBDTEntryOut[EPNum] = han
      +                          dle;
 13704     1495  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13705     1496  3E30               	addlw	(low (_pBDTEntryOut| (0+256)))& (0+255)
 13706     1497  0086               	movwf	6
 13707     1498  3001               	movlw	1	; select bank2/3
 13708     1499  0087               	movwf	7
 13709     149A  0876               	movf	USBConfigureEndpoint@handle,w
 13710     149B  3FC0               	movwi [0]fsr1
 13711     149C  3000               	movlw	0
 13712     149D  3FC1               	movwi [1]fsr1
 13713                           
 13714                           ;usb/usb_device.c: 1564:     }
 13715     149E  2CA7               	goto	i1l3816
 13716     149F                     i1l3814:
 13717                           
 13718                           ;usb/usb_device.c: 1566:     {;usb/usb_device.c: 1567:         pBDTEntryIn[EPNum] = hand
      +                          le;
 13719     149F  3575               	lslf	USBConfigureEndpoint@EPNum,w
 13720     14A0  3E61               	addlw	(low (_pBDTEntryIn| 0))& (0+255)
 13721     14A1  0086               	movwf	6
 13722     14A2  0187               	clrf	7
 13723     14A3  0876               	movf	USBConfigureEndpoint@handle,w
 13724     14A4  3FC0               	movwi [0]fsr1
 13725     14A5  3000               	movlw	0
 13726     14A6  3FC1               	movwi [1]fsr1
 13727     14A7                     i1l3816:
 13728                           
 13729                           ;usb/usb_device.c: 1571:         handle->STAT.DTS = 0;
 13730     14A7  0876               	movf	USBConfigureEndpoint@handle,w
 13731     14A8  0086               	movwf	6
 13732     14A9  0187               	clrf	7
 13733     14AA  1301               	bcf	1,6
 13734                           
 13735                           ;usb/usb_device.c: 1572:         (handle+1)->STAT.DTS = 1;
 13736     14AB  0876               	movf	USBConfigureEndpoint@handle,w
 13737     14AC  3E04               	addlw	4
 13738     14AD  0086               	movwf	6
 13739     14AE  0187               	clrf	7
 13740     14AF  1701               	bsf	1,6
 13741     14B0  0008               	return
 13742     14B1                     __end_of_USBConfigureEndpoint:
 13743                           
 13744                           	psect	text73
 13745     13FB                     __ptext73:	
 13746 ;; *************** function _USBCtrlTrfOutHandler *****************
 13747 ;; Defined at:
 13748 ;;		line 2545 in file "usb/usb_device.c"
 13749 ;; Parameters:    Size  Location     Type
 13750 ;;		None
 13751 ;; Auto vars:     Size  Location     Type
 13752 ;;		None
 13753 ;; Return value:  Size  Location     Type
 13754 ;;                  1    wreg      void 
 13755 ;; Registers used:
 13756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13757 ;; Tracked objects:
 13758 ;;		On entry : 1F/0
 13759 ;;		On exit  : 1D/0
 13760 ;;		Unchanged: 0/0
 13761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13765 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13766 ;;Total ram usage:        4 bytes
 13767 ;; Hardware stack levels used: 1
 13768 ;; Hardware stack levels required when called: 4
 13769 ;; This function calls:
 13770 ;;		_USBCtrlTrfRxService
 13771 ;; This function is called by:
 13772 ;;		_USBCtrlEPService
 13773 ;; This function uses a non-reentrant model
 13774 ;;
 13775                           
 13776     13FB                     _USBCtrlTrfOutHandler:	
 13777                           ;psect for function _USBCtrlTrfOutHandler
 13778                           
 13779                           
 13780                           ;usb/usb_device.c: 2547:     if(controlTransferState == 2)
 13781                           
 13782                           ;incstack = 0
 13783                           ; Regs used in _USBCtrlTrfOutHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13784     13FB  3002               	movlw	2
 13785     13FC  066A               	xorwf	_controlTransferState,w	;volatile
 13786     13FD  1D03               	btfss	3,2
 13787     13FE  2C02               	goto	i1l4666
 13788                           
 13789                           ;usb/usb_device.c: 2548:     {;usb/usb_device.c: 2549:         USBCtrlTrfRxService();
 13790     13FF  318F  274D         	fcall	_USBCtrlTrfRxService
 13791                           
 13792                           ;usb/usb_device.c: 2550:     }
 13793     1401  0008               	return
 13794     1402                     i1l4666:
 13795                           
 13796                           ;usb/usb_device.c: 2552:     {;usb/usb_device.c: 2555:         controlTransferState = 0;
 13797     1402  01EA               	clrf	_controlTransferState	;volatile
 13798                           
 13799                           ;usb/usb_device.c: 2562:         if(BothEP0OutUOWNsSet == 0)
 13800     1403  0022               	movlb	2	; select bank2
 13801     1404  085B               	movf	_BothEP0OutUOWNsSet^(0+256),w	;volatile
 13802     1405  1D03               	btfss	3,2
 13803     1406  2C33               	goto	i1l4678
 13804                           
 13805                           ;usb/usb_device.c: 2563:         {;usb/usb_device.c: 2564:             pBDTEntryEP0OutNe
      +                          xt->CNT = 8;
 13806     1407  0020               	movlb	0	; select bank0
 13807     1408  0867               	movf	_pBDTEntryEP0OutNext,w
 13808     1409  3E01               	addlw	1
 13809     140A  00FA               	movwf	??_USBCtrlTrfOutHandler
 13810     140B  3000               	movlw	0
 13811     140C  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13812     140D  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13813     140E  087A               	movf	??_USBCtrlTrfOutHandler,w
 13814     140F  0086               	movwf	6
 13815     1410  087B               	movf	??_USBCtrlTrfOutHandler+1,w
 13816     1411  0087               	movwf	7
 13817     1412  3008               	movlw	8
 13818     1413  0081               	movwf	1
 13819                           
 13820                           ;usb/usb_device.c: 2565:             pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt))
      +                           & 0x7FFF);
 13821     1414  3040               	movlw	64
 13822     1415  00FA               	movwf	??_USBCtrlTrfOutHandler
 13823     1416  3000               	movlw	0
 13824     1417  00FB               	movwf	??_USBCtrlTrfOutHandler+1
 13825     1418  30FF               	movlw	255
 13826     1419  057A               	andwf	??_USBCtrlTrfOutHandler,w
 13827     141A  00FC               	movwf	??_USBCtrlTrfOutHandler+2
 13828     141B  307F               	movlw	127
 13829     141C  057B               	andwf	??_USBCtrlTrfOutHandler+1,w
 13830     141D  00FD               	movwf	??_USBCtrlTrfOutHandler+3
 13831     141E  0867               	movf	_pBDTEntryEP0OutNext,w
 13832     141F  0086               	movwf	6
 13833     1420  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13834     1421  0087               	movwf	7
 13835     1422  3142               	addfsr 1,2
 13836     1423  087C               	movf	??_USBCtrlTrfOutHandler+2,w
 13837     1424  3FC0               	movwi [0]fsr1
 13838     1425  087D               	movf	??_USBCtrlTrfOutHandler+3,w
 13839     1426  3FC1               	movwi [1]fsr1
 13840                           
 13841                           ;usb/usb_device.c: 2566:             pBDTEntryEP0OutNext->STAT.Val = 0x00|(0x08 & 0x08)|
      +                          0x04;
 13842     1427  0867               	movf	_pBDTEntryEP0OutNext,w
 13843     1428  0086               	movwf	6
 13844     1429  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13845     142A  0087               	movwf	7
 13846     142B  300C               	movlw	12
 13847     142C  0081               	movwf	1
 13848                           
 13849                           ;usb/usb_device.c: 2567:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 13850     142D  0867               	movf	_pBDTEntryEP0OutNext,w
 13851     142E  0086               	movwf	6
 13852     142F  0868               	movf	_pBDTEntryEP0OutNext+1,w
 13853     1430  0087               	movwf	7
 13854     1431  1781               	bsf	1,7
 13855                           
 13856                           ;usb/usb_device.c: 2568:         }
 13857     1432  0008               	return
 13858     1433                     i1l4678:
 13859                           
 13860                           ;usb/usb_device.c: 2570:         {;usb/usb_device.c: 2571:             BothEP0OutUOWNsSe
      +                          t = 0;
 13861     1433  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 13862     1434  0008               	return
 13863     1435                     __end_of_USBCtrlTrfOutHandler:
 13864                           
 13865                           	psect	text74
 13866     0F4D                     __ptext74:	
 13867 ;; *************** function _USBCtrlTrfRxService *****************
 13868 ;; Defined at:
 13869 ;;		line 1856 in file "usb/usb_device.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;		None
 13872 ;; Auto vars:     Size  Location     Type
 13873 ;;  byteToRead      1    9[COMMON] unsigned char 
 13874 ;;  i               1    8[COMMON] unsigned char 
 13875 ;; Return value:  Size  Location     Type
 13876 ;;                  1    wreg      void 
 13877 ;; Registers used:
 13878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13879 ;; Tracked objects:
 13880 ;;		On entry : 1F/0
 13881 ;;		On exit  : 1D/0
 13882 ;;		Unchanged: 0/0
 13883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;Total ram usage:        6 bytes
 13889 ;; Hardware stack levels used: 1
 13890 ;; Hardware stack levels required when called: 3
 13891 ;; This function calls:
 13892 ;;		_USBCtrlEPAllowStatusStage
 13893 ;;		_USBHIDCBSetReportComplete
 13894 ;; This function is called by:
 13895 ;;		_USBCtrlTrfOutHandler
 13896 ;; This function uses a non-reentrant model
 13897 ;;
 13898                           
 13899     0F4D                     _USBCtrlTrfRxService:	
 13900                           ;psect for function _USBCtrlTrfRxService
 13901                           
 13902                           
 13903                           ;usb/usb_device.c: 1858:     uint8_t byteToRead;;usb/usb_device.c: 1859:     uint8_t i;;
      +                          usb/usb_device.c: 1863:     byteToRead = pBDTEntryEP0OutCurrent->CNT;
 13904                           
 13905                           ;incstack = 0
 13906                           ; Regs used in _USBCtrlTrfRxService: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13907     0F4D  086B               	movf	_pBDTEntryEP0OutCurrent,w
 13908     0F4E  0086               	movwf	6
 13909     0F4F  0187               	clrf	7
 13910     0F50  3F41               	moviw [1]fsr1
 13911     0F51  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13912                           
 13913                           ;usb/usb_device.c: 1869:     if(byteToRead > outPipes[0].wCount.Val)
 13914     0F52  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13915     0F53  00F4               	movwf	??_USBCtrlTrfRxService
 13916     0F54  01F5               	clrf	??_USBCtrlTrfRxService+1
 13917     0F55  0875               	movf	??_USBCtrlTrfRxService+1,w
 13918     0F56  0022               	movlb	2	; select bank2
 13919     0F57  0225               	subwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13920     0F58  1D03               	skipz
 13921     0F59  2F5C               	goto	u365_25
 13922     0F5A  0874               	movf	??_USBCtrlTrfRxService,w
 13923     0F5B  0224               	subwf	(_outPipes^(0+256)+3),w	;volatile
 13924     0F5C                     u365_25:
 13925     0F5C  1803               	skipnc
 13926     0F5D  2F60               	goto	i1l594
 13927                           
 13928                           ;usb/usb_device.c: 1870:     {;usb/usb_device.c: 1871:         byteToRead = outPipes[0].
      +                          wCount.Val;
 13929     0F5E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13930     0F5F  00F9               	movwf	USBCtrlTrfRxService@byteToRead
 13931     0F60                     i1l594:	
 13932                           ;usb/usb_device.c: 1872:     }
 13933                           
 13934                           
 13935                           ;usb/usb_device.c: 1874:     outPipes[0].wCount.Val -= byteToRead;
 13936     0F60  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13937     0F61  00F4               	movwf	??_USBCtrlTrfRxService
 13938     0F62  01F5               	clrf	??_USBCtrlTrfRxService+1
 13939     0F63  0874               	movf	??_USBCtrlTrfRxService,w
 13940     0F64  02A4               	subwf	(_outPipes^(0+256)+3),f	;volatile
 13941     0F65  0875               	movf	??_USBCtrlTrfRxService+1,w
 13942     0F66  3BA5               	subwfb	((_outPipes+1)^(0+256)+3),f	;volatile
 13943                           
 13944                           ;usb/usb_device.c: 1878:     for(i=0;i<byteToRead;i++)
 13945     0F67  01F8               	clrf	USBCtrlTrfRxService@i
 13946     0F68                     i1l4442:
 13947     0F68  0879               	movf	USBCtrlTrfRxService@byteToRead,w
 13948     0F69  0278               	subwf	USBCtrlTrfRxService@i,w
 13949     0F6A  1803               	btfsc	3,0
 13950     0F6B  2F7E               	goto	i1l4444
 13951                           
 13952                           ;usb/usb_device.c: 1879:     {;usb/usb_device.c: 1880:         *outPipes[0].pDst.bRam++ 
      +                          = CtrlTrfData[i];
 13953     0F6C  0821               	movf	_outPipes^(0+256),w	;volatile
 13954     0F6D  0086               	movwf	6
 13955     0F6E  0187               	clrf	7
 13956     0F6F  0878               	movf	USBCtrlTrfRxService@i,w
 13957     0F70  3E48               	addlw	72
 13958     0F71  0084               	movwf	4
 13959     0F72  0185               	clrf	5
 13960     0F73  0800               	movf	0,w
 13961     0F74  0081               	movwf	1
 13962     0F75  3001               	movlw	1
 13963     0F76  00F4               	movwf	??_USBCtrlTrfRxService
 13964     0F77  0874               	movf	??_USBCtrlTrfRxService,w
 13965     0F78  07A1               	addwf	_outPipes^(0+256),f	;volatile
 13966                           
 13967                           ;usb/usb_device.c: 1881:     }
 13968     0F79  3001               	movlw	1
 13969     0F7A  00F4               	movwf	??_USBCtrlTrfRxService
 13970     0F7B  0874               	movf	??_USBCtrlTrfRxService,w
 13971     0F7C  07F8               	addwf	USBCtrlTrfRxService@i,f
 13972     0F7D  2F68               	goto	i1l4442
 13973     0F7E                     i1l4444:
 13974                           
 13975                           ;usb/usb_device.c: 1885:     if(outPipes[0].wCount.Val > 0)
 13976     0F7E  0824               	movf	(_outPipes^(0+256)+3),w	;volatile
 13977     0F7F  0425               	iorwf	((_outPipes+1)^(0+256)+3),w	;volatile
 13978     0F80  1903               	btfsc	3,2
 13979     0F81  2FBF               	goto	i1l4456
 13980                           
 13981                           ;usb/usb_device.c: 1886:     {;usb/usb_device.c: 1887:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 13982     0F82  0020               	movlb	0	; select bank0
 13983     0F83  0867               	movf	_pBDTEntryEP0OutNext,w
 13984     0F84  3E01               	addlw	1
 13985     0F85  00F4               	movwf	??_USBCtrlTrfRxService
 13986     0F86  3000               	movlw	0
 13987     0F87  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 13988     0F88  00F5               	movwf	??_USBCtrlTrfRxService+1
 13989     0F89  0874               	movf	??_USBCtrlTrfRxService,w
 13990     0F8A  0086               	movwf	6
 13991     0F8B  0875               	movf	??_USBCtrlTrfRxService+1,w
 13992     0F8C  0087               	movwf	7
 13993     0F8D  3008               	movlw	8
 13994     0F8E  0081               	movwf	1
 13995                           
 13996                           ;usb/usb_device.c: 1888:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&CtrlTrfData)) 
      +                          & 0x7FFF);
 13997     0F8F  3048               	movlw	72
 13998     0F90  00F4               	movwf	??_USBCtrlTrfRxService
 13999     0F91  3000               	movlw	0
 14000     0F92  00F5               	movwf	??_USBCtrlTrfRxService+1
 14001     0F93  30FF               	movlw	255
 14002     0F94  0574               	andwf	??_USBCtrlTrfRxService,w
 14003     0F95  00F6               	movwf	??_USBCtrlTrfRxService+2
 14004     0F96  307F               	movlw	127
 14005     0F97  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14006     0F98  00F7               	movwf	??_USBCtrlTrfRxService+3
 14007     0F99  0867               	movf	_pBDTEntryEP0OutNext,w
 14008     0F9A  0086               	movwf	6
 14009     0F9B  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14010     0F9C  0087               	movwf	7
 14011     0F9D  3142               	addfsr 1,2
 14012     0F9E  0876               	movf	??_USBCtrlTrfRxService+2,w
 14013     0F9F  3FC0               	movwi [0]fsr1
 14014     0FA0  0877               	movf	??_USBCtrlTrfRxService+3,w
 14015     0FA1  3FC1               	movwi [1]fsr1
 14016                           
 14017                           ;usb/usb_device.c: 1889:         if(pBDTEntryEP0OutCurrent->STAT.DTS == 0)
 14018     0FA2  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14019     0FA3  0086               	movwf	6
 14020     0FA4  0187               	clrf	7
 14021     0FA5  1B01               	btfsc	1,6
 14022     0FA6  2FB3               	goto	i1l4454
 14023                           
 14024                           ;usb/usb_device.c: 1890:         {;usb/usb_device.c: 1891:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x40|(0x08 & 0x08);
 14025     0FA7  0867               	movf	_pBDTEntryEP0OutNext,w
 14026     0FA8  0086               	movwf	6
 14027     0FA9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14028     0FAA  0087               	movwf	7
 14029     0FAB  3048               	movlw	72
 14030     0FAC  0081               	movwf	1
 14031                           
 14032                           ;usb/usb_device.c: 1892:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14033     0FAD  0867               	movf	_pBDTEntryEP0OutNext,w
 14034     0FAE  0086               	movwf	6
 14035     0FAF  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14036     0FB0  0087               	movwf	7
 14037     0FB1  1781               	bsf	1,7
 14038                           
 14039                           ;usb/usb_device.c: 1893:         }
 14040     0FB2  0008               	return
 14041     0FB3                     i1l4454:
 14042                           
 14043                           ;usb/usb_device.c: 1895:         {;usb/usb_device.c: 1896:             pBDTEntryEP0OutNe
      +                          xt->STAT.Val = 0x00|(0x08 & 0x08);
 14044     0FB3  0867               	movf	_pBDTEntryEP0OutNext,w
 14045     0FB4  0086               	movwf	6
 14046     0FB5  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14047     0FB6  0087               	movwf	7
 14048     0FB7  3008               	movlw	8
 14049     0FB8  0081               	movwf	1
 14050                           
 14051                           ;usb/usb_device.c: 1897:             pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14052     0FB9  0867               	movf	_pBDTEntryEP0OutNext,w
 14053     0FBA  0086               	movwf	6
 14054     0FBB  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14055     0FBC  0087               	movwf	7
 14056     0FBD  1781               	bsf	1,7
 14057     0FBE  0008               	return
 14058     0FBF                     i1l4456:
 14059                           
 14060                           ;usb/usb_device.c: 1901:     {;usb/usb_device.c: 1905:         pBDTEntryEP0OutNext->CNT 
      +                          = 8;
 14061     0FBF  0020               	movlb	0	; select bank0
 14062     0FC0  0867               	movf	_pBDTEntryEP0OutNext,w
 14063     0FC1  3E01               	addlw	1
 14064     0FC2  00F4               	movwf	??_USBCtrlTrfRxService
 14065     0FC3  3000               	movlw	0
 14066     0FC4  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14067     0FC5  00F5               	movwf	??_USBCtrlTrfRxService+1
 14068     0FC6  0874               	movf	??_USBCtrlTrfRxService,w
 14069     0FC7  0086               	movwf	6
 14070     0FC8  0875               	movf	??_USBCtrlTrfRxService+1,w
 14071     0FC9  0087               	movwf	7
 14072     0FCA  3008               	movlw	8
 14073     0FCB  0081               	movwf	1
 14074                           
 14075                           ;usb/usb_device.c: 1906:         pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupPkt)) & 0
      +                          x7FFF);
 14076     0FCC  3040               	movlw	64
 14077     0FCD  00F4               	movwf	??_USBCtrlTrfRxService
 14078     0FCE  3000               	movlw	0
 14079     0FCF  00F5               	movwf	??_USBCtrlTrfRxService+1
 14080     0FD0  30FF               	movlw	255
 14081     0FD1  0574               	andwf	??_USBCtrlTrfRxService,w
 14082     0FD2  00F6               	movwf	??_USBCtrlTrfRxService+2
 14083     0FD3  307F               	movlw	127
 14084     0FD4  0575               	andwf	??_USBCtrlTrfRxService+1,w
 14085     0FD5  00F7               	movwf	??_USBCtrlTrfRxService+3
 14086     0FD6  0867               	movf	_pBDTEntryEP0OutNext,w
 14087     0FD7  0086               	movwf	6
 14088     0FD8  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14089     0FD9  0087               	movwf	7
 14090     0FDA  3142               	addfsr 1,2
 14091     0FDB  0876               	movf	??_USBCtrlTrfRxService+2,w
 14092     0FDC  3FC0               	movwi [0]fsr1
 14093     0FDD  0877               	movf	??_USBCtrlTrfRxService+3,w
 14094     0FDE  3FC1               	movwi [1]fsr1
 14095                           
 14096                           ;usb/usb_device.c: 1910:         pBDTEntryEP0OutNext->STAT.Val = 0x04;
 14097     0FDF  0867               	movf	_pBDTEntryEP0OutNext,w
 14098     0FE0  0086               	movwf	6
 14099     0FE1  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14100     0FE2  0087               	movwf	7
 14101     0FE3  3004               	movlw	4
 14102     0FE4  0081               	movwf	1
 14103                           
 14104                           ;usb/usb_device.c: 1911:         pBDTEntryEP0OutNext->STAT.Val |= 0x80;
 14105     0FE5  0867               	movf	_pBDTEntryEP0OutNext,w
 14106     0FE6  0086               	movwf	6
 14107     0FE7  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14108     0FE8  0087               	movwf	7
 14109     0FE9  1781               	bsf	1,7
 14110                           
 14111                           ;usb/usb_device.c: 1918:         if(outPipes[0].pFunc != ((void*)0))
 14112     0FEA  0022               	movlb	2	; select bank2
 14113     0FEB  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14114     0FEC  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14115     0FED  1903               	btfsc	3,2
 14116     0FEE  2FF9               	goto	i1l4468
 14117                           
 14118                           ;usb/usb_device.c: 1919:         {
 14119     0FEF  3005               	movlw	5
 14120     0FF0  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14121     0FF1  0086               	movwf	6
 14122     0FF2  3001               	movlw	1	; select bank2/3
 14123     0FF3  0087               	movwf	7
 14124     0FF4  3F41               	moviw [1]fsr1
 14125     0FF5  008A               	movwf	10
 14126     0FF6  3F40               	moviw [0]fsr1
 14127     0FF7  000A               	callw
 14128     0FF8  318F               	pagesel	$
 14129     0FF9                     i1l4468:
 14130     0FF9  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14131                           
 14132                           ;usb/usb_device.c: 1945:         if(USBDeferStatusStagePacket == 0)
 14133     0FFA  0859               	movf	_USBDeferStatusStagePacket^(0+256),w	;volatile
 14134     0FFB  1D03               	btfss	3,2
 14135     0FFC  0008               	return
 14136                           
 14137                           ;usb/usb_device.c: 1946:         {;usb/usb_device.c: 1947:             USBCtrlEPAllowSta
      +                          tusStage();
 14138     0FFD  318A  228C         	fcall	_USBCtrlEPAllowStatusStage
 14139     0FFF  0008               	return
 14140     1000                     __end_of_USBCtrlTrfRxService:
 14141                           
 14142                           	psect	text75
 14143     0A8C                     __ptext75:	
 14144 ;; *************** function _USBCtrlEPAllowStatusStage *****************
 14145 ;; Defined at:
 14146 ;;		line 1420 in file "usb/usb_device.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;		None
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;		None
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14155 ;; Tracked objects:
 14156 ;;		On entry : 0/2
 14157 ;;		On exit  : 1D/0
 14158 ;;		Unchanged: 0/0
 14159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;Total ram usage:        4 bytes
 14165 ;; Hardware stack levels used: 1
 14166 ;; This function calls:
 14167 ;;		Nothing
 14168 ;; This function is called by:
 14169 ;;		_USBDeviceTasks
 14170 ;;		_USBCtrlEPServiceComplete
 14171 ;;		_USBCtrlTrfRxService
 14172 ;; This function uses a non-reentrant model
 14173 ;;
 14174                           
 14175     0A8C                     _USBCtrlEPAllowStatusStage:	
 14176                           ;psect for function _USBCtrlEPAllowStatusStage
 14177                           
 14178                           
 14179                           ;usb/usb_device.c: 1427:     if(USBStatusStageEnabledFlag1 == 0)
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in _USBCtrlEPAllowStatusStage: [wreg+fsr1l+fsr1h+status,2+status,0]
 14183     0A8C  0022               	movlb	2	; select bank2
 14184     0A8D  0858               	movf	_USBStatusStageEnabledFlag1^(0+256),w	;volatile
 14185     0A8E  1D03               	btfss	3,2
 14186     0A8F  0008               	return
 14187                           
 14188                           ;usb/usb_device.c: 1428:     {;usb/usb_device.c: 1429:         USBStatusStageEnabledFlag
      +                          1 = 1;
 14189     0A90  3001               	movlw	1
 14190     0A91  00D8               	movwf	_USBStatusStageEnabledFlag1^(0+256)	;volatile
 14191                           
 14192                           ;usb/usb_device.c: 1430:         if(USBStatusStageEnabledFlag2 == 0)
 14193     0A92  0857               	movf	_USBStatusStageEnabledFlag2^(0+256),w	;volatile
 14194     0A93  1D03               	btfss	3,2
 14195     0A94  0008               	return
 14196                           
 14197                           ;usb/usb_device.c: 1431:         {;usb/usb_device.c: 1432:             USBStatusStageEna
      +                          bledFlag2 = 1;
 14198     0A95  3001               	movlw	1
 14199     0A96  00D7               	movwf	_USBStatusStageEnabledFlag2^(0+256)	;volatile
 14200                           
 14201                           ;usb/usb_device.c: 1436:             if(controlTransferState == 2)
 14202     0A97  3002               	movlw	2
 14203     0A98  0020               	movlb	0	; select bank0
 14204     0A99  066A               	xorwf	_controlTransferState,w	;volatile
 14205     0A9A  1D03               	btfss	3,2
 14206     0A9B  2AAE               	goto	i1l4058
 14207                           
 14208                           ;usb/usb_device.c: 1437:             {;usb/usb_device.c: 1438:                 pBDTEntry
      +                          In[0]->CNT = 0;
 14209     0A9C  0861               	movf	_pBDTEntryIn,w
 14210     0A9D  0086               	movwf	6
 14211     0A9E  0862               	movf	_pBDTEntryIn+1,w
 14212     0A9F  0087               	movwf	7
 14213     0AA0  3141               	addfsr 1,1
 14214     0AA1  0181               	clrf	1
 14215                           
 14216                           ;usb/usb_device.c: 1439:                 pBDTEntryIn[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14217     0AA2  0861               	movf	_pBDTEntryIn,w
 14218     0AA3  0086               	movwf	6
 14219     0AA4  0862               	movf	_pBDTEntryIn+1,w
 14220     0AA5  0087               	movwf	7
 14221     0AA6  3048               	movlw	72
 14222     0AA7  0081               	movwf	1
 14223                           
 14224                           ;usb/usb_device.c: 1440:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14225     0AA8  0861               	movf	_pBDTEntryIn,w
 14226     0AA9  0086               	movwf	6
 14227     0AAA  0862               	movf	_pBDTEntryIn+1,w
 14228     0AAB  0087               	movwf	7
 14229     0AAC  1781               	bsf	1,7
 14230                           
 14231                           ;usb/usb_device.c: 1441:             }
 14232     0AAD  0008               	return
 14233     0AAE                     i1l4058:
 14234     0AAE  036A               	decf	_controlTransferState,w	;volatile
 14235     0AAF  1D03               	btfss	3,2
 14236     0AB0  0008               	return
 14237                           
 14238                           ;usb/usb_device.c: 1443:             {;usb/usb_device.c: 1444:                 BothEP0Ou
      +                          tUOWNsSet = 0;
 14239     0AB1  0022               	movlb	2	; select bank2
 14240     0AB2  01DB               	clrf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14241                           
 14242                           ;usb/usb_device.c: 1449:                     pBDTEntryEP0OutCurrent->CNT = 8;
 14243     0AB3  0020               	movlb	0	; select bank0
 14244     0AB4  0A6B               	incf	_pBDTEntryEP0OutCurrent,w
 14245     0AB5  0086               	movwf	6
 14246     0AB6  0187               	clrf	7
 14247     0AB7  3008               	movlw	8
 14248     0AB8  0081               	movwf	1
 14249                           
 14250                           ;usb/usb_device.c: 1450:                     pBDTEntryEP0OutCurrent->ADR = (((uint16_t)(
      +                          &SetupPkt)) & 0x7FFF);
 14251     0AB9  3040               	movlw	64
 14252     0ABA  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14253     0ABB  3000               	movlw	0
 14254     0ABC  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14255     0ABD  30FF               	movlw	255
 14256     0ABE  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14257     0ABF  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14258     0AC0  307F               	movlw	127
 14259     0AC1  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14260     0AC2  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14261     0AC3  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14262     0AC4  3E02               	addlw	2
 14263     0AC5  0086               	movwf	6
 14264     0AC6  0187               	clrf	7
 14265     0AC7  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14266     0AC8  3FC0               	movwi [0]fsr1
 14267     0AC9  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14268     0ACA  3FC1               	movwi [1]fsr1
 14269                           
 14270                           ;usb/usb_device.c: 1451:                     pBDTEntryEP0OutCurrent->STAT.Val = 0x04;
 14271     0ACB  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14272     0ACC  0086               	movwf	6
 14273     0ACD  0187               	clrf	7
 14274     0ACE  3004               	movlw	4
 14275     0ACF  0081               	movwf	1
 14276                           
 14277                           ;usb/usb_device.c: 1452:                     pBDTEntryEP0OutCurrent->STAT.Val |= 0x80;
 14278     0AD0  086B               	movf	_pBDTEntryEP0OutCurrent,w
 14279     0AD1  0086               	movwf	6
 14280     0AD2  0187               	clrf	7
 14281     0AD3  1781               	bsf	1,7
 14282                           
 14283                           ;usb/usb_device.c: 1453:                     BothEP0OutUOWNsSet = 1;
 14284     0AD4  3001               	movlw	1
 14285     0AD5  0022               	movlb	2	; select bank2
 14286     0AD6  00DB               	movwf	_BothEP0OutUOWNsSet^(0+256)	;volatile
 14287                           
 14288                           ;usb/usb_device.c: 1457:                 pBDTEntryEP0OutNext->CNT = 8;
 14289     0AD7  0020               	movlb	0	; select bank0
 14290     0AD8  0867               	movf	_pBDTEntryEP0OutNext,w
 14291     0AD9  3E01               	addlw	1
 14292     0ADA  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14293     0ADB  3000               	movlw	0
 14294     0ADC  3D68               	addwfc	_pBDTEntryEP0OutNext+1,w
 14295     0ADD  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14296     0ADE  0870               	movf	??_USBCtrlEPAllowStatusStage,w
 14297     0ADF  0086               	movwf	6
 14298     0AE0  0871               	movf	??_USBCtrlEPAllowStatusStage+1,w
 14299     0AE1  0087               	movwf	7
 14300     0AE2  3008               	movlw	8
 14301     0AE3  0081               	movwf	1
 14302                           
 14303                           ;usb/usb_device.c: 1458:                 pBDTEntryEP0OutNext->ADR = (((uint16_t)(&SetupP
      +                          kt)) & 0x7FFF);
 14304     0AE4  3040               	movlw	64
 14305     0AE5  00F0               	movwf	??_USBCtrlEPAllowStatusStage
 14306     0AE6  3000               	movlw	0
 14307     0AE7  00F1               	movwf	??_USBCtrlEPAllowStatusStage+1
 14308     0AE8  30FF               	movlw	255
 14309     0AE9  0570               	andwf	??_USBCtrlEPAllowStatusStage,w
 14310     0AEA  00F2               	movwf	??_USBCtrlEPAllowStatusStage+2
 14311     0AEB  307F               	movlw	127
 14312     0AEC  0571               	andwf	??_USBCtrlEPAllowStatusStage+1,w
 14313     0AED  00F3               	movwf	??_USBCtrlEPAllowStatusStage+3
 14314     0AEE  0867               	movf	_pBDTEntryEP0OutNext,w
 14315     0AEF  0086               	movwf	6
 14316     0AF0  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14317     0AF1  0087               	movwf	7
 14318     0AF2  3142               	addfsr 1,2
 14319     0AF3  0872               	movf	??_USBCtrlEPAllowStatusStage+2,w
 14320     0AF4  3FC0               	movwi [0]fsr1
 14321     0AF5  0873               	movf	??_USBCtrlEPAllowStatusStage+3,w
 14322     0AF6  3FC1               	movwi [1]fsr1
 14323                           
 14324                           ;usb/usb_device.c: 1459:                 pBDTEntryEP0OutNext->STAT.Val = 0x80;
 14325     0AF7  0867               	movf	_pBDTEntryEP0OutNext,w
 14326     0AF8  0086               	movwf	6
 14327     0AF9  0868               	movf	_pBDTEntryEP0OutNext+1,w
 14328     0AFA  0087               	movwf	7
 14329     0AFB  3080               	movlw	128
 14330     0AFC  0081               	movwf	1
 14331     0AFD  0008               	return
 14332     0AFE                     __end_of_USBCtrlEPAllowStatusStage:	
 14333                           ;usb/usb_device.c: 1461:         }
 14334                           
 14335                           
 14336                           	psect	text76
 14337     0B77                     __ptext76:	
 14338 ;; *************** function _USBCtrlTrfInHandler *****************
 14339 ;; Defined at:
 14340 ;;		line 2599 in file "usb/usb_device.c"
 14341 ;; Parameters:    Size  Location     Type
 14342 ;;		None
 14343 ;; Auto vars:     Size  Location     Type
 14344 ;;  lastDTS         1    7[COMMON] unsigned char 
 14345 ;; Return value:  Size  Location     Type
 14346 ;;                  1    wreg      void 
 14347 ;; Registers used:
 14348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14349 ;; Tracked objects:
 14350 ;;		On entry : 1F/0
 14351 ;;		On exit  : 1F/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;Total ram usage:        5 bytes
 14359 ;; Hardware stack levels used: 1
 14360 ;; Hardware stack levels required when called: 3
 14361 ;; This function calls:
 14362 ;;		_USBCtrlTrfTxService
 14363 ;;		_USBHIDCBSetReportComplete
 14364 ;; This function is called by:
 14365 ;;		_USBCtrlEPService
 14366 ;; This function uses a non-reentrant model
 14367 ;;
 14368                           
 14369     0B77                     _USBCtrlTrfInHandler:	
 14370                           ;psect for function _USBCtrlTrfInHandler
 14371                           
 14372                           
 14373                           ;usb/usb_device.c: 2601:     uint8_t lastDTS;;usb/usb_device.c: 2603:     lastDTS = pBDT
      +                          EntryIn[0]->STAT.DTS;
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in _USBCtrlTrfInHandler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14377     0B77  0861               	movf	_pBDTEntryIn,w
 14378     0B78  0086               	movwf	6
 14379     0B79  0862               	movf	_pBDTEntryIn+1,w
 14380     0B7A  0087               	movwf	7
 14381     0B7B  3000               	movlw	0
 14382     0B7C  1B01               	btfsc	1,6
 14383     0B7D  3001               	movlw	1
 14384     0B7E  00F7               	movwf	USBCtrlTrfInHandler@lastDTS
 14385                           
 14386                           ;usb/usb_device.c: 2606:     pBDTEntryIn[0] = (volatile BDT_ENTRY*)(((uint16_t)pBDTEntry
      +                          In[0]) ^ 0x0004);
 14387     0B7F  3004               	movlw	4
 14388     0B80  0661               	xorwf	_pBDTEntryIn,w
 14389     0B81  00E1               	movwf	_pBDTEntryIn
 14390     0B82  3000               	movlw	0
 14391     0B83  0662               	xorwf	_pBDTEntryIn+1,w
 14392     0B84  00E2               	movwf	_pBDTEntryIn+1
 14393                           
 14394                           ;usb/usb_device.c: 2611:     if(USBDeviceState == ADR_PENDING_STATE)
 14395     0B85  3008               	movlw	8
 14396     0B86  066C               	xorwf	_USBDeviceState,w
 14397     0B87  1D03               	btfss	3,2
 14398     0B88  2B95               	goto	i1l4694
 14399                           
 14400                           ;usb/usb_device.c: 2612:     {;usb/usb_device.c: 2613:         UADDR = (SetupPkt.bDevADR
      +                           & 0x7F);
 14401     0B89  0842               	movf	66,w	;volatile
 14402     0B8A  397F               	andlw	127
 14403     0B8B  003D               	movlb	29	; select bank29
 14404     0B8C  0096               	movwf	22	;volatile
 14405                           
 14406                           ;usb/usb_device.c: 2614:         if(UADDR != 0u)
 14407     0B8D  0816               	movf	22,w
 14408     0B8E  1903               	btfsc	3,2
 14409     0B8F  2B92               	goto	i1l4692
 14410                           
 14411                           ;usb/usb_device.c: 2615:         {;usb/usb_device.c: 2616:             USBDeviceState=AD
      +                          DRESS_STATE;
 14412     0B90  3010               	movlw	16
 14413     0B91  2B93               	goto	L16
 14414     0B92                     i1l4692:	
 14415                           ;usb/usb_device.c: 2617:         }
 14416                           
 14417                           
 14418                           ;usb/usb_device.c: 2619:         {;usb/usb_device.c: 2620:             USBDeviceState=DE
      +                          FAULT_STATE;
 14419     0B92  3004               	movlw	4
 14420     0B93                     L16:
 14421     0B93  0020               	movlb	0	; select bank0
 14422     0B94  00EC               	movwf	_USBDeviceState	;volatile
 14423     0B95                     i1l4694:
 14424                           
 14425                           ;usb/usb_device.c: 2625:     if(controlTransferState == 1)
 14426     0B95  036A               	decf	_controlTransferState,w	;volatile
 14427     0B96  1D03               	btfss	3,2
 14428     0B97  2BDD               	goto	i1l680
 14429                           
 14430                           ;usb/usb_device.c: 2626:     {;usb/usb_device.c: 2627:         pBDTEntryIn[0]->ADR = (((
      +                          uint16_t)(CtrlTrfData)) & 0x7FFF);
 14431     0B98  3048               	movlw	72
 14432     0B99  00F3               	movwf	??_USBCtrlTrfInHandler
 14433     0B9A  3000               	movlw	0
 14434     0B9B  00F4               	movwf	??_USBCtrlTrfInHandler+1
 14435     0B9C  30FF               	movlw	255
 14436     0B9D  0573               	andwf	??_USBCtrlTrfInHandler,w
 14437     0B9E  00F5               	movwf	??_USBCtrlTrfInHandler+2
 14438     0B9F  307F               	movlw	127
 14439     0BA0  0574               	andwf	??_USBCtrlTrfInHandler+1,w
 14440     0BA1  00F6               	movwf	??_USBCtrlTrfInHandler+3
 14441     0BA2  0861               	movf	_pBDTEntryIn,w
 14442     0BA3  0086               	movwf	6
 14443     0BA4  0862               	movf	_pBDTEntryIn+1,w
 14444     0BA5  0087               	movwf	7
 14445     0BA6  3142               	addfsr 1,2
 14446     0BA7  0875               	movf	??_USBCtrlTrfInHandler+2,w
 14447     0BA8  3FC0               	movwi [0]fsr1
 14448     0BA9  0876               	movf	??_USBCtrlTrfInHandler+3,w
 14449     0BAA  3FC1               	movwi [1]fsr1
 14450                           
 14451                           ;usb/usb_device.c: 2628:         USBCtrlTrfTxService();
 14452     0BAB  3197  2734  318B   	fcall	_USBCtrlTrfTxService
 14453                           
 14454                           ;usb/usb_device.c: 2634:         if(shortPacketStatus == 2)
 14455     0BAE  3002               	movlw	2
 14456     0BAF  0021               	movlb	1	; select bank1
 14457     0BB0  066D               	xorwf	_shortPacketStatus^(0+128),w	;volatile
 14458     0BB1  1D03               	btfss	3,2
 14459     0BB2  2BC0               	goto	i1l4704
 14460                           
 14461                           ;usb/usb_device.c: 2635:         {;usb/usb_device.c: 2638:             pBDTEntryIn[0]->S
      +                          TAT.Val = 0x04;
 14462     0BB3  0020               	movlb	0	; select bank0
 14463     0BB4  0861               	movf	_pBDTEntryIn,w
 14464     0BB5  0086               	movwf	6
 14465     0BB6  0862               	movf	_pBDTEntryIn+1,w
 14466     0BB7  0087               	movwf	7
 14467     0BB8  3004               	movlw	4
 14468     0BB9  0081               	movwf	1
 14469                           
 14470                           ;usb/usb_device.c: 2639:             pBDTEntryIn[0]->STAT.Val |= 0x80;
 14471     0BBA  0861               	movf	_pBDTEntryIn,w
 14472     0BBB  0086               	movwf	6
 14473     0BBC  0862               	movf	_pBDTEntryIn+1,w
 14474     0BBD  0087               	movwf	7
 14475     0BBE  1781               	bsf	1,7
 14476                           
 14477                           ;usb/usb_device.c: 2640:         }
 14478     0BBF  0008               	return
 14479     0BC0                     i1l4704:
 14480                           
 14481                           ;usb/usb_device.c: 2642:         {;usb/usb_device.c: 2643:             if(lastDTS == 0)
 14482     0BC0  0877               	movf	USBCtrlTrfInHandler@lastDTS,w
 14483     0BC1  1D03               	btfss	3,2
 14484     0BC2  2BD0               	goto	i1l4708
 14485                           
 14486                           ;usb/usb_device.c: 2644:             {;usb/usb_device.c: 2645:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x40|(0x08 & 0x08);
 14487     0BC3  0020               	movlb	0	; select bank0
 14488     0BC4  0861               	movf	_pBDTEntryIn,w
 14489     0BC5  0086               	movwf	6
 14490     0BC6  0862               	movf	_pBDTEntryIn+1,w
 14491     0BC7  0087               	movwf	7
 14492     0BC8  3048               	movlw	72
 14493     0BC9  0081               	movwf	1
 14494                           
 14495                           ;usb/usb_device.c: 2646:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14496     0BCA  0861               	movf	_pBDTEntryIn,w
 14497     0BCB  0086               	movwf	6
 14498     0BCC  0862               	movf	_pBDTEntryIn+1,w
 14499     0BCD  0087               	movwf	7
 14500     0BCE  1781               	bsf	1,7
 14501                           
 14502                           ;usb/usb_device.c: 2647:             }
 14503     0BCF  0008               	return
 14504     0BD0                     i1l4708:
 14505                           
 14506                           ;usb/usb_device.c: 2649:             {;usb/usb_device.c: 2650:                 pBDTEntry
      +                          In[0]->STAT.Val = 0x00|(0x08 & 0x08);
 14507     0BD0  0020               	movlb	0	; select bank0
 14508     0BD1  0861               	movf	_pBDTEntryIn,w
 14509     0BD2  0086               	movwf	6
 14510     0BD3  0862               	movf	_pBDTEntryIn+1,w
 14511     0BD4  0087               	movwf	7
 14512     0BD5  3008               	movlw	8
 14513     0BD6  0081               	movwf	1
 14514                           
 14515                           ;usb/usb_device.c: 2651:                 pBDTEntryIn[0]->STAT.Val |= 0x80;
 14516     0BD7  0861               	movf	_pBDTEntryIn,w
 14517     0BD8  0086               	movwf	6
 14518     0BD9  0862               	movf	_pBDTEntryIn+1,w
 14519     0BDA  0087               	movwf	7
 14520     0BDB  1781               	bsf	1,7
 14521     0BDC  0008               	return
 14522     0BDD                     i1l680:	
 14523                           ;usb/usb_device.c: 2655:  else
 14524                           
 14525                           
 14526                           ;usb/usb_device.c: 2656:  {;usb/usb_device.c: 2660:         if(outPipes[0].info.bits.bus
      +                          y == 1)
 14527     0BDD  0022               	movlb	2	; select bank2
 14528     0BDE  1FA3               	btfss	(_outPipes^(0+256)+2),7	;volatile
 14529     0BDF  2BEF               	goto	i1l4716
 14530                           
 14531                           ;usb/usb_device.c: 2661:         {;usb/usb_device.c: 2662:             if(outPipes[0].pF
      +                          unc != ((void*)0))
 14532     0BE0  0826               	movf	(low ((_outPipes| (0+256)+5)))^0,w	;volatile
 14533     0BE1  0427               	iorwf	((low ((_outPipes| (0+256)+5))+1))^0,w	;volatile
 14534     0BE2  1903               	btfsc	3,2
 14535     0BE3  2BEE               	goto	i1l4714
 14536                           
 14537                           ;usb/usb_device.c: 2663:             {;usb/usb_device.c: 2664:                 outPipes[
      +                          0].pFunc();
 14538     0BE4  3005               	movlw	5
 14539     0BE5  3E21               	addlw	(low (_outPipes| (0+256)))& (0+255)
 14540     0BE6  0086               	movwf	6
 14541     0BE7  3001               	movlw	1	; select bank2/3
 14542     0BE8  0087               	movwf	7
 14543     0BE9  3F41               	moviw [1]fsr1
 14544     0BEA  008A               	movwf	10
 14545     0BEB  3F40               	moviw [0]fsr1
 14546     0BEC  000A               	callw
 14547     0BED  318B               	pagesel	$
 14548     0BEE                     i1l4714:
 14549                           
 14550                           ;usb/usb_device.c: 2666:             outPipes[0].info.bits.busy = 0;
 14551     0BEE  13A3               	bcf	(_outPipes^(0+256)+2),7	;volatile
 14552     0BEF                     i1l4716:
 14553                           
 14554                           ;usb/usb_device.c: 2669:         controlTransferState = 0;
 14555     0BEF  0020               	movlb	0	; select bank0
 14556     0BF0  01EA               	clrf	_controlTransferState	;volatile
 14557     0BF1  0008               	return
 14558     0BF2                     __end_of_USBCtrlTrfInHandler:
 14559                           
 14560                           	psect	text77
 14561     1EBB                     __ptext77:	
 14562 ;; *************** function _USBHIDCBSetReportComplete *****************
 14563 ;; Defined at:
 14564 ;;		line 522 in file "app_device_keyboard.c"
 14565 ;; Parameters:    Size  Location     Type
 14566 ;;		None
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;		None
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  1    wreg      void 
 14571 ;; Registers used:
 14572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14573 ;; Tracked objects:
 14574 ;;		On entry : 1F/2
 14575 ;;		On exit  : 1F/2
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        0 bytes
 14583 ;; Hardware stack levels used: 1
 14584 ;; Hardware stack levels required when called: 2
 14585 ;; This function calls:
 14586 ;;		i1_APP_KeyboardProcessOutputReport
 14587 ;; This function is called by:
 14588 ;;		_USBHIDCBSetReportHandler
 14589 ;;		_USBCtrlTrfRxService
 14590 ;;		_USBCtrlTrfInHandler
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594     1EBB                     _USBHIDCBSetReportComplete:	
 14595                           ;psect for function _USBHIDCBSetReportComplete
 14596                           
 14597                           
 14598                           ;app_device_keyboard.c: 525:     outputReport.value = CtrlTrfData[0];
 14599                           
 14600                           ;incstack = 0
 14601                           ; Regs used in _USBHIDCBSetReportComplete: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14602     1EBB  0020               	movlb	0	; select bank0
 14603     1EBC  0848               	movf	72,w	;volatile
 14604     1EBD  0022               	movlb	2	; select bank2
 14605     1EBE  00A0               	movwf	32	;volatile
 14606                           
 14607                           ;app_device_keyboard.c: 528:     APP_KeyboardProcessOutputReport();
 14608     1EBF  319F  2712         	fcall	i1_APP_KeyboardProcessOutputReport
 14609     1EC1  0008               	return
 14610     1EC2                     __end_of_USBHIDCBSetReportComplete:
 14611                           
 14612                           	psect	text78
 14613     1F12                     __ptext78:	
 14614 ;; *************** function i1_APP_KeyboardProcessOutputReport *****************
 14615 ;; Defined at:
 14616 ;;		line 517 in file "app_device_keyboard.c"
 14617 ;; Parameters:    Size  Location     Type
 14618 ;;		None
 14619 ;; Auto vars:     Size  Location     Type
 14620 ;;		None
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      void 
 14623 ;; Registers used:
 14624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : 1F/2
 14627 ;;		On exit  : 1F/2
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;Total ram usage:        0 bytes
 14635 ;; Hardware stack levels used: 1
 14636 ;; Hardware stack levels required when called: 1
 14637 ;; This function calls:
 14638 ;;		i1_PS2Keyboard_SendCommand
 14639 ;; This function is called by:
 14640 ;;		_USBHIDCBSetReportComplete
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644     1F12                     i1_APP_KeyboardProcessOutputReport:	
 14645                           ;psect for function i1_APP_KeyboardProcessOutputReport
 14646                           
 14647                           
 14648                           ;app_device_keyboard.c: 518:     keyboard.leds.value = outputReport.value;
 14649                           
 14650                           ;incstack = 0
 14651                           ; Regs used in i1_APP_KeyboardProcessOutputReport: [wreg+fsr1l+fsr1h+status,2+status,0+p
      +                          clath+cstack]
 14652     1F12  3090               	movlw	144
 14653     1F13  0086               	movwf	6
 14654     1F14  3023               	movlw	35
 14655     1F15  0087               	movwf	7
 14656     1F16  0820               	movf	32,w	;volatile
 14657     1F17  0081               	movwf	1
 14658                           
 14659                           ;app_device_keyboard.c: 519:     PS2Keyboard_SendCommand(0xED);
 14660     1F18  30ED               	movlw	237
 14661     1F19  3191  212B         	fcall	i1_PS2Keyboard_SendCommand
 14662     1F1B  0008               	return
 14663     1F1C                     __end_ofi1_APP_KeyboardProcessOutputReport:
 14664                           
 14665                           	psect	text79
 14666     112B                     __ptext79:	
 14667 ;; *************** function i1_PS2Keyboard_SendCommand *****************
 14668 ;; Defined at:
 14669 ;;		line 60 in file "ps2_keyboard.c"
 14670 ;; Parameters:    Size  Location     Type
 14671 ;;  cmd             1    wreg     unsigned char 
 14672 ;; Auto vars:     Size  Location     Type
 14673 ;;  cmd             1    0[COMMON] unsigned char 
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  1    wreg      void 
 14676 ;; Registers used:
 14677 ;;		wreg, status,2
 14678 ;; Tracked objects:
 14679 ;;		On entry : 1F/2
 14680 ;;		On exit  : 1F/2
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;Total ram usage:        1 bytes
 14688 ;; Hardware stack levels used: 1
 14689 ;; This function calls:
 14690 ;;		Nothing
 14691 ;; This function is called by:
 14692 ;;		i1_APP_KeyboardProcessOutputReport
 14693 ;; This function uses a non-reentrant model
 14694 ;;
 14695                           
 14696     112B                     i1_PS2Keyboard_SendCommand:	
 14697                           ;psect for function i1_PS2Keyboard_SendCommand
 14698                           
 14699                           
 14700                           ;incstack = 0
 14701                           ; Regs used in i1_PS2Keyboard_SendCommand: [wreg+status,2]
 14702                           ;i1PS2Keyboard_SendCommand@cmd stored from wreg
 14703     112B  00F0               	movwf	i1PS2Keyboard_SendCommand@cmd
 14704                           
 14705                           ;ps2_keyboard.c: 61:     keyboardCommand = cmd;
 14706     112C  0870               	movf	i1PS2Keyboard_SendCommand@cmd,w
 14707     112D  00CC               	movwf	_keyboardCommand^(0+256)	;volatile
 14708                           
 14709                           ;ps2_keyboard.c: 62:     (INTCONbits.GIE = 0);
 14710     112E  138B               	bcf	11,7	;volatile
 14711     112F  0021               	movlb	1	; select bank1
 14712     1130  120C               	bcf	12,4	;volatile
 14713     1131  0022               	movlb	2	; select bank2
 14714     1132  120C               	bcf	12,4	;volatile
 14715                           
 14716                           ;ps2_keyboard.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 14717     1133  30F0               	movlw	240
 14718     1134                     u642_27:
 14719     1134  3200               	nop2
 14720     1135  0B89               	decfsz	9,f
 14721     1136  2934               	goto	u642_27
 14722     1137  0021               	movlb	1	; select bank1
 14723     1138  160C               	bsf	12,4	;volatile
 14724                           
 14725                           ;ps2_keyboard.c: 67:     keyboardCommandCount = 0;
 14726     1139  0020               	movlb	0	; select bank0
 14727     113A  01E9               	clrf	_keyboardCommandCount	;volatile
 14728                           
 14729                           ;ps2_keyboard.c: 68:     keyboardCommandBits = 12;
 14730     113B  300C               	movlw	12
 14731     113C  0022               	movlb	2	; select bank2
 14732     113D  00CB               	movwf	_keyboardCommandBits^(0+256)	;volatile
 14733                           
 14734                           ;ps2_keyboard.c: 69:     keyboardCommandOnes = 0;
 14735     113E  01CA               	clrf	_keyboardCommandOnes^(0+256)	;volatile
 14736     113F  0021               	movlb	1	; select bank1
 14737     1140  128C               	bcf	12,5	;volatile
 14738     1141  0022               	movlb	2	; select bank2
 14739     1142  128C               	bcf	12,5	;volatile
 14740                           
 14741                           ;ps2_keyboard.c: 72:     (INTCONbits.GIE = 1);
 14742     1143  178B               	bsf	11,7	;volatile
 14743     1144  0008               	return
 14744     1145                     __end_ofi1_PS2Keyboard_SendCommand:
 14745                           
 14746                           	psect	text80
 14747     1734                     __ptext80:	
 14748 ;; *************** function _USBCtrlTrfTxService *****************
 14749 ;; Defined at:
 14750 ;;		line 1775 in file "usb/usb_device.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;		None
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;  byteToSend      1    2[COMMON] unsigned char 
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14759 ;; Tracked objects:
 14760 ;;		On entry : 1E/0
 14761 ;;		On exit  : 1C/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;Total ram usage:        3 bytes
 14769 ;; Hardware stack levels used: 1
 14770 ;; This function calls:
 14771 ;;		Nothing
 14772 ;; This function is called by:
 14773 ;;		_USBCtrlEPAllowDataStage
 14774 ;;		_USBCtrlTrfInHandler
 14775 ;; This function uses a non-reentrant model
 14776 ;;
 14777                           
 14778     1734                     _USBCtrlTrfTxService:	
 14779                           ;psect for function _USBCtrlTrfTxService
 14780                           
 14781                           
 14782                           ;usb/usb_device.c: 1777:     uint8_t byteToSend;;usb/usb_device.c: 1781:     byteToSend 
      +                          = 8;
 14783                           
 14784                           ;incstack = 0
 14785                           ; Regs used in _USBCtrlTrfTxService: [wreg-fsr1h+status,2+status,0+pclath]
 14786     1734  3008               	movlw	8
 14787     1735  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14788                           
 14789                           ;usb/usb_device.c: 1782:     if(inPipes[0].wCount.Val < (uint8_t)8)
 14790     1736  3000               	movlw	0
 14791     1737  0021               	movlb	1	; select bank1
 14792     1738  026C               	subwf	((_inPipes+1)^(0+128)+3),w	;volatile
 14793     1739  3008               	movlw	8
 14794     173A  1903               	skipnz
 14795     173B  026B               	subwf	(_inPipes^(0+128)+3),w	;volatile
 14796     173C  1803               	skipnc
 14797     173D  2F4A               	goto	i1l579
 14798                           
 14799                           ;usb/usb_device.c: 1783:     {;usb/usb_device.c: 1784:         byteToSend = inPipes[0].w
      +                          Count.Val;
 14800     173E  086B               	movf	(_inPipes^(0+128)+3),w	;volatile
 14801     173F  00F2               	movwf	USBCtrlTrfTxService@byteToSend
 14802                           
 14803                           ;usb/usb_device.c: 1791:         if(shortPacketStatus == 0)
 14804     1740  086D               	movf	_shortPacketStatus^(0+128),w	;volatile
 14805     1741  1D03               	btfss	3,2
 14806     1742  2F45               	goto	i1l3998
 14807                           
 14808                           ;usb/usb_device.c: 1792:         {;usb/usb_device.c: 1793:             shortPacketStatus
      +                           = 1;
 14809     1743  3001               	movlw	1
 14810     1744  2F49               	goto	L17
 14811     1745                     i1l3998:	
 14812                           ;usb/usb_device.c: 1794:         }
 14813                           
 14814     1745  036D               	decf	_shortPacketStatus^(0+128),w	;volatile
 14815     1746  1D03               	btfss	3,2
 14816     1747  2F4A               	goto	i1l579
 14817                           
 14818                           ;usb/usb_device.c: 1796:         {;usb/usb_device.c: 1797:             shortPacketStatus
      +                           = 2;
 14819     1748  3002               	movlw	2
 14820     1749                     L17:
 14821     1749  00ED               	movwf	_shortPacketStatus^(0+128)	;volatile
 14822     174A                     i1l579:	
 14823                           ;usb/usb_device.c: 1799:     }
 14824                           
 14825                           
 14826                           ;usb/usb_device.c: 1803:     inPipes[0].wCount.Val -= byteToSend;
 14827     174A  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14828     174B  00F0               	movwf	??_USBCtrlTrfTxService
 14829     174C  01F1               	clrf	??_USBCtrlTrfTxService+1
 14830     174D  0870               	movf	??_USBCtrlTrfTxService,w
 14831     174E  02EB               	subwf	(_inPipes^(0+128)+3),f	;volatile
 14832     174F  0871               	movf	??_USBCtrlTrfTxService+1,w
 14833     1750  3BEC               	subwfb	((_inPipes+1)^(0+128)+3),f	;volatile
 14834                           
 14835                           ;usb/usb_device.c: 1808:     pBDTEntryIn[0]->CNT = byteToSend;
 14836     1751  0020               	movlb	0	; select bank0
 14837     1752  0861               	movf	_pBDTEntryIn,w
 14838     1753  3E01               	addlw	1
 14839     1754  00F0               	movwf	??_USBCtrlTrfTxService
 14840     1755  3000               	movlw	0
 14841     1756  3D62               	addwfc	_pBDTEntryIn+1,w
 14842     1757  00F1               	movwf	??_USBCtrlTrfTxService+1
 14843     1758  0870               	movf	??_USBCtrlTrfTxService,w
 14844     1759  0086               	movwf	6
 14845     175A  0871               	movf	??_USBCtrlTrfTxService+1,w
 14846     175B  0087               	movwf	7
 14847     175C  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14848     175D  0081               	movwf	1
 14849                           
 14850                           ;usb/usb_device.c: 1812:     pDst = (volatile uint8_t*)CtrlTrfData;
 14851     175E  3048               	movlw	72
 14852     175F  0022               	movlb	2	; select bank2
 14853     1760  00DF               	movwf	_pDst^(0+256)
 14854                           
 14855                           ;usb/usb_device.c: 1813:     if(inPipes[0].info.bits.ctrl_trf_mem == 0x00)
 14856     1761  0021               	movlb	1	; select bank1
 14857     1762  1C6A               	btfss	(_inPipes^(0+128)+2),0	;volatile
 14858     1763  2F7B               	goto	i1l4018
 14859     1764  2F95               	goto	i1l4028
 14860     1765                     i1l4010:
 14861                           
 14862                           ;usb/usb_device.c: 1816:         {;usb/usb_device.c: 1817:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRom++;
 14863     1765  0022               	movlb	2	; select bank2
 14864     1766  085F               	movf	_pDst^(0+256),w
 14865     1767  0086               	movwf	6
 14866     1768  0187               	clrf	7
 14867     1769  0021               	movlb	1	; select bank1
 14868     176A  0868               	movf	_inPipes^(0+128),w	;volatile
 14869     176B  0084               	movwf	4
 14870     176C  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 14871     176D  0085               	movwf	5
 14872     176E  0800               	movf	0,w	;code access
 14873     176F  0081               	movwf	1
 14874     1770  3001               	movlw	1
 14875     1771  07E8               	addwf	_inPipes^(0+128),f	;volatile
 14876     1772  3000               	movlw	0
 14877     1773  3DE9               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14878     1774  3001               	movlw	1
 14879     1775  00F0               	movwf	??_USBCtrlTrfTxService
 14880     1776  0870               	movf	??_USBCtrlTrfTxService,w
 14881     1777  0022               	movlb	2	; select bank2
 14882     1778  07DF               	addwf	_pDst^(0+256),f
 14883                           
 14884                           ;usb/usb_device.c: 1818:             byteToSend--;
 14885     1779  3001               	movlw	1
 14886     177A  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14887     177B                     i1l4018:
 14888                           
 14889                           ;usb/usb_device.c: 1815:         while(byteToSend)
 14890     177B  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14891     177C  1903               	btfsc	3,2
 14892     177D  0008               	return
 14893     177E  2F65               	goto	i1l4010
 14894     177F                     i1l4020:
 14895                           
 14896                           ;usb/usb_device.c: 1824:         {;usb/usb_device.c: 1825:             *pDst++ = *inPipe
      +                          s[0].pSrc.bRam++;
 14897     177F  0022               	movlb	2	; select bank2
 14898     1780  085F               	movf	_pDst^(0+256),w
 14899     1781  0086               	movwf	6
 14900     1782  0187               	clrf	7
 14901     1783  0021               	movlb	1	; select bank1
 14902     1784  0868               	movf	_inPipes^(0+128),w	;volatile
 14903     1785  0084               	movwf	4
 14904     1786  0869               	movf	(_inPipes+1)^(0+128),w	;volatile
 14905     1787  0085               	movwf	5
 14906     1788  0800               	movf	0,w	;code access
 14907     1789  0081               	movwf	1
 14908     178A  3001               	movlw	1
 14909     178B  07E8               	addwf	_inPipes^(0+128),f	;volatile
 14910     178C  3000               	movlw	0
 14911     178D  3DE9               	addwfc	(_inPipes+1)^(0+128),f	;volatile
 14912     178E  3001               	movlw	1
 14913     178F  00F0               	movwf	??_USBCtrlTrfTxService
 14914     1790  0870               	movf	??_USBCtrlTrfTxService,w
 14915     1791  0022               	movlb	2	; select bank2
 14916     1792  07DF               	addwf	_pDst^(0+256),f
 14917                           
 14918                           ;usb/usb_device.c: 1826:             byteToSend--;
 14919     1793  3001               	movlw	1
 14920     1794  02F2               	subwf	USBCtrlTrfTxService@byteToSend,f
 14921     1795                     i1l4028:
 14922                           
 14923                           ;usb/usb_device.c: 1823:         while(byteToSend)
 14924     1795  0872               	movf	USBCtrlTrfTxService@byteToSend,w
 14925     1796  1903               	btfsc	3,2
 14926     1797  0008               	return
 14927     1798  2F7F               	goto	i1l4020
 14928     1799                     __end_of_USBCtrlTrfTxService:
 14929                           
 14930                           	psect	text81
 14931     1F3D                     __ptext81:	
 14932 ;; *************** function _TMR2_ISR *****************
 14933 ;; Defined at:
 14934 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 14935 ;; Parameters:    Size  Location     Type
 14936 ;;		None
 14937 ;; Auto vars:     Size  Location     Type
 14938 ;;		None
 14939 ;; Return value:  Size  Location     Type
 14940 ;;                  1    wreg      void 
 14941 ;; Registers used:
 14942 ;;		wreg, status,2, status,0, pclath, cstack
 14943 ;; Tracked objects:
 14944 ;;		On entry : 1F/0
 14945 ;;		On exit  : 0/0
 14946 ;;		Unchanged: 0/0
 14947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14952 ;;Total ram usage:        0 bytes
 14953 ;; Hardware stack levels used: 1
 14954 ;; Hardware stack levels required when called: 1
 14955 ;; This function calls:
 14956 ;;		NULL
 14957 ;;		_SysTimeInterrupt
 14958 ;;		_TMR2_DefaultInterruptHandler
 14959 ;; This function is called by:
 14960 ;;		_INTERRUPT_InterruptManager
 14961 ;; This function uses a non-reentrant model
 14962 ;;
 14963                           
 14964     1F3D                     _TMR2_ISR:	
 14965                           ;psect for function _TMR2_ISR
 14966                           
 14967                           
 14968                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
 14969                           
 14970                           ;incstack = 0
 14971                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
 14972     1F3D  1091               	bcf	17,1	;volatile
 14973                           
 14974                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
 14975     1F3E  0022               	movlb	2	; select bank2
 14976     1F3F  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14977     1F40  0445               	iorwf	(_TMR2_InterruptHandler+1)^(0+256),w
 14978     1F41  1903               	btfsc	3,2
 14979     1F42  0008               	return
 14980                           
 14981                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
 14982     1F43  0845               	movf	(_TMR2_InterruptHandler+1)^(0+256),w
 14983     1F44  008A               	movwf	10
 14984     1F45  0844               	movf	_TMR2_InterruptHandler^(0+256),w
 14985     1F46  000A               	callw
 14986     1F47  319F               	pagesel	$
 14987     1F48  0008               	return
 14988     1F49                     __end_of_TMR2_ISR:
 14989                           
 14990                           	psect	text82
 14991     1084                     __ptext82:	
 14992 ;; *************** function _SysTimeInterrupt *****************
 14993 ;; Defined at:
 14994 ;;		line 24 in file "systime.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;		None
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;		None
 14999 ;; Return value:  Size  Location     Type
 15000 ;;                  1    wreg      void 
 15001 ;; Registers used:
 15002 ;;		wreg
 15003 ;; Tracked objects:
 15004 ;;		On entry : 1F/2
 15005 ;;		On exit  : 1F/2
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;Total ram usage:        0 bytes
 15013 ;; Hardware stack levels used: 1
 15014 ;; This function calls:
 15015 ;;		Nothing
 15016 ;; This function is called by:
 15017 ;;		_SysTime_Init
 15018 ;;		_TMR2_ISR
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022     1084                     _SysTimeInterrupt:	
 15023                           ;psect for function _SysTimeInterrupt
 15024                           
 15025                           
 15026                           ;systime.c: 26:     ++timeMs;
 15027                           
 15028                           ;incstack = 0
 15029                           ; Regs used in _SysTimeInterrupt: [wreg]
 15030     1084  3001               	movlw	1
 15031     1085  07A8               	addwf	_timeMs^(0+256),f
 15032     1086  3000               	movlw	0
 15033     1087  3DA9               	addwfc	(_timeMs+1)^(0+256),f
 15034     1088  3000               	movlw	0
 15035     1089  3DAA               	addwfc	(_timeMs+2)^(0+256),f
 15036     108A  3000               	movlw	0
 15037     108B  3DAB               	addwfc	(_timeMs+3)^(0+256),f
 15038     108C  0008               	return
 15039     108D                     __end_of_SysTimeInterrupt:
 15040                           
 15041                           	psect	text83
 15042     07FF                     __ptext83:	
 15043 ;; *************** function _TMR2_DefaultInterruptHandler *****************
 15044 ;; Defined at:
 15045 ;;		line 136 in file "mcc_generated_files/tmr2.c"
 15046 ;; Parameters:    Size  Location     Type
 15047 ;;		None
 15048 ;; Auto vars:     Size  Location     Type
 15049 ;;		None
 15050 ;; Return value:  Size  Location     Type
 15051 ;;                  1    wreg      void 
 15052 ;; Registers used:
 15053 ;;		None
 15054 ;; Tracked objects:
 15055 ;;		On entry : 1F/2
 15056 ;;		On exit  : 1F/2
 15057 ;;		Unchanged: 1F/0
 15058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15063 ;;Total ram usage:        0 bytes
 15064 ;; Hardware stack levels used: 1
 15065 ;; This function calls:
 15066 ;;		Nothing
 15067 ;; This function is called by:
 15068 ;;		_TMR2_Initialize
 15069 ;;		_TMR2_ISR
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073     07FF                     _TMR2_DefaultInterruptHandler:	
 15074                           ;psect for function _TMR2_DefaultInterruptHandler
 15075                           
 15076                           
 15077                           ;incstack = 0
 15078                           ; Regs used in _TMR2_DefaultInterruptHandler: []
 15079     07FF  0008               	return
 15080     0800                     __end_of_TMR2_DefaultInterruptHandler:
 15081                           
 15082                           	psect	text84
 15083     1F1C                     __ptext84:	
 15084 ;; *************** function _PIN_MANAGER_IOC *****************
 15085 ;; Defined at:
 15086 ;;		line 121 in file "mcc_generated_files/pin_manager.c"
 15087 ;; Parameters:    Size  Location     Type
 15088 ;;		None
 15089 ;; Auto vars:     Size  Location     Type
 15090 ;;		None
 15091 ;; Return value:  Size  Location     Type
 15092 ;;                  1    wreg      void 
 15093 ;; Registers used:
 15094 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15095 ;; Tracked objects:
 15096 ;;		On entry : 0/0
 15097 ;;		On exit  : 1F/7
 15098 ;;		Unchanged: 0/0
 15099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;Total ram usage:        0 bytes
 15105 ;; Hardware stack levels used: 1
 15106 ;; Hardware stack levels required when called: 4
 15107 ;; This function calls:
 15108 ;;		_IOCAF4_ISR
 15109 ;;		_IOCAF5_ISR
 15110 ;; This function is called by:
 15111 ;;		_INTERRUPT_InterruptManager
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115     1F1C                     _PIN_MANAGER_IOC:	
 15116                           ;psect for function _PIN_MANAGER_IOC
 15117                           
 15118                           
 15119                           ;mcc_generated_files/pin_manager.c: 124:     if(IOCAFbits.IOCAF4 == 1)
 15120                           
 15121                           ;incstack = 0
 15122                           ; Regs used in _PIN_MANAGER_IOC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15123     1F1C  0027               	movlb	7	; select bank7
 15124     1F1D  1E13               	btfss	19,4	;volatile
 15125     1F1E  2F22               	goto	i1l6026
 15126                           
 15127                           ;mcc_generated_files/pin_manager.c: 125:     {;mcc_generated_files/pin_manager.c: 126:  
      +                                 IOCAF4_ISR();
 15128     1F1F  319F  2755  319F   	fcall	_IOCAF4_ISR
 15129     1F22                     i1l6026:
 15130                           
 15131                           ;mcc_generated_files/pin_manager.c: 129:     if(IOCAFbits.IOCAF5 == 1)
 15132     1F22  1E93               	btfss	19,5	;volatile
 15133     1F23  0008               	return
 15134                           
 15135                           ;mcc_generated_files/pin_manager.c: 130:     {;mcc_generated_files/pin_manager.c: 131:  
      +                                 IOCAF5_ISR();
 15136     1F24  319F  2762         	fcall	_IOCAF5_ISR
 15137     1F26  0008               	return
 15138     1F27                     __end_of_PIN_MANAGER_IOC:
 15139                           
 15140                           	psect	text85
 15141     1F62                     __ptext85:	
 15142 ;; *************** function _IOCAF5_ISR *****************
 15143 ;; Defined at:
 15144 ;;		line 168 in file "mcc_generated_files/pin_manager.c"
 15145 ;; Parameters:    Size  Location     Type
 15146 ;;		None
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;		None
 15149 ;; Return value:  Size  Location     Type
 15150 ;;                  1    wreg      void 
 15151 ;; Registers used:
 15152 ;;		wreg, status,2, status,0, pclath, cstack
 15153 ;; Tracked objects:
 15154 ;;		On entry : 1F/7
 15155 ;;		On exit  : 1F/7
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;Total ram usage:        0 bytes
 15163 ;; Hardware stack levels used: 1
 15164 ;; Hardware stack levels required when called: 2
 15165 ;; This function calls:
 15166 ;;		NULL
 15167 ;;		_IOCAF5_DefaultInterruptHandler
 15168 ;;		_PS2Keyboard_DataInterrupt
 15169 ;; This function is called by:
 15170 ;;		_PIN_MANAGER_IOC
 15171 ;; This function uses a non-reentrant model
 15172 ;;
 15173                           
 15174     1F62                     _IOCAF5_ISR:	
 15175                           ;psect for function _IOCAF5_ISR
 15176                           
 15177                           
 15178                           ;mcc_generated_files/pin_manager.c: 173:     if(IOCAF5_InterruptHandler)
 15179                           
 15180                           ;incstack = 0
 15181                           ; Regs used in _IOCAF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 15182     1F62  0022               	movlb	2	; select bank2
 15183     1F63  086A               	movf	_IOCAF5_InterruptHandler^(0+256),w
 15184     1F64  046B               	iorwf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 15185     1F65  1903               	btfsc	3,2
 15186     1F66  2F6C               	goto	i1l4944
 15187                           
 15188                           ;mcc_generated_files/pin_manager.c: 174:     {;mcc_generated_files/pin_manager.c: 175:  
      +                                 IOCAF5_InterruptHandler();
 15189     1F67  086B               	movf	(_IOCAF5_InterruptHandler+1)^(0+256),w
 15190     1F68  008A               	movwf	10
 15191     1F69  086A               	movf	_IOCAF5_InterruptHandler^(0+256),w
 15192     1F6A  000A               	callw
 15193     1F6B  319F               	pagesel	$
 15194     1F6C                     i1l4944:
 15195                           
 15196                           ;mcc_generated_files/pin_manager.c: 177:     IOCAFbits.IOCAF5 = 0;
 15197     1F6C  0027               	movlb	7	; select bank7
 15198     1F6D  1293               	bcf	19,5	;volatile
 15199     1F6E  0008               	return
 15200     1F6F                     __end_of_IOCAF5_ISR:
 15201                           
 15202                           	psect	text86
 15203     0003                     __ptext86:	
 15204 ;; *************** function _IOCAF5_DefaultInterruptHandler *****************
 15205 ;; Defined at:
 15206 ;;		line 190 in file "mcc_generated_files/pin_manager.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;		None
 15209 ;; Auto vars:     Size  Location     Type
 15210 ;;		None
 15211 ;; Return value:  Size  Location     Type
 15212 ;;                  1    wreg      void 
 15213 ;; Registers used:
 15214 ;;		None
 15215 ;; Tracked objects:
 15216 ;;		On entry : 1F/2
 15217 ;;		On exit  : 1F/2
 15218 ;;		Unchanged: 1F/0
 15219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;Total ram usage:        0 bytes
 15225 ;; Hardware stack levels used: 1
 15226 ;; This function calls:
 15227 ;;		Nothing
 15228 ;; This function is called by:
 15229 ;;		_PIN_MANAGER_Initialize
 15230 ;;		_IOCAF5_ISR
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234     0003                     _IOCAF5_DefaultInterruptHandler:	
 15235                           ;psect for function _IOCAF5_DefaultInterruptHandler
 15236                           
 15237                           
 15238                           ;incstack = 0
 15239                           ; Regs used in _IOCAF5_DefaultInterruptHandler: []
 15240     0003  0008               	return
 15241     0004                     __end_of_IOCAF5_DefaultInterruptHandler:
 15242                           
 15243                           	psect	text87
 15244     1F96                     __ptext87:	
 15245 ;; *************** function _PS2Keyboard_DataInterrupt *****************
 15246 ;; Defined at:
 15247 ;;		line 79 in file "ps2_keyboard.c"
 15248 ;; Parameters:    Size  Location     Type
 15249 ;;		None
 15250 ;; Auto vars:     Size  Location     Type
 15251 ;;		None
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  1    wreg      void 
 15254 ;; Registers used:
 15255 ;;		wreg, status,2, status,0, pclath, cstack
 15256 ;; Tracked objects:
 15257 ;;		On entry : 1F/2
 15258 ;;		On exit  : 1F/2
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;Total ram usage:        0 bytes
 15266 ;; Hardware stack levels used: 1
 15267 ;; Hardware stack levels required when called: 1
 15268 ;; This function calls:
 15269 ;;		_SysTime_GetCurrentTimeMs
 15270 ;; This function is called by:
 15271 ;;		_PS2Keyboard_Init
 15272 ;;		_IOCAF5_ISR
 15273 ;; This function uses a non-reentrant model
 15274 ;;
 15275                           
 15276     1F96                     _PS2Keyboard_DataInterrupt:	
 15277                           ;psect for function _PS2Keyboard_DataInterrupt
 15278                           
 15279                           
 15280                           ;ps2_keyboard.c: 80:     if (keyboardState == KeyboardIdle) {
 15281                           
 15282                           ;incstack = 0
 15283                           ; Regs used in _PS2Keyboard_DataInterrupt: [wreg+status,2+status,0+pclath+cstack]
 15284     1F96  0853               	movf	_keyboardState^(0+256),w
 15285     1F97  1D03               	btfss	3,2
 15286     1F98  0008               	return
 15287                           
 15288                           ;ps2_keyboard.c: 81:         keyboardState = KeyboardStart;
 15289     1F99  3001               	movlw	1
 15290     1F9A  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15291                           
 15292                           ;ps2_keyboard.c: 82:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15293     1F9B  319F  2709         	fcall	_SysTime_GetCurrentTimeMs
 15294     1F9D  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15295     1F9E  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15296     1F9F  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15297     1FA0  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15298     1FA1  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15299     1FA2  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15300     1FA3  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15301     1FA4  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15302     1FA5  0008               	return
 15303     1FA6                     __end_of_PS2Keyboard_DataInterrupt:
 15304                           
 15305                           	psect	text88
 15306     1F55                     __ptext88:	
 15307 ;; *************** function _IOCAF4_ISR *****************
 15308 ;; Defined at:
 15309 ;;		line 138 in file "mcc_generated_files/pin_manager.c"
 15310 ;; Parameters:    Size  Location     Type
 15311 ;;		None
 15312 ;; Auto vars:     Size  Location     Type
 15313 ;;		None
 15314 ;; Return value:  Size  Location     Type
 15315 ;;                  1    wreg      void 
 15316 ;; Registers used:
 15317 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15318 ;; Tracked objects:
 15319 ;;		On entry : 1F/7
 15320 ;;		On exit  : 1F/7
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;Total ram usage:        0 bytes
 15328 ;; Hardware stack levels used: 1
 15329 ;; Hardware stack levels required when called: 3
 15330 ;; This function calls:
 15331 ;;		NULL
 15332 ;;		_IOCAF4_DefaultInterruptHandler
 15333 ;;		_PS2Keyboard_ClockInterrupt
 15334 ;; This function is called by:
 15335 ;;		_PIN_MANAGER_IOC
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339     1F55                     _IOCAF4_ISR:	
 15340                           ;psect for function _IOCAF4_ISR
 15341                           
 15342                           
 15343                           ;mcc_generated_files/pin_manager.c: 143:     if(IOCAF4_InterruptHandler)
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _IOCAF4_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15347     1F55  0022               	movlb	2	; select bank2
 15348     1F56  086C               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15349     1F57  046D               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15350     1F58  1903               	btfsc	3,2
 15351     1F59  2F5F               	goto	i1l5938
 15352                           
 15353                           ;mcc_generated_files/pin_manager.c: 144:     {;mcc_generated_files/pin_manager.c: 145:  
      +                                 IOCAF4_InterruptHandler();
 15354     1F5A  086D               	movf	(_IOCAF4_InterruptHandler+1)^(0+256),w
 15355     1F5B  008A               	movwf	10
 15356     1F5C  086C               	movf	_IOCAF4_InterruptHandler^(0+256),w
 15357     1F5D  000A               	callw
 15358     1F5E  319F               	pagesel	$
 15359     1F5F                     i1l5938:
 15360                           
 15361                           ;mcc_generated_files/pin_manager.c: 147:     IOCAFbits.IOCAF4 = 0;
 15362     1F5F  0027               	movlb	7	; select bank7
 15363     1F60  1213               	bcf	19,4	;volatile
 15364     1F61  0008               	return
 15365     1F62                     __end_of_IOCAF4_ISR:
 15366                           
 15367                           	psect	text89
 15368     0002                     __ptext89:	
 15369 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 15370 ;; Defined at:
 15371 ;;		line 160 in file "mcc_generated_files/pin_manager.c"
 15372 ;; Parameters:    Size  Location     Type
 15373 ;;		None
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;		None
 15376 ;; Return value:  Size  Location     Type
 15377 ;;                  1    wreg      void 
 15378 ;; Registers used:
 15379 ;;		None
 15380 ;; Tracked objects:
 15381 ;;		On entry : 1F/2
 15382 ;;		On exit  : 1F/2
 15383 ;;		Unchanged: 1F/0
 15384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;Total ram usage:        0 bytes
 15390 ;; Hardware stack levels used: 1
 15391 ;; This function calls:
 15392 ;;		Nothing
 15393 ;; This function is called by:
 15394 ;;		_PIN_MANAGER_Initialize
 15395 ;;		_IOCAF4_ISR
 15396 ;; This function uses a non-reentrant model
 15397 ;;
 15398                           
 15399     0002                     _IOCAF4_DefaultInterruptHandler:	
 15400                           ;psect for function _IOCAF4_DefaultInterruptHandler
 15401                           
 15402                           
 15403                           ;incstack = 0
 15404                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 15405     0002  0008               	return
 15406     0003                     __end_of_IOCAF4_DefaultInterruptHandler:
 15407                           
 15408                           	psect	text90
 15409     0502                     __ptext90:	
 15410 ;; *************** function _PS2Keyboard_ClockInterrupt *****************
 15411 ;; Defined at:
 15412 ;;		line 86 in file "ps2_keyboard.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;		None
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;  bit             1   13[COMMON] _Bool 
 15417 ;;  bitPos          1   12[COMMON] unsigned char 
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  1    wreg      void 
 15420 ;; Registers used:
 15421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15422 ;; Tracked objects:
 15423 ;;		On entry : 1F/2
 15424 ;;		On exit  : 1F/2
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15431 ;;Total ram usage:        6 bytes
 15432 ;; Hardware stack levels used: 1
 15433 ;; Hardware stack levels required when called: 2
 15434 ;; This function calls:
 15435 ;;		_SysTime_GetCurrentTimeMs
 15436 ;;		i1_GenericQueue_Enqueue
 15437 ;; This function is called by:
 15438 ;;		_PS2Keyboard_Init
 15439 ;;		_IOCAF4_ISR
 15440 ;; This function uses a non-reentrant model
 15441 ;;
 15442                           
 15443     0502                     _PS2Keyboard_ClockInterrupt:	
 15444                           ;psect for function _PS2Keyboard_ClockInterrupt
 15445                           
 15446                           
 15447                           ;ps2_keyboard.c: 88:     if (keyboardCommandBits > 0) {
 15448                           
 15449                           ;incstack = 0
 15450                           ; Regs used in _PS2Keyboard_ClockInterrupt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15451     0502  084B               	movf	_keyboardCommandBits^(0+256),w	;volatile
 15452     0503  1903               	btfsc	3,2
 15453     0504  2D45               	goto	i1l5872
 15454                           
 15455                           ;ps2_keyboard.c: 89:         if(keyboardCommandCount > 0 && keyboardCommandCount < 9) {
 15456     0505  0020               	movlb	0	; select bank0
 15457     0506  0869               	movf	_keyboardCommandCount,w	;volatile
 15458     0507  1903               	btfsc	3,2
 15459     0508  2D2D               	goto	i1l5864
 15460     0509  3009               	movlw	9
 15461     050A  0269               	subwf	_keyboardCommandCount,w	;volatile
 15462     050B  1803               	skipnc
 15463     050C  2D2D               	goto	i1l5864
 15464                           
 15465                           ;ps2_keyboard.c: 90:             uint8_t bitPos = keyboardCommandCount - 1;
 15466     050D  0869               	movf	_keyboardCommandCount,w	;volatile
 15467     050E  3EFF               	addlw	255
 15468     050F  00FC               	movwf	PS2Keyboard_ClockInterrupt@bitPos
 15469                           
 15470                           ;ps2_keyboard.c: 91:             _Bool bit = (keyboardCommand >> bitPos) & 1;
 15471     0510  0022               	movlb	2	; select bank2
 15472     0511  084C               	movf	_keyboardCommand^(0+256),w	;volatile
 15473     0512  0020               	movlb	0	; select bank0
 15474     0513  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15475     0514  0A7C               	incf	PS2Keyboard_ClockInterrupt@bitPos,w
 15476     0515  2D17               	goto	u568_24
 15477     0516                     u568_25:
 15478     0516  36DC               	lsrf	??_PS2Keyboard_ClockInterrupt,f
 15479     0517                     u568_24:
 15480     0517  0B89               	decfsz	9,f
 15481     0518  2D16               	goto	u568_25
 15482     0519  1C5C               	btfss	??_PS2Keyboard_ClockInterrupt,0
 15483     051A  2D1D               	goto	u569_20
 15484     051B  3001               	movlw	1
 15485     051C  2D1E               	goto	u570_20
 15486     051D                     u569_20:
 15487     051D  3000               	movlw	0
 15488     051E                     u570_20:
 15489     051E  00FD               	movwf	PS2Keyboard_ClockInterrupt@bit
 15490                           
 15491                           ;ps2_keyboard.c: 92:             if(bit) {
 15492     051F  087D               	movf	PS2Keyboard_ClockInterrupt@bit,w
 15493     0520  1903               	btfsc	3,2
 15494     0521  2D2B               	goto	i1l1086
 15495                           
 15496                           ;ps2_keyboard.c: 93:                 do { LATAbits.LATA5 = 1; } while(0);
 15497     0522  0022               	movlb	2	; select bank2
 15498     0523  168C               	bsf	12,5	;volatile
 15499                           
 15500                           ;ps2_keyboard.c: 94:                 keyboardCommandOnes += 1;
 15501     0524  3001               	movlw	1
 15502     0525  0020               	movlb	0	; select bank0
 15503     0526  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15504     0527  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15505     0528  0022               	movlb	2	; select bank2
 15506     0529  07CA               	addwf	_keyboardCommandOnes^(0+256),f	;volatile
 15507                           
 15508                           ;ps2_keyboard.c: 95:             } else {
 15509     052A  2D3C               	goto	i1l5870
 15510     052B                     i1l1086:	
 15511                           ;ps2_keyboard.c: 96:                 do { LATAbits.LATA5 = 0; } while(0);
 15512                           
 15513     052B  0022               	movlb	2	; select bank2
 15514     052C  2D34               	goto	i1l1091
 15515     052D                     i1l5864:
 15516     052D  3009               	movlw	9
 15517     052E  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15518     052F  1D03               	btfss	3,2
 15519     0530  2D36               	goto	i1l5868
 15520                           
 15521                           ;ps2_keyboard.c: 99:             if(keyboardCommandOnes & 1) {
 15522     0531  0022               	movlb	2	; select bank2
 15523     0532  1C4A               	btfss	_keyboardCommandOnes^(0+256),0	;volatile
 15524     0533  2D3B               	goto	L18
 15525     0534                     i1l1091:	
 15526                           ;ps2_keyboard.c: 100:                 do { LATAbits.LATA5 = 0; } while(0);
 15527                           
 15528     0534  128C               	bcf	12,5	;volatile
 15529     0535  2D3C               	goto	i1l5870
 15530     0536                     i1l5868:	
 15531                           ;ps2_keyboard.c: 102:                 do { LATAbits.LATA5 = 1; } while(0);
 15532                           
 15533     0536  300A               	movlw	10
 15534     0537  0669               	xorwf	_keyboardCommandCount,w	;volatile
 15535     0538  1D03               	btfss	3,2
 15536     0539  2D3C               	goto	i1l5870
 15537                           
 15538                           ;ps2_keyboard.c: 105:             do { TRISAbits.TRISA5 = 1; } while(0);
 15539     053A  0021               	movlb	1	; select bank1
 15540     053B                     L18:
 15541     053B  168C               	bsf	12,5	;volatile
 15542     053C                     i1l5870:
 15543                           
 15544                           ;ps2_keyboard.c: 107:         keyboardCommandCount += 1;
 15545     053C  3001               	movlw	1
 15546     053D  0020               	movlb	0	; select bank0
 15547     053E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15548     053F  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15549     0540  07E9               	addwf	_keyboardCommandCount,f	;volatile
 15550                           
 15551                           ;ps2_keyboard.c: 108:         keyboardCommandBits -= 1;
 15552     0541  3001               	movlw	1
 15553     0542  0022               	movlb	2	; select bank2
 15554     0543  02CB               	subwf	_keyboardCommandBits^(0+256),f	;volatile
 15555                           
 15556                           ;ps2_keyboard.c: 109:     } else {
 15557     0544  0008               	return
 15558     0545                     i1l5872:
 15559                           
 15560                           ;ps2_keyboard.c: 110:         if (SysTime_GetCurrentTimeMs() - prevTimeMs >= 250) {
 15561     0545  319F  2709  3185   	fcall	_SysTime_GetCurrentTimeMs
 15562     0548  082C               	movf	_prevTimeMs^(0+256),w	;volatile
 15563     0549  0270               	subwf	?_SysTime_GetCurrentTimeMs,w
 15564     054A  0020               	movlb	0	; select bank0
 15565     054B  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15566     054C  0022               	movlb	2	; select bank2
 15567     054D  082D               	movf	(_prevTimeMs+1)^(0+256),w	;volatile
 15568     054E  3B71               	subwfb	?_SysTime_GetCurrentTimeMs+1,w
 15569     054F  0020               	movlb	0	; select bank0
 15570     0550  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15571     0551  0022               	movlb	2	; select bank2
 15572     0552  082E               	movf	(_prevTimeMs+2)^(0+256),w	;volatile
 15573     0553  3B72               	subwfb	?_SysTime_GetCurrentTimeMs+2,w
 15574     0554  0020               	movlb	0	; select bank0
 15575     0555  00DE               	movwf	??_PS2Keyboard_ClockInterrupt+2
 15576     0556  0022               	movlb	2	; select bank2
 15577     0557  082F               	movf	(_prevTimeMs+3)^(0+256),w	;volatile
 15578     0558  3B73               	subwfb	?_SysTime_GetCurrentTimeMs+3,w
 15579     0559  0020               	movlb	0	; select bank0
 15580     055A  00DF               	movwf	??_PS2Keyboard_ClockInterrupt+3
 15581     055B  085F               	movf	??_PS2Keyboard_ClockInterrupt+3,w
 15582     055C  1D03               	btfss	3,2
 15583     055D  2D68               	goto	i1l5874
 15584     055E  085E               	movf	??_PS2Keyboard_ClockInterrupt+2,w
 15585     055F  1D03               	btfss	3,2
 15586     0560  2D68               	goto	i1l5874
 15587     0561  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15588     0562  1D03               	btfss	3,2
 15589     0563  2D68               	goto	i1l5874
 15590     0564  30FA               	movlw	250
 15591     0565  025C               	subwf	??_PS2Keyboard_ClockInterrupt,w
 15592     0566  1C03               	btfss	3,0
 15593     0567  2DD4               	goto	i1l5926
 15594     0568                     i1l5874:
 15595                           
 15596                           ;ps2_keyboard.c: 111:             keyboardState = KeyboardStart;
 15597     0568  3001               	movlw	1
 15598     0569  0022               	movlb	2	; select bank2
 15599     056A  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15600     056B  2DD4               	goto	i1l5926
 15601     056C                     i1l5876:
 15602                           
 15603                           ;ps2_keyboard.c: 115:                 keyboardIndexData = 0;
 15604     056C  0022               	movlb	2	; select bank2
 15605     056D  01D2               	clrf	_keyboardIndexData^(0+256)	;volatile
 15606                           
 15607                           ;ps2_keyboard.c: 116:                 keyboardOnesCount = 0;
 15608     056E  01D1               	clrf	_keyboardOnesCount^(0+256)	;volatile
 15609                           
 15610                           ;ps2_keyboard.c: 117:                 keyboardScanCode.value = 0;
 15611     056F  01E5               	clrf	_keyboardScanCode^(0+256)
 15612     0570                     i1l5878:
 15613                           
 15614                           ;ps2_keyboard.c: 118:                 keyboardState = KeyboardData;
 15615     0570  3002               	movlw	2
 15616     0571  2DAA               	goto	L20
 15617     0572                     i1l5880:	
 15618                           ;ps2_keyboard.c: 119:                 break;
 15619                           
 15620                           
 15621                           ;ps2_keyboard.c: 121:                 keyboardData = PORTAbits.RA5;
 15622     0572  3000               	movlw	0
 15623     0573  1A8C               	btfsc	12,5	;volatile
 15624     0574  3001               	movlw	1
 15625     0575  0022               	movlb	2	; select bank2
 15626     0576  00CF               	movwf	_keyboardData^(0+256)	;volatile
 15627                           
 15628                           ;ps2_keyboard.c: 122:                 keyboardScanCode.value |= keyboardData << keyboard
      +                          IndexData;
 15629     0577  084F               	movf	_keyboardData^(0+256),w	;volatile
 15630     0578  0020               	movlb	0	; select bank0
 15631     0579  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15632     057A  0022               	movlb	2	; select bank2
 15633     057B  0A52               	incf	_keyboardIndexData^(0+256),w	;volatile
 15634     057C  0020               	movlb	0	; select bank0
 15635     057D  2D7F               	goto	u576_24
 15636     057E                     u576_25:
 15637     057E  35DC               	lslf	??_PS2Keyboard_ClockInterrupt,f
 15638     057F                     u576_24:
 15639     057F  0B89               	decfsz	9,f
 15640     0580  2D7E               	goto	u576_25
 15641     0581  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15642     0582  00DD               	movwf	??_PS2Keyboard_ClockInterrupt+1
 15643     0583  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15644     0584  0022               	movlb	2	; select bank2
 15645     0585  04E5               	iorwf	_keyboardScanCode^(0+256),f
 15646                           
 15647                           ;ps2_keyboard.c: 123:                 keyboardOnesCount += keyboardData;
 15648     0586  084F               	movf	_keyboardData^(0+256),w	;volatile
 15649     0587  0020               	movlb	0	; select bank0
 15650     0588  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15651     0589  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15652     058A  0022               	movlb	2	; select bank2
 15653     058B  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15654                           
 15655                           ;ps2_keyboard.c: 124:                 keyboardIndexData += 1;
 15656     058C  3001               	movlw	1
 15657     058D  0020               	movlb	0	; select bank0
 15658     058E  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15659     058F  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15660     0590  0022               	movlb	2	; select bank2
 15661     0591  07D2               	addwf	_keyboardIndexData^(0+256),f	;volatile
 15662                           
 15663                           ;ps2_keyboard.c: 125:                 if (keyboardIndexData == 8) {
 15664     0592  3008               	movlw	8
 15665     0593  0652               	xorwf	_keyboardIndexData^(0+256),w	;volatile
 15666     0594  1D03               	btfss	3,2
 15667     0595  2D70               	goto	i1l5878
 15668                           
 15669                           ;ps2_keyboard.c: 126:                     keyboardState = KeyboardParity;
 15670     0596  3003               	movlw	3
 15671     0597  2DAA               	goto	L20
 15672     0598                     i1l5894:	
 15673                           ;ps2_keyboard.c: 127:                 } else {
 15674                           
 15675                           
 15676                           ;ps2_keyboard.c: 132:                 keyboardData = PORTAbits.RA5;
 15677     0598  3000               	movlw	0
 15678     0599  1A8C               	btfsc	12,5	;volatile
 15679     059A  3001               	movlw	1
 15680     059B  0022               	movlb	2	; select bank2
 15681     059C  00CF               	movwf	_keyboardData^(0+256)	;volatile
 15682                           
 15683                           ;ps2_keyboard.c: 133:                 keyboardOnesCount += keyboardData;
 15684     059D  084F               	movf	_keyboardData^(0+256),w	;volatile
 15685     059E  0020               	movlb	0	; select bank0
 15686     059F  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15687     05A0  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15688     05A1  0022               	movlb	2	; select bank2
 15689     05A2  07D1               	addwf	_keyboardOnesCount^(0+256),f	;volatile
 15690                           
 15691                           ;ps2_keyboard.c: 134:                 keyboardScanCodeValid = keyboardOnesCount & 0x01;
 15692     05A3  1C51               	btfss	_keyboardOnesCount^(0+256),0	;volatile
 15693     05A4  2DA7               	goto	u578_20
 15694     05A5  3001               	movlw	1
 15695     05A6  2DA8               	goto	u579_20
 15696     05A7                     u578_20:
 15697     05A7  3000               	movlw	0
 15698     05A8                     u579_20:
 15699     05A8  00D0               	movwf	_keyboardScanCodeValid^(0+256)	;volatile
 15700                           
 15701                           ;ps2_keyboard.c: 135:                 keyboardState = KeyboardStop;
 15702     05A9  3004               	movlw	4
 15703     05AA                     L20:
 15704     05AA  00D3               	movwf	_keyboardState^(0+256)	;volatile
 15705                           
 15706                           ;ps2_keyboard.c: 136:                 break;
 15707     05AB  2DEC               	goto	i1l5928
 15708     05AC                     i1l5902:
 15709                           
 15710                           ;ps2_keyboard.c: 138:                 if (keyboardScanCode.value == 0xE0) {
 15711     05AC  30E0               	movlw	224
 15712     05AD  0022               	movlb	2	; select bank2
 15713     05AE  0665               	xorwf	_keyboardScanCode^(0+256),w
 15714     05AF  1D03               	btfss	3,2
 15715     05B0  2DB4               	goto	i1l5906
 15716                           
 15717                           ;ps2_keyboard.c: 139:                     keyboardIsExtend = 1;
 15718     05B1  3001               	movlw	1
 15719     05B2  00CE               	movwf	_keyboardIsExtend^(0+256)	;volatile
 15720                           
 15721                           ;ps2_keyboard.c: 140:                 } else if (keyboardScanCode.value == 0xF0) {
 15722     05B3  2DD1               	goto	i1l5920
 15723     05B4                     i1l5906:
 15724     05B4  30F0               	movlw	240
 15725     05B5  0665               	xorwf	_keyboardScanCode^(0+256),w
 15726     05B6  1D03               	btfss	3,2
 15727     05B7  2DBB               	goto	i1l5910
 15728                           
 15729                           ;ps2_keyboard.c: 141:                     keyboardIsBreak = 1;
 15730     05B8  3001               	movlw	1
 15731     05B9  00CD               	movwf	_keyboardIsBreak^(0+256)	;volatile
 15732                           
 15733                           ;ps2_keyboard.c: 142:                 } else {
 15734     05BA  2DD1               	goto	i1l5920
 15735     05BB                     i1l5910:
 15736                           
 15737                           ;ps2_keyboard.c: 143:                     keyboardScanCode.isBreak = keyboardIsBreak;
 15738     05BB  084D               	movf	_keyboardIsBreak^(0+256),w	;volatile
 15739     05BC  00E7               	movwf	(_keyboardScanCode^(0+256)+2)
 15740                           
 15741                           ;ps2_keyboard.c: 144:                     keyboardScanCode.isExtend = keyboardIsExtend;
 15742     05BD  084E               	movf	_keyboardIsExtend^(0+256),w	;volatile
 15743     05BE  00E6               	movwf	(_keyboardScanCode^(0+256)+1)
 15744                           
 15745                           ;ps2_keyboard.c: 145:                     if (keyboardScanCodeValid) {
 15746     05BF  0850               	movf	_keyboardScanCodeValid^(0+256),w	;volatile
 15747     05C0  1903               	btfsc	3,2
 15748     05C1  2DCE               	goto	i1l5916
 15749                           
 15750                           ;ps2_keyboard.c: 146:                         GenericQueue_Enqueue(&keyboardScanCodeQueu
      +                          e, &keyboardScanCode);
 15751     05C2  3091               	movlw	145
 15752     05C3  0020               	movlb	0	; select bank0
 15753     05C4  00D5               	movwf	i1GenericQueue_Enqueue@q
 15754     05C5  3023               	movlw	35
 15755     05C6  00D6               	movwf	i1GenericQueue_Enqueue@q+1
 15756     05C7  3065               	movlw	low _keyboardScanCode
 15757     05C8  00D7               	movwf	i1GenericQueue_Enqueue@item
 15758     05C9  3001               	movlw	high _keyboardScanCode
 15759     05CA  00D8               	movwf	i1GenericQueue_Enqueue@item+1
 15760     05CB  3188  207E  3185   	fcall	i1_GenericQueue_Enqueue
 15761     05CE                     i1l5916:
 15762                           
 15763                           ;ps2_keyboard.c: 148:                     keyboardIsBreak = 0;
 15764     05CE  0022               	movlb	2	; select bank2
 15765     05CF  01CD               	clrf	_keyboardIsBreak^(0+256)	;volatile
 15766                           
 15767                           ;ps2_keyboard.c: 149:                     keyboardIsExtend = 0;
 15768     05D0  01CE               	clrf	_keyboardIsExtend^(0+256)	;volatile
 15769     05D1                     i1l5920:
 15770                           
 15771                           ;ps2_keyboard.c: 151:                 keyboardState = KeyboardIdle;
 15772     05D1  0022               	movlb	2	; select bank2
 15773     05D2  01D3               	clrf	_keyboardState^(0+256)	;volatile
 15774                           
 15775                           ;ps2_keyboard.c: 152:                 break;
 15776     05D3  2DEC               	goto	i1l5928
 15777     05D4                     i1l5926:
 15778     05D4  0022               	movlb	2	; select bank2
 15779     05D5  0853               	movf	_keyboardState^(0+256),w	;volatile
 15780     05D6  0020               	movlb	0	; select bank0
 15781     05D7  00DC               	movwf	??_PS2Keyboard_ClockInterrupt
 15782     05D8  01DD               	clrf	??_PS2Keyboard_ClockInterrupt+1
 15783                           
 15784                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15785                           ; Switch size 1, requested type "simple"
 15786                           ; Number of cases is 1, Range of values is 0 to 0
 15787                           ; switch strategies available:
 15788                           ; Name         Instructions Cycles
 15789                           ; simple_byte            4     3 (average)
 15790                           ; direct_byte            8     6 (fixed)
 15791                           ; jumptable            260     6 (fixed)
 15792                           ;	Chosen strategy is simple_byte
 15793     05D9  085D               	movf	??_PS2Keyboard_ClockInterrupt+1,w
 15794     05DA  3A00               	xorlw	0	; case 0
 15795     05DB  1903               	skipnz
 15796     05DC  2DDE               	goto	i1l6236
 15797     05DD  2DD1               	goto	i1l5920
 15798     05DE                     i1l6236:
 15799                           
 15800                           ; Switch size 1, requested type "simple"
 15801                           ; Number of cases is 4, Range of values is 1 to 4
 15802                           ; switch strategies available:
 15803                           ; Name         Instructions Cycles
 15804                           ; simple_byte           13     7 (average)
 15805                           ; direct_byte           17     9 (fixed)
 15806                           ; jumptable            263     9 (fixed)
 15807                           ;	Chosen strategy is simple_byte
 15808     05DE  085C               	movf	??_PS2Keyboard_ClockInterrupt,w
 15809     05DF  3A01               	xorlw	1	; case 1
 15810     05E0  1903               	skipnz
 15811     05E1  2D6C               	goto	i1l5876
 15812     05E2  3A03               	xorlw	3	; case 2
 15813     05E3  1903               	skipnz
 15814     05E4  2D72               	goto	i1l5880
 15815     05E5  3A01               	xorlw	1	; case 3
 15816     05E6  1903               	skipnz
 15817     05E7  2D98               	goto	i1l5894
 15818     05E8  3A07               	xorlw	7	; case 4
 15819     05E9  1903               	skipnz
 15820     05EA  2DAC               	goto	i1l5902
 15821     05EB  2DD1               	goto	i1l5920
 15822     05EC                     i1l5928:
 15823                           
 15824                           ;ps2_keyboard.c: 157:         prevTimeMs = SysTime_GetCurrentTimeMs();
 15825     05EC  319F  2709         	fcall	_SysTime_GetCurrentTimeMs
 15826     05EE  0873               	movf	?_SysTime_GetCurrentTimeMs+3,w
 15827     05EF  00AF               	movwf	(_prevTimeMs+3)^(0+256)	;volatile
 15828     05F0  0872               	movf	?_SysTime_GetCurrentTimeMs+2,w
 15829     05F1  00AE               	movwf	(_prevTimeMs+2)^(0+256)	;volatile
 15830     05F2  0871               	movf	?_SysTime_GetCurrentTimeMs+1,w
 15831     05F3  00AD               	movwf	(_prevTimeMs+1)^(0+256)	;volatile
 15832     05F4  0870               	movf	?_SysTime_GetCurrentTimeMs,w
 15833     05F5  00AC               	movwf	_prevTimeMs^(0+256)	;volatile
 15834     05F6  0008               	return
 15835     05F7                     __end_of_PS2Keyboard_ClockInterrupt:
 15836                           
 15837                           	psect	text91
 15838     087E                     __ptext91:	
 15839 ;; *************** function i1_GenericQueue_Enqueue *****************
 15840 ;; Defined at:
 15841 ;;		line 19 in file "generic_queue.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;  q               2    5[BANK0 ] PTR struct .
 15844 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 15845 ;;  item            2    7[BANK0 ] PTR const void 
 15846 ;;		 -> keyboardScanCode(3), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateState@usbHidCode_2928(1), 
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;		None
 15849 ;; Return value:  Size  Location     Type
 15850 ;;                  1    wreg      void 
 15851 ;; Registers used:
 15852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15853 ;; Tracked objects:
 15854 ;;		On entry : 1F/0
 15855 ;;		On exit  : 1F/0
 15856 ;;		Unchanged: 0/0
 15857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15858 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;Total ram usage:        7 bytes
 15863 ;; Hardware stack levels used: 1
 15864 ;; Hardware stack levels required when called: 1
 15865 ;; This function calls:
 15866 ;;		i1_GenericQueue_IsFull
 15867 ;;		i1___awmod
 15868 ;;		i1___wmul
 15869 ;;		i1_memcpy
 15870 ;; This function is called by:
 15871 ;;		_PS2Keyboard_ClockInterrupt
 15872 ;; This function uses a non-reentrant model
 15873 ;;
 15874                           
 15875     087E                     i1_GenericQueue_Enqueue:	
 15876                           ;psect for function i1_GenericQueue_Enqueue
 15877                           
 15878                           
 15879                           ;generic_queue.c: 20:     if (!GenericQueue_IsFull(q)) {
 15880                           
 15881                           ;incstack = 0
 15882                           ; Regs used in i1_GenericQueue_Enqueue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15883     087E  0856               	movf	i1GenericQueue_Enqueue@q+1,w
 15884     087F  00F1               	movwf	i1GenericQueue_IsFull@q+1
 15885     0880  0855               	movf	i1GenericQueue_Enqueue@q,w
 15886     0881  00F0               	movwf	i1GenericQueue_IsFull@q
 15887     0882  319F  27EC  3188   	fcall	i1_GenericQueue_IsFull
 15888     0885  0870               	movf	?i1_GenericQueue_IsFull,w
 15889     0886  0471               	iorwf	?i1_GenericQueue_IsFull+1,w
 15890     0887  1D03               	btfss	3,2
 15891     0888  0008               	return
 15892                           
 15893                           ;generic_queue.c: 21:         memcpy(&q->buffer[q->rear * q->element_size], item, q->ele
      +                          ment_size);
 15894     0889  0855               	movf	i1GenericQueue_Enqueue@q,w
 15895     088A  3E5D               	addlw	93
 15896     088B  0086               	movwf	6
 15897     088C  3000               	movlw	0
 15898     088D  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15899     088E  0087               	movwf	7
 15900     088F  0801               	movf	1,w
 15901     0890  00D9               	movwf	??i1_GenericQueue_Enqueue
 15902     0891  01DA               	clrf	??i1_GenericQueue_Enqueue+1
 15903     0892  0859               	movf	??i1_GenericQueue_Enqueue,w
 15904     0893  00F0               	movwf	i1___wmul@multiplier
 15905     0894  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15906     0895  00F1               	movwf	i1___wmul@multiplier+1
 15907     0896  0855               	movf	i1GenericQueue_Enqueue@q,w
 15908     0897  3E5A               	addlw	90
 15909     0898  0086               	movwf	6
 15910     0899  3000               	movlw	0
 15911     089A  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15912     089B  0087               	movwf	7
 15913     089C  3F40               	moviw [0]fsr1
 15914     089D  00F2               	movwf	i1___wmul@multiplicand
 15915     089E  3F41               	moviw [1]fsr1
 15916     089F  00F3               	movwf	i1___wmul@multiplicand+1
 15917     08A0  3191  2145  3188   	fcall	i1___wmul
 15918     08A3  0870               	movf	?i1___wmul,w
 15919     08A4  0755               	addwf	i1GenericQueue_Enqueue@q,w
 15920     08A5  00F6               	movwf	i1memcpy@d1
 15921     08A6  0871               	movf	?i1___wmul+1,w
 15922     08A7  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15923     08A8  00F7               	movwf	i1memcpy@d1+1
 15924     08A9  0858               	movf	i1GenericQueue_Enqueue@item+1,w
 15925     08AA  00F9               	movwf	i1memcpy@s1+1
 15926     08AB  0857               	movf	i1GenericQueue_Enqueue@item,w
 15927     08AC  00F8               	movwf	i1memcpy@s1
 15928     08AD  0855               	movf	i1GenericQueue_Enqueue@q,w
 15929     08AE  3E5A               	addlw	90
 15930     08AF  0086               	movwf	6
 15931     08B0  3000               	movlw	0
 15932     08B1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15933     08B2  0087               	movwf	7
 15934     08B3  3F40               	moviw [0]fsr1
 15935     08B4  00FA               	movwf	i1memcpy@n
 15936     08B5  3F41               	moviw [1]fsr1
 15937     08B6  00FB               	movwf	i1memcpy@n+1
 15938     08B7  3193  230E  3188   	fcall	i1_memcpy
 15939                           
 15940                           ;generic_queue.c: 22:         q->rear = (q->rear + 1) % 15;
 15941     08BA  300F               	movlw	15
 15942     08BB  00F0               	movwf	i1___awmod@divisor
 15943     08BC  3000               	movlw	0
 15944     08BD  00F1               	movwf	i1___awmod@divisor+1
 15945     08BE  0855               	movf	i1GenericQueue_Enqueue@q,w
 15946     08BF  3E5D               	addlw	93
 15947     08C0  0086               	movwf	6
 15948     08C1  3000               	movlw	0
 15949     08C2  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15950     08C3  0087               	movwf	7
 15951     08C4  0801               	movf	1,w
 15952     08C5  3E01               	addlw	1
 15953     08C6  00F2               	movwf	i1___awmod@dividend
 15954     08C7  3000               	movlw	0
 15955     08C8  1803               	skipnc
 15956     08C9  3001               	movlw	1
 15957     08CA  00F3               	movwf	i1___awmod@dividend+1
 15958     08CB  3194  24B1         	fcall	i1___awmod
 15959     08CD  0870               	movf	?i1___awmod,w
 15960     08CE  00D9               	movwf	??i1_GenericQueue_Enqueue
 15961     08CF  0855               	movf	i1GenericQueue_Enqueue@q,w
 15962     08D0  3E5D               	addlw	93
 15963     08D1  00DA               	movwf	??i1_GenericQueue_Enqueue+1
 15964     08D2  3000               	movlw	0
 15965     08D3  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15966     08D4  00DB               	movwf	??i1_GenericQueue_Enqueue+2
 15967     08D5  085A               	movf	??i1_GenericQueue_Enqueue+1,w
 15968     08D6  0086               	movwf	6
 15969     08D7  085B               	movf	??i1_GenericQueue_Enqueue+2,w
 15970     08D8  0087               	movwf	7
 15971     08D9  0859               	movf	??i1_GenericQueue_Enqueue,w
 15972     08DA  0081               	movwf	1
 15973                           
 15974                           ;generic_queue.c: 23:         q->size++;
 15975     08DB  3001               	movlw	1
 15976     08DC  00D9               	movwf	??i1_GenericQueue_Enqueue
 15977     08DD  0855               	movf	i1GenericQueue_Enqueue@q,w
 15978     08DE  3E5E               	addlw	94
 15979     08DF  0086               	movwf	6
 15980     08E0  3000               	movlw	0
 15981     08E1  3D56               	addwfc	i1GenericQueue_Enqueue@q+1,w
 15982     08E2  0087               	movwf	7
 15983     08E3  0859               	movf	??i1_GenericQueue_Enqueue,w
 15984     08E4  0781               	addwf	1,f
 15985     08E5  0008               	return
 15986     08E6                     __end_ofi1_GenericQueue_Enqueue:
 15987                           
 15988                           	psect	text92
 15989     130E                     __ptext92:	
 15990 ;; *************** function i1_memcpy *****************
 15991 ;; Defined at:
 15992 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  d1              2    6[COMMON] PTR void 
 15995 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 15996 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 15997 ;;  s1              2    8[COMMON] PTR const void 
 15998 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2928(1), 
 15999 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16000 ;;  n               2   10[COMMON] unsigned int 
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 16003 ;;		 -> keyboardScanCode(3), keyboardScanCodeQueue(95), APP_KeyboardUpdateState@usbHidCode_2937(1), APP_KeyboardUpdateSt
      +ate@usbHidCode_2928(1), 
 16004 ;;		 -> keyboard(101), CtrlTrfData(8), RAM(4096), SetupPkt(8), 
 16005 ;;  d               2    0[BANK0 ] PTR unsigned char 
 16006 ;;		 -> keyboard$buffer(90), keyboardScanCodeQueue$buffer(90), keyboardScanCodeQueue(95), inputReport(8), 
 16007 ;;		 -> keyboard(101), main@scanCode(3), SetupPkt(8), 
 16008 ;;  tmp             1    4[BANK0 ] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;                  2    6[COMMON] PTR void 
 16011 ;; Registers used:
 16012 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16013 ;; Tracked objects:
 16014 ;;		On entry : 1F/0
 16015 ;;		On exit  : 1F/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16018 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Totals:         6       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;Total ram usage:       11 bytes
 16023 ;; Hardware stack levels used: 1
 16024 ;; This function calls:
 16025 ;;		Nothing
 16026 ;; This function is called by:
 16027 ;;		_USBCtrlEPService
 16028 ;;		i1_GenericQueue_Enqueue
 16029 ;; This function uses a non-reentrant model
 16030 ;;
 16031                           
 16032     130E                     i1_memcpy:	
 16033                           ;psect for function i1_memcpy
 16034                           
 16035                           
 16036                           ;incstack = 0
 16037                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 16038     130E  0879               	movf	i1memcpy@s1+1,w
 16039     130F  00D3               	movwf	i1memcpy@s+1
 16040     1310  0878               	movf	i1memcpy@s1,w
 16041     1311  00D2               	movwf	i1memcpy@s
 16042     1312  0877               	movf	i1memcpy@d1+1,w
 16043     1313  00D1               	movwf	i1memcpy@d+1
 16044     1314  0876               	movf	i1memcpy@d1,w
 16045     1315  00D0               	movwf	i1memcpy@d
 16046     1316                     i1l4370:
 16047     1316  3001               	movlw	1
 16048     1317  02FA               	subwf	i1memcpy@n,f
 16049     1318  3000               	movlw	0
 16050     1319  3BFB               	subwfb	i1memcpy@n+1,f
 16051     131A  0A7A               	incf	i1memcpy@n,w
 16052     131B  1903               	btfsc	3,2
 16053     131C  0A7B               	incf	i1memcpy@n+1,w
 16054     131D  1903               	btfsc	3,2
 16055     131E  0008               	return
 16056     131F  0852               	movf	i1memcpy@s,w
 16057     1320  0086               	movwf	6
 16058     1321  0853               	movf	i1memcpy@s+1,w
 16059     1322  0087               	movwf	7
 16060     1323  0801               	movf	1,w
 16061     1324  00D4               	movwf	i1memcpy@tmp
 16062     1325  3001               	movlw	1
 16063     1326  07D2               	addwf	i1memcpy@s,f
 16064     1327  3000               	movlw	0
 16065     1328  3DD3               	addwfc	i1memcpy@s+1,f
 16066     1329  0850               	movf	i1memcpy@d,w
 16067     132A  0086               	movwf	6
 16068     132B  0851               	movf	i1memcpy@d+1,w
 16069     132C  0087               	movwf	7
 16070     132D  0854               	movf	i1memcpy@tmp,w
 16071     132E  0081               	movwf	1
 16072     132F  3001               	movlw	1
 16073     1330  07D0               	addwf	i1memcpy@d,f
 16074     1331  3000               	movlw	0
 16075     1332  3DD1               	addwfc	i1memcpy@d+1,f
 16076     1333  2B16               	goto	i1l4370
 16077     1334                     __end_ofi1_memcpy:
 16078                           
 16079                           	psect	text93
 16080     1145                     __ptext93:	
 16081 ;; *************** function i1___wmul *****************
 16082 ;; Defined at:
 16083 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
 16084 ;; Parameters:    Size  Location     Type
 16085 ;;  multiplier      2    0[COMMON] unsigned int 
 16086 ;;  multiplicand    2    2[COMMON] unsigned int 
 16087 ;; Auto vars:     Size  Location     Type
 16088 ;;  product         2    4[COMMON] unsigned int 
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  2    0[COMMON] unsigned int 
 16091 ;; Registers used:
 16092 ;;		wreg, status,2, status,0
 16093 ;; Tracked objects:
 16094 ;;		On entry : 1F/0
 16095 ;;		On exit  : 1F/0
 16096 ;;		Unchanged: 1F/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16098 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;Total ram usage:        6 bytes
 16103 ;; Hardware stack levels used: 1
 16104 ;; This function calls:
 16105 ;;		Nothing
 16106 ;; This function is called by:
 16107 ;;		i1_GenericQueue_Enqueue
 16108 ;; This function uses a non-reentrant model
 16109 ;;
 16110                           
 16111     1145                     i1___wmul:	
 16112                           ;psect for function i1___wmul
 16113                           
 16114                           
 16115                           ;incstack = 0
 16116                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 16117     1145  01F4               	clrf	i1___wmul@product
 16118     1146  01F5               	clrf	i1___wmul@product+1
 16119     1147                     i1l4312:
 16120     1147  1C70               	btfss	i1___wmul@multiplier,0
 16121     1148  294D               	goto	i1l1280
 16122     1149  0872               	movf	i1___wmul@multiplicand,w
 16123     114A  07F4               	addwf	i1___wmul@product,f
 16124     114B  0873               	movf	i1___wmul@multiplicand+1,w
 16125     114C  3DF5               	addwfc	i1___wmul@product+1,f
 16126     114D                     i1l1280:
 16127     114D  3001               	movlw	1
 16128     114E                     u345_25:
 16129     114E  35F2               	lslf	i1___wmul@multiplicand,f
 16130     114F  0DF3               	rlf	i1___wmul@multiplicand+1,f
 16131     1150  0B89               	decfsz	9,f
 16132     1151  294E               	goto	u345_25
 16133     1152  3001               	movlw	1
 16134     1153                     u346_25:
 16135     1153  36F1               	lsrf	i1___wmul@multiplier+1,f
 16136     1154  0CF0               	rrf	i1___wmul@multiplier,f
 16137     1155  0B89               	decfsz	9,f
 16138     1156  2953               	goto	u346_25
 16139     1157  0870               	movf	i1___wmul@multiplier,w
 16140     1158  0471               	iorwf	i1___wmul@multiplier+1,w
 16141     1159  1D03               	btfss	3,2
 16142     115A  2947               	goto	i1l4312
 16143     115B  0875               	movf	i1___wmul@product+1,w
 16144     115C  00F1               	movwf	?i1___wmul+1
 16145     115D  0874               	movf	i1___wmul@product,w
 16146     115E  00F0               	movwf	?i1___wmul
 16147     115F  0008               	return
 16148     1160                     __end_ofi1___wmul:
 16149                           
 16150                           	psect	text94
 16151     14B1                     __ptext94:	
 16152 ;; *************** function i1___awmod *****************
 16153 ;; Defined at:
 16154 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;  divisor         2    0[COMMON] int 
 16157 ;;  dividend        2    2[COMMON] int 
 16158 ;; Auto vars:     Size  Location     Type
 16159 ;;  sign            1    6[COMMON] unsigned char 
 16160 ;;  counter         1    5[COMMON] unsigned char 
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  2    0[COMMON] int 
 16163 ;; Registers used:
 16164 ;;		wreg, status,2, status,0
 16165 ;; Tracked objects:
 16166 ;;		On entry : 1F/0
 16167 ;;		On exit  : 1F/0
 16168 ;;		Unchanged: 1F/0
 16169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16170 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16171 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16172 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16173 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16174 ;;Total ram usage:        7 bytes
 16175 ;; Hardware stack levels used: 1
 16176 ;; This function calls:
 16177 ;;		Nothing
 16178 ;; This function is called by:
 16179 ;;		i1_GenericQueue_Enqueue
 16180 ;; This function uses a non-reentrant model
 16181 ;;
 16182                           
 16183     14B1                     i1___awmod:	
 16184                           ;psect for function i1___awmod
 16185                           
 16186                           
 16187                           ;incstack = 0
 16188                           ; Regs used in i1___awmod: [wreg+status,2+status,0]
 16189     14B1  01F6               	clrf	i1___awmod@sign
 16190     14B2  1FF3               	btfss	i1___awmod@dividend+1,7
 16191     14B3  2CBB               	goto	i1l4332
 16192     14B4  09F2               	comf	i1___awmod@dividend,f
 16193     14B5  09F3               	comf	i1___awmod@dividend+1,f
 16194     14B6  0AF2               	incf	i1___awmod@dividend,f
 16195     14B7  1903               	skipnz
 16196     14B8  0AF3               	incf	i1___awmod@dividend+1,f
 16197     14B9  01F6               	clrf	i1___awmod@sign
 16198     14BA  0AF6               	incf	i1___awmod@sign,f
 16199     14BB                     i1l4332:
 16200     14BB  1FF1               	btfss	i1___awmod@divisor+1,7
 16201     14BC  2CC2               	goto	i1l4336
 16202     14BD  09F0               	comf	i1___awmod@divisor,f
 16203     14BE  09F1               	comf	i1___awmod@divisor+1,f
 16204     14BF  0AF0               	incf	i1___awmod@divisor,f
 16205     14C0  1903               	skipnz
 16206     14C1  0AF1               	incf	i1___awmod@divisor+1,f
 16207     14C2                     i1l4336:
 16208     14C2  0870               	movf	i1___awmod@divisor,w
 16209     14C3  0471               	iorwf	i1___awmod@divisor+1,w
 16210     14C4  1903               	btfsc	3,2
 16211     14C5  2CE9               	goto	i1l4354
 16212     14C6  01F5               	clrf	i1___awmod@counter
 16213     14C7  0AF5               	incf	i1___awmod@counter,f
 16214     14C8                     i1l4344:
 16215     14C8  1BF1               	btfsc	i1___awmod@divisor+1,7
 16216     14C9  2CD4               	goto	i1l4346
 16217     14CA  3001               	movlw	1
 16218     14CB                     u351_25:
 16219     14CB  35F0               	lslf	i1___awmod@divisor,f
 16220     14CC  0DF1               	rlf	i1___awmod@divisor+1,f
 16221     14CD  0B89               	decfsz	9,f
 16222     14CE  2CCB               	goto	u351_25
 16223     14CF  3001               	movlw	1
 16224     14D0  00F4               	movwf	??i1___awmod
 16225     14D1  0874               	movf	??i1___awmod,w
 16226     14D2  07F5               	addwf	i1___awmod@counter,f
 16227     14D3  2CC8               	goto	i1l4344
 16228     14D4                     i1l4346:
 16229     14D4  0871               	movf	i1___awmod@divisor+1,w
 16230     14D5  0273               	subwf	i1___awmod@dividend+1,w
 16231     14D6  1D03               	skipz
 16232     14D7  2CDA               	goto	u353_25
 16233     14D8  0870               	movf	i1___awmod@divisor,w
 16234     14D9  0272               	subwf	i1___awmod@dividend,w
 16235     14DA                     u353_25:
 16236     14DA  1C03               	skipc
 16237     14DB  2CE0               	goto	i1l4350
 16238     14DC  0870               	movf	i1___awmod@divisor,w
 16239     14DD  02F2               	subwf	i1___awmod@dividend,f
 16240     14DE  0871               	movf	i1___awmod@divisor+1,w
 16241     14DF  3BF3               	subwfb	i1___awmod@dividend+1,f
 16242     14E0                     i1l4350:
 16243     14E0  3001               	movlw	1
 16244     14E1                     u354_25:
 16245     14E1  36F1               	lsrf	i1___awmod@divisor+1,f
 16246     14E2  0CF0               	rrf	i1___awmod@divisor,f
 16247     14E3  0B89               	decfsz	9,f
 16248     14E4  2CE1               	goto	u354_25
 16249     14E5  3001               	movlw	1
 16250     14E6  02F5               	subwf	i1___awmod@counter,f
 16251     14E7  1D03               	btfss	3,2
 16252     14E8  2CD4               	goto	i1l4346
 16253     14E9                     i1l4354:
 16254     14E9  0876               	movf	i1___awmod@sign,w
 16255     14EA  1903               	btfsc	3,2
 16256     14EB  2CF1               	goto	i1l4358
 16257     14EC  09F2               	comf	i1___awmod@dividend,f
 16258     14ED  09F3               	comf	i1___awmod@dividend+1,f
 16259     14EE  0AF2               	incf	i1___awmod@dividend,f
 16260     14EF  1903               	skipnz
 16261     14F0  0AF3               	incf	i1___awmod@dividend+1,f
 16262     14F1                     i1l4358:
 16263     14F1  0873               	movf	i1___awmod@dividend+1,w
 16264     14F2  00F1               	movwf	?i1___awmod+1
 16265     14F3  0872               	movf	i1___awmod@dividend,w
 16266     14F4  00F0               	movwf	?i1___awmod
 16267     14F5  0008               	return
 16268     14F6                     __end_ofi1___awmod:
 16269                           
 16270                           	psect	text95
 16271     1FEC                     __ptext95:	
 16272 ;; *************** function i1_GenericQueue_IsFull *****************
 16273 ;; Defined at:
 16274 ;;		line 15 in file "generic_queue.c"
 16275 ;; Parameters:    Size  Location     Type
 16276 ;;  q               2    0[COMMON] PTR struct .
 16277 ;;		 -> keyboardScanCodeQueue(95), keyboard(101), 
 16278 ;; Auto vars:     Size  Location     Type
 16279 ;;		None
 16280 ;; Return value:  Size  Location     Type
 16281 ;;                  2    0[COMMON] int 
 16282 ;; Registers used:
 16283 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16284 ;; Tracked objects:
 16285 ;;		On entry : 1F/0
 16286 ;;		On exit  : 1F/0
 16287 ;;		Unchanged: 1F/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        4 bytes
 16294 ;; Hardware stack levels used: 1
 16295 ;; This function calls:
 16296 ;;		Nothing
 16297 ;; This function is called by:
 16298 ;;		i1_GenericQueue_Enqueue
 16299 ;; This function uses a non-reentrant model
 16300 ;;
 16301                           
 16302     1FEC                     i1_GenericQueue_IsFull:	
 16303                           ;psect for function i1_GenericQueue_IsFull
 16304                           
 16305                           
 16306                           ;generic_queue.c: 16:     return (q->size == 15);
 16307                           
 16308                           ;incstack = 0
 16309                           ; Regs used in i1_GenericQueue_IsFull: [wreg+fsr1l+fsr1h+status,2+status,0]
 16310     1FEC  0870               	movf	i1GenericQueue_IsFull@q,w
 16311     1FED  3E5E               	addlw	94
 16312     1FEE  0086               	movwf	6
 16313     1FEF  3000               	movlw	0
 16314     1FF0  3D71               	addwfc	i1GenericQueue_IsFull@q+1,w
 16315     1FF1  0087               	movwf	7
 16316     1FF2  300F               	movlw	15
 16317     1FF3  0601               	xorwf	1,w
 16318     1FF4  1D03               	btfss	3,2
 16319     1FF5  2FF8               	goto	u342_20
 16320     1FF6  3001               	movlw	1
 16321     1FF7  2FF9               	goto	u343_20
 16322     1FF8                     u342_20:
 16323     1FF8  3000               	movlw	0
 16324     1FF9                     u343_20:
 16325     1FF9  00F2               	movwf	??i1_GenericQueue_IsFull
 16326     1FFA  01F3               	clrf	??i1_GenericQueue_IsFull+1
 16327     1FFB  0872               	movf	??i1_GenericQueue_IsFull,w
 16328     1FFC  00F0               	movwf	?i1_GenericQueue_IsFull
 16329     1FFD  0873               	movf	??i1_GenericQueue_IsFull+1,w
 16330     1FFE  00F1               	movwf	?i1_GenericQueue_IsFull+1
 16331     1FFF  0008               	return
 16332     2000                     __end_ofi1_GenericQueue_IsFull:
 16333                           
 16334                           	psect	text96
 16335     1F09                     __ptext96:	
 16336 ;; *************** function _SysTime_GetCurrentTimeMs *****************
 16337 ;; Defined at:
 16338 ;;		line 19 in file "systime.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;		None
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;		None
 16343 ;; Return value:  Size  Location     Type
 16344 ;;                  4    0[COMMON] unsigned long 
 16345 ;; Registers used:
 16346 ;;		wreg
 16347 ;; Tracked objects:
 16348 ;;		On entry : 1F/2
 16349 ;;		On exit  : 1F/2
 16350 ;;		Unchanged: 0/0
 16351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16352 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16356 ;;Total ram usage:        4 bytes
 16357 ;; Hardware stack levels used: 1
 16358 ;; This function calls:
 16359 ;;		Nothing
 16360 ;; This function is called by:
 16361 ;;		_PS2Keyboard_DataInterrupt
 16362 ;;		_PS2Keyboard_ClockInterrupt
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366     1F09                     _SysTime_GetCurrentTimeMs:	
 16367                           ;psect for function _SysTime_GetCurrentTimeMs
 16368                           
 16369                           
 16370                           ;systime.c: 21:     return timeMs;
 16371                           
 16372                           ;incstack = 0
 16373                           ; Regs used in _SysTime_GetCurrentTimeMs: [wreg]
 16374     1F09  082B               	movf	(_timeMs+3)^(0+256),w
 16375     1F0A  00F3               	movwf	?_SysTime_GetCurrentTimeMs+3
 16376     1F0B  082A               	movf	(_timeMs+2)^(0+256),w
 16377     1F0C  00F2               	movwf	?_SysTime_GetCurrentTimeMs+2
 16378     1F0D  0829               	movf	(_timeMs+1)^(0+256),w
 16379     1F0E  00F1               	movwf	?_SysTime_GetCurrentTimeMs+1
 16380     1F0F  0828               	movf	_timeMs^(0+256),w
 16381     1F10  00F0               	movwf	?_SysTime_GetCurrentTimeMs
 16382     1F11  0008               	return
 16383     1F12                     __end_of_SysTime_GetCurrentTimeMs:
 16384                           
 16385                           	psect	text97
 16386     1206                     __ptext97:	
 16387 ;; *************** function _EUSART_Transmit_ISR *****************
 16388 ;; Defined at:
 16389 ;;		line 197 in file "mcc_generated_files/eusart.c"
 16390 ;; Parameters:    Size  Location     Type
 16391 ;;		None
 16392 ;; Auto vars:     Size  Location     Type
 16393 ;;		None
 16394 ;; Return value:  Size  Location     Type
 16395 ;;                  1    wreg      void 
 16396 ;; Registers used:
 16397 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16398 ;; Tracked objects:
 16399 ;;		On entry : 1F/2
 16400 ;;		On exit  : 1F/1
 16401 ;;		Unchanged: 0/0
 16402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;Total ram usage:        1 bytes
 16408 ;; Hardware stack levels used: 1
 16409 ;; This function calls:
 16410 ;;		Nothing
 16411 ;; This function is called by:
 16412 ;;		_EUSART_Initialize
 16413 ;;		_INTERRUPT_InterruptManager
 16414 ;; This function uses a non-reentrant model
 16415 ;;
 16416                           
 16417     1206                     _EUSART_Transmit_ISR:	
 16418                           ;psect for function _EUSART_Transmit_ISR
 16419                           
 16420                           
 16421                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16422                           
 16423                           ;incstack = 0
 16424                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16425     1206  3008               	movlw	8
 16426     1207  0021               	movlb	1	; select bank1
 16427     1208  026F               	subwf	_eusartTxBufferRemaining^(0+128),w
 16428     1209  1803               	skipnc
 16429     120A  2A23               	goto	i1l305
 16430                           
 16431                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
 16432     120B  0022               	movlb	2	; select bank2
 16433     120C  0863               	movf	_eusartTxTail^(0+256),w
 16434     120D  3EB8               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16435     120E  0086               	movwf	6
 16436     120F  3001               	movlw	1	; select bank3/4
 16437     1210  0087               	movwf	7
 16438     1211  0801               	movf	1,w
 16439     1212  0023               	movlb	3	; select bank3
 16440     1213  009A               	movwf	26	;volatile
 16441     1214  3001               	movlw	1
 16442     1215  00F0               	movwf	??_EUSART_Transmit_ISR
 16443     1216  0870               	movf	??_EUSART_Transmit_ISR,w
 16444     1217  0022               	movlb	2	; select bank2
 16445     1218  07E3               	addwf	_eusartTxTail^(0+256),f	;volatile
 16446                           
 16447                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16448     1219  3008               	movlw	8
 16449     121A  0263               	subwf	_eusartTxTail^(0+256),w
 16450     121B  1803               	btfsc	3,0
 16451                           
 16452                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
 16453     121C  01E3               	clrf	_eusartTxTail^(0+256)	;volatile
 16454                           
 16455                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
 16456     121D  3001               	movlw	1
 16457     121E  00F0               	movwf	??_EUSART_Transmit_ISR
 16458     121F  0870               	movf	??_EUSART_Transmit_ISR,w
 16459     1220  0021               	movlb	1	; select bank1
 16460     1221  07EF               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16461                           
 16462                           ;mcc_generated_files/eusart.c: 209:     }
 16463     1222  0008               	return
 16464     1223                     i1l305:	
 16465                           ;mcc_generated_files/eusart.c: 210:     else
 16466                           
 16467                           
 16468                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
 16469     1223  1211               	bcf	17,4	;volatile
 16470     1224  0008               	return
 16471     1225                     __end_of_EUSART_Transmit_ISR:
 16472                           
 16473                           	psect	text98
 16474     13C1                     __ptext98:	
 16475 ;; *************** function _EUSART_Receive_ISR *****************
 16476 ;; Defined at:
 16477 ;;		line 216 in file "mcc_generated_files/eusart.c"
 16478 ;; Parameters:    Size  Location     Type
 16479 ;;		None
 16480 ;; Auto vars:     Size  Location     Type
 16481 ;;		None
 16482 ;; Return value:  Size  Location     Type
 16483 ;;                  1    wreg      void 
 16484 ;; Registers used:
 16485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16486 ;; Tracked objects:
 16487 ;;		On entry : 1F/2
 16488 ;;		On exit  : 0/0
 16489 ;;		Unchanged: 0/0
 16490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;Total ram usage:        0 bytes
 16496 ;; Hardware stack levels used: 1
 16497 ;; Hardware stack levels required when called: 2
 16498 ;; This function calls:
 16499 ;;		NULL
 16500 ;;		_EUSART_DefaultErrorHandler
 16501 ;;		_EUSART_DefaultFramingErrorHandler
 16502 ;;		_EUSART_DefaultOverrunErrorHandler
 16503 ;;		_EUSART_RxDataHandler
 16504 ;; This function is called by:
 16505 ;;		_EUSART_Initialize
 16506 ;;		_INTERRUPT_InterruptManager
 16507 ;; This function uses a non-reentrant model
 16508 ;;
 16509                           
 16510     13C1                     _EUSART_Receive_ISR:	
 16511                           ;psect for function _EUSART_Receive_ISR
 16512                           
 16513                           
 16514                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16515                           
 16516                           ;incstack = 0
 16517                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16518     13C1  0021               	movlb	1	; select bank1
 16519     13C2  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16520     13C3  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16521     13C4  0086               	movwf	6
 16522     13C5  3001               	movlw	1	; select bank3/4
 16523     13C6  0087               	movwf	7
 16524     13C7  0181               	clrf	1
 16525                           
 16526                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
 16527     13C8  0023               	movlb	3	; select bank3
 16528     13C9  1D1D               	btfss	29,2	;volatile
 16529     13CA  2BD8               	goto	i1l5588
 16530                           
 16531                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16532     13CB  0021               	movlb	1	; select bank1
 16533     13CC  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16534     13CD  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16535     13CE  0086               	movwf	6
 16536     13CF  3001               	movlw	1	; select bank3/4
 16537     13D0  0087               	movwf	7
 16538     13D1  1481               	bsf	1,1
 16539                           
 16540                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
 16541     13D2  0022               	movlb	2	; select bank2
 16542     13D3  0843               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16543     13D4  008A               	movwf	10
 16544     13D5  0842               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16545     13D6  000A               	callw
 16546     13D7  3193               	pagesel	$
 16547     13D8                     i1l5588:
 16548                           
 16549                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
 16550     13D8  0023               	movlb	3	; select bank3
 16551     13D9  1C9D               	btfss	29,1	;volatile
 16552     13DA  2BE8               	goto	i1l5594
 16553                           
 16554                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16555     13DB  0021               	movlb	1	; select bank1
 16556     13DC  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16557     13DD  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16558     13DE  0086               	movwf	6
 16559     13DF  3001               	movlw	1	; select bank3/4
 16560     13E0  0087               	movwf	7
 16561     13E1  1501               	bsf	1,2
 16562                           
 16563                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
 16564     13E2  0022               	movlb	2	; select bank2
 16565     13E3  0841               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16566     13E4  008A               	movwf	10
 16567     13E5  0840               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16568     13E6  000A               	callw
 16569     13E7  3193               	pagesel	$
 16570     13E8                     i1l5594:
 16571                           
 16572                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16573     13E8  0021               	movlb	1	; select bank1
 16574     13E9  086E               	movf	_eusartRxHead^(0+128),w	;volatile
 16575     13EA  3EA8               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16576     13EB  0086               	movwf	6
 16577     13EC  3001               	movlw	1	; select bank3/4
 16578     13ED  0087               	movwf	7
 16579     13EE  0801               	movf	1,w
 16580     13EF  1903               	btfsc	3,2
 16581     13F0  2BF8               	goto	i1l5598
 16582                           
 16583                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
 16584     13F1  0022               	movlb	2	; select bank2
 16585     13F2  083F               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16586     13F3  008A               	movwf	10
 16587     13F4  083E               	movf	_EUSART_ErrorHandler^(0+256),w
 16588     13F5  000A               	callw
 16589     13F6  3193               	pagesel	$
 16590                           
 16591                           ;mcc_generated_files/eusart.c: 233:     } else {
 16592     13F7  0008               	return
 16593     13F8                     i1l5598:
 16594                           
 16595                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
 16596     13F8  3190  20E2         	fcall	_EUSART_RxDataHandler
 16597     13FA  0008               	return
 16598     13FB                     __end_of_EUSART_Receive_ISR:
 16599                           
 16600                           	psect	text99
 16601     1EB1                     __ptext99:	
 16602 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16603 ;; Defined at:
 16604 ;;		line 252 in file "mcc_generated_files/eusart.c"
 16605 ;; Parameters:    Size  Location     Type
 16606 ;;		None
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;		None
 16609 ;; Return value:  Size  Location     Type
 16610 ;;                  1    wreg      void 
 16611 ;; Registers used:
 16612 ;;		None
 16613 ;; Tracked objects:
 16614 ;;		On entry : 1F/2
 16615 ;;		On exit  : 1F/3
 16616 ;;		Unchanged: 0/0
 16617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;Total ram usage:        0 bytes
 16623 ;; Hardware stack levels used: 1
 16624 ;; This function calls:
 16625 ;;		Nothing
 16626 ;; This function is called by:
 16627 ;;		_EUSART_Initialize
 16628 ;;		_EUSART_Receive_ISR
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632     1EB1                     _EUSART_DefaultOverrunErrorHandler:	
 16633                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16634                           
 16635                           
 16636                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
 16637                           
 16638                           ;incstack = 0
 16639                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16640     1EB1  0023               	movlb	3	; select bank3
 16641     1EB2  121D               	bcf	29,4	;volatile
 16642                           
 16643                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
 16644     1EB3  161D               	bsf	29,4	;volatile
 16645     1EB4  0008               	return
 16646     1EB5                     __end_of_EUSART_DefaultOverrunErrorHandler:
 16647                           
 16648                           	psect	text100
 16649     1EA4                     __ptext100:	
 16650 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16651 ;; Defined at:
 16652 ;;		line 250 in file "mcc_generated_files/eusart.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;		None
 16655 ;; Auto vars:     Size  Location     Type
 16656 ;;		None
 16657 ;; Return value:  Size  Location     Type
 16658 ;;                  1    wreg      void 
 16659 ;; Registers used:
 16660 ;;		None
 16661 ;; Tracked objects:
 16662 ;;		On entry : 1F/2
 16663 ;;		On exit  : 1F/2
 16664 ;;		Unchanged: 1F/0
 16665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;Total ram usage:        0 bytes
 16671 ;; Hardware stack levels used: 1
 16672 ;; This function calls:
 16673 ;;		Nothing
 16674 ;; This function is called by:
 16675 ;;		_EUSART_Initialize
 16676 ;;		_EUSART_Receive_ISR
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680     1EA4                     _EUSART_DefaultFramingErrorHandler:	
 16681                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16682                           
 16683                           
 16684                           ;incstack = 0
 16685                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16686     1EA4  0008               	return
 16687     1EA5                     __end_of_EUSART_DefaultFramingErrorHandler:
 16688                           
 16689                           	psect	text101
 16690     1EA5                     __ptext101:	
 16691 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16692 ;; Defined at:
 16693 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16694 ;; Parameters:    Size  Location     Type
 16695 ;;		None
 16696 ;; Auto vars:     Size  Location     Type
 16697 ;;		None
 16698 ;; Return value:  Size  Location     Type
 16699 ;;                  1    wreg      void 
 16700 ;; Registers used:
 16701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16702 ;; Tracked objects:
 16703 ;;		On entry : 1F/2
 16704 ;;		On exit  : 1F/2
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;Total ram usage:        0 bytes
 16712 ;; Hardware stack levels used: 1
 16713 ;; Hardware stack levels required when called: 1
 16714 ;; This function calls:
 16715 ;;		_EUSART_RxDataHandler
 16716 ;; This function is called by:
 16717 ;;		_EUSART_Initialize
 16718 ;;		_EUSART_Receive_ISR
 16719 ;; This function uses a non-reentrant model
 16720 ;;
 16721                           
 16722     1EA5                     _EUSART_DefaultErrorHandler:	
 16723                           ;psect for function _EUSART_DefaultErrorHandler
 16724                           
 16725                           
 16726                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
 16727                           
 16728                           ;incstack = 0
 16729                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16730     1EA5  3190  20E2         	fcall	_EUSART_RxDataHandler
 16731     1EA7  0008               	return
 16732     1EA8                     __end_of_EUSART_DefaultErrorHandler:
 16733                           
 16734                           	psect	text102
 16735     10E2                     __ptext102:	
 16736 ;; *************** function _EUSART_RxDataHandler *****************
 16737 ;; Defined at:
 16738 ;;		line 240 in file "mcc_generated_files/eusart.c"
 16739 ;; Parameters:    Size  Location     Type
 16740 ;;		None
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;		None
 16743 ;; Return value:  Size  Location     Type
 16744 ;;                  1    wreg      void 
 16745 ;; Registers used:
 16746 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16747 ;; Tracked objects:
 16748 ;;		On entry : 1C/1
 16749 ;;		On exit  : 1F/2
 16750 ;;		Unchanged: 0/0
 16751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;Total ram usage:        1 bytes
 16757 ;; Hardware stack levels used: 1
 16758 ;; This function calls:
 16759 ;;		Nothing
 16760 ;; This function is called by:
 16761 ;;		_EUSART_Receive_ISR
 16762 ;;		_EUSART_DefaultErrorHandler
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766     10E2                     _EUSART_RxDataHandler:	
 16767                           ;psect for function _EUSART_RxDataHandler
 16768                           
 16769                           
 16770                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
 16771                           
 16772                           ;incstack = 0
 16773                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16774     10E2  0021               	movlb	1	; select bank1
 16775     10E3  086E               	movf	_eusartRxHead^(0+128),w
 16776     10E4  3EB0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16777     10E5  0086               	movwf	6
 16778     10E6  3001               	movlw	1	; select bank3/4
 16779     10E7  0087               	movwf	7
 16780     10E8  0023               	movlb	3	; select bank3
 16781     10E9  0819               	movf	25,w	;volatile
 16782     10EA  0081               	movwf	1
 16783     10EB  3001               	movlw	1
 16784     10EC  00F0               	movwf	??_EUSART_RxDataHandler
 16785     10ED  0870               	movf	??_EUSART_RxDataHandler,w
 16786     10EE  0021               	movlb	1	; select bank1
 16787     10EF  07EE               	addwf	_eusartRxHead^(0+128),f	;volatile
 16788                           
 16789                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16790     10F0  3008               	movlw	8
 16791     10F1  026E               	subwf	_eusartRxHead^(0+128),w
 16792     10F2  1803               	btfsc	3,0
 16793                           
 16794                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
 16795     10F3  01EE               	clrf	_eusartRxHead^(0+128)	;volatile
 16796                           
 16797                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
 16798     10F4  3001               	movlw	1
 16799     10F5  00F0               	movwf	??_EUSART_RxDataHandler
 16800     10F6  0870               	movf	??_EUSART_RxDataHandler,w
 16801     10F7  0022               	movlb	2	; select bank2
 16802     10F8  07E1               	addwf	_eusartRxCount^(0+256),f	;volatile
 16803     10F9  0008               	return
 16804     10FA                     __end_of_EUSART_RxDataHandler:
 16805     007E                     btemp	set	126	;btemp
 16806     007E                     int$flags	set	126
 16807     007E                     wtemp0	set	126
 16808     232C                     
 16809                           	psect	config
 16810                           
 16811                           ;Config register CONFIG1 @ 0x8007
 16812                           ;	Oscillator Selection Bits
 16813                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
 16814                           ;	Watchdog Timer Enable
 16815                           ;	WDTE = OFF, WDT disabled
 16816                           ;	Power-up Timer Enable
 16817                           ;	PWRTE = OFF, PWRT disabled
 16818                           ;	MCLR Pin Function Select
 16819                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 16820                           ;	Flash Program Memory Code Protection
 16821                           ;	CP = OFF, Program memory code protection is disabled
 16822                           ;	Brown-out Reset Enable
 16823                           ;	BOREN = ON, Brown-out Reset enabled
 16824                           ;	Clock Out Enable
 16825                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 16826                           ;	Internal/External Switchover Mode
 16827                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 16828                           ;	Fail-Safe Clock Monitor Enable
 16829                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 16830     8007                     	org	32775
 16831     8007  3FE4               	dw	16356
 16832                           
 16833                           ;Config register CONFIG2 @ 0x8008
 16834                           ;	Flash Memory Self-Write Protection
 16835                           ;	WRT = OFF, Write protection off
 16836                           ;	CPU System Clock Selection Bit
 16837                           ;	CPUDIV = NOCLKDIV, NO CPU system divide
 16838                           ;	USB Low Speed Clock Selection bit
 16839                           ;	USBLSCLK = 48MHz, System clock expects 48 MHz, FS/LS USB CLKENs divide-by is set to 8.
 16840                           ;	PLL Multiplier Selection Bit
 16841                           ;	PLLMULT = 3x, 3x Output Frequency Selected
 16842                           ;	PLL Enable Bit
 16843                           ;	PLLEN = ENABLED, 3x or 4x PLL Enabled
 16844                           ;	Stack Overflow/Underflow Reset Enable
 16845                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 16846                           ;	Brown-out Reset Voltage Selection
 16847                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 16848                           ;	Low-Power Brown Out Reset
 16849                           ;	LPBOR = OFF, Low-Power BOR is disabled
 16850                           ;	Low-Voltage Programming Enable
 16851                           ;	LVP = ON, Low-voltage programming enabled
 16852     8008                     	org	32776
 16853     8008  3FCF               	dw	16335

Data Sizes:
    Strings     0
    Constant    601
    Data        6
    BSS         135
    Persistent  36
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            32     17      32
    BANK1            72     64      72
    BANK2            79      0      77
    BANK3            80      0      45
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           12      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    APP_KeyboardTasks@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    APP_KeyboardUpdateState@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), NULL(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), NULL(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), NULL(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), NULL(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), NULL(), 

    GenericQueue_Contains@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    GenericQueue_Contains@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_CopyToArray@array	PTR void  size(1) Largest target is 8
		 -> inputReport(BANK1[8]), 

    GenericQueue_CopyToArray@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    GenericQueue_Dequeue@item	PTR void  size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    GenericQueue_Dequeue@q	PTR struct . size(2) Largest target is 95
		 -> keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Enqueue@item	PTR const void  size(2) Largest target is 3
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), keyboardScanCode(BANK2[3]), 

    GenericQueue_Enqueue@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Init@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsEmpty@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_IsFull@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboardScanCodeQueue(BIGRAM[95]), 

    GenericQueue_Remove@item	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), 

    GenericQueue_Remove@q	PTR struct . size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), 

    inPipes$pSrc$bRam	PTR unsigned char  size(2) Largest target is 0

    inPipes$pSrc$bRom	PTR const unsigned char  size(2) Largest target is 0

    inPipes$pSrc$wRam	PTR unsigned short  size(2) Largest target is 0

    inPipes$pSrc$wRom	PTR const unsigned short  size(2) Largest target is 0

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), NULL(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), PS2Keyboard_ClockInterrupt(), 

    IOCAF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), NULL(), 

    IOCAF5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF5_DefaultInterruptHandler(), PS2Keyboard_DataInterrupt(), 

    keyboard$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    keyboard$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    Log_Message@buf	PTR const unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    Log_UtilityConvertByteToHex@buf	PTR unsigned char  size(1) Largest target is 6
		 -> main@scanCodeStr(BANK1[6]), 

    main@hndlScanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    memcmp@l	PTR const unsigned char  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@r	PTR const unsigned char  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    memcmp@vl	PTR const void  size(2) Largest target is 101
		 -> keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), 

    memcmp@vr	PTR const void  size(1) Largest target is 1
		 -> APP_KeyboardUpdateState@usbHidCode(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2929(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@d1	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 101
		 -> APP_KeyboardUpdateState@usbHidCode_2928(BANK1[1]), APP_KeyboardUpdateState@usbHidCode_2937(BANK1[1]), CtrlTrfData(BANK0[8]), keyboard(BIGRAM[101]), 
		 -> keyboard$buffer(BIGRAM[90]), keyboardScanCode(BANK2[3]), keyboardScanCodeQueue(BIGRAM[95]), keyboardScanCodeQueue$buffer(BIGRAM[90]), 
		 -> SetupPkt(BANK0[8]), 

    memset@dest	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    outPipes$pDst$bRam	PTR unsigned char  size(2) Largest target is 0

    outPipes$pDst$wRam	PTR unsigned short  size(2) Largest target is 0

    outPipes$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    pBDTEntryEP0OutCurrent	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), NULL(NULL[0]), 

    pBDTEntryEP0OutNext	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryIn	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pBDTEntryOut	PTR volatile struct __BDT[2] size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    pDst	PTR volatile unsigned char  size(1) Largest target is 8
		 -> CtrlTrfData(BANK0[8]), NULL(NULL[0]), 

    PS2Keyboard_GetScanCode@scanCode	PTR struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), 

    PS2USB_ScanCodeToUSBHID@scanCode	PTR const struct PS2ScanCode size(1) Largest target is 3
		 -> main@scanCode(BANK1[3]), NULL(NULL[0]), 

    S2684$lastINTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S2684$lastOUTTransmission	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    S781$bRam	PTR unsigned char  size(2) Largest target is 0

    S781$bRom	PTR const unsigned char  size(2) Largest target is 0

    S781$wRam	PTR unsigned short  size(2) Largest target is 0

    S781$wRom	PTR const unsigned short  size(2) Largest target is 0

    S805$bRam	PTR unsigned char  size(2) Largest target is 0

    S805$wRam	PTR unsigned short  size(2) Largest target is 0

    S815$pFunc	PTR FTN()void  size(2) Largest target is 1
		 -> USBHIDCBSetReportComplete(), 

    sp__memcpy	PTR void  size(2) Largest target is 101
		 -> inputReport(BANK1[8]), keyboard(BIGRAM[101]), keyboard$buffer(BIGRAM[90]), keyboardScanCodeQueue(BIGRAM[95]), 
		 -> keyboardScanCodeQueue$buffer(BIGRAM[90]), main@scanCode(BANK1[3]), SetupPkt(BANK0[8]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> BDT(BANK0[32]), inputReport(BANK1[8]), USBAlternateInterface(BANK0[1]), 

    sp__USBTransferOnePacket	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), NULL(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> SysTimeInterrupt(), TMR2_DefaultInterruptHandler(), 

    USB_CD_Ptr	const PTR const unsigned char [1] size(2) Largest target is 41
		 -> configDescriptor1(CODE[41]), 

    USB_SD_Ptr	const PTR const unsigned char [3] size(2) Largest target is 52
		 -> sd000(CODE[4]), sd001(CODE[52]), sd002(CODE[28]), 

    USBConfigureEndpoint@handle	PTR volatile struct __BDT size(1) Largest target is 32
		 -> BDT(BANK0[32]), 

    USBDeviceInit@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBEnableEndpoint@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdFeatureReqHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdFeatureReqHandler@pUEP	PTR unsigned char  size(2) Largest target is 1
		 -> UEP0(SFR29[1]), 

    USBStdGetStatusHandler@p	PTR struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USBStdSetCfgHandler@p	PTR unsigned char  size(2) Largest target is 1
		 -> UEP1(SFR29[1]), 

    USBTransferOnePacket@data	PTR unsigned char  size(2) Largest target is 8
		 -> inputReport(BANK1[8]), outputReport(BANK2[1]), 

    USBTransferOnePacket@handle	PTR volatile struct __BDT size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), NULL(NULL[0]), 

    USER_USB_CALLBACK_EVENT_HANDLER@pdata	PTR void  size(2) Largest target is 4096
		 -> BDT(BANK0[32]), RAM(DATA[4096]), USBActiveConfiguration(BANK0[1]), USTATcopy(BANK0[1]), 
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _USBDeviceTasks->_USBSuspend
    _USBDeviceTasks->_USBWakeFromSuspend
    _USBCtrlEPService->_USBCtrlTrfOutHandler
    _USBCtrlEPServiceComplete->_USBCtrlEPAllowDataStage
    _USBCtrlEPAllowDataStage->_USBCtrlTrfTxService
    _USBCheckStdRequest->_USBStdSetCfgHandler
    _USBCheckHIDRequest->_USBHIDCBSetIdleRateHandler
    _APP_KeyboardInit->_USBEnableEndpoint
    _USBEnableEndpoint->_USBConfigureEndpoint
    _USBCtrlTrfOutHandler->_USBCtrlTrfRxService
    _USBCtrlTrfRxService->_USBCtrlEPAllowStatusStage
    _USBCtrlTrfInHandler->_USBCtrlTrfTxService
    i1_APP_KeyboardProcessOutputReport->i1_PS2Keyboard_SendCommand
    _PS2Keyboard_DataInterrupt->_SysTime_GetCurrentTimeMs
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    i1_GenericQueue_Enqueue->i1_memcpy
    i1_memcpy->i1___wmul
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_USBDeviceTasks
    _USBDeviceTasks->_USBCtrlEPService
    _USBWakeFromSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBSuspend->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBCtrlEPService->_USBCtrlTrfSetupHandler
    _USBCheckStdRequest->_USBStdFeatureReqHandler
    _USBStdSetCfgHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _USBStdFeatureReqHandler->_USER_USB_CALLBACK_EVENT_HANDLER
    _IOCAF4_ISR->_PS2Keyboard_ClockInterrupt
    _PS2Keyboard_ClockInterrupt->i1_GenericQueue_Enqueue
    i1_GenericQueue_Enqueue->i1_memcpy

Critical Paths under _main in BANK1

    _main->_APP_KeyboardTasks
    _SysTime_Init->_TMR2_SetInterruptHandler
    _SYSTEM_Initialize->_USBDeviceInit
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCAF5_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _PS2Keyboard_Init->_GenericQueue_Init
    _PS2Keyboard_GetScanCode->_GenericQueue_Dequeue
    _GenericQueue_Dequeue->_memcpy
    _Log_UtilityConvertByteToHex->___bmul
    _Log_Message->_EUSART_Write
    _APP_KeyboardTasks->_APP_KeyboardUpdateState
    _GenericQueue_CopyToArray->_memcpy
    _APP_KeyboardUpdateState->_GenericQueue_Remove
    _GenericQueue_Remove->_memcpy
    _GenericQueue_Enqueue->_memcpy
    _memcpy->___wmul
    _GenericQueue_Contains->_memcmp
    _memcmp->___wmul
    ___wmul->___awmod
    _APP_KeyboardProcessOutputReport->_PS2Keyboard_SendCommand

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                16    16      0   50053
                                             48 BANK1     16    16      0
                  _APP_KeyboardTasks
                        _Log_Message
        _Log_UtilityConvertByteToHex
            _PS2Keyboard_GetScanCode
                   _PS2Keyboard_Init
                  _SYSTEM_Initialize
                       _SysTime_Init
 ---------------------------------------------------------------------------------
 (1) _SysTime_Init                                         0     0      0     200
           _TMR2_SetInterruptHandler
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1427
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                    _USBDeviceAttach
                      _USBDeviceInit
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceInit                                        8     8      0     272
                                              0 BANK1      8     8      0
 ---------------------------------------------------------------------------------
 (2) _USBDeviceAttach                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0     200
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR2_SetInterruptHandler                             2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     400
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     555
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     111
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_Init                                     0     0      0     814
                  _GenericQueue_Init
         _IOCAF4_SetInterruptHandler
         _IOCAF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF5_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     200
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Init                                    4     0      4     414
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (1) _PS2Keyboard_GetScanCode                              2     2      0    8747
                                             31 BANK1      2     2      0
               _GenericQueue_Dequeue
               _GenericQueue_IsEmpty
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_Dequeue                                 7     4      3    8286
                                             24 BANK1      7     4      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _Log_UtilityConvertByteToHex                          6     4      2     689
                                              4 BANK1      6     4      2
                             ___bmul
                            _hex2str
 ---------------------------------------------------------------------------------
 (2) _hex2str                                              1     1      0      88
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Log_Message                                          4     3      1     259
                                              2 BANK1      4     3      1
                       _EUSART_Write
                 _EUSART_is_tx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART_is_tx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     2      0      44
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APP_KeyboardTasks                                    7     7      0   37370
                                             41 BANK1      7     7      0
    _APP_KeyboardProcessOutputReport
            _APP_KeyboardUpdateState
           _GenericQueue_CopyToArray
               _USBTransferOnePacket
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                               7     3      4     634
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _USBTransferOnePacket                                11     7      4    1099
                                              0 BANK1     11     7      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_CopyToArray                             9     6      3    8201
                                             24 BANK1      9     6      3
                            ___awmod
                             ___bmul
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     245
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardUpdateState                              8     8      0   27075
                                             33 BANK1      8     8      0
              _GenericQueue_Contains
               _GenericQueue_Enqueue
                _GenericQueue_Remove
         _PS2Keyboard_GetLastCommand
            _PS2Keyboard_SendCommand
            _PS2USB_ScanCodeToUSBHID
 ---------------------------------------------------------------------------------
 (3) _PS2USB_ScanCodeToUSBHID                              1     1      0     210
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_GetLastCommand                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Remove                                  9     6      3    9513
                                             24 BANK1      9     6      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Enqueue                                 7     3      4    8476
                                             24 BANK1      7     3      4
                _GenericQueue_IsFull
                            ___awmod
                             ___wmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              11     5      6    1400
                                             13 BANK1     11     5      6
                            ___awmod (ARG)
                             ___bmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _GenericQueue_IsFull                                  4     2      2     111
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (3) _GenericQueue_Contains                                8     5      3    7803
                                             22 BANK1      8     5      3
               _GenericQueue_IsEmpty
                            ___awmod
                             ___wmul
                             _memcmp
 ---------------------------------------------------------------------------------
 (4) _memcmp                                               9     4      5     715
                                             13 BANK1      9     4      5
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4412
                                              7 BANK1      6     2      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4    1720
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 (2) _GenericQueue_IsEmpty                                 4     2      2     378
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _APP_KeyboardProcessOutputReport                      0     0      0      22
            _PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (3) _PS2Keyboard_SendCommand                              1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           0     0      0   31710
                                NULL *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                           _TMR2_ISR
                     _USBDeviceTasks
 ---------------------------------------------------------------------------------
 (6) _USBDeviceTasks                                       2     2      0   30454
                                             15 BANK0      2     2      0
          _USBCtrlEPAllowStatusStage
                   _USBCtrlEPService
      _USBIncrement1msInternalTimers
                    _USBStallHandler
                         _USBSuspend
                 _USBWakeFromSuspend
    _USER_USB_CALLBACK_EVENT_HANDLER
                    i1_USBDeviceInit
 ---------------------------------------------------------------------------------
 (7) i1_USBDeviceInit                                      8     8      0     272
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (7) _USBWakeFromSuspend                                   1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBSuspend                                           1     1      0    4085
                                             13 COMMON     1     1      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USBStallHandler                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBIncrement1msInternalTimers                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _USBCtrlEPService                                     1     1      0   17881
                                             14 BANK0      1     1      0
                _USBCtrlTrfInHandler
               _USBCtrlTrfOutHandler
             _USBCtrlTrfSetupHandler
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfSetupHandler                               1     1      0   17309
                                             13 BANK0      1     1      0
                 _USBCheckStdRequest
           _USBCtrlEPServiceComplete
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (9) _USBCtrlEPServiceComplete                             4     4      0      92
                                              7 COMMON     4     4      0
            _USBCtrlEPAllowDataStage
          _USBCtrlEPAllowStatusStage
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowDataStage                             4     4      0      92
                                              3 COMMON     4     4      0
                _USBCtrlTrfTxService
 ---------------------------------------------------------------------------------
 (9) _USBCheckStdRequest                                   0     0      0   13132
            _USBStdFeatureReqHandler
                _USBStdGetDscHandler
             _USBStdGetStatusHandler
                _USBStdSetCfgHandler
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (10) _USBStdSetCfgHandler                                 5     5      0    4445
                                             13 COMMON     1     1      0
                                              6 BANK0      4     4      0
    _USER_USB_CALLBACK_EVENT_HANDLER
                           i1_memset
 ---------------------------------------------------------------------------------
 (11) i1_memset                                            7     3      4     200
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) _USBStdGetStatusHandler                              2     2      0      46
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _USBStdGetDscHandler                                 3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (10) _USBStdFeatureReqHandler                             7     7      0    4556
                                              6 BANK0      7     7      0
    _USER_USB_CALLBACK_EVENT_HANDLER
 ---------------------------------------------------------------------------------
 (7) _USER_USB_CALLBACK_EVENT_HANDLER                      6     0      6    4085
                                              0 BANK0      6     0      6
                   _APP_KeyboardInit
                 _USBCheckHIDRequest
 ---------------------------------------------------------------------------------
 (8) _USBCheckHIDRequest                                   0     0      0     133
         _USBHIDCBSetIdleRateHandler
           _USBHIDCBSetReportHandler
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetReportHandler                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _USBHIDCBSetIdleRateHandler                           4     3      1     133
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (8) _APP_KeyboardInit                                     0     0      0    1260
                  _USBEnableEndpoint
                i1_GenericQueue_Init
             i1_USBTransferOnePacket
 ---------------------------------------------------------------------------------
 (9) i1_USBTransferOnePacket                              11     7      4     454
                                              0 COMMON    11     7      4
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Init                                  4     0      4     162
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (9) _USBEnableEndpoint                                    6     5      1     644
                                              7 COMMON     6     5      1
               _USBConfigureEndpoint
 ---------------------------------------------------------------------------------
 (10) _USBConfigureEndpoint                                7     6      1     400
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfOutHandler                                 4     4      0     136
                                             10 COMMON     4     4      0
                _USBCtrlTrfRxService
 ---------------------------------------------------------------------------------
 (9) _USBCtrlTrfRxService                                  6     6      0     136
                                              4 COMMON     6     6      0
          _USBCtrlEPAllowStatusStage
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBCtrlEPAllowStatusStage                           4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) _USBCtrlTrfInHandler                                  5     5      0     137
                                              3 COMMON     5     5      0
                _USBCtrlTrfTxService
          _USBHIDCBSetReportComplete *
 ---------------------------------------------------------------------------------
 (10) _USBHIDCBSetReportComplete                           0     0      0      22
  i1_APP_KeyboardProcessOutputReport
 ---------------------------------------------------------------------------------
 (11) i1_APP_KeyboardProcessOutputReport                   0     0      0      22
          i1_PS2Keyboard_SendCommand
 ---------------------------------------------------------------------------------
 (12) i1_PS2Keyboard_SendCommand                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _USBCtrlTrfTxService                                 3     3      0      92
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             0     0      0       0
                                NULL *
                   _SysTimeInterrupt *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (7) _TMR2_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _SysTimeInterrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0    1256
                         _IOCAF4_ISR
                         _IOCAF5_ISR
 ---------------------------------------------------------------------------------
 (7) _IOCAF5_ISR                                           0     0      0       0
                                NULL *
     _IOCAF5_DefaultInterruptHandler *
          _PS2Keyboard_DataInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_DataInterrupt                            0     0      0       0
           _SysTime_GetCurrentTimeMs
 ---------------------------------------------------------------------------------
 (8) _IOCAF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _IOCAF4_ISR                                           0     0      0    1256
                                NULL *
     _IOCAF4_DefaultInterruptHandler *
         _PS2Keyboard_ClockInterrupt *
 ---------------------------------------------------------------------------------
 (8) _PS2Keyboard_ClockInterrupt                           6     6      0    1256
                                             12 COMMON     2     2      0
                                             12 BANK0      4     4      0
           _SysTime_GetCurrentTimeMs
             i1_GenericQueue_Enqueue
 ---------------------------------------------------------------------------------
 (9) i1_GenericQueue_Enqueue                               7     3      4    1188
                                              5 BANK0      7     3      4
              i1_GenericQueue_IsFull
                          i1___awmod
                           i1___wmul
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (8) i1_memcpy                                            11     5      6     299
                                              6 COMMON     6     0      6
                                              0 BANK0      5     5      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (10) i1___awmod                                           7     3      4     348
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (10) i1_GenericQueue_IsFull                               4     2      2      48
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (9) _SysTime_GetCurrentTimeMs                             4     0      4       0
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _IOCAF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                                NULL *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) NULL(Fake)                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APP_KeyboardTasks
     _APP_KeyboardProcessOutputReport
       _PS2Keyboard_SendCommand
     _APP_KeyboardUpdateState
       _GenericQueue_Contains
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
           ___awmod (ARG)
         _memcmp
           ___wmul (ARG)
       _GenericQueue_Enqueue
         _GenericQueue_IsFull
         ___awmod
         ___wmul
         _memcpy
           ___awmod (ARG)
           ___bmul (ARG)
           ___wmul (ARG)
       _GenericQueue_Remove
         _GenericQueue_IsEmpty
         ___awmod
         ___wmul
         _memcmp
         _memcpy
       _PS2Keyboard_GetLastCommand
       _PS2Keyboard_SendCommand
       _PS2USB_ScanCodeToUSBHID
     _GenericQueue_CopyToArray
       ___awmod
       ___bmul
       ___wmul
       _memcpy
     _USBTransferOnePacket
     _memset
   _Log_Message
     _EUSART_Write
     _EUSART_is_tx_ready
   _Log_UtilityConvertByteToHex
     ___bmul
     _hex2str
   _PS2Keyboard_GetScanCode
     _GenericQueue_Dequeue
       _GenericQueue_IsEmpty
       ___awmod
       ___wmul
       _memcpy
     _GenericQueue_IsEmpty
   _PS2Keyboard_Init
     _GenericQueue_Init
     _IOCAF4_SetInterruptHandler
     _IOCAF5_SetInterruptHandler
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
       _IOCAF5_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _USBDeviceAttach
     _USBDeviceInit
     _WDT_Initialize
   _SysTime_Init
     _TMR2_SetInterruptHandler
     _TMR2_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   NULL(Fake) *
   _EUSART_Receive_ISR *
     NULL(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       NULL(Fake) *
       _IOCAF4_DefaultInterruptHandler *
       _PS2Keyboard_ClockInterrupt *
         _SysTime_GetCurrentTimeMs
         i1_GenericQueue_Enqueue
           i1_GenericQueue_IsFull
           i1___awmod
           i1___wmul
           i1_memcpy
             i1___wmul (ARG)
     _IOCAF5_ISR
       NULL(Fake) *
       _IOCAF5_DefaultInterruptHandler *
       _PS2Keyboard_DataInterrupt *
         _SysTime_GetCurrentTimeMs
   _TMR2_ISR *
     NULL(Fake) *
     _SysTimeInterrupt *
     _TMR2_DefaultInterruptHandler *
   _USBDeviceTasks *
     _USBCtrlEPAllowStatusStage
     _USBCtrlEPService
       _USBCtrlTrfInHandler
         _USBCtrlTrfTxService
         _USBHIDCBSetReportComplete *
           i1_APP_KeyboardProcessOutputReport
             i1_PS2Keyboard_SendCommand
       _USBCtrlTrfOutHandler
         _USBCtrlTrfRxService
           _USBCtrlEPAllowStatusStage
           _USBHIDCBSetReportComplete *
       _USBCtrlTrfSetupHandler
         _USBCheckStdRequest
           _USBStdFeatureReqHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
               _APP_KeyboardInit
                 _USBEnableEndpoint
                   _USBConfigureEndpoint
                 i1_GenericQueue_Init
                 i1_USBTransferOnePacket
               _USBCheckHIDRequest
                 _USBHIDCBSetIdleRateHandler
                 _USBHIDCBSetReportHandler
           _USBStdGetDscHandler
           _USBStdGetStatusHandler
           _USBStdSetCfgHandler
             _USER_USB_CALLBACK_EVENT_HANDLER
             i1_memset
           _USER_USB_CALLBACK_EVENT_HANDLER
         _USBCtrlEPServiceComplete
           _USBCtrlEPAllowDataStage
             _USBCtrlTrfTxService
           _USBCtrlEPAllowStatusStage
         _USER_USB_CALLBACK_EVENT_HANDLER
       i1_memcpy
     _USBIncrement1msInternalTimers
     _USBStallHandler
     _USBSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USBWakeFromSuspend
       _USER_USB_CALLBACK_EVENT_HANDLER
     _USER_USB_CALLBACK_EVENT_HANDLER
     i1_USBDeviceInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            20      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               20     11      20       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            48      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               48     40      48       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            4F      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               4F      0      4D       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2D      11       56.2%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               C      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon May 20 23:41:38 2024

                ?_EUSART_SetRxInterruptHandler 00A8               __end_of_TMR2_SetInterruptHandler 1F09  
                                   _USB_SD_Ptr 18CA                                 ___bmul@product 00AA  
                     __end_of_PS2Keyboard_Init 11B1                                  _USBDeviceInit 0EA1  
                          ___wmul@multiplicand 00B1                             _USBCheckHIDRequest 0BF2  
             __end_of_USBHIDCBSetReportHandler 1F89                               i1___wmul@product 0074  
                   PS2Keyboard_SendCommand@cmd 00A8           USER_USB_CALLBACK_EVENT_HANDLER@event 0050  
         USER_USB_CALLBACK_EVENT_HANDLER@pdata 0052                                            l110 1F92  
                  __end_of_USBStdGetDscHandler 0B77                                            l541 1122  
                                          l299 12D0                                            l921 0300  
                                          _BDT 0020                       _GenericQueue_CopyToArray 16D2  
                                          _PR2 001B                                            _UIE 0E92  
                                          _UIR 0E90                         ??_EUSART_RxDataHandler 0070  
                                   _USBSuspend 10FA                 ?_EUSART_SetFramingErrorHandler 00A8  
                                 ___awmod@sign 00AE                           USBStdSetCfgHandler@i 0059  
                         USBStdSetCfgHandler@p 0056                                _TMR2_Initialize 1FC8  
                                          wreg 0009                                 _USBDeviceTasks 06EB  
                          ?_USBCheckHIDRequest 0070                            _GenericQueue_IsFull 108D  
                               _USBDeviceState 006C             __end_of_IOCAF5_SetInterruptHandler 1ED9  
                   _IOCAF5_SetInterruptHandler 1ED1                              main@scanCodeValid 00E3  
                  ??_PS2Keyboard_DataInterrupt 0074                          ??_USBCtrlTrfRxService 0074  
                          _GenericQueue_Remove 05F7                       USBEnableEndpoint@options 0077  
                  ?_PS2Keyboard_GetLastCommand 0070                                           l1280 1168  
                                         l1185 16DB                                           l5100 1127  
                   USBConfigureEndpoint@handle 0076                                           l5110 12C7  
                                         l5024 0EC5                                           l5008 0EAC  
                                         l6010 019D                                           l5210 0D0C  
                                         l5202 0CFC                                           l5220 0D53  
                                         l5124 12E6                                           l5036 0EE3  
                                         l6014 01AA                                           l6006 0190  
                                         l5222 0D6B                                           l4600 1536  
                                         l5232 10CF                                           l6018 01B7  
                                         l5058 0EFC                                           l4540 13A8  
                                         l6060 0359                                           l6052 0330  
                                         l4542 1391                                           l6046 0315  
                                         l6150 0847                                           l4544 13AC  
                                         l6080 038E                                           l6072 0376  
                                         l6056 0342                                           l6152 0848  
                                         l6144 083C                                           l4554 1162  
                                         l4482 133C                                           l6170 0879  
                                         l4548 13B3                                           l6076 0386  
                                         l5356 1FC6                                           l5348 1FBF  
                                         l5620 11E7                                           l6164 0862  
                                         l4574 1500                                           l4726 1238  
                                         l6086 03A7                                           l6094 03D2  
                                         l6158 0853                                           l4592 1525  
                                         l4744 06B1                                           l4586 150D  
                                         l4578 1507                                           l4762 16C0  
                                         l6098 03EB                                           l5618 11E6  
                                         l4588 1519                                           l4596 152E  
                                         l4748 06DB                                           l5644 117D  
                                         l4766 16D0                                           l5638 1181  
                                         l4892 1FAE                                           l5950 00A6  
                                         l5960 00CE                                           l4888 1FA8  
                                         l5954 00B3                                           l5964 00DB  
                                         l5956 00C1                                           l5982 0125  
                                         l5974 010B                                           l5968 00F7  
                                         l5986 0132                                           l5978 0118  
                                         l5996 016F                                           l5988 0140  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u4440 1EC7  
                                         u3730 1FE4                                           u3740 1FE5  
                                         u6220 03B5                                           u6205 03A2  
                                         u6125 030A                                           u3750 1099  
                                         u3815 1169                                           u3760 109A  
                                         u3905 1526                                           u3825 116E  
                                         u6145 0339                                           u4385 0EC8  
                                         u5295 12F1                                           u6360 0838  
                                         u6417 11BC                                           u3875 1510  
                                         u3895 151F                          ??_USBCtrlTrfTxService 0070  
                                         _UCFG 0E91                                           _UEP0 0E98  
                                         _UEP1 0E99                                           u5995 015E  
                                         _UEIE 0E97                                           _UEIR 0E93  
                                         _UCON 0E8E                                           _TMR2 001A  
                                         _WPUA 020C                                           _WPUB 020D  
       USBStdFeatureReqHandler@current_ep_data 005A                                           _pDst 015F  
                                         _main 0817                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                _USBDeviceAttach 1112  
                    ?_SysTime_GetCurrentTimeMs 0070                                           btemp 007E  
                                         start 003D                                   _SysTime_Init 1F32  
                         _GenericQueue_Dequeue 09B7                           _GenericQueue_IsEmpty 1FD9  
                         ??_USBCheckHIDRequest 0074                           ?_GenericQueue_IsFull 00A8  
                   __end_of_USBCheckStdRequest 09B7                         ??_USBCtrlTrfOutHandler 007A  
                            ___bmul@multiplier 00AB                                  _LocalSOFCount 0136  
                         _GenericQueue_Enqueue 08E6                APP_KeyboardUpdateState@scanCode 00D0  
                          USBDeviceInit@i_1369 00AE                      ??_USBStdFeatureReqHandler 0056  
                         ?_GenericQueue_Remove 00C0                                  ??_Log_Message 00AB  
                     ?_APP_KeyboardUpdateState 0070                       GenericQueue_Dequeue@item 00C2  
                     ??_USBStdGetStatusHandler 0070                                 ?_USBDeviceInit 0070  
                                ?_EUSART_Write 0070                  __end_of_OSCILLATOR_Initialize 1F96  
              __end_of_PS2Keyboard_GetScanCode 11E9                                          ?_main 0070  
                              __end_of___awmod 153B                         __end_of_USBDeviceTasks 07BE  
                                        _T2CON 001C                      ?_USBCtrlEPServiceComplete 0070  
                                        i1l141 000D                                          i1l144 0019  
                                        i1l305 1223                                          i1l153 003B  
                                        i1l146 0026                                          i1l148 0033  
                                        i1l502 076A                                          i1l503 07BB  
                                        i1l504 07B8                                     i1memcpy@d1 0076  
                                        i1l631 161F                                          i1l703 097C  
                                        i1l634 1665                                          i1l635 1628  
                                        i1l636 162B                                          i1l492 070A  
                                        i1l566 0DBC                                          i1l680 0BDD  
                                        i1l912 15EC                                          i1l728 02B1  
                                        i1l594 0F60                                          i1l818 1471  
                                        i1l498 0742                                          i1l579 174A  
                                        i1l764 0C6F                                          i1l692 09B6  
                                        i1l694 0956                                     i1memcpy@s1 0078  
                                        _UADDR 0E96                                          _RCREG 0199  
                                        _RCSTA 019D                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _USTAT 0E8F                                          _TXREG 019A  
                                 main@scanCode 00E5                                          _TXSTA 019E  
                                 _outputReport 0120                                __end_of_hex2str 1FC8  
           __end_of_USBHIDCBSetIdleRateHandler 1F7C                     _USBHIDCBSetIdleRateHandler 1F6F  
              __end_of_USBCtrlEPAllowDataStage 1800                                          _sd000 18D0  
                                        _sd001 183F                                          _sd002 189C  
                             __end_of_TMR2_ISR 1F49                 ?_USBIncrement1msInternalTimers 0070  
                               i1___awmod@sign 0076                        __end_of_PIN_MANAGER_IOC 1F27  
                      _PS2USB_ScanCodeToUSBHID 1225                                 _WDT_Initialize 1EAB  
                                        pclath 000A                               __end_ofi1___wmul 1160  
                                        status 0003                            i1___wmul@multiplier 0070  
                                        wtemp0 007E                               __end_ofi1_memcpy 1334  
                              _TMR2_StartTimer 1EAE                               __end_ofi1_memset 10CC  
                        ?_GenericQueue_Dequeue 00C0                          ?_GenericQueue_IsEmpty 00A8  
                        ??_GenericQueue_IsFull 00AA                           __end_of_ps2ExtUsbMap 0502  
                        _GenericQueue_Contains 1670                PS2USB_ScanCodeToUSBHID@scanCode 00A8  
                        ?_GenericQueue_Enqueue 00C0                          ??_GenericQueue_Remove 00C3  
                    _PS2Keyboard_DataInterrupt 1F96                                __initialization 003F  
                  ?_PS2Keyboard_ClockInterrupt 0070                                   __end_of_main 087E  
                               ??_EUSART_Write 00A8                        __end_of_TMR2_Initialize 1FD9  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 00AA  
                     _TMR2_SetInterruptHandler 1F01                                         ??_main 00D8  
                __end_ofi1_GenericQueue_IsFull 2000                            __end_of_Log_Message 1196  
                              ?_USBDeviceTasks 0070                       ?_PS2Keyboard_SendCommand 0070  
                GenericQueue_Init@element_size 00AA                                    ?_USBSuspend 0070  
                      _IOCAF4_InterruptHandler 016C                                i1_USBDeviceInit 0DFE  
                     _USBHIDCBSetReportHandler 1F7C                         __end_of_WDT_Initialize 1EAE  
    __end_of_EUSART_DefaultFramingErrorHandler 1EA5            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 1EA4  
                      __end_of_USBDeviceAttach 112B                     _EUSART_OverrunErrorHandler 0140  
                                       _ACTCON 039B                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                     __end_of_SysTimeInterrupt 108D                                         i1l1091 0534  
                                       i1l1086 052B                                         i1l1280 114D  
                                       i1l4010 1765                                         i1l4020 177F  
                                       i1l4110 0A28                                         i1l4200 1640  
                                       i1l4040 10B9                                         i1l4018 177B  
                                       i1l4210 1659                                         i1l4028 1795  
                                       i1l4230 01E9                                         i1l4150 0A7A  
                                       i1l4312 1147                                         i1l4128 0A47  
                                       i1l4058 0AAE                                         i1l4250 0234  
                                       i1l4170 0B40                                         i1l4162 0B11  
                                       i1l4090 17CB                                         i1l4332 14BB  
                                       i1l4244 0216                                         i1l4228 01E7  
                                       i1l4180 0B67                                         i1l4172 0B43  
                                       i1l4404 0DC8                                         i1l4412 0DD1  
                                       i1l5140 11FC                                         i1l4350 14E0  
                                       i1l4158 0B07                                         i1l4502 096C  
                                       i1l4094 17DE                                         i1l5142 1203  
                                       i1l4344 14C8                                         i1l4336 14C2  
                                       i1l4272 0274                                         i1l4256 0248  
                                       i1l4184 0B6A                                         i1l4504 096F  
                                       i1l4520 0993                                         i1l4346 14D4  
                                       i1l4354 14E9                                         i1l4370 1316  
                                       i1l6026 1F22                                         i1l4442 0F68  
                                       i1l4282 029D                                         i1l4266 0262  
                                       i1l4258 0252                                         i1l4178 0B64  
                                       i1l4506 0972                                         i1l4444 0F7E  
                                       i1l3900 0C22                                         i1l4292 02B7  
                                       i1l4284 02A2                                         i1l4268 0269  
                                       i1l4516 0986                                         i1l5172 12BF  
                                       i1l5420 0E53                                         i1l5500 0720  
                                       i1l4358 14F1                                         i1l4454 0FB3  
                                       i1l3814 149F                                         i1l4382 0D81  
                                       i1l5174 12C1                                         i1l4704 0BC0  
                                       i1l4456 0FBF                                         i1l3816 14A7  
                                       i1l3824 124C                                         i1l3912 0C39  
                                       i1l3904 0C2A                                         i1l6232 1452  
                                       i1l4296 02D6                                         i1l5192 1575  
                                       i1l4714 0BEE                                         i1l3922 0C53  
                                       i1l3906 0C2D                                         i1l6234 146C  
                                       i1l4298 02DE                                         i1l4490 095C  
                                       i1l4386 0D85                                         i1l5194 1578  
                                       i1l5370 0E09                                         i1l5530 0763  
                                       i1l5522 074F                                         i1l5506 0734  
                                       i1l6236 05DE                                         i1l4716 0BEF  
                                       i1l4708 0BD0                                         i1l4468 0FF9  
                                       i1l3828 1253                                         i1l3940 1601  
                                       i1l3916 0C47                                         i1l4492 095F  
                                       i1l5540 0770                                         i1l5516 0748  
                                       i1l3926 0C5B                                         i1l4494 0962  
                                       i1l5550 0787                                         i1l3856 0C8C  
                                       i1l3848 0C7C                                         i1l5480 0704  
                                       i1l5472 06F7                                         i1l4666 1402  
                                       i1l3866 0CD3                                         i1l3970 1444  
                                       i1l5386 0E20                                         i1l4692 0B92  
                                       i1l3868 0CEB                                         i1l3892 0C0B  
                                       i1l3972 1447                                         i1l3964 1436  
                                       i1l5556 07A0                                         i1l5910 05BB  
                                       i1l5902 05AC                                         i1l4694 0B95  
                                       i1l4678 1433                                         i1l3886 0BFF  
                                       i1l5398 0E3D                                         i1l5558 07AF  
                                       i1l5494 071A                                         i1l5920 05D1  
                                       i1l4944 1F6C                                         i1l3968 1441  
                                       i1l3976 144A                                         i1l5594 13E8  
                                       i1l5906 05B4                                         i1l3898 0C17  
                                       i1l5588 13D8                                         i1l5916 05CE  
                                       i1l5598 13F8                                         i1l5926 05D4  
                                       i1l5870 053C                                         i1l3998 1745  
                                       i1l5880 0572                                         i1l5928 05EC  
                                       i1l5864 052D                                         i1l5872 0545  
                                       i1l5874 0568                                         i1l5938 1F5F  
                                       i1l5876 056C                                         i1l5868 0536  
                                       u311_25 17D5                                         i1l5894 0598  
                                       i1l5878 0570                     __end_of_EUSART_is_tx_ready 1EC9  
                                       u342_20 1FF8                                         u343_20 1FF9  
                                       u351_25 14CB                                         u353_25 14DA  
                                       u345_25 114E                                         u354_25 14E1  
                                       u346_25 1153                                         u282_25 1478  
                                       u283_25 147E                                         u284_25 1486  
                                       u365_25 0F5C                                         u456_25 1546  
                                       u297_25 15F6                                         u570_20 051E  
                                       _OSCCON 0099                                         u642_27 1134  
                                       u492_25 0E23                                         _PLLRDY 04D6  
                                       u576_24 057F                                         u568_24 0517  
                                       u576_25 057E                                         u568_25 0516  
                                       u569_20 051D                                    i1memcpy@tmp 0054  
                                       u578_20 05A7                                         u579_20 05A8  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                   i1USBTransferOnePacket@handle 0079  
              __end_of_APP_KeyboardUpdateState 01D3                              _shortPacketStatus 00ED  
                             _APP_KeyboardInit 15CB                                USBDeviceTasks@i 0060  
                  USBStdFeatureReqHandler@pUEP 0058                       USBTransferOnePacket@data 00A9  
                   USBCtrlTrfInHandler@lastDTS 0077                                ??_USBDeviceInit 00A8  
                                       ___bmul 1FA6                                _keyboardIsBreak 014D  
                                       ___wmul 1160                                      ??___awmod 00AC  
                              _keyboardCommand 014C                              _USBEnableEndpoint 1244  
                          _EUSART_Transmit_ISR 1206                                         _memcmp 138A  
                                       _memcpy 1334                   i1PS2Keyboard_SendCommand@cmd 0070  
                                       _memset 10CC                                ___awmod@divisor 00A8  
                                       _timeMs 0128                                      ??_hex2str 00A8  
                              ___awmod@counter 00AD                             ?_USBEnableEndpoint 0077  
                            __end_ofi1___awmod 14F6                                   Log_Message@i 00AD  
                    ??_PS2USB_ScanCodeToUSBHID 00A8                                ?_WDT_Initialize 0070  
                                  _OldSOFCount 0134                            ??_USBEnableEndpoint 0078  
                           APP_KeyboardTasks@i 00D7                        __end_of_TMR2_StartTimer 1EB1  
     TMR2_SetInterruptHandler@InterruptHandler 00A8     IOCAF5_SetInterruptHandler@InterruptHandler 00A8  
   IOCAF4_SetInterruptHandler@InterruptHandler 00A8                               ?_PIN_MANAGER_IOC 0070  
                                  _CtrlTrfData 0048                                   ??_IOCAF4_ISR 007E  
                                 ??_IOCAF5_ISR 0074                           ?_EUSART_Transmit_ISR 0070  
           USBHIDCBSetIdleRateHandler@reportID 0073                           _controlTransferState 006A  
                PS2Keyboard_ClockInterrupt@bit 007D                              _SYSTEM_Initialize 10A1  
                      __end_of__initialization 0084                     i1USBTransferOnePacket@data 0071  
                      ?i1_GenericQueue_Enqueue 0055                         ??_GenericQueue_Dequeue 00C3  
                       ??_GenericQueue_IsEmpty 00AA                         ?_GenericQueue_Contains 00BE  
                           ?_SYSTEM_Initialize 0070                         ??_GenericQueue_Enqueue 00C4  
                     GenericQueue_Enqueue@item 00C2           __end_of_EUSART_SetTxInterruptHandler 1F01  
                 _EUSART_SetTxInterruptHandler 1EF9                            ___bmul@multiplicand 00A8  
                      i1GenericQueue_Enqueue@q 0055                                 __pcstackCOMMON 0070  
                   ??_GenericQueue_CopyToArray 00C3                      __end_of_USBEnableEndpoint 1264  
                                __end_of_sd000 18D4                                  __end_of_sd001 1873  
                                __end_of_sd002 18B8                                   __pidataBANK3 1EB5  
                          ??_SYSTEM_Initialize 00B0                                    _Log_Message 117B  
                                    ?_TMR2_ISR 0070                                _active_protocol 0168  
              __end_of_PS2Keyboard_SendCommand 11CD         __end_of_IOCAF4_DefaultInterruptHandler 0003  
               _IOCAF4_DefaultInterruptHandler 0002                        __end_ofi1_USBDeviceInit 0EA1  
                  __end_of_USBCtrlTrfInHandler 0BF2                               ?_TMR2_Initialize 0070  
                            ?_PS2Keyboard_Init 0070                   ?_Log_UtilityConvertByteToHex 00AC  
                           __end_of_IOCAF4_ISR 1F62                             __end_of_IOCAF5_ISR 1F6F  
                                    ?i1___wmul 0070                    __end_ofi1_GenericQueue_Init 1284  
                           ??_PS2Keyboard_Init 00AC                                 _OPTION_REGbits 0095  
                                    ?i1_memcpy 0076                                      ?i1_memset 0070  
                         _eusartRxStatusBuffer 01A8                    ?_IOCAF5_SetInterruptHandler 00A8  
              ??_EUSART_SetOverrunErrorHandler 00AA                       ??_USBCtrlTrfSetupHandler 005D  
                      _USBTicksSinceSuspendEnd 0154                     ?i1_PS2Keyboard_SendCommand 0070  
              i1GenericQueue_Init@element_size 0072                                  _keyboardState 0153  
                             ?_USBDeviceAttach 0070                      __end_of_SYSTEM_Initialize 10B6  
                        ??_EUSART_Transmit_ISR 0070                         _USBStdGetStatusHandler 161B  
                   i1GenericQueue_Enqueue@item 0057                 __end_ofi1_GenericQueue_Enqueue 08E6  
                                   __pbssBANK0 0061                                     __pbssBANK1 00E8  
                                   __pbssBANK2 0121                                     __pbssBANK3 01A0  
                         __end_of_EUSART_Write 12E9               ??_IOCAF5_DefaultInterruptHandler 0070  
              ?_IOCAF5_DefaultInterruptHandler 0070                                    _pBDTEntryIn 0061  
                      _IOCAF5_InterruptHandler 016A                            _keyboardCommandBits 014B  
             __end_of_USBCtrlEPServiceComplete 0DFE                            _keyboardCommandOnes 014A  
             PS2Keyboard_ClockInterrupt@bitPos 007C             Log_UtilityConvertByteToHex@bufSize 00AD  
                                   __pmaintext 0817              APP_KeyboardUpdateState@usbHidCode 00CC  
       APP_KeyboardUpdateState@usbHidCode_2928 00CE         APP_KeyboardUpdateState@usbHidCode_2937 00CF  
       APP_KeyboardUpdateState@usbHidCode_2929 00CD                           USBCtrlTrfRxService@i 0078  
               Log_UtilityConvertByteToHex@buf 00AC                                        ?___bmul 00A8  
                ?_EUSART_SetTxInterruptHandler 00A8               _EUSART_TxDefaultInterruptHandler 0148  
                                      ?___wmul 00AF                                     ??_TMR2_ISR 0070  
                                   __pintentry 0004                                        ?_memcmp 00B5  
                                      ?_memcpy 00B5                                        _BAUDCON 019F  
                                      ?_memset 00A8                                     _device_dsc 18B8  
                             _USBCtrlEPService 153B                   ??_EUSART_DefaultErrorHandler 0071  
                                   _ep_data_in 013C                                     ??i1___wmul 0074  
                  __end_of_USBCtrlTrfRxService 1000                             _USBCheckStdRequest 094E  
                                _eusartRxCount 0161                              _configDescriptor1 1873  
                ??_Log_UtilityConvertByteToHex 00AE                                     ??i1_memcpy 007C  
                                   ??i1_memset 0074                                   _ps2ExtUsbMap 0403  
       APP_KeyboardTasks@TimeDeltaMilliseconds 00D5                    __end_of_USBCtrlTrfTxService 1799  
                          _USBStdSetCfgHandler 0A20                    ?_USBHIDCBSetIdleRateHandler 0070  
                             main@hndlScanCode 00E4                                        _OSCTUNE 0098  
                Log_UtilityConvertByteToHex@d0 00AF                  Log_UtilityConvertByteToHex@d1 00B1  
                     ??_EUSART_SetErrorHandler 00AA                            ?_USBCheckStdRequest 0070  
                             ?_TMR2_StartTimer 0070                                        _UIEbits 0E92  
            __end_ofi1_PS2Keyboard_SendCommand 1145                                        _UIRbits 0E90  
                        GenericQueue_Dequeue@q 00C0                    APP_KeyboardUpdateState@leds 00CB  
                                 i1memset@dest 0075                       ??i1_USBTransferOnePacket 0074  
                        GenericQueue_IsEmpty@q 00A8                              __end_of_ps2UsbMap 1084  
              ??_USBIncrement1msInternalTimers 0070                           ?_USBStdSetCfgHandler 0070  
                            _APP_KeyboardTasks 02F3                     ??_TMR2_SetInterruptHandler 00AA  
                            __end_of_hid_rpt01 183F                             Log_Message@bufSize 00AA  
                         ??_USBCheckStdRequest 007E                             ?_APP_KeyboardTasks 0070  
                                      ___awmod 14F6                          GenericQueue_Enqueue@q 00C0  
                         i1GenericQueue_Init@q 0070                               ??_USBDeviceTasks 005F  
                   ??_USBHIDCBSetReportHandler 0070                              ??_USBStallHandler 0070  
                             _keyboardIdleRate 0138                               ?i1_USBDeviceInit 0070  
                    __end_of_configDescriptor1 189C                               _keyboardIsExtend 014E  
                                      _hex2str 1FB7                                        __ptext1 1F32  
                                      __ptext2 1EAE                                        __ptext3 10A1  
                                      __ptext4 1EAB                                        __ptext5 0EA1  
                                      __ptext6 1112                                        __ptext7 1FC8  
                                      __ptext8 1F01                                        __ptext9 135A  
                                      _inPipes 00E8                    _USBDeferOUTDataStagePackets 0155  
                          ??_APP_KeyboardTasks 00D1                          _OSCILLATOR_Initialize 1F89  
                                 ??_USBSuspend 007D                                      _T2CONbits 001C  
                             _keyboardScanCode 0165                               ___awmod@dividend 00AA  
                     ??_PIN_MANAGER_Initialize 00AA                                      _IOCAFbits 0393  
                     __end_of_APP_KeyboardInit 161B                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                             __end_of_USB_CD_Ptr 18D6  
                                      clrloop0 1F4A                       _SysTime_GetCurrentTimeMs 1F09  
                         end_of_initialization 0084                    __end_of_GenericQueue_IsFull 10A1  
                           __end_of_USB_SD_Ptr 18D0                                        memcmp@l 00BB  
                                      memcmp@n 00B8                                        memcmp@r 00BD  
                            ?_SysTimeInterrupt 0070          __end_of_EUSART_SetOverrunErrorHandler 1EF1  
                _EUSART_SetOverrunErrorHandler 1EE9                                        memcpy@d 00BB  
                                      memcpy@n 00B9                                        memcpy@s 00BD  
                          _pBDTEntryEP0OutNext 0067                    __end_of_GenericQueue_Remove 06EB  
                                      memset@c 00A8                                        memset@n 00AA  
                                      memset@p 00AD                                _USB1msTickCount 01C0  
                      _PS2Keyboard_GetScanCode 11CD                       ?_USBStdFeatureReqHandler 0070  
                           ??_SysTimeInterrupt 0070                      __end_of_APP_KeyboardTasks 0403  
                            _EUSART_Initialize 07BE                          ??_USBStdSetCfgHandler 007D  
                                   hex2str@val 00A8                             ?_EUSART_Initialize 0070  
                           __end_of_USBSuspend 1112                        _USBCtrlEPAllowDataStage 1799  
                                    _RCSTAbits 019D                             _EUSART_is_tx_ready 1EC2  
                                   _prevTimeMs 012C                       _USBCtrlEPServiceComplete 0D70  
                        i1___wmul@multiplicand 0072                     _USBStatusStageEnabledFlag1 0158  
                   _USBStatusStageEnabledFlag2 0157                            ??_EUSART_Initialize 00AA  
                             ??_WDT_Initialize 00A8                 ??_EUSART_SetTxInterruptHandler 00AA  
                           USBEnableEndpoint@p 007A                                      _PORTAbits 000C  
                          ?_EUSART_is_tx_ready 0070                          i1_GenericQueue_IsFull 1FEC  
                                    _TRISAbits 008C                             _BothEP0OutUOWNsSet 015B  
                    USBStdSetCfgHandler@i_2097 0058                                      i1___awmod 14B1  
                 ??_IOCAF4_SetInterruptHandler 00AA                      USBConfigureEndpoint@EPNum 0075  
                            _GenericQueue_Init 1284                     ?_USBCtrlEPAllowStatusStage 0070  
                      ??_GenericQueue_Contains 00C1            USER_USB_CALLBACK_EVENT_HANDLER@size 0054  
                                    _USTATcopy 006D                             ?_GenericQueue_Init 00A8  
                    __end_of_EUSART_Initialize 07FF                       i1USBTransferOnePacket@ep 0078  
                 __end_of_USBTransferOnePacket 0D70                           ??_EUSART_is_tx_ready 00A8  
                          ??_GenericQueue_Init 00AC                          i1USBDeviceInit@i_1369 0076  
                       _USBCtrlTrfSetupHandler 1582                                   ?_Log_Message 00AA  
         __end_of_TMR2_DefaultInterruptHandler 0800                   _TMR2_DefaultInterruptHandler 07FF  
                               __end_of___bmul 1FB7                          __end_of_USBDeviceInit 0F4D  
        __end_of_USBIncrement1msInternalTimers 0817                  _USBIncrement1msInternalTimers 0800  
           __end_of_EUSART_DefaultErrorHandler 1EA8                     _EUSART_DefaultErrorHandler 1EA5  
                                    i1memcpy@d 0050                                      i1memcpy@n 007A  
                                    i1memcpy@s 0052                                 __end_of___wmul 117B  
                                    i1memset@c 0070                                      i1memset@n 0072  
                                    i1memset@p 0076                                   _EUSART_Write 12C6  
                               __end_of_memcmp 13C1                                 __end_of_memcpy 135A  
                       ?_OSCILLATOR_Initialize 0070                                 __end_of_memset 10E2  
                   ?_USBHIDCBSetReportComplete 0070                              _USBBusIsSuspended 015D  
                          start_initialization 003F                        _APP_KeyboardUpdateState 0088  
                      ?_USBStdGetStatusHandler 0070                  USBCtrlTrfRxService@byteToRead 0079  
                    __end_of_GenericQueue_Init 12A4                                     ?i1___awmod 0070  
                               _oldInputReport 01A0   EUSART_SetRxInterruptHandler@interruptHandler 00A8  
 EUSART_SetTxInterruptHandler@interruptHandler 00A8                    ??i1_PS2Keyboard_SendCommand 0070  
                 __end_of_USBConfigureEndpoint 14B1                __end_of_USBStdFeatureReqHandler 02F3  
                    ??_PS2Keyboard_GetScanCode 00C7                   ??_PS2Keyboard_GetLastCommand 00A8  
            __end_of_USBCtrlEPAllowStatusStage 0AFE                       __end_of_USBCtrlEPService 1582  
                                ?_SysTime_Init 0070                      ??_USBCtrlEPAllowDataStage 0073  
                               USBDeviceInit@i 00AF                                 USBDeviceInit@p 00AC  
               ?_EUSART_SetOverrunErrorHandler 00A8                         _pBDTEntryEP0OutCurrent 006B  
                      USBTransferOnePacket@dir 00A8                        USBTransferOnePacket@len 00AB  
                   _EUSART_FramingErrorHandler 0142                                       ??___bmul 00A9  
                                     ??___wmul 00B3                         _EUSART_SetErrorHandler 1ED9  
                          _USBStdGetDscHandler 0AFE                                    __pdataBANK3 01C7  
                           i1___awmod@dividend 0072                                       ??_memcmp 00BA  
                                     ??_memcpy 00BB                                       ??_memset 00AC  
                ?_TMR2_DefaultInterruptHandler 0070                       ?_PS2USB_ScanCodeToUSBHID 0070  
                                   memset@dest 00AE                PS2Keyboard_GetScanCode@scanCode 00C7  
                       i1_USBTransferOnePacket 0C70         __end_of_IOCAF5_DefaultInterruptHandler 0004  
               _IOCAF5_DefaultInterruptHandler 0003                         ?i1_GenericQueue_IsFull 0070  
                       i1GenericQueue_IsFull@q 0070                         _USBActiveConfiguration 006F  
               __end_of_USBStdGetStatusHandler 1670                      i1USBTransferOnePacket@dir 0070  
                                  __pbssBIGRAM 232C                    __end_of_EUSART_Transmit_ISR 1225  
                    i1USBTransferOnePacket@len 0073              __end_of_USBHIDCBSetReportComplete 1EC2  
                                    ___latbits 0002                                  __pcstackBANK0 0050  
                                __pcstackBANK1 00A8                      ?_GenericQueue_CopyToArray 00C0  
                         ?_USBStdGetDscHandler 0070                        _PS2Keyboard_SendCommand 11B1  
    __end_ofi1_APP_KeyboardProcessOutputReport 1F1C        __end_of_APP_KeyboardProcessOutputReport 1F32  
          ??i1_APP_KeyboardProcessOutputReport 0071             ?i1_APP_KeyboardProcessOutputReport 0070  
             ?_APP_KeyboardProcessOutputReport 0070              ??_APP_KeyboardProcessOutputReport 00A9  
            i1_APP_KeyboardProcessOutputReport 1F12                _APP_KeyboardProcessOutputReport 1F27  
                   __end_of_EUSART_Receive_ISR 13FB                                   _keyboardData 014F  
                   __end_of_USBWakeFromSuspend 1206               _EUSART_RxDefaultInterruptHandler 0146  
                               ??_SysTime_Init 00AA                                _USBStallHandler 12A4  
                                 _pBDTEntryOut 0130                                      __pnvBANK2 016A  
                         _keyboardCommandCount 0069                   __end_of_EUSART_RxDataHandler 10FA  
                                    _main$2652 00DF                                      _main$2653 00E1  
                       _PIN_MANAGER_Initialize 135A                      i1_PS2Keyboard_SendCommand 112B  
                                    __ptext100 1EA4                                      __ptext101 1EA5  
                                    __ptext102 10E2                Log_UtilityConvertByteToHex@byte 00B0  
                                     ?___awmod 00A8                                      _ps2UsbMap 1000  
                 ??_PS2Keyboard_ClockInterrupt 005C                             GenericQueue_Init@q 00A8  
                                 _eusartRxHead 00EE                                   _eusartTxHead 0164  
                                    _hid_rpt01 1800                                   _eusartRxTail 0162  
                                 _eusartTxTail 0163                                      _idle_rate 0169  
                 ??_INTERRUPT_InterruptManager 007E                          _keyboardScanCodeValid 0150  
                                     ?_hex2str 0070                          _keyboardScanCodeQueue 2391  
                    ??_APP_KeyboardUpdateState 00C9                        _eusartTxBufferRemaining 00EF  
                   ??_SysTime_GetCurrentTimeMs 0074                           _USBTransferOnePacket 0CF0  
                         GenericQueue_IsFull@q 00A8             __end_of_IOCAF4_SetInterruptHandler 1ED1  
                   _IOCAF4_SetInterruptHandler 1EC9                   __end_of_USBCtrlTrfOutHandler 1435  
                            ?_APP_KeyboardInit 0070                                    ??i1___awmod 0074  
                        ??_USBStdGetDscHandler 0070                                    _ep_data_out 013A  
                USBConfigureEndpoint@direction 0070                             ??_APP_KeyboardInit 007D  
                               _eusartRxBuffer 01B0                                 _eusartTxBuffer 01B8  
                         GenericQueue_Remove@i 00C7                           GenericQueue_Remove@j 00C8  
                         GenericQueue_Remove@q 00C0                                 ___wmul@product 00B3  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 00A8  
                   __end_of_USBCheckHIDRequest 0C70                     ??_USBCtrlEPServiceComplete 0077  
                                    clear_ram0 1F49                                       _PIE1bits 0091  
                                     _PIE2bits 0092                              _eusartRxLastError 0160  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 00AA  
                                     _PIR2bits 0012                __end_of_PS2USB_ScanCodeToUSBHID 1244  
                                     _UEP0bits 0E98                                      main@F3452 01C7  
                                    main@F3448 01C4                     _USBDeferINDataStagePackets 0156  
    __end_of_EUSART_DefaultOverrunErrorHandler 1EB5            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 1EB1  
                                     _TMR2_ISR 1F3D                                       _UCONbits 0E8E  
                            ??_PIN_MANAGER_IOC 007E                           _USBConfigureEndpoint 1472  
          __end_of_Log_UtilityConvertByteToHex 130E                    _Log_UtilityConvertByteToHex 12E9  
                      GenericQueue_Remove@item 00C2                      APP_KeyboardTasks@scanCode 00D3  
                            ___wmul@multiplier 00AF                          ?_USBTransferOnePacket 00A8  
                                     i1___wmul 1145                                main@scanCodeStr 00D9  
                                     i1_memcpy 130E                                       i1_memset 10B6  
                     ??i1_GenericQueue_Enqueue 0059                                   _RemoteWakeup 015E  
               ??_TMR2_DefaultInterruptHandler 0070                      ?_TMR2_SetInterruptHandler 00A8  
                   ?_PS2Keyboard_DataInterrupt 0070                      ??_PS2Keyboard_SendCommand 00A8  
                      __end_of_USBStallHandler 12C6             __end_of_PS2Keyboard_GetLastCommand 1EAB  
                   _PS2Keyboard_GetLastCommand 1EA8                      ?_USBHIDCBSetReportHandler 0070  
                             _PS2Keyboard_Init 1196                    ??_USBCtrlEPAllowStatusStage 0070  
                  __end_of_USBStdSetCfgHandler 0A8C                              ??_TMR2_Initialize 00AA  
                __end_of_GenericQueue_Contains 16D2                             __end_of_device_dsc 18CA  
                       GenericQueue_Contains@i 00C5                         GenericQueue_Contains@q 00BE  
                      ?_USBCtrlTrfSetupHandler 0070                        USBStdGetStatusHandler@p 0070  
                                    memcpy@tmp 00BF                         USBTransferOnePacket@ep 00B0  
                                     _SetupPkt 0040                              i1___awmod@divisor 0070  
                      ??_OSCILLATOR_Initialize 00A8                            _EUSART_ErrorHandler 013E  
                        ?_USBConfigureEndpoint 0070                              i1___awmod@counter 0075  
                            ??_USBDeviceAttach 00A8                    ?_EUSART_DefaultErrorHandler 0070  
                         __end_of_SysTime_Init 1F3D                    ??_USBHIDCBSetReportComplete 0071  
                         _EUSART_RxDataHandler 10E2                                       __ptext10 1F89  
                                     __ptext11 07BE                                       __ptext20 1284  
                                     __ptext12 1EF9                                       __ptext21 11CD  
                                     __ptext13 1EF1                                       __ptext30 0CF0  
                                     __ptext22 09B7                                       __ptext14 1EE9  
                                     __ptext31 16D2                                       __ptext23 12E9  
                                     __ptext15 1EE1                                       __ptext40 1670  
                                     __ptext32 1FA6                                       __ptext24 1FB7  
                                     __ptext16 1ED9                                       __ptext41 138A  
                                     __ptext33 0088                                       __ptext25 117B  
                                     __ptext17 1196                                       __ptext50 11E9  
                                     __ptext42 1160                                       __ptext34 1225  
                                     __ptext26 1EC2                                       __ptext18 1ED1  
                                     __ptext51 10FA                                       __ptext43 14F6  
                                     __ptext35 1EA8                                       __ptext27 12C6  
                                     __ptext19 1EC9                                       __ptext60 10B6  
                                     __ptext52 12A4                                       __ptext44 1FD9  
                                     __ptext36 05F7                                       __ptext28 02F3  
                                     __ptext61 161B                                       __ptext53 0800  
                                     __ptext45 1F27                                       __ptext37 08E6  
                                     __ptext29 10CC                                       __ptext70 1264  
                                     __ptext62 0AFE                                       __ptext54 153B  
                                     __ptext46 11B1                                       __ptext38 1334  
                                     __ptext71 1244                                       __ptext63 01D3  
                                     __ptext55 1582                                       __ptext39 108D  
                                     __ptext80 1734                                       __ptext72 1472  
                                     __ptext64 1435                                       __ptext56 0D70  
                                     __ptext48 06EB                                       __ptext81 1F3D  
                                     __ptext73 13FB                                       __ptext65 0BF2  
                                     __ptext57 1799                                       __ptext49 0DFE  
                                     __ptext90 0502                                       __ptext82 1084  
                                     __ptext74 0F4D                                       __ptext66 1F7C  
                                     __ptext58 094E                                       __ptext91 087E  
                                     __ptext83 07FF                                       __ptext75 0A8C  
                                     __ptext67 1F6F                                       __ptext59 0A20  
                                     __ptext92 130E                                       __ptext84 1F1C  
                                     __ptext76 0B77                                       __ptext68 15CB  
                                     __ptext93 1145                                       __ptext85 1F62  
                                     __ptext77 1EBB                                       __ptext69 0C70  
                                     __ptext94 14B1                                       __ptext86 0003  
                                     __ptext78 1F12                                       __ptext95 1FEC  
                                     __ptext87 1F96                                       __ptext79 112B  
                                     __ptext96 1F09                                       __ptext88 1F55  
                                     __ptext97 1206                                       __ptext89 0002  
                                     __ptext98 13C1                                       __ptext99 1EB1  
                 ??_IOCAF5_SetInterruptHandler 00AA              __end_of_PS2Keyboard_DataInterrupt 1FA6  
                            _keyboardIndexData 0152                                     _IOCAF4_ISR 1F55  
                GenericQueue_CopyToArray@array 00C2                                     _IOCAF5_ISR 1F62  
                GenericQueue_CopyToArray@count 00C8                  GenericQueue_CopyToArray@index 00C7  
                                     _keyboard 232C                 __end_of_USBCtrlTrfSetupHandler 15CB  
                            ?_USBCtrlEPService 0070                             ??_USBCtrlEPService 005E  
                      ?_EUSART_SetErrorHandler 00A8                            _USBCtrlTrfInHandler 0B77  
EUSART_SetOverrunErrorHandler@interruptHandler 00A8                                    _inputReport 00A0  
           __end_of_PS2Keyboard_ClockInterrupt 05F7                     _PS2Keyboard_ClockInterrupt 0502  
                            _keyboardOnesCount 0151                                       _outPipes 0121  
                         _USBCtrlTrfOutHandler 13FB                                       int$flags 007E  
                          i1_GenericQueue_Init 1264                        ?i1_USBTransferOnePacket 0070  
             __end_of_GenericQueue_CopyToArray 1734                      _USBCtrlEPAllowStatusStage 0A8C  
                            ??_TMR2_StartTimer 00A8             __end_of_INTERRUPT_InterruptManager 003D  
                   _INTERRUPT_InterruptManager 0004                        ??i1_GenericQueue_IsFull 0072  
        __end_of_EUSART_SetFramingErrorHandler 1EE9                  _EUSART_SetFramingErrorHandler 1EE1  
                       ??_USBTransferOnePacket 00AC               __end_of_SysTime_GetCurrentTimeMs 1F12  
                 __end_of_GenericQueue_Dequeue 0A20                   __end_of_GenericQueue_IsEmpty 1FEC  
                    _USBDeferStatusStagePacket 0159                               i1USBDeviceInit@i 0077  
                             i1USBDeviceInit@p 0074                                     _INTCONbits 000B  
                 __end_of_GenericQueue_Enqueue 094E                           ?_USBCtrlTrfInHandler 0070  
                                     memcmp@vl 00B5                                       memcmp@vr 00B7  
                        ?_EUSART_RxDataHandler 0070                                       memcpy@d1 00B5  
                                     memcpy@s1 00B7                  USBCtrlTrfTxService@byteToSend 0072  
                               Log_Message@buf 00AC                                 __pstringtext10 18D0  
                 ??_USBHIDCBSetIdleRateHandler 0071                               ?_USBStallHandler 0070  
                         ?i1_GenericQueue_Init 0070                       USBStdFeatureReqHandler@p 005B  
                                     intlevel1 0000        __end_of_USER_USB_CALLBACK_EVENT_HANDLER 1472  
             ?_USER_USB_CALLBACK_EVENT_HANDLER 0050              ??_USER_USB_CALLBACK_EVENT_HANDLER 007D  
              _USER_USB_CALLBACK_EVENT_HANDLER 1435                              ??i1_USBDeviceInit 0070  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 1EE1  
                    _USBHIDCBSetReportComplete 1EBB           __end_of_EUSART_SetRxInterruptHandler 1EF9  
                 _EUSART_SetRxInterruptHandler 1EF1                      GenericQueue_CopyToArray@q 00C0  
                    GenericQueue_Contains@item 00C0                 __end_ofi1_USBTransferOnePacket 0CF0  
                       ??_USBConfigureEndpoint 0071                          ?_USBCtrlTrfOutHandler 0070  
                           _EUSART_Receive_ISR 13C1                            _USBCtrlTrfRxService 0F4D  
EUSART_SetFramingErrorHandler@interruptHandler 00A8                             _USBWakeFromSuspend 11E9  
                             _SysTimeInterrupt 1084                        _USBStdFeatureReqHandler 01D3  
                   PS2Keyboard_GetScanCode@ret 00C8                            _USBCtrlTrfTxService 1734  
                                __pstringtext1 0403                                  __pstringtext2 1000  
                                __pstringtext3 18CA                                  __pstringtext4 18D4  
                                __pstringtext5 1800                                  __pstringtext6 183F  
                                __pstringtext7 1873                                  __pstringtext8 189C  
                                __pstringtext9 18B8                            ?_EUSART_Receive_ISR 0070  
                          ?_USBWakeFromSuspend 0070                          ??_USBCtrlTrfInHandler 0073  
                        _USBAlternateInterface 006E                       ?_PS2Keyboard_GetScanCode 0070  
                  ?_IOCAF4_SetInterruptHandler 00A8          USBHIDCBSetIdleRateHandler@newIdleRate 0070  
                          USBEnableEndpoint@ep 007C                                _endpoint_number 015C  
                        ??i1_GenericQueue_Init 0074                           ?_USBCtrlTrfRxService 0070  
                                  ?_IOCAF4_ISR 0070                                    ?_IOCAF5_ISR 0070  
                           EUSART_Write@txData 00A9                 __end_of_PIN_MANAGER_Initialize 138A  
                     ?_USBCtrlEPAllowDataStage 0070                           ?_USBCtrlTrfTxService 0070  
                                   _SOFCounter 0065               ??_IOCAF4_DefaultInterruptHandler 0070  
              ?_IOCAF4_DefaultInterruptHandler 0070                   _USBStatusStageTimeoutCounter 015A  
                              _PIN_MANAGER_IOC 1F1C                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 0144                           ??_USBWakeFromSuspend 007D  
                   USBTransferOnePacket@handle 00B1     APP_KeyboardTasks@needToSendNewReportPacket 00D4  
                       i1_GenericQueue_Enqueue 087E                                     _USB_CD_Ptr 18D4  
